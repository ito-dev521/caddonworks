"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/projects/page",{

/***/ "(app-pages-browser)/./src/contexts/auth-context.tsx":
/*!***************************************!*\
  !*** ./src/contexts/auth-context.tsx ***!
  \***************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthProvider: function() { return /* binding */ AuthProvider; },\n/* harmony export */   useAuth: function() { return /* binding */ useAuth; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/supabase */ \"(app-pages-browser)/./src/lib/supabase.ts\");\n/* __next_internal_client_entry_do_not_use__ useAuth,AuthProvider auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\nconst AuthContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nfunction useAuth() {\n    _s();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(AuthContext);\n    if (context === undefined) {\n        throw new Error(\"useAuth must be used within an AuthProvider\");\n    }\n    return context;\n}\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nfunction AuthProvider(param) {\n    let { children } = param;\n    _s1();\n    const [user, setUser] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [userProfile, setUserProfile] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [userRole, setUserRole] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [userOrganization, setUserOrganization] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const fetchingRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        let mounted = true;\n        // Get initial session\n        const getInitialSession = async ()=>{\n            try {\n                const { data: { session }, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_2__.supabase.auth.getSession();\n                if (!mounted) return;\n                if (error) {\n                    console.error(\"AuthProvider: セッション取得エラー:\", error);\n                    setLoading(false);\n                    return;\n                }\n                var _session_user;\n                setUser((_session_user = session === null || session === void 0 ? void 0 : session.user) !== null && _session_user !== void 0 ? _session_user : null);\n                if ((session === null || session === void 0 ? void 0 : session.user) && (session === null || session === void 0 ? void 0 : session.access_token)) {\n                    // setTimeoutで次のイベントループで実行（React Strict Mode対策）\n                    setTimeout(()=>{\n                        if (mounted) {\n                            fetchUserProfile(session.user.id);\n                        }\n                    }, 0);\n                } else {\n                    setLoading(false);\n                }\n            } catch (error) {\n                console.error(\"AuthProvider: 初期化エラー:\", error);\n                // エラーが発生してもローディング状態を解除\n                if (mounted) {\n                    setUser(null);\n                    setUserProfile(null);\n                    setUserRole(null);\n                    setUserOrganization(null);\n                    setLoading(false);\n                }\n            }\n        };\n        getInitialSession();\n        // Listen for auth changes\n        const { data: { subscription } } = _lib_supabase__WEBPACK_IMPORTED_MODULE_2__.supabase.auth.onAuthStateChange(async (event, session)=>{\n            var _session_user;\n            setUser((_session_user = session === null || session === void 0 ? void 0 : session.user) !== null && _session_user !== void 0 ? _session_user : null);\n            if ((session === null || session === void 0 ? void 0 : session.user) && event === \"SIGNED_IN\") {\n                // ログイン時のみプロフィールを取得（重複を避ける）\n                // setTimeoutで次のイベントループで実行（React Strict Mode対策）\n                setTimeout(()=>{\n                    fetchUserProfile(session.user.id);\n                }, 0);\n            } else if (event === \"SIGNED_OUT\") {\n                setUserProfile(null);\n                setUserRole(null);\n                setUserOrganization(null);\n            }\n            // ローディング状態を更新（初期化後は常にfalse）\n            if (event !== \"INITIAL_SESSION\") {\n                setLoading(false);\n            }\n        });\n        return ()=>{\n            mounted = false;\n            subscription.unsubscribe();\n        };\n    }, []) // fetchUserProfileを依存配列から削除\n    ;\n    const fetchUserProfile = async (authUserId)=>{\n        // 重複実行を防ぐ\n        if (fetchingRef.current === authUserId) {\n            return;\n        }\n        fetchingRef.current = authUserId;\n        try {\n            // Fetch user profile\n            const { data: profile, error: profileError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_2__.supabase.from(\"users\").select(\"*\").eq(\"auth_user_id\", authUserId).single();\n            if (profileError && profileError.code !== \"PGRST116\") {\n                console.error(\"Error fetching user profile:\", profileError);\n            // プロフィールが見つからない場合でも続行\n            }\n            // 表示名のフォールバック: 空なら氏名→メールローカル部の順で補完\n            let normalizedProfile = profile ? {\n                ...profile\n            } : null;\n            if (normalizedProfile) {\n                const currentDisplay = (normalizedProfile.display_name || \"\").trim();\n                if (!currentDisplay) {\n                    try {\n                        var _authUserInfo_user;\n                        const { data: authUserInfo } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_2__.supabase.auth.getUser();\n                        const email = normalizedProfile.email || ((_authUserInfo_user = authUserInfo.user) === null || _authUserInfo_user === void 0 ? void 0 : _authUserInfo_user.email) || \"\";\n                        normalizedProfile.display_name = (normalizedProfile.formal_name || \"\").trim() || (email ? email.split(\"@\")[0] : \"ユーザー\");\n                    } catch (e) {\n                        normalizedProfile.display_name = (normalizedProfile.formal_name || \"\").trim() || \"ユーザー\";\n                    }\n                }\n            }\n            setUserProfile(normalizedProfile);\n            // Fetch user role and organization from memberships\n            // プロフィールがある場合はprofile.id、ない場合はauthUserIdを使用\n            const userId = (profile === null || profile === void 0 ? void 0 : profile.id) || authUserId;\n            const { data: memberships, error: roleError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_2__.supabase.from(\"memberships\").select(\"role, org_id\").eq(\"user_id\", userId);\n            if (roleError && roleError.code !== \"PGRST116\") {\n                console.error(\"Error fetching user role:\", roleError);\n                return;\n            }\n            // ロールの解決（複数メンバーシップを考慮して優先度で選択）\n            const priority = [\n                \"OrgAdmin\",\n                \"Staff\",\n                \"Contractor\",\n                \"Reviewer\",\n                \"Auditor\"\n            ];\n            const membershipsArray = Array.isArray(memberships) ? memberships : memberships ? [\n                memberships\n            ] : [];\n            const pickByPriority = ()=>{\n                for (const role of priority){\n                    const found = membershipsArray.find((m)=>m.role === role);\n                    if (found) return found;\n                }\n                return membershipsArray[0] || null;\n            };\n            const pickedMembership = pickByPriority();\n            let resolvedRole = (pickedMembership === null || pickedMembership === void 0 ? void 0 : pickedMembership.role) || null;\n            // メンバーシップが無い場合は、管理者メールのフォールバックで Admin 扱い\n            try {\n                if (!resolvedRole) {\n                    var _authUserInfo_user1;\n                    const { data: authUserInfo } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_2__.supabase.auth.getUser();\n                    const email = ((_authUserInfo_user1 = authUserInfo.user) === null || _authUserInfo_user1 === void 0 ? void 0 : _authUserInfo_user1.email) || (profile === null || profile === void 0 ? void 0 : profile.email) || \"\";\n                    const adminEmails = (\"ito.dev@ii-stylelab.com\" || 0).split(\",\").map((e)=>e.trim().toLowerCase());\n                    console.log(\"Admin check:\", {\n                        email,\n                        adminEmails,\n                        includes: adminEmails.includes(email.toLowerCase())\n                    });\n                    if (email && adminEmails.includes(email.toLowerCase())) {\n                        console.log(\"Setting role to Admin for\", email);\n                        resolvedRole = \"Admin\";\n                    }\n                }\n            } catch (_) {\n            // 取得失敗時は無視\n            }\n            setUserRole(resolvedRole || null);\n            // 組織情報を取得\n            const orgIdToLoad = pickedMembership === null || pickedMembership === void 0 ? void 0 : pickedMembership.org_id;\n            if (orgIdToLoad) {\n                const { data: orgData, error: orgError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_2__.supabase.from(\"organizations\").select(\"id, name\").eq(\"id\", orgIdToLoad).single();\n                if (orgError) {\n                    console.error(\"Error fetching organization:\", orgError);\n                    setUserOrganization(null);\n                } else {\n                    setUserOrganization({\n                        id: orgData.id,\n                        name: orgData.name\n                    });\n                }\n            } else {\n                setUserOrganization(null);\n            }\n            // プロフィールがない場合（発注者の場合）は基本的な情報を作成\n            if (!profile && pickedMembership) {\n                const { data: authUser } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_2__.supabase.auth.getUser();\n                if (authUser.user) {\n                    var _authUser_user_email, _authUser_user_email1;\n                    setUserProfile({\n                        id: authUserId,\n                        auth_user_id: authUserId,\n                        display_name: ((_authUser_user_email = authUser.user.email) === null || _authUser_user_email === void 0 ? void 0 : _authUser_user_email.split(\"@\")[0]) || \"管理者\",\n                        formal_name: ((_authUser_user_email1 = authUser.user.email) === null || _authUser_user_email1 === void 0 ? void 0 : _authUser_user_email1.split(\"@\")[0]) || \"管理者\",\n                        email: authUser.user.email || \"\",\n                        specialties: [],\n                        qualifications: [],\n                        created_at: new Date().toISOString(),\n                        updated_at: new Date().toISOString()\n                    });\n                }\n            }\n        } catch (error) {\n            console.error(\"Error in fetchUserProfile:\", error);\n        } finally{\n            // 実行完了後にfetchingRefをクリア\n            fetchingRef.current = null;\n            setLoading(false) // ローディング状態を解除\n            ;\n        }\n    };\n    const signIn = async (email, password)=>{\n        setLoading(true);\n        try {\n            // タイムアウト処理を追加\n            const authPromise = _lib_supabase__WEBPACK_IMPORTED_MODULE_2__.supabase.auth.signInWithPassword({\n                email,\n                password\n            });\n            const timeoutPromise = new Promise((_, reject)=>{\n                setTimeout(()=>reject(new Error(\"認証タイムアウト（30秒）\")), 30000);\n            });\n            const { data, error } = await Promise.race([\n                authPromise,\n                timeoutPromise\n            ]);\n            if (error) throw error;\n            // 認証成功後、ユーザープロフィールを手動で取得\n            if (data === null || data === void 0 ? void 0 : data.user) {\n                // fetchUserProfileを直接呼び出さず、setTimeoutで遅延実行\n                setTimeout(()=>{\n                    fetchUserProfile(data.user.id);\n                }, 50);\n            }\n        } catch (error) {\n            console.error(\"signIn: 認証エラー\", error);\n            throw error;\n        } finally{\n            setLoading(false);\n        }\n    };\n    const signUp = async (email, password, userData)=>{\n        setLoading(true);\n        try {\n            const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_2__.supabase.auth.signUp({\n                email,\n                password,\n                options: {\n                    data: {\n                        display_name: userData.display_name,\n                        specialties: userData.specialties || [],\n                        qualifications: userData.qualifications || []\n                    }\n                }\n            });\n            if (error) throw error;\n            // Create user profile after successful signup\n            if (data.user) {\n                const { error: profileError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_2__.supabase.from(\"users\").insert({\n                    auth_user_id: data.user.id,\n                    email: data.user.email,\n                    display_name: userData.display_name || \"\",\n                    specialties: userData.specialties || [],\n                    qualifications: userData.qualifications || [],\n                    experience_years: userData.experience_years\n                });\n                if (profileError) {\n                    console.error(\"Error creating user profile:\", profileError);\n                }\n            }\n        } finally{\n            setLoading(false);\n        }\n    };\n    const signOut = async ()=>{\n        setLoading(true);\n        try {\n            const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_2__.supabase.auth.signOut();\n            if (error) throw error;\n            setUser(null);\n            setUserProfile(null);\n            setUserRole(null);\n        } finally{\n            setLoading(false);\n        }\n    };\n    const updateProfile = async (updates)=>{\n        if (!userProfile) {\n            console.error(\"updateProfile: userProfile is null\");\n            throw new Error(\"ユーザープロフィールが見つかりません\");\n        }\n        try {\n            const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_2__.supabase.from(\"users\").update(updates).eq(\"id\", userProfile.id).select().single();\n            if (error) {\n                console.error(\"updateProfile: Supabaseエラー\", error);\n                throw error;\n            }\n            setUserProfile({\n                ...userProfile,\n                ...updates\n            });\n        } catch (error) {\n            console.error(\"Error updating profile:\", error);\n            throw error;\n        }\n    };\n    const getRedirectPath = ()=>{\n        // 発注者(OrgAdmin/Staff)は案件管理へ、受注者は案件一覧へ\n        if (!userRole) return \"/dashboard\";\n        if (userRole === \"OrgAdmin\" || userRole === \"Staff\") return \"/projects\";\n        if (userRole === \"Contractor\") return \"/jobs\";\n        if (userRole === \"Admin\") return \"/admin/users\";\n        if (userRole === \"Reviewer\") return \"/reviews\";\n        return \"/dashboard\";\n    };\n    const value = {\n        user,\n        userProfile,\n        userRole,\n        userOrganization,\n        loading,\n        signIn,\n        signUp,\n        signOut,\n        updateProfile,\n        getRedirectPath\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(AuthContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/sayuri/caddonworks/src/contexts/auth-context.tsx\",\n        lineNumber: 379,\n        columnNumber: 5\n    }, this);\n}\n_s1(AuthProvider, \"ccYiCj2xqj5Z6erfBYaQwasZsfk=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/contexts/auth-context.tsx\n"));

/***/ })

});