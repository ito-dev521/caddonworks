/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/escodegen";
exports.ids = ["vendor-chunks/escodegen"];
exports.modules = {

/***/ "(rsc)/./node_modules/escodegen/escodegen.js":
/*!*********************************************!*\
  !*** ./node_modules/escodegen/escodegen.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/*\n  Copyright (C) 2012-2014 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2015 Ingvar Stepanyan <me@rreverser.com>\n  Copyright (C) 2014 Ivan Nikulin <ifaaan@gmail.com>\n  Copyright (C) 2012-2013 Michael Ficarra <escodegen.copyright@michael.ficarra.me>\n  Copyright (C) 2012-2013 Mathias Bynens <mathias@qiwi.be>\n  Copyright (C) 2013 Irakli Gozalishvili <rfobic@gmail.com>\n  Copyright (C) 2012 Robert Gust-Bardon <donate@robert.gust-bardon.org>\n  Copyright (C) 2012 John Freeman <jfreeman08@gmail.com>\n  Copyright (C) 2011-2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\n  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>\n  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/ /*global exports:true, require:true, global:true*/ (function() {\n    \"use strict\";\n    var Syntax, Precedence, BinaryPrecedence, SourceNode, estraverse, esutils, base, indent, json, renumber, hexadecimal, quotes, escapeless, newline, space, parentheses, semicolons, safeConcatenation, directive, extra, parse, sourceMap, sourceCode, preserveBlankLines, FORMAT_MINIFY, FORMAT_DEFAULTS;\n    estraverse = __webpack_require__(/*! estraverse */ \"(rsc)/./node_modules/escodegen/node_modules/estraverse/estraverse.js\");\n    esutils = __webpack_require__(/*! esutils */ \"(rsc)/./node_modules/esutils/lib/utils.js\");\n    Syntax = estraverse.Syntax;\n    // Generation is done by generateExpression.\n    function isExpression(node) {\n        return CodeGenerator.Expression.hasOwnProperty(node.type);\n    }\n    // Generation is done by generateStatement.\n    function isStatement(node) {\n        return CodeGenerator.Statement.hasOwnProperty(node.type);\n    }\n    Precedence = {\n        Sequence: 0,\n        Yield: 1,\n        Assignment: 1,\n        Conditional: 2,\n        ArrowFunction: 2,\n        LogicalOR: 3,\n        LogicalAND: 4,\n        BitwiseOR: 5,\n        BitwiseXOR: 6,\n        BitwiseAND: 7,\n        Equality: 8,\n        Relational: 9,\n        BitwiseSHIFT: 10,\n        Additive: 11,\n        Multiplicative: 12,\n        Exponentiation: 13,\n        Await: 14,\n        Unary: 14,\n        Postfix: 15,\n        Call: 16,\n        New: 17,\n        TaggedTemplate: 18,\n        Member: 19,\n        Primary: 20\n    };\n    BinaryPrecedence = {\n        \"||\": Precedence.LogicalOR,\n        \"&&\": Precedence.LogicalAND,\n        \"|\": Precedence.BitwiseOR,\n        \"^\": Precedence.BitwiseXOR,\n        \"&\": Precedence.BitwiseAND,\n        \"==\": Precedence.Equality,\n        \"!=\": Precedence.Equality,\n        \"===\": Precedence.Equality,\n        \"!==\": Precedence.Equality,\n        \"is\": Precedence.Equality,\n        \"isnt\": Precedence.Equality,\n        \"<\": Precedence.Relational,\n        \">\": Precedence.Relational,\n        \"<=\": Precedence.Relational,\n        \">=\": Precedence.Relational,\n        \"in\": Precedence.Relational,\n        \"instanceof\": Precedence.Relational,\n        \"<<\": Precedence.BitwiseSHIFT,\n        \">>\": Precedence.BitwiseSHIFT,\n        \">>>\": Precedence.BitwiseSHIFT,\n        \"+\": Precedence.Additive,\n        \"-\": Precedence.Additive,\n        \"*\": Precedence.Multiplicative,\n        \"%\": Precedence.Multiplicative,\n        \"/\": Precedence.Multiplicative,\n        \"**\": Precedence.Exponentiation\n    };\n    //Flags\n    var F_ALLOW_IN = 1, F_ALLOW_CALL = 1 << 1, F_ALLOW_UNPARATH_NEW = 1 << 2, F_FUNC_BODY = 1 << 3, F_DIRECTIVE_CTX = 1 << 4, F_SEMICOLON_OPT = 1 << 5;\n    //Expression flag sets\n    //NOTE: Flag order:\n    // F_ALLOW_IN\n    // F_ALLOW_CALL\n    // F_ALLOW_UNPARATH_NEW\n    var E_FTT = F_ALLOW_CALL | F_ALLOW_UNPARATH_NEW, E_TTF = F_ALLOW_IN | F_ALLOW_CALL, E_TTT = F_ALLOW_IN | F_ALLOW_CALL | F_ALLOW_UNPARATH_NEW, E_TFF = F_ALLOW_IN, E_FFT = F_ALLOW_UNPARATH_NEW, E_TFT = F_ALLOW_IN | F_ALLOW_UNPARATH_NEW;\n    //Statement flag sets\n    //NOTE: Flag order:\n    // F_ALLOW_IN\n    // F_FUNC_BODY\n    // F_DIRECTIVE_CTX\n    // F_SEMICOLON_OPT\n    var S_TFFF = F_ALLOW_IN, S_TFFT = F_ALLOW_IN | F_SEMICOLON_OPT, S_FFFF = 0x00, S_TFTF = F_ALLOW_IN | F_DIRECTIVE_CTX, S_TTFF = F_ALLOW_IN | F_FUNC_BODY;\n    function getDefaultOptions() {\n        // default options\n        return {\n            indent: null,\n            base: null,\n            parse: null,\n            comment: false,\n            format: {\n                indent: {\n                    style: \"    \",\n                    base: 0,\n                    adjustMultilineComment: false\n                },\n                newline: \"\\n\",\n                space: \" \",\n                json: false,\n                renumber: false,\n                hexadecimal: false,\n                quotes: \"single\",\n                escapeless: false,\n                compact: false,\n                parentheses: true,\n                semicolons: true,\n                safeConcatenation: false,\n                preserveBlankLines: false\n            },\n            moz: {\n                comprehensionExpressionStartsWithAssignment: false,\n                starlessGenerator: false\n            },\n            sourceMap: null,\n            sourceMapRoot: null,\n            sourceMapWithCode: false,\n            directive: false,\n            raw: true,\n            verbatim: null,\n            sourceCode: null\n        };\n    }\n    function stringRepeat(str, num) {\n        var result = \"\";\n        for(num |= 0; num > 0; num >>>= 1, str += str){\n            if (num & 1) {\n                result += str;\n            }\n        }\n        return result;\n    }\n    function hasLineTerminator(str) {\n        return /[\\r\\n]/g.test(str);\n    }\n    function endsWithLineTerminator(str) {\n        var len = str.length;\n        return len && esutils.code.isLineTerminator(str.charCodeAt(len - 1));\n    }\n    function merge(target, override) {\n        var key;\n        for(key in override){\n            if (override.hasOwnProperty(key)) {\n                target[key] = override[key];\n            }\n        }\n        return target;\n    }\n    function updateDeeply(target, override) {\n        var key, val;\n        function isHashObject(target) {\n            return typeof target === \"object\" && target instanceof Object && !(target instanceof RegExp);\n        }\n        for(key in override){\n            if (override.hasOwnProperty(key)) {\n                val = override[key];\n                if (isHashObject(val)) {\n                    if (isHashObject(target[key])) {\n                        updateDeeply(target[key], val);\n                    } else {\n                        target[key] = updateDeeply({}, val);\n                    }\n                } else {\n                    target[key] = val;\n                }\n            }\n        }\n        return target;\n    }\n    function generateNumber(value) {\n        var result, point, temp, exponent, pos;\n        if (value !== value) {\n            throw new Error(\"Numeric literal whose value is NaN\");\n        }\n        if (value < 0 || value === 0 && 1 / value < 0) {\n            throw new Error(\"Numeric literal whose value is negative\");\n        }\n        if (value === 1 / 0) {\n            return json ? \"null\" : renumber ? \"1e400\" : \"1e+400\";\n        }\n        result = \"\" + value;\n        if (!renumber || result.length < 3) {\n            return result;\n        }\n        point = result.indexOf(\".\");\n        if (!json && result.charCodeAt(0) === 0x30 /* 0 */  && point === 1) {\n            point = 0;\n            result = result.slice(1);\n        }\n        temp = result;\n        result = result.replace(\"e+\", \"e\");\n        exponent = 0;\n        if ((pos = temp.indexOf(\"e\")) > 0) {\n            exponent = +temp.slice(pos + 1);\n            temp = temp.slice(0, pos);\n        }\n        if (point >= 0) {\n            exponent -= temp.length - point - 1;\n            temp = +(temp.slice(0, point) + temp.slice(point + 1)) + \"\";\n        }\n        pos = 0;\n        while(temp.charCodeAt(temp.length + pos - 1) === 0x30 /* 0 */ ){\n            --pos;\n        }\n        if (pos !== 0) {\n            exponent -= pos;\n            temp = temp.slice(0, pos);\n        }\n        if (exponent !== 0) {\n            temp += \"e\" + exponent;\n        }\n        if ((temp.length < result.length || hexadecimal && value > 1e12 && Math.floor(value) === value && (temp = \"0x\" + value.toString(16)).length < result.length) && +temp === value) {\n            result = temp;\n        }\n        return result;\n    }\n    // Generate valid RegExp expression.\n    // This function is based on https://github.com/Constellation/iv Engine\n    function escapeRegExpCharacter(ch, previousIsBackslash) {\n        // not handling '\\' and handling \\u2028 or \\u2029 to unicode escape sequence\n        if ((ch & ~1) === 0x2028) {\n            return (previousIsBackslash ? \"u\" : \"\\\\u\") + (ch === 0x2028 ? \"2028\" : \"2029\");\n        } else if (ch === 10 || ch === 13) {\n            return (previousIsBackslash ? \"\" : \"\\\\\") + (ch === 10 ? \"n\" : \"r\");\n        }\n        return String.fromCharCode(ch);\n    }\n    function generateRegExp(reg) {\n        var match, result, flags, i, iz, ch, characterInBrack, previousIsBackslash;\n        result = reg.toString();\n        if (reg.source) {\n            // extract flag from toString result\n            match = result.match(/\\/([^/]*)$/);\n            if (!match) {\n                return result;\n            }\n            flags = match[1];\n            result = \"\";\n            characterInBrack = false;\n            previousIsBackslash = false;\n            for(i = 0, iz = reg.source.length; i < iz; ++i){\n                ch = reg.source.charCodeAt(i);\n                if (!previousIsBackslash) {\n                    if (characterInBrack) {\n                        if (ch === 93) {\n                            characterInBrack = false;\n                        }\n                    } else {\n                        if (ch === 47) {\n                            result += \"\\\\\";\n                        } else if (ch === 91) {\n                            characterInBrack = true;\n                        }\n                    }\n                    result += escapeRegExpCharacter(ch, previousIsBackslash);\n                    previousIsBackslash = ch === 92; // \\\n                } else {\n                    // if new RegExp(\"\\\\\\n') is provided, create /\\n/\n                    result += escapeRegExpCharacter(ch, previousIsBackslash);\n                    // prevent like /\\\\[/]/\n                    previousIsBackslash = false;\n                }\n            }\n            return \"/\" + result + \"/\" + flags;\n        }\n        return result;\n    }\n    function escapeAllowedCharacter(code, next) {\n        var hex;\n        if (code === 0x08 /* \\b */ ) {\n            return \"\\\\b\";\n        }\n        if (code === 0x0C /* \\f */ ) {\n            return \"\\\\f\";\n        }\n        if (code === 0x09 /* \\t */ ) {\n            return \"\\\\t\";\n        }\n        hex = code.toString(16).toUpperCase();\n        if (json || code > 0xFF) {\n            return \"\\\\u\" + \"0000\".slice(hex.length) + hex;\n        } else if (code === 0x0000 && !esutils.code.isDecimalDigit(next)) {\n            return \"\\\\0\";\n        } else if (code === 0x000B /* \\v */ ) {\n            return \"\\\\x0B\";\n        } else {\n            return \"\\\\x\" + \"00\".slice(hex.length) + hex;\n        }\n    }\n    function escapeDisallowedCharacter(code) {\n        if (code === 0x5C /* \\ */ ) {\n            return \"\\\\\\\\\";\n        }\n        if (code === 0x0A /* \\n */ ) {\n            return \"\\\\n\";\n        }\n        if (code === 0x0D /* \\r */ ) {\n            return \"\\\\r\";\n        }\n        if (code === 0x2028) {\n            return \"\\\\u2028\";\n        }\n        if (code === 0x2029) {\n            return \"\\\\u2029\";\n        }\n        throw new Error(\"Incorrectly classified character\");\n    }\n    function escapeDirective(str) {\n        var i, iz, code, quote;\n        quote = quotes === \"double\" ? '\"' : \"'\";\n        for(i = 0, iz = str.length; i < iz; ++i){\n            code = str.charCodeAt(i);\n            if (code === 0x27 /* ' */ ) {\n                quote = '\"';\n                break;\n            } else if (code === 0x22 /* \" */ ) {\n                quote = \"'\";\n                break;\n            } else if (code === 0x5C /* \\ */ ) {\n                ++i;\n            }\n        }\n        return quote + str + quote;\n    }\n    function escapeString(str) {\n        var result = \"\", i, len, code, singleQuotes = 0, doubleQuotes = 0, single, quote;\n        for(i = 0, len = str.length; i < len; ++i){\n            code = str.charCodeAt(i);\n            if (code === 0x27 /* ' */ ) {\n                ++singleQuotes;\n            } else if (code === 0x22 /* \" */ ) {\n                ++doubleQuotes;\n            } else if (code === 0x2F /* / */  && json) {\n                result += \"\\\\\";\n            } else if (esutils.code.isLineTerminator(code) || code === 0x5C /* \\ */ ) {\n                result += escapeDisallowedCharacter(code);\n                continue;\n            } else if (!esutils.code.isIdentifierPartES5(code) && (json && code < 0x20 /* SP */  || !json && !escapeless && (code < 0x20 /* SP */  || code > 0x7E /* ~ */ ))) {\n                result += escapeAllowedCharacter(code, str.charCodeAt(i + 1));\n                continue;\n            }\n            result += String.fromCharCode(code);\n        }\n        single = !(quotes === \"double\" || quotes === \"auto\" && doubleQuotes < singleQuotes);\n        quote = single ? \"'\" : '\"';\n        if (!(single ? singleQuotes : doubleQuotes)) {\n            return quote + result + quote;\n        }\n        str = result;\n        result = quote;\n        for(i = 0, len = str.length; i < len; ++i){\n            code = str.charCodeAt(i);\n            if (code === 0x27 /* ' */  && single || code === 0x22 /* \" */  && !single) {\n                result += \"\\\\\";\n            }\n            result += String.fromCharCode(code);\n        }\n        return result + quote;\n    }\n    /**\n     * flatten an array to a string, where the array can contain\n     * either strings or nested arrays\n     */ function flattenToString(arr) {\n        var i, iz, elem, result = \"\";\n        for(i = 0, iz = arr.length; i < iz; ++i){\n            elem = arr[i];\n            result += Array.isArray(elem) ? flattenToString(elem) : elem;\n        }\n        return result;\n    }\n    /**\n     * convert generated to a SourceNode when source maps are enabled.\n     */ function toSourceNodeWhenNeeded(generated, node) {\n        if (!sourceMap) {\n            // with no source maps, generated is either an\n            // array or a string.  if an array, flatten it.\n            // if a string, just return it\n            if (Array.isArray(generated)) {\n                return flattenToString(generated);\n            } else {\n                return generated;\n            }\n        }\n        if (node == null) {\n            if (generated instanceof SourceNode) {\n                return generated;\n            } else {\n                node = {};\n            }\n        }\n        if (node.loc == null) {\n            return new SourceNode(null, null, sourceMap, generated, node.name || null);\n        }\n        return new SourceNode(node.loc.start.line, node.loc.start.column, sourceMap === true ? node.loc.source || null : sourceMap, generated, node.name || null);\n    }\n    function noEmptySpace() {\n        return space ? space : \" \";\n    }\n    function join(left, right) {\n        var leftSource, rightSource, leftCharCode, rightCharCode;\n        leftSource = toSourceNodeWhenNeeded(left).toString();\n        if (leftSource.length === 0) {\n            return [\n                right\n            ];\n        }\n        rightSource = toSourceNodeWhenNeeded(right).toString();\n        if (rightSource.length === 0) {\n            return [\n                left\n            ];\n        }\n        leftCharCode = leftSource.charCodeAt(leftSource.length - 1);\n        rightCharCode = rightSource.charCodeAt(0);\n        if ((leftCharCode === 0x2B /* + */  || leftCharCode === 0x2D /* - */ ) && leftCharCode === rightCharCode || esutils.code.isIdentifierPartES5(leftCharCode) && esutils.code.isIdentifierPartES5(rightCharCode) || leftCharCode === 0x2F /* / */  && rightCharCode === 0x69 /* i */ ) {\n            return [\n                left,\n                noEmptySpace(),\n                right\n            ];\n        } else if (esutils.code.isWhiteSpace(leftCharCode) || esutils.code.isLineTerminator(leftCharCode) || esutils.code.isWhiteSpace(rightCharCode) || esutils.code.isLineTerminator(rightCharCode)) {\n            return [\n                left,\n                right\n            ];\n        }\n        return [\n            left,\n            space,\n            right\n        ];\n    }\n    function addIndent(stmt) {\n        return [\n            base,\n            stmt\n        ];\n    }\n    function withIndent(fn) {\n        var previousBase;\n        previousBase = base;\n        base += indent;\n        fn(base);\n        base = previousBase;\n    }\n    function calculateSpaces(str) {\n        var i;\n        for(i = str.length - 1; i >= 0; --i){\n            if (esutils.code.isLineTerminator(str.charCodeAt(i))) {\n                break;\n            }\n        }\n        return str.length - 1 - i;\n    }\n    function adjustMultilineComment(value, specialBase) {\n        var array, i, len, line, j, spaces, previousBase, sn;\n        array = value.split(/\\r\\n|[\\r\\n]/);\n        spaces = Number.MAX_VALUE;\n        // first line doesn't have indentation\n        for(i = 1, len = array.length; i < len; ++i){\n            line = array[i];\n            j = 0;\n            while(j < line.length && esutils.code.isWhiteSpace(line.charCodeAt(j))){\n                ++j;\n            }\n            if (spaces > j) {\n                spaces = j;\n            }\n        }\n        if (typeof specialBase !== \"undefined\") {\n            // pattern like\n            // {\n            //   var t = 20;  /*\n            //                 * this is comment\n            //                 */\n            // }\n            previousBase = base;\n            if (array[1][spaces] === \"*\") {\n                specialBase += \" \";\n            }\n            base = specialBase;\n        } else {\n            if (spaces & 1) {\n                // /*\n                //  *\n                //  */\n                // If spaces are odd number, above pattern is considered.\n                // We waste 1 space.\n                --spaces;\n            }\n            previousBase = base;\n        }\n        for(i = 1, len = array.length; i < len; ++i){\n            sn = toSourceNodeWhenNeeded(addIndent(array[i].slice(spaces)));\n            array[i] = sourceMap ? sn.join(\"\") : sn;\n        }\n        base = previousBase;\n        return array.join(\"\\n\");\n    }\n    function generateComment(comment, specialBase) {\n        if (comment.type === \"Line\") {\n            if (endsWithLineTerminator(comment.value)) {\n                return \"//\" + comment.value;\n            } else {\n                // Always use LineTerminator\n                var result = \"//\" + comment.value;\n                if (!preserveBlankLines) {\n                    result += \"\\n\";\n                }\n                return result;\n            }\n        }\n        if (extra.format.indent.adjustMultilineComment && /[\\n\\r]/.test(comment.value)) {\n            return adjustMultilineComment(\"/*\" + comment.value + \"*/\", specialBase);\n        }\n        return \"/*\" + comment.value + \"*/\";\n    }\n    function addComments(stmt, result) {\n        var i, len, comment, save, tailingToStatement, specialBase, fragment, extRange, range, prevRange, prefix, infix, suffix, count;\n        if (stmt.leadingComments && stmt.leadingComments.length > 0) {\n            save = result;\n            if (preserveBlankLines) {\n                comment = stmt.leadingComments[0];\n                result = [];\n                extRange = comment.extendedRange;\n                range = comment.range;\n                prefix = sourceCode.substring(extRange[0], range[0]);\n                count = (prefix.match(/\\n/g) || []).length;\n                if (count > 0) {\n                    result.push(stringRepeat(\"\\n\", count));\n                    result.push(addIndent(generateComment(comment)));\n                } else {\n                    result.push(prefix);\n                    result.push(generateComment(comment));\n                }\n                prevRange = range;\n                for(i = 1, len = stmt.leadingComments.length; i < len; i++){\n                    comment = stmt.leadingComments[i];\n                    range = comment.range;\n                    infix = sourceCode.substring(prevRange[1], range[0]);\n                    count = (infix.match(/\\n/g) || []).length;\n                    result.push(stringRepeat(\"\\n\", count));\n                    result.push(addIndent(generateComment(comment)));\n                    prevRange = range;\n                }\n                suffix = sourceCode.substring(range[1], extRange[1]);\n                count = (suffix.match(/\\n/g) || []).length;\n                result.push(stringRepeat(\"\\n\", count));\n            } else {\n                comment = stmt.leadingComments[0];\n                result = [];\n                if (safeConcatenation && stmt.type === Syntax.Program && stmt.body.length === 0) {\n                    result.push(\"\\n\");\n                }\n                result.push(generateComment(comment));\n                if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                    result.push(\"\\n\");\n                }\n                for(i = 1, len = stmt.leadingComments.length; i < len; ++i){\n                    comment = stmt.leadingComments[i];\n                    fragment = [\n                        generateComment(comment)\n                    ];\n                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\n                        fragment.push(\"\\n\");\n                    }\n                    result.push(addIndent(fragment));\n                }\n            }\n            result.push(addIndent(save));\n        }\n        if (stmt.trailingComments) {\n            if (preserveBlankLines) {\n                comment = stmt.trailingComments[0];\n                extRange = comment.extendedRange;\n                range = comment.range;\n                prefix = sourceCode.substring(extRange[0], range[0]);\n                count = (prefix.match(/\\n/g) || []).length;\n                if (count > 0) {\n                    result.push(stringRepeat(\"\\n\", count));\n                    result.push(addIndent(generateComment(comment)));\n                } else {\n                    result.push(prefix);\n                    result.push(generateComment(comment));\n                }\n            } else {\n                tailingToStatement = !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString());\n                specialBase = stringRepeat(\" \", calculateSpaces(toSourceNodeWhenNeeded([\n                    base,\n                    result,\n                    indent\n                ]).toString()));\n                for(i = 0, len = stmt.trailingComments.length; i < len; ++i){\n                    comment = stmt.trailingComments[i];\n                    if (tailingToStatement) {\n                        // We assume target like following script\n                        //\n                        // var t = 20;  /**\n                        //               * This is comment of t\n                        //               */\n                        if (i === 0) {\n                            // first case\n                            result = [\n                                result,\n                                indent\n                            ];\n                        } else {\n                            result = [\n                                result,\n                                specialBase\n                            ];\n                        }\n                        result.push(generateComment(comment, specialBase));\n                    } else {\n                        result = [\n                            result,\n                            addIndent(generateComment(comment))\n                        ];\n                    }\n                    if (i !== len - 1 && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                        result = [\n                            result,\n                            \"\\n\"\n                        ];\n                    }\n                }\n            }\n        }\n        return result;\n    }\n    function generateBlankLines(start, end, result) {\n        var j, newlineCount = 0;\n        for(j = start; j < end; j++){\n            if (sourceCode[j] === \"\\n\") {\n                newlineCount++;\n            }\n        }\n        for(j = 1; j < newlineCount; j++){\n            result.push(newline);\n        }\n    }\n    function parenthesize(text, current, should) {\n        if (current < should) {\n            return [\n                \"(\",\n                text,\n                \")\"\n            ];\n        }\n        return text;\n    }\n    function generateVerbatimString(string) {\n        var i, iz, result;\n        result = string.split(/\\r\\n|\\n/);\n        for(i = 1, iz = result.length; i < iz; i++){\n            result[i] = newline + base + result[i];\n        }\n        return result;\n    }\n    function generateVerbatim(expr, precedence) {\n        var verbatim, result, prec;\n        verbatim = expr[extra.verbatim];\n        if (typeof verbatim === \"string\") {\n            result = parenthesize(generateVerbatimString(verbatim), Precedence.Sequence, precedence);\n        } else {\n            // verbatim is object\n            result = generateVerbatimString(verbatim.content);\n            prec = verbatim.precedence != null ? verbatim.precedence : Precedence.Sequence;\n            result = parenthesize(result, prec, precedence);\n        }\n        return toSourceNodeWhenNeeded(result, expr);\n    }\n    function CodeGenerator() {}\n    // Helpers.\n    CodeGenerator.prototype.maybeBlock = function(stmt, flags) {\n        var result, noLeadingComment, that = this;\n        noLeadingComment = !extra.comment || !stmt.leadingComments;\n        if (stmt.type === Syntax.BlockStatement && noLeadingComment) {\n            return [\n                space,\n                this.generateStatement(stmt, flags)\n            ];\n        }\n        if (stmt.type === Syntax.EmptyStatement && noLeadingComment) {\n            return \";\";\n        }\n        withIndent(function() {\n            result = [\n                newline,\n                addIndent(that.generateStatement(stmt, flags))\n            ];\n        });\n        return result;\n    };\n    CodeGenerator.prototype.maybeBlockSuffix = function(stmt, result) {\n        var ends = endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString());\n        if (stmt.type === Syntax.BlockStatement && (!extra.comment || !stmt.leadingComments) && !ends) {\n            return [\n                result,\n                space\n            ];\n        }\n        if (ends) {\n            return [\n                result,\n                base\n            ];\n        }\n        return [\n            result,\n            newline,\n            base\n        ];\n    };\n    function generateIdentifier(node) {\n        return toSourceNodeWhenNeeded(node.name, node);\n    }\n    function generateAsyncPrefix(node, spaceRequired) {\n        return node.async ? \"async\" + (spaceRequired ? noEmptySpace() : space) : \"\";\n    }\n    function generateStarSuffix(node) {\n        var isGenerator = node.generator && !extra.moz.starlessGenerator;\n        return isGenerator ? \"*\" + space : \"\";\n    }\n    function generateMethodPrefix(prop) {\n        var func = prop.value, prefix = \"\";\n        if (func.async) {\n            prefix += generateAsyncPrefix(func, !prop.computed);\n        }\n        if (func.generator) {\n            // avoid space before method name\n            prefix += generateStarSuffix(func) ? \"*\" : \"\";\n        }\n        return prefix;\n    }\n    CodeGenerator.prototype.generatePattern = function(node, precedence, flags) {\n        if (node.type === Syntax.Identifier) {\n            return generateIdentifier(node);\n        }\n        return this.generateExpression(node, precedence, flags);\n    };\n    CodeGenerator.prototype.generateFunctionParams = function(node) {\n        var i, iz, result, hasDefault;\n        hasDefault = false;\n        if (node.type === Syntax.ArrowFunctionExpression && !node.rest && (!node.defaults || node.defaults.length === 0) && node.params.length === 1 && node.params[0].type === Syntax.Identifier) {\n            // arg => { } case\n            result = [\n                generateAsyncPrefix(node, true),\n                generateIdentifier(node.params[0])\n            ];\n        } else {\n            result = node.type === Syntax.ArrowFunctionExpression ? [\n                generateAsyncPrefix(node, false)\n            ] : [];\n            result.push(\"(\");\n            if (node.defaults) {\n                hasDefault = true;\n            }\n            for(i = 0, iz = node.params.length; i < iz; ++i){\n                if (hasDefault && node.defaults[i]) {\n                    // Handle default values.\n                    result.push(this.generateAssignment(node.params[i], node.defaults[i], \"=\", Precedence.Assignment, E_TTT));\n                } else {\n                    result.push(this.generatePattern(node.params[i], Precedence.Assignment, E_TTT));\n                }\n                if (i + 1 < iz) {\n                    result.push(\",\" + space);\n                }\n            }\n            if (node.rest) {\n                if (node.params.length) {\n                    result.push(\",\" + space);\n                }\n                result.push(\"...\");\n                result.push(generateIdentifier(node.rest));\n            }\n            result.push(\")\");\n        }\n        return result;\n    };\n    CodeGenerator.prototype.generateFunctionBody = function(node) {\n        var result, expr;\n        result = this.generateFunctionParams(node);\n        if (node.type === Syntax.ArrowFunctionExpression) {\n            result.push(space);\n            result.push(\"=>\");\n        }\n        if (node.expression) {\n            result.push(space);\n            expr = this.generateExpression(node.body, Precedence.Assignment, E_TTT);\n            if (expr.toString().charAt(0) === \"{\") {\n                expr = [\n                    \"(\",\n                    expr,\n                    \")\"\n                ];\n            }\n            result.push(expr);\n        } else {\n            result.push(this.maybeBlock(node.body, S_TTFF));\n        }\n        return result;\n    };\n    CodeGenerator.prototype.generateIterationForStatement = function(operator, stmt, flags) {\n        var result = [\n            \"for\" + (stmt.await ? noEmptySpace() + \"await\" : \"\") + space + \"(\"\n        ], that = this;\n        withIndent(function() {\n            if (stmt.left.type === Syntax.VariableDeclaration) {\n                withIndent(function() {\n                    result.push(stmt.left.kind + noEmptySpace());\n                    result.push(that.generateStatement(stmt.left.declarations[0], S_FFFF));\n                });\n            } else {\n                result.push(that.generateExpression(stmt.left, Precedence.Call, E_TTT));\n            }\n            result = join(result, operator);\n            result = [\n                join(result, that.generateExpression(stmt.right, Precedence.Assignment, E_TTT)),\n                \")\"\n            ];\n        });\n        result.push(this.maybeBlock(stmt.body, flags));\n        return result;\n    };\n    CodeGenerator.prototype.generatePropertyKey = function(expr, computed) {\n        var result = [];\n        if (computed) {\n            result.push(\"[\");\n        }\n        result.push(this.generateExpression(expr, Precedence.Assignment, E_TTT));\n        if (computed) {\n            result.push(\"]\");\n        }\n        return result;\n    };\n    CodeGenerator.prototype.generateAssignment = function(left, right, operator, precedence, flags) {\n        if (Precedence.Assignment < precedence) {\n            flags |= F_ALLOW_IN;\n        }\n        return parenthesize([\n            this.generateExpression(left, Precedence.Call, flags),\n            space + operator + space,\n            this.generateExpression(right, Precedence.Assignment, flags)\n        ], Precedence.Assignment, precedence);\n    };\n    CodeGenerator.prototype.semicolon = function(flags) {\n        if (!semicolons && flags & F_SEMICOLON_OPT) {\n            return \"\";\n        }\n        return \";\";\n    };\n    // Statements.\n    CodeGenerator.Statement = {\n        BlockStatement: function(stmt, flags) {\n            var range, content, result = [\n                \"{\",\n                newline\n            ], that = this;\n            withIndent(function() {\n                // handle functions without any code\n                if (stmt.body.length === 0 && preserveBlankLines) {\n                    range = stmt.range;\n                    if (range[1] - range[0] > 2) {\n                        content = sourceCode.substring(range[0] + 1, range[1] - 1);\n                        if (content[0] === \"\\n\") {\n                            result = [\n                                \"{\"\n                            ];\n                        }\n                        result.push(content);\n                    }\n                }\n                var i, iz, fragment, bodyFlags;\n                bodyFlags = S_TFFF;\n                if (flags & F_FUNC_BODY) {\n                    bodyFlags |= F_DIRECTIVE_CTX;\n                }\n                for(i = 0, iz = stmt.body.length; i < iz; ++i){\n                    if (preserveBlankLines) {\n                        // handle spaces before the first line\n                        if (i === 0) {\n                            if (stmt.body[0].leadingComments) {\n                                range = stmt.body[0].leadingComments[0].extendedRange;\n                                content = sourceCode.substring(range[0], range[1]);\n                                if (content[0] === \"\\n\") {\n                                    result = [\n                                        \"{\"\n                                    ];\n                                }\n                            }\n                            if (!stmt.body[0].leadingComments) {\n                                generateBlankLines(stmt.range[0], stmt.body[0].range[0], result);\n                            }\n                        }\n                        // handle spaces between lines\n                        if (i > 0) {\n                            if (!stmt.body[i - 1].trailingComments && !stmt.body[i].leadingComments) {\n                                generateBlankLines(stmt.body[i - 1].range[1], stmt.body[i].range[0], result);\n                            }\n                        }\n                    }\n                    if (i === iz - 1) {\n                        bodyFlags |= F_SEMICOLON_OPT;\n                    }\n                    if (stmt.body[i].leadingComments && preserveBlankLines) {\n                        fragment = that.generateStatement(stmt.body[i], bodyFlags);\n                    } else {\n                        fragment = addIndent(that.generateStatement(stmt.body[i], bodyFlags));\n                    }\n                    result.push(fragment);\n                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\n                        if (preserveBlankLines && i < iz - 1) {\n                            // don't add a new line if there are leading coments\n                            // in the next statement\n                            if (!stmt.body[i + 1].leadingComments) {\n                                result.push(newline);\n                            }\n                        } else {\n                            result.push(newline);\n                        }\n                    }\n                    if (preserveBlankLines) {\n                        // handle spaces after the last line\n                        if (i === iz - 1) {\n                            if (!stmt.body[i].trailingComments) {\n                                generateBlankLines(stmt.body[i].range[1], stmt.range[1], result);\n                            }\n                        }\n                    }\n                }\n            });\n            result.push(addIndent(\"}\"));\n            return result;\n        },\n        BreakStatement: function(stmt, flags) {\n            if (stmt.label) {\n                return \"break \" + stmt.label.name + this.semicolon(flags);\n            }\n            return \"break\" + this.semicolon(flags);\n        },\n        ContinueStatement: function(stmt, flags) {\n            if (stmt.label) {\n                return \"continue \" + stmt.label.name + this.semicolon(flags);\n            }\n            return \"continue\" + this.semicolon(flags);\n        },\n        ClassBody: function(stmt, flags) {\n            var result = [\n                \"{\",\n                newline\n            ], that = this;\n            withIndent(function(indent) {\n                var i, iz;\n                for(i = 0, iz = stmt.body.length; i < iz; ++i){\n                    result.push(indent);\n                    result.push(that.generateExpression(stmt.body[i], Precedence.Sequence, E_TTT));\n                    if (i + 1 < iz) {\n                        result.push(newline);\n                    }\n                }\n            });\n            if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                result.push(newline);\n            }\n            result.push(base);\n            result.push(\"}\");\n            return result;\n        },\n        ClassDeclaration: function(stmt, flags) {\n            var result, fragment;\n            result = [\n                \"class\"\n            ];\n            if (stmt.id) {\n                result = join(result, this.generateExpression(stmt.id, Precedence.Sequence, E_TTT));\n            }\n            if (stmt.superClass) {\n                fragment = join(\"extends\", this.generateExpression(stmt.superClass, Precedence.Unary, E_TTT));\n                result = join(result, fragment);\n            }\n            result.push(space);\n            result.push(this.generateStatement(stmt.body, S_TFFT));\n            return result;\n        },\n        DirectiveStatement: function(stmt, flags) {\n            if (extra.raw && stmt.raw) {\n                return stmt.raw + this.semicolon(flags);\n            }\n            return escapeDirective(stmt.directive) + this.semicolon(flags);\n        },\n        DoWhileStatement: function(stmt, flags) {\n            // Because `do 42 while (cond)` is Syntax Error. We need semicolon.\n            var result = join(\"do\", this.maybeBlock(stmt.body, S_TFFF));\n            result = this.maybeBlockSuffix(stmt.body, result);\n            return join(result, [\n                \"while\" + space + \"(\",\n                this.generateExpression(stmt.test, Precedence.Sequence, E_TTT),\n                \")\" + this.semicolon(flags)\n            ]);\n        },\n        CatchClause: function(stmt, flags) {\n            var result, that = this;\n            withIndent(function() {\n                var guard;\n                if (stmt.param) {\n                    result = [\n                        \"catch\" + space + \"(\",\n                        that.generateExpression(stmt.param, Precedence.Sequence, E_TTT),\n                        \")\"\n                    ];\n                    if (stmt.guard) {\n                        guard = that.generateExpression(stmt.guard, Precedence.Sequence, E_TTT);\n                        result.splice(2, 0, \" if \", guard);\n                    }\n                } else {\n                    result = [\n                        \"catch\"\n                    ];\n                }\n            });\n            result.push(this.maybeBlock(stmt.body, S_TFFF));\n            return result;\n        },\n        DebuggerStatement: function(stmt, flags) {\n            return \"debugger\" + this.semicolon(flags);\n        },\n        EmptyStatement: function(stmt, flags) {\n            return \";\";\n        },\n        ExportDefaultDeclaration: function(stmt, flags) {\n            var result = [\n                \"export\"\n            ], bodyFlags;\n            bodyFlags = flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF;\n            // export default HoistableDeclaration[Default]\n            // export default AssignmentExpression[In] ;\n            result = join(result, \"default\");\n            if (isStatement(stmt.declaration)) {\n                result = join(result, this.generateStatement(stmt.declaration, bodyFlags));\n            } else {\n                result = join(result, this.generateExpression(stmt.declaration, Precedence.Assignment, E_TTT) + this.semicolon(flags));\n            }\n            return result;\n        },\n        ExportNamedDeclaration: function(stmt, flags) {\n            var result = [\n                \"export\"\n            ], bodyFlags, that = this;\n            bodyFlags = flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF;\n            // export VariableStatement\n            // export Declaration[Default]\n            if (stmt.declaration) {\n                return join(result, this.generateStatement(stmt.declaration, bodyFlags));\n            }\n            // export ExportClause[NoReference] FromClause ;\n            // export ExportClause ;\n            if (stmt.specifiers) {\n                if (stmt.specifiers.length === 0) {\n                    result = join(result, \"{\" + space + \"}\");\n                } else if (stmt.specifiers[0].type === Syntax.ExportBatchSpecifier) {\n                    result = join(result, this.generateExpression(stmt.specifiers[0], Precedence.Sequence, E_TTT));\n                } else {\n                    result = join(result, \"{\");\n                    withIndent(function(indent) {\n                        var i, iz;\n                        result.push(newline);\n                        for(i = 0, iz = stmt.specifiers.length; i < iz; ++i){\n                            result.push(indent);\n                            result.push(that.generateExpression(stmt.specifiers[i], Precedence.Sequence, E_TTT));\n                            if (i + 1 < iz) {\n                                result.push(\",\" + newline);\n                            }\n                        }\n                    });\n                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                        result.push(newline);\n                    }\n                    result.push(base + \"}\");\n                }\n                if (stmt.source) {\n                    result = join(result, [\n                        \"from\" + space,\n                        // ModuleSpecifier\n                        this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),\n                        this.semicolon(flags)\n                    ]);\n                } else {\n                    result.push(this.semicolon(flags));\n                }\n            }\n            return result;\n        },\n        ExportAllDeclaration: function(stmt, flags) {\n            // export * FromClause ;\n            return [\n                \"export\" + space,\n                \"*\" + space,\n                \"from\" + space,\n                // ModuleSpecifier\n                this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),\n                this.semicolon(flags)\n            ];\n        },\n        ExpressionStatement: function(stmt, flags) {\n            var result, fragment;\n            function isClassPrefixed(fragment) {\n                var code;\n                if (fragment.slice(0, 5) !== \"class\") {\n                    return false;\n                }\n                code = fragment.charCodeAt(5);\n                return code === 0x7B /* '{' */  || esutils.code.isWhiteSpace(code) || esutils.code.isLineTerminator(code);\n            }\n            function isFunctionPrefixed(fragment) {\n                var code;\n                if (fragment.slice(0, 8) !== \"function\") {\n                    return false;\n                }\n                code = fragment.charCodeAt(8);\n                return code === 0x28 /* '(' */  || esutils.code.isWhiteSpace(code) || code === 0x2A /* '*' */  || esutils.code.isLineTerminator(code);\n            }\n            function isAsyncPrefixed(fragment) {\n                var code, i, iz;\n                if (fragment.slice(0, 5) !== \"async\") {\n                    return false;\n                }\n                if (!esutils.code.isWhiteSpace(fragment.charCodeAt(5))) {\n                    return false;\n                }\n                for(i = 6, iz = fragment.length; i < iz; ++i){\n                    if (!esutils.code.isWhiteSpace(fragment.charCodeAt(i))) {\n                        break;\n                    }\n                }\n                if (i === iz) {\n                    return false;\n                }\n                if (fragment.slice(i, i + 8) !== \"function\") {\n                    return false;\n                }\n                code = fragment.charCodeAt(i + 8);\n                return code === 0x28 /* '(' */  || esutils.code.isWhiteSpace(code) || code === 0x2A /* '*' */  || esutils.code.isLineTerminator(code);\n            }\n            result = [\n                this.generateExpression(stmt.expression, Precedence.Sequence, E_TTT)\n            ];\n            // 12.4 '{', 'function', 'class' is not allowed in this position.\n            // wrap expression with parentheses\n            fragment = toSourceNodeWhenNeeded(result).toString();\n            if (fragment.charCodeAt(0) === 0x7B /* '{' */  || // ObjectExpression\n            isClassPrefixed(fragment) || isFunctionPrefixed(fragment) || isAsyncPrefixed(fragment) || directive && flags & F_DIRECTIVE_CTX && stmt.expression.type === Syntax.Literal && typeof stmt.expression.value === \"string\") {\n                result = [\n                    \"(\",\n                    result,\n                    \")\" + this.semicolon(flags)\n                ];\n            } else {\n                result.push(this.semicolon(flags));\n            }\n            return result;\n        },\n        ImportDeclaration: function(stmt, flags) {\n            // ES6: 15.2.1 valid import declarations:\n            //     - import ImportClause FromClause ;\n            //     - import ModuleSpecifier ;\n            var result, cursor, that = this;\n            // If no ImportClause is present,\n            // this should be `import ModuleSpecifier` so skip `from`\n            // ModuleSpecifier is StringLiteral.\n            if (stmt.specifiers.length === 0) {\n                // import ModuleSpecifier ;\n                return [\n                    \"import\",\n                    space,\n                    // ModuleSpecifier\n                    this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),\n                    this.semicolon(flags)\n                ];\n            }\n            // import ImportClause FromClause ;\n            result = [\n                \"import\"\n            ];\n            cursor = 0;\n            // ImportedBinding\n            if (stmt.specifiers[cursor].type === Syntax.ImportDefaultSpecifier) {\n                result = join(result, [\n                    this.generateExpression(stmt.specifiers[cursor], Precedence.Sequence, E_TTT)\n                ]);\n                ++cursor;\n            }\n            if (stmt.specifiers[cursor]) {\n                if (cursor !== 0) {\n                    result.push(\",\");\n                }\n                if (stmt.specifiers[cursor].type === Syntax.ImportNamespaceSpecifier) {\n                    // NameSpaceImport\n                    result = join(result, [\n                        space,\n                        this.generateExpression(stmt.specifiers[cursor], Precedence.Sequence, E_TTT)\n                    ]);\n                } else {\n                    // NamedImports\n                    result.push(space + \"{\");\n                    if (stmt.specifiers.length - cursor === 1) {\n                        // import { ... } from \"...\";\n                        result.push(space);\n                        result.push(this.generateExpression(stmt.specifiers[cursor], Precedence.Sequence, E_TTT));\n                        result.push(space + \"}\" + space);\n                    } else {\n                        // import {\n                        //    ...,\n                        //    ...,\n                        // } from \"...\";\n                        withIndent(function(indent) {\n                            var i, iz;\n                            result.push(newline);\n                            for(i = cursor, iz = stmt.specifiers.length; i < iz; ++i){\n                                result.push(indent);\n                                result.push(that.generateExpression(stmt.specifiers[i], Precedence.Sequence, E_TTT));\n                                if (i + 1 < iz) {\n                                    result.push(\",\" + newline);\n                                }\n                            }\n                        });\n                        if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                            result.push(newline);\n                        }\n                        result.push(base + \"}\" + space);\n                    }\n                }\n            }\n            result = join(result, [\n                \"from\" + space,\n                // ModuleSpecifier\n                this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),\n                this.semicolon(flags)\n            ]);\n            return result;\n        },\n        VariableDeclarator: function(stmt, flags) {\n            var itemFlags = flags & F_ALLOW_IN ? E_TTT : E_FTT;\n            if (stmt.init) {\n                return [\n                    this.generateExpression(stmt.id, Precedence.Assignment, itemFlags),\n                    space,\n                    \"=\",\n                    space,\n                    this.generateExpression(stmt.init, Precedence.Assignment, itemFlags)\n                ];\n            }\n            return this.generatePattern(stmt.id, Precedence.Assignment, itemFlags);\n        },\n        VariableDeclaration: function(stmt, flags) {\n            // VariableDeclarator is typed as Statement,\n            // but joined with comma (not LineTerminator).\n            // So if comment is attached to target node, we should specialize.\n            var result, i, iz, node, bodyFlags, that = this;\n            result = [\n                stmt.kind\n            ];\n            bodyFlags = flags & F_ALLOW_IN ? S_TFFF : S_FFFF;\n            function block() {\n                node = stmt.declarations[0];\n                if (extra.comment && node.leadingComments) {\n                    result.push(\"\\n\");\n                    result.push(addIndent(that.generateStatement(node, bodyFlags)));\n                } else {\n                    result.push(noEmptySpace());\n                    result.push(that.generateStatement(node, bodyFlags));\n                }\n                for(i = 1, iz = stmt.declarations.length; i < iz; ++i){\n                    node = stmt.declarations[i];\n                    if (extra.comment && node.leadingComments) {\n                        result.push(\",\" + newline);\n                        result.push(addIndent(that.generateStatement(node, bodyFlags)));\n                    } else {\n                        result.push(\",\" + space);\n                        result.push(that.generateStatement(node, bodyFlags));\n                    }\n                }\n            }\n            if (stmt.declarations.length > 1) {\n                withIndent(block);\n            } else {\n                block();\n            }\n            result.push(this.semicolon(flags));\n            return result;\n        },\n        ThrowStatement: function(stmt, flags) {\n            return [\n                join(\"throw\", this.generateExpression(stmt.argument, Precedence.Sequence, E_TTT)),\n                this.semicolon(flags)\n            ];\n        },\n        TryStatement: function(stmt, flags) {\n            var result, i, iz, guardedHandlers;\n            result = [\n                \"try\",\n                this.maybeBlock(stmt.block, S_TFFF)\n            ];\n            result = this.maybeBlockSuffix(stmt.block, result);\n            if (stmt.handlers) {\n                // old interface\n                for(i = 0, iz = stmt.handlers.length; i < iz; ++i){\n                    result = join(result, this.generateStatement(stmt.handlers[i], S_TFFF));\n                    if (stmt.finalizer || i + 1 !== iz) {\n                        result = this.maybeBlockSuffix(stmt.handlers[i].body, result);\n                    }\n                }\n            } else {\n                guardedHandlers = stmt.guardedHandlers || [];\n                for(i = 0, iz = guardedHandlers.length; i < iz; ++i){\n                    result = join(result, this.generateStatement(guardedHandlers[i], S_TFFF));\n                    if (stmt.finalizer || i + 1 !== iz) {\n                        result = this.maybeBlockSuffix(guardedHandlers[i].body, result);\n                    }\n                }\n                // new interface\n                if (stmt.handler) {\n                    if (Array.isArray(stmt.handler)) {\n                        for(i = 0, iz = stmt.handler.length; i < iz; ++i){\n                            result = join(result, this.generateStatement(stmt.handler[i], S_TFFF));\n                            if (stmt.finalizer || i + 1 !== iz) {\n                                result = this.maybeBlockSuffix(stmt.handler[i].body, result);\n                            }\n                        }\n                    } else {\n                        result = join(result, this.generateStatement(stmt.handler, S_TFFF));\n                        if (stmt.finalizer) {\n                            result = this.maybeBlockSuffix(stmt.handler.body, result);\n                        }\n                    }\n                }\n            }\n            if (stmt.finalizer) {\n                result = join(result, [\n                    \"finally\",\n                    this.maybeBlock(stmt.finalizer, S_TFFF)\n                ]);\n            }\n            return result;\n        },\n        SwitchStatement: function(stmt, flags) {\n            var result, fragment, i, iz, bodyFlags, that = this;\n            withIndent(function() {\n                result = [\n                    \"switch\" + space + \"(\",\n                    that.generateExpression(stmt.discriminant, Precedence.Sequence, E_TTT),\n                    \")\" + space + \"{\" + newline\n                ];\n            });\n            if (stmt.cases) {\n                bodyFlags = S_TFFF;\n                for(i = 0, iz = stmt.cases.length; i < iz; ++i){\n                    if (i === iz - 1) {\n                        bodyFlags |= F_SEMICOLON_OPT;\n                    }\n                    fragment = addIndent(this.generateStatement(stmt.cases[i], bodyFlags));\n                    result.push(fragment);\n                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\n                        result.push(newline);\n                    }\n                }\n            }\n            result.push(addIndent(\"}\"));\n            return result;\n        },\n        SwitchCase: function(stmt, flags) {\n            var result, fragment, i, iz, bodyFlags, that = this;\n            withIndent(function() {\n                if (stmt.test) {\n                    result = [\n                        join(\"case\", that.generateExpression(stmt.test, Precedence.Sequence, E_TTT)),\n                        \":\"\n                    ];\n                } else {\n                    result = [\n                        \"default:\"\n                    ];\n                }\n                i = 0;\n                iz = stmt.consequent.length;\n                if (iz && stmt.consequent[0].type === Syntax.BlockStatement) {\n                    fragment = that.maybeBlock(stmt.consequent[0], S_TFFF);\n                    result.push(fragment);\n                    i = 1;\n                }\n                if (i !== iz && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                    result.push(newline);\n                }\n                bodyFlags = S_TFFF;\n                for(; i < iz; ++i){\n                    if (i === iz - 1 && flags & F_SEMICOLON_OPT) {\n                        bodyFlags |= F_SEMICOLON_OPT;\n                    }\n                    fragment = addIndent(that.generateStatement(stmt.consequent[i], bodyFlags));\n                    result.push(fragment);\n                    if (i + 1 !== iz && !endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\n                        result.push(newline);\n                    }\n                }\n            });\n            return result;\n        },\n        IfStatement: function(stmt, flags) {\n            var result, bodyFlags, semicolonOptional, that = this;\n            withIndent(function() {\n                result = [\n                    \"if\" + space + \"(\",\n                    that.generateExpression(stmt.test, Precedence.Sequence, E_TTT),\n                    \")\"\n                ];\n            });\n            semicolonOptional = flags & F_SEMICOLON_OPT;\n            bodyFlags = S_TFFF;\n            if (semicolonOptional) {\n                bodyFlags |= F_SEMICOLON_OPT;\n            }\n            if (stmt.alternate) {\n                result.push(this.maybeBlock(stmt.consequent, S_TFFF));\n                result = this.maybeBlockSuffix(stmt.consequent, result);\n                if (stmt.alternate.type === Syntax.IfStatement) {\n                    result = join(result, [\n                        \"else \",\n                        this.generateStatement(stmt.alternate, bodyFlags)\n                    ]);\n                } else {\n                    result = join(result, join(\"else\", this.maybeBlock(stmt.alternate, bodyFlags)));\n                }\n            } else {\n                result.push(this.maybeBlock(stmt.consequent, bodyFlags));\n            }\n            return result;\n        },\n        ForStatement: function(stmt, flags) {\n            var result, that = this;\n            withIndent(function() {\n                result = [\n                    \"for\" + space + \"(\"\n                ];\n                if (stmt.init) {\n                    if (stmt.init.type === Syntax.VariableDeclaration) {\n                        result.push(that.generateStatement(stmt.init, S_FFFF));\n                    } else {\n                        // F_ALLOW_IN becomes false.\n                        result.push(that.generateExpression(stmt.init, Precedence.Sequence, E_FTT));\n                        result.push(\";\");\n                    }\n                } else {\n                    result.push(\";\");\n                }\n                if (stmt.test) {\n                    result.push(space);\n                    result.push(that.generateExpression(stmt.test, Precedence.Sequence, E_TTT));\n                    result.push(\";\");\n                } else {\n                    result.push(\";\");\n                }\n                if (stmt.update) {\n                    result.push(space);\n                    result.push(that.generateExpression(stmt.update, Precedence.Sequence, E_TTT));\n                    result.push(\")\");\n                } else {\n                    result.push(\")\");\n                }\n            });\n            result.push(this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF));\n            return result;\n        },\n        ForInStatement: function(stmt, flags) {\n            return this.generateIterationForStatement(\"in\", stmt, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF);\n        },\n        ForOfStatement: function(stmt, flags) {\n            return this.generateIterationForStatement(\"of\", stmt, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF);\n        },\n        LabeledStatement: function(stmt, flags) {\n            return [\n                stmt.label.name + \":\",\n                this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF)\n            ];\n        },\n        Program: function(stmt, flags) {\n            var result, fragment, i, iz, bodyFlags;\n            iz = stmt.body.length;\n            result = [\n                safeConcatenation && iz > 0 ? \"\\n\" : \"\"\n            ];\n            bodyFlags = S_TFTF;\n            for(i = 0; i < iz; ++i){\n                if (!safeConcatenation && i === iz - 1) {\n                    bodyFlags |= F_SEMICOLON_OPT;\n                }\n                if (preserveBlankLines) {\n                    // handle spaces before the first line\n                    if (i === 0) {\n                        if (!stmt.body[0].leadingComments) {\n                            generateBlankLines(stmt.range[0], stmt.body[i].range[0], result);\n                        }\n                    }\n                    // handle spaces between lines\n                    if (i > 0) {\n                        if (!stmt.body[i - 1].trailingComments && !stmt.body[i].leadingComments) {\n                            generateBlankLines(stmt.body[i - 1].range[1], stmt.body[i].range[0], result);\n                        }\n                    }\n                }\n                fragment = addIndent(this.generateStatement(stmt.body[i], bodyFlags));\n                result.push(fragment);\n                if (i + 1 < iz && !endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\n                    if (preserveBlankLines) {\n                        if (!stmt.body[i + 1].leadingComments) {\n                            result.push(newline);\n                        }\n                    } else {\n                        result.push(newline);\n                    }\n                }\n                if (preserveBlankLines) {\n                    // handle spaces after the last line\n                    if (i === iz - 1) {\n                        if (!stmt.body[i].trailingComments) {\n                            generateBlankLines(stmt.body[i].range[1], stmt.range[1], result);\n                        }\n                    }\n                }\n            }\n            return result;\n        },\n        FunctionDeclaration: function(stmt, flags) {\n            return [\n                generateAsyncPrefix(stmt, true),\n                \"function\",\n                generateStarSuffix(stmt) || noEmptySpace(),\n                stmt.id ? generateIdentifier(stmt.id) : \"\",\n                this.generateFunctionBody(stmt)\n            ];\n        },\n        ReturnStatement: function(stmt, flags) {\n            if (stmt.argument) {\n                return [\n                    join(\"return\", this.generateExpression(stmt.argument, Precedence.Sequence, E_TTT)),\n                    this.semicolon(flags)\n                ];\n            }\n            return [\n                \"return\" + this.semicolon(flags)\n            ];\n        },\n        WhileStatement: function(stmt, flags) {\n            var result, that = this;\n            withIndent(function() {\n                result = [\n                    \"while\" + space + \"(\",\n                    that.generateExpression(stmt.test, Precedence.Sequence, E_TTT),\n                    \")\"\n                ];\n            });\n            result.push(this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF));\n            return result;\n        },\n        WithStatement: function(stmt, flags) {\n            var result, that = this;\n            withIndent(function() {\n                result = [\n                    \"with\" + space + \"(\",\n                    that.generateExpression(stmt.object, Precedence.Sequence, E_TTT),\n                    \")\"\n                ];\n            });\n            result.push(this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF));\n            return result;\n        }\n    };\n    merge(CodeGenerator.prototype, CodeGenerator.Statement);\n    // Expressions.\n    CodeGenerator.Expression = {\n        SequenceExpression: function(expr, precedence, flags) {\n            var result, i, iz;\n            if (Precedence.Sequence < precedence) {\n                flags |= F_ALLOW_IN;\n            }\n            result = [];\n            for(i = 0, iz = expr.expressions.length; i < iz; ++i){\n                result.push(this.generateExpression(expr.expressions[i], Precedence.Assignment, flags));\n                if (i + 1 < iz) {\n                    result.push(\",\" + space);\n                }\n            }\n            return parenthesize(result, Precedence.Sequence, precedence);\n        },\n        AssignmentExpression: function(expr, precedence, flags) {\n            return this.generateAssignment(expr.left, expr.right, expr.operator, precedence, flags);\n        },\n        ArrowFunctionExpression: function(expr, precedence, flags) {\n            return parenthesize(this.generateFunctionBody(expr), Precedence.ArrowFunction, precedence);\n        },\n        ConditionalExpression: function(expr, precedence, flags) {\n            if (Precedence.Conditional < precedence) {\n                flags |= F_ALLOW_IN;\n            }\n            return parenthesize([\n                this.generateExpression(expr.test, Precedence.LogicalOR, flags),\n                space + \"?\" + space,\n                this.generateExpression(expr.consequent, Precedence.Assignment, flags),\n                space + \":\" + space,\n                this.generateExpression(expr.alternate, Precedence.Assignment, flags)\n            ], Precedence.Conditional, precedence);\n        },\n        LogicalExpression: function(expr, precedence, flags) {\n            return this.BinaryExpression(expr, precedence, flags);\n        },\n        BinaryExpression: function(expr, precedence, flags) {\n            var result, leftPrecedence, rightPrecedence, currentPrecedence, fragment, leftSource;\n            currentPrecedence = BinaryPrecedence[expr.operator];\n            leftPrecedence = expr.operator === \"**\" ? Precedence.Postfix : currentPrecedence;\n            rightPrecedence = expr.operator === \"**\" ? currentPrecedence : currentPrecedence + 1;\n            if (currentPrecedence < precedence) {\n                flags |= F_ALLOW_IN;\n            }\n            fragment = this.generateExpression(expr.left, leftPrecedence, flags);\n            leftSource = fragment.toString();\n            if (leftSource.charCodeAt(leftSource.length - 1) === 0x2F /* / */  && esutils.code.isIdentifierPartES5(expr.operator.charCodeAt(0))) {\n                result = [\n                    fragment,\n                    noEmptySpace(),\n                    expr.operator\n                ];\n            } else {\n                result = join(fragment, expr.operator);\n            }\n            fragment = this.generateExpression(expr.right, rightPrecedence, flags);\n            if (expr.operator === \"/\" && fragment.toString().charAt(0) === \"/\" || expr.operator.slice(-1) === \"<\" && fragment.toString().slice(0, 3) === \"!--\") {\n                // If '/' concats with '/' or `<` concats with `!--`, it is interpreted as comment start\n                result.push(noEmptySpace());\n                result.push(fragment);\n            } else {\n                result = join(result, fragment);\n            }\n            if (expr.operator === \"in\" && !(flags & F_ALLOW_IN)) {\n                return [\n                    \"(\",\n                    result,\n                    \")\"\n                ];\n            }\n            return parenthesize(result, currentPrecedence, precedence);\n        },\n        CallExpression: function(expr, precedence, flags) {\n            var result, i, iz;\n            // F_ALLOW_UNPARATH_NEW becomes false.\n            result = [\n                this.generateExpression(expr.callee, Precedence.Call, E_TTF)\n            ];\n            result.push(\"(\");\n            for(i = 0, iz = expr[\"arguments\"].length; i < iz; ++i){\n                result.push(this.generateExpression(expr[\"arguments\"][i], Precedence.Assignment, E_TTT));\n                if (i + 1 < iz) {\n                    result.push(\",\" + space);\n                }\n            }\n            result.push(\")\");\n            if (!(flags & F_ALLOW_CALL)) {\n                return [\n                    \"(\",\n                    result,\n                    \")\"\n                ];\n            }\n            return parenthesize(result, Precedence.Call, precedence);\n        },\n        NewExpression: function(expr, precedence, flags) {\n            var result, length, i, iz, itemFlags;\n            length = expr[\"arguments\"].length;\n            // F_ALLOW_CALL becomes false.\n            // F_ALLOW_UNPARATH_NEW may become false.\n            itemFlags = flags & F_ALLOW_UNPARATH_NEW && !parentheses && length === 0 ? E_TFT : E_TFF;\n            result = join(\"new\", this.generateExpression(expr.callee, Precedence.New, itemFlags));\n            if (!(flags & F_ALLOW_UNPARATH_NEW) || parentheses || length > 0) {\n                result.push(\"(\");\n                for(i = 0, iz = length; i < iz; ++i){\n                    result.push(this.generateExpression(expr[\"arguments\"][i], Precedence.Assignment, E_TTT));\n                    if (i + 1 < iz) {\n                        result.push(\",\" + space);\n                    }\n                }\n                result.push(\")\");\n            }\n            return parenthesize(result, Precedence.New, precedence);\n        },\n        MemberExpression: function(expr, precedence, flags) {\n            var result, fragment;\n            // F_ALLOW_UNPARATH_NEW becomes false.\n            result = [\n                this.generateExpression(expr.object, Precedence.Call, flags & F_ALLOW_CALL ? E_TTF : E_TFF)\n            ];\n            if (expr.computed) {\n                result.push(\"[\");\n                result.push(this.generateExpression(expr.property, Precedence.Sequence, flags & F_ALLOW_CALL ? E_TTT : E_TFT));\n                result.push(\"]\");\n            } else {\n                if (expr.object.type === Syntax.Literal && typeof expr.object.value === \"number\") {\n                    fragment = toSourceNodeWhenNeeded(result).toString();\n                    // When the following conditions are all true,\n                    //   1. No floating point\n                    //   2. Don't have exponents\n                    //   3. The last character is a decimal digit\n                    //   4. Not hexadecimal OR octal number literal\n                    // we should add a floating point.\n                    if (fragment.indexOf(\".\") < 0 && !/[eExX]/.test(fragment) && esutils.code.isDecimalDigit(fragment.charCodeAt(fragment.length - 1)) && !(fragment.length >= 2 && fragment.charCodeAt(0) === 48 // '0'\n                    )) {\n                        result.push(\" \");\n                    }\n                }\n                result.push(\".\");\n                result.push(generateIdentifier(expr.property));\n            }\n            return parenthesize(result, Precedence.Member, precedence);\n        },\n        MetaProperty: function(expr, precedence, flags) {\n            var result;\n            result = [];\n            result.push(typeof expr.meta === \"string\" ? expr.meta : generateIdentifier(expr.meta));\n            result.push(\".\");\n            result.push(typeof expr.property === \"string\" ? expr.property : generateIdentifier(expr.property));\n            return parenthesize(result, Precedence.Member, precedence);\n        },\n        UnaryExpression: function(expr, precedence, flags) {\n            var result, fragment, rightCharCode, leftSource, leftCharCode;\n            fragment = this.generateExpression(expr.argument, Precedence.Unary, E_TTT);\n            if (space === \"\") {\n                result = join(expr.operator, fragment);\n            } else {\n                result = [\n                    expr.operator\n                ];\n                if (expr.operator.length > 2) {\n                    // delete, void, typeof\n                    // get `typeof []`, not `typeof[]`\n                    result = join(result, fragment);\n                } else {\n                    // Prevent inserting spaces between operator and argument if it is unnecessary\n                    // like, `!cond`\n                    leftSource = toSourceNodeWhenNeeded(result).toString();\n                    leftCharCode = leftSource.charCodeAt(leftSource.length - 1);\n                    rightCharCode = fragment.toString().charCodeAt(0);\n                    if ((leftCharCode === 0x2B /* + */  || leftCharCode === 0x2D /* - */ ) && leftCharCode === rightCharCode || esutils.code.isIdentifierPartES5(leftCharCode) && esutils.code.isIdentifierPartES5(rightCharCode)) {\n                        result.push(noEmptySpace());\n                        result.push(fragment);\n                    } else {\n                        result.push(fragment);\n                    }\n                }\n            }\n            return parenthesize(result, Precedence.Unary, precedence);\n        },\n        YieldExpression: function(expr, precedence, flags) {\n            var result;\n            if (expr.delegate) {\n                result = \"yield*\";\n            } else {\n                result = \"yield\";\n            }\n            if (expr.argument) {\n                result = join(result, this.generateExpression(expr.argument, Precedence.Yield, E_TTT));\n            }\n            return parenthesize(result, Precedence.Yield, precedence);\n        },\n        AwaitExpression: function(expr, precedence, flags) {\n            var result = join(expr.all ? \"await*\" : \"await\", this.generateExpression(expr.argument, Precedence.Await, E_TTT));\n            return parenthesize(result, Precedence.Await, precedence);\n        },\n        UpdateExpression: function(expr, precedence, flags) {\n            if (expr.prefix) {\n                return parenthesize([\n                    expr.operator,\n                    this.generateExpression(expr.argument, Precedence.Unary, E_TTT)\n                ], Precedence.Unary, precedence);\n            }\n            return parenthesize([\n                this.generateExpression(expr.argument, Precedence.Postfix, E_TTT),\n                expr.operator\n            ], Precedence.Postfix, precedence);\n        },\n        FunctionExpression: function(expr, precedence, flags) {\n            var result = [\n                generateAsyncPrefix(expr, true),\n                \"function\"\n            ];\n            if (expr.id) {\n                result.push(generateStarSuffix(expr) || noEmptySpace());\n                result.push(generateIdentifier(expr.id));\n            } else {\n                result.push(generateStarSuffix(expr) || space);\n            }\n            result.push(this.generateFunctionBody(expr));\n            return result;\n        },\n        ArrayPattern: function(expr, precedence, flags) {\n            return this.ArrayExpression(expr, precedence, flags, true);\n        },\n        ArrayExpression: function(expr, precedence, flags, isPattern) {\n            var result, multiline, that = this;\n            if (!expr.elements.length) {\n                return \"[]\";\n            }\n            multiline = isPattern ? false : expr.elements.length > 1;\n            result = [\n                \"[\",\n                multiline ? newline : \"\"\n            ];\n            withIndent(function(indent) {\n                var i, iz;\n                for(i = 0, iz = expr.elements.length; i < iz; ++i){\n                    if (!expr.elements[i]) {\n                        if (multiline) {\n                            result.push(indent);\n                        }\n                        if (i + 1 === iz) {\n                            result.push(\",\");\n                        }\n                    } else {\n                        result.push(multiline ? indent : \"\");\n                        result.push(that.generateExpression(expr.elements[i], Precedence.Assignment, E_TTT));\n                    }\n                    if (i + 1 < iz) {\n                        result.push(\",\" + (multiline ? newline : space));\n                    }\n                }\n            });\n            if (multiline && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                result.push(newline);\n            }\n            result.push(multiline ? base : \"\");\n            result.push(\"]\");\n            return result;\n        },\n        RestElement: function(expr, precedence, flags) {\n            return \"...\" + this.generatePattern(expr.argument);\n        },\n        ClassExpression: function(expr, precedence, flags) {\n            var result, fragment;\n            result = [\n                \"class\"\n            ];\n            if (expr.id) {\n                result = join(result, this.generateExpression(expr.id, Precedence.Sequence, E_TTT));\n            }\n            if (expr.superClass) {\n                fragment = join(\"extends\", this.generateExpression(expr.superClass, Precedence.Unary, E_TTT));\n                result = join(result, fragment);\n            }\n            result.push(space);\n            result.push(this.generateStatement(expr.body, S_TFFT));\n            return result;\n        },\n        MethodDefinition: function(expr, precedence, flags) {\n            var result, fragment;\n            if (expr[\"static\"]) {\n                result = [\n                    \"static\" + space\n                ];\n            } else {\n                result = [];\n            }\n            if (expr.kind === \"get\" || expr.kind === \"set\") {\n                fragment = [\n                    join(expr.kind, this.generatePropertyKey(expr.key, expr.computed)),\n                    this.generateFunctionBody(expr.value)\n                ];\n            } else {\n                fragment = [\n                    generateMethodPrefix(expr),\n                    this.generatePropertyKey(expr.key, expr.computed),\n                    this.generateFunctionBody(expr.value)\n                ];\n            }\n            return join(result, fragment);\n        },\n        Property: function(expr, precedence, flags) {\n            if (expr.kind === \"get\" || expr.kind === \"set\") {\n                return [\n                    expr.kind,\n                    noEmptySpace(),\n                    this.generatePropertyKey(expr.key, expr.computed),\n                    this.generateFunctionBody(expr.value)\n                ];\n            }\n            if (expr.shorthand) {\n                if (expr.value.type === \"AssignmentPattern\") {\n                    return this.AssignmentPattern(expr.value, Precedence.Sequence, E_TTT);\n                }\n                return this.generatePropertyKey(expr.key, expr.computed);\n            }\n            if (expr.method) {\n                return [\n                    generateMethodPrefix(expr),\n                    this.generatePropertyKey(expr.key, expr.computed),\n                    this.generateFunctionBody(expr.value)\n                ];\n            }\n            return [\n                this.generatePropertyKey(expr.key, expr.computed),\n                \":\" + space,\n                this.generateExpression(expr.value, Precedence.Assignment, E_TTT)\n            ];\n        },\n        ObjectExpression: function(expr, precedence, flags) {\n            var multiline, result, fragment, that = this;\n            if (!expr.properties.length) {\n                return \"{}\";\n            }\n            multiline = expr.properties.length > 1;\n            withIndent(function() {\n                fragment = that.generateExpression(expr.properties[0], Precedence.Sequence, E_TTT);\n            });\n            if (!multiline) {\n                // issues 4\n                // Do not transform from\n                //   dejavu.Class.declare({\n                //       method2: function () {}\n                //   });\n                // to\n                //   dejavu.Class.declare({method2: function () {\n                //       }});\n                if (!hasLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\n                    return [\n                        \"{\",\n                        space,\n                        fragment,\n                        space,\n                        \"}\"\n                    ];\n                }\n            }\n            withIndent(function(indent) {\n                var i, iz;\n                result = [\n                    \"{\",\n                    newline,\n                    indent,\n                    fragment\n                ];\n                if (multiline) {\n                    result.push(\",\" + newline);\n                    for(i = 1, iz = expr.properties.length; i < iz; ++i){\n                        result.push(indent);\n                        result.push(that.generateExpression(expr.properties[i], Precedence.Sequence, E_TTT));\n                        if (i + 1 < iz) {\n                            result.push(\",\" + newline);\n                        }\n                    }\n                }\n            });\n            if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                result.push(newline);\n            }\n            result.push(base);\n            result.push(\"}\");\n            return result;\n        },\n        AssignmentPattern: function(expr, precedence, flags) {\n            return this.generateAssignment(expr.left, expr.right, \"=\", precedence, flags);\n        },\n        ObjectPattern: function(expr, precedence, flags) {\n            var result, i, iz, multiline, property, that = this;\n            if (!expr.properties.length) {\n                return \"{}\";\n            }\n            multiline = false;\n            if (expr.properties.length === 1) {\n                property = expr.properties[0];\n                if (property.type === Syntax.Property && property.value.type !== Syntax.Identifier) {\n                    multiline = true;\n                }\n            } else {\n                for(i = 0, iz = expr.properties.length; i < iz; ++i){\n                    property = expr.properties[i];\n                    if (property.type === Syntax.Property && !property.shorthand) {\n                        multiline = true;\n                        break;\n                    }\n                }\n            }\n            result = [\n                \"{\",\n                multiline ? newline : \"\"\n            ];\n            withIndent(function(indent) {\n                var i, iz;\n                for(i = 0, iz = expr.properties.length; i < iz; ++i){\n                    result.push(multiline ? indent : \"\");\n                    result.push(that.generateExpression(expr.properties[i], Precedence.Sequence, E_TTT));\n                    if (i + 1 < iz) {\n                        result.push(\",\" + (multiline ? newline : space));\n                    }\n                }\n            });\n            if (multiline && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                result.push(newline);\n            }\n            result.push(multiline ? base : \"\");\n            result.push(\"}\");\n            return result;\n        },\n        ThisExpression: function(expr, precedence, flags) {\n            return \"this\";\n        },\n        Super: function(expr, precedence, flags) {\n            return \"super\";\n        },\n        Identifier: function(expr, precedence, flags) {\n            return generateIdentifier(expr);\n        },\n        ImportDefaultSpecifier: function(expr, precedence, flags) {\n            return generateIdentifier(expr.id || expr.local);\n        },\n        ImportNamespaceSpecifier: function(expr, precedence, flags) {\n            var result = [\n                \"*\"\n            ];\n            var id = expr.id || expr.local;\n            if (id) {\n                result.push(space + \"as\" + noEmptySpace() + generateIdentifier(id));\n            }\n            return result;\n        },\n        ImportSpecifier: function(expr, precedence, flags) {\n            var imported = expr.imported;\n            var result = [\n                imported.name\n            ];\n            var local = expr.local;\n            if (local && local.name !== imported.name) {\n                result.push(noEmptySpace() + \"as\" + noEmptySpace() + generateIdentifier(local));\n            }\n            return result;\n        },\n        ExportSpecifier: function(expr, precedence, flags) {\n            var local = expr.local;\n            var result = [\n                local.name\n            ];\n            var exported = expr.exported;\n            if (exported && exported.name !== local.name) {\n                result.push(noEmptySpace() + \"as\" + noEmptySpace() + generateIdentifier(exported));\n            }\n            return result;\n        },\n        Literal: function(expr, precedence, flags) {\n            var raw;\n            if (expr.hasOwnProperty(\"raw\") && parse && extra.raw) {\n                try {\n                    raw = parse(expr.raw).body[0].expression;\n                    if (raw.type === Syntax.Literal) {\n                        if (raw.value === expr.value) {\n                            return expr.raw;\n                        }\n                    }\n                } catch (e) {\n                // not use raw property\n                }\n            }\n            if (expr.regex) {\n                return \"/\" + expr.regex.pattern + \"/\" + expr.regex.flags;\n            }\n            if (expr.value === null) {\n                return \"null\";\n            }\n            if (typeof expr.value === \"string\") {\n                return escapeString(expr.value);\n            }\n            if (typeof expr.value === \"number\") {\n                return generateNumber(expr.value);\n            }\n            if (typeof expr.value === \"boolean\") {\n                return expr.value ? \"true\" : \"false\";\n            }\n            return generateRegExp(expr.value);\n        },\n        GeneratorExpression: function(expr, precedence, flags) {\n            return this.ComprehensionExpression(expr, precedence, flags);\n        },\n        ComprehensionExpression: function(expr, precedence, flags) {\n            // GeneratorExpression should be parenthesized with (...), ComprehensionExpression with [...]\n            // Due to https://bugzilla.mozilla.org/show_bug.cgi?id=883468 position of expr.body can differ in Spidermonkey and ES6\n            var result, i, iz, fragment, that = this;\n            result = expr.type === Syntax.GeneratorExpression ? [\n                \"(\"\n            ] : [\n                \"[\"\n            ];\n            if (extra.moz.comprehensionExpressionStartsWithAssignment) {\n                fragment = this.generateExpression(expr.body, Precedence.Assignment, E_TTT);\n                result.push(fragment);\n            }\n            if (expr.blocks) {\n                withIndent(function() {\n                    for(i = 0, iz = expr.blocks.length; i < iz; ++i){\n                        fragment = that.generateExpression(expr.blocks[i], Precedence.Sequence, E_TTT);\n                        if (i > 0 || extra.moz.comprehensionExpressionStartsWithAssignment) {\n                            result = join(result, fragment);\n                        } else {\n                            result.push(fragment);\n                        }\n                    }\n                });\n            }\n            if (expr.filter) {\n                result = join(result, \"if\" + space);\n                fragment = this.generateExpression(expr.filter, Precedence.Sequence, E_TTT);\n                result = join(result, [\n                    \"(\",\n                    fragment,\n                    \")\"\n                ]);\n            }\n            if (!extra.moz.comprehensionExpressionStartsWithAssignment) {\n                fragment = this.generateExpression(expr.body, Precedence.Assignment, E_TTT);\n                result = join(result, fragment);\n            }\n            result.push(expr.type === Syntax.GeneratorExpression ? \")\" : \"]\");\n            return result;\n        },\n        ComprehensionBlock: function(expr, precedence, flags) {\n            var fragment;\n            if (expr.left.type === Syntax.VariableDeclaration) {\n                fragment = [\n                    expr.left.kind,\n                    noEmptySpace(),\n                    this.generateStatement(expr.left.declarations[0], S_FFFF)\n                ];\n            } else {\n                fragment = this.generateExpression(expr.left, Precedence.Call, E_TTT);\n            }\n            fragment = join(fragment, expr.of ? \"of\" : \"in\");\n            fragment = join(fragment, this.generateExpression(expr.right, Precedence.Sequence, E_TTT));\n            return [\n                \"for\" + space + \"(\",\n                fragment,\n                \")\"\n            ];\n        },\n        SpreadElement: function(expr, precedence, flags) {\n            return [\n                \"...\",\n                this.generateExpression(expr.argument, Precedence.Assignment, E_TTT)\n            ];\n        },\n        TaggedTemplateExpression: function(expr, precedence, flags) {\n            var itemFlags = E_TTF;\n            if (!(flags & F_ALLOW_CALL)) {\n                itemFlags = E_TFF;\n            }\n            var result = [\n                this.generateExpression(expr.tag, Precedence.Call, itemFlags),\n                this.generateExpression(expr.quasi, Precedence.Primary, E_FFT)\n            ];\n            return parenthesize(result, Precedence.TaggedTemplate, precedence);\n        },\n        TemplateElement: function(expr, precedence, flags) {\n            // Don't use \"cooked\". Since tagged template can use raw template\n            // representation. So if we do so, it breaks the script semantics.\n            return expr.value.raw;\n        },\n        TemplateLiteral: function(expr, precedence, flags) {\n            var result, i, iz;\n            result = [\n                \"`\"\n            ];\n            for(i = 0, iz = expr.quasis.length; i < iz; ++i){\n                result.push(this.generateExpression(expr.quasis[i], Precedence.Primary, E_TTT));\n                if (i + 1 < iz) {\n                    result.push(\"${\" + space);\n                    result.push(this.generateExpression(expr.expressions[i], Precedence.Sequence, E_TTT));\n                    result.push(space + \"}\");\n                }\n            }\n            result.push(\"`\");\n            return result;\n        },\n        ModuleSpecifier: function(expr, precedence, flags) {\n            return this.Literal(expr, precedence, flags);\n        },\n        ImportExpression: function(expr, precedence, flag) {\n            return parenthesize([\n                \"import(\",\n                this.generateExpression(expr.source, Precedence.Assignment, E_TTT),\n                \")\"\n            ], Precedence.Call, precedence);\n        }\n    };\n    merge(CodeGenerator.prototype, CodeGenerator.Expression);\n    CodeGenerator.prototype.generateExpression = function(expr, precedence, flags) {\n        var result, type;\n        type = expr.type || Syntax.Property;\n        if (extra.verbatim && expr.hasOwnProperty(extra.verbatim)) {\n            return generateVerbatim(expr, precedence);\n        }\n        result = this[type](expr, precedence, flags);\n        if (extra.comment) {\n            result = addComments(expr, result);\n        }\n        return toSourceNodeWhenNeeded(result, expr);\n    };\n    CodeGenerator.prototype.generateStatement = function(stmt, flags) {\n        var result, fragment;\n        result = this[stmt.type](stmt, flags);\n        // Attach comments\n        if (extra.comment) {\n            result = addComments(stmt, result);\n        }\n        fragment = toSourceNodeWhenNeeded(result).toString();\n        if (stmt.type === Syntax.Program && !safeConcatenation && newline === \"\" && fragment.charAt(fragment.length - 1) === \"\\n\") {\n            result = sourceMap ? toSourceNodeWhenNeeded(result).replaceRight(/\\s+$/, \"\") : fragment.replace(/\\s+$/, \"\");\n        }\n        return toSourceNodeWhenNeeded(result, stmt);\n    };\n    function generateInternal(node) {\n        var codegen;\n        codegen = new CodeGenerator();\n        if (isStatement(node)) {\n            return codegen.generateStatement(node, S_TFFF);\n        }\n        if (isExpression(node)) {\n            return codegen.generateExpression(node, Precedence.Sequence, E_TTT);\n        }\n        throw new Error(\"Unknown node type: \" + node.type);\n    }\n    function generate(node, options) {\n        var defaultOptions = getDefaultOptions(), result, pair;\n        if (options != null) {\n            // Obsolete options\n            //\n            //   `options.indent`\n            //   `options.base`\n            //\n            // Instead of them, we can use `option.format.indent`.\n            if (typeof options.indent === \"string\") {\n                defaultOptions.format.indent.style = options.indent;\n            }\n            if (typeof options.base === \"number\") {\n                defaultOptions.format.indent.base = options.base;\n            }\n            options = updateDeeply(defaultOptions, options);\n            indent = options.format.indent.style;\n            if (typeof options.base === \"string\") {\n                base = options.base;\n            } else {\n                base = stringRepeat(indent, options.format.indent.base);\n            }\n        } else {\n            options = defaultOptions;\n            indent = options.format.indent.style;\n            base = stringRepeat(indent, options.format.indent.base);\n        }\n        json = options.format.json;\n        renumber = options.format.renumber;\n        hexadecimal = json ? false : options.format.hexadecimal;\n        quotes = json ? \"double\" : options.format.quotes;\n        escapeless = options.format.escapeless;\n        newline = options.format.newline;\n        space = options.format.space;\n        if (options.format.compact) {\n            newline = space = indent = base = \"\";\n        }\n        parentheses = options.format.parentheses;\n        semicolons = options.format.semicolons;\n        safeConcatenation = options.format.safeConcatenation;\n        directive = options.directive;\n        parse = json ? null : options.parse;\n        sourceMap = options.sourceMap;\n        sourceCode = options.sourceCode;\n        preserveBlankLines = options.format.preserveBlankLines && sourceCode !== null;\n        extra = options;\n        if (sourceMap) {\n            if (!exports.browser) {\n                // We assume environment is node.js\n                // And prevent from including source-map by browserify\n                SourceNode = (__webpack_require__(/*! source-map */ \"(rsc)/./node_modules/source-map/source-map.js\").SourceNode);\n            } else {\n                SourceNode = global.sourceMap.SourceNode;\n            }\n        }\n        result = generateInternal(node);\n        if (!sourceMap) {\n            pair = {\n                code: result.toString(),\n                map: null\n            };\n            return options.sourceMapWithCode ? pair : pair.code;\n        }\n        pair = result.toStringWithSourceMap({\n            file: options.file,\n            sourceRoot: options.sourceMapRoot\n        });\n        if (options.sourceContent) {\n            pair.map.setSourceContent(options.sourceMap, options.sourceContent);\n        }\n        if (options.sourceMapWithCode) {\n            return pair;\n        }\n        return pair.map.toString();\n    }\n    FORMAT_MINIFY = {\n        indent: {\n            style: \"\",\n            base: 0\n        },\n        renumber: true,\n        hexadecimal: true,\n        quotes: \"auto\",\n        escapeless: true,\n        compact: true,\n        parentheses: false,\n        semicolons: false\n    };\n    FORMAT_DEFAULTS = getDefaultOptions().format;\n    exports.version = __webpack_require__(/*! ./package.json */ \"(rsc)/./node_modules/escodegen/package.json\").version;\n    exports.generate = generate;\n    exports.attachComments = estraverse.attachComments;\n    exports.Precedence = updateDeeply({}, Precedence);\n    exports.browser = false;\n    exports.FORMAT_MINIFY = FORMAT_MINIFY;\n    exports.FORMAT_DEFAULTS = FORMAT_DEFAULTS;\n})(); /* vim: set sw=4 ts=4 et tw=80 : */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/escodegen/escodegen.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/escodegen/node_modules/estraverse/estraverse.js":
/*!**********************************************************************!*\
  !*** ./node_modules/escodegen/node_modules/estraverse/estraverse.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/*\n  Copyright (C) 2012-2013 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/ /*jslint vars:false, bitwise:true*/ /*jshint indent:4*/ /*global exports:true*/ (function clone(exports1) {\n    \"use strict\";\n    var Syntax, VisitorOption, VisitorKeys, BREAK, SKIP, REMOVE;\n    function deepCopy(obj) {\n        var ret = {}, key, val;\n        for(key in obj){\n            if (obj.hasOwnProperty(key)) {\n                val = obj[key];\n                if (typeof val === \"object\" && val !== null) {\n                    ret[key] = deepCopy(val);\n                } else {\n                    ret[key] = val;\n                }\n            }\n        }\n        return ret;\n    }\n    // based on LLVM libc++ upper_bound / lower_bound\n    // MIT License\n    function upperBound(array, func) {\n        var diff, len, i, current;\n        len = array.length;\n        i = 0;\n        while(len){\n            diff = len >>> 1;\n            current = i + diff;\n            if (func(array[current])) {\n                len = diff;\n            } else {\n                i = current + 1;\n                len -= diff + 1;\n            }\n        }\n        return i;\n    }\n    Syntax = {\n        AssignmentExpression: \"AssignmentExpression\",\n        AssignmentPattern: \"AssignmentPattern\",\n        ArrayExpression: \"ArrayExpression\",\n        ArrayPattern: \"ArrayPattern\",\n        ArrowFunctionExpression: \"ArrowFunctionExpression\",\n        AwaitExpression: \"AwaitExpression\",\n        BlockStatement: \"BlockStatement\",\n        BinaryExpression: \"BinaryExpression\",\n        BreakStatement: \"BreakStatement\",\n        CallExpression: \"CallExpression\",\n        CatchClause: \"CatchClause\",\n        ClassBody: \"ClassBody\",\n        ClassDeclaration: \"ClassDeclaration\",\n        ClassExpression: \"ClassExpression\",\n        ComprehensionBlock: \"ComprehensionBlock\",\n        ComprehensionExpression: \"ComprehensionExpression\",\n        ConditionalExpression: \"ConditionalExpression\",\n        ContinueStatement: \"ContinueStatement\",\n        DebuggerStatement: \"DebuggerStatement\",\n        DirectiveStatement: \"DirectiveStatement\",\n        DoWhileStatement: \"DoWhileStatement\",\n        EmptyStatement: \"EmptyStatement\",\n        ExportAllDeclaration: \"ExportAllDeclaration\",\n        ExportDefaultDeclaration: \"ExportDefaultDeclaration\",\n        ExportNamedDeclaration: \"ExportNamedDeclaration\",\n        ExportSpecifier: \"ExportSpecifier\",\n        ExpressionStatement: \"ExpressionStatement\",\n        ForStatement: \"ForStatement\",\n        ForInStatement: \"ForInStatement\",\n        ForOfStatement: \"ForOfStatement\",\n        FunctionDeclaration: \"FunctionDeclaration\",\n        FunctionExpression: \"FunctionExpression\",\n        GeneratorExpression: \"GeneratorExpression\",\n        Identifier: \"Identifier\",\n        IfStatement: \"IfStatement\",\n        ImportExpression: \"ImportExpression\",\n        ImportDeclaration: \"ImportDeclaration\",\n        ImportDefaultSpecifier: \"ImportDefaultSpecifier\",\n        ImportNamespaceSpecifier: \"ImportNamespaceSpecifier\",\n        ImportSpecifier: \"ImportSpecifier\",\n        Literal: \"Literal\",\n        LabeledStatement: \"LabeledStatement\",\n        LogicalExpression: \"LogicalExpression\",\n        MemberExpression: \"MemberExpression\",\n        MetaProperty: \"MetaProperty\",\n        MethodDefinition: \"MethodDefinition\",\n        ModuleSpecifier: \"ModuleSpecifier\",\n        NewExpression: \"NewExpression\",\n        ObjectExpression: \"ObjectExpression\",\n        ObjectPattern: \"ObjectPattern\",\n        Program: \"Program\",\n        Property: \"Property\",\n        RestElement: \"RestElement\",\n        ReturnStatement: \"ReturnStatement\",\n        SequenceExpression: \"SequenceExpression\",\n        SpreadElement: \"SpreadElement\",\n        Super: \"Super\",\n        SwitchStatement: \"SwitchStatement\",\n        SwitchCase: \"SwitchCase\",\n        TaggedTemplateExpression: \"TaggedTemplateExpression\",\n        TemplateElement: \"TemplateElement\",\n        TemplateLiteral: \"TemplateLiteral\",\n        ThisExpression: \"ThisExpression\",\n        ThrowStatement: \"ThrowStatement\",\n        TryStatement: \"TryStatement\",\n        UnaryExpression: \"UnaryExpression\",\n        UpdateExpression: \"UpdateExpression\",\n        VariableDeclaration: \"VariableDeclaration\",\n        VariableDeclarator: \"VariableDeclarator\",\n        WhileStatement: \"WhileStatement\",\n        WithStatement: \"WithStatement\",\n        YieldExpression: \"YieldExpression\"\n    };\n    VisitorKeys = {\n        AssignmentExpression: [\n            \"left\",\n            \"right\"\n        ],\n        AssignmentPattern: [\n            \"left\",\n            \"right\"\n        ],\n        ArrayExpression: [\n            \"elements\"\n        ],\n        ArrayPattern: [\n            \"elements\"\n        ],\n        ArrowFunctionExpression: [\n            \"params\",\n            \"body\"\n        ],\n        AwaitExpression: [\n            \"argument\"\n        ],\n        BlockStatement: [\n            \"body\"\n        ],\n        BinaryExpression: [\n            \"left\",\n            \"right\"\n        ],\n        BreakStatement: [\n            \"label\"\n        ],\n        CallExpression: [\n            \"callee\",\n            \"arguments\"\n        ],\n        CatchClause: [\n            \"param\",\n            \"body\"\n        ],\n        ClassBody: [\n            \"body\"\n        ],\n        ClassDeclaration: [\n            \"id\",\n            \"superClass\",\n            \"body\"\n        ],\n        ClassExpression: [\n            \"id\",\n            \"superClass\",\n            \"body\"\n        ],\n        ComprehensionBlock: [\n            \"left\",\n            \"right\"\n        ],\n        ComprehensionExpression: [\n            \"blocks\",\n            \"filter\",\n            \"body\"\n        ],\n        ConditionalExpression: [\n            \"test\",\n            \"consequent\",\n            \"alternate\"\n        ],\n        ContinueStatement: [\n            \"label\"\n        ],\n        DebuggerStatement: [],\n        DirectiveStatement: [],\n        DoWhileStatement: [\n            \"body\",\n            \"test\"\n        ],\n        EmptyStatement: [],\n        ExportAllDeclaration: [\n            \"source\"\n        ],\n        ExportDefaultDeclaration: [\n            \"declaration\"\n        ],\n        ExportNamedDeclaration: [\n            \"declaration\",\n            \"specifiers\",\n            \"source\"\n        ],\n        ExportSpecifier: [\n            \"exported\",\n            \"local\"\n        ],\n        ExpressionStatement: [\n            \"expression\"\n        ],\n        ForStatement: [\n            \"init\",\n            \"test\",\n            \"update\",\n            \"body\"\n        ],\n        ForInStatement: [\n            \"left\",\n            \"right\",\n            \"body\"\n        ],\n        ForOfStatement: [\n            \"left\",\n            \"right\",\n            \"body\"\n        ],\n        FunctionDeclaration: [\n            \"id\",\n            \"params\",\n            \"body\"\n        ],\n        FunctionExpression: [\n            \"id\",\n            \"params\",\n            \"body\"\n        ],\n        GeneratorExpression: [\n            \"blocks\",\n            \"filter\",\n            \"body\"\n        ],\n        Identifier: [],\n        IfStatement: [\n            \"test\",\n            \"consequent\",\n            \"alternate\"\n        ],\n        ImportExpression: [\n            \"source\"\n        ],\n        ImportDeclaration: [\n            \"specifiers\",\n            \"source\"\n        ],\n        ImportDefaultSpecifier: [\n            \"local\"\n        ],\n        ImportNamespaceSpecifier: [\n            \"local\"\n        ],\n        ImportSpecifier: [\n            \"imported\",\n            \"local\"\n        ],\n        Literal: [],\n        LabeledStatement: [\n            \"label\",\n            \"body\"\n        ],\n        LogicalExpression: [\n            \"left\",\n            \"right\"\n        ],\n        MemberExpression: [\n            \"object\",\n            \"property\"\n        ],\n        MetaProperty: [\n            \"meta\",\n            \"property\"\n        ],\n        MethodDefinition: [\n            \"key\",\n            \"value\"\n        ],\n        ModuleSpecifier: [],\n        NewExpression: [\n            \"callee\",\n            \"arguments\"\n        ],\n        ObjectExpression: [\n            \"properties\"\n        ],\n        ObjectPattern: [\n            \"properties\"\n        ],\n        Program: [\n            \"body\"\n        ],\n        Property: [\n            \"key\",\n            \"value\"\n        ],\n        RestElement: [\n            \"argument\"\n        ],\n        ReturnStatement: [\n            \"argument\"\n        ],\n        SequenceExpression: [\n            \"expressions\"\n        ],\n        SpreadElement: [\n            \"argument\"\n        ],\n        Super: [],\n        SwitchStatement: [\n            \"discriminant\",\n            \"cases\"\n        ],\n        SwitchCase: [\n            \"test\",\n            \"consequent\"\n        ],\n        TaggedTemplateExpression: [\n            \"tag\",\n            \"quasi\"\n        ],\n        TemplateElement: [],\n        TemplateLiteral: [\n            \"quasis\",\n            \"expressions\"\n        ],\n        ThisExpression: [],\n        ThrowStatement: [\n            \"argument\"\n        ],\n        TryStatement: [\n            \"block\",\n            \"handler\",\n            \"finalizer\"\n        ],\n        UnaryExpression: [\n            \"argument\"\n        ],\n        UpdateExpression: [\n            \"argument\"\n        ],\n        VariableDeclaration: [\n            \"declarations\"\n        ],\n        VariableDeclarator: [\n            \"id\",\n            \"init\"\n        ],\n        WhileStatement: [\n            \"test\",\n            \"body\"\n        ],\n        WithStatement: [\n            \"object\",\n            \"body\"\n        ],\n        YieldExpression: [\n            \"argument\"\n        ]\n    };\n    // unique id\n    BREAK = {};\n    SKIP = {};\n    REMOVE = {};\n    VisitorOption = {\n        Break: BREAK,\n        Skip: SKIP,\n        Remove: REMOVE\n    };\n    function Reference(parent, key) {\n        this.parent = parent;\n        this.key = key;\n    }\n    Reference.prototype.replace = function replace(node) {\n        this.parent[this.key] = node;\n    };\n    Reference.prototype.remove = function remove() {\n        if (Array.isArray(this.parent)) {\n            this.parent.splice(this.key, 1);\n            return true;\n        } else {\n            this.replace(null);\n            return false;\n        }\n    };\n    function Element(node, path, wrap, ref) {\n        this.node = node;\n        this.path = path;\n        this.wrap = wrap;\n        this.ref = ref;\n    }\n    function Controller() {}\n    // API:\n    // return property path array from root to current node\n    Controller.prototype.path = function path() {\n        var i, iz, j, jz, result, element;\n        function addToPath(result, path) {\n            if (Array.isArray(path)) {\n                for(j = 0, jz = path.length; j < jz; ++j){\n                    result.push(path[j]);\n                }\n            } else {\n                result.push(path);\n            }\n        }\n        // root node\n        if (!this.__current.path) {\n            return null;\n        }\n        // first node is sentinel, second node is root element\n        result = [];\n        for(i = 2, iz = this.__leavelist.length; i < iz; ++i){\n            element = this.__leavelist[i];\n            addToPath(result, element.path);\n        }\n        addToPath(result, this.__current.path);\n        return result;\n    };\n    // API:\n    // return type of current node\n    Controller.prototype.type = function() {\n        var node = this.current();\n        return node.type || this.__current.wrap;\n    };\n    // API:\n    // return array of parent elements\n    Controller.prototype.parents = function parents() {\n        var i, iz, result;\n        // first node is sentinel\n        result = [];\n        for(i = 1, iz = this.__leavelist.length; i < iz; ++i){\n            result.push(this.__leavelist[i].node);\n        }\n        return result;\n    };\n    // API:\n    // return current node\n    Controller.prototype.current = function current() {\n        return this.__current.node;\n    };\n    Controller.prototype.__execute = function __execute(callback, element) {\n        var previous, result;\n        result = undefined;\n        previous = this.__current;\n        this.__current = element;\n        this.__state = null;\n        if (callback) {\n            result = callback.call(this, element.node, this.__leavelist[this.__leavelist.length - 1].node);\n        }\n        this.__current = previous;\n        return result;\n    };\n    // API:\n    // notify control skip / break\n    Controller.prototype.notify = function notify(flag) {\n        this.__state = flag;\n    };\n    // API:\n    // skip child nodes of current node\n    Controller.prototype.skip = function() {\n        this.notify(SKIP);\n    };\n    // API:\n    // break traversals\n    Controller.prototype[\"break\"] = function() {\n        this.notify(BREAK);\n    };\n    // API:\n    // remove node\n    Controller.prototype.remove = function() {\n        this.notify(REMOVE);\n    };\n    Controller.prototype.__initialize = function(root, visitor) {\n        this.visitor = visitor;\n        this.root = root;\n        this.__worklist = [];\n        this.__leavelist = [];\n        this.__current = null;\n        this.__state = null;\n        this.__fallback = null;\n        if (visitor.fallback === \"iteration\") {\n            this.__fallback = Object.keys;\n        } else if (typeof visitor.fallback === \"function\") {\n            this.__fallback = visitor.fallback;\n        }\n        this.__keys = VisitorKeys;\n        if (visitor.keys) {\n            this.__keys = Object.assign(Object.create(this.__keys), visitor.keys);\n        }\n    };\n    function isNode(node) {\n        if (node == null) {\n            return false;\n        }\n        return typeof node === \"object\" && typeof node.type === \"string\";\n    }\n    function isProperty(nodeType, key) {\n        return (nodeType === Syntax.ObjectExpression || nodeType === Syntax.ObjectPattern) && \"properties\" === key;\n    }\n    Controller.prototype.traverse = function traverse(root, visitor) {\n        var worklist, leavelist, element, node, nodeType, ret, key, current, current2, candidates, candidate, sentinel;\n        this.__initialize(root, visitor);\n        sentinel = {};\n        // reference\n        worklist = this.__worklist;\n        leavelist = this.__leavelist;\n        // initialize\n        worklist.push(new Element(root, null, null, null));\n        leavelist.push(new Element(null, null, null, null));\n        while(worklist.length){\n            element = worklist.pop();\n            if (element === sentinel) {\n                element = leavelist.pop();\n                ret = this.__execute(visitor.leave, element);\n                if (this.__state === BREAK || ret === BREAK) {\n                    return;\n                }\n                continue;\n            }\n            if (element.node) {\n                ret = this.__execute(visitor.enter, element);\n                if (this.__state === BREAK || ret === BREAK) {\n                    return;\n                }\n                worklist.push(sentinel);\n                leavelist.push(element);\n                if (this.__state === SKIP || ret === SKIP) {\n                    continue;\n                }\n                node = element.node;\n                nodeType = node.type || element.wrap;\n                candidates = this.__keys[nodeType];\n                if (!candidates) {\n                    if (this.__fallback) {\n                        candidates = this.__fallback(node);\n                    } else {\n                        throw new Error(\"Unknown node type \" + nodeType + \".\");\n                    }\n                }\n                current = candidates.length;\n                while((current -= 1) >= 0){\n                    key = candidates[current];\n                    candidate = node[key];\n                    if (!candidate) {\n                        continue;\n                    }\n                    if (Array.isArray(candidate)) {\n                        current2 = candidate.length;\n                        while((current2 -= 1) >= 0){\n                            if (!candidate[current2]) {\n                                continue;\n                            }\n                            if (isProperty(nodeType, candidates[current])) {\n                                element = new Element(candidate[current2], [\n                                    key,\n                                    current2\n                                ], \"Property\", null);\n                            } else if (isNode(candidate[current2])) {\n                                element = new Element(candidate[current2], [\n                                    key,\n                                    current2\n                                ], null, null);\n                            } else {\n                                continue;\n                            }\n                            worklist.push(element);\n                        }\n                    } else if (isNode(candidate)) {\n                        worklist.push(new Element(candidate, key, null, null));\n                    }\n                }\n            }\n        }\n    };\n    Controller.prototype.replace = function replace(root, visitor) {\n        var worklist, leavelist, node, nodeType, target, element, current, current2, candidates, candidate, sentinel, outer, key;\n        function removeElem(element) {\n            var i, key, nextElem, parent;\n            if (element.ref.remove()) {\n                // When the reference is an element of an array.\n                key = element.ref.key;\n                parent = element.ref.parent;\n                // If removed from array, then decrease following items' keys.\n                i = worklist.length;\n                while(i--){\n                    nextElem = worklist[i];\n                    if (nextElem.ref && nextElem.ref.parent === parent) {\n                        if (nextElem.ref.key < key) {\n                            break;\n                        }\n                        --nextElem.ref.key;\n                    }\n                }\n            }\n        }\n        this.__initialize(root, visitor);\n        sentinel = {};\n        // reference\n        worklist = this.__worklist;\n        leavelist = this.__leavelist;\n        // initialize\n        outer = {\n            root: root\n        };\n        element = new Element(root, null, null, new Reference(outer, \"root\"));\n        worklist.push(element);\n        leavelist.push(element);\n        while(worklist.length){\n            element = worklist.pop();\n            if (element === sentinel) {\n                element = leavelist.pop();\n                target = this.__execute(visitor.leave, element);\n                // node may be replaced with null,\n                // so distinguish between undefined and null in this place\n                if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {\n                    // replace\n                    element.ref.replace(target);\n                }\n                if (this.__state === REMOVE || target === REMOVE) {\n                    removeElem(element);\n                }\n                if (this.__state === BREAK || target === BREAK) {\n                    return outer.root;\n                }\n                continue;\n            }\n            target = this.__execute(visitor.enter, element);\n            // node may be replaced with null,\n            // so distinguish between undefined and null in this place\n            if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {\n                // replace\n                element.ref.replace(target);\n                element.node = target;\n            }\n            if (this.__state === REMOVE || target === REMOVE) {\n                removeElem(element);\n                element.node = null;\n            }\n            if (this.__state === BREAK || target === BREAK) {\n                return outer.root;\n            }\n            // node may be null\n            node = element.node;\n            if (!node) {\n                continue;\n            }\n            worklist.push(sentinel);\n            leavelist.push(element);\n            if (this.__state === SKIP || target === SKIP) {\n                continue;\n            }\n            nodeType = node.type || element.wrap;\n            candidates = this.__keys[nodeType];\n            if (!candidates) {\n                if (this.__fallback) {\n                    candidates = this.__fallback(node);\n                } else {\n                    throw new Error(\"Unknown node type \" + nodeType + \".\");\n                }\n            }\n            current = candidates.length;\n            while((current -= 1) >= 0){\n                key = candidates[current];\n                candidate = node[key];\n                if (!candidate) {\n                    continue;\n                }\n                if (Array.isArray(candidate)) {\n                    current2 = candidate.length;\n                    while((current2 -= 1) >= 0){\n                        if (!candidate[current2]) {\n                            continue;\n                        }\n                        if (isProperty(nodeType, candidates[current])) {\n                            element = new Element(candidate[current2], [\n                                key,\n                                current2\n                            ], \"Property\", new Reference(candidate, current2));\n                        } else if (isNode(candidate[current2])) {\n                            element = new Element(candidate[current2], [\n                                key,\n                                current2\n                            ], null, new Reference(candidate, current2));\n                        } else {\n                            continue;\n                        }\n                        worklist.push(element);\n                    }\n                } else if (isNode(candidate)) {\n                    worklist.push(new Element(candidate, key, null, new Reference(node, key)));\n                }\n            }\n        }\n        return outer.root;\n    };\n    function traverse(root, visitor) {\n        var controller = new Controller();\n        return controller.traverse(root, visitor);\n    }\n    function replace(root, visitor) {\n        var controller = new Controller();\n        return controller.replace(root, visitor);\n    }\n    function extendCommentRange(comment, tokens) {\n        var target;\n        target = upperBound(tokens, function search(token) {\n            return token.range[0] > comment.range[0];\n        });\n        comment.extendedRange = [\n            comment.range[0],\n            comment.range[1]\n        ];\n        if (target !== tokens.length) {\n            comment.extendedRange[1] = tokens[target].range[0];\n        }\n        target -= 1;\n        if (target >= 0) {\n            comment.extendedRange[0] = tokens[target].range[1];\n        }\n        return comment;\n    }\n    function attachComments(tree, providedComments, tokens) {\n        // At first, we should calculate extended comment ranges.\n        var comments = [], comment, len, i, cursor;\n        if (!tree.range) {\n            throw new Error(\"attachComments needs range information\");\n        }\n        // tokens array is empty, we attach comments to tree as 'leadingComments'\n        if (!tokens.length) {\n            if (providedComments.length) {\n                for(i = 0, len = providedComments.length; i < len; i += 1){\n                    comment = deepCopy(providedComments[i]);\n                    comment.extendedRange = [\n                        0,\n                        tree.range[0]\n                    ];\n                    comments.push(comment);\n                }\n                tree.leadingComments = comments;\n            }\n            return tree;\n        }\n        for(i = 0, len = providedComments.length; i < len; i += 1){\n            comments.push(extendCommentRange(deepCopy(providedComments[i]), tokens));\n        }\n        // This is based on John Freeman's implementation.\n        cursor = 0;\n        traverse(tree, {\n            enter: function(node) {\n                var comment;\n                while(cursor < comments.length){\n                    comment = comments[cursor];\n                    if (comment.extendedRange[1] > node.range[0]) {\n                        break;\n                    }\n                    if (comment.extendedRange[1] === node.range[0]) {\n                        if (!node.leadingComments) {\n                            node.leadingComments = [];\n                        }\n                        node.leadingComments.push(comment);\n                        comments.splice(cursor, 1);\n                    } else {\n                        cursor += 1;\n                    }\n                }\n                // already out of owned node\n                if (cursor === comments.length) {\n                    return VisitorOption.Break;\n                }\n                if (comments[cursor].extendedRange[0] > node.range[1]) {\n                    return VisitorOption.Skip;\n                }\n            }\n        });\n        cursor = 0;\n        traverse(tree, {\n            leave: function(node) {\n                var comment;\n                while(cursor < comments.length){\n                    comment = comments[cursor];\n                    if (node.range[1] < comment.extendedRange[0]) {\n                        break;\n                    }\n                    if (node.range[1] === comment.extendedRange[0]) {\n                        if (!node.trailingComments) {\n                            node.trailingComments = [];\n                        }\n                        node.trailingComments.push(comment);\n                        comments.splice(cursor, 1);\n                    } else {\n                        cursor += 1;\n                    }\n                }\n                // already out of owned node\n                if (cursor === comments.length) {\n                    return VisitorOption.Break;\n                }\n                if (comments[cursor].extendedRange[0] > node.range[1]) {\n                    return VisitorOption.Skip;\n                }\n            }\n        });\n        return tree;\n    }\n    exports1.version = (__webpack_require__(/*! ./package.json */ \"(rsc)/./node_modules/escodegen/node_modules/estraverse/package.json\").version);\n    exports1.Syntax = Syntax;\n    exports1.traverse = traverse;\n    exports1.replace = replace;\n    exports1.attachComments = attachComments;\n    exports1.VisitorKeys = VisitorKeys;\n    exports1.VisitorOption = VisitorOption;\n    exports1.Controller = Controller;\n    exports1.cloneEnvironment = function() {\n        return clone({});\n    };\n    return exports1;\n})(exports); /* vim: set sw=4 ts=4 et tw=80 : */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/escodegen/node_modules/estraverse/estraverse.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/escodegen/node_modules/estraverse/package.json":
/*!*********************************************************************!*\
  !*** ./node_modules/escodegen/node_modules/estraverse/package.json ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"name":"estraverse","description":"ECMAScript JS AST traversal functions","homepage":"https://github.com/estools/estraverse","main":"estraverse.js","version":"4.3.0","engines":{"node":">=4.0"},"maintainers":[{"name":"Yusuke Suzuki","email":"utatane.tea@gmail.com","web":"http://github.com/Constellation"}],"repository":{"type":"git","url":"http://github.com/estools/estraverse.git"},"devDependencies":{"babel-preset-env":"^1.6.1","babel-register":"^6.3.13","chai":"^2.1.1","espree":"^1.11.0","gulp":"^3.8.10","gulp-bump":"^0.2.2","gulp-filter":"^2.0.0","gulp-git":"^1.0.1","gulp-tag-version":"^1.3.0","jshint":"^2.5.6","mocha":"^2.1.0"},"license":"BSD-2-Clause","scripts":{"test":"npm run-script lint && npm run-script unit-test","lint":"jshint estraverse.js","unit-test":"mocha --compilers js:babel-register"}}');

/***/ }),

/***/ "(rsc)/./node_modules/escodegen/package.json":
/*!*********************************************!*\
  !*** ./node_modules/escodegen/package.json ***!
  \*********************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"name":"escodegen","description":"ECMAScript code generator","homepage":"http://github.com/estools/escodegen","main":"escodegen.js","bin":{"esgenerate":"./bin/esgenerate.js","escodegen":"./bin/escodegen.js"},"files":["LICENSE.BSD","README.md","bin","escodegen.js","package.json"],"version":"1.14.3","engines":{"node":">=4.0"},"maintainers":[{"name":"Yusuke Suzuki","email":"utatane.tea@gmail.com","web":"http://github.com/Constellation"}],"repository":{"type":"git","url":"http://github.com/estools/escodegen.git"},"dependencies":{"estraverse":"^4.2.0","esutils":"^2.0.2","esprima":"^4.0.1","optionator":"^0.8.1"},"optionalDependencies":{"source-map":"~0.6.1"},"devDependencies":{"acorn":"^7.1.0","bluebird":"^3.4.7","bower-registry-client":"^1.0.0","chai":"^3.5.0","commonjs-everywhere":"^0.9.7","gulp":"^3.8.10","gulp-eslint":"^3.0.1","gulp-mocha":"^3.0.1","semver":"^5.1.0"},"license":"BSD-2-Clause","scripts":{"test":"gulp travis","unit-test":"gulp test","lint":"gulp lint","release":"node tools/release.js","build-min":"./node_modules/.bin/cjsify -ma path: tools/entry-point.js > escodegen.browser.min.js","build":"./node_modules/.bin/cjsify -a path: tools/entry-point.js > escodegen.browser.js"}}');

/***/ })

};
;