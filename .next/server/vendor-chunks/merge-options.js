"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/merge-options";
exports.ids = ["vendor-chunks/merge-options"];
exports.modules = {

/***/ "(rsc)/./node_modules/merge-options/index.js":
/*!*********************************************!*\
  !*** ./node_modules/merge-options/index.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("\nconst isOptionObject = __webpack_require__(/*! is-plain-obj */ \"(rsc)/./node_modules/is-plain-obj/index.js\");\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\nconst propIsEnumerable = Object.propertyIsEnumerable;\nconst defineProperty = (obj, name, value)=>Object.defineProperty(obj, name, {\n        value,\n        writable: true,\n        enumerable: true,\n        configurable: true\n    });\nconst globalThis = this;\nconst defaultMergeOpts = {\n    concatArrays: false\n};\nconst getEnumerableOwnPropertyKeys = (value)=>{\n    const keys = [];\n    for(const key in value){\n        if (hasOwnProperty.call(value, key)) {\n            keys.push(key);\n        }\n    }\n    /* istanbul ignore else  */ if (Object.getOwnPropertySymbols) {\n        const symbols = Object.getOwnPropertySymbols(value);\n        for(let i = 0; i < symbols.length; i++){\n            if (propIsEnumerable.call(value, symbols[i])) {\n                keys.push(symbols[i]);\n            }\n        }\n    }\n    return keys;\n};\nfunction clone(value) {\n    if (Array.isArray(value)) {\n        return cloneArray(value);\n    }\n    if (isOptionObject(value)) {\n        return cloneOptionObject(value);\n    }\n    return value;\n}\nfunction cloneArray(array) {\n    const result = array.slice(0, 0);\n    getEnumerableOwnPropertyKeys(array).forEach((key)=>{\n        defineProperty(result, key, clone(array[key]));\n    });\n    return result;\n}\nfunction cloneOptionObject(obj) {\n    const result = Object.getPrototypeOf(obj) === null ? Object.create(null) : {};\n    getEnumerableOwnPropertyKeys(obj).forEach((key)=>{\n        defineProperty(result, key, clone(obj[key]));\n    });\n    return result;\n}\n/**\n * @param merged {already cloned}\n * @return {cloned Object}\n */ const mergeKeys = (merged, source, keys, mergeOpts)=>{\n    keys.forEach((key)=>{\n        // Do not recurse into prototype chain of merged\n        if (key in merged && merged[key] !== Object.getPrototypeOf(merged)) {\n            defineProperty(merged, key, merge(merged[key], source[key], mergeOpts));\n        } else {\n            defineProperty(merged, key, clone(source[key]));\n        }\n    });\n    return merged;\n};\n/**\n * @param merged {already cloned}\n * @return {cloned Object}\n *\n * see [Array.prototype.concat ( ...arguments )](http://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.concat)\n */ const concatArrays = (merged, source, mergeOpts)=>{\n    let result = merged.slice(0, 0);\n    let resultIndex = 0;\n    [\n        merged,\n        source\n    ].forEach((array)=>{\n        const indices = [];\n        // `result.concat(array)` with cloning\n        for(let k = 0; k < array.length; k++){\n            if (!hasOwnProperty.call(array, k)) {\n                continue;\n            }\n            indices.push(String(k));\n            if (array === merged) {\n                // Already cloned\n                defineProperty(result, resultIndex++, array[k]);\n            } else {\n                defineProperty(result, resultIndex++, clone(array[k]));\n            }\n        }\n        // Merge non-index keys\n        result = mergeKeys(result, array, getEnumerableOwnPropertyKeys(array).filter((key)=>{\n            return indices.indexOf(key) === -1;\n        }), mergeOpts);\n    });\n    return result;\n};\n/**\n * @param merged {already cloned}\n * @return {cloned Object}\n */ function merge(merged, source, mergeOpts) {\n    if (mergeOpts.concatArrays && Array.isArray(merged) && Array.isArray(source)) {\n        return concatArrays(merged, source, mergeOpts);\n    }\n    if (!isOptionObject(source) || !isOptionObject(merged)) {\n        return clone(source);\n    }\n    return mergeKeys(merged, source, getEnumerableOwnPropertyKeys(source), mergeOpts);\n}\nmodule.exports = function() {\n    const mergeOpts = merge(clone(defaultMergeOpts), this !== globalThis && this || {}, defaultMergeOpts);\n    let merged = {\n        foobar: {}\n    };\n    for(let i = 0; i < arguments.length; i++){\n        const option = arguments[i];\n        if (option === undefined) {\n            continue;\n        }\n        if (!isOptionObject(option)) {\n            throw new TypeError(\"`\" + option + \"` is not an Option Object\");\n        }\n        merged = merge(merged, {\n            foobar: option\n        }, mergeOpts);\n    }\n    return merged.foobar;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/merge-options/index.js\n");

/***/ })

};
;