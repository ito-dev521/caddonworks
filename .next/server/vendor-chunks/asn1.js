/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/asn1";
exports.ids = ["vendor-chunks/asn1"];
exports.modules = {

/***/ "(rsc)/./node_modules/asn1/lib/ber/errors.js":
/*!*********************************************!*\
  !*** ./node_modules/asn1/lib/ber/errors.js ***!
  \*********************************************/
/***/ ((module) => {

eval("// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.\nmodule.exports = {\n    newInvalidAsn1Error: function(msg) {\n        var e = new Error();\n        e.name = \"InvalidAsn1Error\";\n        e.message = msg || \"\";\n        return e;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaXZpbC1lbmdpbmVlcmluZy1wbGF0Zm9ybS8uL25vZGVfbW9kdWxlcy9hc24xL2xpYi9iZXIvZXJyb3JzLmpzPzMzM2IiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTEgTWFyayBDYXZhZ2UgPG1jYXZhZ2VAZ21haWwuY29tPiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIG5ld0ludmFsaWRBc24xRXJyb3I6IGZ1bmN0aW9uIChtc2cpIHtcbiAgICB2YXIgZSA9IG5ldyBFcnJvcigpO1xuICAgIGUubmFtZSA9ICdJbnZhbGlkQXNuMUVycm9yJztcbiAgICBlLm1lc3NhZ2UgPSBtc2cgfHwgJyc7XG4gICAgcmV0dXJuIGU7XG4gIH1cblxufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwibmV3SW52YWxpZEFzbjFFcnJvciIsIm1zZyIsImUiLCJFcnJvciIsIm5hbWUiLCJtZXNzYWdlIl0sIm1hcHBpbmdzIjoiQUFBQSxzRUFBc0U7QUFHdEVBLE9BQU9DLE9BQU8sR0FBRztJQUVmQyxxQkFBcUIsU0FBVUMsR0FBRztRQUNoQyxJQUFJQyxJQUFJLElBQUlDO1FBQ1pELEVBQUVFLElBQUksR0FBRztRQUNURixFQUFFRyxPQUFPLEdBQUdKLE9BQU87UUFDbkIsT0FBT0M7SUFDVDtBQUVGIiwiZmlsZSI6Iihyc2MpLy4vbm9kZV9tb2R1bGVzL2FzbjEvbGliL2Jlci9lcnJvcnMuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/asn1/lib/ber/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/asn1/lib/ber/index.js":
/*!********************************************!*\
  !*** ./node_modules/asn1/lib/ber/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.\nvar errors = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/asn1/lib/ber/errors.js\");\nvar types = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/asn1/lib/ber/types.js\");\nvar Reader = __webpack_require__(/*! ./reader */ \"(rsc)/./node_modules/asn1/lib/ber/reader.js\");\nvar Writer = __webpack_require__(/*! ./writer */ \"(rsc)/./node_modules/asn1/lib/ber/writer.js\");\n// --- Exports\nmodule.exports = {\n    Reader: Reader,\n    Writer: Writer\n};\nfor(var t in types){\n    if (types.hasOwnProperty(t)) module.exports[t] = types[t];\n}\nfor(var e in errors){\n    if (errors.hasOwnProperty(e)) module.exports[e] = errors[e];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYXNuMS9saWIvYmVyL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLHNFQUFzRTtBQUV0RSxJQUFJQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUNyQixJQUFJQyxRQUFRRCxtQkFBT0EsQ0FBQztBQUVwQixJQUFJRSxTQUFTRixtQkFBT0EsQ0FBQztBQUNyQixJQUFJRyxTQUFTSCxtQkFBT0EsQ0FBQztBQUdyQixjQUFjO0FBRWRJLE9BQU9DLE9BQU8sR0FBRztJQUVmSCxRQUFRQTtJQUVSQyxRQUFRQTtBQUVWO0FBRUEsSUFBSyxJQUFJRyxLQUFLTCxNQUFPO0lBQ25CLElBQUlBLE1BQU1NLGNBQWMsQ0FBQ0QsSUFDdkJGLE9BQU9DLE9BQU8sQ0FBQ0MsRUFBRSxHQUFHTCxLQUFLLENBQUNLLEVBQUU7QUFDaEM7QUFDQSxJQUFLLElBQUlFLEtBQUtULE9BQVE7SUFDcEIsSUFBSUEsT0FBT1EsY0FBYyxDQUFDQyxJQUN4QkosT0FBT0MsT0FBTyxDQUFDRyxFQUFFLEdBQUdULE1BQU0sQ0FBQ1MsRUFBRTtBQUNqQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NpdmlsLWVuZ2luZWVyaW5nLXBsYXRmb3JtLy4vbm9kZV9tb2R1bGVzL2FzbjEvbGliL2Jlci9pbmRleC5qcz85N2M3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDExIE1hcmsgQ2F2YWdlIDxtY2F2YWdlQGdtYWlsLmNvbT4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxudmFyIGVycm9ycyA9IHJlcXVpcmUoJy4vZXJyb3JzJyk7XG52YXIgdHlwZXMgPSByZXF1aXJlKCcuL3R5cGVzJyk7XG5cbnZhciBSZWFkZXIgPSByZXF1aXJlKCcuL3JlYWRlcicpO1xudmFyIFdyaXRlciA9IHJlcXVpcmUoJy4vd3JpdGVyJyk7XG5cblxuLy8gLS0tIEV4cG9ydHNcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgUmVhZGVyOiBSZWFkZXIsXG5cbiAgV3JpdGVyOiBXcml0ZXJcblxufTtcblxuZm9yICh2YXIgdCBpbiB0eXBlcykge1xuICBpZiAodHlwZXMuaGFzT3duUHJvcGVydHkodCkpXG4gICAgbW9kdWxlLmV4cG9ydHNbdF0gPSB0eXBlc1t0XTtcbn1cbmZvciAodmFyIGUgaW4gZXJyb3JzKSB7XG4gIGlmIChlcnJvcnMuaGFzT3duUHJvcGVydHkoZSkpXG4gICAgbW9kdWxlLmV4cG9ydHNbZV0gPSBlcnJvcnNbZV07XG59XG4iXSwibmFtZXMiOlsiZXJyb3JzIiwicmVxdWlyZSIsInR5cGVzIiwiUmVhZGVyIiwiV3JpdGVyIiwibW9kdWxlIiwiZXhwb3J0cyIsInQiLCJoYXNPd25Qcm9wZXJ0eSIsImUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/asn1/lib/ber/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/asn1/lib/ber/reader.js":
/*!*********************************************!*\
  !*** ./node_modules/asn1/lib/ber/reader.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.\nvar assert = __webpack_require__(/*! assert */ \"assert\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar ASN1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/asn1/lib/ber/types.js\");\nvar errors = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/asn1/lib/ber/errors.js\");\n// --- Globals\nvar newInvalidAsn1Error = errors.newInvalidAsn1Error;\n// --- API\nfunction Reader(data) {\n    if (!data || !Buffer.isBuffer(data)) throw new TypeError(\"data must be a node Buffer\");\n    this._buf = data;\n    this._size = data.length;\n    // These hold the \"current\" state\n    this._len = 0;\n    this._offset = 0;\n}\nObject.defineProperty(Reader.prototype, \"length\", {\n    enumerable: true,\n    get: function() {\n        return this._len;\n    }\n});\nObject.defineProperty(Reader.prototype, \"offset\", {\n    enumerable: true,\n    get: function() {\n        return this._offset;\n    }\n});\nObject.defineProperty(Reader.prototype, \"remain\", {\n    get: function() {\n        return this._size - this._offset;\n    }\n});\nObject.defineProperty(Reader.prototype, \"buffer\", {\n    get: function() {\n        return this._buf.slice(this._offset);\n    }\n});\n/**\n * Reads a single byte and advances offset; you can pass in `true` to make this\n * a \"peek\" operation (i.e., get the byte, but don't advance the offset).\n *\n * @param {Boolean} peek true means don't move offset.\n * @return {Number} the next byte, null if not enough data.\n */ Reader.prototype.readByte = function(peek) {\n    if (this._size - this._offset < 1) return null;\n    var b = this._buf[this._offset] & 0xff;\n    if (!peek) this._offset += 1;\n    return b;\n};\nReader.prototype.peek = function() {\n    return this.readByte(true);\n};\n/**\n * Reads a (potentially) variable length off the BER buffer.  This call is\n * not really meant to be called directly, as callers have to manipulate\n * the internal buffer afterwards.\n *\n * As a result of this call, you can call `Reader.length`, until the\n * next thing called that does a readLength.\n *\n * @return {Number} the amount of offset to advance the buffer.\n * @throws {InvalidAsn1Error} on bad ASN.1\n */ Reader.prototype.readLength = function(offset) {\n    if (offset === undefined) offset = this._offset;\n    if (offset >= this._size) return null;\n    var lenB = this._buf[offset++] & 0xff;\n    if (lenB === null) return null;\n    if ((lenB & 0x80) === 0x80) {\n        lenB &= 0x7f;\n        if (lenB === 0) throw newInvalidAsn1Error(\"Indefinite length not supported\");\n        if (lenB > 4) throw newInvalidAsn1Error(\"encoding too long\");\n        if (this._size - offset < lenB) return null;\n        this._len = 0;\n        for(var i = 0; i < lenB; i++)this._len = (this._len << 8) + (this._buf[offset++] & 0xff);\n    } else {\n        // Wasn't a variable length\n        this._len = lenB;\n    }\n    return offset;\n};\n/**\n * Parses the next sequence in this BER buffer.\n *\n * To get the length of the sequence, call `Reader.length`.\n *\n * @return {Number} the sequence's tag.\n */ Reader.prototype.readSequence = function(tag) {\n    var seq = this.peek();\n    if (seq === null) return null;\n    if (tag !== undefined && tag !== seq) throw newInvalidAsn1Error(\"Expected 0x\" + tag.toString(16) + \": got 0x\" + seq.toString(16));\n    var o = this.readLength(this._offset + 1); // stored in `length`\n    if (o === null) return null;\n    this._offset = o;\n    return seq;\n};\nReader.prototype.readInt = function() {\n    return this._readTag(ASN1.Integer);\n};\nReader.prototype.readBoolean = function() {\n    return this._readTag(ASN1.Boolean) === 0 ? false : true;\n};\nReader.prototype.readEnumeration = function() {\n    return this._readTag(ASN1.Enumeration);\n};\nReader.prototype.readString = function(tag, retbuf) {\n    if (!tag) tag = ASN1.OctetString;\n    var b = this.peek();\n    if (b === null) return null;\n    if (b !== tag) throw newInvalidAsn1Error(\"Expected 0x\" + tag.toString(16) + \": got 0x\" + b.toString(16));\n    var o = this.readLength(this._offset + 1); // stored in `length`\n    if (o === null) return null;\n    if (this.length > this._size - o) return null;\n    this._offset = o;\n    if (this.length === 0) return retbuf ? Buffer.alloc(0) : \"\";\n    var str = this._buf.slice(this._offset, this._offset + this.length);\n    this._offset += this.length;\n    return retbuf ? str : str.toString(\"utf8\");\n};\nReader.prototype.readOID = function(tag) {\n    if (!tag) tag = ASN1.OID;\n    var b = this.readString(tag, true);\n    if (b === null) return null;\n    var values = [];\n    var value = 0;\n    for(var i = 0; i < b.length; i++){\n        var byte = b[i] & 0xff;\n        value <<= 7;\n        value += byte & 0x7f;\n        if ((byte & 0x80) === 0) {\n            values.push(value);\n            value = 0;\n        }\n    }\n    value = values.shift();\n    values.unshift(value % 40);\n    values.unshift(value / 40 >> 0);\n    return values.join(\".\");\n};\nReader.prototype._readTag = function(tag) {\n    assert.ok(tag !== undefined);\n    var b = this.peek();\n    if (b === null) return null;\n    if (b !== tag) throw newInvalidAsn1Error(\"Expected 0x\" + tag.toString(16) + \": got 0x\" + b.toString(16));\n    var o = this.readLength(this._offset + 1); // stored in `length`\n    if (o === null) return null;\n    if (this.length > 4) throw newInvalidAsn1Error(\"Integer too long: \" + this.length);\n    if (this.length > this._size - o) return null;\n    this._offset = o;\n    var fb = this._buf[this._offset];\n    var value = 0;\n    for(var i = 0; i < this.length; i++){\n        value <<= 8;\n        value |= this._buf[this._offset++] & 0xff;\n    }\n    if ((fb & 0x80) === 0x80 && i !== 4) value -= 1 << i * 8;\n    return value >> 0;\n};\n// --- Exported API\nmodule.exports = Reader;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/asn1/lib/ber/reader.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/asn1/lib/ber/types.js":
/*!********************************************!*\
  !*** ./node_modules/asn1/lib/ber/types.js ***!
  \********************************************/
/***/ ((module) => {

eval("// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.\nmodule.exports = {\n    EOC: 0,\n    Boolean: 1,\n    Integer: 2,\n    BitString: 3,\n    OctetString: 4,\n    Null: 5,\n    OID: 6,\n    ObjectDescriptor: 7,\n    External: 8,\n    Real: 9,\n    Enumeration: 10,\n    PDV: 11,\n    Utf8String: 12,\n    RelativeOID: 13,\n    Sequence: 16,\n    Set: 17,\n    NumericString: 18,\n    PrintableString: 19,\n    T61String: 20,\n    VideotexString: 21,\n    IA5String: 22,\n    UTCTime: 23,\n    GeneralizedTime: 24,\n    GraphicString: 25,\n    VisibleString: 26,\n    GeneralString: 28,\n    UniversalString: 29,\n    CharacterString: 30,\n    BMPString: 31,\n    Constructor: 32,\n    Context: 128\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaXZpbC1lbmdpbmVlcmluZy1wbGF0Zm9ybS8uL25vZGVfbW9kdWxlcy9hc24xL2xpYi9iZXIvdHlwZXMuanM/NTk1NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMSBNYXJrIENhdmFnZSA8bWNhdmFnZUBnbWFpbC5jb20+IEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEVPQzogMCxcbiAgQm9vbGVhbjogMSxcbiAgSW50ZWdlcjogMixcbiAgQml0U3RyaW5nOiAzLFxuICBPY3RldFN0cmluZzogNCxcbiAgTnVsbDogNSxcbiAgT0lEOiA2LFxuICBPYmplY3REZXNjcmlwdG9yOiA3LFxuICBFeHRlcm5hbDogOCxcbiAgUmVhbDogOSwgLy8gZmxvYXRcbiAgRW51bWVyYXRpb246IDEwLFxuICBQRFY6IDExLFxuICBVdGY4U3RyaW5nOiAxMixcbiAgUmVsYXRpdmVPSUQ6IDEzLFxuICBTZXF1ZW5jZTogMTYsXG4gIFNldDogMTcsXG4gIE51bWVyaWNTdHJpbmc6IDE4LFxuICBQcmludGFibGVTdHJpbmc6IDE5LFxuICBUNjFTdHJpbmc6IDIwLFxuICBWaWRlb3RleFN0cmluZzogMjEsXG4gIElBNVN0cmluZzogMjIsXG4gIFVUQ1RpbWU6IDIzLFxuICBHZW5lcmFsaXplZFRpbWU6IDI0LFxuICBHcmFwaGljU3RyaW5nOiAyNSxcbiAgVmlzaWJsZVN0cmluZzogMjYsXG4gIEdlbmVyYWxTdHJpbmc6IDI4LFxuICBVbml2ZXJzYWxTdHJpbmc6IDI5LFxuICBDaGFyYWN0ZXJTdHJpbmc6IDMwLFxuICBCTVBTdHJpbmc6IDMxLFxuICBDb25zdHJ1Y3RvcjogMzIsXG4gIENvbnRleHQ6IDEyOFxufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiRU9DIiwiQm9vbGVhbiIsIkludGVnZXIiLCJCaXRTdHJpbmciLCJPY3RldFN0cmluZyIsIk51bGwiLCJPSUQiLCJPYmplY3REZXNjcmlwdG9yIiwiRXh0ZXJuYWwiLCJSZWFsIiwiRW51bWVyYXRpb24iLCJQRFYiLCJVdGY4U3RyaW5nIiwiUmVsYXRpdmVPSUQiLCJTZXF1ZW5jZSIsIlNldCIsIk51bWVyaWNTdHJpbmciLCJQcmludGFibGVTdHJpbmciLCJUNjFTdHJpbmciLCJWaWRlb3RleFN0cmluZyIsIklBNVN0cmluZyIsIlVUQ1RpbWUiLCJHZW5lcmFsaXplZFRpbWUiLCJHcmFwaGljU3RyaW5nIiwiVmlzaWJsZVN0cmluZyIsIkdlbmVyYWxTdHJpbmciLCJVbml2ZXJzYWxTdHJpbmciLCJDaGFyYWN0ZXJTdHJpbmciLCJCTVBTdHJpbmciLCJDb25zdHJ1Y3RvciIsIkNvbnRleHQiXSwibWFwcGluZ3MiOiJBQUFBLHNFQUFzRTtBQUd0RUEsT0FBT0MsT0FBTyxHQUFHO0lBQ2ZDLEtBQUs7SUFDTEMsU0FBUztJQUNUQyxTQUFTO0lBQ1RDLFdBQVc7SUFDWEMsYUFBYTtJQUNiQyxNQUFNO0lBQ05DLEtBQUs7SUFDTEMsa0JBQWtCO0lBQ2xCQyxVQUFVO0lBQ1ZDLE1BQU07SUFDTkMsYUFBYTtJQUNiQyxLQUFLO0lBQ0xDLFlBQVk7SUFDWkMsYUFBYTtJQUNiQyxVQUFVO0lBQ1ZDLEtBQUs7SUFDTEMsZUFBZTtJQUNmQyxpQkFBaUI7SUFDakJDLFdBQVc7SUFDWEMsZ0JBQWdCO0lBQ2hCQyxXQUFXO0lBQ1hDLFNBQVM7SUFDVEMsaUJBQWlCO0lBQ2pCQyxlQUFlO0lBQ2ZDLGVBQWU7SUFDZkMsZUFBZTtJQUNmQyxpQkFBaUI7SUFDakJDLGlCQUFpQjtJQUNqQkMsV0FBVztJQUNYQyxhQUFhO0lBQ2JDLFNBQVM7QUFDWCIsImZpbGUiOiIocnNjKS8uL25vZGVfbW9kdWxlcy9hc24xL2xpYi9iZXIvdHlwZXMuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/asn1/lib/ber/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/asn1/lib/ber/writer.js":
/*!*********************************************!*\
  !*** ./node_modules/asn1/lib/ber/writer.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.\nvar assert = __webpack_require__(/*! assert */ \"assert\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar ASN1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/asn1/lib/ber/types.js\");\nvar errors = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/asn1/lib/ber/errors.js\");\n// --- Globals\nvar newInvalidAsn1Error = errors.newInvalidAsn1Error;\nvar DEFAULT_OPTS = {\n    size: 1024,\n    growthFactor: 8\n};\n// --- Helpers\nfunction merge(from, to) {\n    assert.ok(from);\n    assert.equal(typeof from, \"object\");\n    assert.ok(to);\n    assert.equal(typeof to, \"object\");\n    var keys = Object.getOwnPropertyNames(from);\n    keys.forEach(function(key) {\n        if (to[key]) return;\n        var value = Object.getOwnPropertyDescriptor(from, key);\n        Object.defineProperty(to, key, value);\n    });\n    return to;\n}\n// --- API\nfunction Writer(options) {\n    options = merge(DEFAULT_OPTS, options || {});\n    this._buf = Buffer.alloc(options.size || 1024);\n    this._size = this._buf.length;\n    this._offset = 0;\n    this._options = options;\n    // A list of offsets in the buffer where we need to insert\n    // sequence tag/len pairs.\n    this._seq = [];\n}\nObject.defineProperty(Writer.prototype, \"buffer\", {\n    get: function() {\n        if (this._seq.length) throw newInvalidAsn1Error(this._seq.length + \" unended sequence(s)\");\n        return this._buf.slice(0, this._offset);\n    }\n});\nWriter.prototype.writeByte = function(b) {\n    if (typeof b !== \"number\") throw new TypeError(\"argument must be a Number\");\n    this._ensure(1);\n    this._buf[this._offset++] = b;\n};\nWriter.prototype.writeInt = function(i, tag) {\n    if (typeof i !== \"number\") throw new TypeError(\"argument must be a Number\");\n    if (typeof tag !== \"number\") tag = ASN1.Integer;\n    var sz = 4;\n    while(((i & 0xff800000) === 0 || (i & 0xff800000) === 0xff800000 >> 0) && sz > 1){\n        sz--;\n        i <<= 8;\n    }\n    if (sz > 4) throw newInvalidAsn1Error(\"BER ints cannot be > 0xffffffff\");\n    this._ensure(2 + sz);\n    this._buf[this._offset++] = tag;\n    this._buf[this._offset++] = sz;\n    while(sz-- > 0){\n        this._buf[this._offset++] = (i & 0xff000000) >>> 24;\n        i <<= 8;\n    }\n};\nWriter.prototype.writeNull = function() {\n    this.writeByte(ASN1.Null);\n    this.writeByte(0x00);\n};\nWriter.prototype.writeEnumeration = function(i, tag) {\n    if (typeof i !== \"number\") throw new TypeError(\"argument must be a Number\");\n    if (typeof tag !== \"number\") tag = ASN1.Enumeration;\n    return this.writeInt(i, tag);\n};\nWriter.prototype.writeBoolean = function(b, tag) {\n    if (typeof b !== \"boolean\") throw new TypeError(\"argument must be a Boolean\");\n    if (typeof tag !== \"number\") tag = ASN1.Boolean;\n    this._ensure(3);\n    this._buf[this._offset++] = tag;\n    this._buf[this._offset++] = 0x01;\n    this._buf[this._offset++] = b ? 0xff : 0x00;\n};\nWriter.prototype.writeString = function(s, tag) {\n    if (typeof s !== \"string\") throw new TypeError(\"argument must be a string (was: \" + typeof s + \")\");\n    if (typeof tag !== \"number\") tag = ASN1.OctetString;\n    var len = Buffer.byteLength(s);\n    this.writeByte(tag);\n    this.writeLength(len);\n    if (len) {\n        this._ensure(len);\n        this._buf.write(s, this._offset);\n        this._offset += len;\n    }\n};\nWriter.prototype.writeBuffer = function(buf, tag) {\n    if (typeof tag !== \"number\") throw new TypeError(\"tag must be a number\");\n    if (!Buffer.isBuffer(buf)) throw new TypeError(\"argument must be a buffer\");\n    this.writeByte(tag);\n    this.writeLength(buf.length);\n    this._ensure(buf.length);\n    buf.copy(this._buf, this._offset, 0, buf.length);\n    this._offset += buf.length;\n};\nWriter.prototype.writeStringArray = function(strings) {\n    if (!strings instanceof Array) throw new TypeError(\"argument must be an Array[String]\");\n    var self = this;\n    strings.forEach(function(s) {\n        self.writeString(s);\n    });\n};\n// This is really to solve DER cases, but whatever for now\nWriter.prototype.writeOID = function(s, tag) {\n    if (typeof s !== \"string\") throw new TypeError(\"argument must be a string\");\n    if (typeof tag !== \"number\") tag = ASN1.OID;\n    if (!/^([0-9]+\\.){3,}[0-9]+$/.test(s)) throw new Error(\"argument is not a valid OID string\");\n    function encodeOctet(bytes, octet) {\n        if (octet < 128) {\n            bytes.push(octet);\n        } else if (octet < 16384) {\n            bytes.push(octet >>> 7 | 0x80);\n            bytes.push(octet & 0x7F);\n        } else if (octet < 2097152) {\n            bytes.push(octet >>> 14 | 0x80);\n            bytes.push((octet >>> 7 | 0x80) & 0xFF);\n            bytes.push(octet & 0x7F);\n        } else if (octet < 268435456) {\n            bytes.push(octet >>> 21 | 0x80);\n            bytes.push((octet >>> 14 | 0x80) & 0xFF);\n            bytes.push((octet >>> 7 | 0x80) & 0xFF);\n            bytes.push(octet & 0x7F);\n        } else {\n            bytes.push((octet >>> 28 | 0x80) & 0xFF);\n            bytes.push((octet >>> 21 | 0x80) & 0xFF);\n            bytes.push((octet >>> 14 | 0x80) & 0xFF);\n            bytes.push((octet >>> 7 | 0x80) & 0xFF);\n            bytes.push(octet & 0x7F);\n        }\n    }\n    var tmp = s.split(\".\");\n    var bytes = [];\n    bytes.push(parseInt(tmp[0], 10) * 40 + parseInt(tmp[1], 10));\n    tmp.slice(2).forEach(function(b) {\n        encodeOctet(bytes, parseInt(b, 10));\n    });\n    var self = this;\n    this._ensure(2 + bytes.length);\n    this.writeByte(tag);\n    this.writeLength(bytes.length);\n    bytes.forEach(function(b) {\n        self.writeByte(b);\n    });\n};\nWriter.prototype.writeLength = function(len) {\n    if (typeof len !== \"number\") throw new TypeError(\"argument must be a Number\");\n    this._ensure(4);\n    if (len <= 0x7f) {\n        this._buf[this._offset++] = len;\n    } else if (len <= 0xff) {\n        this._buf[this._offset++] = 0x81;\n        this._buf[this._offset++] = len;\n    } else if (len <= 0xffff) {\n        this._buf[this._offset++] = 0x82;\n        this._buf[this._offset++] = len >> 8;\n        this._buf[this._offset++] = len;\n    } else if (len <= 0xffffff) {\n        this._buf[this._offset++] = 0x83;\n        this._buf[this._offset++] = len >> 16;\n        this._buf[this._offset++] = len >> 8;\n        this._buf[this._offset++] = len;\n    } else {\n        throw newInvalidAsn1Error(\"Length too long (> 4 bytes)\");\n    }\n};\nWriter.prototype.startSequence = function(tag) {\n    if (typeof tag !== \"number\") tag = ASN1.Sequence | ASN1.Constructor;\n    this.writeByte(tag);\n    this._seq.push(this._offset);\n    this._ensure(3);\n    this._offset += 3;\n};\nWriter.prototype.endSequence = function() {\n    var seq = this._seq.pop();\n    var start = seq + 3;\n    var len = this._offset - start;\n    if (len <= 0x7f) {\n        this._shift(start, len, -2);\n        this._buf[seq] = len;\n    } else if (len <= 0xff) {\n        this._shift(start, len, -1);\n        this._buf[seq] = 0x81;\n        this._buf[seq + 1] = len;\n    } else if (len <= 0xffff) {\n        this._buf[seq] = 0x82;\n        this._buf[seq + 1] = len >> 8;\n        this._buf[seq + 2] = len;\n    } else if (len <= 0xffffff) {\n        this._shift(start, len, 1);\n        this._buf[seq] = 0x83;\n        this._buf[seq + 1] = len >> 16;\n        this._buf[seq + 2] = len >> 8;\n        this._buf[seq + 3] = len;\n    } else {\n        throw newInvalidAsn1Error(\"Sequence too long\");\n    }\n};\nWriter.prototype._shift = function(start, len, shift) {\n    assert.ok(start !== undefined);\n    assert.ok(len !== undefined);\n    assert.ok(shift);\n    this._buf.copy(this._buf, start + shift, start, start + len);\n    this._offset += shift;\n};\nWriter.prototype._ensure = function(len) {\n    assert.ok(len);\n    if (this._size - this._offset < len) {\n        var sz = this._size * this._options.growthFactor;\n        if (sz - this._offset < len) sz += len;\n        var buf = Buffer.alloc(sz);\n        this._buf.copy(buf, 0, 0, this._offset);\n        this._buf = buf;\n        this._size = sz;\n    }\n};\n// --- Exported API\nmodule.exports = Writer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYXNuMS9saWIvYmVyL3dyaXRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxzRUFBc0U7QUFFdEUsSUFBSUEsU0FBU0MsbUJBQU9BLENBQUM7QUFDckIsSUFBSUMsU0FBU0QsOEZBQThCO0FBQzNDLElBQUlFLE9BQU9GLG1CQUFPQSxDQUFDO0FBQ25CLElBQUlHLFNBQVNILG1CQUFPQSxDQUFDO0FBR3JCLGNBQWM7QUFFZCxJQUFJSSxzQkFBc0JELE9BQU9DLG1CQUFtQjtBQUVwRCxJQUFJQyxlQUFlO0lBQ2pCQyxNQUFNO0lBQ05DLGNBQWM7QUFDaEI7QUFHQSxjQUFjO0FBRWQsU0FBU0MsTUFBTUMsSUFBSSxFQUFFQyxFQUFFO0lBQ3JCWCxPQUFPWSxFQUFFLENBQUNGO0lBQ1ZWLE9BQU9hLEtBQUssQ0FBQyxPQUFRSCxNQUFPO0lBQzVCVixPQUFPWSxFQUFFLENBQUNEO0lBQ1ZYLE9BQU9hLEtBQUssQ0FBQyxPQUFRRixJQUFLO0lBRTFCLElBQUlHLE9BQU9DLE9BQU9DLG1CQUFtQixDQUFDTjtJQUN0Q0ksS0FBS0csT0FBTyxDQUFDLFNBQVVDLEdBQUc7UUFDeEIsSUFBSVAsRUFBRSxDQUFDTyxJQUFJLEVBQ1Q7UUFFRixJQUFJQyxRQUFRSixPQUFPSyx3QkFBd0IsQ0FBQ1YsTUFBTVE7UUFDbERILE9BQU9NLGNBQWMsQ0FBQ1YsSUFBSU8sS0FBS0M7SUFDakM7SUFFQSxPQUFPUjtBQUNUO0FBSUEsVUFBVTtBQUVWLFNBQVNXLE9BQU9DLE9BQU87SUFDckJBLFVBQVVkLE1BQU1ILGNBQWNpQixXQUFXLENBQUM7SUFFMUMsSUFBSSxDQUFDQyxJQUFJLEdBQUd0QixPQUFPdUIsS0FBSyxDQUFDRixRQUFRaEIsSUFBSSxJQUFJO0lBQ3pDLElBQUksQ0FBQ21CLEtBQUssR0FBRyxJQUFJLENBQUNGLElBQUksQ0FBQ0csTUFBTTtJQUM3QixJQUFJLENBQUNDLE9BQU8sR0FBRztJQUNmLElBQUksQ0FBQ0MsUUFBUSxHQUFHTjtJQUVo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QixPQUFPLElBQUl1RDtBQUNsQjtBQUVBN0QsT0FBT1MsU0FBUyxDQUFDTSxPQUFPLEdBQUcsU0FBVWUsR0FBRztJQUN0Q3BELE9BQU9ZLEVBQUUsQ0FBQ3dDO0lBRVYsSUFBSSxJQUFJLENBQUMxQixLQUFLLEdBQUcsSUFBSSxDQUFDRSxPQUFPLEdBQUd3QixLQUFLO1FBQ25DLElBQUlWLEtBQUssSUFBSSxDQUFDaEIsS0FBSyxHQUFHLElBQUksQ0FBQ0csUUFBUSxDQUFDckIsWUFBWTtRQUNoRCxJQUFJa0MsS0FBSyxJQUFJLENBQUNkLE9BQU8sR0FBR3dCLEtBQ3RCVixNQUFNVTtRQUVSLElBQUlLLE1BQU12RCxPQUFPdUIsS0FBSyxDQUFDaUI7UUFFdkIsSUFBSSxDQUFDbEIsSUFBSSxDQUFDbUMsSUFBSSxDQUFDRixLQUFLLEdBQUcsR0FBRyxJQUFJLENBQUM3QixPQUFPO1FBQ3RDLElBQUksQ0FBQ0osSUFBSSxHQUFHaUM7UUFDWixJQUFJLENBQUMvQixLQUFLLEdBQUdnQjtJQUNmO0FBQ0Y7QUFJQSxtQkFBbUI7QUFFbkIyQyxPQUFPQyxPQUFPLEdBQUdoRSIsInNvdXJjZXMiOlsid2VicGFjazovL2NpdmlsLWVuZ2luZWVyaW5nLXBsYXRmb3JtLy4vbm9kZV9tb2R1bGVzL2FzbjEvbGliL2Jlci93cml0ZXIuanM/ODI4MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMSBNYXJrIENhdmFnZSA8bWNhdmFnZUBnbWFpbC5jb20+IEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKTtcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlci1idWZmZXInKS5CdWZmZXI7XG52YXIgQVNOMSA9IHJlcXVpcmUoJy4vdHlwZXMnKTtcbnZhciBlcnJvcnMgPSByZXF1aXJlKCcuL2Vycm9ycycpO1xuXG5cbi8vIC0tLSBHbG9iYWxzXG5cbnZhciBuZXdJbnZhbGlkQXNuMUVycm9yID0gZXJyb3JzLm5ld0ludmFsaWRBc24xRXJyb3I7XG5cbnZhciBERUZBVUxUX09QVFMgPSB7XG4gIHNpemU6IDEwMjQsXG4gIGdyb3d0aEZhY3RvcjogOFxufTtcblxuXG4vLyAtLS0gSGVscGVyc1xuXG5mdW5jdGlvbiBtZXJnZShmcm9tLCB0bykge1xuICBhc3NlcnQub2soZnJvbSk7XG4gIGFzc2VydC5lcXVhbCh0eXBlb2YgKGZyb20pLCAnb2JqZWN0Jyk7XG4gIGFzc2VydC5vayh0byk7XG4gIGFzc2VydC5lcXVhbCh0eXBlb2YgKHRvKSwgJ29iamVjdCcpO1xuXG4gIHZhciBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZnJvbSk7XG4gIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKHRvW2tleV0pXG4gICAgICByZXR1cm47XG5cbiAgICB2YXIgdmFsdWUgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGZyb20sIGtleSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRvLCBrZXksIHZhbHVlKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHRvO1xufVxuXG5cblxuLy8gLS0tIEFQSVxuXG5mdW5jdGlvbiBXcml0ZXIob3B0aW9ucykge1xuICBvcHRpb25zID0gbWVyZ2UoREVGQVVMVF9PUFRTLCBvcHRpb25zIHx8IHt9KTtcblxuICB0aGlzLl9idWYgPSBCdWZmZXIuYWxsb2Mob3B0aW9ucy5zaXplIHx8IDEwMjQpO1xuICB0aGlzLl9zaXplID0gdGhpcy5fYnVmLmxlbmd0aDtcbiAgdGhpcy5fb2Zmc2V0ID0gMDtcbiAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XG5cbiAgLy8gQSBsaXN0IG9mIG9mZnNldHMgaW4gdGhlIGJ1ZmZlciB3aGVyZSB3ZSBuZWVkIHRvIGluc2VydFxuICAvLyBzZXF1ZW5jZSB0YWcvbGVuIHBhaXJzLlxuICB0aGlzLl9zZXEgPSBbXTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRlci5wcm90b3R5cGUsICdidWZmZXInLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl9zZXEubGVuZ3RoKVxuICAgICAgdGhyb3cgbmV3SW52YWxpZEFzbjFFcnJvcih0aGlzLl9zZXEubGVuZ3RoICsgJyB1bmVuZGVkIHNlcXVlbmNlKHMpJyk7XG5cbiAgICByZXR1cm4gKHRoaXMuX2J1Zi5zbGljZSgwLCB0aGlzLl9vZmZzZXQpKTtcbiAgfVxufSk7XG5cbldyaXRlci5wcm90b3R5cGUud3JpdGVCeXRlID0gZnVuY3Rpb24gKGIpIHtcbiAgaWYgKHR5cGVvZiAoYikgIT09ICdudW1iZXInKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IG11c3QgYmUgYSBOdW1iZXInKTtcblxuICB0aGlzLl9lbnN1cmUoMSk7XG4gIHRoaXMuX2J1Zlt0aGlzLl9vZmZzZXQrK10gPSBiO1xufTtcblxuXG5Xcml0ZXIucHJvdG90eXBlLndyaXRlSW50ID0gZnVuY3Rpb24gKGksIHRhZykge1xuICBpZiAodHlwZW9mIChpKSAhPT0gJ251bWJlcicpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgbXVzdCBiZSBhIE51bWJlcicpO1xuICBpZiAodHlwZW9mICh0YWcpICE9PSAnbnVtYmVyJylcbiAgICB0YWcgPSBBU04xLkludGVnZXI7XG5cbiAgdmFyIHN6ID0gNDtcblxuICB3aGlsZSAoKCgoaSAmIDB4ZmY4MDAwMDApID09PSAwKSB8fCAoKGkgJiAweGZmODAwMDAwKSA9PT0gMHhmZjgwMDAwMCA+PiAwKSkgJiZcbiAgICAgICAgKHN6ID4gMSkpIHtcbiAgICBzei0tO1xuICAgIGkgPDw9IDg7XG4gIH1cblxuICBpZiAoc3ogPiA0KVxuICAgIHRocm93IG5ld0ludmFsaWRBc24xRXJyb3IoJ0JFUiBpbnRzIGNhbm5vdCBiZSA+IDB4ZmZmZmZmZmYnKTtcblxuICB0aGlzLl9lbnN1cmUoMiArIHN6KTtcbiAgdGhpcy5fYnVmW3RoaXMuX29mZnNldCsrXSA9IHRhZztcbiAgdGhpcy5fYnVmW3RoaXMuX29mZnNldCsrXSA9IHN6O1xuXG4gIHdoaWxlIChzei0tID4gMCkge1xuICAgIHRoaXMuX2J1Zlt0aGlzLl9vZmZzZXQrK10gPSAoKGkgJiAweGZmMDAwMDAwKSA+Pj4gMjQpO1xuICAgIGkgPDw9IDg7XG4gIH1cblxufTtcblxuXG5Xcml0ZXIucHJvdG90eXBlLndyaXRlTnVsbCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy53cml0ZUJ5dGUoQVNOMS5OdWxsKTtcbiAgdGhpcy53cml0ZUJ5dGUoMHgwMCk7XG59O1xuXG5cbldyaXRlci5wcm90b3R5cGUud3JpdGVFbnVtZXJhdGlvbiA9IGZ1bmN0aW9uIChpLCB0YWcpIHtcbiAgaWYgKHR5cGVvZiAoaSkgIT09ICdudW1iZXInKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IG11c3QgYmUgYSBOdW1iZXInKTtcbiAgaWYgKHR5cGVvZiAodGFnKSAhPT0gJ251bWJlcicpXG4gICAgdGFnID0gQVNOMS5FbnVtZXJhdGlvbjtcblxuICByZXR1cm4gdGhpcy53cml0ZUludChpLCB0YWcpO1xufTtcblxuXG5Xcml0ZXIucHJvdG90eXBlLndyaXRlQm9vbGVhbiA9IGZ1bmN0aW9uIChiLCB0YWcpIHtcbiAgaWYgKHR5cGVvZiAoYikgIT09ICdib29sZWFuJylcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBtdXN0IGJlIGEgQm9vbGVhbicpO1xuICBpZiAodHlwZW9mICh0YWcpICE9PSAnbnVtYmVyJylcbiAgICB0YWcgPSBBU04xLkJvb2xlYW47XG5cbiAgdGhpcy5fZW5zdXJlKDMpO1xuICB0aGlzLl9idWZbdGhpcy5fb2Zmc2V0KytdID0gdGFnO1xuICB0aGlzLl9idWZbdGhpcy5fb2Zmc2V0KytdID0gMHgwMTtcbiAgdGhpcy5fYnVmW3RoaXMuX29mZnNldCsrXSA9IGIgPyAweGZmIDogMHgwMDtcbn07XG5cblxuV3JpdGVyLnByb3RvdHlwZS53cml0ZVN0cmluZyA9IGZ1bmN0aW9uIChzLCB0YWcpIHtcbiAgaWYgKHR5cGVvZiAocykgIT09ICdzdHJpbmcnKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcgKHdhczogJyArIHR5cGVvZiAocykgKyAnKScpO1xuICBpZiAodHlwZW9mICh0YWcpICE9PSAnbnVtYmVyJylcbiAgICB0YWcgPSBBU04xLk9jdGV0U3RyaW5nO1xuXG4gIHZhciBsZW4gPSBCdWZmZXIuYnl0ZUxlbmd0aChzKTtcbiAgdGhpcy53cml0ZUJ5dGUodGFnKTtcbiAgdGhpcy53cml0ZUxlbmd0aChsZW4pO1xuICBpZiAobGVuKSB7XG4gICAgdGhpcy5fZW5zdXJlKGxlbik7XG4gICAgdGhpcy5fYnVmLndyaXRlKHMsIHRoaXMuX29mZnNldCk7XG4gICAgdGhpcy5fb2Zmc2V0ICs9IGxlbjtcbiAgfVxufTtcblxuXG5Xcml0ZXIucHJvdG90eXBlLndyaXRlQnVmZmVyID0gZnVuY3Rpb24gKGJ1ZiwgdGFnKSB7XG4gIGlmICh0eXBlb2YgKHRhZykgIT09ICdudW1iZXInKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3RhZyBtdXN0IGJlIGEgbnVtYmVyJyk7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgbXVzdCBiZSBhIGJ1ZmZlcicpO1xuXG4gIHRoaXMud3JpdGVCeXRlKHRhZyk7XG4gIHRoaXMud3JpdGVMZW5ndGgoYnVmLmxlbmd0aCk7XG4gIHRoaXMuX2Vuc3VyZShidWYubGVuZ3RoKTtcbiAgYnVmLmNvcHkodGhpcy5fYnVmLCB0aGlzLl9vZmZzZXQsIDAsIGJ1Zi5sZW5ndGgpO1xuICB0aGlzLl9vZmZzZXQgKz0gYnVmLmxlbmd0aDtcbn07XG5cblxuV3JpdGVyLnByb3RvdHlwZS53cml0ZVN0cmluZ0FycmF5ID0gZnVuY3Rpb24gKHN0cmluZ3MpIHtcbiAgaWYgKCghc3RyaW5ncyBpbnN0YW5jZW9mIEFycmF5KSlcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5W1N0cmluZ10nKTtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHN0cmluZ3MuZm9yRWFjaChmdW5jdGlvbiAocykge1xuICAgIHNlbGYud3JpdGVTdHJpbmcocyk7XG4gIH0pO1xufTtcblxuLy8gVGhpcyBpcyByZWFsbHkgdG8gc29sdmUgREVSIGNhc2VzLCBidXQgd2hhdGV2ZXIgZm9yIG5vd1xuV3JpdGVyLnByb3RvdHlwZS53cml0ZU9JRCA9IGZ1bmN0aW9uIChzLCB0YWcpIHtcbiAgaWYgKHR5cGVvZiAocykgIT09ICdzdHJpbmcnKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcnKTtcbiAgaWYgKHR5cGVvZiAodGFnKSAhPT0gJ251bWJlcicpXG4gICAgdGFnID0gQVNOMS5PSUQ7XG5cbiAgaWYgKCEvXihbMC05XStcXC4pezMsfVswLTldKyQvLnRlc3QocykpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdhcmd1bWVudCBpcyBub3QgYSB2YWxpZCBPSUQgc3RyaW5nJyk7XG5cbiAgZnVuY3Rpb24gZW5jb2RlT2N0ZXQoYnl0ZXMsIG9jdGV0KSB7XG4gICAgaWYgKG9jdGV0IDwgMTI4KSB7XG4gICAgICAgIGJ5dGVzLnB1c2gob2N0ZXQpO1xuICAgIH0gZWxzZSBpZiAob2N0ZXQgPCAxNjM4NCkge1xuICAgICAgICBieXRlcy5wdXNoKChvY3RldCA+Pj4gNykgfCAweDgwKTtcbiAgICAgICAgYnl0ZXMucHVzaChvY3RldCAmIDB4N0YpO1xuICAgIH0gZWxzZSBpZiAob2N0ZXQgPCAyMDk3MTUyKSB7XG4gICAgICBieXRlcy5wdXNoKChvY3RldCA+Pj4gMTQpIHwgMHg4MCk7XG4gICAgICBieXRlcy5wdXNoKCgob2N0ZXQgPj4+IDcpIHwgMHg4MCkgJiAweEZGKTtcbiAgICAgIGJ5dGVzLnB1c2gob2N0ZXQgJiAweDdGKTtcbiAgICB9IGVsc2UgaWYgKG9jdGV0IDwgMjY4NDM1NDU2KSB7XG4gICAgICBieXRlcy5wdXNoKChvY3RldCA+Pj4gMjEpIHwgMHg4MCk7XG4gICAgICBieXRlcy5wdXNoKCgob2N0ZXQgPj4+IDE0KSB8IDB4ODApICYgMHhGRik7XG4gICAgICBieXRlcy5wdXNoKCgob2N0ZXQgPj4+IDcpIHwgMHg4MCkgJiAweEZGKTtcbiAgICAgIGJ5dGVzLnB1c2gob2N0ZXQgJiAweDdGKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYnl0ZXMucHVzaCgoKG9jdGV0ID4+PiAyOCkgfCAweDgwKSAmIDB4RkYpO1xuICAgICAgYnl0ZXMucHVzaCgoKG9jdGV0ID4+PiAyMSkgfCAweDgwKSAmIDB4RkYpO1xuICAgICAgYnl0ZXMucHVzaCgoKG9jdGV0ID4+PiAxNCkgfCAweDgwKSAmIDB4RkYpO1xuICAgICAgYnl0ZXMucHVzaCgoKG9jdGV0ID4+PiA3KSB8IDB4ODApICYgMHhGRik7XG4gICAgICBieXRlcy5wdXNoKG9jdGV0ICYgMHg3Rik7XG4gICAgfVxuICB9XG5cbiAgdmFyIHRtcCA9IHMuc3BsaXQoJy4nKTtcbiAgdmFyIGJ5dGVzID0gW107XG4gIGJ5dGVzLnB1c2gocGFyc2VJbnQodG1wWzBdLCAxMCkgKiA0MCArIHBhcnNlSW50KHRtcFsxXSwgMTApKTtcbiAgdG1wLnNsaWNlKDIpLmZvckVhY2goZnVuY3Rpb24gKGIpIHtcbiAgICBlbmNvZGVPY3RldChieXRlcywgcGFyc2VJbnQoYiwgMTApKTtcbiAgfSk7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLl9lbnN1cmUoMiArIGJ5dGVzLmxlbmd0aCk7XG4gIHRoaXMud3JpdGVCeXRlKHRhZyk7XG4gIHRoaXMud3JpdGVMZW5ndGgoYnl0ZXMubGVuZ3RoKTtcbiAgYnl0ZXMuZm9yRWFjaChmdW5jdGlvbiAoYikge1xuICAgIHNlbGYud3JpdGVCeXRlKGIpO1xuICB9KTtcbn07XG5cblxuV3JpdGVyLnByb3RvdHlwZS53cml0ZUxlbmd0aCA9IGZ1bmN0aW9uIChsZW4pIHtcbiAgaWYgKHR5cGVvZiAobGVuKSAhPT0gJ251bWJlcicpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgbXVzdCBiZSBhIE51bWJlcicpO1xuXG4gIHRoaXMuX2Vuc3VyZSg0KTtcblxuICBpZiAobGVuIDw9IDB4N2YpIHtcbiAgICB0aGlzLl9idWZbdGhpcy5fb2Zmc2V0KytdID0gbGVuO1xuICB9IGVsc2UgaWYgKGxlbiA8PSAweGZmKSB7XG4gICAgdGhpcy5fYnVmW3RoaXMuX29mZnNldCsrXSA9IDB4ODE7XG4gICAgdGhpcy5fYnVmW3RoaXMuX29mZnNldCsrXSA9IGxlbjtcbiAgfSBlbHNlIGlmIChsZW4gPD0gMHhmZmZmKSB7XG4gICAgdGhpcy5fYnVmW3RoaXMuX29mZnNldCsrXSA9IDB4ODI7XG4gICAgdGhpcy5fYnVmW3RoaXMuX29mZnNldCsrXSA9IGxlbiA+PiA4O1xuICAgIHRoaXMuX2J1Zlt0aGlzLl9vZmZzZXQrK10gPSBsZW47XG4gIH0gZWxzZSBpZiAobGVuIDw9IDB4ZmZmZmZmKSB7XG4gICAgdGhpcy5fYnVmW3RoaXMuX29mZnNldCsrXSA9IDB4ODM7XG4gICAgdGhpcy5fYnVmW3RoaXMuX29mZnNldCsrXSA9IGxlbiA+PiAxNjtcbiAgICB0aGlzLl9idWZbdGhpcy5fb2Zmc2V0KytdID0gbGVuID4+IDg7XG4gICAgdGhpcy5fYnVmW3RoaXMuX29mZnNldCsrXSA9IGxlbjtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXdJbnZhbGlkQXNuMUVycm9yKCdMZW5ndGggdG9vIGxvbmcgKD4gNCBieXRlcyknKTtcbiAgfVxufTtcblxuV3JpdGVyLnByb3RvdHlwZS5zdGFydFNlcXVlbmNlID0gZnVuY3Rpb24gKHRhZykge1xuICBpZiAodHlwZW9mICh0YWcpICE9PSAnbnVtYmVyJylcbiAgICB0YWcgPSBBU04xLlNlcXVlbmNlIHwgQVNOMS5Db25zdHJ1Y3RvcjtcblxuICB0aGlzLndyaXRlQnl0ZSh0YWcpO1xuICB0aGlzLl9zZXEucHVzaCh0aGlzLl9vZmZzZXQpO1xuICB0aGlzLl9lbnN1cmUoMyk7XG4gIHRoaXMuX29mZnNldCArPSAzO1xufTtcblxuXG5Xcml0ZXIucHJvdG90eXBlLmVuZFNlcXVlbmNlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VxID0gdGhpcy5fc2VxLnBvcCgpO1xuICB2YXIgc3RhcnQgPSBzZXEgKyAzO1xuICB2YXIgbGVuID0gdGhpcy5fb2Zmc2V0IC0gc3RhcnQ7XG5cbiAgaWYgKGxlbiA8PSAweDdmKSB7XG4gICAgdGhpcy5fc2hpZnQoc3RhcnQsIGxlbiwgLTIpO1xuICAgIHRoaXMuX2J1ZltzZXFdID0gbGVuO1xuICB9IGVsc2UgaWYgKGxlbiA8PSAweGZmKSB7XG4gICAgdGhpcy5fc2hpZnQoc3RhcnQsIGxlbiwgLTEpO1xuICAgIHRoaXMuX2J1ZltzZXFdID0gMHg4MTtcbiAgICB0aGlzLl9idWZbc2VxICsgMV0gPSBsZW47XG4gIH0gZWxzZSBpZiAobGVuIDw9IDB4ZmZmZikge1xuICAgIHRoaXMuX2J1ZltzZXFdID0gMHg4MjtcbiAgICB0aGlzLl9idWZbc2VxICsgMV0gPSBsZW4gPj4gODtcbiAgICB0aGlzLl9idWZbc2VxICsgMl0gPSBsZW47XG4gIH0gZWxzZSBpZiAobGVuIDw9IDB4ZmZmZmZmKSB7XG4gICAgdGhpcy5fc2hpZnQoc3RhcnQsIGxlbiwgMSk7XG4gICAgdGhpcy5fYnVmW3NlcV0gPSAweDgzO1xuICAgIHRoaXMuX2J1ZltzZXEgKyAxXSA9IGxlbiA+PiAxNjtcbiAgICB0aGlzLl9idWZbc2VxICsgMl0gPSBsZW4gPj4gODtcbiAgICB0aGlzLl9idWZbc2VxICsgM10gPSBsZW47XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3SW52YWxpZEFzbjFFcnJvcignU2VxdWVuY2UgdG9vIGxvbmcnKTtcbiAgfVxufTtcblxuXG5Xcml0ZXIucHJvdG90eXBlLl9zaGlmdCA9IGZ1bmN0aW9uIChzdGFydCwgbGVuLCBzaGlmdCkge1xuICBhc3NlcnQub2soc3RhcnQgIT09IHVuZGVmaW5lZCk7XG4gIGFzc2VydC5vayhsZW4gIT09IHVuZGVmaW5lZCk7XG4gIGFzc2VydC5vayhzaGlmdCk7XG5cbiAgdGhpcy5fYnVmLmNvcHkodGhpcy5fYnVmLCBzdGFydCArIHNoaWZ0LCBzdGFydCwgc3RhcnQgKyBsZW4pO1xuICB0aGlzLl9vZmZzZXQgKz0gc2hpZnQ7XG59O1xuXG5Xcml0ZXIucHJvdG90eXBlLl9lbnN1cmUgPSBmdW5jdGlvbiAobGVuKSB7XG4gIGFzc2VydC5vayhsZW4pO1xuXG4gIGlmICh0aGlzLl9zaXplIC0gdGhpcy5fb2Zmc2V0IDwgbGVuKSB7XG4gICAgdmFyIHN6ID0gdGhpcy5fc2l6ZSAqIHRoaXMuX29wdGlvbnMuZ3Jvd3RoRmFjdG9yO1xuICAgIGlmIChzeiAtIHRoaXMuX29mZnNldCA8IGxlbilcbiAgICAgIHN6ICs9IGxlbjtcblxuICAgIHZhciBidWYgPSBCdWZmZXIuYWxsb2Moc3opO1xuXG4gICAgdGhpcy5fYnVmLmNvcHkoYnVmLCAwLCAwLCB0aGlzLl9vZmZzZXQpO1xuICAgIHRoaXMuX2J1ZiA9IGJ1ZjtcbiAgICB0aGlzLl9zaXplID0gc3o7XG4gIH1cbn07XG5cblxuXG4vLyAtLS0gRXhwb3J0ZWQgQVBJXG5cbm1vZHVsZS5leHBvcnRzID0gV3JpdGVyO1xuIl0sIm5hbWVzIjpbImFzc2VydCIsInJlcXVpcmUiLCJCdWZmZXIiLCJBU04xIiwiZXJyb3JzIiwibmV3SW52YWxpZEFzbjFFcnJvciIsIkRFRkFVTFRfT1BUUyIsInNpemUiLCJncm93dGhGYWN0b3IiLCJtZXJnZSIsImZyb20iLCJ0byIsIm9rIiwiZXF1YWwiLCJrZXlzIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImZvckVhY2giLCJrZXkiLCJ2YWx1ZSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImRlZmluZVByb3BlcnR5IiwiV3JpdGVyIiwib3B0aW9ucyIsIl9idWYiLCJhbGxvYyIsIl9zaXplIiwibGVuZ3RoIiwiX29mZnNldCIsIl9vcHRpb25zIiwiX3NlcSIsInByb3RvdHlwZSIsImdldCIsInNsaWNlIiwid3JpdGVCeXRlIiwiYiIsIlR5cGVFcnJvciIsIl9lbnN1cmUiLCJ3cml0ZUludCIsImkiLCJ0YWciLCJJbnRlZ2VyIiwic3oiLCJ3cml0ZU51bGwiLCJOdWxsIiwid3JpdGVFbnVtZXJhdGlvbiIsIkVudW1lcmF0aW9uIiwid3JpdGVCb29sZWFuIiwiQm9vbGVhbiIsIndyaXRlU3RyaW5nIiwicyIsIk9jdGV0U3RyaW5nIiwibGVuIiwiYnl0ZUxlbmd0aCIsIndyaXRlTGVuZ3RoIiwid3JpdGUiLCJ3cml0ZUJ1ZmZlciIsImJ1ZiIsImlzQnVmZmVyIiwiY29weSIsIndyaXRlU3RyaW5nQXJyYXkiLCJzdHJpbmdzIiwiQXJyYXkiLCJzZWxmIiwid3JpdGVPSUQiLCJPSUQiLCJ0ZXN0IiwiRXJyb3IiLCJlbmNvZGVPY3RldCIsImJ5dGVzIiwib2N0ZXQiLCJwdXNoIiwidG1wIiwic3BsaXQiLCJwYXJzZUludCIsInN0YXJ0U2VxdWVuY2UiLCJTZXF1ZW5jZSIsIkNvbnN0cnVjdG9yIiwiZW5kU2VxdWVuY2UiLCJzZXEiLCJwb3AiLCJzdGFydCIsIl9zaGlmdCIsInNoaWZ0IiwidW5kZWZpbmVkIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/asn1/lib/ber/writer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/asn1/lib/index.js":
/*!****************************************!*\
  !*** ./node_modules/asn1/lib/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.\n// If you have no idea what ASN.1 or BER is, see this:\n// ftp://ftp.rsa.com/pub/pkcs/ascii/layman.asc\nvar Ber = __webpack_require__(/*! ./ber/index */ \"(rsc)/./node_modules/asn1/lib/ber/index.js\");\n// --- Exported API\nmodule.exports = {\n    Ber: Ber,\n    BerReader: Ber.Reader,\n    BerWriter: Ber.Writer\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYXNuMS9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsc0VBQXNFO0FBRXRFLHNEQUFzRDtBQUN0RCw4Q0FBOEM7QUFFOUMsSUFBSUEsTUFBTUMsbUJBQU9BLENBQUM7QUFJbEIsbUJBQW1CO0FBRW5CQyxPQUFPQyxPQUFPLEdBQUc7SUFFZkgsS0FBS0E7SUFFTEksV0FBV0osSUFBSUssTUFBTTtJQUVyQkMsV0FBV04sSUFBSU8sTUFBTTtBQUV2QiIsInNvdXJjZXMiOlsid2VicGFjazovL2NpdmlsLWVuZ2luZWVyaW5nLXBsYXRmb3JtLy4vbm9kZV9tb2R1bGVzL2FzbjEvbGliL2luZGV4LmpzP2UxMGQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTEgTWFyayBDYXZhZ2UgPG1jYXZhZ2VAZ21haWwuY29tPiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG4vLyBJZiB5b3UgaGF2ZSBubyBpZGVhIHdoYXQgQVNOLjEgb3IgQkVSIGlzLCBzZWUgdGhpczpcbi8vIGZ0cDovL2Z0cC5yc2EuY29tL3B1Yi9wa2NzL2FzY2lpL2xheW1hbi5hc2NcblxudmFyIEJlciA9IHJlcXVpcmUoJy4vYmVyL2luZGV4Jyk7XG5cblxuXG4vLyAtLS0gRXhwb3J0ZWQgQVBJXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIEJlcjogQmVyLFxuXG4gIEJlclJlYWRlcjogQmVyLlJlYWRlcixcblxuICBCZXJXcml0ZXI6IEJlci5Xcml0ZXJcblxufTtcbiJdLCJuYW1lcyI6WyJCZXIiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsIkJlclJlYWRlciIsIlJlYWRlciIsIkJlcldyaXRlciIsIldyaXRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/asn1/lib/index.js\n");

/***/ })

};
;