/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ecc-jsbn";
exports.ids = ["vendor-chunks/ecc-jsbn"];
exports.modules = {

/***/ "(rsc)/./node_modules/ecc-jsbn/index.js":
/*!****************************************!*\
  !*** ./node_modules/ecc-jsbn/index.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar BigInteger = (__webpack_require__(/*! jsbn */ \"(rsc)/./node_modules/jsbn/index.js\").BigInteger);\nvar ECPointFp = (__webpack_require__(/*! ./lib/ec.js */ \"(rsc)/./node_modules/ecc-jsbn/lib/ec.js\").ECPointFp);\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nexports.ECCurves = __webpack_require__(/*! ./lib/sec.js */ \"(rsc)/./node_modules/ecc-jsbn/lib/sec.js\");\n// zero prepad\nfunction unstupid(hex, len) {\n    return hex.length >= len ? hex : unstupid(\"0\" + hex, len);\n}\nexports.ECKey = function(curve, key, isPublic) {\n    var priv;\n    var c = curve();\n    var n = c.getN();\n    var bytes = Math.floor(n.bitLength() / 8);\n    if (key) {\n        if (isPublic) {\n            var curve = c.getCurve();\n            //      var x = key.slice(1,bytes+1); // skip the 04 for uncompressed format\n            //      var y = key.slice(bytes+1);\n            //      this.P = new ECPointFp(curve,\n            //        curve.fromBigInteger(new BigInteger(x.toString(\"hex\"), 16)),\n            //        curve.fromBigInteger(new BigInteger(y.toString(\"hex\"), 16)));      \n            this.P = curve.decodePointHex(key.toString(\"hex\"));\n        } else {\n            if (key.length != bytes) return false;\n            priv = new BigInteger(key.toString(\"hex\"), 16);\n        }\n    } else {\n        var n1 = n.subtract(BigInteger.ONE);\n        var r = new BigInteger(crypto.randomBytes(n.bitLength()));\n        priv = r.mod(n1).add(BigInteger.ONE);\n        this.P = c.getG().multiply(priv);\n    }\n    if (this.P) {\n        //  var pubhex = unstupid(this.P.getX().toBigInteger().toString(16),bytes*2)+unstupid(this.P.getY().toBigInteger().toString(16),bytes*2);\n        //  this.PublicKey = Buffer.from(\"04\"+pubhex,\"hex\");\n        this.PublicKey = Buffer.from(c.getCurve().encodeCompressedPointHex(this.P), \"hex\");\n    }\n    if (priv) {\n        this.PrivateKey = Buffer.from(unstupid(priv.toString(16), bytes * 2), \"hex\");\n        this.deriveSharedSecret = function(key) {\n            if (!key || !key.P) return false;\n            var S = key.P.multiply(priv);\n            return Buffer.from(unstupid(S.getX().toBigInteger().toString(16), bytes * 2), \"hex\");\n        };\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZWNjLWpzYm4vaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsU0FBU0MsbUJBQU9BLENBQUMsc0JBQVE7QUFDN0IsSUFBSUMsYUFBYUQsa0ZBQTBCO0FBQzNDLElBQUlFLFlBQVlGLDZGQUFnQztBQUNoRCxJQUFJRyxTQUFTSCw4RkFBOEI7QUFDM0NJLHNHQUEwQztBQUUxQyxjQUFjO0FBQ2QsU0FBU0UsU0FBU0MsR0FBRyxFQUFDQyxHQUFHO0lBRXhCLE9BQU8sSUFBS0MsTUFBTSxJQUFJRCxNQUFPRCxNQUFNRCxTQUFTLE1BQUlDLEtBQUlDO0FBQ3JEO0FBRUFKLGFBQWEsR0FBRyxTQUFTTyxLQUFLLEVBQUVDLEdBQUcsRUFBRUMsUUFBUTtJQUUzQyxJQUFJQztJQUNMLElBQUlDLElBQUlKO0lBQ1IsSUFBSUssSUFBSUQsRUFBRUUsSUFBSTtJQUNiLElBQUlDLFFBQVFDLEtBQUtDLEtBQUssQ0FBQ0osRUFBRUssU0FBUyxLQUFHO0lBRXJDLElBQUdULEtBQ0g7UUFDRSxJQUFHQyxVQUNIO1lBQ0UsSUFBSUYsUUFBUUksRUFBRU8sUUFBUTtZQUM1Qiw0RUFBNEU7WUFDNUUsbUNBQW1DO1lBQ25DLHFDQUFxQztZQUNyQyxzRUFBc0U7WUFDdEUsNkVBQTZFO1lBQ3ZFLElBQUksQ0FBQ0MsQ0FBQyxHQUFHWixNQUFNYSxjQUFjLENBQUNaLElBQUlhLFFBQVEsQ0FBQztRQUM3QyxPQUFLO1lBQ0gsSUFBR2IsSUFBSUgsTUFBTSxJQUFJUyxPQUFPLE9BQU87WUFDL0JKLE9BQU8sSUFBSWIsV0FBV1csSUFBSWEsUUFBUSxDQUFDLFFBQVE7UUFDN0M7SUFDRixPQUFLO1FBQ0gsSUFBSUMsS0FBS1YsRUFBRVcsUUFBUSxDQUFDMUIsV0FBVzJCLEdBQUc7UUFDbEMsSUFBSUMsSUFBSSxJQUFJNUIsV0FBV0YsT0FBTytCLFdBQVcsQ0FBQ2QsRUFBRUssU0FBUztRQUNyRFAsT0FBT2UsRUFBRUUsR0FBRyxDQUFDTCxJQUFJTSxHQUFHLENBQUMvQixXQUFXMkIsR0FBRztRQUNuQyxJQUFJLENBQUNMLENBQUMsR0FBR1IsRUFBRWtCLElBQUksR0FBR0MsUUFBUSxDQUFDcEI7SUFDN0I7SUFDQSxJQUFHLElBQUksQ0FBQ1MsQ0FBQyxFQUNUO1FBQ0YseUlBQXlJO1FBQ3pJLG9EQUFvRDtRQUNoRCxJQUFJLENBQUNZLFNBQVMsR0FBR2hDLE9BQU9pQyxJQUFJLENBQUNyQixFQUFFTyxRQUFRLEdBQUdlLHdCQUF3QixDQUFDLElBQUksQ0FBQ2QsQ0FBQyxHQUFFO0lBQzdFO0lBQ0EsSUFBR1QsTUFDSDtRQUNFLElBQUksQ0FBQ3dCLFVBQVUsR0FBR25DLE9BQU9pQyxJQUFJLENBQUM5QixTQUFTUSxLQUFLVyxRQUFRLENBQUMsS0FBSVAsUUFBTSxJQUFHO1FBQ2xFLElBQUksQ0FBQ3FCLGtCQUFrQixHQUFHLFNBQVMzQixHQUFHO1lBRXBDLElBQUcsQ0FBQ0EsT0FBTyxDQUFDQSxJQUFJVyxDQUFDLEVBQUUsT0FBTztZQUMxQixJQUFJaUIsSUFBSTVCLElBQUlXLENBQUMsQ0FBQ1csUUFBUSxDQUFDcEI7WUFDdkIsT0FBT1gsT0FBT2lDLElBQUksQ0FBQzlCLFNBQVNrQyxFQUFFQyxJQUFJLEdBQUdDLFlBQVksR0FBR2pCLFFBQVEsQ0FBQyxLQUFJUCxRQUFNLElBQUc7UUFDN0U7SUFDRDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2l2aWwtZW5naW5lZXJpbmctcGxhdGZvcm0vLi9ub2RlX21vZHVsZXMvZWNjLWpzYm4vaW5kZXguanM/N2RiZCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY3J5cHRvID0gcmVxdWlyZShcImNyeXB0b1wiKTtcbnZhciBCaWdJbnRlZ2VyID0gcmVxdWlyZShcImpzYm5cIikuQmlnSW50ZWdlcjtcbnZhciBFQ1BvaW50RnAgPSByZXF1aXJlKFwiLi9saWIvZWMuanNcIikuRUNQb2ludEZwO1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoXCJzYWZlci1idWZmZXJcIikuQnVmZmVyO1xuZXhwb3J0cy5FQ0N1cnZlcyA9IHJlcXVpcmUoXCIuL2xpYi9zZWMuanNcIik7XG5cbi8vIHplcm8gcHJlcGFkXG5mdW5jdGlvbiB1bnN0dXBpZChoZXgsbGVuKVxue1xuXHRyZXR1cm4gKGhleC5sZW5ndGggPj0gbGVuKSA/IGhleCA6IHVuc3R1cGlkKFwiMFwiK2hleCxsZW4pO1xufVxuXG5leHBvcnRzLkVDS2V5ID0gZnVuY3Rpb24oY3VydmUsIGtleSwgaXNQdWJsaWMpXG57XG4gIHZhciBwcml2O1xuXHR2YXIgYyA9IGN1cnZlKCk7XG5cdHZhciBuID0gYy5nZXROKCk7XG4gIHZhciBieXRlcyA9IE1hdGguZmxvb3Iobi5iaXRMZW5ndGgoKS84KTtcblxuICBpZihrZXkpXG4gIHtcbiAgICBpZihpc1B1YmxpYylcbiAgICB7XG4gICAgICB2YXIgY3VydmUgPSBjLmdldEN1cnZlKCk7XG4vLyAgICAgIHZhciB4ID0ga2V5LnNsaWNlKDEsYnl0ZXMrMSk7IC8vIHNraXAgdGhlIDA0IGZvciB1bmNvbXByZXNzZWQgZm9ybWF0XG4vLyAgICAgIHZhciB5ID0ga2V5LnNsaWNlKGJ5dGVzKzEpO1xuLy8gICAgICB0aGlzLlAgPSBuZXcgRUNQb2ludEZwKGN1cnZlLFxuLy8gICAgICAgIGN1cnZlLmZyb21CaWdJbnRlZ2VyKG5ldyBCaWdJbnRlZ2VyKHgudG9TdHJpbmcoXCJoZXhcIiksIDE2KSksXG4vLyAgICAgICAgY3VydmUuZnJvbUJpZ0ludGVnZXIobmV3IEJpZ0ludGVnZXIoeS50b1N0cmluZyhcImhleFwiKSwgMTYpKSk7ICAgICAgXG4gICAgICB0aGlzLlAgPSBjdXJ2ZS5kZWNvZGVQb2ludEhleChrZXkudG9TdHJpbmcoXCJoZXhcIikpO1xuICAgIH1lbHNle1xuICAgICAgaWYoa2V5Lmxlbmd0aCAhPSBieXRlcykgcmV0dXJuIGZhbHNlO1xuICAgICAgcHJpdiA9IG5ldyBCaWdJbnRlZ2VyKGtleS50b1N0cmluZyhcImhleFwiKSwgMTYpOyAgICAgIFxuICAgIH1cbiAgfWVsc2V7XG4gICAgdmFyIG4xID0gbi5zdWJ0cmFjdChCaWdJbnRlZ2VyLk9ORSk7XG4gICAgdmFyIHIgPSBuZXcgQmlnSW50ZWdlcihjcnlwdG8ucmFuZG9tQnl0ZXMobi5iaXRMZW5ndGgoKSkpO1xuICAgIHByaXYgPSByLm1vZChuMSkuYWRkKEJpZ0ludGVnZXIuT05FKTtcbiAgICB0aGlzLlAgPSBjLmdldEcoKS5tdWx0aXBseShwcml2KTtcbiAgfVxuICBpZih0aGlzLlApXG4gIHtcbi8vICB2YXIgcHViaGV4ID0gdW5zdHVwaWQodGhpcy5QLmdldFgoKS50b0JpZ0ludGVnZXIoKS50b1N0cmluZygxNiksYnl0ZXMqMikrdW5zdHVwaWQodGhpcy5QLmdldFkoKS50b0JpZ0ludGVnZXIoKS50b1N0cmluZygxNiksYnl0ZXMqMik7XG4vLyAgdGhpcy5QdWJsaWNLZXkgPSBCdWZmZXIuZnJvbShcIjA0XCIrcHViaGV4LFwiaGV4XCIpO1xuICAgIHRoaXMuUHVibGljS2V5ID0gQnVmZmVyLmZyb20oYy5nZXRDdXJ2ZSgpLmVuY29kZUNvbXByZXNzZWRQb2ludEhleCh0aGlzLlApLFwiaGV4XCIpO1xuICB9XG4gIGlmKHByaXYpXG4gIHtcbiAgICB0aGlzLlByaXZhdGVLZXkgPSBCdWZmZXIuZnJvbSh1bnN0dXBpZChwcml2LnRvU3RyaW5nKDE2KSxieXRlcyoyKSxcImhleFwiKTtcbiAgICB0aGlzLmRlcml2ZVNoYXJlZFNlY3JldCA9IGZ1bmN0aW9uKGtleSlcbiAgICB7XG4gICAgICBpZigha2V5IHx8ICFrZXkuUCkgcmV0dXJuIGZhbHNlO1xuICAgICAgdmFyIFMgPSBrZXkuUC5tdWx0aXBseShwcml2KTtcbiAgICAgIHJldHVybiBCdWZmZXIuZnJvbSh1bnN0dXBpZChTLmdldFgoKS50b0JpZ0ludGVnZXIoKS50b1N0cmluZygxNiksYnl0ZXMqMiksXCJoZXhcIik7XG4gICB9ICAgICBcbiAgfVxufVxuXG4iXSwibmFtZXMiOlsiY3J5cHRvIiwicmVxdWlyZSIsIkJpZ0ludGVnZXIiLCJFQ1BvaW50RnAiLCJCdWZmZXIiLCJleHBvcnRzIiwiRUNDdXJ2ZXMiLCJ1bnN0dXBpZCIsImhleCIsImxlbiIsImxlbmd0aCIsIkVDS2V5IiwiY3VydmUiLCJrZXkiLCJpc1B1YmxpYyIsInByaXYiLCJjIiwibiIsImdldE4iLCJieXRlcyIsIk1hdGgiLCJmbG9vciIsImJpdExlbmd0aCIsImdldEN1cnZlIiwiUCIsImRlY29kZVBvaW50SGV4IiwidG9TdHJpbmciLCJuMSIsInN1YnRyYWN0IiwiT05FIiwiciIsInJhbmRvbUJ5dGVzIiwibW9kIiwiYWRkIiwiZ2V0RyIsIm11bHRpcGx5IiwiUHVibGljS2V5IiwiZnJvbSIsImVuY29kZUNvbXByZXNzZWRQb2ludEhleCIsIlByaXZhdGVLZXkiLCJkZXJpdmVTaGFyZWRTZWNyZXQiLCJTIiwiZ2V0WCIsInRvQmlnSW50ZWdlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ecc-jsbn/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ecc-jsbn/lib/ec.js":
/*!*****************************************!*\
  !*** ./node_modules/ecc-jsbn/lib/ec.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Basic Javascript Elliptic Curve implementation\n// Ported loosely from BouncyCastle's Java EC code\n// Only Fp curves implemented for now\n// Requires jsbn.js and jsbn2.js\nvar BigInteger = (__webpack_require__(/*! jsbn */ \"(rsc)/./node_modules/jsbn/index.js\").BigInteger);\nvar Barrett = BigInteger.prototype.Barrett;\n// ----------------\n// ECFieldElementFp\n// constructor\nfunction ECFieldElementFp(q1, x) {\n    this.x = x;\n    // TODO if(x.compareTo(q) >= 0) error\n    this.q = q1;\n}\nfunction feFpEquals(other) {\n    if (other == this) return true;\n    return this.q.equals(other.q) && this.x.equals(other.x);\n}\nfunction feFpToBigInteger() {\n    return this.x;\n}\nfunction feFpNegate() {\n    return new ECFieldElementFp(this.q, this.x.negate().mod(this.q));\n}\nfunction feFpAdd(b) {\n    return new ECFieldElementFp(this.q, this.x.add(b.toBigInteger()).mod(this.q));\n}\nfunction feFpSubtract(b) {\n    return new ECFieldElementFp(this.q, this.x.subtract(b.toBigInteger()).mod(this.q));\n}\nfunction feFpMultiply(b) {\n    return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger()).mod(this.q));\n}\nfunction feFpSquare() {\n    return new ECFieldElementFp(this.q, this.x.square().mod(this.q));\n}\nfunction feFpDivide(b) {\n    return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger().modInverse(this.q)).mod(this.q));\n}\nECFieldElementFp.prototype.equals = feFpEquals;\nECFieldElementFp.prototype.toBigInteger = feFpToBigInteger;\nECFieldElementFp.prototype.negate = feFpNegate;\nECFieldElementFp.prototype.add = feFpAdd;\nECFieldElementFp.prototype.subtract = feFpSubtract;\nECFieldElementFp.prototype.multiply = feFpMultiply;\nECFieldElementFp.prototype.square = feFpSquare;\nECFieldElementFp.prototype.divide = feFpDivide;\n// ----------------\n// ECPointFp\n// constructor\nfunction ECPointFp(curve, x, y, z) {\n    this.curve = curve;\n    this.x = x;\n    this.y = y;\n    // Projective coordinates: either zinv == null or z * zinv == 1\n    // z and zinv are just BigIntegers, not fieldElements\n    if (z == null) {\n        this.z = BigInteger.ONE;\n    } else {\n        this.z = z;\n    }\n    this.zinv = null;\n//TODO: compression flag\n}\nfunction pointFpGetX() {\n    if (this.zinv == null) {\n        this.zinv = this.z.modInverse(this.curve.q);\n    }\n    var r = this.x.toBigInteger().multiply(this.zinv);\n    this.curve.reduce(r);\n    return this.curve.fromBigInteger(r);\n}\nfunction pointFpGetY() {\n    if (this.zinv == null) {\n        this.zinv = this.z.modInverse(this.curve.q);\n    }\n    var r = this.y.toBigInteger().multiply(this.zinv);\n    this.curve.reduce(r);\n    return this.curve.fromBigInteger(r);\n}\nfunction pointFpEquals(other) {\n    if (other == this) return true;\n    if (this.isInfinity()) return other.isInfinity();\n    if (other.isInfinity()) return this.isInfinity();\n    var u, v;\n    // u = Y2 * Z1 - Y1 * Z2\n    u = other.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(other.z)).mod(this.curve.q);\n    if (!u.equals(BigInteger.ZERO)) return false;\n    // v = X2 * Z1 - X1 * Z2\n    v = other.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(other.z)).mod(this.curve.q);\n    return v.equals(BigInteger.ZERO);\n}\nfunction pointFpIsInfinity() {\n    if (this.x == null && this.y == null) return true;\n    return this.z.equals(BigInteger.ZERO) && !this.y.toBigInteger().equals(BigInteger.ZERO);\n}\nfunction pointFpNegate() {\n    return new ECPointFp(this.curve, this.x, this.y.negate(), this.z);\n}\nfunction pointFpAdd(b) {\n    if (this.isInfinity()) return b;\n    if (b.isInfinity()) return this;\n    // u = Y2 * Z1 - Y1 * Z2\n    var u = b.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(b.z)).mod(this.curve.q);\n    // v = X2 * Z1 - X1 * Z2\n    var v = b.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(b.z)).mod(this.curve.q);\n    if (BigInteger.ZERO.equals(v)) {\n        if (BigInteger.ZERO.equals(u)) {\n            return this.twice(); // this == b, so double\n        }\n        return this.curve.getInfinity(); // this = -b, so infinity\n    }\n    var THREE = new BigInteger(\"3\");\n    var x1 = this.x.toBigInteger();\n    var y1 = this.y.toBigInteger();\n    var x2 = b.x.toBigInteger();\n    var y2 = b.y.toBigInteger();\n    var v2 = v.square();\n    var v3 = v2.multiply(v);\n    var x1v2 = x1.multiply(v2);\n    var zu2 = u.square().multiply(this.z);\n    // x3 = v * (z2 * (z1 * u^2 - 2 * x1 * v^2) - v^3)\n    var x3 = zu2.subtract(x1v2.shiftLeft(1)).multiply(b.z).subtract(v3).multiply(v).mod(this.curve.q);\n    // y3 = z2 * (3 * x1 * u * v^2 - y1 * v^3 - z1 * u^3) + u * v^3\n    var y3 = x1v2.multiply(THREE).multiply(u).subtract(y1.multiply(v3)).subtract(zu2.multiply(u)).multiply(b.z).add(u.multiply(v3)).mod(this.curve.q);\n    // z3 = v^3 * z1 * z2\n    var z3 = v3.multiply(this.z).multiply(b.z).mod(this.curve.q);\n    return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);\n}\nfunction pointFpTwice() {\n    if (this.isInfinity()) return this;\n    if (this.y.toBigInteger().signum() == 0) return this.curve.getInfinity();\n    // TODO: optimized handling of constants\n    var THREE = new BigInteger(\"3\");\n    var x1 = this.x.toBigInteger();\n    var y1 = this.y.toBigInteger();\n    var y1z1 = y1.multiply(this.z);\n    var y1sqz1 = y1z1.multiply(y1).mod(this.curve.q);\n    var a = this.curve.a.toBigInteger();\n    // w = 3 * x1^2 + a * z1^2\n    var w = x1.square().multiply(THREE);\n    if (!BigInteger.ZERO.equals(a)) {\n        w = w.add(this.z.square().multiply(a));\n    }\n    w = w.mod(this.curve.q);\n    //this.curve.reduce(w);\n    // x3 = 2 * y1 * z1 * (w^2 - 8 * x1 * y1^2 * z1)\n    var x3 = w.square().subtract(x1.shiftLeft(3).multiply(y1sqz1)).shiftLeft(1).multiply(y1z1).mod(this.curve.q);\n    // y3 = 4 * y1^2 * z1 * (3 * w * x1 - 2 * y1^2 * z1) - w^3\n    var y3 = w.multiply(THREE).multiply(x1).subtract(y1sqz1.shiftLeft(1)).shiftLeft(2).multiply(y1sqz1).subtract(w.square().multiply(w)).mod(this.curve.q);\n    // z3 = 8 * (y1 * z1)^3\n    var z3 = y1z1.square().multiply(y1z1).shiftLeft(3).mod(this.curve.q);\n    return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);\n}\n// Simple NAF (Non-Adjacent Form) multiplication algorithm\n// TODO: modularize the multiplication algorithm\nfunction pointFpMultiply(k) {\n    if (this.isInfinity()) return this;\n    if (k.signum() == 0) return this.curve.getInfinity();\n    var e = k;\n    var h = e.multiply(new BigInteger(\"3\"));\n    var neg = this.negate();\n    var R = this;\n    var i;\n    for(i = h.bitLength() - 2; i > 0; --i){\n        R = R.twice();\n        var hBit = h.testBit(i);\n        var eBit = e.testBit(i);\n        if (hBit != eBit) {\n            R = R.add(hBit ? this : neg);\n        }\n    }\n    return R;\n}\n// Compute this*j + x*k (simultaneous multiplication)\nfunction pointFpMultiplyTwo(j, x, k) {\n    var i;\n    if (j.bitLength() > k.bitLength()) i = j.bitLength() - 1;\n    else i = k.bitLength() - 1;\n    var R = this.curve.getInfinity();\n    var both = this.add(x);\n    while(i >= 0){\n        R = R.twice();\n        if (j.testBit(i)) {\n            if (k.testBit(i)) {\n                R = R.add(both);\n            } else {\n                R = R.add(this);\n            }\n        } else {\n            if (k.testBit(i)) {\n                R = R.add(x);\n            }\n        }\n        --i;\n    }\n    return R;\n}\nECPointFp.prototype.getX = pointFpGetX;\nECPointFp.prototype.getY = pointFpGetY;\nECPointFp.prototype.equals = pointFpEquals;\nECPointFp.prototype.isInfinity = pointFpIsInfinity;\nECPointFp.prototype.negate = pointFpNegate;\nECPointFp.prototype.add = pointFpAdd;\nECPointFp.prototype.twice = pointFpTwice;\nECPointFp.prototype.multiply = pointFpMultiply;\nECPointFp.prototype.multiplyTwo = pointFpMultiplyTwo;\n// ----------------\n// ECCurveFp\n// constructor\nfunction ECCurveFp(q1, a, b) {\n    this.q = q1;\n    this.a = this.fromBigInteger(a);\n    this.b = this.fromBigInteger(b);\n    this.infinity = new ECPointFp(this, null, null);\n    this.reducer = new Barrett(this.q);\n}\nfunction curveFpGetQ() {\n    return this.q;\n}\nfunction curveFpGetA() {\n    return this.a;\n}\nfunction curveFpGetB() {\n    return this.b;\n}\nfunction curveFpEquals(other) {\n    if (other == this) return true;\n    return this.q.equals(other.q) && this.a.equals(other.a) && this.b.equals(other.b);\n}\nfunction curveFpGetInfinity() {\n    return this.infinity;\n}\nfunction curveFpFromBigInteger(x) {\n    return new ECFieldElementFp(this.q, x);\n}\nfunction curveReduce(x) {\n    this.reducer.reduce(x);\n}\n// for now, work with hex strings because they're easier in JS\nfunction curveFpDecodePointHex(s) {\n    switch(parseInt(s.substr(0, 2), 16)){\n        case 0:\n            return this.infinity;\n        case 2:\n        case 3:\n            // point compression not supported yet\n            return null;\n        case 4:\n        case 6:\n        case 7:\n            var len = (s.length - 2) / 2;\n            var xHex = s.substr(2, len);\n            var yHex = s.substr(len + 2, len);\n            return new ECPointFp(this, this.fromBigInteger(new BigInteger(xHex, 16)), this.fromBigInteger(new BigInteger(yHex, 16)));\n        default:\n            return null;\n    }\n}\nfunction curveFpEncodePointHex(p) {\n    if (p.isInfinity()) return \"00\";\n    var xHex = p.getX().toBigInteger().toString(16);\n    var yHex = p.getY().toBigInteger().toString(16);\n    var oLen = this.getQ().toString(16).length;\n    if (oLen % 2 != 0) oLen++;\n    while(xHex.length < oLen){\n        xHex = \"0\" + xHex;\n    }\n    while(yHex.length < oLen){\n        yHex = \"0\" + yHex;\n    }\n    return \"04\" + xHex + yHex;\n}\nECCurveFp.prototype.getQ = curveFpGetQ;\nECCurveFp.prototype.getA = curveFpGetA;\nECCurveFp.prototype.getB = curveFpGetB;\nECCurveFp.prototype.equals = curveFpEquals;\nECCurveFp.prototype.getInfinity = curveFpGetInfinity;\nECCurveFp.prototype.fromBigInteger = curveFpFromBigInteger;\nECCurveFp.prototype.reduce = curveReduce;\n//ECCurveFp.prototype.decodePointHex = curveFpDecodePointHex;\nECCurveFp.prototype.encodePointHex = curveFpEncodePointHex;\n// from: https://github.com/kaielvin/jsbn-ec-point-compression\nECCurveFp.prototype.decodePointHex = function(s) {\n    var yIsEven;\n    switch(parseInt(s.substr(0, 2), 16)){\n        case 0:\n            return this.infinity;\n        case 2:\n            yIsEven = false;\n        case 3:\n            if (yIsEven == undefined) yIsEven = true;\n            var len = s.length - 2;\n            var xHex = s.substr(2, len);\n            var x = this.fromBigInteger(new BigInteger(xHex, 16));\n            var alpha = x.multiply(x.square().add(this.getA())).add(this.getB());\n            var beta = alpha.sqrt();\n            if (beta == null) throw \"Invalid point compression\";\n            var betaValue = beta.toBigInteger();\n            if (betaValue.testBit(0) != yIsEven) {\n                // Use the other root\n                beta = this.fromBigInteger(this.getQ().subtract(betaValue));\n            }\n            return new ECPointFp(this, x, beta);\n        case 4:\n        case 6:\n        case 7:\n            var len = (s.length - 2) / 2;\n            var xHex = s.substr(2, len);\n            var yHex = s.substr(len + 2, len);\n            return new ECPointFp(this, this.fromBigInteger(new BigInteger(xHex, 16)), this.fromBigInteger(new BigInteger(yHex, 16)));\n        default:\n            return null;\n    }\n};\nECCurveFp.prototype.encodeCompressedPointHex = function(p) {\n    if (p.isInfinity()) return \"00\";\n    var xHex = p.getX().toBigInteger().toString(16);\n    var oLen = this.getQ().toString(16).length;\n    if (oLen % 2 != 0) oLen++;\n    while(xHex.length < oLen)xHex = \"0\" + xHex;\n    var yPrefix;\n    if (p.getY().toBigInteger().isEven()) yPrefix = \"02\";\n    else yPrefix = \"03\";\n    return yPrefix + xHex;\n};\nECFieldElementFp.prototype.getR = function() {\n    if (this.r != undefined) return this.r;\n    this.r = null;\n    var bitLength = this.q.bitLength();\n    if (bitLength > 128) {\n        var firstWord = this.q.shiftRight(bitLength - 64);\n        if (firstWord.intValue() == -1) {\n            this.r = BigInteger.ONE.shiftLeft(bitLength).subtract(this.q);\n        }\n    }\n    return this.r;\n};\nECFieldElementFp.prototype.modMult = function(x1, x2) {\n    return this.modReduce(x1.multiply(x2));\n};\nECFieldElementFp.prototype.modReduce = function(x) {\n    if (this.getR() != null) {\n        var qLen = q.bitLength();\n        while(x.bitLength() > qLen + 1){\n            var u = x.shiftRight(qLen);\n            var v = x.subtract(u.shiftLeft(qLen));\n            if (!this.getR().equals(BigInteger.ONE)) {\n                u = u.multiply(this.getR());\n            }\n            x = u.add(v);\n        }\n        while(x.compareTo(q) >= 0){\n            x = x.subtract(q);\n        }\n    } else {\n        x = x.mod(q);\n    }\n    return x;\n};\nECFieldElementFp.prototype.sqrt = function() {\n    if (!this.q.testBit(0)) throw \"unsupported\";\n    // p mod 4 == 3\n    if (this.q.testBit(1)) {\n        var z = new ECFieldElementFp(this.q, this.x.modPow(this.q.shiftRight(2).add(BigInteger.ONE), this.q));\n        return z.square().equals(this) ? z : null;\n    }\n    // p mod 4 == 1\n    var qMinusOne = this.q.subtract(BigInteger.ONE);\n    var legendreExponent = qMinusOne.shiftRight(1);\n    if (!this.x.modPow(legendreExponent, this.q).equals(BigInteger.ONE)) {\n        return null;\n    }\n    var u = qMinusOne.shiftRight(2);\n    var k = u.shiftLeft(1).add(BigInteger.ONE);\n    var Q = this.x;\n    var fourQ = modDouble(modDouble(Q));\n    var U, V;\n    do {\n        var P;\n        do {\n            P = new BigInteger(this.q.bitLength(), new SecureRandom());\n        }while (P.compareTo(this.q) >= 0 || !P.multiply(P).subtract(fourQ).modPow(legendreExponent, this.q).equals(qMinusOne));\n        var result = this.lucasSequence(P, Q, k);\n        U = result[0];\n        V = result[1];\n        if (this.modMult(V, V).equals(fourQ)) {\n            // Integer division by 2, mod q\n            if (V.testBit(0)) {\n                V = V.add(q);\n            }\n            V = V.shiftRight(1);\n            return new ECFieldElementFp(q, V);\n        }\n    }while (U.equals(BigInteger.ONE) || U.equals(qMinusOne));\n    return null;\n};\nECFieldElementFp.prototype.lucasSequence = function(P, Q, k) {\n    var n = k.bitLength();\n    var s = k.getLowestSetBit();\n    var Uh = BigInteger.ONE;\n    var Vl = BigInteger.TWO;\n    var Vh = P;\n    var Ql = BigInteger.ONE;\n    var Qh = BigInteger.ONE;\n    for(var j = n - 1; j >= s + 1; --j){\n        Ql = this.modMult(Ql, Qh);\n        if (k.testBit(j)) {\n            Qh = this.modMult(Ql, Q);\n            Uh = this.modMult(Uh, Vh);\n            Vl = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));\n            Vh = this.modReduce(Vh.multiply(Vh).subtract(Qh.shiftLeft(1)));\n        } else {\n            Qh = Ql;\n            Uh = this.modReduce(Uh.multiply(Vl).subtract(Ql));\n            Vh = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));\n            Vl = this.modReduce(Vl.multiply(Vl).subtract(Ql.shiftLeft(1)));\n        }\n    }\n    Ql = this.modMult(Ql, Qh);\n    Qh = this.modMult(Ql, Q);\n    Uh = this.modReduce(Uh.multiply(Vl).subtract(Ql));\n    Vl = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));\n    Ql = this.modMult(Ql, Qh);\n    for(var j = 1; j <= s; ++j){\n        Uh = this.modMult(Uh, Vl);\n        Vl = this.modReduce(Vl.multiply(Vl).subtract(Ql.shiftLeft(1)));\n        Ql = this.modMult(Ql, Ql);\n    }\n    return [\n        Uh,\n        Vl\n    ];\n};\nvar exports = {\n    ECCurveFp: ECCurveFp,\n    ECPointFp: ECPointFp,\n    ECFieldElementFp: ECFieldElementFp\n};\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZWNjLWpzYm4vbGliL2VjLmpzIiwibWFwcGluZ3MiOiJBQUFBLGlEQUFpRDtBQUNqRCxrREFBa0Q7QUFDbEQscUNBQXFDO0FBRXJDLGdDQUFnQztBQUNoQyxJQUFJQSxhQUFhQyxrRkFBMEI7QUFDM0MsSUFBSUMsVUFBVUYsV0FBV0csU0FBUyxDQUFDRCxPQUFPO0FBRTFDLG1CQUFtQjtBQUNuQixtQkFBbUI7QUFFbkIsY0FBYztBQUNkLFNBQVNFLGlCQUFpQkMsRUFBQyxFQUFDQyxDQUFDO0lBQ3pCLElBQUksQ0FBQ0EsQ0FBQyxHQUFHQTtJQUNULHFDQUFxQztJQUNyQyxJQUFJLENBQUNELENBQUMsR0FBR0E7QUFDYjtBQUVBLFNBQVNFLFdBQVdDLEtBQUs7SUFDckIsSUFBR0EsU0FBUyxJQUFJLEVBQUUsT0FBTztJQUN6QixPQUFRLElBQUksQ0FBQ0gsQ0FBQyxDQUFDSSxNQUFNLENBQUNELE1BQU1ILENBQUMsS0FBSyxJQUFJLENBQUNDLENBQUMsQ0FBQ0csTUFBTSxDQUFDRCxNQUFNRixDQUFDO0FBQzNEO0FBRUEsU0FBU0k7SUFDTCxPQUFPLElBQUksQ0FBQ0osQ0FBQztBQUNqQjtBQUVBLFNBQVNLO0lBQ0wsT0FBTyxJQUFJUCxpQkFBaUIsSUFBSSxDQUFDQyxDQUFDLEVBQUUsSUFBSSxDQUFDQyxDQUFDLENBQUNNLE1BQU0sR0FBR0MsR0FBRyxDQUFDLElBQUksQ0FBQ1IsQ0FBQztBQUNsRTtBQUVBLFNBQVNTLFFBQVFDLENBQUM7SUFDZCxPQUFPLElBQUlYLGlCQUFpQixJQUFJLENBQUNDLENBQUMsRUFBRSxJQUFJLENBQUNDLENBQUMsQ0FBQ1UsR0FBRyxDQUFDRCxFQUFFRSxZQUFZLElBQUlKLEdBQUcsQ0FBQyxJQUFJLENBQUNSLENBQUM7QUFDL0U7QUFFQSxTQUFTYSxhQUFhSCxDQUFDO0lBQ25CLE9BQU8sSUFBSVgsaUJBQWlCLElBQUksQ0FBQ0MsQ0FBQyxFQUFFLElBQUksQ0FBQ0MsQ0FBQyxDQUFDYSxR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QUksQ0FBQ2xCLFNBQVMsQ0FBQ2tCLEdBQUcxSCxRQUFRLENBQUMwSCxJQUFJNUgsUUFBUSxDQUFDK0gsR0FBR3hGLFNBQVMsQ0FBQztRQUM5RDtJQUNKO0lBRUF3RixLQUFLLElBQUksQ0FBQ3RCLE9BQU8sQ0FBQ3NCLElBQUlDO0lBQ3RCQSxLQUFLLElBQUksQ0FBQ3ZCLE9BQU8sQ0FBQ3NCLElBQUlmO0lBQ3RCVyxLQUFLLElBQUksQ0FBQ2pCLFNBQVMsQ0FBQ2lCLEdBQUd6SCxRQUFRLENBQUMwSCxJQUFJNUgsUUFBUSxDQUFDK0g7SUFDN0NILEtBQUssSUFBSSxDQUFDbEIsU0FBUyxDQUFDb0IsR0FBRzVILFFBQVEsQ0FBQzBILElBQUk1SCxRQUFRLENBQUNxSCxFQUFFbkgsUUFBUSxDQUFDNkg7SUFDeERBLEtBQUssSUFBSSxDQUFDdEIsT0FBTyxDQUFDc0IsSUFBSUM7SUFFdEIsSUFBSyxJQUFJcEUsSUFBSSxHQUFHQSxLQUFLZ0IsR0FBRyxFQUFFaEIsRUFDMUI7UUFDSStELEtBQUssSUFBSSxDQUFDbEIsT0FBTyxDQUFDa0IsSUFBSUM7UUFDdEJBLEtBQUssSUFBSSxDQUFDbEIsU0FBUyxDQUFDa0IsR0FBRzFILFFBQVEsQ0FBQzBILElBQUk1SCxRQUFRLENBQUMrSCxHQUFHeEYsU0FBUyxDQUFDO1FBQzFEd0YsS0FBSyxJQUFJLENBQUN0QixPQUFPLENBQUNzQixJQUFJQTtJQUMxQjtJQUVBLE9BQU87UUFBRUo7UUFBSUM7S0FBSTtBQUNyQjtBQUVBLElBQUlLLFVBQVU7SUFDWmhFLFdBQVdBO0lBQ1h6RCxXQUFXQTtJQUNYdkIsa0JBQWtCQTtBQUNwQjtBQUVBaUosT0FBT0QsT0FBTyxHQUFHQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NpdmlsLWVuZ2luZWVyaW5nLXBsYXRmb3JtLy4vbm9kZV9tb2R1bGVzL2VjYy1qc2JuL2xpYi9lYy5qcz83ZDJkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEJhc2ljIEphdmFzY3JpcHQgRWxsaXB0aWMgQ3VydmUgaW1wbGVtZW50YXRpb25cbi8vIFBvcnRlZCBsb29zZWx5IGZyb20gQm91bmN5Q2FzdGxlJ3MgSmF2YSBFQyBjb2RlXG4vLyBPbmx5IEZwIGN1cnZlcyBpbXBsZW1lbnRlZCBmb3Igbm93XG5cbi8vIFJlcXVpcmVzIGpzYm4uanMgYW5kIGpzYm4yLmpzXG52YXIgQmlnSW50ZWdlciA9IHJlcXVpcmUoJ2pzYm4nKS5CaWdJbnRlZ2VyXG52YXIgQmFycmV0dCA9IEJpZ0ludGVnZXIucHJvdG90eXBlLkJhcnJldHRcblxuLy8gLS0tLS0tLS0tLS0tLS0tLVxuLy8gRUNGaWVsZEVsZW1lbnRGcFxuXG4vLyBjb25zdHJ1Y3RvclxuZnVuY3Rpb24gRUNGaWVsZEVsZW1lbnRGcChxLHgpIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIC8vIFRPRE8gaWYoeC5jb21wYXJlVG8ocSkgPj0gMCkgZXJyb3JcbiAgICB0aGlzLnEgPSBxO1xufVxuXG5mdW5jdGlvbiBmZUZwRXF1YWxzKG90aGVyKSB7XG4gICAgaWYob3RoZXIgPT0gdGhpcykgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuICh0aGlzLnEuZXF1YWxzKG90aGVyLnEpICYmIHRoaXMueC5lcXVhbHMob3RoZXIueCkpO1xufVxuXG5mdW5jdGlvbiBmZUZwVG9CaWdJbnRlZ2VyKCkge1xuICAgIHJldHVybiB0aGlzLng7XG59XG5cbmZ1bmN0aW9uIGZlRnBOZWdhdGUoKSB7XG4gICAgcmV0dXJuIG5ldyBFQ0ZpZWxkRWxlbWVudEZwKHRoaXMucSwgdGhpcy54Lm5lZ2F0ZSgpLm1vZCh0aGlzLnEpKTtcbn1cblxuZnVuY3Rpb24gZmVGcEFkZChiKSB7XG4gICAgcmV0dXJuIG5ldyBFQ0ZpZWxkRWxlbWVudEZwKHRoaXMucSwgdGhpcy54LmFkZChiLnRvQmlnSW50ZWdlcigpKS5tb2QodGhpcy5xKSk7XG59XG5cbmZ1bmN0aW9uIGZlRnBTdWJ0cmFjdChiKSB7XG4gICAgcmV0dXJuIG5ldyBFQ0ZpZWxkRWxlbWVudEZwKHRoaXMucSwgdGhpcy54LnN1YnRyYWN0KGIudG9CaWdJbnRlZ2VyKCkpLm1vZCh0aGlzLnEpKTtcbn1cblxuZnVuY3Rpb24gZmVGcE11bHRpcGx5KGIpIHtcbiAgICByZXR1cm4gbmV3IEVDRmllbGRFbGVtZW50RnAodGhpcy5xLCB0aGlzLngubXVsdGlwbHkoYi50b0JpZ0ludGVnZXIoKSkubW9kKHRoaXMucSkpO1xufVxuXG5mdW5jdGlvbiBmZUZwU3F1YXJlKCkge1xuICAgIHJldHVybiBuZXcgRUNGaWVsZEVsZW1lbnRGcCh0aGlzLnEsIHRoaXMueC5zcXVhcmUoKS5tb2QodGhpcy5xKSk7XG59XG5cbmZ1bmN0aW9uIGZlRnBEaXZpZGUoYikge1xuICAgIHJldHVybiBuZXcgRUNGaWVsZEVsZW1lbnRGcCh0aGlzLnEsIHRoaXMueC5tdWx0aXBseShiLnRvQmlnSW50ZWdlcigpLm1vZEludmVyc2UodGhpcy5xKSkubW9kKHRoaXMucSkpO1xufVxuXG5FQ0ZpZWxkRWxlbWVudEZwLnByb3RvdHlwZS5lcXVhbHMgPSBmZUZwRXF1YWxzO1xuRUNGaWVsZEVsZW1lbnRGcC5wcm90b3R5cGUudG9CaWdJbnRlZ2VyID0gZmVGcFRvQmlnSW50ZWdlcjtcbkVDRmllbGRFbGVtZW50RnAucHJvdG90eXBlLm5lZ2F0ZSA9IGZlRnBOZWdhdGU7XG5FQ0ZpZWxkRWxlbWVudEZwLnByb3RvdHlwZS5hZGQgPSBmZUZwQWRkO1xuRUNGaWVsZEVsZW1lbnRGcC5wcm90b3R5cGUuc3VidHJhY3QgPSBmZUZwU3VidHJhY3Q7XG5FQ0ZpZWxkRWxlbWVudEZwLnByb3RvdHlwZS5tdWx0aXBseSA9IGZlRnBNdWx0aXBseTtcbkVDRmllbGRFbGVtZW50RnAucHJvdG90eXBlLnNxdWFyZSA9IGZlRnBTcXVhcmU7XG5FQ0ZpZWxkRWxlbWVudEZwLnByb3RvdHlwZS5kaXZpZGUgPSBmZUZwRGl2aWRlO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tXG4vLyBFQ1BvaW50RnBcblxuLy8gY29uc3RydWN0b3JcbmZ1bmN0aW9uIEVDUG9pbnRGcChjdXJ2ZSx4LHkseikge1xuICAgIHRoaXMuY3VydmUgPSBjdXJ2ZTtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gICAgLy8gUHJvamVjdGl2ZSBjb29yZGluYXRlczogZWl0aGVyIHppbnYgPT0gbnVsbCBvciB6ICogemludiA9PSAxXG4gICAgLy8geiBhbmQgemludiBhcmUganVzdCBCaWdJbnRlZ2Vycywgbm90IGZpZWxkRWxlbWVudHNcbiAgICBpZih6ID09IG51bGwpIHtcbiAgICAgIHRoaXMueiA9IEJpZ0ludGVnZXIuT05FO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMueiA9IHo7XG4gICAgfVxuICAgIHRoaXMuemludiA9IG51bGw7XG4gICAgLy9UT0RPOiBjb21wcmVzc2lvbiBmbGFnXG59XG5cbmZ1bmN0aW9uIHBvaW50RnBHZXRYKCkge1xuICAgIGlmKHRoaXMuemludiA9PSBudWxsKSB7XG4gICAgICB0aGlzLnppbnYgPSB0aGlzLnoubW9kSW52ZXJzZSh0aGlzLmN1cnZlLnEpO1xuICAgIH1cbiAgICB2YXIgciA9IHRoaXMueC50b0JpZ0ludGVnZXIoKS5tdWx0aXBseSh0aGlzLnppbnYpO1xuICAgIHRoaXMuY3VydmUucmVkdWNlKHIpO1xuICAgIHJldHVybiB0aGlzLmN1cnZlLmZyb21CaWdJbnRlZ2VyKHIpO1xufVxuXG5mdW5jdGlvbiBwb2ludEZwR2V0WSgpIHtcbiAgICBpZih0aGlzLnppbnYgPT0gbnVsbCkge1xuICAgICAgdGhpcy56aW52ID0gdGhpcy56Lm1vZEludmVyc2UodGhpcy5jdXJ2ZS5xKTtcbiAgICB9XG4gICAgdmFyIHIgPSB0aGlzLnkudG9CaWdJbnRlZ2VyKCkubXVsdGlwbHkodGhpcy56aW52KTtcbiAgICB0aGlzLmN1cnZlLnJlZHVjZShyKTtcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5mcm9tQmlnSW50ZWdlcihyKTtcbn1cblxuZnVuY3Rpb24gcG9pbnRGcEVxdWFscyhvdGhlcikge1xuICAgIGlmKG90aGVyID09IHRoaXMpIHJldHVybiB0cnVlO1xuICAgIGlmKHRoaXMuaXNJbmZpbml0eSgpKSByZXR1cm4gb3RoZXIuaXNJbmZpbml0eSgpO1xuICAgIGlmKG90aGVyLmlzSW5maW5pdHkoKSkgcmV0dXJuIHRoaXMuaXNJbmZpbml0eSgpO1xuICAgIHZhciB1LCB2O1xuICAgIC8vIHUgPSBZMiAqIFoxIC0gWTEgKiBaMlxuICAgIHUgPSBvdGhlci55LnRvQmlnSW50ZWdlcigpLm11bHRpcGx5KHRoaXMueikuc3VidHJhY3QodGhpcy55LnRvQmlnSW50ZWdlcigpLm11bHRpcGx5KG90aGVyLnopKS5tb2QodGhpcy5jdXJ2ZS5xKTtcbiAgICBpZighdS5lcXVhbHMoQmlnSW50ZWdlci5aRVJPKSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIHYgPSBYMiAqIFoxIC0gWDEgKiBaMlxuICAgIHYgPSBvdGhlci54LnRvQmlnSW50ZWdlcigpLm11bHRpcGx5KHRoaXMueikuc3VidHJhY3QodGhpcy54LnRvQmlnSW50ZWdlcigpLm11bHRpcGx5KG90aGVyLnopKS5tb2QodGhpcy5jdXJ2ZS5xKTtcbiAgICByZXR1cm4gdi5lcXVhbHMoQmlnSW50ZWdlci5aRVJPKTtcbn1cblxuZnVuY3Rpb24gcG9pbnRGcElzSW5maW5pdHkoKSB7XG4gICAgaWYoKHRoaXMueCA9PSBudWxsKSAmJiAodGhpcy55ID09IG51bGwpKSByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gdGhpcy56LmVxdWFscyhCaWdJbnRlZ2VyLlpFUk8pICYmICF0aGlzLnkudG9CaWdJbnRlZ2VyKCkuZXF1YWxzKEJpZ0ludGVnZXIuWkVSTyk7XG59XG5cbmZ1bmN0aW9uIHBvaW50RnBOZWdhdGUoKSB7XG4gICAgcmV0dXJuIG5ldyBFQ1BvaW50RnAodGhpcy5jdXJ2ZSwgdGhpcy54LCB0aGlzLnkubmVnYXRlKCksIHRoaXMueik7XG59XG5cbmZ1bmN0aW9uIHBvaW50RnBBZGQoYikge1xuICAgIGlmKHRoaXMuaXNJbmZpbml0eSgpKSByZXR1cm4gYjtcbiAgICBpZihiLmlzSW5maW5pdHkoKSkgcmV0dXJuIHRoaXM7XG5cbiAgICAvLyB1ID0gWTIgKiBaMSAtIFkxICogWjJcbiAgICB2YXIgdSA9IGIueS50b0JpZ0ludGVnZXIoKS5tdWx0aXBseSh0aGlzLnopLnN1YnRyYWN0KHRoaXMueS50b0JpZ0ludGVnZXIoKS5tdWx0aXBseShiLnopKS5tb2QodGhpcy5jdXJ2ZS5xKTtcbiAgICAvLyB2ID0gWDIgKiBaMSAtIFgxICogWjJcbiAgICB2YXIgdiA9IGIueC50b0JpZ0ludGVnZXIoKS5tdWx0aXBseSh0aGlzLnopLnN1YnRyYWN0KHRoaXMueC50b0JpZ0ludGVnZXIoKS5tdWx0aXBseShiLnopKS5tb2QodGhpcy5jdXJ2ZS5xKTtcblxuICAgIGlmKEJpZ0ludGVnZXIuWkVSTy5lcXVhbHModikpIHtcbiAgICAgICAgaWYoQmlnSW50ZWdlci5aRVJPLmVxdWFscyh1KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudHdpY2UoKTsgLy8gdGhpcyA9PSBiLCBzbyBkb3VibGVcbiAgICAgICAgfVxuXHRyZXR1cm4gdGhpcy5jdXJ2ZS5nZXRJbmZpbml0eSgpOyAvLyB0aGlzID0gLWIsIHNvIGluZmluaXR5XG4gICAgfVxuXG4gICAgdmFyIFRIUkVFID0gbmV3IEJpZ0ludGVnZXIoXCIzXCIpO1xuICAgIHZhciB4MSA9IHRoaXMueC50b0JpZ0ludGVnZXIoKTtcbiAgICB2YXIgeTEgPSB0aGlzLnkudG9CaWdJbnRlZ2VyKCk7XG4gICAgdmFyIHgyID0gYi54LnRvQmlnSW50ZWdlcigpO1xuICAgIHZhciB5MiA9IGIueS50b0JpZ0ludGVnZXIoKTtcblxuICAgIHZhciB2MiA9IHYuc3F1YXJlKCk7XG4gICAgdmFyIHYzID0gdjIubXVsdGlwbHkodik7XG4gICAgdmFyIHgxdjIgPSB4MS5tdWx0aXBseSh2Mik7XG4gICAgdmFyIHp1MiA9IHUuc3F1YXJlKCkubXVsdGlwbHkodGhpcy56KTtcblxuICAgIC8vIHgzID0gdiAqICh6MiAqICh6MSAqIHVeMiAtIDIgKiB4MSAqIHZeMikgLSB2XjMpXG4gICAgdmFyIHgzID0genUyLnN1YnRyYWN0KHgxdjIuc2hpZnRMZWZ0KDEpKS5tdWx0aXBseShiLnopLnN1YnRyYWN0KHYzKS5tdWx0aXBseSh2KS5tb2QodGhpcy5jdXJ2ZS5xKTtcbiAgICAvLyB5MyA9IHoyICogKDMgKiB4MSAqIHUgKiB2XjIgLSB5MSAqIHZeMyAtIHoxICogdV4zKSArIHUgKiB2XjNcbiAgICB2YXIgeTMgPSB4MXYyLm11bHRpcGx5KFRIUkVFKS5tdWx0aXBseSh1KS5zdWJ0cmFjdCh5MS5tdWx0aXBseSh2MykpLnN1YnRyYWN0KHp1Mi5tdWx0aXBseSh1KSkubXVsdGlwbHkoYi56KS5hZGQodS5tdWx0aXBseSh2MykpLm1vZCh0aGlzLmN1cnZlLnEpO1xuICAgIC8vIHozID0gdl4zICogejEgKiB6MlxuICAgIHZhciB6MyA9IHYzLm11bHRpcGx5KHRoaXMueikubXVsdGlwbHkoYi56KS5tb2QodGhpcy5jdXJ2ZS5xKTtcblxuICAgIHJldHVybiBuZXcgRUNQb2ludEZwKHRoaXMuY3VydmUsIHRoaXMuY3VydmUuZnJvbUJpZ0ludGVnZXIoeDMpLCB0aGlzLmN1cnZlLmZyb21CaWdJbnRlZ2VyKHkzKSwgejMpO1xufVxuXG5mdW5jdGlvbiBwb2ludEZwVHdpY2UoKSB7XG4gICAgaWYodGhpcy5pc0luZmluaXR5KCkpIHJldHVybiB0aGlzO1xuICAgIGlmKHRoaXMueS50b0JpZ0ludGVnZXIoKS5zaWdudW0oKSA9PSAwKSByZXR1cm4gdGhpcy5jdXJ2ZS5nZXRJbmZpbml0eSgpO1xuXG4gICAgLy8gVE9ETzogb3B0aW1pemVkIGhhbmRsaW5nIG9mIGNvbnN0YW50c1xuICAgIHZhciBUSFJFRSA9IG5ldyBCaWdJbnRlZ2VyKFwiM1wiKTtcbiAgICB2YXIgeDEgPSB0aGlzLngudG9CaWdJbnRlZ2VyKCk7XG4gICAgdmFyIHkxID0gdGhpcy55LnRvQmlnSW50ZWdlcigpO1xuXG4gICAgdmFyIHkxejEgPSB5MS5tdWx0aXBseSh0aGlzLnopO1xuICAgIHZhciB5MXNxejEgPSB5MXoxLm11bHRpcGx5KHkxKS5tb2QodGhpcy5jdXJ2ZS5xKTtcbiAgICB2YXIgYSA9IHRoaXMuY3VydmUuYS50b0JpZ0ludGVnZXIoKTtcblxuICAgIC8vIHcgPSAzICogeDFeMiArIGEgKiB6MV4yXG4gICAgdmFyIHcgPSB4MS5zcXVhcmUoKS5tdWx0aXBseShUSFJFRSk7XG4gICAgaWYoIUJpZ0ludGVnZXIuWkVSTy5lcXVhbHMoYSkpIHtcbiAgICAgIHcgPSB3LmFkZCh0aGlzLnouc3F1YXJlKCkubXVsdGlwbHkoYSkpO1xuICAgIH1cbiAgICB3ID0gdy5tb2QodGhpcy5jdXJ2ZS5xKTtcbiAgICAvL3RoaXMuY3VydmUucmVkdWNlKHcpO1xuICAgIC8vIHgzID0gMiAqIHkxICogejEgKiAod14yIC0gOCAqIHgxICogeTFeMiAqIHoxKVxuICAgIHZhciB4MyA9IHcuc3F1YXJlKCkuc3VidHJhY3QoeDEuc2hpZnRMZWZ0KDMpLm11bHRpcGx5KHkxc3F6MSkpLnNoaWZ0TGVmdCgxKS5tdWx0aXBseSh5MXoxKS5tb2QodGhpcy5jdXJ2ZS5xKTtcbiAgICAvLyB5MyA9IDQgKiB5MV4yICogejEgKiAoMyAqIHcgKiB4MSAtIDIgKiB5MV4yICogejEpIC0gd14zXG4gICAgdmFyIHkzID0gdy5tdWx0aXBseShUSFJFRSkubXVsdGlwbHkoeDEpLnN1YnRyYWN0KHkxc3F6MS5zaGlmdExlZnQoMSkpLnNoaWZ0TGVmdCgyKS5tdWx0aXBseSh5MXNxejEpLnN1YnRyYWN0KHcuc3F1YXJlKCkubXVsdGlwbHkodykpLm1vZCh0aGlzLmN1cnZlLnEpO1xuICAgIC8vIHozID0gOCAqICh5MSAqIHoxKV4zXG4gICAgdmFyIHozID0geTF6MS5zcXVhcmUoKS5tdWx0aXBseSh5MXoxKS5zaGlmdExlZnQoMykubW9kKHRoaXMuY3VydmUucSk7XG5cbiAgICByZXR1cm4gbmV3IEVDUG9pbnRGcCh0aGlzLmN1cnZlLCB0aGlzLmN1cnZlLmZyb21CaWdJbnRlZ2VyKHgzKSwgdGhpcy5jdXJ2ZS5mcm9tQmlnSW50ZWdlcih5MyksIHozKTtcbn1cblxuLy8gU2ltcGxlIE5BRiAoTm9uLUFkamFjZW50IEZvcm0pIG11bHRpcGxpY2F0aW9uIGFsZ29yaXRobVxuLy8gVE9ETzogbW9kdWxhcml6ZSB0aGUgbXVsdGlwbGljYXRpb24gYWxnb3JpdGhtXG5mdW5jdGlvbiBwb2ludEZwTXVsdGlwbHkoaykge1xuICAgIGlmKHRoaXMuaXNJbmZpbml0eSgpKSByZXR1cm4gdGhpcztcbiAgICBpZihrLnNpZ251bSgpID09IDApIHJldHVybiB0aGlzLmN1cnZlLmdldEluZmluaXR5KCk7XG5cbiAgICB2YXIgZSA9IGs7XG4gICAgdmFyIGggPSBlLm11bHRpcGx5KG5ldyBCaWdJbnRlZ2VyKFwiM1wiKSk7XG5cbiAgICB2YXIgbmVnID0gdGhpcy5uZWdhdGUoKTtcbiAgICB2YXIgUiA9IHRoaXM7XG5cbiAgICB2YXIgaTtcbiAgICBmb3IoaSA9IGguYml0TGVuZ3RoKCkgLSAyOyBpID4gMDsgLS1pKSB7XG5cdFIgPSBSLnR3aWNlKCk7XG5cblx0dmFyIGhCaXQgPSBoLnRlc3RCaXQoaSk7XG5cdHZhciBlQml0ID0gZS50ZXN0Qml0KGkpO1xuXG5cdGlmIChoQml0ICE9IGVCaXQpIHtcblx0ICAgIFIgPSBSLmFkZChoQml0ID8gdGhpcyA6IG5lZyk7XG5cdH1cbiAgICB9XG5cbiAgICByZXR1cm4gUjtcbn1cblxuLy8gQ29tcHV0ZSB0aGlzKmogKyB4KmsgKHNpbXVsdGFuZW91cyBtdWx0aXBsaWNhdGlvbilcbmZ1bmN0aW9uIHBvaW50RnBNdWx0aXBseVR3byhqLHgsaykge1xuICB2YXIgaTtcbiAgaWYoai5iaXRMZW5ndGgoKSA+IGsuYml0TGVuZ3RoKCkpXG4gICAgaSA9IGouYml0TGVuZ3RoKCkgLSAxO1xuICBlbHNlXG4gICAgaSA9IGsuYml0TGVuZ3RoKCkgLSAxO1xuXG4gIHZhciBSID0gdGhpcy5jdXJ2ZS5nZXRJbmZpbml0eSgpO1xuICB2YXIgYm90aCA9IHRoaXMuYWRkKHgpO1xuICB3aGlsZShpID49IDApIHtcbiAgICBSID0gUi50d2ljZSgpO1xuICAgIGlmKGoudGVzdEJpdChpKSkge1xuICAgICAgaWYoay50ZXN0Qml0KGkpKSB7XG4gICAgICAgIFIgPSBSLmFkZChib3RoKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBSID0gUi5hZGQodGhpcyk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgaWYoay50ZXN0Qml0KGkpKSB7XG4gICAgICAgIFIgPSBSLmFkZCh4KTtcbiAgICAgIH1cbiAgICB9XG4gICAgLS1pO1xuICB9XG5cbiAgcmV0dXJuIFI7XG59XG5cbkVDUG9pbnRGcC5wcm90b3R5cGUuZ2V0WCA9IHBvaW50RnBHZXRYO1xuRUNQb2ludEZwLnByb3RvdHlwZS5nZXRZID0gcG9pbnRGcEdldFk7XG5FQ1BvaW50RnAucHJvdG90eXBlLmVxdWFscyA9IHBvaW50RnBFcXVhbHM7XG5FQ1BvaW50RnAucHJvdG90eXBlLmlzSW5maW5pdHkgPSBwb2ludEZwSXNJbmZpbml0eTtcbkVDUG9pbnRGcC5wcm90b3R5cGUubmVnYXRlID0gcG9pbnRGcE5lZ2F0ZTtcbkVDUG9pbnRGcC5wcm90b3R5cGUuYWRkID0gcG9pbnRGcEFkZDtcbkVDUG9pbnRGcC5wcm90b3R5cGUudHdpY2UgPSBwb2ludEZwVHdpY2U7XG5FQ1BvaW50RnAucHJvdG90eXBlLm11bHRpcGx5ID0gcG9pbnRGcE11bHRpcGx5O1xuRUNQb2ludEZwLnByb3RvdHlwZS5tdWx0aXBseVR3byA9IHBvaW50RnBNdWx0aXBseVR3bztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLVxuLy8gRUNDdXJ2ZUZwXG5cbi8vIGNvbnN0cnVjdG9yXG5mdW5jdGlvbiBFQ0N1cnZlRnAocSxhLGIpIHtcbiAgICB0aGlzLnEgPSBxO1xuICAgIHRoaXMuYSA9IHRoaXMuZnJvbUJpZ0ludGVnZXIoYSk7XG4gICAgdGhpcy5iID0gdGhpcy5mcm9tQmlnSW50ZWdlcihiKTtcbiAgICB0aGlzLmluZmluaXR5ID0gbmV3IEVDUG9pbnRGcCh0aGlzLCBudWxsLCBudWxsKTtcbiAgICB0aGlzLnJlZHVjZXIgPSBuZXcgQmFycmV0dCh0aGlzLnEpO1xufVxuXG5mdW5jdGlvbiBjdXJ2ZUZwR2V0USgpIHtcbiAgICByZXR1cm4gdGhpcy5xO1xufVxuXG5mdW5jdGlvbiBjdXJ2ZUZwR2V0QSgpIHtcbiAgICByZXR1cm4gdGhpcy5hO1xufVxuXG5mdW5jdGlvbiBjdXJ2ZUZwR2V0QigpIHtcbiAgICByZXR1cm4gdGhpcy5iO1xufVxuXG5mdW5jdGlvbiBjdXJ2ZUZwRXF1YWxzKG90aGVyKSB7XG4gICAgaWYob3RoZXIgPT0gdGhpcykgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuKHRoaXMucS5lcXVhbHMob3RoZXIucSkgJiYgdGhpcy5hLmVxdWFscyhvdGhlci5hKSAmJiB0aGlzLmIuZXF1YWxzKG90aGVyLmIpKTtcbn1cblxuZnVuY3Rpb24gY3VydmVGcEdldEluZmluaXR5KCkge1xuICAgIHJldHVybiB0aGlzLmluZmluaXR5O1xufVxuXG5mdW5jdGlvbiBjdXJ2ZUZwRnJvbUJpZ0ludGVnZXIoeCkge1xuICAgIHJldHVybiBuZXcgRUNGaWVsZEVsZW1lbnRGcCh0aGlzLnEsIHgpO1xufVxuXG5mdW5jdGlvbiBjdXJ2ZVJlZHVjZSh4KSB7XG4gICAgdGhpcy5yZWR1Y2VyLnJlZHVjZSh4KTtcbn1cblxuLy8gZm9yIG5vdywgd29yayB3aXRoIGhleCBzdHJpbmdzIGJlY2F1c2UgdGhleSdyZSBlYXNpZXIgaW4gSlNcbmZ1bmN0aW9uIGN1cnZlRnBEZWNvZGVQb2ludEhleChzKSB7XG4gICAgc3dpdGNoKHBhcnNlSW50KHMuc3Vic3RyKDAsMiksIDE2KSkgeyAvLyBmaXJzdCBieXRlXG4gICAgY2FzZSAwOlxuXHRyZXR1cm4gdGhpcy5pbmZpbml0eTtcbiAgICBjYXNlIDI6XG4gICAgY2FzZSAzOlxuXHQvLyBwb2ludCBjb21wcmVzc2lvbiBub3Qgc3VwcG9ydGVkIHlldFxuXHRyZXR1cm4gbnVsbDtcbiAgICBjYXNlIDQ6XG4gICAgY2FzZSA2OlxuICAgIGNhc2UgNzpcblx0dmFyIGxlbiA9IChzLmxlbmd0aCAtIDIpIC8gMjtcblx0dmFyIHhIZXggPSBzLnN1YnN0cigyLCBsZW4pO1xuXHR2YXIgeUhleCA9IHMuc3Vic3RyKGxlbisyLCBsZW4pO1xuXG5cdHJldHVybiBuZXcgRUNQb2ludEZwKHRoaXMsXG5cdFx0XHQgICAgIHRoaXMuZnJvbUJpZ0ludGVnZXIobmV3IEJpZ0ludGVnZXIoeEhleCwgMTYpKSxcblx0XHRcdCAgICAgdGhpcy5mcm9tQmlnSW50ZWdlcihuZXcgQmlnSW50ZWdlcih5SGV4LCAxNikpKTtcblxuICAgIGRlZmF1bHQ6IC8vIHVuc3VwcG9ydGVkXG5cdHJldHVybiBudWxsO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gY3VydmVGcEVuY29kZVBvaW50SGV4KHApIHtcblx0aWYgKHAuaXNJbmZpbml0eSgpKSByZXR1cm4gXCIwMFwiO1xuXHR2YXIgeEhleCA9IHAuZ2V0WCgpLnRvQmlnSW50ZWdlcigpLnRvU3RyaW5nKDE2KTtcblx0dmFyIHlIZXggPSBwLmdldFkoKS50b0JpZ0ludGVnZXIoKS50b1N0cmluZygxNik7XG5cdHZhciBvTGVuID0gdGhpcy5nZXRRKCkudG9TdHJpbmcoMTYpLmxlbmd0aDtcblx0aWYgKChvTGVuICUgMikgIT0gMCkgb0xlbisrO1xuXHR3aGlsZSAoeEhleC5sZW5ndGggPCBvTGVuKSB7XG5cdFx0eEhleCA9IFwiMFwiICsgeEhleDtcblx0fVxuXHR3aGlsZSAoeUhleC5sZW5ndGggPCBvTGVuKSB7XG5cdFx0eUhleCA9IFwiMFwiICsgeUhleDtcblx0fVxuXHRyZXR1cm4gXCIwNFwiICsgeEhleCArIHlIZXg7XG59XG5cbkVDQ3VydmVGcC5wcm90b3R5cGUuZ2V0USA9IGN1cnZlRnBHZXRRO1xuRUNDdXJ2ZUZwLnByb3RvdHlwZS5nZXRBID0gY3VydmVGcEdldEE7XG5FQ0N1cnZlRnAucHJvdG90eXBlLmdldEIgPSBjdXJ2ZUZwR2V0QjtcbkVDQ3VydmVGcC5wcm90b3R5cGUuZXF1YWxzID0gY3VydmVGcEVxdWFscztcbkVDQ3VydmVGcC5wcm90b3R5cGUuZ2V0SW5maW5pdHkgPSBjdXJ2ZUZwR2V0SW5maW5pdHk7XG5FQ0N1cnZlRnAucHJvdG90eXBlLmZyb21CaWdJbnRlZ2VyID0gY3VydmVGcEZyb21CaWdJbnRlZ2VyO1xuRUNDdXJ2ZUZwLnByb3RvdHlwZS5yZWR1Y2UgPSBjdXJ2ZVJlZHVjZTtcbi8vRUNDdXJ2ZUZwLnByb3RvdHlwZS5kZWNvZGVQb2ludEhleCA9IGN1cnZlRnBEZWNvZGVQb2ludEhleDtcbkVDQ3VydmVGcC5wcm90b3R5cGUuZW5jb2RlUG9pbnRIZXggPSBjdXJ2ZUZwRW5jb2RlUG9pbnRIZXg7XG5cbi8vIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9rYWllbHZpbi9qc2JuLWVjLXBvaW50LWNvbXByZXNzaW9uXG5FQ0N1cnZlRnAucHJvdG90eXBlLmRlY29kZVBvaW50SGV4ID0gZnVuY3Rpb24ocylcbntcblx0dmFyIHlJc0V2ZW47XG4gICAgc3dpdGNoKHBhcnNlSW50KHMuc3Vic3RyKDAsMiksIDE2KSkgeyAvLyBmaXJzdCBieXRlXG4gICAgY2FzZSAwOlxuXHRyZXR1cm4gdGhpcy5pbmZpbml0eTtcbiAgICBjYXNlIDI6XG5cdHlJc0V2ZW4gPSBmYWxzZTtcbiAgICBjYXNlIDM6XG5cdGlmKHlJc0V2ZW4gPT0gdW5kZWZpbmVkKSB5SXNFdmVuID0gdHJ1ZTtcblx0dmFyIGxlbiA9IHMubGVuZ3RoIC0gMjtcblx0dmFyIHhIZXggPSBzLnN1YnN0cigyLCBsZW4pO1xuXHR2YXIgeCA9IHRoaXMuZnJvbUJpZ0ludGVnZXIobmV3IEJpZ0ludGVnZXIoeEhleCwxNikpO1xuXHR2YXIgYWxwaGEgPSB4Lm11bHRpcGx5KHguc3F1YXJlKCkuYWRkKHRoaXMuZ2V0QSgpKSkuYWRkKHRoaXMuZ2V0QigpKTtcblx0dmFyIGJldGEgPSBhbHBoYS5zcXJ0KCk7XG5cbiAgICBpZiAoYmV0YSA9PSBudWxsKSB0aHJvdyBcIkludmFsaWQgcG9pbnQgY29tcHJlc3Npb25cIjtcblxuICAgIHZhciBiZXRhVmFsdWUgPSBiZXRhLnRvQmlnSW50ZWdlcigpO1xuICAgIGlmIChiZXRhVmFsdWUudGVzdEJpdCgwKSAhPSB5SXNFdmVuKVxuICAgIHtcbiAgICAgICAgLy8gVXNlIHRoZSBvdGhlciByb290XG4gICAgICAgIGJldGEgPSB0aGlzLmZyb21CaWdJbnRlZ2VyKHRoaXMuZ2V0USgpLnN1YnRyYWN0KGJldGFWYWx1ZSkpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEVDUG9pbnRGcCh0aGlzLHgsYmV0YSk7XG4gICAgY2FzZSA0OlxuICAgIGNhc2UgNjpcbiAgICBjYXNlIDc6XG5cdHZhciBsZW4gPSAocy5sZW5ndGggLSAyKSAvIDI7XG5cdHZhciB4SGV4ID0gcy5zdWJzdHIoMiwgbGVuKTtcblx0dmFyIHlIZXggPSBzLnN1YnN0cihsZW4rMiwgbGVuKTtcblxuXHRyZXR1cm4gbmV3IEVDUG9pbnRGcCh0aGlzLFxuXHRcdFx0ICAgICB0aGlzLmZyb21CaWdJbnRlZ2VyKG5ldyBCaWdJbnRlZ2VyKHhIZXgsIDE2KSksXG5cdFx0XHQgICAgIHRoaXMuZnJvbUJpZ0ludGVnZXIobmV3IEJpZ0ludGVnZXIoeUhleCwgMTYpKSk7XG5cbiAgICBkZWZhdWx0OiAvLyB1bnN1cHBvcnRlZFxuXHRyZXR1cm4gbnVsbDtcbiAgICB9XG59XG5FQ0N1cnZlRnAucHJvdG90eXBlLmVuY29kZUNvbXByZXNzZWRQb2ludEhleCA9IGZ1bmN0aW9uKHApXG57XG5cdGlmIChwLmlzSW5maW5pdHkoKSkgcmV0dXJuIFwiMDBcIjtcblx0dmFyIHhIZXggPSBwLmdldFgoKS50b0JpZ0ludGVnZXIoKS50b1N0cmluZygxNik7XG5cdHZhciBvTGVuID0gdGhpcy5nZXRRKCkudG9TdHJpbmcoMTYpLmxlbmd0aDtcblx0aWYgKChvTGVuICUgMikgIT0gMCkgb0xlbisrO1xuXHR3aGlsZSAoeEhleC5sZW5ndGggPCBvTGVuKVxuXHRcdHhIZXggPSBcIjBcIiArIHhIZXg7XG5cdHZhciB5UHJlZml4O1xuXHRpZihwLmdldFkoKS50b0JpZ0ludGVnZXIoKS5pc0V2ZW4oKSkgeVByZWZpeCA9IFwiMDJcIjtcblx0ZWxzZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlQcmVmaXggPSBcIjAzXCI7XG5cblx0cmV0dXJuIHlQcmVmaXggKyB4SGV4O1xufVxuXG5cbkVDRmllbGRFbGVtZW50RnAucHJvdG90eXBlLmdldFIgPSBmdW5jdGlvbigpXG57XG5cdGlmKHRoaXMuciAhPSB1bmRlZmluZWQpIHJldHVybiB0aGlzLnI7XG5cbiAgICB0aGlzLnIgPSBudWxsO1xuICAgIHZhciBiaXRMZW5ndGggPSB0aGlzLnEuYml0TGVuZ3RoKCk7XG4gICAgaWYgKGJpdExlbmd0aCA+IDEyOClcbiAgICB7XG4gICAgICAgIHZhciBmaXJzdFdvcmQgPSB0aGlzLnEuc2hpZnRSaWdodChiaXRMZW5ndGggLSA2NCk7XG4gICAgICAgIGlmIChmaXJzdFdvcmQuaW50VmFsdWUoKSA9PSAtMSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5yID0gQmlnSW50ZWdlci5PTkUuc2hpZnRMZWZ0KGJpdExlbmd0aCkuc3VidHJhY3QodGhpcy5xKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5yO1xufVxuRUNGaWVsZEVsZW1lbnRGcC5wcm90b3R5cGUubW9kTXVsdCA9IGZ1bmN0aW9uKHgxLHgyKVxue1xuICAgIHJldHVybiB0aGlzLm1vZFJlZHVjZSh4MS5tdWx0aXBseSh4MikpO1xufVxuRUNGaWVsZEVsZW1lbnRGcC5wcm90b3R5cGUubW9kUmVkdWNlID0gZnVuY3Rpb24oeClcbntcbiAgICBpZiAodGhpcy5nZXRSKCkgIT0gbnVsbClcbiAgICB7XG4gICAgICAgIHZhciBxTGVuID0gcS5iaXRMZW5ndGgoKTtcbiAgICAgICAgd2hpbGUgKHguYml0TGVuZ3RoKCkgPiAocUxlbiArIDEpKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgdSA9IHguc2hpZnRSaWdodChxTGVuKTtcbiAgICAgICAgICAgIHZhciB2ID0geC5zdWJ0cmFjdCh1LnNoaWZ0TGVmdChxTGVuKSk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZ2V0UigpLmVxdWFscyhCaWdJbnRlZ2VyLk9ORSkpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdSA9IHUubXVsdGlwbHkodGhpcy5nZXRSKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgeCA9IHUuYWRkKHYpOyBcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoeC5jb21wYXJlVG8ocSkgPj0gMClcbiAgICAgICAge1xuICAgICAgICAgICAgeCA9IHguc3VidHJhY3QocSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZVxuICAgIHtcbiAgICAgICAgeCA9IHgubW9kKHEpO1xuICAgIH1cbiAgICByZXR1cm4geDtcbn1cbkVDRmllbGRFbGVtZW50RnAucHJvdG90eXBlLnNxcnQgPSBmdW5jdGlvbigpXG57XG4gICAgaWYgKCF0aGlzLnEudGVzdEJpdCgwKSkgdGhyb3cgXCJ1bnN1cHBvcnRlZFwiO1xuXG4gICAgLy8gcCBtb2QgNCA9PSAzXG4gICAgaWYgKHRoaXMucS50ZXN0Qml0KDEpKVxuICAgIHtcbiAgICBcdHZhciB6ID0gbmV3IEVDRmllbGRFbGVtZW50RnAodGhpcy5xLHRoaXMueC5tb2RQb3codGhpcy5xLnNoaWZ0UmlnaHQoMikuYWRkKEJpZ0ludGVnZXIuT05FKSx0aGlzLnEpKTtcbiAgICBcdHJldHVybiB6LnNxdWFyZSgpLmVxdWFscyh0aGlzKSA/IHogOiBudWxsO1xuICAgIH1cblxuICAgIC8vIHAgbW9kIDQgPT0gMVxuICAgIHZhciBxTWludXNPbmUgPSB0aGlzLnEuc3VidHJhY3QoQmlnSW50ZWdlci5PTkUpO1xuXG4gICAgdmFyIGxlZ2VuZHJlRXhwb25lbnQgPSBxTWludXNPbmUuc2hpZnRSaWdodCgxKTtcbiAgICBpZiAoISh0aGlzLngubW9kUG93KGxlZ2VuZHJlRXhwb25lbnQsIHRoaXMucSkuZXF1YWxzKEJpZ0ludGVnZXIuT05FKSkpXG4gICAge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgdSA9IHFNaW51c09uZS5zaGlmdFJpZ2h0KDIpO1xuICAgIHZhciBrID0gdS5zaGlmdExlZnQoMSkuYWRkKEJpZ0ludGVnZXIuT05FKTtcblxuICAgIHZhciBRID0gdGhpcy54O1xuICAgIHZhciBmb3VyUSA9IG1vZERvdWJsZShtb2REb3VibGUoUSkpO1xuXG4gICAgdmFyIFUsIFY7XG4gICAgZG9cbiAgICB7XG4gICAgICAgIHZhciBQO1xuICAgICAgICBkb1xuICAgICAgICB7XG4gICAgICAgICAgICBQID0gbmV3IEJpZ0ludGVnZXIodGhpcy5xLmJpdExlbmd0aCgpLCBuZXcgU2VjdXJlUmFuZG9tKCkpO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChQLmNvbXBhcmVUbyh0aGlzLnEpID49IDBcbiAgICAgICAgICAgIHx8ICEoUC5tdWx0aXBseShQKS5zdWJ0cmFjdChmb3VyUSkubW9kUG93KGxlZ2VuZHJlRXhwb25lbnQsIHRoaXMucSkuZXF1YWxzKHFNaW51c09uZSkpKTtcblxuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5sdWNhc1NlcXVlbmNlKFAsIFEsIGspO1xuICAgICAgICBVID0gcmVzdWx0WzBdO1xuICAgICAgICBWID0gcmVzdWx0WzFdO1xuXG4gICAgICAgIGlmICh0aGlzLm1vZE11bHQoViwgVikuZXF1YWxzKGZvdXJRKSlcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gSW50ZWdlciBkaXZpc2lvbiBieSAyLCBtb2QgcVxuICAgICAgICAgICAgaWYgKFYudGVzdEJpdCgwKSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBWID0gVi5hZGQocSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFYgPSBWLnNoaWZ0UmlnaHQoMSk7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgRUNGaWVsZEVsZW1lbnRGcChxLFYpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHdoaWxlIChVLmVxdWFscyhCaWdJbnRlZ2VyLk9ORSkgfHwgVS5lcXVhbHMocU1pbnVzT25lKSk7XG5cbiAgICByZXR1cm4gbnVsbDtcbn1cbkVDRmllbGRFbGVtZW50RnAucHJvdG90eXBlLmx1Y2FzU2VxdWVuY2UgPSBmdW5jdGlvbihQLFEsaylcbntcbiAgICB2YXIgbiA9IGsuYml0TGVuZ3RoKCk7XG4gICAgdmFyIHMgPSBrLmdldExvd2VzdFNldEJpdCgpO1xuXG4gICAgdmFyIFVoID0gQmlnSW50ZWdlci5PTkU7XG4gICAgdmFyIFZsID0gQmlnSW50ZWdlci5UV087XG4gICAgdmFyIFZoID0gUDtcbiAgICB2YXIgUWwgPSBCaWdJbnRlZ2VyLk9ORTtcbiAgICB2YXIgUWggPSBCaWdJbnRlZ2VyLk9ORTtcblxuICAgIGZvciAodmFyIGogPSBuIC0gMTsgaiA+PSBzICsgMTsgLS1qKVxuICAgIHtcbiAgICAgICAgUWwgPSB0aGlzLm1vZE11bHQoUWwsIFFoKTtcblxuICAgICAgICBpZiAoay50ZXN0Qml0KGopKVxuICAgICAgICB7XG4gICAgICAgICAgICBRaCA9IHRoaXMubW9kTXVsdChRbCwgUSk7XG4gICAgICAgICAgICBVaCA9IHRoaXMubW9kTXVsdChVaCwgVmgpO1xuICAgICAgICAgICAgVmwgPSB0aGlzLm1vZFJlZHVjZShWaC5tdWx0aXBseShWbCkuc3VidHJhY3QoUC5tdWx0aXBseShRbCkpKTtcbiAgICAgICAgICAgIFZoID0gdGhpcy5tb2RSZWR1Y2UoVmgubXVsdGlwbHkoVmgpLnN1YnRyYWN0KFFoLnNoaWZ0TGVmdCgxKSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAge1xuICAgICAgICAgICAgUWggPSBRbDtcbiAgICAgICAgICAgIFVoID0gdGhpcy5tb2RSZWR1Y2UoVWgubXVsdGlwbHkoVmwpLnN1YnRyYWN0KFFsKSk7XG4gICAgICAgICAgICBWaCA9IHRoaXMubW9kUmVkdWNlKFZoLm11bHRpcGx5KFZsKS5zdWJ0cmFjdChQLm11bHRpcGx5KFFsKSkpO1xuICAgICAgICAgICAgVmwgPSB0aGlzLm1vZFJlZHVjZShWbC5tdWx0aXBseShWbCkuc3VidHJhY3QoUWwuc2hpZnRMZWZ0KDEpKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBRbCA9IHRoaXMubW9kTXVsdChRbCwgUWgpO1xuICAgIFFoID0gdGhpcy5tb2RNdWx0KFFsLCBRKTtcbiAgICBVaCA9IHRoaXMubW9kUmVkdWNlKFVoLm11bHRpcGx5KFZsKS5zdWJ0cmFjdChRbCkpO1xuICAgIFZsID0gdGhpcy5tb2RSZWR1Y2UoVmgubXVsdGlwbHkoVmwpLnN1YnRyYWN0KFAubXVsdGlwbHkoUWwpKSk7XG4gICAgUWwgPSB0aGlzLm1vZE11bHQoUWwsIFFoKTtcblxuICAgIGZvciAodmFyIGogPSAxOyBqIDw9IHM7ICsrailcbiAgICB7XG4gICAgICAgIFVoID0gdGhpcy5tb2RNdWx0KFVoLCBWbCk7XG4gICAgICAgIFZsID0gdGhpcy5tb2RSZWR1Y2UoVmwubXVsdGlwbHkoVmwpLnN1YnRyYWN0KFFsLnNoaWZ0TGVmdCgxKSkpO1xuICAgICAgICBRbCA9IHRoaXMubW9kTXVsdChRbCwgUWwpO1xuICAgIH1cblxuICAgIHJldHVybiBbIFVoLCBWbCBdO1xufVxuXG52YXIgZXhwb3J0cyA9IHtcbiAgRUNDdXJ2ZUZwOiBFQ0N1cnZlRnAsXG4gIEVDUG9pbnRGcDogRUNQb2ludEZwLFxuICBFQ0ZpZWxkRWxlbWVudEZwOiBFQ0ZpZWxkRWxlbWVudEZwXG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1xuIl0sIm5hbWVzIjpbIkJpZ0ludGVnZXIiLCJyZXF1aXJlIiwiQmFycmV0dCIsInByb3RvdHlwZSIsIkVDRmllbGRFbGVtZW50RnAiLCJxIiwieCIsImZlRnBFcXVhbHMiLCJvdGhlciIsImVxdWFscyIsImZlRnBUb0JpZ0ludGVnZXIiLCJmZUZwTmVnYXRlIiwibmVnYXRlIiwibW9kIiwiZmVGcEFkZCIsImIiLCJhZGQiLCJ0b0JpZ0ludGVnZXIiLCJmZUZwU3VidHJhY3QiLCJzdWJ0cmFjdCIsImZlRnBNdWx0aXBseSIsIm11bHRpcGx5IiwiZmVGcFNxdWFyZSIsInNxdWFyZSIsImZlRnBEaXZpZGUiLCJtb2RJbnZlcnNlIiwiZGl2aWRlIiwiRUNQb2ludEZwIiwiY3VydmUiLCJ5IiwieiIsIk9ORSIsInppbnYiLCJwb2ludEZwR2V0WCIsInIiLCJyZWR1Y2UiLCJmcm9tQmlnSW50ZWdlciIsInBvaW50RnBHZXRZIiwicG9pbnRGcEVxdWFscyIsImlzSW5maW5pdHkiLCJ1IiwidiIsIlpFUk8iLCJwb2ludEZwSXNJbmZpbml0eSIsInBvaW50RnBOZWdhdGUiLCJwb2ludEZwQWRkIiwidHdpY2UiLCJnZXRJbmZpbml0eSIsIlRIUkVFIiwieDEiLCJ5MSIsIngyIiwieTIiLCJ2MiIsInYzIiwieDF2MiIsInp1MiIsIngzIiwic2hpZnRMZWZ0IiwieTMiLCJ6MyIsInBvaW50RnBUd2ljZSIsInNpZ251bSIsInkxejEiLCJ5MXNxejEiLCJhIiwidyIsInBvaW50RnBNdWx0aXBseSIsImsiLCJlIiwiaCIsIm5lZyIsIlIiLCJpIiwiYml0TGVuZ3RoIiwiaEJpdCIsInRlc3RCaXQiLCJlQml0IiwicG9pbnRGcE11bHRpcGx5VHdvIiwiaiIsImJvdGgiLCJnZXRYIiwiZ2V0WSIsIm11bHRpcGx5VHdvIiwiRUNDdXJ2ZUZwIiwiaW5maW5pdHkiLCJyZWR1Y2VyIiwiY3VydmVGcEdldFEiLCJjdXJ2ZUZwR2V0QSIsImN1cnZlRnBHZXRCIiwiY3VydmVGcEVxdWFscyIsImN1cnZlRnBHZXRJbmZpbml0eSIsImN1cnZlRnBGcm9tQmlnSW50ZWdlciIsImN1cnZlUmVkdWNlIiwiY3VydmVGcERlY29kZVBvaW50SGV4IiwicyIsInBhcnNlSW50Iiwic3Vic3RyIiwibGVuIiwibGVuZ3RoIiwieEhleCIsInlIZXgiLCJjdXJ2ZUZwRW5jb2RlUG9pbnRIZXgiLCJwIiwidG9TdHJpbmciLCJvTGVuIiwiZ2V0USIsImdldEEiLCJnZXRCIiwiZW5jb2RlUG9pbnRIZXgiLCJkZWNvZGVQb2ludEhleCIsInlJc0V2ZW4iLCJ1bmRlZmluZWQiLCJhbHBoYSIsImJldGEiLCJzcXJ0IiwiYmV0YVZhbHVlIiwiZW5jb2RlQ29tcHJlc3NlZFBvaW50SGV4IiwieVByZWZpeCIsImlzRXZlbiIsImdldFIiLCJmaXJzdFdvcmQiLCJzaGlmdFJpZ2h0IiwiaW50VmFsdWUiLCJtb2RNdWx0IiwibW9kUmVkdWNlIiwicUxlbiIsImNvbXBhcmVUbyIsIm1vZFBvdyIsInFNaW51c09uZSIsImxlZ2VuZHJlRXhwb25lbnQiLCJRIiwiZm91clEiLCJtb2REb3VibGUiLCJVIiwiViIsIlAiLCJTZWN1cmVSYW5kb20iLCJyZXN1bHQiLCJsdWNhc1NlcXVlbmNlIiwibiIsImdldExvd2VzdFNldEJpdCIsIlVoIiwiVmwiLCJUV08iLCJWaCIsIlFsIiwiUWgiLCJleHBvcnRzIiwibW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ecc-jsbn/lib/ec.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ecc-jsbn/lib/sec.js":
/*!******************************************!*\
  !*** ./node_modules/ecc-jsbn/lib/sec.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Named EC curves\n// Requires ec.js, jsbn.js, and jsbn2.js\nvar BigInteger = (__webpack_require__(/*! jsbn */ \"(rsc)/./node_modules/jsbn/index.js\").BigInteger);\nvar ECCurveFp = (__webpack_require__(/*! ./ec.js */ \"(rsc)/./node_modules/ecc-jsbn/lib/ec.js\").ECCurveFp);\n// ----------------\n// X9ECParameters\n// constructor\nfunction X9ECParameters(curve, g, n, h) {\n    this.curve = curve;\n    this.g = g;\n    this.n = n;\n    this.h = h;\n}\nfunction x9getCurve() {\n    return this.curve;\n}\nfunction x9getG() {\n    return this.g;\n}\nfunction x9getN() {\n    return this.n;\n}\nfunction x9getH() {\n    return this.h;\n}\nX9ECParameters.prototype.getCurve = x9getCurve;\nX9ECParameters.prototype.getG = x9getG;\nX9ECParameters.prototype.getN = x9getN;\nX9ECParameters.prototype.getH = x9getH;\n// ----------------\n// SECNamedCurves\nfunction fromHex(s) {\n    return new BigInteger(s, 16);\n}\nfunction secp128r1() {\n    // p = 2^128 - 2^97 - 1\n    var p = fromHex(\"FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFF\");\n    var a = fromHex(\"FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFC\");\n    var b = fromHex(\"E87579C11079F43DD824993C2CEE5ED3\");\n    //byte[] S = Hex.decode(\"000E0D4D696E6768756151750CC03A4473D03679\");\n    var n = fromHex(\"FFFFFFFE0000000075A30D1B9038A115\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\" + \"161FF7528B899B2D0C28607CA52C5B86\" + \"CF5AC8395BAFEB13C02DA292DDED7A83\");\n    return new X9ECParameters(curve, G, n, h);\n}\nfunction secp160k1() {\n    // p = 2^160 - 2^32 - 2^14 - 2^12 - 2^9 - 2^8 - 2^7 - 2^3 - 2^2 - 1\n    var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFAC73\");\n    var a = BigInteger.ZERO;\n    var b = fromHex(\"7\");\n    //byte[] S = null;\n    var n = fromHex(\"0100000000000000000001B8FA16DFAB9ACA16B6B3\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\" + \"3B4C382CE37AA192A4019E763036F4F5DD4D7EBB\" + \"938CF935318FDCED6BC28286531733C3F03C4FEE\");\n    return new X9ECParameters(curve, G, n, h);\n}\nfunction secp160r1() {\n    // p = 2^160 - 2^31 - 1\n    var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFF\");\n    var a = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFC\");\n    var b = fromHex(\"1C97BEFC54BD7A8B65ACF89F81D4D4ADC565FA45\");\n    //byte[] S = Hex.decode(\"1053CDE42C14D696E67687561517533BF3F83345\");\n    var n = fromHex(\"0100000000000000000001F4C8F927AED3CA752257\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\" + \"4A96B5688EF573284664698968C38BB913CBFC82\" + \"23A628553168947D59DCC912042351377AC5FB32\");\n    return new X9ECParameters(curve, G, n, h);\n}\nfunction secp192k1() {\n    // p = 2^192 - 2^32 - 2^12 - 2^8 - 2^7 - 2^6 - 2^3 - 1\n    var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFEE37\");\n    var a = BigInteger.ZERO;\n    var b = fromHex(\"3\");\n    //byte[] S = null;\n    var n = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFE26F2FC170F69466A74DEFD8D\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\" + \"DB4FF10EC057E9AE26B07D0280B7F4341DA5D1B1EAE06C7D\" + \"9B2F2F6D9C5628A7844163D015BE86344082AA88D95E2F9D\");\n    return new X9ECParameters(curve, G, n, h);\n}\nfunction secp192r1() {\n    // p = 2^192 - 2^64 - 1\n    var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFF\");\n    var a = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFC\");\n    var b = fromHex(\"64210519E59C80E70FA7E9AB72243049FEB8DEECC146B9B1\");\n    //byte[] S = Hex.decode(\"3045AE6FC8422F64ED579528D38120EAE12196D5\");\n    var n = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22831\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\" + \"188DA80EB03090F67CBF20EB43A18800F4FF0AFD82FF1012\" + \"07192B95FFC8DA78631011ED6B24CDD573F977A11E794811\");\n    return new X9ECParameters(curve, G, n, h);\n}\nfunction secp224r1() {\n    // p = 2^224 - 2^96 + 1\n    var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001\");\n    var a = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFE\");\n    var b = fromHex(\"B4050A850C04B3ABF54132565044B0B7D7BFD8BA270B39432355FFB4\");\n    //byte[] S = Hex.decode(\"BD71344799D5C7FCDC45B59FA3B9AB8F6A948BC5\");\n    var n = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFF16A2E0B8F03E13DD29455C5C2A3D\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\" + \"B70E0CBD6BB4BF7F321390B94A03C1D356C21122343280D6115C1D21\" + \"BD376388B5F723FB4C22DFE6CD4375A05A07476444D5819985007E34\");\n    return new X9ECParameters(curve, G, n, h);\n}\nfunction secp256r1() {\n    // p = 2^224 (2^32 - 1) + 2^192 + 2^96 - 1\n    var p = fromHex(\"FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF\");\n    var a = fromHex(\"FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC\");\n    var b = fromHex(\"5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B\");\n    //byte[] S = Hex.decode(\"C49D360886E704936A6678E1139D26B7819F7E90\");\n    var n = fromHex(\"FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\" + \"6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296\" + \"4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5\");\n    return new X9ECParameters(curve, G, n, h);\n}\n// TODO: make this into a proper hashtable\nfunction getSECCurveByName(name) {\n    if (name == \"secp128r1\") return secp128r1();\n    if (name == \"secp160k1\") return secp160k1();\n    if (name == \"secp160r1\") return secp160r1();\n    if (name == \"secp192k1\") return secp192k1();\n    if (name == \"secp192r1\") return secp192r1();\n    if (name == \"secp224r1\") return secp224r1();\n    if (name == \"secp256r1\") return secp256r1();\n    return null;\n}\nmodule.exports = {\n    \"secp128r1\": secp128r1,\n    \"secp160k1\": secp160k1,\n    \"secp160r1\": secp160r1,\n    \"secp192k1\": secp192k1,\n    \"secp192r1\": secp192r1,\n    \"secp224r1\": secp224r1,\n    \"secp256r1\": secp256r1\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ecc-jsbn/lib/sec.js\n");

/***/ })

};
;