"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/proxy-agent";
exports.ids = ["vendor-chunks/proxy-agent"];
exports.modules = {

/***/ "(rsc)/./node_modules/proxy-agent/index.js":
/*!*******************************************!*\
  !*** ./node_modules/proxy-agent/index.js ***!
  \*******************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n/**\n * Module dependencies.\n */ var url = __webpack_require__(/*! url */ \"url\");\nvar LRU = __webpack_require__(/*! lru-cache */ \"(rsc)/./node_modules/proxy-agent/node_modules/lru-cache/index.js\");\nvar Agent = __webpack_require__(/*! agent-base */ \"(rsc)/./node_modules/agent-base/dist/src/index.js\");\nvar inherits = (__webpack_require__(/*! util */ \"util\").inherits);\nvar debug = __webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\")(\"proxy-agent\");\nvar getProxyForUrl = (__webpack_require__(/*! proxy-from-env */ \"(rsc)/./node_modules/proxy-from-env/index.js\").getProxyForUrl);\nvar http = __webpack_require__(/*! http */ \"http\");\nvar https = __webpack_require__(/*! https */ \"https\");\nvar PacProxyAgent = __webpack_require__(/*! pac-proxy-agent */ \"(rsc)/./node_modules/pac-proxy-agent/dist/index.js\");\nvar HttpProxyAgent = __webpack_require__(/*! http-proxy-agent */ \"(rsc)/./node_modules/http-proxy-agent/dist/index.js\");\nvar HttpsProxyAgent = __webpack_require__(/*! https-proxy-agent */ \"(rsc)/./node_modules/https-proxy-agent/dist/index.js\");\nvar SocksProxyAgent = __webpack_require__(/*! socks-proxy-agent */ \"(rsc)/./node_modules/socks-proxy-agent/dist/index.js\");\n/**\n * Module exports.\n */ exports = module.exports = ProxyAgent;\n/**\n * Number of `http.Agent` instances to cache.\n *\n * This value was arbitrarily chosen... a better\n * value could be conceived with some benchmarks.\n */ var cacheSize = 20;\n/**\n * Cache for `http.Agent` instances.\n */ exports.cache = new LRU(cacheSize);\n/**\n * Built-in proxy types.\n */ exports.proxies = Object.create(null);\nexports.proxies.http = httpOrHttpsProxy;\nexports.proxies.https = httpOrHttpsProxy;\nexports.proxies.socks = SocksProxyAgent;\nexports.proxies.socks4 = SocksProxyAgent;\nexports.proxies.socks4a = SocksProxyAgent;\nexports.proxies.socks5 = SocksProxyAgent;\nexports.proxies.socks5h = SocksProxyAgent;\nPacProxyAgent.protocols.forEach(function(protocol) {\n    exports.proxies[\"pac+\" + protocol] = PacProxyAgent;\n});\nfunction httpOrHttps(opts, secureEndpoint) {\n    if (secureEndpoint) {\n        // HTTPS\n        return https.globalAgent;\n    } else {\n        // HTTP\n        return http.globalAgent;\n    }\n}\nfunction httpOrHttpsProxy(opts, secureEndpoint) {\n    if (secureEndpoint) {\n        // HTTPS\n        return new HttpsProxyAgent(opts);\n    } else {\n        // HTTP\n        return new HttpProxyAgent(opts);\n    }\n}\nfunction mapOptsToProxy(opts) {\n    // NO_PROXY case\n    if (!opts) {\n        return {\n            uri: \"no proxy\",\n            fn: httpOrHttps\n        };\n    }\n    if (\"string\" == typeof opts) opts = url.parse(opts);\n    var proxies;\n    if (opts.proxies) {\n        proxies = Object.assign({}, exports.proxies, opts.proxies);\n    } else {\n        proxies = exports.proxies;\n    }\n    // get the requested proxy \"protocol\"\n    var protocol = opts.protocol;\n    if (!protocol) {\n        throw new TypeError('You must specify a \"protocol\" for the ' + \"proxy type (\" + Object.keys(proxies).join(\", \") + \")\");\n    }\n    // strip the trailing \":\" if present\n    if (\":\" == protocol[protocol.length - 1]) {\n        protocol = protocol.substring(0, protocol.length - 1);\n    }\n    // get the proxy `http.Agent` creation function\n    var proxyFn = proxies[protocol];\n    if (\"function\" != typeof proxyFn) {\n        throw new TypeError('unsupported proxy protocol: \"' + protocol + '\"');\n    }\n    // format the proxy info back into a URI, since an opts object\n    // could have been passed in originally. This generated URI is used\n    // as part of the \"key\" for the LRU cache\n    return {\n        opts: opts,\n        uri: url.format({\n            protocol: protocol + \":\",\n            slashes: true,\n            auth: opts.auth,\n            hostname: opts.hostname || opts.host,\n            port: opts.port\n        }),\n        fn: proxyFn\n    };\n}\n/**\n * Attempts to get an `http.Agent` instance based off of the given proxy URI\n * information, and the `secure` flag.\n *\n * An LRU cache is used, to prevent unnecessary creation of proxy\n * `http.Agent` instances.\n *\n * @param {String} uri proxy url\n * @param {Boolean} secure true if this is for an HTTPS request, false for HTTP\n * @return {http.Agent}\n * @api public\n */ function ProxyAgent(opts) {\n    if (!(this instanceof ProxyAgent)) return new ProxyAgent(opts);\n    debug(\"creating new ProxyAgent instance: %o\", opts);\n    Agent.call(this);\n    if (opts) {\n        var proxy = mapOptsToProxy(opts);\n        this.proxy = proxy.opts;\n        this.proxyUri = proxy.uri;\n        this.proxyFn = proxy.fn;\n    }\n}\ninherits(ProxyAgent, Agent);\n/**\n *\n */ ProxyAgent.prototype.callback = function(req, opts, fn) {\n    var proxyOpts = this.proxy;\n    var proxyUri = this.proxyUri;\n    var proxyFn = this.proxyFn;\n    // if we did not instantiate with a proxy, set one per request\n    if (!proxyOpts) {\n        var urlOpts = getProxyForUrl(opts);\n        var proxy = mapOptsToProxy(urlOpts, opts);\n        proxyOpts = proxy.opts;\n        proxyUri = proxy.uri;\n        proxyFn = proxy.fn;\n    }\n    // create the \"key\" for the LRU cache\n    var key = proxyUri;\n    if (opts.secureEndpoint) key += \" secure\";\n    // attempt to get a cached `http.Agent` instance first\n    var agent = exports.cache.get(key);\n    if (!agent) {\n        // get an `http.Agent` instance from protocol-specific agent function\n        agent = proxyFn(proxyOpts, opts.secureEndpoint);\n        if (agent) {\n            exports.cache.set(key, agent);\n        }\n    } else {\n        debug(\"cache hit with key: %o\", key);\n    }\n    if (!proxyOpts) {\n        agent.addRequest(req, opts);\n    } else {\n        // XXX: agent.callback() is an agent-base-ism\n        agent.callback(req, opts).then(function(socket) {\n            fn(null, socket);\n        }).catch(function(error) {\n            fn(error);\n        });\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/proxy-agent/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/proxy-agent/node_modules/lru-cache/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/proxy-agent/node_modules/lru-cache/index.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// A linked list to keep track of recently-used-ness\nconst Yallist = __webpack_require__(/*! yallist */ \"(rsc)/./node_modules/yallist/yallist.js\");\nconst MAX = Symbol(\"max\");\nconst LENGTH = Symbol(\"length\");\nconst LENGTH_CALCULATOR = Symbol(\"lengthCalculator\");\nconst ALLOW_STALE = Symbol(\"allowStale\");\nconst MAX_AGE = Symbol(\"maxAge\");\nconst DISPOSE = Symbol(\"dispose\");\nconst NO_DISPOSE_ON_SET = Symbol(\"noDisposeOnSet\");\nconst LRU_LIST = Symbol(\"lruList\");\nconst CACHE = Symbol(\"cache\");\nconst UPDATE_AGE_ON_GET = Symbol(\"updateAgeOnGet\");\nconst naiveLength = ()=>1;\n// lruList is a yallist where the head is the youngest\n// item, and the tail is the oldest.  the list contains the Hit\n// objects as the entries.\n// Each Hit object has a reference to its Yallist.Node.  This\n// never changes.\n//\n// cache is a Map (or PseudoMap) that matches the keys to\n// the Yallist.Node object.\nclass LRUCache {\n    constructor(options){\n        if (typeof options === \"number\") options = {\n            max: options\n        };\n        if (!options) options = {};\n        if (options.max && (typeof options.max !== \"number\" || options.max < 0)) throw new TypeError(\"max must be a non-negative number\");\n        // Kind of weird to have a default max of Infinity, but oh well.\n        const max = this[MAX] = options.max || Infinity;\n        const lc = options.length || naiveLength;\n        this[LENGTH_CALCULATOR] = typeof lc !== \"function\" ? naiveLength : lc;\n        this[ALLOW_STALE] = options.stale || false;\n        if (options.maxAge && typeof options.maxAge !== \"number\") throw new TypeError(\"maxAge must be a number\");\n        this[MAX_AGE] = options.maxAge || 0;\n        this[DISPOSE] = options.dispose;\n        this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;\n        this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;\n        this.reset();\n    }\n    // resize the cache when the max changes.\n    set max(mL) {\n        if (typeof mL !== \"number\" || mL < 0) throw new TypeError(\"max must be a non-negative number\");\n        this[MAX] = mL || Infinity;\n        trim(this);\n    }\n    get max() {\n        return this[MAX];\n    }\n    set allowStale(allowStale) {\n        this[ALLOW_STALE] = !!allowStale;\n    }\n    get allowStale() {\n        return this[ALLOW_STALE];\n    }\n    set maxAge(mA) {\n        if (typeof mA !== \"number\") throw new TypeError(\"maxAge must be a non-negative number\");\n        this[MAX_AGE] = mA;\n        trim(this);\n    }\n    get maxAge() {\n        return this[MAX_AGE];\n    }\n    // resize the cache when the lengthCalculator changes.\n    set lengthCalculator(lC) {\n        if (typeof lC !== \"function\") lC = naiveLength;\n        if (lC !== this[LENGTH_CALCULATOR]) {\n            this[LENGTH_CALCULATOR] = lC;\n            this[LENGTH] = 0;\n            this[LRU_LIST].forEach((hit)=>{\n                hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);\n                this[LENGTH] += hit.length;\n            });\n        }\n        trim(this);\n    }\n    get lengthCalculator() {\n        return this[LENGTH_CALCULATOR];\n    }\n    get length() {\n        return this[LENGTH];\n    }\n    get itemCount() {\n        return this[LRU_LIST].length;\n    }\n    rforEach(fn, thisp) {\n        thisp = thisp || this;\n        for(let walker = this[LRU_LIST].tail; walker !== null;){\n            const prev = walker.prev;\n            forEachStep(this, fn, walker, thisp);\n            walker = prev;\n        }\n    }\n    forEach(fn, thisp) {\n        thisp = thisp || this;\n        for(let walker = this[LRU_LIST].head; walker !== null;){\n            const next = walker.next;\n            forEachStep(this, fn, walker, thisp);\n            walker = next;\n        }\n    }\n    keys() {\n        return this[LRU_LIST].toArray().map((k)=>k.key);\n    }\n    values() {\n        return this[LRU_LIST].toArray().map((k)=>k.value);\n    }\n    reset() {\n        if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {\n            this[LRU_LIST].forEach((hit)=>this[DISPOSE](hit.key, hit.value));\n        }\n        this[CACHE] = new Map() // hash of items by key\n        ;\n        this[LRU_LIST] = new Yallist() // list of items in order of use recency\n        ;\n        this[LENGTH] = 0 // length of items in the list\n        ;\n    }\n    dump() {\n        return this[LRU_LIST].map((hit)=>isStale(this, hit) ? false : {\n                k: hit.key,\n                v: hit.value,\n                e: hit.now + (hit.maxAge || 0)\n            }).toArray().filter((h)=>h);\n    }\n    dumpLru() {\n        return this[LRU_LIST];\n    }\n    set(key, value, maxAge) {\n        maxAge = maxAge || this[MAX_AGE];\n        if (maxAge && typeof maxAge !== \"number\") throw new TypeError(\"maxAge must be a number\");\n        const now = maxAge ? Date.now() : 0;\n        const len = this[LENGTH_CALCULATOR](value, key);\n        if (this[CACHE].has(key)) {\n            if (len > this[MAX]) {\n                del(this, this[CACHE].get(key));\n                return false;\n            }\n            const node = this[CACHE].get(key);\n            const item = node.value;\n            // dispose of the old one before overwriting\n            // split out into 2 ifs for better coverage tracking\n            if (this[DISPOSE]) {\n                if (!this[NO_DISPOSE_ON_SET]) this[DISPOSE](key, item.value);\n            }\n            item.now = now;\n            item.maxAge = maxAge;\n            item.value = value;\n            this[LENGTH] += len - item.length;\n            item.length = len;\n            this.get(key);\n            trim(this);\n            return true;\n        }\n        const hit = new Entry(key, value, len, now, maxAge);\n        // oversized objects fall out of cache automatically.\n        if (hit.length > this[MAX]) {\n            if (this[DISPOSE]) this[DISPOSE](key, value);\n            return false;\n        }\n        this[LENGTH] += hit.length;\n        this[LRU_LIST].unshift(hit);\n        this[CACHE].set(key, this[LRU_LIST].head);\n        trim(this);\n        return true;\n    }\n    has(key) {\n        if (!this[CACHE].has(key)) return false;\n        const hit = this[CACHE].get(key).value;\n        return !isStale(this, hit);\n    }\n    get(key) {\n        return get(this, key, true);\n    }\n    peek(key) {\n        return get(this, key, false);\n    }\n    pop() {\n        const node = this[LRU_LIST].tail;\n        if (!node) return null;\n        del(this, node);\n        return node.value;\n    }\n    del(key) {\n        del(this, this[CACHE].get(key));\n    }\n    load(arr) {\n        // reset the cache\n        this.reset();\n        const now = Date.now();\n        // A previous serialized cache has the most recent items first\n        for(let l = arr.length - 1; l >= 0; l--){\n            const hit = arr[l];\n            const expiresAt = hit.e || 0;\n            if (expiresAt === 0) // the item was created without expiration in a non aged cache\n            this.set(hit.k, hit.v);\n            else {\n                const maxAge = expiresAt - now;\n                // dont add already expired items\n                if (maxAge > 0) {\n                    this.set(hit.k, hit.v, maxAge);\n                }\n            }\n        }\n    }\n    prune() {\n        this[CACHE].forEach((value, key)=>get(this, key, false));\n    }\n}\nconst get = (self, key, doUse)=>{\n    const node = self[CACHE].get(key);\n    if (node) {\n        const hit = node.value;\n        if (isStale(self, hit)) {\n            del(self, node);\n            if (!self[ALLOW_STALE]) return undefined;\n        } else {\n            if (doUse) {\n                if (self[UPDATE_AGE_ON_GET]) node.value.now = Date.now();\n                self[LRU_LIST].unshiftNode(node);\n            }\n        }\n        return hit.value;\n    }\n};\nconst isStale = (self, hit)=>{\n    if (!hit || !hit.maxAge && !self[MAX_AGE]) return false;\n    const diff = Date.now() - hit.now;\n    return hit.maxAge ? diff > hit.maxAge : self[MAX_AGE] && diff > self[MAX_AGE];\n};\nconst trim = (self)=>{\n    if (self[LENGTH] > self[MAX]) {\n        for(let walker = self[LRU_LIST].tail; self[LENGTH] > self[MAX] && walker !== null;){\n            // We know that we're about to delete this one, and also\n            // what the next least recently used key will be, so just\n            // go ahead and set it now.\n            const prev = walker.prev;\n            del(self, walker);\n            walker = prev;\n        }\n    }\n};\nconst del = (self, node)=>{\n    if (node) {\n        const hit = node.value;\n        if (self[DISPOSE]) self[DISPOSE](hit.key, hit.value);\n        self[LENGTH] -= hit.length;\n        self[CACHE].delete(hit.key);\n        self[LRU_LIST].removeNode(node);\n    }\n};\nclass Entry {\n    constructor(key, value, length, now, maxAge){\n        this.key = key;\n        this.value = value;\n        this.length = length;\n        this.now = now;\n        this.maxAge = maxAge || 0;\n    }\n}\nconst forEachStep = (self, fn, node, thisp)=>{\n    let hit = node.value;\n    if (isStale(self, hit)) {\n        del(self, node);\n        if (!self[ALLOW_STALE]) hit = undefined;\n    }\n    if (hit) fn.call(thisp, hit.value, hit.key, self);\n};\nmodule.exports = LRUCache;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/proxy-agent/node_modules/lru-cache/index.js\n");

/***/ })

};
;