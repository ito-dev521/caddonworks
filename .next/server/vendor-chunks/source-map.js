/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/source-map";
exports.ids = ["vendor-chunks/source-map"];
exports.modules = {

/***/ "(rsc)/./node_modules/source-map/lib/array-set.js":
/*!**************************************************!*\
  !*** ./node_modules/source-map/lib/array-set.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/* -*- Mode: js; js-indent-level: 2; -*- */ /*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */ var util = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/source-map/lib/util.js\");\nvar has = Object.prototype.hasOwnProperty;\nvar hasNativeMap = typeof Map !== \"undefined\";\n/**\n * A data structure which is a combination of an array and a set. Adding a new\n * member is O(1), testing for membership is O(1), and finding the index of an\n * element is O(1). Removing elements from the set is not supported. Only\n * strings are supported for membership.\n */ function ArraySet() {\n    this._array = [];\n    this._set = hasNativeMap ? new Map() : Object.create(null);\n}\n/**\n * Static method for creating ArraySet instances from an existing array.\n */ ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {\n    var set = new ArraySet();\n    for(var i = 0, len = aArray.length; i < len; i++){\n        set.add(aArray[i], aAllowDuplicates);\n    }\n    return set;\n};\n/**\n * Return how many unique items are in this ArraySet. If duplicates have been\n * added, than those do not count towards the size.\n *\n * @returns Number\n */ ArraySet.prototype.size = function ArraySet_size() {\n    return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;\n};\n/**\n * Add the given string to this set.\n *\n * @param String aStr\n */ ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {\n    var sStr = hasNativeMap ? aStr : util.toSetString(aStr);\n    var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);\n    var idx = this._array.length;\n    if (!isDuplicate || aAllowDuplicates) {\n        this._array.push(aStr);\n    }\n    if (!isDuplicate) {\n        if (hasNativeMap) {\n            this._set.set(aStr, idx);\n        } else {\n            this._set[sStr] = idx;\n        }\n    }\n};\n/**\n * Is the given string a member of this set?\n *\n * @param String aStr\n */ ArraySet.prototype.has = function ArraySet_has(aStr) {\n    if (hasNativeMap) {\n        return this._set.has(aStr);\n    } else {\n        var sStr = util.toSetString(aStr);\n        return has.call(this._set, sStr);\n    }\n};\n/**\n * What is the index of the given string in the array?\n *\n * @param String aStr\n */ ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {\n    if (hasNativeMap) {\n        var idx = this._set.get(aStr);\n        if (idx >= 0) {\n            return idx;\n        }\n    } else {\n        var sStr = util.toSetString(aStr);\n        if (has.call(this._set, sStr)) {\n            return this._set[sStr];\n        }\n    }\n    throw new Error('\"' + aStr + '\" is not in the set.');\n};\n/**\n * What is the element at the given index?\n *\n * @param Number aIdx\n */ ArraySet.prototype.at = function ArraySet_at(aIdx) {\n    if (aIdx >= 0 && aIdx < this._array.length) {\n        return this._array[aIdx];\n    }\n    throw new Error(\"No element indexed by \" + aIdx);\n};\n/**\n * Returns the array representation of this set (which has the proper indices\n * indicated by indexOf). Note that this is a copy of the internal array used\n * for storing the members so that no one can mess with internal state.\n */ ArraySet.prototype.toArray = function ArraySet_toArray() {\n    return this._array.slice();\n};\nexports.ArraySet = ArraySet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/source-map/lib/array-set.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/source-map/lib/base64-vlq.js":
/*!***************************************************!*\
  !*** ./node_modules/source-map/lib/base64-vlq.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/* -*- Mode: js; js-indent-level: 2; -*- */ /*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n *\n * Based on the Base 64 VLQ implementation in Closure Compiler:\n * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java\n *\n * Copyright 2011 The Closure Compiler Authors. All rights reserved.\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *  * Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *  * Neither the name of Google Inc. nor the names of its\n *    contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */ var base64 = __webpack_require__(/*! ./base64 */ \"(rsc)/./node_modules/source-map/lib/base64.js\");\n// A single base 64 digit can contain 6 bits of data. For the base 64 variable\n// length quantities we use in the source map spec, the first bit is the sign,\n// the next four bits are the actual value, and the 6th bit is the\n// continuation bit. The continuation bit tells us whether there are more\n// digits in this value following this digit.\n//\n//   Continuation\n//   |    Sign\n//   |    |\n//   V    V\n//   101011\nvar VLQ_BASE_SHIFT = 5;\n// binary: 100000\nvar VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n// binary: 011111\nvar VLQ_BASE_MASK = VLQ_BASE - 1;\n// binary: 100000\nvar VLQ_CONTINUATION_BIT = VLQ_BASE;\n/**\n * Converts from a two-complement value to a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)\n *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)\n */ function toVLQSigned(aValue) {\n    return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;\n}\n/**\n * Converts to a two-complement value from a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1\n *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2\n */ function fromVLQSigned(aValue) {\n    var isNegative = (aValue & 1) === 1;\n    var shifted = aValue >> 1;\n    return isNegative ? -shifted : shifted;\n}\n/**\n * Returns the base 64 VLQ encoded value.\n */ exports.encode = function base64VLQ_encode(aValue) {\n    var encoded = \"\";\n    var digit;\n    var vlq = toVLQSigned(aValue);\n    do {\n        digit = vlq & VLQ_BASE_MASK;\n        vlq >>>= VLQ_BASE_SHIFT;\n        if (vlq > 0) {\n            // There are still more digits in this value, so we must make sure the\n            // continuation bit is marked.\n            digit |= VLQ_CONTINUATION_BIT;\n        }\n        encoded += base64.encode(digit);\n    }while (vlq > 0);\n    return encoded;\n};\n/**\n * Decodes the next base 64 VLQ value from the given string and returns the\n * value and the rest of the string via the out parameter.\n */ exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {\n    var strLen = aStr.length;\n    var result = 0;\n    var shift = 0;\n    var continuation, digit;\n    do {\n        if (aIndex >= strLen) {\n            throw new Error(\"Expected more digits in base 64 VLQ value.\");\n        }\n        digit = base64.decode(aStr.charCodeAt(aIndex++));\n        if (digit === -1) {\n            throw new Error(\"Invalid base64 digit: \" + aStr.charAt(aIndex - 1));\n        }\n        continuation = !!(digit & VLQ_CONTINUATION_BIT);\n        digit &= VLQ_BASE_MASK;\n        result = result + (digit << shift);\n        shift += VLQ_BASE_SHIFT;\n    }while (continuation);\n    aOutParam.value = fromVLQSigned(result);\n    aOutParam.rest = aIndex;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/source-map/lib/base64-vlq.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/source-map/lib/base64.js":
/*!***********************************************!*\
  !*** ./node_modules/source-map/lib/base64.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/* -*- Mode: js; js-indent-level: 2; -*- */ /*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */ var intToCharMap = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".split(\"\");\n/**\n * Encode an integer in the range of 0 to 63 to a single base 64 digit.\n */ exports.encode = function(number) {\n    if (0 <= number && number < intToCharMap.length) {\n        return intToCharMap[number];\n    }\n    throw new TypeError(\"Must be between 0 and 63: \" + number);\n};\n/**\n * Decode a single base 64 character code digit to an integer. Returns -1 on\n * failure.\n */ exports.decode = function(charCode) {\n    var bigA = 65; // 'A'\n    var bigZ = 90; // 'Z'\n    var littleA = 97; // 'a'\n    var littleZ = 122; // 'z'\n    var zero = 48; // '0'\n    var nine = 57; // '9'\n    var plus = 43; // '+'\n    var slash = 47; // '/'\n    var littleOffset = 26;\n    var numberOffset = 52;\n    // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ\n    if (bigA <= charCode && charCode <= bigZ) {\n        return charCode - bigA;\n    }\n    // 26 - 51: abcdefghijklmnopqrstuvwxyz\n    if (littleA <= charCode && charCode <= littleZ) {\n        return charCode - littleA + littleOffset;\n    }\n    // 52 - 61: 0123456789\n    if (zero <= charCode && charCode <= nine) {\n        return charCode - zero + numberOffset;\n    }\n    // 62: +\n    if (charCode == plus) {\n        return 62;\n    }\n    // 63: /\n    if (charCode == slash) {\n        return 63;\n    }\n    // Invalid base64 digit.\n    return -1;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvYmFzZTY0LmpzIiwibWFwcGluZ3MiOiJBQUFBLHlDQUF5QyxHQUN6Qzs7OztDQUlDLEdBRUQsSUFBSUEsZUFBZSxtRUFBbUVDLEtBQUssQ0FBQztBQUU1Rjs7Q0FFQyxHQUNEQyxjQUFjLEdBQUcsU0FBVUUsTUFBTTtJQUMvQixJQUFJLEtBQUtBLFVBQVVBLFNBQVNKLGFBQWFLLE1BQU0sRUFBRTtRQUMvQyxPQUFPTCxZQUFZLENBQUNJLE9BQU87SUFDN0I7SUFDQSxNQUFNLElBQUlFLFVBQVUsK0JBQStCRjtBQUNyRDtBQUVBOzs7Q0FHQyxHQUNERixjQUFjLEdBQUcsU0FBVU0sUUFBUTtJQUNqQyxJQUFJQyxPQUFPLElBQVEsTUFBTTtJQUN6QixJQUFJQyxPQUFPLElBQVEsTUFBTTtJQUV6QixJQUFJQyxVQUFVLElBQUssTUFBTTtJQUN6QixJQUFJQyxVQUFVLEtBQUssTUFBTTtJQUV6QixJQUFJQyxPQUFPLElBQVEsTUFBTTtJQUN6QixJQUFJQyxPQUFPLElBQVEsTUFBTTtJQUV6QixJQUFJQyxPQUFPLElBQVEsTUFBTTtJQUN6QixJQUFJQyxRQUFRLElBQU8sTUFBTTtJQUV6QixJQUFJQyxlQUFlO0lBQ25CLElBQUlDLGVBQWU7SUFFbkIscUNBQXFDO0lBQ3JDLElBQUlULFFBQVFELFlBQVlBLFlBQVlFLE1BQU07UUFDeEMsT0FBUUYsV0FBV0M7SUFDckI7SUFFQSxzQ0FBc0M7SUFDdEMsSUFBSUUsV0FBV0gsWUFBWUEsWUFBWUksU0FBUztRQUM5QyxPQUFRSixXQUFXRyxVQUFVTTtJQUMvQjtJQUVBLHNCQUFzQjtJQUN0QixJQUFJSixRQUFRTCxZQUFZQSxZQUFZTSxNQUFNO1FBQ3hDLE9BQVFOLFdBQVdLLE9BQU9LO0lBQzVCO0lBRUEsUUFBUTtJQUNSLElBQUlWLFlBQVlPLE1BQU07UUFDcEIsT0FBTztJQUNUO0lBRUEsUUFBUTtJQUNSLElBQUlQLFlBQVlRLE9BQU87UUFDckIsT0FBTztJQUNUO0lBRUEsd0JBQXdCO0lBQ3hCLE9BQU8sQ0FBQztBQUNWIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2l2aWwtZW5naW5lZXJpbmctcGxhdGZvcm0vLi9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvYmFzZTY0LmpzP2Q1MzIiXSwic291cmNlc0NvbnRlbnQiOlsiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuXG52YXIgaW50VG9DaGFyTWFwID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nLnNwbGl0KCcnKTtcblxuLyoqXG4gKiBFbmNvZGUgYW4gaW50ZWdlciBpbiB0aGUgcmFuZ2Ugb2YgMCB0byA2MyB0byBhIHNpbmdsZSBiYXNlIDY0IGRpZ2l0LlxuICovXG5leHBvcnRzLmVuY29kZSA9IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgaWYgKDAgPD0gbnVtYmVyICYmIG51bWJlciA8IGludFRvQ2hhck1hcC5sZW5ndGgpIHtcbiAgICByZXR1cm4gaW50VG9DaGFyTWFwW251bWJlcl07XG4gIH1cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk11c3QgYmUgYmV0d2VlbiAwIGFuZCA2MzogXCIgKyBudW1iZXIpO1xufTtcblxuLyoqXG4gKiBEZWNvZGUgYSBzaW5nbGUgYmFzZSA2NCBjaGFyYWN0ZXIgY29kZSBkaWdpdCB0byBhbiBpbnRlZ2VyLiBSZXR1cm5zIC0xIG9uXG4gKiBmYWlsdXJlLlxuICovXG5leHBvcnRzLmRlY29kZSA9IGZ1bmN0aW9uIChjaGFyQ29kZSkge1xuICB2YXIgYmlnQSA9IDY1OyAgICAgLy8gJ0EnXG4gIHZhciBiaWdaID0gOTA7ICAgICAvLyAnWidcblxuICB2YXIgbGl0dGxlQSA9IDk3OyAgLy8gJ2EnXG4gIHZhciBsaXR0bGVaID0gMTIyOyAvLyAneidcblxuICB2YXIgemVybyA9IDQ4OyAgICAgLy8gJzAnXG4gIHZhciBuaW5lID0gNTc7ICAgICAvLyAnOSdcblxuICB2YXIgcGx1cyA9IDQzOyAgICAgLy8gJysnXG4gIHZhciBzbGFzaCA9IDQ3OyAgICAvLyAnLydcblxuICB2YXIgbGl0dGxlT2Zmc2V0ID0gMjY7XG4gIHZhciBudW1iZXJPZmZzZXQgPSA1MjtcblxuICAvLyAwIC0gMjU6IEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaXG4gIGlmIChiaWdBIDw9IGNoYXJDb2RlICYmIGNoYXJDb2RlIDw9IGJpZ1opIHtcbiAgICByZXR1cm4gKGNoYXJDb2RlIC0gYmlnQSk7XG4gIH1cblxuICAvLyAyNiAtIDUxOiBhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5elxuICBpZiAobGl0dGxlQSA8PSBjaGFyQ29kZSAmJiBjaGFyQ29kZSA8PSBsaXR0bGVaKSB7XG4gICAgcmV0dXJuIChjaGFyQ29kZSAtIGxpdHRsZUEgKyBsaXR0bGVPZmZzZXQpO1xuICB9XG5cbiAgLy8gNTIgLSA2MTogMDEyMzQ1Njc4OVxuICBpZiAoemVybyA8PSBjaGFyQ29kZSAmJiBjaGFyQ29kZSA8PSBuaW5lKSB7XG4gICAgcmV0dXJuIChjaGFyQ29kZSAtIHplcm8gKyBudW1iZXJPZmZzZXQpO1xuICB9XG5cbiAgLy8gNjI6ICtcbiAgaWYgKGNoYXJDb2RlID09IHBsdXMpIHtcbiAgICByZXR1cm4gNjI7XG4gIH1cblxuICAvLyA2MzogL1xuICBpZiAoY2hhckNvZGUgPT0gc2xhc2gpIHtcbiAgICByZXR1cm4gNjM7XG4gIH1cblxuICAvLyBJbnZhbGlkIGJhc2U2NCBkaWdpdC5cbiAgcmV0dXJuIC0xO1xufTtcbiJdLCJuYW1lcyI6WyJpbnRUb0NoYXJNYXAiLCJzcGxpdCIsImV4cG9ydHMiLCJlbmNvZGUiLCJudW1iZXIiLCJsZW5ndGgiLCJUeXBlRXJyb3IiLCJkZWNvZGUiLCJjaGFyQ29kZSIsImJpZ0EiLCJiaWdaIiwibGl0dGxlQSIsImxpdHRsZVoiLCJ6ZXJvIiwibmluZSIsInBsdXMiLCJzbGFzaCIsImxpdHRsZU9mZnNldCIsIm51bWJlck9mZnNldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/source-map/lib/base64.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/source-map/lib/binary-search.js":
/*!******************************************************!*\
  !*** ./node_modules/source-map/lib/binary-search.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/* -*- Mode: js; js-indent-level: 2; -*- */ /*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */ exports.GREATEST_LOWER_BOUND = 1;\nexports.LEAST_UPPER_BOUND = 2;\n/**\n * Recursive implementation of binary search.\n *\n * @param aLow Indices here and lower do not contain the needle.\n * @param aHigh Indices here and higher do not contain the needle.\n * @param aNeedle The element being searched for.\n * @param aHaystack The non-empty array being searched.\n * @param aCompare Function which takes two elements and returns -1, 0, or 1.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n */ function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {\n    // This function terminates when one of the following is true:\n    //\n    //   1. We find the exact element we are looking for.\n    //\n    //   2. We did not find the exact element, but we can return the index of\n    //      the next-closest element.\n    //\n    //   3. We did not find the exact element, and there is no next-closest\n    //      element than the one we are searching for, so we return -1.\n    var mid = Math.floor((aHigh - aLow) / 2) + aLow;\n    var cmp = aCompare(aNeedle, aHaystack[mid], true);\n    if (cmp === 0) {\n        // Found the element we are looking for.\n        return mid;\n    } else if (cmp > 0) {\n        // Our needle is greater than aHaystack[mid].\n        if (aHigh - mid > 1) {\n            // The element is in the upper half.\n            return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);\n        }\n        // The exact needle element was not found in this haystack. Determine if\n        // we are in termination case (3) or (2) and return the appropriate thing.\n        if (aBias == exports.LEAST_UPPER_BOUND) {\n            return aHigh < aHaystack.length ? aHigh : -1;\n        } else {\n            return mid;\n        }\n    } else {\n        // Our needle is less than aHaystack[mid].\n        if (mid - aLow > 1) {\n            // The element is in the lower half.\n            return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);\n        }\n        // we are in termination case (3) or (2) and return the appropriate thing.\n        if (aBias == exports.LEAST_UPPER_BOUND) {\n            return mid;\n        } else {\n            return aLow < 0 ? -1 : aLow;\n        }\n    }\n}\n/**\n * This is an implementation of binary search which will always try and return\n * the index of the closest element if there is no exact hit. This is because\n * mappings between original and generated line/col pairs are single points,\n * and there is an implicit region between each of them, so a miss just means\n * that you aren't on the very start of a region.\n *\n * @param aNeedle The element you are looking for.\n * @param aHaystack The array that is being searched.\n * @param aCompare A function which takes the needle and an element in the\n *     array and returns -1, 0, or 1 depending on whether the needle is less\n *     than, equal to, or greater than the element, respectively.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.\n */ exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {\n    if (aHaystack.length === 0) {\n        return -1;\n    }\n    var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack, aCompare, aBias || exports.GREATEST_LOWER_BOUND);\n    if (index < 0) {\n        return -1;\n    }\n    // We have found either the exact element, or the next-closest element than\n    // the one we are searching for. However, there may be more than one such\n    // element. Make sure we always return the smallest of these.\n    while(index - 1 >= 0){\n        if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {\n            break;\n        }\n        --index;\n    }\n    return index;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/source-map/lib/binary-search.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/source-map/lib/mapping-list.js":
/*!*****************************************************!*\
  !*** ./node_modules/source-map/lib/mapping-list.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/* -*- Mode: js; js-indent-level: 2; -*- */ /*\n * Copyright 2014 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */ var util = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/source-map/lib/util.js\");\n/**\n * Determine whether mappingB is after mappingA with respect to generated\n * position.\n */ function generatedPositionAfter(mappingA, mappingB) {\n    // Optimized for most common case\n    var lineA = mappingA.generatedLine;\n    var lineB = mappingB.generatedLine;\n    var columnA = mappingA.generatedColumn;\n    var columnB = mappingB.generatedColumn;\n    return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;\n}\n/**\n * A data structure to provide a sorted view of accumulated mappings in a\n * performance conscious manner. It trades a neglibable overhead in general\n * case for a large speedup in case of mappings being added in order.\n */ function MappingList() {\n    this._array = [];\n    this._sorted = true;\n    // Serves as infimum\n    this._last = {\n        generatedLine: -1,\n        generatedColumn: 0\n    };\n}\n/**\n * Iterate through internal items. This method takes the same arguments that\n * `Array.prototype.forEach` takes.\n *\n * NOTE: The order of the mappings is NOT guaranteed.\n */ MappingList.prototype.unsortedForEach = function MappingList_forEach(aCallback, aThisArg) {\n    this._array.forEach(aCallback, aThisArg);\n};\n/**\n * Add the given source mapping.\n *\n * @param Object aMapping\n */ MappingList.prototype.add = function MappingList_add(aMapping) {\n    if (generatedPositionAfter(this._last, aMapping)) {\n        this._last = aMapping;\n        this._array.push(aMapping);\n    } else {\n        this._sorted = false;\n        this._array.push(aMapping);\n    }\n};\n/**\n * Returns the flat, sorted array of mappings. The mappings are sorted by\n * generated position.\n *\n * WARNING: This method returns internal data without copying, for\n * performance. The return value must NOT be mutated, and should be treated as\n * an immutable borrow. If you want to take ownership, you must make your own\n * copy.\n */ MappingList.prototype.toArray = function MappingList_toArray() {\n    if (!this._sorted) {\n        this._array.sort(util.compareByGeneratedPositionsInflated);\n        this._sorted = true;\n    }\n    return this._array;\n};\nexports.MappingList = MappingList;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvbWFwcGluZy1saXN0LmpzIiwibWFwcGluZ3MiOiJBQUFBLHlDQUF5QyxHQUN6Qzs7OztDQUlDLEdBRUQsSUFBSUEsT0FBT0MsbUJBQU9BLENBQUM7QUFFbkI7OztDQUdDLEdBQ0QsU0FBU0MsdUJBQXVCQyxRQUFRLEVBQUVDLFFBQVE7SUFDaEQsaUNBQWlDO0lBQ2pDLElBQUlDLFFBQVFGLFNBQVNHLGFBQWE7SUFDbEMsSUFBSUMsUUFBUUgsU0FBU0UsYUFBYTtJQUNsQyxJQUFJRSxVQUFVTCxTQUFTTSxlQUFlO0lBQ3RDLElBQUlDLFVBQVVOLFNBQVNLLGVBQWU7SUFDdEMsT0FBT0YsUUFBUUYsU0FBU0UsU0FBU0YsU0FBU0ssV0FBV0YsV0FDOUNSLEtBQUtXLG1DQUFtQyxDQUFDUixVQUFVQyxhQUFhO0FBQ3pFO0FBRUE7Ozs7Q0FJQyxHQUNELFNBQVNRO0lBQ1AsSUFBSSxDQUFDQyxNQUFNLEdBQUcsRUFBRTtJQUNoQixJQUFJLENBQUNDLE9BQU8sR0FBRztJQUNmLG9CQUFvQjtJQUNwQixJQUFJLENBQUNDLEtBQUssR0FBRztRQUFDVCxlQUFlLENBQUM7UUFBR0csaUJBQWlCO0lBQUM7QUFDckQ7QUFFQTs7Ozs7Q0FLQyxHQUNERyxZQUFZSSxTQUFTLENBQUNDLGVBQWUsR0FDbkMsU0FBU0Msb0JBQW9CQyxTQUFTLEVBQUVDLFFBQVE7SUFDOUMsSUFBSSxDQUFDUCxNQUFNLENBQUNRLE9BQU8sQ0FBQ0YsV0FBV0M7QUFDakM7QUFFRjs7OztDQUlDLEdBQ0RSLFlBQVlJLFNBQVMsQ0FBQ00sR0FBRyxHQUFHLFNBQVNDLGdCQUFnQkMsUUFBUTtJQUMzRCxJQUFJdEIsdUJBQXVCLElBQUksQ0FBQ2EsS0FBSyxFQUFFUyxXQUFXO1FBQ2hELElBQUksQ0FBQ1QsS0FBSyxHQUFHUztRQUNiLElBQUksQ0FBQ1gsTUFBTSxDQUFDWSxJQUFJLENBQUNEO0lBQ25CLE9BQU87UUFDTCxJQUFJLENBQUNWLE9BQU8sR0FBRztRQUNmLElBQUksQ0FBQ0QsTUFBTSxDQUFDWSxJQUFJLENBQUNEO0lBQ25CO0FBQ0Y7QUFFQTs7Ozs7Ozs7Q0FRQyxHQUNEWixZQUFZSSxTQUFTLENBQUNVLE9BQU8sR0FBRyxTQUFTQztJQUN2QyxJQUFJLENBQUMsSUFBSSxDQUFDYixPQUFPLEVBQUU7UUFDakIsSUFBSSxDQUFDRCxNQUFNLENBQUNlLElBQUksQ0FBQzVCLEtBQUtXLG1DQUFtQztRQUN6RCxJQUFJLENBQUNHLE9BQU8sR0FBRztJQUNqQjtJQUNBLE9BQU8sSUFBSSxDQUFDRCxNQUFNO0FBQ3BCO0FBRUFnQixtQkFBbUIsR0FBR2pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2l2aWwtZW5naW5lZXJpbmctcGxhdGZvcm0vLi9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvbWFwcGluZy1saXN0LmpzPzRhZGEiXSwic291cmNlc0NvbnRlbnQiOlsiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDE0IE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xuXG4vKipcbiAqIERldGVybWluZSB3aGV0aGVyIG1hcHBpbmdCIGlzIGFmdGVyIG1hcHBpbmdBIHdpdGggcmVzcGVjdCB0byBnZW5lcmF0ZWRcbiAqIHBvc2l0aW9uLlxuICovXG5mdW5jdGlvbiBnZW5lcmF0ZWRQb3NpdGlvbkFmdGVyKG1hcHBpbmdBLCBtYXBwaW5nQikge1xuICAvLyBPcHRpbWl6ZWQgZm9yIG1vc3QgY29tbW9uIGNhc2VcbiAgdmFyIGxpbmVBID0gbWFwcGluZ0EuZ2VuZXJhdGVkTGluZTtcbiAgdmFyIGxpbmVCID0gbWFwcGluZ0IuZ2VuZXJhdGVkTGluZTtcbiAgdmFyIGNvbHVtbkEgPSBtYXBwaW5nQS5nZW5lcmF0ZWRDb2x1bW47XG4gIHZhciBjb2x1bW5CID0gbWFwcGluZ0IuZ2VuZXJhdGVkQ29sdW1uO1xuICByZXR1cm4gbGluZUIgPiBsaW5lQSB8fCBsaW5lQiA9PSBsaW5lQSAmJiBjb2x1bW5CID49IGNvbHVtbkEgfHxcbiAgICAgICAgIHV0aWwuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zSW5mbGF0ZWQobWFwcGluZ0EsIG1hcHBpbmdCKSA8PSAwO1xufVxuXG4vKipcbiAqIEEgZGF0YSBzdHJ1Y3R1cmUgdG8gcHJvdmlkZSBhIHNvcnRlZCB2aWV3IG9mIGFjY3VtdWxhdGVkIG1hcHBpbmdzIGluIGFcbiAqIHBlcmZvcm1hbmNlIGNvbnNjaW91cyBtYW5uZXIuIEl0IHRyYWRlcyBhIG5lZ2xpYmFibGUgb3ZlcmhlYWQgaW4gZ2VuZXJhbFxuICogY2FzZSBmb3IgYSBsYXJnZSBzcGVlZHVwIGluIGNhc2Ugb2YgbWFwcGluZ3MgYmVpbmcgYWRkZWQgaW4gb3JkZXIuXG4gKi9cbmZ1bmN0aW9uIE1hcHBpbmdMaXN0KCkge1xuICB0aGlzLl9hcnJheSA9IFtdO1xuICB0aGlzLl9zb3J0ZWQgPSB0cnVlO1xuICAvLyBTZXJ2ZXMgYXMgaW5maW11bVxuICB0aGlzLl9sYXN0ID0ge2dlbmVyYXRlZExpbmU6IC0xLCBnZW5lcmF0ZWRDb2x1bW46IDB9O1xufVxuXG4vKipcbiAqIEl0ZXJhdGUgdGhyb3VnaCBpbnRlcm5hbCBpdGVtcy4gVGhpcyBtZXRob2QgdGFrZXMgdGhlIHNhbWUgYXJndW1lbnRzIHRoYXRcbiAqIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgdGFrZXMuXG4gKlxuICogTk9URTogVGhlIG9yZGVyIG9mIHRoZSBtYXBwaW5ncyBpcyBOT1QgZ3VhcmFudGVlZC5cbiAqL1xuTWFwcGluZ0xpc3QucHJvdG90eXBlLnVuc29ydGVkRm9yRWFjaCA9XG4gIGZ1bmN0aW9uIE1hcHBpbmdMaXN0X2ZvckVhY2goYUNhbGxiYWNrLCBhVGhpc0FyZykge1xuICAgIHRoaXMuX2FycmF5LmZvckVhY2goYUNhbGxiYWNrLCBhVGhpc0FyZyk7XG4gIH07XG5cbi8qKlxuICogQWRkIHRoZSBnaXZlbiBzb3VyY2UgbWFwcGluZy5cbiAqXG4gKiBAcGFyYW0gT2JqZWN0IGFNYXBwaW5nXG4gKi9cbk1hcHBpbmdMaXN0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBNYXBwaW5nTGlzdF9hZGQoYU1hcHBpbmcpIHtcbiAgaWYgKGdlbmVyYXRlZFBvc2l0aW9uQWZ0ZXIodGhpcy5fbGFzdCwgYU1hcHBpbmcpKSB7XG4gICAgdGhpcy5fbGFzdCA9IGFNYXBwaW5nO1xuICAgIHRoaXMuX2FycmF5LnB1c2goYU1hcHBpbmcpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX3NvcnRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX2FycmF5LnB1c2goYU1hcHBpbmcpO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGZsYXQsIHNvcnRlZCBhcnJheSBvZiBtYXBwaW5ncy4gVGhlIG1hcHBpbmdzIGFyZSBzb3J0ZWQgYnlcbiAqIGdlbmVyYXRlZCBwb3NpdGlvbi5cbiAqXG4gKiBXQVJOSU5HOiBUaGlzIG1ldGhvZCByZXR1cm5zIGludGVybmFsIGRhdGEgd2l0aG91dCBjb3B5aW5nLCBmb3JcbiAqIHBlcmZvcm1hbmNlLiBUaGUgcmV0dXJuIHZhbHVlIG11c3QgTk9UIGJlIG11dGF0ZWQsIGFuZCBzaG91bGQgYmUgdHJlYXRlZCBhc1xuICogYW4gaW1tdXRhYmxlIGJvcnJvdy4gSWYgeW91IHdhbnQgdG8gdGFrZSBvd25lcnNoaXAsIHlvdSBtdXN0IG1ha2UgeW91ciBvd25cbiAqIGNvcHkuXG4gKi9cbk1hcHBpbmdMaXN0LnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24gTWFwcGluZ0xpc3RfdG9BcnJheSgpIHtcbiAgaWYgKCF0aGlzLl9zb3J0ZWQpIHtcbiAgICB0aGlzLl9hcnJheS5zb3J0KHV0aWwuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zSW5mbGF0ZWQpO1xuICAgIHRoaXMuX3NvcnRlZCA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIHRoaXMuX2FycmF5O1xufTtcblxuZXhwb3J0cy5NYXBwaW5nTGlzdCA9IE1hcHBpbmdMaXN0O1xuIl0sIm5hbWVzIjpbInV0aWwiLCJyZXF1aXJlIiwiZ2VuZXJhdGVkUG9zaXRpb25BZnRlciIsIm1hcHBpbmdBIiwibWFwcGluZ0IiLCJsaW5lQSIsImdlbmVyYXRlZExpbmUiLCJsaW5lQiIsImNvbHVtbkEiLCJnZW5lcmF0ZWRDb2x1bW4iLCJjb2x1bW5CIiwiY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zSW5mbGF0ZWQiLCJNYXBwaW5nTGlzdCIsIl9hcnJheSIsIl9zb3J0ZWQiLCJfbGFzdCIsInByb3RvdHlwZSIsInVuc29ydGVkRm9yRWFjaCIsIk1hcHBpbmdMaXN0X2ZvckVhY2giLCJhQ2FsbGJhY2siLCJhVGhpc0FyZyIsImZvckVhY2giLCJhZGQiLCJNYXBwaW5nTGlzdF9hZGQiLCJhTWFwcGluZyIsInB1c2giLCJ0b0FycmF5IiwiTWFwcGluZ0xpc3RfdG9BcnJheSIsInNvcnQiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/source-map/lib/mapping-list.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/source-map/lib/quick-sort.js":
/*!***************************************************!*\
  !*** ./node_modules/source-map/lib/quick-sort.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/* -*- Mode: js; js-indent-level: 2; -*- */ /*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */ // It turns out that some (most?) JavaScript engines don't self-host\n// `Array.prototype.sort`. This makes sense because C++ will likely remain\n// faster than JS when doing raw CPU-intensive sorting. However, when using a\n// custom comparator function, calling back and forth between the VM's C++ and\n// JIT'd JS is rather slow *and* loses JIT type information, resulting in\n// worse generated code for the comparator function than would be optimal. In\n// fact, when sorting with a comparator, these costs outweigh the benefits of\n// sorting in C++. By using our own JS-implemented Quick Sort (below), we get\n// a ~3500ms mean speed-up in `bench/bench.html`.\n/**\n * Swap the elements indexed by `x` and `y` in the array `ary`.\n *\n * @param {Array} ary\n *        The array.\n * @param {Number} x\n *        The index of the first item.\n * @param {Number} y\n *        The index of the second item.\n */ function swap(ary, x, y) {\n    var temp = ary[x];\n    ary[x] = ary[y];\n    ary[y] = temp;\n}\n/**\n * Returns a random integer within the range `low .. high` inclusive.\n *\n * @param {Number} low\n *        The lower bound on the range.\n * @param {Number} high\n *        The upper bound on the range.\n */ function randomIntInRange(low, high) {\n    return Math.round(low + Math.random() * (high - low));\n}\n/**\n * The Quick Sort algorithm.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n * @param {Number} p\n *        Start index of the array\n * @param {Number} r\n *        End index of the array\n */ function doQuickSort(ary, comparator, p, r) {\n    // If our lower bound is less than our upper bound, we (1) partition the\n    // array into two pieces and (2) recurse on each half. If it is not, this is\n    // the empty array and our base case.\n    if (p < r) {\n        // (1) Partitioning.\n        //\n        // The partitioning chooses a pivot between `p` and `r` and moves all\n        // elements that are less than or equal to the pivot to the before it, and\n        // all the elements that are greater than it after it. The effect is that\n        // once partition is done, the pivot is in the exact place it will be when\n        // the array is put in sorted order, and it will not need to be moved\n        // again. This runs in O(n) time.\n        // Always choose a random pivot so that an input array which is reverse\n        // sorted does not cause O(n^2) running time.\n        var pivotIndex = randomIntInRange(p, r);\n        var i = p - 1;\n        swap(ary, pivotIndex, r);\n        var pivot = ary[r];\n        // Immediately after `j` is incremented in this loop, the following hold\n        // true:\n        //\n        //   * Every element in `ary[p .. i]` is less than or equal to the pivot.\n        //\n        //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.\n        for(var j = p; j < r; j++){\n            if (comparator(ary[j], pivot) <= 0) {\n                i += 1;\n                swap(ary, i, j);\n            }\n        }\n        swap(ary, i + 1, j);\n        var q = i + 1;\n        // (2) Recurse on each half.\n        doQuickSort(ary, comparator, p, q - 1);\n        doQuickSort(ary, comparator, q + 1, r);\n    }\n}\n/**\n * Sort the given array in-place with the given comparator function.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n */ exports.quickSort = function(ary, comparator) {\n    doQuickSort(ary, comparator, 0, ary.length - 1);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvcXVpY2stc29ydC5qcyIsIm1hcHBpbmdzIjoiQUFBQSx5Q0FBeUMsR0FDekM7Ozs7Q0FJQyxHQUVELG9FQUFvRTtBQUNwRSwwRUFBMEU7QUFDMUUsNkVBQTZFO0FBQzdFLDhFQUE4RTtBQUM5RSx5RUFBeUU7QUFDekUsNkVBQTZFO0FBQzdFLDZFQUE2RTtBQUM3RSw2RUFBNkU7QUFDN0UsaURBQWlEO0FBRWpEOzs7Ozs7Ozs7Q0FTQyxHQUNELFNBQVNBLEtBQUtDLEdBQUcsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDO0lBQ3JCLElBQUlDLE9BQU9ILEdBQUcsQ0FBQ0MsRUFBRTtJQUNqQkQsR0FBRyxDQUFDQyxFQUFFLEdBQUdELEdBQUcsQ0FBQ0UsRUFBRTtJQUNmRixHQUFHLENBQUNFLEVBQUUsR0FBR0M7QUFDWDtBQUVBOzs7Ozs7O0NBT0MsR0FDRCxTQUFTQyxpQkFBaUJDLEdBQUcsRUFBRUMsSUFBSTtJQUNqQyxPQUFPQyxLQUFLQyxLQUFLLENBQUNILE1BQU9FLEtBQUtFLE1BQU0sS0FBTUgsQ0FBQUEsT0FBT0QsR0FBRTtBQUNyRDtBQUVBOzs7Ozs7Ozs7OztDQVdDLEdBQ0QsU0FBU0ssWUFBWVYsR0FBRyxFQUFFVyxVQUFVLEVBQUVDLENBQUMsRUFBRUMsQ0FBQztJQUN4Qyx3RUFBd0U7SUFDeEUsNEVBQTRFO0lBQzVFLHFDQUFxQztJQUVyQyxJQUFJRCxJQUFJQyxHQUFHO1FBQ1Qsb0JBQW9CO1FBQ3BCLEVBQUU7UUFDRixxRUFBcUU7UUFDckUsMEVBQTBFO1FBQzFFLHlFQUF5RTtRQUN6RSwwRUFBMEU7UUFDMUUscUVBQXFFO1FBQ3JFLGlDQUFpQztRQUVqQyx1RUFBdUU7UUFDdkUsNkNBQTZDO1FBQzdDLElBQUlDLGFBQWFWLGlCQUFpQlEsR0FBR0M7UUFDckMsSUFBSUUsSUFBSUgsSUFBSTtRQUVaYixLQUFLQyxLQUFLYyxZQUFZRDtRQUN0QixJQUFJRyxRQUFRaEIsR0FBRyxDQUFDYSxFQUFFO1FBRWxCLHdFQUF3RTtRQUN4RSxRQUFRO1FBQ1IsRUFBRTtRQUNGLHlFQUF5RTtRQUN6RSxFQUFFO1FBQ0Ysb0VBQW9FO1FBQ3BFLElBQUssSUFBSUksSUFBSUwsR0FBR0ssSUFBSUosR0FBR0ksSUFBSztZQUMxQixJQUFJTixXQUFXWCxHQUFHLENBQUNpQixFQUFFLEVBQUVELFVBQVUsR0FBRztnQkFDbENELEtBQUs7Z0JBQ0xoQixLQUFLQyxLQUFLZSxHQUFHRTtZQUNmO1FBQ0Y7UUFFQWxCLEtBQUtDLEtBQUtlLElBQUksR0FBR0U7UUFDakIsSUFBSUMsSUFBSUgsSUFBSTtRQUVaLDRCQUE0QjtRQUU1QkwsWUFBWVYsS0FBS1csWUFBWUMsR0FBR00sSUFBSTtRQUNwQ1IsWUFBWVYsS0FBS1csWUFBWU8sSUFBSSxHQUFHTDtJQUN0QztBQUNGO0FBRUE7Ozs7Ozs7Q0FPQyxHQUNETSxpQkFBaUIsR0FBRyxTQUFVbkIsR0FBRyxFQUFFVyxVQUFVO0lBQzNDRCxZQUFZVixLQUFLVyxZQUFZLEdBQUdYLElBQUlxQixNQUFNLEdBQUc7QUFDL0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaXZpbC1lbmdpbmVlcmluZy1wbGF0Zm9ybS8uL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi9xdWljay1zb3J0LmpzPzdmNjEiXSwic291cmNlc0NvbnRlbnQiOlsiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuXG4vLyBJdCB0dXJucyBvdXQgdGhhdCBzb21lIChtb3N0PykgSmF2YVNjcmlwdCBlbmdpbmVzIGRvbid0IHNlbGYtaG9zdFxuLy8gYEFycmF5LnByb3RvdHlwZS5zb3J0YC4gVGhpcyBtYWtlcyBzZW5zZSBiZWNhdXNlIEMrKyB3aWxsIGxpa2VseSByZW1haW5cbi8vIGZhc3RlciB0aGFuIEpTIHdoZW4gZG9pbmcgcmF3IENQVS1pbnRlbnNpdmUgc29ydGluZy4gSG93ZXZlciwgd2hlbiB1c2luZyBhXG4vLyBjdXN0b20gY29tcGFyYXRvciBmdW5jdGlvbiwgY2FsbGluZyBiYWNrIGFuZCBmb3J0aCBiZXR3ZWVuIHRoZSBWTSdzIEMrKyBhbmRcbi8vIEpJVCdkIEpTIGlzIHJhdGhlciBzbG93ICphbmQqIGxvc2VzIEpJVCB0eXBlIGluZm9ybWF0aW9uLCByZXN1bHRpbmcgaW5cbi8vIHdvcnNlIGdlbmVyYXRlZCBjb2RlIGZvciB0aGUgY29tcGFyYXRvciBmdW5jdGlvbiB0aGFuIHdvdWxkIGJlIG9wdGltYWwuIEluXG4vLyBmYWN0LCB3aGVuIHNvcnRpbmcgd2l0aCBhIGNvbXBhcmF0b3IsIHRoZXNlIGNvc3RzIG91dHdlaWdoIHRoZSBiZW5lZml0cyBvZlxuLy8gc29ydGluZyBpbiBDKysuIEJ5IHVzaW5nIG91ciBvd24gSlMtaW1wbGVtZW50ZWQgUXVpY2sgU29ydCAoYmVsb3cpLCB3ZSBnZXRcbi8vIGEgfjM1MDBtcyBtZWFuIHNwZWVkLXVwIGluIGBiZW5jaC9iZW5jaC5odG1sYC5cblxuLyoqXG4gKiBTd2FwIHRoZSBlbGVtZW50cyBpbmRleGVkIGJ5IGB4YCBhbmQgYHlgIGluIHRoZSBhcnJheSBgYXJ5YC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBhcnlcbiAqICAgICAgICBUaGUgYXJyYXkuXG4gKiBAcGFyYW0ge051bWJlcn0geFxuICogICAgICAgIFRoZSBpbmRleCBvZiB0aGUgZmlyc3QgaXRlbS5cbiAqIEBwYXJhbSB7TnVtYmVyfSB5XG4gKiAgICAgICAgVGhlIGluZGV4IG9mIHRoZSBzZWNvbmQgaXRlbS5cbiAqL1xuZnVuY3Rpb24gc3dhcChhcnksIHgsIHkpIHtcbiAgdmFyIHRlbXAgPSBhcnlbeF07XG4gIGFyeVt4XSA9IGFyeVt5XTtcbiAgYXJ5W3ldID0gdGVtcDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgcmFuZG9tIGludGVnZXIgd2l0aGluIHRoZSByYW5nZSBgbG93IC4uIGhpZ2hgIGluY2x1c2l2ZS5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbG93XG4gKiAgICAgICAgVGhlIGxvd2VyIGJvdW5kIG9uIHRoZSByYW5nZS5cbiAqIEBwYXJhbSB7TnVtYmVyfSBoaWdoXG4gKiAgICAgICAgVGhlIHVwcGVyIGJvdW5kIG9uIHRoZSByYW5nZS5cbiAqL1xuZnVuY3Rpb24gcmFuZG9tSW50SW5SYW5nZShsb3csIGhpZ2gpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQobG93ICsgKE1hdGgucmFuZG9tKCkgKiAoaGlnaCAtIGxvdykpKTtcbn1cblxuLyoqXG4gKiBUaGUgUXVpY2sgU29ydCBhbGdvcml0aG0uXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYXJ5XG4gKiAgICAgICAgQW4gYXJyYXkgdG8gc29ydC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbXBhcmF0b3JcbiAqICAgICAgICBGdW5jdGlvbiB0byB1c2UgdG8gY29tcGFyZSB0d28gaXRlbXMuXG4gKiBAcGFyYW0ge051bWJlcn0gcFxuICogICAgICAgIFN0YXJ0IGluZGV4IG9mIHRoZSBhcnJheVxuICogQHBhcmFtIHtOdW1iZXJ9IHJcbiAqICAgICAgICBFbmQgaW5kZXggb2YgdGhlIGFycmF5XG4gKi9cbmZ1bmN0aW9uIGRvUXVpY2tTb3J0KGFyeSwgY29tcGFyYXRvciwgcCwgcikge1xuICAvLyBJZiBvdXIgbG93ZXIgYm91bmQgaXMgbGVzcyB0aGFuIG91ciB1cHBlciBib3VuZCwgd2UgKDEpIHBhcnRpdGlvbiB0aGVcbiAgLy8gYXJyYXkgaW50byB0d28gcGllY2VzIGFuZCAoMikgcmVjdXJzZSBvbiBlYWNoIGhhbGYuIElmIGl0IGlzIG5vdCwgdGhpcyBpc1xuICAvLyB0aGUgZW1wdHkgYXJyYXkgYW5kIG91ciBiYXNlIGNhc2UuXG5cbiAgaWYgKHAgPCByKSB7XG4gICAgLy8gKDEpIFBhcnRpdGlvbmluZy5cbiAgICAvL1xuICAgIC8vIFRoZSBwYXJ0aXRpb25pbmcgY2hvb3NlcyBhIHBpdm90IGJldHdlZW4gYHBgIGFuZCBgcmAgYW5kIG1vdmVzIGFsbFxuICAgIC8vIGVsZW1lbnRzIHRoYXQgYXJlIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgcGl2b3QgdG8gdGhlIGJlZm9yZSBpdCwgYW5kXG4gICAgLy8gYWxsIHRoZSBlbGVtZW50cyB0aGF0IGFyZSBncmVhdGVyIHRoYW4gaXQgYWZ0ZXIgaXQuIFRoZSBlZmZlY3QgaXMgdGhhdFxuICAgIC8vIG9uY2UgcGFydGl0aW9uIGlzIGRvbmUsIHRoZSBwaXZvdCBpcyBpbiB0aGUgZXhhY3QgcGxhY2UgaXQgd2lsbCBiZSB3aGVuXG4gICAgLy8gdGhlIGFycmF5IGlzIHB1dCBpbiBzb3J0ZWQgb3JkZXIsIGFuZCBpdCB3aWxsIG5vdCBuZWVkIHRvIGJlIG1vdmVkXG4gICAgLy8gYWdhaW4uIFRoaXMgcnVucyBpbiBPKG4pIHRpbWUuXG5cbiAgICAvLyBBbHdheXMgY2hvb3NlIGEgcmFuZG9tIHBpdm90IHNvIHRoYXQgYW4gaW5wdXQgYXJyYXkgd2hpY2ggaXMgcmV2ZXJzZVxuICAgIC8vIHNvcnRlZCBkb2VzIG5vdCBjYXVzZSBPKG5eMikgcnVubmluZyB0aW1lLlxuICAgIHZhciBwaXZvdEluZGV4ID0gcmFuZG9tSW50SW5SYW5nZShwLCByKTtcbiAgICB2YXIgaSA9IHAgLSAxO1xuXG4gICAgc3dhcChhcnksIHBpdm90SW5kZXgsIHIpO1xuICAgIHZhciBwaXZvdCA9IGFyeVtyXTtcblxuICAgIC8vIEltbWVkaWF0ZWx5IGFmdGVyIGBqYCBpcyBpbmNyZW1lbnRlZCBpbiB0aGlzIGxvb3AsIHRoZSBmb2xsb3dpbmcgaG9sZFxuICAgIC8vIHRydWU6XG4gICAgLy9cbiAgICAvLyAgICogRXZlcnkgZWxlbWVudCBpbiBgYXJ5W3AgLi4gaV1gIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgcGl2b3QuXG4gICAgLy9cbiAgICAvLyAgICogRXZlcnkgZWxlbWVudCBpbiBgYXJ5W2krMSAuLiBqLTFdYCBpcyBncmVhdGVyIHRoYW4gdGhlIHBpdm90LlxuICAgIGZvciAodmFyIGogPSBwOyBqIDwgcjsgaisrKSB7XG4gICAgICBpZiAoY29tcGFyYXRvcihhcnlbal0sIHBpdm90KSA8PSAwKSB7XG4gICAgICAgIGkgKz0gMTtcbiAgICAgICAgc3dhcChhcnksIGksIGopO1xuICAgICAgfVxuICAgIH1cblxuICAgIHN3YXAoYXJ5LCBpICsgMSwgaik7XG4gICAgdmFyIHEgPSBpICsgMTtcblxuICAgIC8vICgyKSBSZWN1cnNlIG9uIGVhY2ggaGFsZi5cblxuICAgIGRvUXVpY2tTb3J0KGFyeSwgY29tcGFyYXRvciwgcCwgcSAtIDEpO1xuICAgIGRvUXVpY2tTb3J0KGFyeSwgY29tcGFyYXRvciwgcSArIDEsIHIpO1xuICB9XG59XG5cbi8qKlxuICogU29ydCB0aGUgZ2l2ZW4gYXJyYXkgaW4tcGxhY2Ugd2l0aCB0aGUgZ2l2ZW4gY29tcGFyYXRvciBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBhcnlcbiAqICAgICAgICBBbiBhcnJheSB0byBzb3J0LlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY29tcGFyYXRvclxuICogICAgICAgIEZ1bmN0aW9uIHRvIHVzZSB0byBjb21wYXJlIHR3byBpdGVtcy5cbiAqL1xuZXhwb3J0cy5xdWlja1NvcnQgPSBmdW5jdGlvbiAoYXJ5LCBjb21wYXJhdG9yKSB7XG4gIGRvUXVpY2tTb3J0KGFyeSwgY29tcGFyYXRvciwgMCwgYXJ5Lmxlbmd0aCAtIDEpO1xufTtcbiJdLCJuYW1lcyI6WyJzd2FwIiwiYXJ5IiwieCIsInkiLCJ0ZW1wIiwicmFuZG9tSW50SW5SYW5nZSIsImxvdyIsImhpZ2giLCJNYXRoIiwicm91bmQiLCJyYW5kb20iLCJkb1F1aWNrU29ydCIsImNvbXBhcmF0b3IiLCJwIiwiciIsInBpdm90SW5kZXgiLCJpIiwicGl2b3QiLCJqIiwicSIsImV4cG9ydHMiLCJxdWlja1NvcnQiLCJsZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/source-map/lib/quick-sort.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/source-map/lib/source-map-consumer.js":
/*!************************************************************!*\
  !*** ./node_modules/source-map/lib/source-map-consumer.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/* -*- Mode: js; js-indent-level: 2; -*- */ /*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */ var util = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/source-map/lib/util.js\");\nvar binarySearch = __webpack_require__(/*! ./binary-search */ \"(rsc)/./node_modules/source-map/lib/binary-search.js\");\nvar ArraySet = (__webpack_require__(/*! ./array-set */ \"(rsc)/./node_modules/source-map/lib/array-set.js\").ArraySet);\nvar base64VLQ = __webpack_require__(/*! ./base64-vlq */ \"(rsc)/./node_modules/source-map/lib/base64-vlq.js\");\nvar quickSort = (__webpack_require__(/*! ./quick-sort */ \"(rsc)/./node_modules/source-map/lib/quick-sort.js\").quickSort);\nfunction SourceMapConsumer(aSourceMap, aSourceMapURL) {\n    var sourceMap = aSourceMap;\n    if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n    }\n    return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);\n}\nSourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {\n    return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);\n};\n/**\n * The version of the source mapping spec that we are consuming.\n */ SourceMapConsumer.prototype._version = 3;\n// `__generatedMappings` and `__originalMappings` are arrays that hold the\n// parsed mapping coordinates from the source map's \"mappings\" attribute. They\n// are lazily instantiated, accessed via the `_generatedMappings` and\n// `_originalMappings` getters respectively, and we only parse the mappings\n// and create these arrays once queried for a source location. We jump through\n// these hoops because there can be many thousands of mappings, and parsing\n// them is expensive, so we only want to do it if we must.\n//\n// Each object in the arrays is of the form:\n//\n//     {\n//       generatedLine: The line number in the generated code,\n//       generatedColumn: The column number in the generated code,\n//       source: The path to the original source file that generated this\n//               chunk of code,\n//       originalLine: The line number in the original source that\n//                     corresponds to this chunk of generated code,\n//       originalColumn: The column number in the original source that\n//                       corresponds to this chunk of generated code,\n//       name: The name of the original symbol which generated this chunk of\n//             code.\n//     }\n//\n// All properties except for `generatedLine` and `generatedColumn` can be\n// `null`.\n//\n// `_generatedMappings` is ordered by the generated positions.\n//\n// `_originalMappings` is ordered by the original positions.\nSourceMapConsumer.prototype.__generatedMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, \"_generatedMappings\", {\n    configurable: true,\n    enumerable: true,\n    get: function() {\n        if (!this.__generatedMappings) {\n            this._parseMappings(this._mappings, this.sourceRoot);\n        }\n        return this.__generatedMappings;\n    }\n});\nSourceMapConsumer.prototype.__originalMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, \"_originalMappings\", {\n    configurable: true,\n    enumerable: true,\n    get: function() {\n        if (!this.__originalMappings) {\n            this._parseMappings(this._mappings, this.sourceRoot);\n        }\n        return this.__originalMappings;\n    }\n});\nSourceMapConsumer.prototype._charIsMappingSeparator = function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n    var c = aStr.charAt(index);\n    return c === \";\" || c === \",\";\n};\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */ SourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    throw new Error(\"Subclasses must implement _parseMappings\");\n};\nSourceMapConsumer.GENERATED_ORDER = 1;\nSourceMapConsumer.ORIGINAL_ORDER = 2;\nSourceMapConsumer.GREATEST_LOWER_BOUND = 1;\nSourceMapConsumer.LEAST_UPPER_BOUND = 2;\n/**\n * Iterate over each mapping between an original source/line/column and a\n * generated line/column in this source map.\n *\n * @param Function aCallback\n *        The function that is called with each mapping.\n * @param Object aContext\n *        Optional. If specified, this object will be the value of `this` every\n *        time that `aCallback` is called.\n * @param aOrder\n *        Either `SourceMapConsumer.GENERATED_ORDER` or\n *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n *        iterate over the mappings sorted by the generated file's line/column\n *        order or the original's source/line/column order, respectively. Defaults to\n *        `SourceMapConsumer.GENERATED_ORDER`.\n */ SourceMapConsumer.prototype.eachMapping = function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n    var context = aContext || null;\n    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n    var mappings;\n    switch(order){\n        case SourceMapConsumer.GENERATED_ORDER:\n            mappings = this._generatedMappings;\n            break;\n        case SourceMapConsumer.ORIGINAL_ORDER:\n            mappings = this._originalMappings;\n            break;\n        default:\n            throw new Error(\"Unknown order of iteration.\");\n    }\n    var sourceRoot = this.sourceRoot;\n    mappings.map(function(mapping) {\n        var source = mapping.source === null ? null : this._sources.at(mapping.source);\n        source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);\n        return {\n            source: source,\n            generatedLine: mapping.generatedLine,\n            generatedColumn: mapping.generatedColumn,\n            originalLine: mapping.originalLine,\n            originalColumn: mapping.originalColumn,\n            name: mapping.name === null ? null : this._names.at(mapping.name)\n        };\n    }, this).forEach(aCallback, context);\n};\n/**\n * Returns all generated line and column information for the original source,\n * line, and column provided. If no column is provided, returns all mappings\n * corresponding to a either the line we are searching for or the next\n * closest line that has any mappings. Otherwise, returns all mappings\n * corresponding to the given line and either the column we are searching for\n * or the next closest column that has any offsets.\n *\n * The only argument is an object with the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number is 1-based.\n *   - column: Optional. the column number in the original source.\n *    The column number is 0-based.\n *\n * and an array of objects is returned, each with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *    line number is 1-based.\n *   - column: The column number in the generated source, or null.\n *    The column number is 0-based.\n */ SourceMapConsumer.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n    var line = util.getArg(aArgs, \"line\");\n    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n    // returns the index of the closest mapping less than the needle. By\n    // setting needle.originalColumn to 0, we thus find the last mapping for\n    // the given line, provided such a mapping exists.\n    var needle = {\n        source: util.getArg(aArgs, \"source\"),\n        originalLine: line,\n        originalColumn: util.getArg(aArgs, \"column\", 0)\n    };\n    needle.source = this._findSourceIndex(needle.source);\n    if (needle.source < 0) {\n        return [];\n    }\n    var mappings = [];\n    var index = this._findMapping(needle, this._originalMappings, \"originalLine\", \"originalColumn\", util.compareByOriginalPositions, binarySearch.LEAST_UPPER_BOUND);\n    if (index >= 0) {\n        var mapping = this._originalMappings[index];\n        if (aArgs.column === undefined) {\n            var originalLine = mapping.originalLine;\n            // Iterate until either we run out of mappings, or we run into\n            // a mapping for a different line than the one we found. Since\n            // mappings are sorted, this is guaranteed to find all mappings for\n            // the line we found.\n            while(mapping && mapping.originalLine === originalLine){\n                mappings.push({\n                    line: util.getArg(mapping, \"generatedLine\", null),\n                    column: util.getArg(mapping, \"generatedColumn\", null),\n                    lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n                });\n                mapping = this._originalMappings[++index];\n            }\n        } else {\n            var originalColumn = mapping.originalColumn;\n            // Iterate until either we run out of mappings, or we run into\n            // a mapping for a different line than the one we were searching for.\n            // Since mappings are sorted, this is guaranteed to find all mappings for\n            // the line we are searching for.\n            while(mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn){\n                mappings.push({\n                    line: util.getArg(mapping, \"generatedLine\", null),\n                    column: util.getArg(mapping, \"generatedColumn\", null),\n                    lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n                });\n                mapping = this._originalMappings[++index];\n            }\n        }\n    }\n    return mappings;\n};\nexports.SourceMapConsumer = SourceMapConsumer;\n/**\n * A BasicSourceMapConsumer instance represents a parsed source map which we can\n * query for information about the original file positions by giving it a file\n * position in the generated source.\n *\n * The first parameter is the raw source map (either as a JSON string, or\n * already parsed to an object). According to the spec, source maps have the\n * following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - sources: An array of URLs to the original source files.\n *   - names: An array of identifiers which can be referrenced by individual mappings.\n *   - sourceRoot: Optional. The URL root from which all sources are relative.\n *   - sourcesContent: Optional. An array of contents of the original source files.\n *   - mappings: A string of base64 VLQs which contain the actual mappings.\n *   - file: Optional. The generated file this source map is associated with.\n *\n * Here is an example source map, taken from the source map spec[0]:\n *\n *     {\n *       version : 3,\n *       file: \"out.js\",\n *       sourceRoot : \"\",\n *       sources: [\"foo.js\", \"bar.js\"],\n *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n *       mappings: \"AA,AB;;ABCDE;\"\n *     }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n */ function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {\n    var sourceMap = aSourceMap;\n    if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n    }\n    var version = util.getArg(sourceMap, \"version\");\n    var sources = util.getArg(sourceMap, \"sources\");\n    // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n    // requires the array) to play nice here.\n    var names = util.getArg(sourceMap, \"names\", []);\n    var sourceRoot = util.getArg(sourceMap, \"sourceRoot\", null);\n    var sourcesContent = util.getArg(sourceMap, \"sourcesContent\", null);\n    var mappings = util.getArg(sourceMap, \"mappings\");\n    var file = util.getArg(sourceMap, \"file\", null);\n    // Once again, Sass deviates from the spec and supplies the version as a\n    // string rather than a number, so we use loose equality checking here.\n    if (version != this._version) {\n        throw new Error(\"Unsupported version: \" + version);\n    }\n    if (sourceRoot) {\n        sourceRoot = util.normalize(sourceRoot);\n    }\n    sources = sources.map(String)// Some source maps produce relative source paths like \"./foo.js\" instead of\n    // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n    // See bugzil.la/1090768.\n    .map(util.normalize)// Always ensure that absolute sources are internally stored relative to\n    // the source root, if the source root is absolute. Not doing this would\n    // be particularly problematic when the source root is a prefix of the\n    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.\n    .map(function(source) {\n        return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;\n    });\n    // Pass `true` below to allow duplicate names and sources. While source maps\n    // are intended to be compressed and deduplicated, the TypeScript compiler\n    // sometimes generates source maps with duplicates in them. See Github issue\n    // #72 and bugzil.la/889492.\n    this._names = ArraySet.fromArray(names.map(String), true);\n    this._sources = ArraySet.fromArray(sources, true);\n    this._absoluteSources = this._sources.toArray().map(function(s) {\n        return util.computeSourceURL(sourceRoot, s, aSourceMapURL);\n    });\n    this.sourceRoot = sourceRoot;\n    this.sourcesContent = sourcesContent;\n    this._mappings = mappings;\n    this._sourceMapURL = aSourceMapURL;\n    this.file = file;\n}\nBasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nBasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\n/**\n * Utility function to find the index of a source.  Returns -1 if not\n * found.\n */ BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {\n    var relativeSource = aSource;\n    if (this.sourceRoot != null) {\n        relativeSource = util.relative(this.sourceRoot, relativeSource);\n    }\n    if (this._sources.has(relativeSource)) {\n        return this._sources.indexOf(relativeSource);\n    }\n    // Maybe aSource is an absolute URL as returned by |sources|.  In\n    // this case we can't simply undo the transform.\n    var i;\n    for(i = 0; i < this._absoluteSources.length; ++i){\n        if (this._absoluteSources[i] == aSource) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Create a BasicSourceMapConsumer from a SourceMapGenerator.\n *\n * @param SourceMapGenerator aSourceMap\n *        The source map that will be consumed.\n * @param String aSourceMapURL\n *        The URL at which the source map can be found (optional)\n * @returns BasicSourceMapConsumer\n */ BasicSourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {\n    var smc = Object.create(BasicSourceMapConsumer.prototype);\n    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n    smc.sourceRoot = aSourceMap._sourceRoot;\n    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(), smc.sourceRoot);\n    smc.file = aSourceMap._file;\n    smc._sourceMapURL = aSourceMapURL;\n    smc._absoluteSources = smc._sources.toArray().map(function(s) {\n        return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);\n    });\n    // Because we are modifying the entries (by converting string sources and\n    // names to indices into the sources and names ArraySets), we have to make\n    // a copy of the entry or else bad things happen. Shared mutable state\n    // strikes again! See github issue #191.\n    var generatedMappings = aSourceMap._mappings.toArray().slice();\n    var destGeneratedMappings = smc.__generatedMappings = [];\n    var destOriginalMappings = smc.__originalMappings = [];\n    for(var i = 0, length = generatedMappings.length; i < length; i++){\n        var srcMapping = generatedMappings[i];\n        var destMapping = new Mapping;\n        destMapping.generatedLine = srcMapping.generatedLine;\n        destMapping.generatedColumn = srcMapping.generatedColumn;\n        if (srcMapping.source) {\n            destMapping.source = sources.indexOf(srcMapping.source);\n            destMapping.originalLine = srcMapping.originalLine;\n            destMapping.originalColumn = srcMapping.originalColumn;\n            if (srcMapping.name) {\n                destMapping.name = names.indexOf(srcMapping.name);\n            }\n            destOriginalMappings.push(destMapping);\n        }\n        destGeneratedMappings.push(destMapping);\n    }\n    quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n    return smc;\n};\n/**\n * The version of the source mapping spec that we are consuming.\n */ BasicSourceMapConsumer.prototype._version = 3;\n/**\n * The list of original sources.\n */ Object.defineProperty(BasicSourceMapConsumer.prototype, \"sources\", {\n    get: function() {\n        return this._absoluteSources.slice();\n    }\n});\n/**\n * Provide the JIT with a nice shape / hidden class.\n */ function Mapping() {\n    this.generatedLine = 0;\n    this.generatedColumn = 0;\n    this.source = null;\n    this.originalLine = null;\n    this.originalColumn = null;\n    this.name = null;\n}\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */ BasicSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    var generatedLine = 1;\n    var previousGeneratedColumn = 0;\n    var previousOriginalLine = 0;\n    var previousOriginalColumn = 0;\n    var previousSource = 0;\n    var previousName = 0;\n    var length = aStr.length;\n    var index = 0;\n    var cachedSegments = {};\n    var temp = {};\n    var originalMappings = [];\n    var generatedMappings = [];\n    var mapping, str, segment, end, value;\n    while(index < length){\n        if (aStr.charAt(index) === \";\") {\n            generatedLine++;\n            index++;\n            previousGeneratedColumn = 0;\n        } else if (aStr.charAt(index) === \",\") {\n            index++;\n        } else {\n            mapping = new Mapping();\n            mapping.generatedLine = generatedLine;\n            // Because each offset is encoded relative to the previous one,\n            // many segments often have the same encoding. We can exploit this\n            // fact by caching the parsed variable length fields of each segment,\n            // allowing us to avoid a second parse if we encounter the same\n            // segment again.\n            for(end = index; end < length; end++){\n                if (this._charIsMappingSeparator(aStr, end)) {\n                    break;\n                }\n            }\n            str = aStr.slice(index, end);\n            segment = cachedSegments[str];\n            if (segment) {\n                index += str.length;\n            } else {\n                segment = [];\n                while(index < end){\n                    base64VLQ.decode(aStr, index, temp);\n                    value = temp.value;\n                    index = temp.rest;\n                    segment.push(value);\n                }\n                if (segment.length === 2) {\n                    throw new Error(\"Found a source, but no line and column\");\n                }\n                if (segment.length === 3) {\n                    throw new Error(\"Found a source and line, but no column\");\n                }\n                cachedSegments[str] = segment;\n            }\n            // Generated column.\n            mapping.generatedColumn = previousGeneratedColumn + segment[0];\n            previousGeneratedColumn = mapping.generatedColumn;\n            if (segment.length > 1) {\n                // Original source.\n                mapping.source = previousSource + segment[1];\n                previousSource += segment[1];\n                // Original line.\n                mapping.originalLine = previousOriginalLine + segment[2];\n                previousOriginalLine = mapping.originalLine;\n                // Lines are stored 0-based\n                mapping.originalLine += 1;\n                // Original column.\n                mapping.originalColumn = previousOriginalColumn + segment[3];\n                previousOriginalColumn = mapping.originalColumn;\n                if (segment.length > 4) {\n                    // Original name.\n                    mapping.name = previousName + segment[4];\n                    previousName += segment[4];\n                }\n            }\n            generatedMappings.push(mapping);\n            if (typeof mapping.originalLine === \"number\") {\n                originalMappings.push(mapping);\n            }\n        }\n    }\n    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n    this.__generatedMappings = generatedMappings;\n    quickSort(originalMappings, util.compareByOriginalPositions);\n    this.__originalMappings = originalMappings;\n};\n/**\n * Find the mapping that best matches the hypothetical \"needle\" mapping that\n * we are searching for in the given \"haystack\" of mappings.\n */ BasicSourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {\n    // To return the position we are searching for, we must first find the\n    // mapping for the given position and then return the opposite position it\n    // points to. Because the mappings are sorted, we can use binary search to\n    // find the best mapping.\n    if (aNeedle[aLineName] <= 0) {\n        throw new TypeError(\"Line must be greater than or equal to 1, got \" + aNeedle[aLineName]);\n    }\n    if (aNeedle[aColumnName] < 0) {\n        throw new TypeError(\"Column must be greater than or equal to 0, got \" + aNeedle[aColumnName]);\n    }\n    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n};\n/**\n * Compute the last column for each generated mapping. The last column is\n * inclusive.\n */ BasicSourceMapConsumer.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans() {\n    for(var index = 0; index < this._generatedMappings.length; ++index){\n        var mapping = this._generatedMappings[index];\n        // Mappings do not contain a field for the last generated columnt. We\n        // can come up with an optimistic estimate, however, by assuming that\n        // mappings are contiguous (i.e. given two consecutive mappings, the\n        // first mapping ends where the second one starts).\n        if (index + 1 < this._generatedMappings.length) {\n            var nextMapping = this._generatedMappings[index + 1];\n            if (mapping.generatedLine === nextMapping.generatedLine) {\n                mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n                continue;\n            }\n        }\n        // The last mapping for each line spans the entire line.\n        mapping.lastGeneratedColumn = Infinity;\n    }\n};\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.  The line number\n *     is 1-based.\n *   - column: The column number in the generated source.  The column\n *     number is 0-based.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the original source, or null.  The\n *     column number is 0-based.\n *   - name: The original identifier, or null.\n */ BasicSourceMapConsumer.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n        generatedLine: util.getArg(aArgs, \"line\"),\n        generatedColumn: util.getArg(aArgs, \"column\")\n    };\n    var index = this._findMapping(needle, this._generatedMappings, \"generatedLine\", \"generatedColumn\", util.compareByGeneratedPositionsDeflated, util.getArg(aArgs, \"bias\", SourceMapConsumer.GREATEST_LOWER_BOUND));\n    if (index >= 0) {\n        var mapping = this._generatedMappings[index];\n        if (mapping.generatedLine === needle.generatedLine) {\n            var source = util.getArg(mapping, \"source\", null);\n            if (source !== null) {\n                source = this._sources.at(source);\n                source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);\n            }\n            var name = util.getArg(mapping, \"name\", null);\n            if (name !== null) {\n                name = this._names.at(name);\n            }\n            return {\n                source: source,\n                line: util.getArg(mapping, \"originalLine\", null),\n                column: util.getArg(mapping, \"originalColumn\", null),\n                name: name\n            };\n        }\n    }\n    return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n    };\n};\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */ BasicSourceMapConsumer.prototype.hasContentsOfAllSources = function BasicSourceMapConsumer_hasContentsOfAllSources() {\n    if (!this.sourcesContent) {\n        return false;\n    }\n    return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {\n        return sc == null;\n    });\n};\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */ BasicSourceMapConsumer.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    if (!this.sourcesContent) {\n        return null;\n    }\n    var index = this._findSourceIndex(aSource);\n    if (index >= 0) {\n        return this.sourcesContent[index];\n    }\n    var relativeSource = aSource;\n    if (this.sourceRoot != null) {\n        relativeSource = util.relative(this.sourceRoot, relativeSource);\n    }\n    var url;\n    if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {\n        // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n        // many users. We can help them out when they expect file:// URIs to\n        // behave like it would if they were running a local HTTP server. See\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n        var fileUriAbsPath = relativeSource.replace(/^file:\\/\\//, \"\");\n        if (url.scheme == \"file\" && this._sources.has(fileUriAbsPath)) {\n            return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];\n        }\n        if ((!url.path || url.path == \"/\") && this._sources.has(\"/\" + relativeSource)) {\n            return this.sourcesContent[this._sources.indexOf(\"/\" + relativeSource)];\n        }\n    }\n    // This function is used recursively from\n    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n    // don't want to throw if we can't find the source - we just want to\n    // return null, so we provide a flag to exit gracefully.\n    if (nullOnMissing) {\n        return null;\n    } else {\n        throw new Error('\"' + relativeSource + '\" is not in the SourceMap.');\n    }\n};\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number\n *     is 1-based.\n *   - column: The column number in the original source.  The column\n *     number is 0-based.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the generated source, or null.\n *     The column number is 0-based.\n */ BasicSourceMapConsumer.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor(aArgs) {\n    var source = util.getArg(aArgs, \"source\");\n    source = this._findSourceIndex(source);\n    if (source < 0) {\n        return {\n            line: null,\n            column: null,\n            lastColumn: null\n        };\n    }\n    var needle = {\n        source: source,\n        originalLine: util.getArg(aArgs, \"line\"),\n        originalColumn: util.getArg(aArgs, \"column\")\n    };\n    var index = this._findMapping(needle, this._originalMappings, \"originalLine\", \"originalColumn\", util.compareByOriginalPositions, util.getArg(aArgs, \"bias\", SourceMapConsumer.GREATEST_LOWER_BOUND));\n    if (index >= 0) {\n        var mapping = this._originalMappings[index];\n        if (mapping.source === needle.source) {\n            return {\n                line: util.getArg(mapping, \"generatedLine\", null),\n                column: util.getArg(mapping, \"generatedColumn\", null),\n                lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n            };\n        }\n    }\n    return {\n        line: null,\n        column: null,\n        lastColumn: null\n    };\n};\nexports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n/**\n * An IndexedSourceMapConsumer instance represents a parsed source map which\n * we can query for information. It differs from BasicSourceMapConsumer in\n * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\n * input.\n *\n * The first parameter is a raw source map (either as a JSON string, or already\n * parsed to an object). According to the spec for indexed source maps, they\n * have the following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - file: Optional. The generated file this source map is associated with.\n *   - sections: A list of section definitions.\n *\n * Each value under the \"sections\" field has two fields:\n *   - offset: The offset into the original specified at which this section\n *       begins to apply, defined as an object with a \"line\" and \"column\"\n *       field.\n *   - map: A source map definition. This source map could also be indexed,\n *       but doesn't have to be.\n *\n * Instead of the \"map\" field, it's also possible to have a \"url\" field\n * specifying a URL to retrieve a source map from, but that's currently\n * unsupported.\n *\n * Here's an example source map, taken from the source map spec[0], but\n * modified to omit a section which uses the \"url\" field.\n *\n *  {\n *    version : 3,\n *    file: \"app.js\",\n *    sections: [{\n *      offset: {line:100, column:10},\n *      map: {\n *        version : 3,\n *        file: \"section.js\",\n *        sources: [\"foo.js\", \"bar.js\"],\n *        names: [\"src\", \"maps\", \"are\", \"fun\"],\n *        mappings: \"AAAA,E;;ABCDE;\"\n *      }\n *    }],\n *  }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\n */ function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {\n    var sourceMap = aSourceMap;\n    if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n    }\n    var version = util.getArg(sourceMap, \"version\");\n    var sections = util.getArg(sourceMap, \"sections\");\n    if (version != this._version) {\n        throw new Error(\"Unsupported version: \" + version);\n    }\n    this._sources = new ArraySet();\n    this._names = new ArraySet();\n    var lastOffset = {\n        line: -1,\n        column: 0\n    };\n    this._sections = sections.map(function(s) {\n        if (s.url) {\n            // The url field will require support for asynchronicity.\n            // See https://github.com/mozilla/source-map/issues/16\n            throw new Error(\"Support for url field in sections not implemented.\");\n        }\n        var offset = util.getArg(s, \"offset\");\n        var offsetLine = util.getArg(offset, \"line\");\n        var offsetColumn = util.getArg(offset, \"column\");\n        if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {\n            throw new Error(\"Section offsets must be ordered and non-overlapping.\");\n        }\n        lastOffset = offset;\n        return {\n            generatedOffset: {\n                // The offset fields are 0-based, but we use 1-based indices when\n                // encoding/decoding from VLQ.\n                generatedLine: offsetLine + 1,\n                generatedColumn: offsetColumn + 1\n            },\n            consumer: new SourceMapConsumer(util.getArg(s, \"map\"), aSourceMapURL)\n        };\n    });\n}\nIndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nIndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;\n/**\n * The version of the source mapping spec that we are consuming.\n */ IndexedSourceMapConsumer.prototype._version = 3;\n/**\n * The list of original sources.\n */ Object.defineProperty(IndexedSourceMapConsumer.prototype, \"sources\", {\n    get: function() {\n        var sources = [];\n        for(var i = 0; i < this._sections.length; i++){\n            for(var j = 0; j < this._sections[i].consumer.sources.length; j++){\n                sources.push(this._sections[i].consumer.sources[j]);\n            }\n        }\n        return sources;\n    }\n});\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.  The line number\n *     is 1-based.\n *   - column: The column number in the generated source.  The column\n *     number is 0-based.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the original source, or null.  The\n *     column number is 0-based.\n *   - name: The original identifier, or null.\n */ IndexedSourceMapConsumer.prototype.originalPositionFor = function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n        generatedLine: util.getArg(aArgs, \"line\"),\n        generatedColumn: util.getArg(aArgs, \"column\")\n    };\n    // Find the section containing the generated position we're trying to map\n    // to an original position.\n    var sectionIndex = binarySearch.search(needle, this._sections, function(needle, section) {\n        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;\n        if (cmp) {\n            return cmp;\n        }\n        return needle.generatedColumn - section.generatedOffset.generatedColumn;\n    });\n    var section = this._sections[sectionIndex];\n    if (!section) {\n        return {\n            source: null,\n            line: null,\n            column: null,\n            name: null\n        };\n    }\n    return section.consumer.originalPositionFor({\n        line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),\n        column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n        bias: aArgs.bias\n    });\n};\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */ IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n    return this._sections.every(function(s) {\n        return s.consumer.hasContentsOfAllSources();\n    });\n};\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */ IndexedSourceMapConsumer.prototype.sourceContentFor = function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    for(var i = 0; i < this._sections.length; i++){\n        var section = this._sections[i];\n        var content = section.consumer.sourceContentFor(aSource, true);\n        if (content) {\n            return content;\n        }\n    }\n    if (nullOnMissing) {\n        return null;\n    } else {\n        throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n    }\n};\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number\n *     is 1-based.\n *   - column: The column number in the original source.  The column\n *     number is 0-based.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *     line number is 1-based. \n *   - column: The column number in the generated source, or null.\n *     The column number is 0-based.\n */ IndexedSourceMapConsumer.prototype.generatedPositionFor = function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n    for(var i = 0; i < this._sections.length; i++){\n        var section = this._sections[i];\n        // Only consider this section if the requested source is in the list of\n        // sources of the consumer.\n        if (section.consumer._findSourceIndex(util.getArg(aArgs, \"source\")) === -1) {\n            continue;\n        }\n        var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n        if (generatedPosition) {\n            var ret = {\n                line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),\n                column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)\n            };\n            return ret;\n        }\n    }\n    return {\n        line: null,\n        column: null\n    };\n};\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */ IndexedSourceMapConsumer.prototype._parseMappings = function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    this.__generatedMappings = [];\n    this.__originalMappings = [];\n    for(var i = 0; i < this._sections.length; i++){\n        var section = this._sections[i];\n        var sectionMappings = section.consumer._generatedMappings;\n        for(var j = 0; j < sectionMappings.length; j++){\n            var mapping = sectionMappings[j];\n            var source = section.consumer._sources.at(mapping.source);\n            source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);\n            this._sources.add(source);\n            source = this._sources.indexOf(source);\n            var name = null;\n            if (mapping.name) {\n                name = section.consumer._names.at(mapping.name);\n                this._names.add(name);\n                name = this._names.indexOf(name);\n            }\n            // The mappings coming from the consumer for the section have\n            // generated positions relative to the start of the section, so we\n            // need to offset them to be relative to the start of the concatenated\n            // generated file.\n            var adjustedMapping = {\n                source: source,\n                generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),\n                generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n                originalLine: mapping.originalLine,\n                originalColumn: mapping.originalColumn,\n                name: name\n            };\n            this.__generatedMappings.push(adjustedMapping);\n            if (typeof adjustedMapping.originalLine === \"number\") {\n                this.__originalMappings.push(adjustedMapping);\n            }\n        }\n    }\n    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n    quickSort(this.__originalMappings, util.compareByOriginalPositions);\n};\nexports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/source-map/lib/source-map-consumer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/source-map/lib/source-map-generator.js":
/*!*************************************************************!*\
  !*** ./node_modules/source-map/lib/source-map-generator.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/* -*- Mode: js; js-indent-level: 2; -*- */ /*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */ var base64VLQ = __webpack_require__(/*! ./base64-vlq */ \"(rsc)/./node_modules/source-map/lib/base64-vlq.js\");\nvar util = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/source-map/lib/util.js\");\nvar ArraySet = (__webpack_require__(/*! ./array-set */ \"(rsc)/./node_modules/source-map/lib/array-set.js\").ArraySet);\nvar MappingList = (__webpack_require__(/*! ./mapping-list */ \"(rsc)/./node_modules/source-map/lib/mapping-list.js\").MappingList);\n/**\n * An instance of the SourceMapGenerator represents a source map which is\n * being built incrementally. You may pass an object with the following\n * properties:\n *\n *   - file: The filename of the generated source.\n *   - sourceRoot: A root for all relative URLs in this source map.\n */ function SourceMapGenerator(aArgs) {\n    if (!aArgs) {\n        aArgs = {};\n    }\n    this._file = util.getArg(aArgs, \"file\", null);\n    this._sourceRoot = util.getArg(aArgs, \"sourceRoot\", null);\n    this._skipValidation = util.getArg(aArgs, \"skipValidation\", false);\n    this._sources = new ArraySet();\n    this._names = new ArraySet();\n    this._mappings = new MappingList();\n    this._sourcesContents = null;\n}\nSourceMapGenerator.prototype._version = 3;\n/**\n * Creates a new SourceMapGenerator based on a SourceMapConsumer\n *\n * @param aSourceMapConsumer The SourceMap.\n */ SourceMapGenerator.fromSourceMap = function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {\n    var sourceRoot = aSourceMapConsumer.sourceRoot;\n    var generator = new SourceMapGenerator({\n        file: aSourceMapConsumer.file,\n        sourceRoot: sourceRoot\n    });\n    aSourceMapConsumer.eachMapping(function(mapping) {\n        var newMapping = {\n            generated: {\n                line: mapping.generatedLine,\n                column: mapping.generatedColumn\n            }\n        };\n        if (mapping.source != null) {\n            newMapping.source = mapping.source;\n            if (sourceRoot != null) {\n                newMapping.source = util.relative(sourceRoot, newMapping.source);\n            }\n            newMapping.original = {\n                line: mapping.originalLine,\n                column: mapping.originalColumn\n            };\n            if (mapping.name != null) {\n                newMapping.name = mapping.name;\n            }\n        }\n        generator.addMapping(newMapping);\n    });\n    aSourceMapConsumer.sources.forEach(function(sourceFile) {\n        var sourceRelative = sourceFile;\n        if (sourceRoot !== null) {\n            sourceRelative = util.relative(sourceRoot, sourceFile);\n        }\n        if (!generator._sources.has(sourceRelative)) {\n            generator._sources.add(sourceRelative);\n        }\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n            generator.setSourceContent(sourceFile, content);\n        }\n    });\n    return generator;\n};\n/**\n * Add a single mapping from original source line and column to the generated\n * source's line and column for this source map being created. The mapping\n * object should have the following properties:\n *\n *   - generated: An object with the generated line and column positions.\n *   - original: An object with the original line and column positions.\n *   - source: The original source file (relative to the sourceRoot).\n *   - name: An optional original token name for this mapping.\n */ SourceMapGenerator.prototype.addMapping = function SourceMapGenerator_addMapping(aArgs) {\n    var generated = util.getArg(aArgs, \"generated\");\n    var original = util.getArg(aArgs, \"original\", null);\n    var source = util.getArg(aArgs, \"source\", null);\n    var name = util.getArg(aArgs, \"name\", null);\n    if (!this._skipValidation) {\n        this._validateMapping(generated, original, source, name);\n    }\n    if (source != null) {\n        source = String(source);\n        if (!this._sources.has(source)) {\n            this._sources.add(source);\n        }\n    }\n    if (name != null) {\n        name = String(name);\n        if (!this._names.has(name)) {\n            this._names.add(name);\n        }\n    }\n    this._mappings.add({\n        generatedLine: generated.line,\n        generatedColumn: generated.column,\n        originalLine: original != null && original.line,\n        originalColumn: original != null && original.column,\n        source: source,\n        name: name\n    });\n};\n/**\n * Set the source content for a source file.\n */ SourceMapGenerator.prototype.setSourceContent = function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {\n    var source = aSourceFile;\n    if (this._sourceRoot != null) {\n        source = util.relative(this._sourceRoot, source);\n    }\n    if (aSourceContent != null) {\n        // Add the source content to the _sourcesContents map.\n        // Create a new _sourcesContents map if the property is null.\n        if (!this._sourcesContents) {\n            this._sourcesContents = Object.create(null);\n        }\n        this._sourcesContents[util.toSetString(source)] = aSourceContent;\n    } else if (this._sourcesContents) {\n        // Remove the source file from the _sourcesContents map.\n        // If the _sourcesContents map is empty, set the property to null.\n        delete this._sourcesContents[util.toSetString(source)];\n        if (Object.keys(this._sourcesContents).length === 0) {\n            this._sourcesContents = null;\n        }\n    }\n};\n/**\n * Applies the mappings of a sub-source-map for a specific source file to the\n * source map being generated. Each mapping to the supplied source file is\n * rewritten using the supplied source map. Note: The resolution for the\n * resulting mappings is the minimium of this map and the supplied map.\n *\n * @param aSourceMapConsumer The source map to be applied.\n * @param aSourceFile Optional. The filename of the source file.\n *        If omitted, SourceMapConsumer's file property will be used.\n * @param aSourceMapPath Optional. The dirname of the path to the source map\n *        to be applied. If relative, it is relative to the SourceMapConsumer.\n *        This parameter is needed when the two source maps aren't in the same\n *        directory, and the source map to be applied contains relative source\n *        paths. If so, those relative source paths need to be rewritten\n *        relative to the SourceMapGenerator.\n */ SourceMapGenerator.prototype.applySourceMap = function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\n    var sourceFile = aSourceFile;\n    // If aSourceFile is omitted, we will use the file property of the SourceMap\n    if (aSourceFile == null) {\n        if (aSourceMapConsumer.file == null) {\n            throw new Error(\"SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, \" + 'or the source map\\'s \"file\" property. Both were omitted.');\n        }\n        sourceFile = aSourceMapConsumer.file;\n    }\n    var sourceRoot = this._sourceRoot;\n    // Make \"sourceFile\" relative if an absolute Url is passed.\n    if (sourceRoot != null) {\n        sourceFile = util.relative(sourceRoot, sourceFile);\n    }\n    // Applying the SourceMap can add and remove items from the sources and\n    // the names array.\n    var newSources = new ArraySet();\n    var newNames = new ArraySet();\n    // Find mappings for the \"sourceFile\"\n    this._mappings.unsortedForEach(function(mapping) {\n        if (mapping.source === sourceFile && mapping.originalLine != null) {\n            // Check if it can be mapped by the source map, then update the mapping.\n            var original = aSourceMapConsumer.originalPositionFor({\n                line: mapping.originalLine,\n                column: mapping.originalColumn\n            });\n            if (original.source != null) {\n                // Copy mapping\n                mapping.source = original.source;\n                if (aSourceMapPath != null) {\n                    mapping.source = util.join(aSourceMapPath, mapping.source);\n                }\n                if (sourceRoot != null) {\n                    mapping.source = util.relative(sourceRoot, mapping.source);\n                }\n                mapping.originalLine = original.line;\n                mapping.originalColumn = original.column;\n                if (original.name != null) {\n                    mapping.name = original.name;\n                }\n            }\n        }\n        var source = mapping.source;\n        if (source != null && !newSources.has(source)) {\n            newSources.add(source);\n        }\n        var name = mapping.name;\n        if (name != null && !newNames.has(name)) {\n            newNames.add(name);\n        }\n    }, this);\n    this._sources = newSources;\n    this._names = newNames;\n    // Copy sourcesContents of applied map.\n    aSourceMapConsumer.sources.forEach(function(sourceFile) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n            if (aSourceMapPath != null) {\n                sourceFile = util.join(aSourceMapPath, sourceFile);\n            }\n            if (sourceRoot != null) {\n                sourceFile = util.relative(sourceRoot, sourceFile);\n            }\n            this.setSourceContent(sourceFile, content);\n        }\n    }, this);\n};\n/**\n * A mapping can have one of the three levels of data:\n *\n *   1. Just the generated position.\n *   2. The Generated position, original position, and original source.\n *   3. Generated and original position, original source, as well as a name\n *      token.\n *\n * To maintain consistency, we validate that any new mapping being added falls\n * in to one of these categories.\n */ SourceMapGenerator.prototype._validateMapping = function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {\n    // When aOriginal is truthy but has empty values for .line and .column,\n    // it is most likely a programmer error. In this case we throw a very\n    // specific error message to try to guide them the right way.\n    // For example: https://github.com/Polymer/polymer-bundler/pull/519\n    if (aOriginal && typeof aOriginal.line !== \"number\" && typeof aOriginal.column !== \"number\") {\n        throw new Error(\"original.line and original.column are not numbers -- you probably meant to omit \" + \"the original mapping entirely and only map the generated position. If so, pass \" + \"null for the original mapping instead of an object with empty or null values.\");\n    }\n    if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {\n        // Case 1.\n        return;\n    } else if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated && aOriginal && \"line\" in aOriginal && \"column\" in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {\n        // Cases 2 and 3.\n        return;\n    } else {\n        throw new Error(\"Invalid mapping: \" + JSON.stringify({\n            generated: aGenerated,\n            source: aSource,\n            original: aOriginal,\n            name: aName\n        }));\n    }\n};\n/**\n * Serialize the accumulated mappings in to the stream of base 64 VLQs\n * specified by the source map format.\n */ SourceMapGenerator.prototype._serializeMappings = function SourceMapGenerator_serializeMappings() {\n    var previousGeneratedColumn = 0;\n    var previousGeneratedLine = 1;\n    var previousOriginalColumn = 0;\n    var previousOriginalLine = 0;\n    var previousName = 0;\n    var previousSource = 0;\n    var result = \"\";\n    var next;\n    var mapping;\n    var nameIdx;\n    var sourceIdx;\n    var mappings = this._mappings.toArray();\n    for(var i = 0, len = mappings.length; i < len; i++){\n        mapping = mappings[i];\n        next = \"\";\n        if (mapping.generatedLine !== previousGeneratedLine) {\n            previousGeneratedColumn = 0;\n            while(mapping.generatedLine !== previousGeneratedLine){\n                next += \";\";\n                previousGeneratedLine++;\n            }\n        } else {\n            if (i > 0) {\n                if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {\n                    continue;\n                }\n                next += \",\";\n            }\n        }\n        next += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);\n        previousGeneratedColumn = mapping.generatedColumn;\n        if (mapping.source != null) {\n            sourceIdx = this._sources.indexOf(mapping.source);\n            next += base64VLQ.encode(sourceIdx - previousSource);\n            previousSource = sourceIdx;\n            // lines are stored 0-based in SourceMap spec version 3\n            next += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);\n            previousOriginalLine = mapping.originalLine - 1;\n            next += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);\n            previousOriginalColumn = mapping.originalColumn;\n            if (mapping.name != null) {\n                nameIdx = this._names.indexOf(mapping.name);\n                next += base64VLQ.encode(nameIdx - previousName);\n                previousName = nameIdx;\n            }\n        }\n        result += next;\n    }\n    return result;\n};\nSourceMapGenerator.prototype._generateSourcesContent = function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {\n    return aSources.map(function(source) {\n        if (!this._sourcesContents) {\n            return null;\n        }\n        if (aSourceRoot != null) {\n            source = util.relative(aSourceRoot, source);\n        }\n        var key = util.toSetString(source);\n        return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;\n    }, this);\n};\n/**\n * Externalize the source map.\n */ SourceMapGenerator.prototype.toJSON = function SourceMapGenerator_toJSON() {\n    var map = {\n        version: this._version,\n        sources: this._sources.toArray(),\n        names: this._names.toArray(),\n        mappings: this._serializeMappings()\n    };\n    if (this._file != null) {\n        map.file = this._file;\n    }\n    if (this._sourceRoot != null) {\n        map.sourceRoot = this._sourceRoot;\n    }\n    if (this._sourcesContents) {\n        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\n    }\n    return map;\n};\n/**\n * Render the source map being generated to a string.\n */ SourceMapGenerator.prototype.toString = function SourceMapGenerator_toString() {\n    return JSON.stringify(this.toJSON());\n};\nexports.SourceMapGenerator = SourceMapGenerator;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/source-map/lib/source-map-generator.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/source-map/lib/source-node.js":
/*!****************************************************!*\
  !*** ./node_modules/source-map/lib/source-node.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/* -*- Mode: js; js-indent-level: 2; -*- */ /*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */ var SourceMapGenerator = (__webpack_require__(/*! ./source-map-generator */ \"(rsc)/./node_modules/source-map/lib/source-map-generator.js\").SourceMapGenerator);\nvar util = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/source-map/lib/util.js\");\n// Matches a Windows-style `\\r\\n` newline or a `\\n` newline used by all other\n// operating systems these days (capturing the result).\nvar REGEX_NEWLINE = /(\\r?\\n)/;\n// Newline character code for charCodeAt() comparisons\nvar NEWLINE_CODE = 10;\n// Private symbol for identifying `SourceNode`s when multiple versions of\n// the source-map library are loaded. This MUST NOT CHANGE across\n// versions!\nvar isSourceNode = \"$$$isSourceNode$$$\";\n/**\n * SourceNodes provide a way to abstract over interpolating/concatenating\n * snippets of generated JavaScript source code while maintaining the line and\n * column information associated with the original source code.\n *\n * @param aLine The original line number.\n * @param aColumn The original column number.\n * @param aSource The original source's filename.\n * @param aChunks Optional. An array of strings which are snippets of\n *        generated JS, or other SourceNodes.\n * @param aName The original identifier.\n */ function SourceNode(aLine, aColumn, aSource, aChunks, aName) {\n    this.children = [];\n    this.sourceContents = {};\n    this.line = aLine == null ? null : aLine;\n    this.column = aColumn == null ? null : aColumn;\n    this.source = aSource == null ? null : aSource;\n    this.name = aName == null ? null : aName;\n    this[isSourceNode] = true;\n    if (aChunks != null) this.add(aChunks);\n}\n/**\n * Creates a SourceNode from generated code and a SourceMapConsumer.\n *\n * @param aGeneratedCode The generated code\n * @param aSourceMapConsumer The SourceMap for the generated code\n * @param aRelativePath Optional. The path that relative sources in the\n *        SourceMapConsumer should be relative to.\n */ SourceNode.fromStringWithSourceMap = function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n    // The SourceNode we want to fill with the generated code\n    // and the SourceMap\n    var node = new SourceNode();\n    // All even indices of this array are one line of the generated code,\n    // while all odd indices are the newlines between two adjacent lines\n    // (since `REGEX_NEWLINE` captures its match).\n    // Processed fragments are accessed by calling `shiftNextLine`.\n    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n    var remainingLinesIndex = 0;\n    var shiftNextLine = function() {\n        var lineContents = getNextLine();\n        // The last line of a file might not have a newline.\n        var newLine = getNextLine() || \"\";\n        return lineContents + newLine;\n        function getNextLine() {\n            return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : undefined;\n        }\n    };\n    // We need to remember the position of \"remainingLines\"\n    var lastGeneratedLine = 1, lastGeneratedColumn = 0;\n    // The generate SourceNodes we need a code range.\n    // To extract it current and last mapping is used.\n    // Here we store the last mapping.\n    var lastMapping = null;\n    aSourceMapConsumer.eachMapping(function(mapping) {\n        if (lastMapping !== null) {\n            // We add the code from \"lastMapping\" to \"mapping\":\n            // First check if there is a new line in between.\n            if (lastGeneratedLine < mapping.generatedLine) {\n                // Associate first line with \"lastMapping\"\n                addMappingWithCode(lastMapping, shiftNextLine());\n                lastGeneratedLine++;\n                lastGeneratedColumn = 0;\n            // The remaining code is added without mapping\n            } else {\n                // There is no new line in between.\n                // Associate the code between \"lastGeneratedColumn\" and\n                // \"mapping.generatedColumn\" with \"lastMapping\"\n                var nextLine = remainingLines[remainingLinesIndex] || \"\";\n                var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);\n                remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);\n                lastGeneratedColumn = mapping.generatedColumn;\n                addMappingWithCode(lastMapping, code);\n                // No more remaining code, continue\n                lastMapping = mapping;\n                return;\n            }\n        }\n        // We add the generated code until the first mapping\n        // to the SourceNode without any mapping.\n        // Each line is added as separate string.\n        while(lastGeneratedLine < mapping.generatedLine){\n            node.add(shiftNextLine());\n            lastGeneratedLine++;\n        }\n        if (lastGeneratedColumn < mapping.generatedColumn) {\n            var nextLine = remainingLines[remainingLinesIndex] || \"\";\n            node.add(nextLine.substr(0, mapping.generatedColumn));\n            remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);\n            lastGeneratedColumn = mapping.generatedColumn;\n        }\n        lastMapping = mapping;\n    }, this);\n    // We have processed all mappings.\n    if (remainingLinesIndex < remainingLines.length) {\n        if (lastMapping) {\n            // Associate the remaining code in the current line with \"lastMapping\"\n            addMappingWithCode(lastMapping, shiftNextLine());\n        }\n        // and add the remaining lines without any mapping\n        node.add(remainingLines.splice(remainingLinesIndex).join(\"\"));\n    }\n    // Copy sourcesContent into SourceNode\n    aSourceMapConsumer.sources.forEach(function(sourceFile) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n            if (aRelativePath != null) {\n                sourceFile = util.join(aRelativePath, sourceFile);\n            }\n            node.setSourceContent(sourceFile, content);\n        }\n    });\n    return node;\n    function addMappingWithCode(mapping, code) {\n        if (mapping === null || mapping.source === undefined) {\n            node.add(code);\n        } else {\n            var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;\n            node.add(new SourceNode(mapping.originalLine, mapping.originalColumn, source, code, mapping.name));\n        }\n    }\n};\n/**\n * Add a chunk of generated JS to this source node.\n *\n * @param aChunk A string snippet of generated JS code, another instance of\n *        SourceNode, or an array where each member is one of those things.\n */ SourceNode.prototype.add = function SourceNode_add(aChunk) {\n    if (Array.isArray(aChunk)) {\n        aChunk.forEach(function(chunk) {\n            this.add(chunk);\n        }, this);\n    } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n        if (aChunk) {\n            this.children.push(aChunk);\n        }\n    } else {\n        throw new TypeError(\"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk);\n    }\n    return this;\n};\n/**\n * Add a chunk of generated JS to the beginning of this source node.\n *\n * @param aChunk A string snippet of generated JS code, another instance of\n *        SourceNode, or an array where each member is one of those things.\n */ SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {\n    if (Array.isArray(aChunk)) {\n        for(var i = aChunk.length - 1; i >= 0; i--){\n            this.prepend(aChunk[i]);\n        }\n    } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n        this.children.unshift(aChunk);\n    } else {\n        throw new TypeError(\"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk);\n    }\n    return this;\n};\n/**\n * Walk over the tree of JS snippets in this node and its children. The\n * walking function is called once for each snippet of JS and is passed that\n * snippet and the its original associated source's line/column location.\n *\n * @param aFn The traversal function.\n */ SourceNode.prototype.walk = function SourceNode_walk(aFn) {\n    var chunk;\n    for(var i = 0, len = this.children.length; i < len; i++){\n        chunk = this.children[i];\n        if (chunk[isSourceNode]) {\n            chunk.walk(aFn);\n        } else {\n            if (chunk !== \"\") {\n                aFn(chunk, {\n                    source: this.source,\n                    line: this.line,\n                    column: this.column,\n                    name: this.name\n                });\n            }\n        }\n    }\n};\n/**\n * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between\n * each of `this.children`.\n *\n * @param aSep The separator.\n */ SourceNode.prototype.join = function SourceNode_join(aSep) {\n    var newChildren;\n    var i;\n    var len = this.children.length;\n    if (len > 0) {\n        newChildren = [];\n        for(i = 0; i < len - 1; i++){\n            newChildren.push(this.children[i]);\n            newChildren.push(aSep);\n        }\n        newChildren.push(this.children[i]);\n        this.children = newChildren;\n    }\n    return this;\n};\n/**\n * Call String.prototype.replace on the very right-most source snippet. Useful\n * for trimming whitespace from the end of a source node, etc.\n *\n * @param aPattern The pattern to replace.\n * @param aReplacement The thing to replace the pattern with.\n */ SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {\n    var lastChild = this.children[this.children.length - 1];\n    if (lastChild[isSourceNode]) {\n        lastChild.replaceRight(aPattern, aReplacement);\n    } else if (typeof lastChild === \"string\") {\n        this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n    } else {\n        this.children.push(\"\".replace(aPattern, aReplacement));\n    }\n    return this;\n};\n/**\n * Set the source content for a source file. This will be added to the SourceMapGenerator\n * in the sourcesContent field.\n *\n * @param aSourceFile The filename of the source file\n * @param aSourceContent The content of the source file\n */ SourceNode.prototype.setSourceContent = function SourceNode_setSourceContent(aSourceFile, aSourceContent) {\n    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n};\n/**\n * Walk over the tree of SourceNodes. The walking function is called for each\n * source file content and is passed the filename and source content.\n *\n * @param aFn The traversal function.\n */ SourceNode.prototype.walkSourceContents = function SourceNode_walkSourceContents(aFn) {\n    for(var i = 0, len = this.children.length; i < len; i++){\n        if (this.children[i][isSourceNode]) {\n            this.children[i].walkSourceContents(aFn);\n        }\n    }\n    var sources = Object.keys(this.sourceContents);\n    for(var i = 0, len = sources.length; i < len; i++){\n        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n    }\n};\n/**\n * Return the string representation of this source node. Walks over the tree\n * and concatenates all the various snippets together to one string.\n */ SourceNode.prototype.toString = function SourceNode_toString() {\n    var str = \"\";\n    this.walk(function(chunk) {\n        str += chunk;\n    });\n    return str;\n};\n/**\n * Returns the string representation of this source node along with a source\n * map.\n */ SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {\n    var generated = {\n        code: \"\",\n        line: 1,\n        column: 0\n    };\n    var map = new SourceMapGenerator(aArgs);\n    var sourceMappingActive = false;\n    var lastOriginalSource = null;\n    var lastOriginalLine = null;\n    var lastOriginalColumn = null;\n    var lastOriginalName = null;\n    this.walk(function(chunk, original) {\n        generated.code += chunk;\n        if (original.source !== null && original.line !== null && original.column !== null) {\n            if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {\n                map.addMapping({\n                    source: original.source,\n                    original: {\n                        line: original.line,\n                        column: original.column\n                    },\n                    generated: {\n                        line: generated.line,\n                        column: generated.column\n                    },\n                    name: original.name\n                });\n            }\n            lastOriginalSource = original.source;\n            lastOriginalLine = original.line;\n            lastOriginalColumn = original.column;\n            lastOriginalName = original.name;\n            sourceMappingActive = true;\n        } else if (sourceMappingActive) {\n            map.addMapping({\n                generated: {\n                    line: generated.line,\n                    column: generated.column\n                }\n            });\n            lastOriginalSource = null;\n            sourceMappingActive = false;\n        }\n        for(var idx = 0, length = chunk.length; idx < length; idx++){\n            if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n                generated.line++;\n                generated.column = 0;\n                // Mappings end at eol\n                if (idx + 1 === length) {\n                    lastOriginalSource = null;\n                    sourceMappingActive = false;\n                } else if (sourceMappingActive) {\n                    map.addMapping({\n                        source: original.source,\n                        original: {\n                            line: original.line,\n                            column: original.column\n                        },\n                        generated: {\n                            line: generated.line,\n                            column: generated.column\n                        },\n                        name: original.name\n                    });\n                }\n            } else {\n                generated.column++;\n            }\n        }\n    });\n    this.walkSourceContents(function(sourceFile, sourceContent) {\n        map.setSourceContent(sourceFile, sourceContent);\n    });\n    return {\n        code: generated.code,\n        map: map\n    };\n};\nexports.SourceNode = SourceNode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/source-map/lib/source-node.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/source-map/lib/util.js":
/*!*********************************************!*\
  !*** ./node_modules/source-map/lib/util.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/* -*- Mode: js; js-indent-level: 2; -*- */ /*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */ /**\n * This is a helper function for getting values from parameter/options\n * objects.\n *\n * @param args The object we are extracting values from\n * @param name The name of the property we are getting.\n * @param defaultValue An optional value to return if the property is missing\n * from the object. If this is not specified and the property is missing, an\n * error will be thrown.\n */ function getArg(aArgs, aName, aDefaultValue) {\n    if (aName in aArgs) {\n        return aArgs[aName];\n    } else if (arguments.length === 3) {\n        return aDefaultValue;\n    } else {\n        throw new Error('\"' + aName + '\" is a required argument.');\n    }\n}\nexports.getArg = getArg;\nvar urlRegexp = /^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.-]*)(?::(\\d+))?(.*)$/;\nvar dataUrlRegexp = /^data:.+\\,.+$/;\nfunction urlParse(aUrl) {\n    var match = aUrl.match(urlRegexp);\n    if (!match) {\n        return null;\n    }\n    return {\n        scheme: match[1],\n        auth: match[2],\n        host: match[3],\n        port: match[4],\n        path: match[5]\n    };\n}\nexports.urlParse = urlParse;\nfunction urlGenerate(aParsedUrl) {\n    var url = \"\";\n    if (aParsedUrl.scheme) {\n        url += aParsedUrl.scheme + \":\";\n    }\n    url += \"//\";\n    if (aParsedUrl.auth) {\n        url += aParsedUrl.auth + \"@\";\n    }\n    if (aParsedUrl.host) {\n        url += aParsedUrl.host;\n    }\n    if (aParsedUrl.port) {\n        url += \":\" + aParsedUrl.port;\n    }\n    if (aParsedUrl.path) {\n        url += aParsedUrl.path;\n    }\n    return url;\n}\nexports.urlGenerate = urlGenerate;\n/**\n * Normalizes a path, or the path portion of a URL:\n *\n * - Replaces consecutive slashes with one slash.\n * - Removes unnecessary '.' parts.\n * - Removes unnecessary '<dir>/..' parts.\n *\n * Based on code in the Node.js 'path' core module.\n *\n * @param aPath The path or url to normalize.\n */ function normalize(aPath) {\n    var path = aPath;\n    var url = urlParse(aPath);\n    if (url) {\n        if (!url.path) {\n            return aPath;\n        }\n        path = url.path;\n    }\n    var isAbsolute = exports.isAbsolute(path);\n    var parts = path.split(/\\/+/);\n    for(var part, up = 0, i = parts.length - 1; i >= 0; i--){\n        part = parts[i];\n        if (part === \".\") {\n            parts.splice(i, 1);\n        } else if (part === \"..\") {\n            up++;\n        } else if (up > 0) {\n            if (part === \"\") {\n                // The first part is blank if the path is absolute. Trying to go\n                // above the root is a no-op. Therefore we can remove all '..' parts\n                // directly after the root.\n                parts.splice(i + 1, up);\n                up = 0;\n            } else {\n                parts.splice(i, 2);\n                up--;\n            }\n        }\n    }\n    path = parts.join(\"/\");\n    if (path === \"\") {\n        path = isAbsolute ? \"/\" : \".\";\n    }\n    if (url) {\n        url.path = path;\n        return urlGenerate(url);\n    }\n    return path;\n}\nexports.normalize = normalize;\n/**\n * Joins two paths/URLs.\n *\n * @param aRoot The root path or URL.\n * @param aPath The path or URL to be joined with the root.\n *\n * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a\n *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended\n *   first.\n * - Otherwise aPath is a path. If aRoot is a URL, then its path portion\n *   is updated with the result and aRoot is returned. Otherwise the result\n *   is returned.\n *   - If aPath is absolute, the result is aPath.\n *   - Otherwise the two paths are joined with a slash.\n * - Joining for example 'http://' and 'www.example.com' is also supported.\n */ function join(aRoot, aPath) {\n    if (aRoot === \"\") {\n        aRoot = \".\";\n    }\n    if (aPath === \"\") {\n        aPath = \".\";\n    }\n    var aPathUrl = urlParse(aPath);\n    var aRootUrl = urlParse(aRoot);\n    if (aRootUrl) {\n        aRoot = aRootUrl.path || \"/\";\n    }\n    // `join(foo, '//www.example.org')`\n    if (aPathUrl && !aPathUrl.scheme) {\n        if (aRootUrl) {\n            aPathUrl.scheme = aRootUrl.scheme;\n        }\n        return urlGenerate(aPathUrl);\n    }\n    if (aPathUrl || aPath.match(dataUrlRegexp)) {\n        return aPath;\n    }\n    // `join('http://', 'www.example.com')`\n    if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {\n        aRootUrl.host = aPath;\n        return urlGenerate(aRootUrl);\n    }\n    var joined = aPath.charAt(0) === \"/\" ? aPath : normalize(aRoot.replace(/\\/+$/, \"\") + \"/\" + aPath);\n    if (aRootUrl) {\n        aRootUrl.path = joined;\n        return urlGenerate(aRootUrl);\n    }\n    return joined;\n}\nexports.join = join;\nexports.isAbsolute = function(aPath) {\n    return aPath.charAt(0) === \"/\" || urlRegexp.test(aPath);\n};\n/**\n * Make a path relative to a URL or another path.\n *\n * @param aRoot The root path or URL.\n * @param aPath The path or URL to be made relative to aRoot.\n */ function relative(aRoot, aPath) {\n    if (aRoot === \"\") {\n        aRoot = \".\";\n    }\n    aRoot = aRoot.replace(/\\/$/, \"\");\n    // It is possible for the path to be above the root. In this case, simply\n    // checking whether the root is a prefix of the path won't work. Instead, we\n    // need to remove components from the root one by one, until either we find\n    // a prefix that fits, or we run out of components to remove.\n    var level = 0;\n    while(aPath.indexOf(aRoot + \"/\") !== 0){\n        var index = aRoot.lastIndexOf(\"/\");\n        if (index < 0) {\n            return aPath;\n        }\n        // If the only part of the root that is left is the scheme (i.e. http://,\n        // file:///, etc.), one or more slashes (/), or simply nothing at all, we\n        // have exhausted all components, so the path is not relative to the root.\n        aRoot = aRoot.slice(0, index);\n        if (aRoot.match(/^([^\\/]+:\\/)?\\/*$/)) {\n            return aPath;\n        }\n        ++level;\n    }\n    // Make sure we add a \"../\" for each component we removed from the root.\n    return Array(level + 1).join(\"../\") + aPath.substr(aRoot.length + 1);\n}\nexports.relative = relative;\nvar supportsNullProto = function() {\n    var obj = Object.create(null);\n    return !(\"__proto__\" in obj);\n}();\nfunction identity(s) {\n    return s;\n}\n/**\n * Because behavior goes wacky when you set `__proto__` on objects, we\n * have to prefix all the strings in our set with an arbitrary character.\n *\n * See https://github.com/mozilla/source-map/pull/31 and\n * https://github.com/mozilla/source-map/issues/30\n *\n * @param String aStr\n */ function toSetString(aStr) {\n    if (isProtoString(aStr)) {\n        return \"$\" + aStr;\n    }\n    return aStr;\n}\nexports.toSetString = supportsNullProto ? identity : toSetString;\nfunction fromSetString(aStr) {\n    if (isProtoString(aStr)) {\n        return aStr.slice(1);\n    }\n    return aStr;\n}\nexports.fromSetString = supportsNullProto ? identity : fromSetString;\nfunction isProtoString(s) {\n    if (!s) {\n        return false;\n    }\n    var length = s.length;\n    if (length < 9 /* \"__proto__\".length */ ) {\n        return false;\n    }\n    if (s.charCodeAt(length - 1) !== 95 /* '_' */  || s.charCodeAt(length - 2) !== 95 /* '_' */  || s.charCodeAt(length - 3) !== 111 /* 'o' */  || s.charCodeAt(length - 4) !== 116 /* 't' */  || s.charCodeAt(length - 5) !== 111 /* 'o' */  || s.charCodeAt(length - 6) !== 114 /* 'r' */  || s.charCodeAt(length - 7) !== 112 /* 'p' */  || s.charCodeAt(length - 8) !== 95 /* '_' */  || s.charCodeAt(length - 9) !== 95 /* '_' */ ) {\n        return false;\n    }\n    for(var i = length - 10; i >= 0; i--){\n        if (s.charCodeAt(i) !== 36 /* '$' */ ) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Comparator between two mappings where the original positions are compared.\n *\n * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n * mappings with the same original source/line/column, but different generated\n * line and column the same. Useful when searching for a mapping with a\n * stubbed out mapping.\n */ function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {\n    var cmp = strcmp(mappingA.source, mappingB.source);\n    if (cmp !== 0) {\n        return cmp;\n    }\n    cmp = mappingA.originalLine - mappingB.originalLine;\n    if (cmp !== 0) {\n        return cmp;\n    }\n    cmp = mappingA.originalColumn - mappingB.originalColumn;\n    if (cmp !== 0 || onlyCompareOriginal) {\n        return cmp;\n    }\n    cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n    if (cmp !== 0) {\n        return cmp;\n    }\n    cmp = mappingA.generatedLine - mappingB.generatedLine;\n    if (cmp !== 0) {\n        return cmp;\n    }\n    return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByOriginalPositions = compareByOriginalPositions;\n/**\n * Comparator between two mappings with deflated source and name indices where\n * the generated positions are compared.\n *\n * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n * mappings with the same generated line and column, but different\n * source/name/original line and column the same. Useful when searching for a\n * mapping with a stubbed out mapping.\n */ function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {\n    var cmp = mappingA.generatedLine - mappingB.generatedLine;\n    if (cmp !== 0) {\n        return cmp;\n    }\n    cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n    if (cmp !== 0 || onlyCompareGenerated) {\n        return cmp;\n    }\n    cmp = strcmp(mappingA.source, mappingB.source);\n    if (cmp !== 0) {\n        return cmp;\n    }\n    cmp = mappingA.originalLine - mappingB.originalLine;\n    if (cmp !== 0) {\n        return cmp;\n    }\n    cmp = mappingA.originalColumn - mappingB.originalColumn;\n    if (cmp !== 0) {\n        return cmp;\n    }\n    return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;\nfunction strcmp(aStr1, aStr2) {\n    if (aStr1 === aStr2) {\n        return 0;\n    }\n    if (aStr1 === null) {\n        return 1; // aStr2 !== null\n    }\n    if (aStr2 === null) {\n        return -1; // aStr1 !== null\n    }\n    if (aStr1 > aStr2) {\n        return 1;\n    }\n    return -1;\n}\n/**\n * Comparator between two mappings with inflated source and name strings where\n * the generated positions are compared.\n */ function compareByGeneratedPositionsInflated(mappingA, mappingB) {\n    var cmp = mappingA.generatedLine - mappingB.generatedLine;\n    if (cmp !== 0) {\n        return cmp;\n    }\n    cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n    if (cmp !== 0) {\n        return cmp;\n    }\n    cmp = strcmp(mappingA.source, mappingB.source);\n    if (cmp !== 0) {\n        return cmp;\n    }\n    cmp = mappingA.originalLine - mappingB.originalLine;\n    if (cmp !== 0) {\n        return cmp;\n    }\n    cmp = mappingA.originalColumn - mappingB.originalColumn;\n    if (cmp !== 0) {\n        return cmp;\n    }\n    return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;\n/**\n * Strip any JSON XSSI avoidance prefix from the string (as documented\n * in the source maps specification), and then parse the string as\n * JSON.\n */ function parseSourceMapInput(str) {\n    return JSON.parse(str.replace(/^\\)]}'[^\\n]*\\n/, \"\"));\n}\nexports.parseSourceMapInput = parseSourceMapInput;\n/**\n * Compute the URL of a source given the the source root, the source's\n * URL, and the source map's URL.\n */ function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {\n    sourceURL = sourceURL || \"\";\n    if (sourceRoot) {\n        // This follows what Chrome does.\n        if (sourceRoot[sourceRoot.length - 1] !== \"/\" && sourceURL[0] !== \"/\") {\n            sourceRoot += \"/\";\n        }\n        // The spec says:\n        //   Line 4: An optional source root, useful for relocating source\n        //   files on a server or removing repeated values in the\n        //   “sources” entry.  This value is prepended to the individual\n        //   entries in the “source” field.\n        sourceURL = sourceRoot + sourceURL;\n    }\n    // Historically, SourceMapConsumer did not take the sourceMapURL as\n    // a parameter.  This mode is still somewhat supported, which is why\n    // this code block is conditional.  However, it's preferable to pass\n    // the source map URL to SourceMapConsumer, so that this function\n    // can implement the source URL resolution algorithm as outlined in\n    // the spec.  This block is basically the equivalent of:\n    //    new URL(sourceURL, sourceMapURL).toString()\n    // ... except it avoids using URL, which wasn't available in the\n    // older releases of node still supported by this library.\n    //\n    // The spec says:\n    //   If the sources are not absolute URLs after prepending of the\n    //   “sourceRoot”, the sources are resolved relative to the\n    //   SourceMap (like resolving script src in a html document).\n    if (sourceMapURL) {\n        var parsed = urlParse(sourceMapURL);\n        if (!parsed) {\n            throw new Error(\"sourceMapURL could not be parsed\");\n        }\n        if (parsed.path) {\n            // Strip the last path component, but keep the \"/\".\n            var index = parsed.path.lastIndexOf(\"/\");\n            if (index >= 0) {\n                parsed.path = parsed.path.substring(0, index + 1);\n            }\n        }\n        sourceURL = join(urlGenerate(parsed), sourceURL);\n    }\n    return normalize(sourceURL);\n}\nexports.computeSourceURL = computeSourceURL;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvdXRpbC5qcyIsIm1hcHBpbmdzIjoiQUFBQSx5Q0FBeUMsR0FDekM7Ozs7Q0FJQyxHQUVEOzs7Ozs7Ozs7Q0FTQyxHQUNELFNBQVNBLE9BQU9DLEtBQUssRUFBRUMsS0FBSyxFQUFFQyxhQUFhO0lBQ3pDLElBQUlELFNBQVNELE9BQU87UUFDbEIsT0FBT0EsS0FBSyxDQUFDQyxNQUFNO0lBQ3JCLE9BQU8sSUFBSUUsVUFBVUMsTUFBTSxLQUFLLEdBQUc7UUFDakMsT0FBT0Y7SUFDVCxPQUFPO1FBQ0wsTUFBTSxJQUFJRyxNQUFNLE1BQU1KLFFBQVE7SUFDaEM7QUFDRjtBQUNBSyxjQUFjLEdBQUdQO0FBRWpCLElBQUlRLFlBQVk7QUFDaEIsSUFBSUMsZ0JBQWdCO0FBRXBCLFNBQVNDLFNBQVNDLElBQUk7SUFDcEIsSUFBSUMsUUFBUUQsS0FBS0MsS0FBSyxDQUFDSjtJQUN2QixJQUFJLENBQUNJLE9BQU87UUFDVixPQUFPO0lBQ1Q7SUFDQSxPQUFPO1FBQ0xDLFFBQVFELEtBQUssQ0FBQyxFQUFFO1FBQ2hCRSxNQUFNRixLQUFLLENBQUMsRUFBRTtRQUNkRyxNQUFNSCxLQUFLLENBQUMsRUFBRTtRQUNkSSxNQUFNSixLQUFLLENBQUMsRUFBRTtRQUNkSyxNQUFNTCxLQUFLLENBQUMsRUFBRTtJQUNoQjtBQUNGO0FBQ0FMLGdCQUFnQixHQUFHRztBQUVuQixTQUFTUSxZQUFZQyxVQUFVO0lBQzdCLElBQUlDLE1BQU07SUFDVixJQUFJRCxXQUFXTixNQUFNLEVBQUU7UUFDckJPLE9BQU9ELFdBQVdOLE1BQU0sR0FBRztJQUM3QjtJQUNBTyxPQUFPO0lBQ1AsSUFBSUQsV0FBV0wsSUFBSSxFQUFFO1FBQ25CTSxPQUFPRCxXQUFXTCxJQUFJLEdBQUc7SUFDM0I7SUFDQSxJQUFJSyxXQUFXSixJQUFJLEVBQUU7UUFDbkJLLE9BQU9ELFdBQVdKLElBQUk7SUFDeEI7SUFDQSxJQUFJSSxXQUFXSCxJQUFJLEVB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Oi8vY2l2aWwtZW5naW5lZXJpbmctcGxhdGZvcm0vLi9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvdXRpbC5qcz9lMzllIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cblxuLyoqXG4gKiBUaGlzIGlzIGEgaGVscGVyIGZ1bmN0aW9uIGZvciBnZXR0aW5nIHZhbHVlcyBmcm9tIHBhcmFtZXRlci9vcHRpb25zXG4gKiBvYmplY3RzLlxuICpcbiAqIEBwYXJhbSBhcmdzIFRoZSBvYmplY3Qgd2UgYXJlIGV4dHJhY3RpbmcgdmFsdWVzIGZyb21cbiAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB3ZSBhcmUgZ2V0dGluZy5cbiAqIEBwYXJhbSBkZWZhdWx0VmFsdWUgQW4gb3B0aW9uYWwgdmFsdWUgdG8gcmV0dXJuIGlmIHRoZSBwcm9wZXJ0eSBpcyBtaXNzaW5nXG4gKiBmcm9tIHRoZSBvYmplY3QuIElmIHRoaXMgaXMgbm90IHNwZWNpZmllZCBhbmQgdGhlIHByb3BlcnR5IGlzIG1pc3NpbmcsIGFuXG4gKiBlcnJvciB3aWxsIGJlIHRocm93bi5cbiAqL1xuZnVuY3Rpb24gZ2V0QXJnKGFBcmdzLCBhTmFtZSwgYURlZmF1bHRWYWx1ZSkge1xuICBpZiAoYU5hbWUgaW4gYUFyZ3MpIHtcbiAgICByZXR1cm4gYUFyZ3NbYU5hbWVdO1xuICB9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMpIHtcbiAgICByZXR1cm4gYURlZmF1bHRWYWx1ZTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIGFOYW1lICsgJ1wiIGlzIGEgcmVxdWlyZWQgYXJndW1lbnQuJyk7XG4gIH1cbn1cbmV4cG9ydHMuZ2V0QXJnID0gZ2V0QXJnO1xuXG52YXIgdXJsUmVnZXhwID0gL14oPzooW1xcdytcXC0uXSspOik/XFwvXFwvKD86KFxcdys6XFx3KylAKT8oW1xcdy4tXSopKD86OihcXGQrKSk/KC4qKSQvO1xudmFyIGRhdGFVcmxSZWdleHAgPSAvXmRhdGE6LitcXCwuKyQvO1xuXG5mdW5jdGlvbiB1cmxQYXJzZShhVXJsKSB7XG4gIHZhciBtYXRjaCA9IGFVcmwubWF0Y2godXJsUmVnZXhwKTtcbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiB7XG4gICAgc2NoZW1lOiBtYXRjaFsxXSxcbiAgICBhdXRoOiBtYXRjaFsyXSxcbiAgICBob3N0OiBtYXRjaFszXSxcbiAgICBwb3J0OiBtYXRjaFs0XSxcbiAgICBwYXRoOiBtYXRjaFs1XVxuICB9O1xufVxuZXhwb3J0cy51cmxQYXJzZSA9IHVybFBhcnNlO1xuXG5mdW5jdGlvbiB1cmxHZW5lcmF0ZShhUGFyc2VkVXJsKSB7XG4gIHZhciB1cmwgPSAnJztcbiAgaWYgKGFQYXJzZWRVcmwuc2NoZW1lKSB7XG4gICAgdXJsICs9IGFQYXJzZWRVcmwuc2NoZW1lICsgJzonO1xuICB9XG4gIHVybCArPSAnLy8nO1xuICBpZiAoYVBhcnNlZFVybC5hdXRoKSB7XG4gICAgdXJsICs9IGFQYXJzZWRVcmwuYXV0aCArICdAJztcbiAgfVxuICBpZiAoYVBhcnNlZFVybC5ob3N0KSB7XG4gICAgdXJsICs9IGFQYXJzZWRVcmwuaG9zdDtcbiAgfVxuICBpZiAoYVBhcnNlZFVybC5wb3J0KSB7XG4gICAgdXJsICs9IFwiOlwiICsgYVBhcnNlZFVybC5wb3J0XG4gIH1cbiAgaWYgKGFQYXJzZWRVcmwucGF0aCkge1xuICAgIHVybCArPSBhUGFyc2VkVXJsLnBhdGg7XG4gIH1cbiAgcmV0dXJuIHVybDtcbn1cbmV4cG9ydHMudXJsR2VuZXJhdGUgPSB1cmxHZW5lcmF0ZTtcblxuLyoqXG4gKiBOb3JtYWxpemVzIGEgcGF0aCwgb3IgdGhlIHBhdGggcG9ydGlvbiBvZiBhIFVSTDpcbiAqXG4gKiAtIFJlcGxhY2VzIGNvbnNlY3V0aXZlIHNsYXNoZXMgd2l0aCBvbmUgc2xhc2guXG4gKiAtIFJlbW92ZXMgdW5uZWNlc3NhcnkgJy4nIHBhcnRzLlxuICogLSBSZW1vdmVzIHVubmVjZXNzYXJ5ICc8ZGlyPi8uLicgcGFydHMuXG4gKlxuICogQmFzZWQgb24gY29kZSBpbiB0aGUgTm9kZS5qcyAncGF0aCcgY29yZSBtb2R1bGUuXG4gKlxuICogQHBhcmFtIGFQYXRoIFRoZSBwYXRoIG9yIHVybCB0byBub3JtYWxpemUuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZShhUGF0aCkge1xuICB2YXIgcGF0aCA9IGFQYXRoO1xuICB2YXIgdXJsID0gdXJsUGFyc2UoYVBhdGgpO1xuICBpZiAodXJsKSB7XG4gICAgaWYgKCF1cmwucGF0aCkge1xuICAgICAgcmV0dXJuIGFQYXRoO1xuICAgIH1cbiAgICBwYXRoID0gdXJsLnBhdGg7XG4gIH1cbiAgdmFyIGlzQWJzb2x1dGUgPSBleHBvcnRzLmlzQWJzb2x1dGUocGF0aCk7XG5cbiAgdmFyIHBhcnRzID0gcGF0aC5zcGxpdCgvXFwvKy8pO1xuICBmb3IgKHZhciBwYXJ0LCB1cCA9IDAsIGkgPSBwYXJ0cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHBhcnQgPSBwYXJ0c1tpXTtcbiAgICBpZiAocGFydCA9PT0gJy4nKSB7XG4gICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XG4gICAgfSBlbHNlIGlmIChwYXJ0ID09PSAnLi4nKSB7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXAgPiAwKSB7XG4gICAgICBpZiAocGFydCA9PT0gJycpIHtcbiAgICAgICAgLy8gVGhlIGZpcnN0IHBhcnQgaXMgYmxhbmsgaWYgdGhlIHBhdGggaXMgYWJzb2x1dGUuIFRyeWluZyB0byBnb1xuICAgICAgICAvLyBhYm92ZSB0aGUgcm9vdCBpcyBhIG5vLW9wLiBUaGVyZWZvcmUgd2UgY2FuIHJlbW92ZSBhbGwgJy4uJyBwYXJ0c1xuICAgICAgICAvLyBkaXJlY3RseSBhZnRlciB0aGUgcm9vdC5cbiAgICAgICAgcGFydHMuc3BsaWNlKGkgKyAxLCB1cCk7XG4gICAgICAgIHVwID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnRzLnNwbGljZShpLCAyKTtcbiAgICAgICAgdXAtLTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcGF0aCA9IHBhcnRzLmpvaW4oJy8nKTtcblxuICBpZiAocGF0aCA9PT0gJycpIHtcbiAgICBwYXRoID0gaXNBYnNvbHV0ZSA/ICcvJyA6ICcuJztcbiAgfVxuXG4gIGlmICh1cmwpIHtcbiAgICB1cmwucGF0aCA9IHBhdGg7XG4gICAgcmV0dXJuIHVybEdlbmVyYXRlKHVybCk7XG4gIH1cbiAgcmV0dXJuIHBhdGg7XG59XG5leHBvcnRzLm5vcm1hbGl6ZSA9IG5vcm1hbGl6ZTtcblxuLyoqXG4gKiBKb2lucyB0d28gcGF0aHMvVVJMcy5cbiAqXG4gKiBAcGFyYW0gYVJvb3QgVGhlIHJvb3QgcGF0aCBvciBVUkwuXG4gKiBAcGFyYW0gYVBhdGggVGhlIHBhdGggb3IgVVJMIHRvIGJlIGpvaW5lZCB3aXRoIHRoZSByb290LlxuICpcbiAqIC0gSWYgYVBhdGggaXMgYSBVUkwgb3IgYSBkYXRhIFVSSSwgYVBhdGggaXMgcmV0dXJuZWQsIHVubGVzcyBhUGF0aCBpcyBhXG4gKiAgIHNjaGVtZS1yZWxhdGl2ZSBVUkw6IFRoZW4gdGhlIHNjaGVtZSBvZiBhUm9vdCwgaWYgYW55LCBpcyBwcmVwZW5kZWRcbiAqICAgZmlyc3QuXG4gKiAtIE90aGVyd2lzZSBhUGF0aCBpcyBhIHBhdGguIElmIGFSb290IGlzIGEgVVJMLCB0aGVuIGl0cyBwYXRoIHBvcnRpb25cbiAqICAgaXMgdXBkYXRlZCB3aXRoIHRoZSByZXN1bHQgYW5kIGFSb290IGlzIHJldHVybmVkLiBPdGhlcndpc2UgdGhlIHJlc3VsdFxuICogICBpcyByZXR1cm5lZC5cbiAqICAgLSBJZiBhUGF0aCBpcyBhYnNvbHV0ZSwgdGhlIHJlc3VsdCBpcyBhUGF0aC5cbiAqICAgLSBPdGhlcndpc2UgdGhlIHR3byBwYXRocyBhcmUgam9pbmVkIHdpdGggYSBzbGFzaC5cbiAqIC0gSm9pbmluZyBmb3IgZXhhbXBsZSAnaHR0cDovLycgYW5kICd3d3cuZXhhbXBsZS5jb20nIGlzIGFsc28gc3VwcG9ydGVkLlxuICovXG5mdW5jdGlvbiBqb2luKGFSb290LCBhUGF0aCkge1xuICBpZiAoYVJvb3QgPT09IFwiXCIpIHtcbiAgICBhUm9vdCA9IFwiLlwiO1xuICB9XG4gIGlmIChhUGF0aCA9PT0gXCJcIikge1xuICAgIGFQYXRoID0gXCIuXCI7XG4gIH1cbiAgdmFyIGFQYXRoVXJsID0gdXJsUGFyc2UoYVBhdGgpO1xuICB2YXIgYVJvb3RVcmwgPSB1cmxQYXJzZShhUm9vdCk7XG4gIGlmIChhUm9vdFVybCkge1xuICAgIGFSb290ID0gYVJvb3RVcmwucGF0aCB8fCAnLyc7XG4gIH1cblxuICAvLyBgam9pbihmb28sICcvL3d3dy5leGFtcGxlLm9yZycpYFxuICBpZiAoYVBhdGhVcmwgJiYgIWFQYXRoVXJsLnNjaGVtZSkge1xuICAgIGlmIChhUm9vdFVybCkge1xuICAgICAgYVBhdGhVcmwuc2NoZW1lID0gYVJvb3RVcmwuc2NoZW1lO1xuICAgIH1cbiAgICByZXR1cm4gdXJsR2VuZXJhdGUoYVBhdGhVcmwpO1xuICB9XG5cbiAgaWYgKGFQYXRoVXJsIHx8IGFQYXRoLm1hdGNoKGRhdGFVcmxSZWdleHApKSB7XG4gICAgcmV0dXJuIGFQYXRoO1xuICB9XG5cbiAgLy8gYGpvaW4oJ2h0dHA6Ly8nLCAnd3d3LmV4YW1wbGUuY29tJylgXG4gIGlmIChhUm9vdFVybCAmJiAhYVJvb3RVcmwuaG9zdCAmJiAhYVJvb3RVcmwucGF0aCkge1xuICAgIGFSb290VXJsLmhvc3QgPSBhUGF0aDtcbiAgICByZXR1cm4gdXJsR2VuZXJhdGUoYVJvb3RVcmwpO1xuICB9XG5cbiAgdmFyIGpvaW5lZCA9IGFQYXRoLmNoYXJBdCgwKSA9PT0gJy8nXG4gICAgPyBhUGF0aFxuICAgIDogbm9ybWFsaXplKGFSb290LnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgYVBhdGgpO1xuXG4gIGlmIChhUm9vdFVybCkge1xuICAgIGFSb290VXJsLnBhdGggPSBqb2luZWQ7XG4gICAgcmV0dXJuIHVybEdlbmVyYXRlKGFSb290VXJsKTtcbiAgfVxuICByZXR1cm4gam9pbmVkO1xufVxuZXhwb3J0cy5qb2luID0gam9pbjtcblxuZXhwb3J0cy5pc0Fic29sdXRlID0gZnVuY3Rpb24gKGFQYXRoKSB7XG4gIHJldHVybiBhUGF0aC5jaGFyQXQoMCkgPT09ICcvJyB8fCB1cmxSZWdleHAudGVzdChhUGF0aCk7XG59O1xuXG4vKipcbiAqIE1ha2UgYSBwYXRoIHJlbGF0aXZlIHRvIGEgVVJMIG9yIGFub3RoZXIgcGF0aC5cbiAqXG4gKiBAcGFyYW0gYVJvb3QgVGhlIHJvb3QgcGF0aCBvciBVUkwuXG4gKiBAcGFyYW0gYVBhdGggVGhlIHBhdGggb3IgVVJMIHRvIGJlIG1hZGUgcmVsYXRpdmUgdG8gYVJvb3QuXG4gKi9cbmZ1bmN0aW9uIHJlbGF0aXZlKGFSb290LCBhUGF0aCkge1xuICBpZiAoYVJvb3QgPT09IFwiXCIpIHtcbiAgICBhUm9vdCA9IFwiLlwiO1xuICB9XG5cbiAgYVJvb3QgPSBhUm9vdC5yZXBsYWNlKC9cXC8kLywgJycpO1xuXG4gIC8vIEl0IGlzIHBvc3NpYmxlIGZvciB0aGUgcGF0aCB0byBiZSBhYm92ZSB0aGUgcm9vdC4gSW4gdGhpcyBjYXNlLCBzaW1wbHlcbiAgLy8gY2hlY2tpbmcgd2hldGhlciB0aGUgcm9vdCBpcyBhIHByZWZpeCBvZiB0aGUgcGF0aCB3b24ndCB3b3JrLiBJbnN0ZWFkLCB3ZVxuICAvLyBuZWVkIHRvIHJlbW92ZSBjb21wb25lbnRzIGZyb20gdGhlIHJvb3Qgb25lIGJ5IG9uZSwgdW50aWwgZWl0aGVyIHdlIGZpbmRcbiAgLy8gYSBwcmVmaXggdGhhdCBmaXRzLCBvciB3ZSBydW4gb3V0IG9mIGNvbXBvbmVudHMgdG8gcmVtb3ZlLlxuICB2YXIgbGV2ZWwgPSAwO1xuICB3aGlsZSAoYVBhdGguaW5kZXhPZihhUm9vdCArICcvJykgIT09IDApIHtcbiAgICB2YXIgaW5kZXggPSBhUm9vdC5sYXN0SW5kZXhPZihcIi9cIik7XG4gICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgcmV0dXJuIGFQYXRoO1xuICAgIH1cblxuICAgIC8vIElmIHRoZSBvbmx5IHBhcnQgb2YgdGhlIHJvb3QgdGhhdCBpcyBsZWZ0IGlzIHRoZSBzY2hlbWUgKGkuZS4gaHR0cDovLyxcbiAgICAvLyBmaWxlOi8vLywgZXRjLiksIG9uZSBvciBtb3JlIHNsYXNoZXMgKC8pLCBvciBzaW1wbHkgbm90aGluZyBhdCBhbGwsIHdlXG4gICAgLy8gaGF2ZSBleGhhdXN0ZWQgYWxsIGNvbXBvbmVudHMsIHNvIHRoZSBwYXRoIGlzIG5vdCByZWxhdGl2ZSB0byB0aGUgcm9vdC5cbiAgICBhUm9vdCA9IGFSb290LnNsaWNlKDAsIGluZGV4KTtcbiAgICBpZiAoYVJvb3QubWF0Y2goL14oW15cXC9dKzpcXC8pP1xcLyokLykpIHtcbiAgICAgIHJldHVybiBhUGF0aDtcbiAgICB9XG5cbiAgICArK2xldmVsO1xuICB9XG5cbiAgLy8gTWFrZSBzdXJlIHdlIGFkZCBhIFwiLi4vXCIgZm9yIGVhY2ggY29tcG9uZW50IHdlIHJlbW92ZWQgZnJvbSB0aGUgcm9vdC5cbiAgcmV0dXJuIEFycmF5KGxldmVsICsgMSkuam9pbihcIi4uL1wiKSArIGFQYXRoLnN1YnN0cihhUm9vdC5sZW5ndGggKyAxKTtcbn1cbmV4cG9ydHMucmVsYXRpdmUgPSByZWxhdGl2ZTtcblxudmFyIHN1cHBvcnRzTnVsbFByb3RvID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIG9iaiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiAhKCdfX3Byb3RvX18nIGluIG9iaik7XG59KCkpO1xuXG5mdW5jdGlvbiBpZGVudGl0eSAocykge1xuICByZXR1cm4gcztcbn1cblxuLyoqXG4gKiBCZWNhdXNlIGJlaGF2aW9yIGdvZXMgd2Fja3kgd2hlbiB5b3Ugc2V0IGBfX3Byb3RvX19gIG9uIG9iamVjdHMsIHdlXG4gKiBoYXZlIHRvIHByZWZpeCBhbGwgdGhlIHN0cmluZ3MgaW4gb3VyIHNldCB3aXRoIGFuIGFyYml0cmFyeSBjaGFyYWN0ZXIuXG4gKlxuICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3NvdXJjZS1tYXAvcHVsbC8zMSBhbmRcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3NvdXJjZS1tYXAvaXNzdWVzLzMwXG4gKlxuICogQHBhcmFtIFN0cmluZyBhU3RyXG4gKi9cbmZ1bmN0aW9uIHRvU2V0U3RyaW5nKGFTdHIpIHtcbiAgaWYgKGlzUHJvdG9TdHJpbmcoYVN0cikpIHtcbiAgICByZXR1cm4gJyQnICsgYVN0cjtcbiAgfVxuXG4gIHJldHVybiBhU3RyO1xufVxuZXhwb3J0cy50b1NldFN0cmluZyA9IHN1cHBvcnRzTnVsbFByb3RvID8gaWRlbnRpdHkgOiB0b1NldFN0cmluZztcblxuZnVuY3Rpb24gZnJvbVNldFN0cmluZyhhU3RyKSB7XG4gIGlmIChpc1Byb3RvU3RyaW5nKGFTdHIpKSB7XG4gICAgcmV0dXJuIGFTdHIuc2xpY2UoMSk7XG4gIH1cblxuICByZXR1cm4gYVN0cjtcbn1cbmV4cG9ydHMuZnJvbVNldFN0cmluZyA9IHN1cHBvcnRzTnVsbFByb3RvID8gaWRlbnRpdHkgOiBmcm9tU2V0U3RyaW5nO1xuXG5mdW5jdGlvbiBpc1Byb3RvU3RyaW5nKHMpIHtcbiAgaWYgKCFzKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGxlbmd0aCA9IHMubGVuZ3RoO1xuXG4gIGlmIChsZW5ndGggPCA5IC8qIFwiX19wcm90b19fXCIubGVuZ3RoICovKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHMuY2hhckNvZGVBdChsZW5ndGggLSAxKSAhPT0gOTUgIC8qICdfJyAqLyB8fFxuICAgICAgcy5jaGFyQ29kZUF0KGxlbmd0aCAtIDIpICE9PSA5NSAgLyogJ18nICovIHx8XG4gICAgICBzLmNoYXJDb2RlQXQobGVuZ3RoIC0gMykgIT09IDExMSAvKiAnbycgKi8gfHxcbiAgICAgIHMuY2hhckNvZGVBdChsZW5ndGggLSA0KSAhPT0gMTE2IC8qICd0JyAqLyB8fFxuICAgICAgcy5jaGFyQ29kZUF0KGxlbmd0aCAtIDUpICE9PSAxMTEgLyogJ28nICovIHx8XG4gICAgICBzLmNoYXJDb2RlQXQobGVuZ3RoIC0gNikgIT09IDExNCAvKiAncicgKi8gfHxcbiAgICAgIHMuY2hhckNvZGVBdChsZW5ndGggLSA3KSAhPT0gMTEyIC8qICdwJyAqLyB8fFxuICAgICAgcy5jaGFyQ29kZUF0KGxlbmd0aCAtIDgpICE9PSA5NSAgLyogJ18nICovIHx8XG4gICAgICBzLmNoYXJDb2RlQXQobGVuZ3RoIC0gOSkgIT09IDk1ICAvKiAnXycgKi8pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmb3IgKHZhciBpID0gbGVuZ3RoIC0gMTA7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKHMuY2hhckNvZGVBdChpKSAhPT0gMzYgLyogJyQnICovKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogQ29tcGFyYXRvciBiZXR3ZWVuIHR3byBtYXBwaW5ncyB3aGVyZSB0aGUgb3JpZ2luYWwgcG9zaXRpb25zIGFyZSBjb21wYXJlZC5cbiAqXG4gKiBPcHRpb25hbGx5IHBhc3MgaW4gYHRydWVgIGFzIGBvbmx5Q29tcGFyZUdlbmVyYXRlZGAgdG8gY29uc2lkZXIgdHdvXG4gKiBtYXBwaW5ncyB3aXRoIHRoZSBzYW1lIG9yaWdpbmFsIHNvdXJjZS9saW5lL2NvbHVtbiwgYnV0IGRpZmZlcmVudCBnZW5lcmF0ZWRcbiAqIGxpbmUgYW5kIGNvbHVtbiB0aGUgc2FtZS4gVXNlZnVsIHdoZW4gc2VhcmNoaW5nIGZvciBhIG1hcHBpbmcgd2l0aCBhXG4gKiBzdHViYmVkIG91dCBtYXBwaW5nLlxuICovXG5mdW5jdGlvbiBjb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucyhtYXBwaW5nQSwgbWFwcGluZ0IsIG9ubHlDb21wYXJlT3JpZ2luYWwpIHtcbiAgdmFyIGNtcCA9IHN0cmNtcChtYXBwaW5nQS5zb3VyY2UsIG1hcHBpbmdCLnNvdXJjZSk7XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gbWFwcGluZ0Eub3JpZ2luYWxMaW5lIC0gbWFwcGluZ0Iub3JpZ2luYWxMaW5lO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLm9yaWdpbmFsQ29sdW1uIC0gbWFwcGluZ0Iub3JpZ2luYWxDb2x1bW47XG4gIGlmIChjbXAgIT09IDAgfHwgb25seUNvbXBhcmVPcmlnaW5hbCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5nZW5lcmF0ZWRDb2x1bW4gLSBtYXBwaW5nQi5nZW5lcmF0ZWRDb2x1bW47XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gbWFwcGluZ0EuZ2VuZXJhdGVkTGluZSAtIG1hcHBpbmdCLmdlbmVyYXRlZExpbmU7XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgcmV0dXJuIHN0cmNtcChtYXBwaW5nQS5uYW1lLCBtYXBwaW5nQi5uYW1lKTtcbn1cbmV4cG9ydHMuY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnMgPSBjb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucztcblxuLyoqXG4gKiBDb21wYXJhdG9yIGJldHdlZW4gdHdvIG1hcHBpbmdzIHdpdGggZGVmbGF0ZWQgc291cmNlIGFuZCBuYW1lIGluZGljZXMgd2hlcmVcbiAqIHRoZSBnZW5lcmF0ZWQgcG9zaXRpb25zIGFyZSBjb21wYXJlZC5cbiAqXG4gKiBPcHRpb25hbGx5IHBhc3MgaW4gYHRydWVgIGFzIGBvbmx5Q29tcGFyZUdlbmVyYXRlZGAgdG8gY29uc2lkZXIgdHdvXG4gKiBtYXBwaW5ncyB3aXRoIHRoZSBzYW1lIGdlbmVyYXRlZCBsaW5lIGFuZCBjb2x1bW4sIGJ1dCBkaWZmZXJlbnRcbiAqIHNvdXJjZS9uYW1lL29yaWdpbmFsIGxpbmUgYW5kIGNvbHVtbiB0aGUgc2FtZS4gVXNlZnVsIHdoZW4gc2VhcmNoaW5nIGZvciBhXG4gKiBtYXBwaW5nIHdpdGggYSBzdHViYmVkIG91dCBtYXBwaW5nLlxuICovXG5mdW5jdGlvbiBjb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNEZWZsYXRlZChtYXBwaW5nQSwgbWFwcGluZ0IsIG9ubHlDb21wYXJlR2VuZXJhdGVkKSB7XG4gIHZhciBjbXAgPSBtYXBwaW5nQS5nZW5lcmF0ZWRMaW5lIC0gbWFwcGluZ0IuZ2VuZXJhdGVkTGluZTtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5nZW5lcmF0ZWRDb2x1bW4gLSBtYXBwaW5nQi5nZW5lcmF0ZWRDb2x1bW47XG4gIGlmIChjbXAgIT09IDAgfHwgb25seUNvbXBhcmVHZW5lcmF0ZWQpIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gc3RyY21wKG1hcHBpbmdBLnNvdXJjZSwgbWFwcGluZ0Iuc291cmNlKTtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5vcmlnaW5hbExpbmUgLSBtYXBwaW5nQi5vcmlnaW5hbExpbmU7XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gbWFwcGluZ0Eub3JpZ2luYWxDb2x1bW4gLSBtYXBwaW5nQi5vcmlnaW5hbENvbHVtbjtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICByZXR1cm4gc3RyY21wKG1hcHBpbmdBLm5hbWUsIG1hcHBpbmdCLm5hbWUpO1xufVxuZXhwb3J0cy5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNEZWZsYXRlZCA9IGNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0RlZmxhdGVkO1xuXG5mdW5jdGlvbiBzdHJjbXAoYVN0cjEsIGFTdHIyKSB7XG4gIGlmIChhU3RyMSA9PT0gYVN0cjIpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIGlmIChhU3RyMSA9PT0gbnVsbCkge1xuICAgIHJldHVybiAxOyAvLyBhU3RyMiAhPT0gbnVsbFxuICB9XG5cbiAgaWYgKGFTdHIyID09PSBudWxsKSB7XG4gICAgcmV0dXJuIC0xOyAvLyBhU3RyMSAhPT0gbnVsbFxuICB9XG5cbiAgaWYgKGFTdHIxID4gYVN0cjIpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuXG4gIHJldHVybiAtMTtcbn1cblxuLyoqXG4gKiBDb21wYXJhdG9yIGJldHdlZW4gdHdvIG1hcHBpbmdzIHdpdGggaW5mbGF0ZWQgc291cmNlIGFuZCBuYW1lIHN0cmluZ3Mgd2hlcmVcbiAqIHRoZSBnZW5lcmF0ZWQgcG9zaXRpb25zIGFyZSBjb21wYXJlZC5cbiAqL1xuZnVuY3Rpb24gY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zSW5mbGF0ZWQobWFwcGluZ0EsIG1hcHBpbmdCKSB7XG4gIHZhciBjbXAgPSBtYXBwaW5nQS5nZW5lcmF0ZWRMaW5lIC0gbWFwcGluZ0IuZ2VuZXJhdGVkTGluZTtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5nZW5lcmF0ZWRDb2x1bW4gLSBtYXBwaW5nQi5nZW5lcmF0ZWRDb2x1bW47XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gc3RyY21wKG1hcHBpbmdBLnNvdXJjZSwgbWFwcGluZ0Iuc291cmNlKTtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5vcmlnaW5hbExpbmUgLSBtYXBwaW5nQi5vcmlnaW5hbExpbmU7XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gbWFwcGluZ0Eub3JpZ2luYWxDb2x1bW4gLSBtYXBwaW5nQi5vcmlnaW5hbENvbHVtbjtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICByZXR1cm4gc3RyY21wKG1hcHBpbmdBLm5hbWUsIG1hcHBpbmdCLm5hbWUpO1xufVxuZXhwb3J0cy5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNJbmZsYXRlZCA9IGNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0luZmxhdGVkO1xuXG4vKipcbiAqIFN0cmlwIGFueSBKU09OIFhTU0kgYXZvaWRhbmNlIHByZWZpeCBmcm9tIHRoZSBzdHJpbmcgKGFzIGRvY3VtZW50ZWRcbiAqIGluIHRoZSBzb3VyY2UgbWFwcyBzcGVjaWZpY2F0aW9uKSwgYW5kIHRoZW4gcGFyc2UgdGhlIHN0cmluZyBhc1xuICogSlNPTi5cbiAqL1xuZnVuY3Rpb24gcGFyc2VTb3VyY2VNYXBJbnB1dChzdHIpIHtcbiAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyLnJlcGxhY2UoL15cXCldfSdbXlxcbl0qXFxuLywgJycpKTtcbn1cbmV4cG9ydHMucGFyc2VTb3VyY2VNYXBJbnB1dCA9IHBhcnNlU291cmNlTWFwSW5wdXQ7XG5cbi8qKlxuICogQ29tcHV0ZSB0aGUgVVJMIG9mIGEgc291cmNlIGdpdmVuIHRoZSB0aGUgc291cmNlIHJvb3QsIHRoZSBzb3VyY2Unc1xuICogVVJMLCBhbmQgdGhlIHNvdXJjZSBtYXAncyBVUkwuXG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVTb3VyY2VVUkwoc291cmNlUm9vdCwgc291cmNlVVJMLCBzb3VyY2VNYXBVUkwpIHtcbiAgc291cmNlVVJMID0gc291cmNlVVJMIHx8ICcnO1xuXG4gIGlmIChzb3VyY2VSb290KSB7XG4gICAgLy8gVGhpcyBmb2xsb3dzIHdoYXQgQ2hyb21lIGRvZXMuXG4gICAgaWYgKHNvdXJjZVJvb3Rbc291cmNlUm9vdC5sZW5ndGggLSAxXSAhPT0gJy8nICYmIHNvdXJjZVVSTFswXSAhPT0gJy8nKSB7XG4gICAgICBzb3VyY2VSb290ICs9ICcvJztcbiAgICB9XG4gICAgLy8gVGhlIHNwZWMgc2F5czpcbiAgICAvLyAgIExpbmUgNDogQW4gb3B0aW9uYWwgc291cmNlIHJvb3QsIHVzZWZ1bCBmb3IgcmVsb2NhdGluZyBzb3VyY2VcbiAgICAvLyAgIGZpbGVzIG9uIGEgc2VydmVyIG9yIHJlbW92aW5nIHJlcGVhdGVkIHZhbHVlcyBpbiB0aGVcbiAgICAvLyAgIOKAnHNvdXJjZXPigJ0gZW50cnkuICBUaGlzIHZhbHVlIGlzIHByZXBlbmRlZCB0byB0aGUgaW5kaXZpZHVhbFxuICAgIC8vICAgZW50cmllcyBpbiB0aGUg4oCcc291cmNl4oCdIGZpZWxkLlxuICAgIHNvdXJjZVVSTCA9IHNvdXJjZVJvb3QgKyBzb3VyY2VVUkw7XG4gIH1cblxuICAvLyBIaXN0b3JpY2FsbHksIFNvdXJjZU1hcENvbnN1bWVyIGRpZCBub3QgdGFrZSB0aGUgc291cmNlTWFwVVJMIGFzXG4gIC8vIGEgcGFyYW1ldGVyLiAgVGhpcyBtb2RlIGlzIHN0aWxsIHNvbWV3aGF0IHN1cHBvcnRlZCwgd2hpY2ggaXMgd2h5XG4gIC8vIHRoaXMgY29kZSBibG9jayBpcyBjb25kaXRpb25hbC4gIEhvd2V2ZXIsIGl0J3MgcHJlZmVyYWJsZSB0byBwYXNzXG4gIC8vIHRoZSBzb3VyY2UgbWFwIFVSTCB0byBTb3VyY2VNYXBDb25zdW1lciwgc28gdGhhdCB0aGlzIGZ1bmN0aW9uXG4gIC8vIGNhbiBpbXBsZW1lbnQgdGhlIHNvdXJjZSBVUkwgcmVzb2x1dGlvbiBhbGdvcml0aG0gYXMgb3V0bGluZWQgaW5cbiAgLy8gdGhlIHNwZWMuICBUaGlzIGJsb2NrIGlzIGJhc2ljYWxseSB0aGUgZXF1aXZhbGVudCBvZjpcbiAgLy8gICAgbmV3IFVSTChzb3VyY2VVUkwsIHNvdXJjZU1hcFVSTCkudG9TdHJpbmcoKVxuICAvLyAuLi4gZXhjZXB0IGl0IGF2b2lkcyB1c2luZyBVUkwsIHdoaWNoIHdhc24ndCBhdmFpbGFibGUgaW4gdGhlXG4gIC8vIG9sZGVyIHJlbGVhc2VzIG9mIG5vZGUgc3RpbGwgc3VwcG9ydGVkIGJ5IHRoaXMgbGlicmFyeS5cbiAgLy9cbiAgLy8gVGhlIHNwZWMgc2F5czpcbiAgLy8gICBJZiB0aGUgc291cmNlcyBhcmUgbm90IGFic29sdXRlIFVSTHMgYWZ0ZXIgcHJlcGVuZGluZyBvZiB0aGVcbiAgLy8gICDigJxzb3VyY2VSb2904oCdLCB0aGUgc291cmNlcyBhcmUgcmVzb2x2ZWQgcmVsYXRpdmUgdG8gdGhlXG4gIC8vICAgU291cmNlTWFwIChsaWtlIHJlc29sdmluZyBzY3JpcHQgc3JjIGluIGEgaHRtbCBkb2N1bWVudCkuXG4gIGlmIChzb3VyY2VNYXBVUkwpIHtcbiAgICB2YXIgcGFyc2VkID0gdXJsUGFyc2Uoc291cmNlTWFwVVJMKTtcbiAgICBpZiAoIXBhcnNlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwic291cmNlTWFwVVJMIGNvdWxkIG5vdCBiZSBwYXJzZWRcIik7XG4gICAgfVxuICAgIGlmIChwYXJzZWQucGF0aCkge1xuICAgICAgLy8gU3RyaXAgdGhlIGxhc3QgcGF0aCBjb21wb25lbnQsIGJ1dCBrZWVwIHRoZSBcIi9cIi5cbiAgICAgIHZhciBpbmRleCA9IHBhcnNlZC5wYXRoLmxhc3RJbmRleE9mKCcvJyk7XG4gICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICBwYXJzZWQucGF0aCA9IHBhcnNlZC5wYXRoLnN1YnN0cmluZygwLCBpbmRleCArIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBzb3VyY2VVUkwgPSBqb2luKHVybEdlbmVyYXRlKHBhcnNlZCksIHNvdXJjZVVSTCk7XG4gIH1cblxuICByZXR1cm4gbm9ybWFsaXplKHNvdXJjZVVSTCk7XG59XG5leHBvcnRzLmNvbXB1dGVTb3VyY2VVUkwgPSBjb21wdXRlU291cmNlVVJMO1xuIl0sIm5hbWVzIjpbImdldEFyZyIsImFBcmdzIiwiYU5hbWUiLCJhRGVmYXVsdFZhbHVlIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiRXJyb3IiLCJleHBvcnRzIiwidXJsUmVnZXhwIiwiZGF0YVVybFJlZ2V4cCIsInVybFBhcnNlIiwiYVVybCIsIm1hdGNoIiwic2NoZW1lIiwiYXV0aCIsImhvc3QiLCJwb3J0IiwicGF0aCIsInVybEdlbmVyYXRlIiwiYVBhcnNlZFVybCIsInVybCIsIm5vcm1hbGl6ZSIsImFQYXRoIiwiaXNBYnNvbHV0ZSIsInBhcnRzIiwic3BsaXQiLCJwYXJ0IiwidXAiLCJpIiwic3BsaWNlIiwiam9pbiIsImFSb290IiwiYVBhdGhVcmwiLCJhUm9vdFVybCIsImpvaW5lZCIsImNoYXJBdCIsInJlcGxhY2UiLCJ0ZXN0IiwicmVsYXRpdmUiLCJsZXZlbCIsImluZGV4T2YiLCJpbmRleCIsImxhc3RJbmRleE9mIiwic2xpY2UiLCJBcnJheSIsInN1YnN0ciIsInN1cHBvcnRzTnVsbFByb3RvIiwib2JqIiwiT2JqZWN0IiwiY3JlYXRlIiwiaWRlbnRpdHkiLCJzIiwidG9TZXRTdHJpbmciLCJhU3RyIiwiaXNQcm90b1N0cmluZyIsImZyb21TZXRTdHJpbmciLCJjaGFyQ29kZUF0IiwiY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnMiLCJtYXBwaW5nQSIsIm1hcHBpbmdCIiwib25seUNvbXBhcmVPcmlnaW5hbCIsImNtcCIsInN0cmNtcCIsInNvdXJjZSIsIm9yaWdpbmFsTGluZSIsIm9yaWdpbmFsQ29sdW1uIiwiZ2VuZXJhdGVkQ29sdW1uIiwiZ2VuZXJhdGVkTGluZSIsIm5hbWUiLCJjb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNEZWZsYXRlZCIsIm9ubHlDb21wYXJlR2VuZXJhdGVkIiwiYVN0cjEiLCJhU3RyMiIsImNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0luZmxhdGVkIiwicGFyc2VTb3VyY2VNYXBJbnB1dCIsInN0ciIsIkpTT04iLCJwYXJzZSIsImNvbXB1dGVTb3VyY2VVUkwiLCJzb3VyY2VSb290Iiwic291cmNlVVJMIiwic291cmNlTWFwVVJMIiwicGFyc2VkIiwic3Vic3RyaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/source-map/lib/util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/source-map/source-map.js":
/*!***********************************************!*\
  !*** ./node_modules/source-map/source-map.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/*\n * Copyright 2009-2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE.txt or:\n * http://opensource.org/licenses/BSD-3-Clause\n */ exports.SourceMapGenerator = __webpack_require__(/*! ./lib/source-map-generator */ \"(rsc)/./node_modules/source-map/lib/source-map-generator.js\").SourceMapGenerator;\nexports.SourceMapConsumer = __webpack_require__(/*! ./lib/source-map-consumer */ \"(rsc)/./node_modules/source-map/lib/source-map-consumer.js\").SourceMapConsumer;\nexports.SourceNode = __webpack_require__(/*! ./lib/source-node */ \"(rsc)/./node_modules/source-map/lib/source-node.js\").SourceNode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9zb3VyY2UtbWFwLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7O0NBSUMsR0FDREEsb0tBQXFGO0FBQ3JGQSxnS0FBa0Y7QUFDbEZBLGtJQUE0RCIsInNvdXJjZXMiOlsid2VicGFjazovL2NpdmlsLWVuZ2luZWVyaW5nLXBsYXRmb3JtLy4vbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvc291cmNlLW1hcC5qcz8zYWYxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgMjAwOS0yMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRS50eHQgb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cbmV4cG9ydHMuU291cmNlTWFwR2VuZXJhdG9yID0gcmVxdWlyZSgnLi9saWIvc291cmNlLW1hcC1nZW5lcmF0b3InKS5Tb3VyY2VNYXBHZW5lcmF0b3I7XG5leHBvcnRzLlNvdXJjZU1hcENvbnN1bWVyID0gcmVxdWlyZSgnLi9saWIvc291cmNlLW1hcC1jb25zdW1lcicpLlNvdXJjZU1hcENvbnN1bWVyO1xuZXhwb3J0cy5Tb3VyY2VOb2RlID0gcmVxdWlyZSgnLi9saWIvc291cmNlLW5vZGUnKS5Tb3VyY2VOb2RlO1xuIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJTb3VyY2VNYXBHZW5lcmF0b3IiLCJyZXF1aXJlIiwiU291cmNlTWFwQ29uc3VtZXIiLCJTb3VyY2VOb2RlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/source-map/source-map.js\n");

/***/ })

};
;