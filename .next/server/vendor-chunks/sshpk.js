/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/sshpk";
exports.ids = ["vendor-chunks/sshpk"];
exports.modules = {

/***/ "(rsc)/./node_modules/sshpk/lib/algs.js":
/*!****************************************!*\
  !*** ./node_modules/sshpk/lib/algs.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algInfo = {\n    \"dsa\": {\n        parts: [\n            \"p\",\n            \"q\",\n            \"g\",\n            \"y\"\n        ],\n        sizePart: \"p\"\n    },\n    \"rsa\": {\n        parts: [\n            \"e\",\n            \"n\"\n        ],\n        sizePart: \"n\"\n    },\n    \"ecdsa\": {\n        parts: [\n            \"curve\",\n            \"Q\"\n        ],\n        sizePart: \"Q\"\n    },\n    \"ed25519\": {\n        parts: [\n            \"A\"\n        ],\n        sizePart: \"A\"\n    }\n};\nalgInfo[\"curve25519\"] = algInfo[\"ed25519\"];\nvar algPrivInfo = {\n    \"dsa\": {\n        parts: [\n            \"p\",\n            \"q\",\n            \"g\",\n            \"y\",\n            \"x\"\n        ]\n    },\n    \"rsa\": {\n        parts: [\n            \"n\",\n            \"e\",\n            \"d\",\n            \"iqmp\",\n            \"p\",\n            \"q\"\n        ]\n    },\n    \"ecdsa\": {\n        parts: [\n            \"curve\",\n            \"Q\",\n            \"d\"\n        ]\n    },\n    \"ed25519\": {\n        parts: [\n            \"A\",\n            \"k\"\n        ]\n    }\n};\nalgPrivInfo[\"curve25519\"] = algPrivInfo[\"ed25519\"];\nvar hashAlgs = {\n    \"md5\": true,\n    \"sha1\": true,\n    \"sha256\": true,\n    \"sha384\": true,\n    \"sha512\": true\n};\n/*\n * Taken from\n * http://csrc.nist.gov/groups/ST/toolkit/documents/dss/NISTReCur.pdf\n */ var curves = {\n    \"nistp256\": {\n        size: 256,\n        pkcs8oid: \"1.2.840.10045.3.1.7\",\n        p: Buffer.from((\"00\" + \"ffffffff 00000001 00000000 00000000\" + \"00000000 ffffffff ffffffff ffffffff\").replace(/ /g, \"\"), \"hex\"),\n        a: Buffer.from((\"00\" + \"FFFFFFFF 00000001 00000000 00000000\" + \"00000000 FFFFFFFF FFFFFFFF FFFFFFFC\").replace(/ /g, \"\"), \"hex\"),\n        b: Buffer.from((\"5ac635d8 aa3a93e7 b3ebbd55 769886bc\" + \"651d06b0 cc53b0f6 3bce3c3e 27d2604b\").replace(/ /g, \"\"), \"hex\"),\n        s: Buffer.from((\"00\" + \"c49d3608 86e70493 6a6678e1 139d26b7\" + \"819f7e90\").replace(/ /g, \"\"), \"hex\"),\n        n: Buffer.from((\"00\" + \"ffffffff 00000000 ffffffff ffffffff\" + \"bce6faad a7179e84 f3b9cac2 fc632551\").replace(/ /g, \"\"), \"hex\"),\n        G: Buffer.from((\"04\" + \"6b17d1f2 e12c4247 f8bce6e5 63a440f2\" + \"77037d81 2deb33a0 f4a13945 d898c296\" + \"4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16\" + \"2bce3357 6b315ece cbb64068 37bf51f5\").replace(/ /g, \"\"), \"hex\")\n    },\n    \"nistp384\": {\n        size: 384,\n        pkcs8oid: \"1.3.132.0.34\",\n        p: Buffer.from((\"00\" + \"ffffffff ffffffff ffffffff ffffffff\" + \"ffffffff ffffffff ffffffff fffffffe\" + \"ffffffff 00000000 00000000 ffffffff\").replace(/ /g, \"\"), \"hex\"),\n        a: Buffer.from((\"00\" + \"FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF\" + \"FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE\" + \"FFFFFFFF 00000000 00000000 FFFFFFFC\").replace(/ /g, \"\"), \"hex\"),\n        b: Buffer.from((\"b3312fa7 e23ee7e4 988e056b e3f82d19\" + \"181d9c6e fe814112 0314088f 5013875a\" + \"c656398d 8a2ed19d 2a85c8ed d3ec2aef\").replace(/ /g, \"\"), \"hex\"),\n        s: Buffer.from((\"00\" + \"a335926a a319a27a 1d00896a 6773a482\" + \"7acdac73\").replace(/ /g, \"\"), \"hex\"),\n        n: Buffer.from((\"00\" + \"ffffffff ffffffff ffffffff ffffffff\" + \"ffffffff ffffffff c7634d81 f4372ddf\" + \"581a0db2 48b0a77a ecec196a ccc52973\").replace(/ /g, \"\"), \"hex\"),\n        G: Buffer.from((\"04\" + \"aa87ca22 be8b0537 8eb1c71e f320ad74\" + \"6e1d3b62 8ba79b98 59f741e0 82542a38\" + \"5502f25d bf55296c 3a545e38 72760ab7\" + \"3617de4a 96262c6f 5d9e98bf 9292dc29\" + \"f8f41dbd 289a147c e9da3113 b5f0b8c0\" + \"0a60b1ce 1d7e819d 7a431d7c 90ea0e5f\").replace(/ /g, \"\"), \"hex\")\n    },\n    \"nistp521\": {\n        size: 521,\n        pkcs8oid: \"1.3.132.0.35\",\n        p: Buffer.from((\"01ffffff ffffffff ffffffff ffffffff\" + \"ffffffff ffffffff ffffffff ffffffff\" + \"ffffffff ffffffff ffffffff ffffffff\" + \"ffffffff ffffffff ffffffff ffffffff\" + \"ffff\").replace(/ /g, \"\"), \"hex\"),\n        a: Buffer.from((\"01FF\" + \"FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF\" + \"FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF\" + \"FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF\" + \"FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFC\").replace(/ /g, \"\"), \"hex\"),\n        b: Buffer.from((\"51\" + \"953eb961 8e1c9a1f 929a21a0 b68540ee\" + \"a2da725b 99b315f3 b8b48991 8ef109e1\" + \"56193951 ec7e937b 1652c0bd 3bb1bf07\" + \"3573df88 3d2c34f1 ef451fd4 6b503f00\").replace(/ /g, \"\"), \"hex\"),\n        s: Buffer.from((\"00\" + \"d09e8800 291cb853 96cc6717 393284aa\" + \"a0da64ba\").replace(/ /g, \"\"), \"hex\"),\n        n: Buffer.from((\"01ff\" + \"ffffffff ffffffff ffffffff ffffffff\" + \"ffffffff ffffffff ffffffff fffffffa\" + \"51868783 bf2f966b 7fcc0148 f709a5d0\" + \"3bb5c9b8 899c47ae bb6fb71e 91386409\").replace(/ /g, \"\"), \"hex\"),\n        G: Buffer.from((\"04\" + \"00c6 858e06b7 0404e9cd 9e3ecb66 2395b442\" + \"9c648139 053fb521 f828af60 6b4d3dba\" + \"a14b5e77 efe75928 fe1dc127 a2ffa8de\" + \"3348b3c1 856a429b f97e7e31 c2e5bd66\" + \"0118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9\" + \"98f54449 579b4468 17afbd17 273e662c\" + \"97ee7299 5ef42640 c550b901 3fad0761\" + \"353c7086 a272c240 88be9476 9fd16650\").replace(/ /g, \"\"), \"hex\")\n    }\n};\nmodule.exports = {\n    info: algInfo,\n    privInfo: algPrivInfo,\n    hashAlgs: hashAlgs,\n    curves: curves\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/algs.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/certificate.js":
/*!***********************************************!*\
  !*** ./node_modules/sshpk/lib/certificate.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2016 Joyent, Inc.\nmodule.exports = Certificate;\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ./algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar Fingerprint = __webpack_require__(/*! ./fingerprint */ \"(rsc)/./node_modules/sshpk/lib/fingerprint.js\");\nvar Signature = __webpack_require__(/*! ./signature */ \"(rsc)/./node_modules/sshpk/lib/signature.js\");\nvar errs = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/sshpk/lib/errors.js\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar Key = __webpack_require__(/*! ./key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ./private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar Identity = __webpack_require__(/*! ./identity */ \"(rsc)/./node_modules/sshpk/lib/identity.js\");\nvar formats = {};\nformats[\"openssh\"] = __webpack_require__(/*! ./formats/openssh-cert */ \"(rsc)/./node_modules/sshpk/lib/formats/openssh-cert.js\");\nformats[\"x509\"] = __webpack_require__(/*! ./formats/x509 */ \"(rsc)/./node_modules/sshpk/lib/formats/x509.js\");\nformats[\"pem\"] = __webpack_require__(/*! ./formats/x509-pem */ \"(rsc)/./node_modules/sshpk/lib/formats/x509-pem.js\");\nvar CertificateParseError = errs.CertificateParseError;\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\nfunction Certificate(opts) {\n    assert.object(opts, \"options\");\n    assert.arrayOfObject(opts.subjects, \"options.subjects\");\n    utils.assertCompatible(opts.subjects[0], Identity, [\n        1,\n        0\n    ], \"options.subjects\");\n    utils.assertCompatible(opts.subjectKey, Key, [\n        1,\n        0\n    ], \"options.subjectKey\");\n    utils.assertCompatible(opts.issuer, Identity, [\n        1,\n        0\n    ], \"options.issuer\");\n    if (opts.issuerKey !== undefined) {\n        utils.assertCompatible(opts.issuerKey, Key, [\n            1,\n            0\n        ], \"options.issuerKey\");\n    }\n    assert.object(opts.signatures, \"options.signatures\");\n    assert.buffer(opts.serial, \"options.serial\");\n    assert.date(opts.validFrom, \"options.validFrom\");\n    assert.date(opts.validUntil, \"optons.validUntil\");\n    assert.optionalArrayOfString(opts.purposes, \"options.purposes\");\n    this._hashCache = {};\n    this.subjects = opts.subjects;\n    this.issuer = opts.issuer;\n    this.subjectKey = opts.subjectKey;\n    this.issuerKey = opts.issuerKey;\n    this.signatures = opts.signatures;\n    this.serial = opts.serial;\n    this.validFrom = opts.validFrom;\n    this.validUntil = opts.validUntil;\n    this.purposes = opts.purposes;\n}\nCertificate.formats = formats;\nCertificate.prototype.toBuffer = function(format, options) {\n    if (format === undefined) format = \"x509\";\n    assert.string(format, \"format\");\n    assert.object(formats[format], \"formats[format]\");\n    assert.optionalObject(options, \"options\");\n    return formats[format].write(this, options);\n};\nCertificate.prototype.toString = function(format, options) {\n    if (format === undefined) format = \"pem\";\n    return this.toBuffer(format, options).toString();\n};\nCertificate.prototype.fingerprint = function(algo) {\n    if (algo === undefined) algo = \"sha256\";\n    assert.string(algo, \"algorithm\");\n    var opts = {\n        type: \"certificate\",\n        hash: this.hash(algo),\n        algorithm: algo\n    };\n    return new Fingerprint(opts);\n};\nCertificate.prototype.hash = function(algo) {\n    assert.string(algo, \"algorithm\");\n    algo = algo.toLowerCase();\n    if (algs.hashAlgs[algo] === undefined) throw new InvalidAlgorithmError(algo);\n    if (this._hashCache[algo]) return this._hashCache[algo];\n    var hash = crypto.createHash(algo).update(this.toBuffer(\"x509\")).digest();\n    this._hashCache[algo] = hash;\n    return hash;\n};\nCertificate.prototype.isExpired = function(when) {\n    if (when === undefined) when = new Date();\n    return !(when.getTime() >= this.validFrom.getTime() && when.getTime() < this.validUntil.getTime());\n};\nCertificate.prototype.isSignedBy = function(issuerCert) {\n    utils.assertCompatible(issuerCert, Certificate, [\n        1,\n        0\n    ], \"issuer\");\n    if (!this.issuer.equals(issuerCert.subjects[0])) return false;\n    if (this.issuer.purposes && this.issuer.purposes.length > 0 && this.issuer.purposes.indexOf(\"ca\") === -1) {\n        return false;\n    }\n    return this.isSignedByKey(issuerCert.subjectKey);\n};\nCertificate.prototype.getExtension = function(keyOrOid) {\n    assert.string(keyOrOid, \"keyOrOid\");\n    var ext = this.getExtensions().filter(function(maybeExt) {\n        if (maybeExt.format === \"x509\") return maybeExt.oid === keyOrOid;\n        if (maybeExt.format === \"openssh\") return maybeExt.name === keyOrOid;\n        return false;\n    })[0];\n    return ext;\n};\nCertificate.prototype.getExtensions = function() {\n    var exts = [];\n    var x509 = this.signatures.x509;\n    if (x509 && x509.extras && x509.extras.exts) {\n        x509.extras.exts.forEach(function(ext) {\n            ext.format = \"x509\";\n            exts.push(ext);\n        });\n    }\n    var openssh = this.signatures.openssh;\n    if (openssh && openssh.exts) {\n        openssh.exts.forEach(function(ext) {\n            ext.format = \"openssh\";\n            exts.push(ext);\n        });\n    }\n    return exts;\n};\nCertificate.prototype.isSignedByKey = function(issuerKey) {\n    utils.assertCompatible(issuerKey, Key, [\n        1,\n        2\n    ], \"issuerKey\");\n    if (this.issuerKey !== undefined) {\n        return this.issuerKey.fingerprint(\"sha512\").matches(issuerKey);\n    }\n    var fmt = Object.keys(this.signatures)[0];\n    var valid = formats[fmt].verify(this, issuerKey);\n    if (valid) this.issuerKey = issuerKey;\n    return valid;\n};\nCertificate.prototype.signWith = function(key) {\n    utils.assertCompatible(key, PrivateKey, [\n        1,\n        2\n    ], \"key\");\n    var fmts = Object.keys(formats);\n    var didOne = false;\n    for(var i = 0; i < fmts.length; ++i){\n        if (fmts[i] !== \"pem\") {\n            var ret = formats[fmts[i]].sign(this, key);\n            if (ret === true) didOne = true;\n        }\n    }\n    if (!didOne) {\n        throw new Error(\"Failed to sign the certificate for any \" + \"available certificate formats\");\n    }\n};\nCertificate.createSelfSigned = function(subjectOrSubjects, key, options) {\n    var subjects;\n    if (Array.isArray(subjectOrSubjects)) subjects = subjectOrSubjects;\n    else subjects = [\n        subjectOrSubjects\n    ];\n    assert.arrayOfObject(subjects);\n    subjects.forEach(function(subject) {\n        utils.assertCompatible(subject, Identity, [\n            1,\n            0\n        ], \"subject\");\n    });\n    utils.assertCompatible(key, PrivateKey, [\n        1,\n        2\n    ], \"private key\");\n    assert.optionalObject(options, \"options\");\n    if (options === undefined) options = {};\n    assert.optionalObject(options.validFrom, \"options.validFrom\");\n    assert.optionalObject(options.validUntil, \"options.validUntil\");\n    var validFrom = options.validFrom;\n    var validUntil = options.validUntil;\n    if (validFrom === undefined) validFrom = new Date();\n    if (validUntil === undefined) {\n        assert.optionalNumber(options.lifetime, \"options.lifetime\");\n        var lifetime = options.lifetime;\n        if (lifetime === undefined) lifetime = 10 * 365 * 24 * 3600;\n        validUntil = new Date();\n        validUntil.setTime(validUntil.getTime() + lifetime * 1000);\n    }\n    assert.optionalBuffer(options.serial, \"options.serial\");\n    var serial = options.serial;\n    if (serial === undefined) serial = Buffer.from(\"0000000000000001\", \"hex\");\n    var purposes = options.purposes;\n    if (purposes === undefined) purposes = [];\n    if (purposes.indexOf(\"signature\") === -1) purposes.push(\"signature\");\n    /* Self-signed certs are always CAs. */ if (purposes.indexOf(\"ca\") === -1) purposes.push(\"ca\");\n    if (purposes.indexOf(\"crl\") === -1) purposes.push(\"crl\");\n    /*\n\t * If we weren't explicitly given any other purposes, do the sensible\n\t * thing and add some basic ones depending on the subject type.\n\t */ if (purposes.length <= 3) {\n        var hostSubjects = subjects.filter(function(subject) {\n            return subject.type === \"host\";\n        });\n        var userSubjects = subjects.filter(function(subject) {\n            return subject.type === \"user\";\n        });\n        if (hostSubjects.length > 0) {\n            if (purposes.indexOf(\"serverAuth\") === -1) purposes.push(\"serverAuth\");\n        }\n        if (userSubjects.length > 0) {\n            if (purposes.indexOf(\"clientAuth\") === -1) purposes.push(\"clientAuth\");\n        }\n        if (userSubjects.length > 0 || hostSubjects.length > 0) {\n            if (purposes.indexOf(\"keyAgreement\") === -1) purposes.push(\"keyAgreement\");\n            if (key.type === \"rsa\" && purposes.indexOf(\"encryption\") === -1) purposes.push(\"encryption\");\n        }\n    }\n    var cert = new Certificate({\n        subjects: subjects,\n        issuer: subjects[0],\n        subjectKey: key.toPublic(),\n        issuerKey: key.toPublic(),\n        signatures: {},\n        serial: serial,\n        validFrom: validFrom,\n        validUntil: validUntil,\n        purposes: purposes\n    });\n    cert.signWith(key);\n    return cert;\n};\nCertificate.create = function(subjectOrSubjects, key, issuer, issuerKey, options) {\n    var subjects;\n    if (Array.isArray(subjectOrSubjects)) subjects = subjectOrSubjects;\n    else subjects = [\n        subjectOrSubjects\n    ];\n    assert.arrayOfObject(subjects);\n    subjects.forEach(function(subject) {\n        utils.assertCompatible(subject, Identity, [\n            1,\n            0\n        ], \"subject\");\n    });\n    utils.assertCompatible(key, Key, [\n        1,\n        0\n    ], \"key\");\n    if (PrivateKey.isPrivateKey(key)) key = key.toPublic();\n    utils.assertCompatible(issuer, Identity, [\n        1,\n        0\n    ], \"issuer\");\n    utils.assertCompatible(issuerKey, PrivateKey, [\n        1,\n        2\n    ], \"issuer key\");\n    assert.optionalObject(options, \"options\");\n    if (options === undefined) options = {};\n    assert.optionalObject(options.validFrom, \"options.validFrom\");\n    assert.optionalObject(options.validUntil, \"options.validUntil\");\n    var validFrom = options.validFrom;\n    var validUntil = options.validUntil;\n    if (validFrom === undefined) validFrom = new Date();\n    if (validUntil === undefined) {\n        assert.optionalNumber(options.lifetime, \"options.lifetime\");\n        var lifetime = options.lifetime;\n        if (lifetime === undefined) lifetime = 10 * 365 * 24 * 3600;\n        validUntil = new Date();\n        validUntil.setTime(validUntil.getTime() + lifetime * 1000);\n    }\n    assert.optionalBuffer(options.serial, \"options.serial\");\n    var serial = options.serial;\n    if (serial === undefined) serial = Buffer.from(\"0000000000000001\", \"hex\");\n    var purposes = options.purposes;\n    if (purposes === undefined) purposes = [];\n    if (purposes.indexOf(\"signature\") === -1) purposes.push(\"signature\");\n    if (options.ca === true) {\n        if (purposes.indexOf(\"ca\") === -1) purposes.push(\"ca\");\n        if (purposes.indexOf(\"crl\") === -1) purposes.push(\"crl\");\n    }\n    var hostSubjects = subjects.filter(function(subject) {\n        return subject.type === \"host\";\n    });\n    var userSubjects = subjects.filter(function(subject) {\n        return subject.type === \"user\";\n    });\n    if (hostSubjects.length > 0) {\n        if (purposes.indexOf(\"serverAuth\") === -1) purposes.push(\"serverAuth\");\n    }\n    if (userSubjects.length > 0) {\n        if (purposes.indexOf(\"clientAuth\") === -1) purposes.push(\"clientAuth\");\n    }\n    if (userSubjects.length > 0 || hostSubjects.length > 0) {\n        if (purposes.indexOf(\"keyAgreement\") === -1) purposes.push(\"keyAgreement\");\n        if (key.type === \"rsa\" && purposes.indexOf(\"encryption\") === -1) purposes.push(\"encryption\");\n    }\n    var cert = new Certificate({\n        subjects: subjects,\n        issuer: issuer,\n        subjectKey: key,\n        issuerKey: issuerKey.toPublic(),\n        signatures: {},\n        serial: serial,\n        validFrom: validFrom,\n        validUntil: validUntil,\n        purposes: purposes\n    });\n    cert.signWith(issuerKey);\n    return cert;\n};\nCertificate.parse = function(data, format, options) {\n    if (typeof data !== \"string\") assert.buffer(data, \"data\");\n    if (format === undefined) format = \"auto\";\n    assert.string(format, \"format\");\n    if (typeof options === \"string\") options = {\n        filename: options\n    };\n    assert.optionalObject(options, \"options\");\n    if (options === undefined) options = {};\n    assert.optionalString(options.filename, \"options.filename\");\n    if (options.filename === undefined) options.filename = \"(unnamed)\";\n    assert.object(formats[format], \"formats[format]\");\n    try {\n        var k = formats[format].read(data, options);\n        return k;\n    } catch (e) {\n        throw new CertificateParseError(options.filename, format, e);\n    }\n};\nCertificate.isCertificate = function(obj, ver) {\n    return utils.isCompatible(obj, Certificate, ver);\n};\n/*\n * API versions for Certificate:\n * [1,0] -- initial ver\n * [1,1] -- openssh format now unpacks extensions\n */ Certificate.prototype._sshpkApiVersion = [\n    1,\n    1\n];\nCertificate._oldVersionDetect = function(obj) {\n    return [\n        1,\n        0\n    ];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/certificate.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/dhe.js":
/*!***************************************!*\
  !*** ./node_modules/sshpk/lib/dhe.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2017 Joyent, Inc.\nmodule.exports = {\n    DiffieHellman: DiffieHellman,\n    generateECDSA: generateECDSA,\n    generateED25519: generateED25519\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ./algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar nacl = __webpack_require__(/*! tweetnacl */ \"(rsc)/./node_modules/tweetnacl/nacl-fast.js\");\nvar Key = __webpack_require__(/*! ./key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ./private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar CRYPTO_HAVE_ECDH = crypto.createECDH !== undefined;\nvar ecdh = __webpack_require__(/*! ecc-jsbn */ \"(rsc)/./node_modules/ecc-jsbn/index.js\");\nvar ec = __webpack_require__(/*! ecc-jsbn/lib/ec */ \"(rsc)/./node_modules/ecc-jsbn/lib/ec.js\");\nvar jsbn = (__webpack_require__(/*! jsbn */ \"(rsc)/./node_modules/jsbn/index.js\").BigInteger);\nfunction DiffieHellman(key) {\n    utils.assertCompatible(key, Key, [\n        1,\n        4\n    ], \"key\");\n    this._isPriv = PrivateKey.isPrivateKey(key, [\n        1,\n        3\n    ]);\n    this._algo = key.type;\n    this._curve = key.curve;\n    this._key = key;\n    if (key.type === \"dsa\") {\n        if (!CRYPTO_HAVE_ECDH) {\n            throw new Error(\"Due to bugs in the node 0.10 \" + \"crypto API, node 0.12.x or later is required \" + \"to use DH\");\n        }\n        this._dh = crypto.createDiffieHellman(key.part.p.data, undefined, key.part.g.data, undefined);\n        this._p = key.part.p;\n        this._g = key.part.g;\n        if (this._isPriv) this._dh.setPrivateKey(key.part.x.data);\n        this._dh.setPublicKey(key.part.y.data);\n    } else if (key.type === \"ecdsa\") {\n        if (!CRYPTO_HAVE_ECDH) {\n            this._ecParams = new X9ECParameters(this._curve);\n            if (this._isPriv) {\n                this._priv = new ECPrivate(this._ecParams, key.part.d.data);\n            }\n            return;\n        }\n        var curve = {\n            \"nistp256\": \"prime256v1\",\n            \"nistp384\": \"secp384r1\",\n            \"nistp521\": \"secp521r1\"\n        }[key.curve];\n        this._dh = crypto.createECDH(curve);\n        if (typeof this._dh !== \"object\" || typeof this._dh.setPrivateKey !== \"function\") {\n            CRYPTO_HAVE_ECDH = false;\n            DiffieHellman.call(this, key);\n            return;\n        }\n        if (this._isPriv) this._dh.setPrivateKey(key.part.d.data);\n        this._dh.setPublicKey(key.part.Q.data);\n    } else if (key.type === \"curve25519\") {\n        if (this._isPriv) {\n            utils.assertCompatible(key, PrivateKey, [\n                1,\n                5\n            ], \"key\");\n            this._priv = key.part.k.data;\n        }\n    } else {\n        throw new Error(\"DH not supported for \" + key.type + \" keys\");\n    }\n}\nDiffieHellman.prototype.getPublicKey = function() {\n    if (this._isPriv) return this._key.toPublic();\n    return this._key;\n};\nDiffieHellman.prototype.getPrivateKey = function() {\n    if (this._isPriv) return this._key;\n    else return undefined;\n};\nDiffieHellman.prototype.getKey = DiffieHellman.prototype.getPrivateKey;\nDiffieHellman.prototype._keyCheck = function(pk, isPub) {\n    assert.object(pk, \"key\");\n    if (!isPub) utils.assertCompatible(pk, PrivateKey, [\n        1,\n        3\n    ], \"key\");\n    utils.assertCompatible(pk, Key, [\n        1,\n        4\n    ], \"key\");\n    if (pk.type !== this._algo) {\n        throw new Error(\"A \" + pk.type + \" key cannot be used in \" + this._algo + \" Diffie-Hellman\");\n    }\n    if (pk.curve !== this._curve) {\n        throw new Error(\"A key from the \" + pk.curve + \" curve \" + \"cannot be used with a \" + this._curve + \" Diffie-Hellman\");\n    }\n    if (pk.type === \"dsa\") {\n        assert.deepEqual(pk.part.p, this._p, \"DSA key prime does not match\");\n        assert.deepEqual(pk.part.g, this._g, \"DSA key generator does not match\");\n    }\n};\nDiffieHellman.prototype.setKey = function(pk) {\n    this._keyCheck(pk);\n    if (pk.type === \"dsa\") {\n        this._dh.setPrivateKey(pk.part.x.data);\n        this._dh.setPublicKey(pk.part.y.data);\n    } else if (pk.type === \"ecdsa\") {\n        if (CRYPTO_HAVE_ECDH) {\n            this._dh.setPrivateKey(pk.part.d.data);\n            this._dh.setPublicKey(pk.part.Q.data);\n        } else {\n            this._priv = new ECPrivate(this._ecParams, pk.part.d.data);\n        }\n    } else if (pk.type === \"curve25519\") {\n        var k = pk.part.k;\n        if (!pk.part.k) k = pk.part.r;\n        this._priv = k.data;\n        if (this._priv[0] === 0x00) this._priv = this._priv.slice(1);\n        this._priv = this._priv.slice(0, 32);\n    }\n    this._key = pk;\n    this._isPriv = true;\n};\nDiffieHellman.prototype.setPrivateKey = DiffieHellman.prototype.setKey;\nDiffieHellman.prototype.computeSecret = function(otherpk) {\n    this._keyCheck(otherpk, true);\n    if (!this._isPriv) throw new Error(\"DH exchange has not been initialized with \" + \"a private key yet\");\n    var pub;\n    if (this._algo === \"dsa\") {\n        return this._dh.computeSecret(otherpk.part.y.data);\n    } else if (this._algo === \"ecdsa\") {\n        if (CRYPTO_HAVE_ECDH) {\n            return this._dh.computeSecret(otherpk.part.Q.data);\n        } else {\n            pub = new ECPublic(this._ecParams, otherpk.part.Q.data);\n            return this._priv.deriveSharedSecret(pub);\n        }\n    } else if (this._algo === \"curve25519\") {\n        pub = otherpk.part.A.data;\n        while(pub[0] === 0x00 && pub.length > 32)pub = pub.slice(1);\n        var priv = this._priv;\n        assert.strictEqual(pub.length, 32);\n        assert.strictEqual(priv.length, 32);\n        var secret = nacl.box.before(new Uint8Array(pub), new Uint8Array(priv));\n        return Buffer.from(secret);\n    }\n    throw new Error(\"Invalid algorithm: \" + this._algo);\n};\nDiffieHellman.prototype.generateKey = function() {\n    var parts = [];\n    var priv, pub;\n    if (this._algo === \"dsa\") {\n        this._dh.generateKeys();\n        parts.push({\n            name: \"p\",\n            data: this._p.data\n        });\n        parts.push({\n            name: \"q\",\n            data: this._key.part.q.data\n        });\n        parts.push({\n            name: \"g\",\n            data: this._g.data\n        });\n        parts.push({\n            name: \"y\",\n            data: this._dh.getPublicKey()\n        });\n        parts.push({\n            name: \"x\",\n            data: this._dh.getPrivateKey()\n        });\n        this._key = new PrivateKey({\n            type: \"dsa\",\n            parts: parts\n        });\n        this._isPriv = true;\n        return this._key;\n    } else if (this._algo === \"ecdsa\") {\n        if (CRYPTO_HAVE_ECDH) {\n            this._dh.generateKeys();\n            parts.push({\n                name: \"curve\",\n                data: Buffer.from(this._curve)\n            });\n            parts.push({\n                name: \"Q\",\n                data: this._dh.getPublicKey()\n            });\n            parts.push({\n                name: \"d\",\n                data: this._dh.getPrivateKey()\n            });\n            this._key = new PrivateKey({\n                type: \"ecdsa\",\n                curve: this._curve,\n                parts: parts\n            });\n            this._isPriv = true;\n            return this._key;\n        } else {\n            var n = this._ecParams.getN();\n            var r = new jsbn(crypto.randomBytes(n.bitLength()));\n            var n1 = n.subtract(jsbn.ONE);\n            priv = r.mod(n1).add(jsbn.ONE);\n            pub = this._ecParams.getG().multiply(priv);\n            priv = Buffer.from(priv.toByteArray());\n            pub = Buffer.from(this._ecParams.getCurve().encodePointHex(pub), \"hex\");\n            this._priv = new ECPrivate(this._ecParams, priv);\n            parts.push({\n                name: \"curve\",\n                data: Buffer.from(this._curve)\n            });\n            parts.push({\n                name: \"Q\",\n                data: pub\n            });\n            parts.push({\n                name: \"d\",\n                data: priv\n            });\n            this._key = new PrivateKey({\n                type: \"ecdsa\",\n                curve: this._curve,\n                parts: parts\n            });\n            this._isPriv = true;\n            return this._key;\n        }\n    } else if (this._algo === \"curve25519\") {\n        var pair = nacl.box.keyPair();\n        priv = Buffer.from(pair.secretKey);\n        pub = Buffer.from(pair.publicKey);\n        priv = Buffer.concat([\n            priv,\n            pub\n        ]);\n        assert.strictEqual(priv.length, 64);\n        assert.strictEqual(pub.length, 32);\n        parts.push({\n            name: \"A\",\n            data: pub\n        });\n        parts.push({\n            name: \"k\",\n            data: priv\n        });\n        this._key = new PrivateKey({\n            type: \"curve25519\",\n            parts: parts\n        });\n        this._isPriv = true;\n        return this._key;\n    }\n    throw new Error(\"Invalid algorithm: \" + this._algo);\n};\nDiffieHellman.prototype.generateKeys = DiffieHellman.prototype.generateKey;\n/* These are helpers for using ecc-jsbn (for node 0.10 compatibility). */ function X9ECParameters(name) {\n    var params = algs.curves[name];\n    assert.object(params);\n    var p = new jsbn(params.p);\n    var a = new jsbn(params.a);\n    var b = new jsbn(params.b);\n    var n = new jsbn(params.n);\n    var h = jsbn.ONE;\n    var curve = new ec.ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(params.G.toString(\"hex\"));\n    this.curve = curve;\n    this.g = G;\n    this.n = n;\n    this.h = h;\n}\nX9ECParameters.prototype.getCurve = function() {\n    return this.curve;\n};\nX9ECParameters.prototype.getG = function() {\n    return this.g;\n};\nX9ECParameters.prototype.getN = function() {\n    return this.n;\n};\nX9ECParameters.prototype.getH = function() {\n    return this.h;\n};\nfunction ECPublic(params, buffer) {\n    this._params = params;\n    if (buffer[0] === 0x00) buffer = buffer.slice(1);\n    this._pub = params.getCurve().decodePointHex(buffer.toString(\"hex\"));\n}\nfunction ECPrivate(params, buffer) {\n    this._params = params;\n    this._priv = new jsbn(utils.mpNormalize(buffer));\n}\nECPrivate.prototype.deriveSharedSecret = function(pubKey) {\n    assert.ok(pubKey instanceof ECPublic);\n    var S = pubKey._pub.multiply(this._priv);\n    return Buffer.from(S.getX().toBigInteger().toByteArray());\n};\nfunction generateED25519() {\n    var pair = nacl.sign.keyPair();\n    var priv = Buffer.from(pair.secretKey);\n    var pub = Buffer.from(pair.publicKey);\n    assert.strictEqual(priv.length, 64);\n    assert.strictEqual(pub.length, 32);\n    var parts = [];\n    parts.push({\n        name: \"A\",\n        data: pub\n    });\n    parts.push({\n        name: \"k\",\n        data: priv.slice(0, 32)\n    });\n    var key = new PrivateKey({\n        type: \"ed25519\",\n        parts: parts\n    });\n    return key;\n}\n/* Generates a new ECDSA private key on a given curve. */ function generateECDSA(curve) {\n    var parts = [];\n    var key;\n    if (CRYPTO_HAVE_ECDH) {\n        /*\n\t\t * Node crypto doesn't expose key generation directly, but the\n\t\t * ECDH instances can generate keys. It turns out this just\n\t\t * calls into the OpenSSL generic key generator, and we can\n\t\t * read its output happily without doing an actual DH. So we\n\t\t * use that here.\n\t\t */ var osCurve = {\n            \"nistp256\": \"prime256v1\",\n            \"nistp384\": \"secp384r1\",\n            \"nistp521\": \"secp521r1\"\n        }[curve];\n        var dh = crypto.createECDH(osCurve);\n        dh.generateKeys();\n        parts.push({\n            name: \"curve\",\n            data: Buffer.from(curve)\n        });\n        parts.push({\n            name: \"Q\",\n            data: dh.getPublicKey()\n        });\n        parts.push({\n            name: \"d\",\n            data: dh.getPrivateKey()\n        });\n        key = new PrivateKey({\n            type: \"ecdsa\",\n            curve: curve,\n            parts: parts\n        });\n        return key;\n    } else {\n        var ecParams = new X9ECParameters(curve);\n        /* This algorithm taken from FIPS PUB 186-4 (section B.4.1) */ var n = ecParams.getN();\n        /*\n\t\t * The crypto.randomBytes() function can only give us whole\n\t\t * bytes, so taking a nod from X9.62, we round up.\n\t\t */ var cByteLen = Math.ceil((n.bitLength() + 64) / 8);\n        var c = new jsbn(crypto.randomBytes(cByteLen));\n        var n1 = n.subtract(jsbn.ONE);\n        var priv = c.mod(n1).add(jsbn.ONE);\n        var pub = ecParams.getG().multiply(priv);\n        priv = Buffer.from(priv.toByteArray());\n        pub = Buffer.from(ecParams.getCurve().encodePointHex(pub), \"hex\");\n        parts.push({\n            name: \"curve\",\n            data: Buffer.from(curve)\n        });\n        parts.push({\n            name: \"Q\",\n            data: pub\n        });\n        parts.push({\n            name: \"d\",\n            data: priv\n        });\n        key = new PrivateKey({\n            type: \"ecdsa\",\n            curve: curve,\n            parts: parts\n        });\n        return key;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/dhe.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/ed-compat.js":
/*!*********************************************!*\
  !*** ./node_modules/sshpk/lib/ed-compat.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\nmodule.exports = {\n    Verifier: Verifier,\n    Signer: Signer\n};\nvar nacl = __webpack_require__(/*! tweetnacl */ \"(rsc)/./node_modules/tweetnacl/nacl-fast.js\");\nvar stream = __webpack_require__(/*! stream */ \"stream\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar Signature = __webpack_require__(/*! ./signature */ \"(rsc)/./node_modules/sshpk/lib/signature.js\");\nfunction Verifier(key, hashAlgo) {\n    if (hashAlgo.toLowerCase() !== \"sha512\") throw new Error(\"ED25519 only supports the use of \" + \"SHA-512 hashes\");\n    this.key = key;\n    this.chunks = [];\n    stream.Writable.call(this, {});\n}\nutil.inherits(Verifier, stream.Writable);\nVerifier.prototype._write = function(chunk, enc, cb) {\n    this.chunks.push(chunk);\n    cb();\n};\nVerifier.prototype.update = function(chunk) {\n    if (typeof chunk === \"string\") chunk = Buffer.from(chunk, \"binary\");\n    this.chunks.push(chunk);\n};\nVerifier.prototype.verify = function(signature, fmt) {\n    var sig;\n    if (Signature.isSignature(signature, [\n        2,\n        0\n    ])) {\n        if (signature.type !== \"ed25519\") return false;\n        sig = signature.toBuffer(\"raw\");\n    } else if (typeof signature === \"string\") {\n        sig = Buffer.from(signature, \"base64\");\n    } else if (Signature.isSignature(signature, [\n        1,\n        0\n    ])) {\n        throw new Error(\"signature was created by too old \" + \"a version of sshpk and cannot be verified\");\n    }\n    assert.buffer(sig);\n    return nacl.sign.detached.verify(new Uint8Array(Buffer.concat(this.chunks)), new Uint8Array(sig), new Uint8Array(this.key.part.A.data));\n};\nfunction Signer(key, hashAlgo) {\n    if (hashAlgo.toLowerCase() !== \"sha512\") throw new Error(\"ED25519 only supports the use of \" + \"SHA-512 hashes\");\n    this.key = key;\n    this.chunks = [];\n    stream.Writable.call(this, {});\n}\nutil.inherits(Signer, stream.Writable);\nSigner.prototype._write = function(chunk, enc, cb) {\n    this.chunks.push(chunk);\n    cb();\n};\nSigner.prototype.update = function(chunk) {\n    if (typeof chunk === \"string\") chunk = Buffer.from(chunk, \"binary\");\n    this.chunks.push(chunk);\n};\nSigner.prototype.sign = function() {\n    var sig = nacl.sign.detached(new Uint8Array(Buffer.concat(this.chunks)), new Uint8Array(Buffer.concat([\n        this.key.part.k.data,\n        this.key.part.A.data\n    ])));\n    var sigBuf = Buffer.from(sig);\n    var sigObj = Signature.parse(sigBuf, \"ed25519\", \"raw\");\n    sigObj.hashAlgorithm = \"sha512\";\n    return sigObj;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL2VkLWNvbXBhdC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4QkFBOEI7QUFFOUJBLE9BQU9DLE9BQU8sR0FBRztJQUNoQkMsVUFBVUE7SUFDVkMsUUFBUUE7QUFDVDtBQUVBLElBQUlDLE9BQU9DLG1CQUFPQSxDQUFDO0FBQ25CLElBQUlDLFNBQVNELG1CQUFPQSxDQUFDO0FBQ3JCLElBQUlFLE9BQU9GLG1CQUFPQSxDQUFDO0FBQ25CLElBQUlHLFNBQVNILG1CQUFPQSxDQUFDO0FBQ3JCLElBQUlJLFNBQVNKLDhGQUE4QjtBQUMzQyxJQUFJSyxZQUFZTCxtQkFBT0EsQ0FBQztBQUV4QixTQUFTSCxTQUFTUyxHQUFHLEVBQUVDLFFBQVE7SUFDOUIsSUFBSUEsU0FBU0MsV0FBVyxPQUFPLFVBQzlCLE1BQU8sSUFBSUMsTUFBTSxzQ0FDYjtJQUVMLElBQUksQ0FBQ0gsR0FBRyxHQUFHQTtJQUNYLElBQUksQ0FBQ0ksTUFBTSxHQUFHLEVBQUU7SUFFaEJULE9BQU9VLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQzdCO0FBQ0FWLEtBQUtXLFFBQVEsQ0FBQ2hCLFVBQVVJLE9BQU9VLFFBQVE7QUFFdkNkLFNBQVNpQixTQUFTLENBQUNDLE1BQU0sR0FBRyxTQUFVQyxLQUFLLEVBQUVDLEdBQUcsRUFBRUMsRUFBRTtJQUNuRCxJQUFJLENBQUNSLE1BQU0sQ0FBQ1MsSUFBSSxDQUFDSDtJQUNqQkU7QUFDRDtBQUVBckIsU0FBU2lCLFNBQVMsQ0FBQ00sTUFBTSxHQUFHLFNBQVVKLEtBQUs7SUFDMUMsSUFBSSxPQUFRQSxVQUFXLFVBQ3RCQSxRQUFRWixPQUFPaUIsSUFBSSxDQUFDTCxPQUFPO0lBQzVCLElBQUksQ0FBQ04sTUFBTSxDQUFDUyxJQUFJLENBQUNIO0FBQ2xCO0FBRUFuQixTQUFTaUIsU0FBUyxDQUFDUSxNQUFNLEdBQUcsU0FBVUMsU0FBUyxFQUFFQyxHQUFHO0lBQ25ELElBQUlDO0lBQ0osSUFBSXBCLFVBQVVxQixXQUFXLENBQUNILFdBQVc7UUFBQztRQUFHO0tBQUUsR0FBRztRQUM3QyxJQUFJQSxVQUFVSSxJQUFJLEtBQUssV0FDdEIsT0FBUTtRQUNURixNQUFNRixVQUFVSyxRQUFRLENBQUM7SUFFMUIsT0FBTyxJQUFJLE9BQVFMLGNBQWUsVUFBVTtRQUMzQ0UsTUFBTXJCLE9BQU9pQixJQUFJLENBQUNFLFdBQVc7SUFFOUIsT0FBTyxJQUFJbEIsVUFBVXFCLFdBQVcsQ0FBQ0gsV0FBVztRQUFDO1FBQUc7S0FBRSxHQUFHO1FBQ3BELE1BQU8sSUFBSWQsTUFBTSxzQ0FDYjtJQUNMO0lBRUFOLE9BQU8wQixNQUFNLENBQUNKO0lBQ2QsT0FBUTFCLEtBQUsrQixJQUFJLENBQUNDLFFBQVEsQ0FBQ1QsTUFBTSxDQUM3QixJQUFJVSxXQUFXNUIsT0FBTzZCLE1BQU0sQ0FBQyxJQUFJLENBQUN2QixNQUFNLElBQ3hDLElBQUlzQixXQUFXUCxNQUNmLElBQUlPLFdBQVcsSUFBSSxDQUFDMUIsR0FBRyxDQUFDNEIsSUFBSSxDQUFDQyxDQUFDLENBQUNDLElBQUk7QUFDeEM7QUFFQSxTQUFTdEMsT0FBT1EsR0FBRyxFQUFFQyxRQUFRO0lBQzVCLElBQUlBLFNBQVNDLFdBQVcsT0FBTyxVQUM5QixNQUFPLElBQUlDLE1BQU0sc0NBQ2I7SUFFTCxJQUFJLENBQUNILEdBQUcsR0FBR0E7SUFDWCxJQUFJLENBQUNJLE1BQU0sR0FBRyxFQUFFO0lBRWhCVCxPQUFPVSxRQUFRLENBQUNDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUM3QjtBQUNBVixLQUFLVyxRQUFRLENBQUNmLFFBQVFHLE9BQU9VLFFBQVE7QUFFckNiLE9BQU9nQixTQUFTLENBQUNDLE1BQU0sR0FBRyxTQUFVQyxLQUFLLEVBQUVDLEdBQUcsRUFBRUMsRUFBRTtJQUNqRCxJQUFJLENBQUNSLE1BQU0sQ0FBQ1MsSUFBSSxDQUFDSDtJQUNqQkU7QUFDRDtBQUVBcEIsT0FBT2dCLFNBQVMsQ0FBQ00sTUFBTSxHQUFHLFNBQVVKLEtBQUs7SUFDeEMsSUFBSSxPQUFRQSxVQUFXLFVBQ3RCQSxRQUFRWixPQUFPaUIsSUFBSSxDQUFDTCxPQUFPO0lBQzVCLElBQUksQ0FBQ04sTUFBTSxDQUFDUyxJQUFJLENBQUNIO0FBQ2xCO0FBRUFsQixPQUFPZ0IsU0FBUyxDQUFDZ0IsSUFBSSxHQUFHO0lBQ3ZCLElBQUlMLE1BQU0xQixLQUFLK0IsSUFBSSxDQUFDQyxRQUFRLENBQ3hCLElBQUlDLFdBQVc1QixPQUFPNkIsTUFBTSxDQUFDLElBQUksQ0FBQ3ZCLE1BQU0sSUFDeEMsSUFBSXNCLFdBQVc1QixPQUFPNkIsTUFBTSxDQUFDO1FBQ2hDLElBQUksQ0FBQzNCLEdBQUcsQ0FBQzRCLElBQUksQ0FBQ0csQ0FBQyxDQUFDRCxJQUFJO1FBQUUsSUFBSSxDQUFDOUIsR0FBRyxDQUFDNEIsSUFBSSxDQUFDQyxDQUFDLENBQUNDLElBQUk7S0FBQztJQUM1QyxJQUFJRSxTQUFTbEMsT0FBT2lCLElBQUksQ0FBQ0k7SUFDekIsSUFBSWMsU0FBU2xDLFVBQVVtQyxLQUFLLENBQUNGLFFBQVEsV0FBVztJQUNoREMsT0FBT0UsYUFBYSxHQUFHO0lBQ3ZCLE9BQVFGO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaXZpbC1lbmdpbmVlcmluZy1wbGF0Zm9ybS8uL25vZGVfbW9kdWxlcy9zc2hway9saWIvZWQtY29tcGF0LmpzP2YwODAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUgSm95ZW50LCBJbmMuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRWZXJpZmllcjogVmVyaWZpZXIsXG5cdFNpZ25lcjogU2lnbmVyXG59O1xuXG52YXIgbmFjbCA9IHJlcXVpcmUoJ3R3ZWV0bmFjbCcpO1xudmFyIHN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpO1xudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0LXBsdXMnKTtcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlci1idWZmZXInKS5CdWZmZXI7XG52YXIgU2lnbmF0dXJlID0gcmVxdWlyZSgnLi9zaWduYXR1cmUnKTtcblxuZnVuY3Rpb24gVmVyaWZpZXIoa2V5LCBoYXNoQWxnbykge1xuXHRpZiAoaGFzaEFsZ28udG9Mb3dlckNhc2UoKSAhPT0gJ3NoYTUxMicpXG5cdFx0dGhyb3cgKG5ldyBFcnJvcignRUQyNTUxOSBvbmx5IHN1cHBvcnRzIHRoZSB1c2Ugb2YgJyArXG5cdFx0ICAgICdTSEEtNTEyIGhhc2hlcycpKTtcblxuXHR0aGlzLmtleSA9IGtleTtcblx0dGhpcy5jaHVua3MgPSBbXTtcblxuXHRzdHJlYW0uV3JpdGFibGUuY2FsbCh0aGlzLCB7fSk7XG59XG51dGlsLmluaGVyaXRzKFZlcmlmaWVyLCBzdHJlYW0uV3JpdGFibGUpO1xuXG5WZXJpZmllci5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmMsIGNiKSB7XG5cdHRoaXMuY2h1bmtzLnB1c2goY2h1bmspO1xuXHRjYigpO1xufTtcblxuVmVyaWZpZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChjaHVuaykge1xuXHRpZiAodHlwZW9mIChjaHVuaykgPT09ICdzdHJpbmcnKVxuXHRcdGNodW5rID0gQnVmZmVyLmZyb20oY2h1bmssICdiaW5hcnknKTtcblx0dGhpcy5jaHVua3MucHVzaChjaHVuayk7XG59O1xuXG5WZXJpZmllci5wcm90b3R5cGUudmVyaWZ5ID0gZnVuY3Rpb24gKHNpZ25hdHVyZSwgZm10KSB7XG5cdHZhciBzaWc7XG5cdGlmIChTaWduYXR1cmUuaXNTaWduYXR1cmUoc2lnbmF0dXJlLCBbMiwgMF0pKSB7XG5cdFx0aWYgKHNpZ25hdHVyZS50eXBlICE9PSAnZWQyNTUxOScpXG5cdFx0XHRyZXR1cm4gKGZhbHNlKTtcblx0XHRzaWcgPSBzaWduYXR1cmUudG9CdWZmZXIoJ3JhdycpO1xuXG5cdH0gZWxzZSBpZiAodHlwZW9mIChzaWduYXR1cmUpID09PSAnc3RyaW5nJykge1xuXHRcdHNpZyA9IEJ1ZmZlci5mcm9tKHNpZ25hdHVyZSwgJ2Jhc2U2NCcpO1xuXG5cdH0gZWxzZSBpZiAoU2lnbmF0dXJlLmlzU2lnbmF0dXJlKHNpZ25hdHVyZSwgWzEsIDBdKSkge1xuXHRcdHRocm93IChuZXcgRXJyb3IoJ3NpZ25hdHVyZSB3YXMgY3JlYXRlZCBieSB0b28gb2xkICcgK1xuXHRcdCAgICAnYSB2ZXJzaW9uIG9mIHNzaHBrIGFuZCBjYW5ub3QgYmUgdmVyaWZpZWQnKSk7XG5cdH1cblxuXHRhc3NlcnQuYnVmZmVyKHNpZyk7XG5cdHJldHVybiAobmFjbC5zaWduLmRldGFjaGVkLnZlcmlmeShcblx0ICAgIG5ldyBVaW50OEFycmF5KEJ1ZmZlci5jb25jYXQodGhpcy5jaHVua3MpKSxcblx0ICAgIG5ldyBVaW50OEFycmF5KHNpZyksXG5cdCAgICBuZXcgVWludDhBcnJheSh0aGlzLmtleS5wYXJ0LkEuZGF0YSkpKTtcbn07XG5cbmZ1bmN0aW9uIFNpZ25lcihrZXksIGhhc2hBbGdvKSB7XG5cdGlmIChoYXNoQWxnby50b0xvd2VyQ2FzZSgpICE9PSAnc2hhNTEyJylcblx0XHR0aHJvdyAobmV3IEVycm9yKCdFRDI1NTE5IG9ubHkgc3VwcG9ydHMgdGhlIHVzZSBvZiAnICtcblx0XHQgICAgJ1NIQS01MTIgaGFzaGVzJykpO1xuXG5cdHRoaXMua2V5ID0ga2V5O1xuXHR0aGlzLmNodW5rcyA9IFtdO1xuXG5cdHN0cmVhbS5Xcml0YWJsZS5jYWxsKHRoaXMsIHt9KTtcbn1cbnV0aWwuaW5oZXJpdHMoU2lnbmVyLCBzdHJlYW0uV3JpdGFibGUpO1xuXG5TaWduZXIucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jLCBjYikge1xuXHR0aGlzLmNodW5rcy5wdXNoKGNodW5rKTtcblx0Y2IoKTtcbn07XG5cblNpZ25lci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGNodW5rKSB7XG5cdGlmICh0eXBlb2YgKGNodW5rKSA9PT0gJ3N0cmluZycpXG5cdFx0Y2h1bmsgPSBCdWZmZXIuZnJvbShjaHVuaywgJ2JpbmFyeScpO1xuXHR0aGlzLmNodW5rcy5wdXNoKGNodW5rKTtcbn07XG5cblNpZ25lci5wcm90b3R5cGUuc2lnbiA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIHNpZyA9IG5hY2wuc2lnbi5kZXRhY2hlZChcblx0ICAgIG5ldyBVaW50OEFycmF5KEJ1ZmZlci5jb25jYXQodGhpcy5jaHVua3MpKSxcblx0ICAgIG5ldyBVaW50OEFycmF5KEJ1ZmZlci5jb25jYXQoW1xuXHRcdHRoaXMua2V5LnBhcnQuay5kYXRhLCB0aGlzLmtleS5wYXJ0LkEuZGF0YV0pKSk7XG5cdHZhciBzaWdCdWYgPSBCdWZmZXIuZnJvbShzaWcpO1xuXHR2YXIgc2lnT2JqID0gU2lnbmF0dXJlLnBhcnNlKHNpZ0J1ZiwgJ2VkMjU1MTknLCAncmF3Jyk7XG5cdHNpZ09iai5oYXNoQWxnb3JpdGhtID0gJ3NoYTUxMic7XG5cdHJldHVybiAoc2lnT2JqKTtcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIlZlcmlmaWVyIiwiU2lnbmVyIiwibmFjbCIsInJlcXVpcmUiLCJzdHJlYW0iLCJ1dGlsIiwiYXNzZXJ0IiwiQnVmZmVyIiwiU2lnbmF0dXJlIiwia2V5IiwiaGFzaEFsZ28iLCJ0b0xvd2VyQ2FzZSIsIkVycm9yIiwiY2h1bmtzIiwiV3JpdGFibGUiLCJjYWxsIiwiaW5oZXJpdHMiLCJwcm90b3R5cGUiLCJfd3JpdGUiLCJjaHVuayIsImVuYyIsImNiIiwicHVzaCIsInVwZGF0ZSIsImZyb20iLCJ2ZXJpZnkiLCJzaWduYXR1cmUiLCJmbXQiLCJzaWciLCJpc1NpZ25hdHVyZSIsInR5cGUiLCJ0b0J1ZmZlciIsImJ1ZmZlciIsInNpZ24iLCJkZXRhY2hlZCIsIlVpbnQ4QXJyYXkiLCJjb25jYXQiLCJwYXJ0IiwiQSIsImRhdGEiLCJrIiwic2lnQnVmIiwic2lnT2JqIiwicGFyc2UiLCJoYXNoQWxnb3JpdGhtIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/ed-compat.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/errors.js":
/*!******************************************!*\
  !*** ./node_modules/sshpk/lib/errors.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar util = __webpack_require__(/*! util */ \"util\");\nfunction FingerprintFormatError(fp, format) {\n    if (Error.captureStackTrace) Error.captureStackTrace(this, FingerprintFormatError);\n    this.name = \"FingerprintFormatError\";\n    this.fingerprint = fp;\n    this.format = format;\n    this.message = \"Fingerprint format is not supported, or is invalid: \";\n    if (fp !== undefined) this.message += \" fingerprint = \" + fp;\n    if (format !== undefined) this.message += \" format = \" + format;\n}\nutil.inherits(FingerprintFormatError, Error);\nfunction InvalidAlgorithmError(alg) {\n    if (Error.captureStackTrace) Error.captureStackTrace(this, InvalidAlgorithmError);\n    this.name = \"InvalidAlgorithmError\";\n    this.algorithm = alg;\n    this.message = 'Algorithm \"' + alg + '\" is not supported';\n}\nutil.inherits(InvalidAlgorithmError, Error);\nfunction KeyParseError(name, format, innerErr) {\n    if (Error.captureStackTrace) Error.captureStackTrace(this, KeyParseError);\n    this.name = \"KeyParseError\";\n    this.format = format;\n    this.keyName = name;\n    this.innerErr = innerErr;\n    this.message = \"Failed to parse \" + name + \" as a valid \" + format + \" format key: \" + innerErr.message;\n}\nutil.inherits(KeyParseError, Error);\nfunction SignatureParseError(type, format, innerErr) {\n    if (Error.captureStackTrace) Error.captureStackTrace(this, SignatureParseError);\n    this.name = \"SignatureParseError\";\n    this.type = type;\n    this.format = format;\n    this.innerErr = innerErr;\n    this.message = \"Failed to parse the given data as a \" + type + \" signature in \" + format + \" format: \" + innerErr.message;\n}\nutil.inherits(SignatureParseError, Error);\nfunction CertificateParseError(name, format, innerErr) {\n    if (Error.captureStackTrace) Error.captureStackTrace(this, CertificateParseError);\n    this.name = \"CertificateParseError\";\n    this.format = format;\n    this.certName = name;\n    this.innerErr = innerErr;\n    this.message = \"Failed to parse \" + name + \" as a valid \" + format + \" format certificate: \" + innerErr.message;\n}\nutil.inherits(CertificateParseError, Error);\nfunction KeyEncryptedError(name, format) {\n    if (Error.captureStackTrace) Error.captureStackTrace(this, KeyEncryptedError);\n    this.name = \"KeyEncryptedError\";\n    this.format = format;\n    this.keyName = name;\n    this.message = \"The \" + format + \" format key \" + name + \" is \" + \"encrypted (password-protected), and no passphrase was \" + \"provided in `options`\";\n}\nutil.inherits(KeyEncryptedError, Error);\nmodule.exports = {\n    FingerprintFormatError: FingerprintFormatError,\n    InvalidAlgorithmError: InvalidAlgorithmError,\n    KeyParseError: KeyParseError,\n    SignatureParseError: SignatureParseError,\n    KeyEncryptedError: KeyEncryptedError,\n    CertificateParseError: CertificateParseError\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4QkFBOEI7QUFFOUIsSUFBSUEsU0FBU0MsbUJBQU9BLENBQUM7QUFDckIsSUFBSUMsT0FBT0QsbUJBQU9BLENBQUM7QUFFbkIsU0FBU0UsdUJBQXVCQyxFQUFFLEVBQUVDLE1BQU07SUFDekMsSUFBSUMsTUFBTUMsaUJBQWlCLEVBQzFCRCxNQUFNQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUVKO0lBQy9CLElBQUksQ0FBQ0ssSUFBSSxHQUFHO0lBQ1osSUFBSSxDQUFDQyxXQUFXLEdBQUdMO0lBQ25CLElBQUksQ0FBQ0MsTUFBTSxHQUFHQTtJQUNkLElBQUksQ0FBQ0ssT0FBTyxHQUFHO0lBQ2YsSUFBSU4sT0FBT08sV0FDVixJQUFJLENBQUNELE9BQU8sSUFBSSxvQkFBb0JOO0lBQ3JDLElBQUlDLFdBQVdNLFdBQ2QsSUFBSSxDQUFDRCxPQUFPLElBQUksZUFBZUw7QUFDakM7QUFDQUgsS0FBS1UsUUFBUSxDQUFDVCx3QkFBd0JHO0FBRXRDLFNBQVNPLHNCQUFzQkMsR0FBRztJQUNqQyxJQUFJUixNQUFNQyxpQkFBaUIsRUFDMUJELE1BQU1DLGlCQUFpQixDQUFDLElBQUksRUFBRU07SUFDL0IsSUFBSSxDQUFDTCxJQUFJLEdBQUc7SUFDWixJQUFJLENBQUNPLFNBQVMsR0FBR0Q7SUFDakIsSUFBSSxDQUFDSixPQUFPLEdBQUcsZ0JBQWdCSSxNQUFNO0FBQ3RDO0FBQ0FaLEtBQUtVLFFBQVEsQ0FBQ0MsdUJBQXVCUDtBQUVyQyxTQUFTVSxjQUFjUixJQUFJLEVBQUVILE1BQU0sRUFBRVksUUFBUTtJQUM1QyxJQUFJWCxNQUFNQyxpQkFBaUIsRUFDMUJELE1BQU1DLGlCQUFpQixDQUFDLElBQUksRUFBRVM7SUFDL0IsSUFBSSxDQUFDUixJQUFJLEdBQUc7SUFDWixJQUFJLENBQUNILE1BQU0sR0FBR0E7SUFDZCxJQUFJLENBQUNhLE9BQU8sR0FBR1Y7SUFDZixJQUFJLENBQUNTLFFBQVEsR0FBR0E7SUFDaEIsSUFBSSxDQUFDUCxPQUFPLEdBQUcscUJBQXFCRixPQUFPLGlCQUFpQkgsU0FDeEQsa0JBQWtCWSxTQUFTUCxPQUFPO0FBQ3ZDO0FBQ0FSLEtBQUtVLFFBQVEsQ0FBQ0ksZUFBZVY7QUFFN0IsU0FBU2Esb0JBQW9CQyxJQUFJLEVBQUVmLE1BQU0sRUFBRVksUUFBUTtJQUNsRCxJQUFJWCxNQUFNQyxpQkFBaUIsRUFDMUJELE1BQU1DLGlCQUFpQixDQUFDLElBQUksRUFBRVk7SUFDL0IsSUFBSSxDQUFDWCxJQUFJLEdBQUc7SUFDWixJQUFJLENBQUNZLElBQUksR0FBR0E7SUFDWixJQUFJLENBQUNmLE1BQU0sR0FBR0E7SUFDZCxJQUFJLENBQUNZLFFBQVEsR0FBR0E7SUFDaEIsSUFBSSxDQUFDUCxPQUFPLEdBQUcseUNBQXlDVSxPQUNwRCxtQkFBbUJmLFNBQVMsY0FBY1ksU0FBU1AsT0FBTztBQUMvRDtBQUNBUixLQUFLVSxRQUFRLENBQUNPLHFCQUFxQmI7QUFFbkMsU0FBU2Usc0JBQXNCYixJQUFJLEVBQUVILE1BQU0sRUFBRVksUUFBUTtJQUNwRCxJQUFJWCxNQUFNQyxpQkFBaUIsRUFDMUJELE1BQU1DLGlCQUFpQixDQUFDLElBQUksRUFBRWM7SUFDL0IsSUFBSSxDQUFDYixJQUFJLEdBQUc7SUFDWixJQUFJLENBQUNILE1BQU0sR0FBR0E7SUFDZCxJQUFJLENBQUNpQixRQUFRLEdBQUdkO0lBQ2hCLElBQUksQ0FBQ1MsUUFBUSxHQUFHQTtJQUNoQixJQUFJLENBQUNQLE9BQU8sR0FBRyxxQkFBcUJGLE9BQU8saUJBQWlCSCxTQUN4RCwwQkFBMEJZLFNBQVNQLE9BQU87QUFDL0M7QUFDQVIsS0FBS1UsUUFBUSxDQUFDUyx1QkFBdUJmO0FBRXJDLFNBQVNpQixrQkFBa0JmLElBQUksRUFBRUgsTUFBTTtJQUN0QyxJQUFJQyxNQUFNQyxpQkFBaUIsRUFDMUJELE1BQU1DLGlCQUFpQixDQUFDLElBQUksRUFBRWdCO0lBQy9CLElBQUksQ0FBQ2YsSUFBSSxHQUFHO0lBQ1osSUFBSSxDQUFDSCxNQUFNLEdBQUdBO0lBQ2QsSUFBSSxDQUFDYSxPQUFPLEdBQUdWO0lBQ2YsSUFBSSxDQUFDRSxPQUFPLEdBQUcsU0FBU0wsU0FBUyxpQkFBaUJHLE9BQU8sU0FDckQsMkRBQ0E7QUFDTDtBQUNBTixLQUFLVSxRQUFRLENBQUNXLG1CQUFtQmpCO0FBRWpDa0IsT0FBT0MsT0FBTyxHQUFHO0lBQ2hCdEIsd0JBQXdCQTtJQUN4QlUsdUJBQXVCQTtJQUN2QkcsZUFBZUE7SUFDZkcscUJBQXFCQTtJQUNyQkksbUJBQW1CQTtJQUNuQkYsdUJBQXVCQTtBQUN4QiIsInNvdXJjZXMiOlsid2VicGFjazovL2NpdmlsLWVuZ2luZWVyaW5nLXBsYXRmb3JtLy4vbm9kZV9tb2R1bGVzL3NzaHBrL2xpYi9lcnJvcnMuanM/MmJiYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNSBKb3llbnQsIEluYy5cblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydC1wbHVzJyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxuZnVuY3Rpb24gRmluZ2VycHJpbnRGb3JtYXRFcnJvcihmcCwgZm9ybWF0KSB7XG5cdGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSlcblx0XHRFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBGaW5nZXJwcmludEZvcm1hdEVycm9yKTtcblx0dGhpcy5uYW1lID0gJ0ZpbmdlcnByaW50Rm9ybWF0RXJyb3InO1xuXHR0aGlzLmZpbmdlcnByaW50ID0gZnA7XG5cdHRoaXMuZm9ybWF0ID0gZm9ybWF0O1xuXHR0aGlzLm1lc3NhZ2UgPSAnRmluZ2VycHJpbnQgZm9ybWF0IGlzIG5vdCBzdXBwb3J0ZWQsIG9yIGlzIGludmFsaWQ6ICc7XG5cdGlmIChmcCAhPT0gdW5kZWZpbmVkKVxuXHRcdHRoaXMubWVzc2FnZSArPSAnIGZpbmdlcnByaW50ID0gJyArIGZwO1xuXHRpZiAoZm9ybWF0ICE9PSB1bmRlZmluZWQpXG5cdFx0dGhpcy5tZXNzYWdlICs9ICcgZm9ybWF0ID0gJyArIGZvcm1hdDtcbn1cbnV0aWwuaW5oZXJpdHMoRmluZ2VycHJpbnRGb3JtYXRFcnJvciwgRXJyb3IpO1xuXG5mdW5jdGlvbiBJbnZhbGlkQWxnb3JpdGhtRXJyb3IoYWxnKSB7XG5cdGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSlcblx0XHRFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBJbnZhbGlkQWxnb3JpdGhtRXJyb3IpO1xuXHR0aGlzLm5hbWUgPSAnSW52YWxpZEFsZ29yaXRobUVycm9yJztcblx0dGhpcy5hbGdvcml0aG0gPSBhbGc7XG5cdHRoaXMubWVzc2FnZSA9ICdBbGdvcml0aG0gXCInICsgYWxnICsgJ1wiIGlzIG5vdCBzdXBwb3J0ZWQnO1xufVxudXRpbC5pbmhlcml0cyhJbnZhbGlkQWxnb3JpdGhtRXJyb3IsIEVycm9yKTtcblxuZnVuY3Rpb24gS2V5UGFyc2VFcnJvcihuYW1lLCBmb3JtYXQsIGlubmVyRXJyKSB7XG5cdGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSlcblx0XHRFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBLZXlQYXJzZUVycm9yKTtcblx0dGhpcy5uYW1lID0gJ0tleVBhcnNlRXJyb3InO1xuXHR0aGlzLmZvcm1hdCA9IGZvcm1hdDtcblx0dGhpcy5rZXlOYW1lID0gbmFtZTtcblx0dGhpcy5pbm5lckVyciA9IGlubmVyRXJyO1xuXHR0aGlzLm1lc3NhZ2UgPSAnRmFpbGVkIHRvIHBhcnNlICcgKyBuYW1lICsgJyBhcyBhIHZhbGlkICcgKyBmb3JtYXQgK1xuXHQgICAgJyBmb3JtYXQga2V5OiAnICsgaW5uZXJFcnIubWVzc2FnZTtcbn1cbnV0aWwuaW5oZXJpdHMoS2V5UGFyc2VFcnJvciwgRXJyb3IpO1xuXG5mdW5jdGlvbiBTaWduYXR1cmVQYXJzZUVycm9yKHR5cGUsIGZvcm1hdCwgaW5uZXJFcnIpIHtcblx0aWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKVxuXHRcdEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIFNpZ25hdHVyZVBhcnNlRXJyb3IpO1xuXHR0aGlzLm5hbWUgPSAnU2lnbmF0dXJlUGFyc2VFcnJvcic7XG5cdHRoaXMudHlwZSA9IHR5cGU7XG5cdHRoaXMuZm9ybWF0ID0gZm9ybWF0O1xuXHR0aGlzLmlubmVyRXJyID0gaW5uZXJFcnI7XG5cdHRoaXMubWVzc2FnZSA9ICdGYWlsZWQgdG8gcGFyc2UgdGhlIGdpdmVuIGRhdGEgYXMgYSAnICsgdHlwZSArXG5cdCAgICAnIHNpZ25hdHVyZSBpbiAnICsgZm9ybWF0ICsgJyBmb3JtYXQ6ICcgKyBpbm5lckVyci5tZXNzYWdlO1xufVxudXRpbC5pbmhlcml0cyhTaWduYXR1cmVQYXJzZUVycm9yLCBFcnJvcik7XG5cbmZ1bmN0aW9uIENlcnRpZmljYXRlUGFyc2VFcnJvcihuYW1lLCBmb3JtYXQsIGlubmVyRXJyKSB7XG5cdGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSlcblx0XHRFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBDZXJ0aWZpY2F0ZVBhcnNlRXJyb3IpO1xuXHR0aGlzLm5hbWUgPSAnQ2VydGlmaWNhdGVQYXJzZUVycm9yJztcblx0dGhpcy5mb3JtYXQgPSBmb3JtYXQ7XG5cdHRoaXMuY2VydE5hbWUgPSBuYW1lO1xuXHR0aGlzLmlubmVyRXJyID0gaW5uZXJFcnI7XG5cdHRoaXMubWVzc2FnZSA9ICdGYWlsZWQgdG8gcGFyc2UgJyArIG5hbWUgKyAnIGFzIGEgdmFsaWQgJyArIGZvcm1hdCArXG5cdCAgICAnIGZvcm1hdCBjZXJ0aWZpY2F0ZTogJyArIGlubmVyRXJyLm1lc3NhZ2U7XG59XG51dGlsLmluaGVyaXRzKENlcnRpZmljYXRlUGFyc2VFcnJvciwgRXJyb3IpO1xuXG5mdW5jdGlvbiBLZXlFbmNyeXB0ZWRFcnJvcihuYW1lLCBmb3JtYXQpIHtcblx0aWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKVxuXHRcdEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIEtleUVuY3J5cHRlZEVycm9yKTtcblx0dGhpcy5uYW1lID0gJ0tleUVuY3J5cHRlZEVycm9yJztcblx0dGhpcy5mb3JtYXQgPSBmb3JtYXQ7XG5cdHRoaXMua2V5TmFtZSA9IG5hbWU7XG5cdHRoaXMubWVzc2FnZSA9ICdUaGUgJyArIGZvcm1hdCArICcgZm9ybWF0IGtleSAnICsgbmFtZSArICcgaXMgJyArXG5cdCAgICAnZW5jcnlwdGVkIChwYXNzd29yZC1wcm90ZWN0ZWQpLCBhbmQgbm8gcGFzc3BocmFzZSB3YXMgJyArXG5cdCAgICAncHJvdmlkZWQgaW4gYG9wdGlvbnNgJztcbn1cbnV0aWwuaW5oZXJpdHMoS2V5RW5jcnlwdGVkRXJyb3IsIEVycm9yKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdEZpbmdlcnByaW50Rm9ybWF0RXJyb3I6IEZpbmdlcnByaW50Rm9ybWF0RXJyb3IsXG5cdEludmFsaWRBbGdvcml0aG1FcnJvcjogSW52YWxpZEFsZ29yaXRobUVycm9yLFxuXHRLZXlQYXJzZUVycm9yOiBLZXlQYXJzZUVycm9yLFxuXHRTaWduYXR1cmVQYXJzZUVycm9yOiBTaWduYXR1cmVQYXJzZUVycm9yLFxuXHRLZXlFbmNyeXB0ZWRFcnJvcjogS2V5RW5jcnlwdGVkRXJyb3IsXG5cdENlcnRpZmljYXRlUGFyc2VFcnJvcjogQ2VydGlmaWNhdGVQYXJzZUVycm9yXG59O1xuIl0sIm5hbWVzIjpbImFzc2VydCIsInJlcXVpcmUiLCJ1dGlsIiwiRmluZ2VycHJpbnRGb3JtYXRFcnJvciIsImZwIiwiZm9ybWF0IiwiRXJyb3IiLCJjYXB0dXJlU3RhY2tUcmFjZSIsIm5hbWUiLCJmaW5nZXJwcmludCIsIm1lc3NhZ2UiLCJ1bmRlZmluZWQiLCJpbmhlcml0cyIsIkludmFsaWRBbGdvcml0aG1FcnJvciIsImFsZyIsImFsZ29yaXRobSIsIktleVBhcnNlRXJyb3IiLCJpbm5lckVyciIsImtleU5hbWUiLCJTaWduYXR1cmVQYXJzZUVycm9yIiwidHlwZSIsIkNlcnRpZmljYXRlUGFyc2VFcnJvciIsImNlcnROYW1lIiwiS2V5RW5jcnlwdGVkRXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/fingerprint.js":
/*!***********************************************!*\
  !*** ./node_modules/sshpk/lib/fingerprint.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2018 Joyent, Inc.\nmodule.exports = Fingerprint;\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ./algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar errs = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/sshpk/lib/errors.js\");\nvar Key = __webpack_require__(/*! ./key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ./private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar Certificate = __webpack_require__(/*! ./certificate */ \"(rsc)/./node_modules/sshpk/lib/certificate.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar FingerprintFormatError = errs.FingerprintFormatError;\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\nfunction Fingerprint(opts) {\n    assert.object(opts, \"options\");\n    assert.string(opts.type, \"options.type\");\n    assert.buffer(opts.hash, \"options.hash\");\n    assert.string(opts.algorithm, \"options.algorithm\");\n    this.algorithm = opts.algorithm.toLowerCase();\n    if (algs.hashAlgs[this.algorithm] !== true) throw new InvalidAlgorithmError(this.algorithm);\n    this.hash = opts.hash;\n    this.type = opts.type;\n    this.hashType = opts.hashType;\n}\nFingerprint.prototype.toString = function(format) {\n    if (format === undefined) {\n        if (this.algorithm === \"md5\" || this.hashType === \"spki\") format = \"hex\";\n        else format = \"base64\";\n    }\n    assert.string(format);\n    switch(format){\n        case \"hex\":\n            if (this.hashType === \"spki\") return this.hash.toString(\"hex\");\n            return addColons(this.hash.toString(\"hex\"));\n        case \"base64\":\n            if (this.hashType === \"spki\") return this.hash.toString(\"base64\");\n            return sshBase64Format(this.algorithm, this.hash.toString(\"base64\"));\n        default:\n            throw new FingerprintFormatError(undefined, format);\n    }\n};\nFingerprint.prototype.matches = function(other) {\n    assert.object(other, \"key or certificate\");\n    if (this.type === \"key\" && this.hashType !== \"ssh\") {\n        utils.assertCompatible(other, Key, [\n            1,\n            7\n        ], \"key with spki\");\n        if (PrivateKey.isPrivateKey(other)) {\n            utils.assertCompatible(other, PrivateKey, [\n                1,\n                6\n            ], \"privatekey with spki support\");\n        }\n    } else if (this.type === \"key\") {\n        utils.assertCompatible(other, Key, [\n            1,\n            0\n        ], \"key\");\n    } else {\n        utils.assertCompatible(other, Certificate, [\n            1,\n            0\n        ], \"certificate\");\n    }\n    var theirHash = other.hash(this.algorithm, this.hashType);\n    var theirHash2 = crypto.createHash(this.algorithm).update(theirHash).digest(\"base64\");\n    if (this.hash2 === undefined) this.hash2 = crypto.createHash(this.algorithm).update(this.hash).digest(\"base64\");\n    return this.hash2 === theirHash2;\n};\n/*JSSTYLED*/ var base64RE = /^[A-Za-z0-9+\\/=]+$/;\n/*JSSTYLED*/ var hexRE = /^[a-fA-F0-9]+$/;\nFingerprint.parse = function(fp, options) {\n    assert.string(fp, \"fingerprint\");\n    var alg, hash, enAlgs;\n    if (Array.isArray(options)) {\n        enAlgs = options;\n        options = {};\n    }\n    assert.optionalObject(options, \"options\");\n    if (options === undefined) options = {};\n    if (options.enAlgs !== undefined) enAlgs = options.enAlgs;\n    if (options.algorithms !== undefined) enAlgs = options.algorithms;\n    assert.optionalArrayOfString(enAlgs, \"algorithms\");\n    var hashType = \"ssh\";\n    if (options.hashType !== undefined) hashType = options.hashType;\n    assert.string(hashType, \"options.hashType\");\n    var parts = fp.split(\":\");\n    if (parts.length == 2) {\n        alg = parts[0].toLowerCase();\n        if (!base64RE.test(parts[1])) throw new FingerprintFormatError(fp);\n        try {\n            hash = Buffer.from(parts[1], \"base64\");\n        } catch (e) {\n            throw new FingerprintFormatError(fp);\n        }\n    } else if (parts.length > 2) {\n        alg = \"md5\";\n        if (parts[0].toLowerCase() === \"md5\") parts = parts.slice(1);\n        parts = parts.map(function(p) {\n            while(p.length < 2)p = \"0\" + p;\n            if (p.length > 2) throw new FingerprintFormatError(fp);\n            return p;\n        });\n        parts = parts.join(\"\");\n        if (!hexRE.test(parts) || parts.length % 2 !== 0) throw new FingerprintFormatError(fp);\n        try {\n            hash = Buffer.from(parts, \"hex\");\n        } catch (e) {\n            throw new FingerprintFormatError(fp);\n        }\n    } else {\n        if (hexRE.test(fp)) {\n            hash = Buffer.from(fp, \"hex\");\n        } else if (base64RE.test(fp)) {\n            hash = Buffer.from(fp, \"base64\");\n        } else {\n            throw new FingerprintFormatError(fp);\n        }\n        switch(hash.length){\n            case 32:\n                alg = \"sha256\";\n                break;\n            case 16:\n                alg = \"md5\";\n                break;\n            case 20:\n                alg = \"sha1\";\n                break;\n            case 64:\n                alg = \"sha512\";\n                break;\n            default:\n                throw new FingerprintFormatError(fp);\n        }\n        /* Plain hex/base64: guess it's probably SPKI unless told. */ if (options.hashType === undefined) hashType = \"spki\";\n    }\n    if (alg === undefined) throw new FingerprintFormatError(fp);\n    if (algs.hashAlgs[alg] === undefined) throw new InvalidAlgorithmError(alg);\n    if (enAlgs !== undefined) {\n        enAlgs = enAlgs.map(function(a) {\n            return a.toLowerCase();\n        });\n        if (enAlgs.indexOf(alg) === -1) throw new InvalidAlgorithmError(alg);\n    }\n    return new Fingerprint({\n        algorithm: alg,\n        hash: hash,\n        type: options.type || \"key\",\n        hashType: hashType\n    });\n};\nfunction addColons(s) {\n    /*JSSTYLED*/ return s.replace(/(.{2})(?=.)/g, \"$1:\");\n}\nfunction base64Strip(s) {\n    /*JSSTYLED*/ return s.replace(/=*$/, \"\");\n}\nfunction sshBase64Format(alg, h) {\n    return alg.toUpperCase() + \":\" + base64Strip(h);\n}\nFingerprint.isFingerprint = function(obj, ver) {\n    return utils.isCompatible(obj, Fingerprint, ver);\n};\n/*\n * API versions for Fingerprint:\n * [1,0] -- initial ver\n * [1,1] -- first tagged ver\n * [1,2] -- hashType and spki support\n */ Fingerprint.prototype._sshpkApiVersion = [\n    1,\n    2\n];\nFingerprint._oldVersionDetect = function(obj) {\n    assert.func(obj.toString);\n    assert.func(obj.matches);\n    return [\n        1,\n        0\n    ];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/fingerprint.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/formats/auto.js":
/*!************************************************!*\
  !*** ./node_modules/sshpk/lib/formats/auto.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2018 Joyent, Inc.\nmodule.exports = {\n    read: read,\n    write: write\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar Key = __webpack_require__(/*! ../key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar pem = __webpack_require__(/*! ./pem */ \"(rsc)/./node_modules/sshpk/lib/formats/pem.js\");\nvar ssh = __webpack_require__(/*! ./ssh */ \"(rsc)/./node_modules/sshpk/lib/formats/ssh.js\");\nvar rfc4253 = __webpack_require__(/*! ./rfc4253 */ \"(rsc)/./node_modules/sshpk/lib/formats/rfc4253.js\");\nvar dnssec = __webpack_require__(/*! ./dnssec */ \"(rsc)/./node_modules/sshpk/lib/formats/dnssec.js\");\nvar putty = __webpack_require__(/*! ./putty */ \"(rsc)/./node_modules/sshpk/lib/formats/putty.js\");\nvar DNSSEC_PRIVKEY_HEADER_PREFIX = \"Private-key-format: v1\";\nfunction read(buf, options) {\n    if (typeof buf === \"string\") {\n        if (buf.trim().match(/^[-]+[ ]*BEGIN/)) return pem.read(buf, options);\n        if (buf.match(/^\\s*ssh-[a-z]/)) return ssh.read(buf, options);\n        if (buf.match(/^\\s*ecdsa-/)) return ssh.read(buf, options);\n        if (buf.match(/^putty-user-key-file-2:/i)) return putty.read(buf, options);\n        if (findDNSSECHeader(buf)) return dnssec.read(buf, options);\n        buf = Buffer.from(buf, \"binary\");\n    } else {\n        assert.buffer(buf);\n        if (findPEMHeader(buf)) return pem.read(buf, options);\n        if (findSSHHeader(buf)) return ssh.read(buf, options);\n        if (findPuTTYHeader(buf)) return putty.read(buf, options);\n        if (findDNSSECHeader(buf)) return dnssec.read(buf, options);\n    }\n    if (buf.readUInt32BE(0) < buf.length) return rfc4253.read(buf, options);\n    throw new Error(\"Failed to auto-detect format of key\");\n}\nfunction findPuTTYHeader(buf) {\n    var offset = 0;\n    while(offset < buf.length && (buf[offset] === 32 || buf[offset] === 10 || buf[offset] === 9))++offset;\n    if (offset + 22 <= buf.length && buf.slice(offset, offset + 22).toString(\"ascii\").toLowerCase() === \"putty-user-key-file-2:\") return true;\n    return false;\n}\nfunction findSSHHeader(buf) {\n    var offset = 0;\n    while(offset < buf.length && (buf[offset] === 32 || buf[offset] === 10 || buf[offset] === 9))++offset;\n    if (offset + 4 <= buf.length && buf.slice(offset, offset + 4).toString(\"ascii\") === \"ssh-\") return true;\n    if (offset + 6 <= buf.length && buf.slice(offset, offset + 6).toString(\"ascii\") === \"ecdsa-\") return true;\n    return false;\n}\nfunction findPEMHeader(buf) {\n    var offset = 0;\n    while(offset < buf.length && (buf[offset] === 32 || buf[offset] === 10))++offset;\n    if (buf[offset] !== 45) return false;\n    while(offset < buf.length && buf[offset] === 45)++offset;\n    while(offset < buf.length && buf[offset] === 32)++offset;\n    if (offset + 5 > buf.length || buf.slice(offset, offset + 5).toString(\"ascii\") !== \"BEGIN\") return false;\n    return true;\n}\nfunction findDNSSECHeader(buf) {\n    // private case first\n    if (buf.length <= DNSSEC_PRIVKEY_HEADER_PREFIX.length) return false;\n    var headerCheck = buf.slice(0, DNSSEC_PRIVKEY_HEADER_PREFIX.length);\n    if (headerCheck.toString(\"ascii\") === DNSSEC_PRIVKEY_HEADER_PREFIX) return true;\n    // public-key RFC3110 ?\n    // 'domain.com. IN KEY ...' or 'domain.com. IN DNSKEY ...'\n    // skip any comment-lines\n    if (typeof buf !== \"string\") {\n        buf = buf.toString(\"ascii\");\n    }\n    var lines = buf.split(\"\\n\");\n    var line = 0;\n    /* JSSTYLED */ while(lines[line].match(/^\\;/))line++;\n    if (lines[line].toString(\"ascii\").match(/\\. IN KEY /)) return true;\n    if (lines[line].toString(\"ascii\").match(/\\. IN DNSKEY /)) return true;\n    return false;\n}\nfunction write(key, options) {\n    throw new Error('\"auto\" format cannot be used for writing');\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/formats/auto.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/formats/dnssec.js":
/*!**************************************************!*\
  !*** ./node_modules/sshpk/lib/formats/dnssec.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2017 Joyent, Inc.\nmodule.exports = {\n    read: read,\n    write: write\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar Key = __webpack_require__(/*! ../key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar SSHBuffer = __webpack_require__(/*! ../ssh-buffer */ \"(rsc)/./node_modules/sshpk/lib/ssh-buffer.js\");\nvar Dhe = __webpack_require__(/*! ../dhe */ \"(rsc)/./node_modules/sshpk/lib/dhe.js\");\nvar supportedAlgos = {\n    \"rsa-sha1\": 5,\n    \"rsa-sha256\": 8,\n    \"rsa-sha512\": 10,\n    \"ecdsa-p256-sha256\": 13,\n    \"ecdsa-p384-sha384\": 14\n};\nvar supportedAlgosById = {};\nObject.keys(supportedAlgos).forEach(function(k) {\n    supportedAlgosById[supportedAlgos[k]] = k.toUpperCase();\n});\nfunction read(buf, options) {\n    if (typeof buf !== \"string\") {\n        assert.buffer(buf, \"buf\");\n        buf = buf.toString(\"ascii\");\n    }\n    var lines = buf.split(\"\\n\");\n    if (lines[0].match(/^Private-key-format\\: v1/)) {\n        var algElems = lines[1].split(\" \");\n        var algoNum = parseInt(algElems[1], 10);\n        var algoName = algElems[2];\n        if (!supportedAlgosById[algoNum]) throw new Error(\"Unsupported algorithm: \" + algoName);\n        return readDNSSECPrivateKey(algoNum, lines.slice(2));\n    }\n    // skip any comment-lines\n    var line = 0;\n    /* JSSTYLED */ while(lines[line].match(/^\\;/))line++;\n    // we should now have *one single* line left with our KEY on it.\n    if ((lines[line].match(/\\. IN KEY /) || lines[line].match(/\\. IN DNSKEY /)) && lines[line + 1].length === 0) {\n        return readRFC3110(lines[line]);\n    }\n    throw new Error(\"Cannot parse dnssec key\");\n}\nfunction readRFC3110(keyString) {\n    var elems = keyString.split(\" \");\n    //unused var flags = parseInt(elems[3], 10);\n    //unused var protocol = parseInt(elems[4], 10);\n    var algorithm = parseInt(elems[5], 10);\n    if (!supportedAlgosById[algorithm]) throw new Error(\"Unsupported algorithm: \" + algorithm);\n    var base64key = elems.slice(6, elems.length).join();\n    var keyBuffer = Buffer.from(base64key, \"base64\");\n    if (supportedAlgosById[algorithm].match(/^RSA-/)) {\n        // join the rest of the body into a single base64-blob\n        var publicExponentLen = keyBuffer.readUInt8(0);\n        if (publicExponentLen != 3 && publicExponentLen != 1) throw new Error(\"Cannot parse dnssec key: \" + \"unsupported exponent length\");\n        var publicExponent = keyBuffer.slice(1, publicExponentLen + 1);\n        publicExponent = utils.mpNormalize(publicExponent);\n        var modulus = keyBuffer.slice(1 + publicExponentLen);\n        modulus = utils.mpNormalize(modulus);\n        // now, make the key\n        var rsaKey = {\n            type: \"rsa\",\n            parts: []\n        };\n        rsaKey.parts.push({\n            name: \"e\",\n            data: publicExponent\n        });\n        rsaKey.parts.push({\n            name: \"n\",\n            data: modulus\n        });\n        return new Key(rsaKey);\n    }\n    if (supportedAlgosById[algorithm] === \"ECDSA-P384-SHA384\" || supportedAlgosById[algorithm] === \"ECDSA-P256-SHA256\") {\n        var curve = \"nistp384\";\n        var size = 384;\n        if (supportedAlgosById[algorithm].match(/^ECDSA-P256-SHA256/)) {\n            curve = \"nistp256\";\n            size = 256;\n        }\n        var ecdsaKey = {\n            type: \"ecdsa\",\n            curve: curve,\n            size: size,\n            parts: [\n                {\n                    name: \"curve\",\n                    data: Buffer.from(curve)\n                },\n                {\n                    name: \"Q\",\n                    data: utils.ecNormalize(keyBuffer)\n                }\n            ]\n        };\n        return new Key(ecdsaKey);\n    }\n    throw new Error(\"Unsupported algorithm: \" + supportedAlgosById[algorithm]);\n}\nfunction elementToBuf(e) {\n    return Buffer.from(e.split(\" \")[1], \"base64\");\n}\nfunction readDNSSECRSAPrivateKey(elements) {\n    var rsaParams = {};\n    elements.forEach(function(element) {\n        if (element.split(\" \")[0] === \"Modulus:\") rsaParams[\"n\"] = elementToBuf(element);\n        else if (element.split(\" \")[0] === \"PublicExponent:\") rsaParams[\"e\"] = elementToBuf(element);\n        else if (element.split(\" \")[0] === \"PrivateExponent:\") rsaParams[\"d\"] = elementToBuf(element);\n        else if (element.split(\" \")[0] === \"Prime1:\") rsaParams[\"p\"] = elementToBuf(element);\n        else if (element.split(\" \")[0] === \"Prime2:\") rsaParams[\"q\"] = elementToBuf(element);\n        else if (element.split(\" \")[0] === \"Exponent1:\") rsaParams[\"dmodp\"] = elementToBuf(element);\n        else if (element.split(\" \")[0] === \"Exponent2:\") rsaParams[\"dmodq\"] = elementToBuf(element);\n        else if (element.split(\" \")[0] === \"Coefficient:\") rsaParams[\"iqmp\"] = elementToBuf(element);\n    });\n    // now, make the key\n    var key = {\n        type: \"rsa\",\n        parts: [\n            {\n                name: \"e\",\n                data: utils.mpNormalize(rsaParams[\"e\"])\n            },\n            {\n                name: \"n\",\n                data: utils.mpNormalize(rsaParams[\"n\"])\n            },\n            {\n                name: \"d\",\n                data: utils.mpNormalize(rsaParams[\"d\"])\n            },\n            {\n                name: \"p\",\n                data: utils.mpNormalize(rsaParams[\"p\"])\n            },\n            {\n                name: \"q\",\n                data: utils.mpNormalize(rsaParams[\"q\"])\n            },\n            {\n                name: \"dmodp\",\n                data: utils.mpNormalize(rsaParams[\"dmodp\"])\n            },\n            {\n                name: \"dmodq\",\n                data: utils.mpNormalize(rsaParams[\"dmodq\"])\n            },\n            {\n                name: \"iqmp\",\n                data: utils.mpNormalize(rsaParams[\"iqmp\"])\n            }\n        ]\n    };\n    return new PrivateKey(key);\n}\nfunction readDNSSECPrivateKey(alg, elements) {\n    if (supportedAlgosById[alg].match(/^RSA-/)) {\n        return readDNSSECRSAPrivateKey(elements);\n    }\n    if (supportedAlgosById[alg] === \"ECDSA-P384-SHA384\" || supportedAlgosById[alg] === \"ECDSA-P256-SHA256\") {\n        var d = Buffer.from(elements[0].split(\" \")[1], \"base64\");\n        var curve = \"nistp384\";\n        var size = 384;\n        if (supportedAlgosById[alg] === \"ECDSA-P256-SHA256\") {\n            curve = \"nistp256\";\n            size = 256;\n        }\n        // DNSSEC generates the public-key on the fly (go calculate it)\n        var publicKey = utils.publicFromPrivateECDSA(curve, d);\n        var Q = publicKey.part[\"Q\"].data;\n        var ecdsaKey = {\n            type: \"ecdsa\",\n            curve: curve,\n            size: size,\n            parts: [\n                {\n                    name: \"curve\",\n                    data: Buffer.from(curve)\n                },\n                {\n                    name: \"d\",\n                    data: d\n                },\n                {\n                    name: \"Q\",\n                    data: Q\n                }\n            ]\n        };\n        return new PrivateKey(ecdsaKey);\n    }\n    throw new Error(\"Unsupported algorithm: \" + supportedAlgosById[alg]);\n}\nfunction dnssecTimestamp(date) {\n    var year = date.getFullYear() + \"\"; //stringify\n    var month = date.getMonth() + 1;\n    var timestampStr = year + month + date.getUTCDate();\n    timestampStr += \"\" + date.getUTCHours() + date.getUTCMinutes();\n    timestampStr += date.getUTCSeconds();\n    return timestampStr;\n}\nfunction rsaAlgFromOptions(opts) {\n    if (!opts || !opts.hashAlgo || opts.hashAlgo === \"sha1\") return \"5 (RSASHA1)\";\n    else if (opts.hashAlgo === \"sha256\") return \"8 (RSASHA256)\";\n    else if (opts.hashAlgo === \"sha512\") return \"10 (RSASHA512)\";\n    else throw new Error(\"Unknown or unsupported hash: \" + opts.hashAlgo);\n}\nfunction writeRSA(key, options) {\n    // if we're missing parts, add them.\n    if (!key.part.dmodp || !key.part.dmodq) {\n        utils.addRSAMissing(key);\n    }\n    var out = \"\";\n    out += \"Private-key-format: v1.3\\n\";\n    out += \"Algorithm: \" + rsaAlgFromOptions(options) + \"\\n\";\n    var n = utils.mpDenormalize(key.part[\"n\"].data);\n    out += \"Modulus: \" + n.toString(\"base64\") + \"\\n\";\n    var e = utils.mpDenormalize(key.part[\"e\"].data);\n    out += \"PublicExponent: \" + e.toString(\"base64\") + \"\\n\";\n    var d = utils.mpDenormalize(key.part[\"d\"].data);\n    out += \"PrivateExponent: \" + d.toString(\"base64\") + \"\\n\";\n    var p = utils.mpDenormalize(key.part[\"p\"].data);\n    out += \"Prime1: \" + p.toString(\"base64\") + \"\\n\";\n    var q = utils.mpDenormalize(key.part[\"q\"].data);\n    out += \"Prime2: \" + q.toString(\"base64\") + \"\\n\";\n    var dmodp = utils.mpDenormalize(key.part[\"dmodp\"].data);\n    out += \"Exponent1: \" + dmodp.toString(\"base64\") + \"\\n\";\n    var dmodq = utils.mpDenormalize(key.part[\"dmodq\"].data);\n    out += \"Exponent2: \" + dmodq.toString(\"base64\") + \"\\n\";\n    var iqmp = utils.mpDenormalize(key.part[\"iqmp\"].data);\n    out += \"Coefficient: \" + iqmp.toString(\"base64\") + \"\\n\";\n    // Assume that we're valid as-of now\n    var timestamp = new Date();\n    out += \"Created: \" + dnssecTimestamp(timestamp) + \"\\n\";\n    out += \"Publish: \" + dnssecTimestamp(timestamp) + \"\\n\";\n    out += \"Activate: \" + dnssecTimestamp(timestamp) + \"\\n\";\n    return Buffer.from(out, \"ascii\");\n}\nfunction writeECDSA(key, options) {\n    var out = \"\";\n    out += \"Private-key-format: v1.3\\n\";\n    if (key.curve === \"nistp256\") {\n        out += \"Algorithm: 13 (ECDSAP256SHA256)\\n\";\n    } else if (key.curve === \"nistp384\") {\n        out += \"Algorithm: 14 (ECDSAP384SHA384)\\n\";\n    } else {\n        throw new Error(\"Unsupported curve\");\n    }\n    var base64Key = key.part[\"d\"].data.toString(\"base64\");\n    out += \"PrivateKey: \" + base64Key + \"\\n\";\n    // Assume that we're valid as-of now\n    var timestamp = new Date();\n    out += \"Created: \" + dnssecTimestamp(timestamp) + \"\\n\";\n    out += \"Publish: \" + dnssecTimestamp(timestamp) + \"\\n\";\n    out += \"Activate: \" + dnssecTimestamp(timestamp) + \"\\n\";\n    return Buffer.from(out, \"ascii\");\n}\nfunction write(key, options) {\n    if (PrivateKey.isPrivateKey(key)) {\n        if (key.type === \"rsa\") {\n            return writeRSA(key, options);\n        } else if (key.type === \"ecdsa\") {\n            return writeECDSA(key, options);\n        } else {\n            throw new Error(\"Unsupported algorithm: \" + key.type);\n        }\n    } else if (Key.isKey(key)) {\n        /*\n\t\t * RFC3110 requires a keyname, and a keytype, which we\n\t\t * don't really have a mechanism for specifying such\n\t\t * additional metadata.\n\t\t */ throw new Error('Format \"dnssec\" only supports ' + \"writing private keys\");\n    } else {\n        throw new Error(\"key is not a Key or PrivateKey\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/formats/dnssec.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/formats/openssh-cert.js":
/*!********************************************************!*\
  !*** ./node_modules/sshpk/lib/formats/openssh-cert.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2017 Joyent, Inc.\nmodule.exports = {\n    read: read,\n    verify: verify,\n    sign: sign,\n    signAsync: signAsync,\n    write: write,\n    /* Internal private API */ fromBuffer: fromBuffer,\n    toBuffer: toBuffer\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar SSHBuffer = __webpack_require__(/*! ../ssh-buffer */ \"(rsc)/./node_modules/sshpk/lib/ssh-buffer.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ../algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar Key = __webpack_require__(/*! ../key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar Identity = __webpack_require__(/*! ../identity */ \"(rsc)/./node_modules/sshpk/lib/identity.js\");\nvar rfc4253 = __webpack_require__(/*! ./rfc4253 */ \"(rsc)/./node_modules/sshpk/lib/formats/rfc4253.js\");\nvar Signature = __webpack_require__(/*! ../signature */ \"(rsc)/./node_modules/sshpk/lib/signature.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar Certificate = __webpack_require__(/*! ../certificate */ \"(rsc)/./node_modules/sshpk/lib/certificate.js\");\nfunction verify(cert, key) {\n    /*\n\t * We always give an issuerKey, so if our verify() is being called then\n\t * there was no signature. Return false.\n\t */ return false;\n}\nvar TYPES = {\n    \"user\": 1,\n    \"host\": 2\n};\nObject.keys(TYPES).forEach(function(k) {\n    TYPES[TYPES[k]] = k;\n});\nvar ECDSA_ALGO = /^ecdsa-sha2-([^@-]+)-cert-v01@openssh.com$/;\nfunction read(buf, options) {\n    if (Buffer.isBuffer(buf)) buf = buf.toString(\"ascii\");\n    var parts = buf.trim().split(/[ \\t\\n]+/g);\n    if (parts.length < 2 || parts.length > 3) throw new Error(\"Not a valid SSH certificate line\");\n    var algo = parts[0];\n    var data = parts[1];\n    data = Buffer.from(data, \"base64\");\n    return fromBuffer(data, algo);\n}\nfunction fromBuffer(data, algo, partial) {\n    var sshbuf = new SSHBuffer({\n        buffer: data\n    });\n    var innerAlgo = sshbuf.readString();\n    if (algo !== undefined && innerAlgo !== algo) throw new Error(\"SSH certificate algorithm mismatch\");\n    if (algo === undefined) algo = innerAlgo;\n    var cert = {};\n    cert.signatures = {};\n    cert.signatures.openssh = {};\n    cert.signatures.openssh.nonce = sshbuf.readBuffer();\n    var key = {};\n    var parts = key.parts = [];\n    key.type = getAlg(algo);\n    var partCount = algs.info[key.type].parts.length;\n    while(parts.length < partCount)parts.push(sshbuf.readPart());\n    assert.ok(parts.length >= 1, \"key must have at least one part\");\n    var algInfo = algs.info[key.type];\n    if (key.type === \"ecdsa\") {\n        var res = ECDSA_ALGO.exec(algo);\n        assert.ok(res !== null);\n        assert.strictEqual(res[1], parts[0].data.toString());\n    }\n    for(var i = 0; i < algInfo.parts.length; ++i){\n        parts[i].name = algInfo.parts[i];\n        if (parts[i].name !== \"curve\" && algInfo.normalize !== false) {\n            var p = parts[i];\n            p.data = utils.mpNormalize(p.data);\n        }\n    }\n    cert.subjectKey = new Key(key);\n    cert.serial = sshbuf.readInt64();\n    var type = TYPES[sshbuf.readInt()];\n    assert.string(type, \"valid cert type\");\n    cert.signatures.openssh.keyId = sshbuf.readString();\n    var principals = [];\n    var pbuf = sshbuf.readBuffer();\n    var psshbuf = new SSHBuffer({\n        buffer: pbuf\n    });\n    while(!psshbuf.atEnd())principals.push(psshbuf.readString());\n    if (principals.length === 0) principals = [\n        \"*\"\n    ];\n    cert.subjects = principals.map(function(pr) {\n        if (type === \"user\") return Identity.forUser(pr);\n        else if (type === \"host\") return Identity.forHost(pr);\n        throw new Error(\"Unknown identity type \" + type);\n    });\n    cert.validFrom = int64ToDate(sshbuf.readInt64());\n    cert.validUntil = int64ToDate(sshbuf.readInt64());\n    var exts = [];\n    var extbuf = new SSHBuffer({\n        buffer: sshbuf.readBuffer()\n    });\n    var ext;\n    while(!extbuf.atEnd()){\n        ext = {\n            critical: true\n        };\n        ext.name = extbuf.readString();\n        ext.data = extbuf.readBuffer();\n        exts.push(ext);\n    }\n    extbuf = new SSHBuffer({\n        buffer: sshbuf.readBuffer()\n    });\n    while(!extbuf.atEnd()){\n        ext = {\n            critical: false\n        };\n        ext.name = extbuf.readString();\n        ext.data = extbuf.readBuffer();\n        exts.push(ext);\n    }\n    cert.signatures.openssh.exts = exts;\n    /* reserved */ sshbuf.readBuffer();\n    var signingKeyBuf = sshbuf.readBuffer();\n    cert.issuerKey = rfc4253.read(signingKeyBuf);\n    /*\n\t * OpenSSH certs don't give the identity of the issuer, just their\n\t * public key. So, we use an Identity that matches anything. The\n\t * isSignedBy() function will later tell you if the key matches.\n\t */ cert.issuer = Identity.forHost(\"**\");\n    var sigBuf = sshbuf.readBuffer();\n    cert.signatures.openssh.signature = Signature.parse(sigBuf, cert.issuerKey.type, \"ssh\");\n    if (partial !== undefined) {\n        partial.remainder = sshbuf.remainder();\n        partial.consumed = sshbuf._offset;\n    }\n    return new Certificate(cert);\n}\nfunction int64ToDate(buf) {\n    var i = buf.readUInt32BE(0) * 4294967296;\n    i += buf.readUInt32BE(4);\n    var d = new Date();\n    d.setTime(i * 1000);\n    d.sourceInt64 = buf;\n    return d;\n}\nfunction dateToInt64(date) {\n    if (date.sourceInt64 !== undefined) return date.sourceInt64;\n    var i = Math.round(date.getTime() / 1000);\n    var upper = Math.floor(i / 4294967296);\n    var lower = Math.floor(i % 4294967296);\n    var buf = Buffer.alloc(8);\n    buf.writeUInt32BE(upper, 0);\n    buf.writeUInt32BE(lower, 4);\n    return buf;\n}\nfunction sign(cert, key) {\n    if (cert.signatures.openssh === undefined) cert.signatures.openssh = {};\n    try {\n        var blob = toBuffer(cert, true);\n    } catch (e) {\n        delete cert.signatures.openssh;\n        return false;\n    }\n    var sig = cert.signatures.openssh;\n    var hashAlgo = undefined;\n    if (key.type === \"rsa\" || key.type === \"dsa\") hashAlgo = \"sha1\";\n    var signer = key.createSign(hashAlgo);\n    signer.write(blob);\n    sig.signature = signer.sign();\n    return true;\n}\nfunction signAsync(cert, signer, done) {\n    if (cert.signatures.openssh === undefined) cert.signatures.openssh = {};\n    try {\n        var blob = toBuffer(cert, true);\n    } catch (e) {\n        delete cert.signatures.openssh;\n        done(e);\n        return;\n    }\n    var sig = cert.signatures.openssh;\n    signer(blob, function(err, signature) {\n        if (err) {\n            done(err);\n            return;\n        }\n        try {\n            /*\n\t\t\t * This will throw if the signature isn't of a\n\t\t\t * type/algo that can be used for SSH.\n\t\t\t */ signature.toBuffer(\"ssh\");\n        } catch (e) {\n            done(e);\n            return;\n        }\n        sig.signature = signature;\n        done();\n    });\n}\nfunction write(cert, options) {\n    if (options === undefined) options = {};\n    var blob = toBuffer(cert);\n    var out = getCertType(cert.subjectKey) + \" \" + blob.toString(\"base64\");\n    if (options.comment) out = out + \" \" + options.comment;\n    return out;\n}\nfunction toBuffer(cert, noSig) {\n    assert.object(cert.signatures.openssh, \"signature for openssh format\");\n    var sig = cert.signatures.openssh;\n    if (sig.nonce === undefined) sig.nonce = crypto.randomBytes(16);\n    var buf = new SSHBuffer({});\n    buf.writeString(getCertType(cert.subjectKey));\n    buf.writeBuffer(sig.nonce);\n    var key = cert.subjectKey;\n    var algInfo = algs.info[key.type];\n    algInfo.parts.forEach(function(part) {\n        buf.writePart(key.part[part]);\n    });\n    buf.writeInt64(cert.serial);\n    var type = cert.subjects[0].type;\n    assert.notStrictEqual(type, \"unknown\");\n    cert.subjects.forEach(function(id) {\n        assert.strictEqual(id.type, type);\n    });\n    type = TYPES[type];\n    buf.writeInt(type);\n    if (sig.keyId === undefined) {\n        sig.keyId = cert.subjects[0].type + \"_\" + (cert.subjects[0].uid || cert.subjects[0].hostname);\n    }\n    buf.writeString(sig.keyId);\n    var sub = new SSHBuffer({});\n    cert.subjects.forEach(function(id) {\n        if (type === TYPES.host) sub.writeString(id.hostname);\n        else if (type === TYPES.user) sub.writeString(id.uid);\n    });\n    buf.writeBuffer(sub.toBuffer());\n    buf.writeInt64(dateToInt64(cert.validFrom));\n    buf.writeInt64(dateToInt64(cert.validUntil));\n    var exts = sig.exts;\n    if (exts === undefined) exts = [];\n    var extbuf = new SSHBuffer({});\n    exts.forEach(function(ext) {\n        if (ext.critical !== true) return;\n        extbuf.writeString(ext.name);\n        extbuf.writeBuffer(ext.data);\n    });\n    buf.writeBuffer(extbuf.toBuffer());\n    extbuf = new SSHBuffer({});\n    exts.forEach(function(ext) {\n        if (ext.critical === true) return;\n        extbuf.writeString(ext.name);\n        extbuf.writeBuffer(ext.data);\n    });\n    buf.writeBuffer(extbuf.toBuffer());\n    /* reserved */ buf.writeBuffer(Buffer.alloc(0));\n    sub = rfc4253.write(cert.issuerKey);\n    buf.writeBuffer(sub);\n    if (!noSig) buf.writeBuffer(sig.signature.toBuffer(\"ssh\"));\n    return buf.toBuffer();\n}\nfunction getAlg(certType) {\n    if (certType === \"ssh-rsa-cert-v01@openssh.com\") return \"rsa\";\n    if (certType === \"ssh-dss-cert-v01@openssh.com\") return \"dsa\";\n    if (certType.match(ECDSA_ALGO)) return \"ecdsa\";\n    if (certType === \"ssh-ed25519-cert-v01@openssh.com\") return \"ed25519\";\n    throw new Error(\"Unsupported cert type \" + certType);\n}\nfunction getCertType(key) {\n    if (key.type === \"rsa\") return \"ssh-rsa-cert-v01@openssh.com\";\n    if (key.type === \"dsa\") return \"ssh-dss-cert-v01@openssh.com\";\n    if (key.type === \"ecdsa\") return \"ecdsa-sha2-\" + key.curve + \"-cert-v01@openssh.com\";\n    if (key.type === \"ed25519\") return \"ssh-ed25519-cert-v01@openssh.com\";\n    throw new Error(\"Unsupported key type \" + key.type);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/formats/openssh-cert.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/formats/pem.js":
/*!***********************************************!*\
  !*** ./node_modules/sshpk/lib/formats/pem.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2018 Joyent, Inc.\nmodule.exports = {\n    read: read,\n    write: write\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar asn1 = __webpack_require__(/*! asn1 */ \"(rsc)/./node_modules/asn1/lib/index.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ../algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar Key = __webpack_require__(/*! ../key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar pkcs1 = __webpack_require__(/*! ./pkcs1 */ \"(rsc)/./node_modules/sshpk/lib/formats/pkcs1.js\");\nvar pkcs8 = __webpack_require__(/*! ./pkcs8 */ \"(rsc)/./node_modules/sshpk/lib/formats/pkcs8.js\");\nvar sshpriv = __webpack_require__(/*! ./ssh-private */ \"(rsc)/./node_modules/sshpk/lib/formats/ssh-private.js\");\nvar rfc4253 = __webpack_require__(/*! ./rfc4253 */ \"(rsc)/./node_modules/sshpk/lib/formats/rfc4253.js\");\nvar errors = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/sshpk/lib/errors.js\");\nvar OID_PBES2 = \"1.2.840.113549.1.5.13\";\nvar OID_PBKDF2 = \"1.2.840.113549.1.5.12\";\nvar OID_TO_CIPHER = {\n    \"1.2.840.113549.3.7\": \"3des-cbc\",\n    \"2.16.840.1.101.3.4.1.2\": \"aes128-cbc\",\n    \"2.16.840.1.101.3.4.1.42\": \"aes256-cbc\"\n};\nvar CIPHER_TO_OID = {};\nObject.keys(OID_TO_CIPHER).forEach(function(k) {\n    CIPHER_TO_OID[OID_TO_CIPHER[k]] = k;\n});\nvar OID_TO_HASH = {\n    \"1.2.840.113549.2.7\": \"sha1\",\n    \"1.2.840.113549.2.9\": \"sha256\",\n    \"1.2.840.113549.2.11\": \"sha512\"\n};\nvar HASH_TO_OID = {};\nObject.keys(OID_TO_HASH).forEach(function(k) {\n    HASH_TO_OID[OID_TO_HASH[k]] = k;\n});\n/*\n * For reading we support both PKCS#1 and PKCS#8. If we find a private key,\n * we just take the public component of it and use that.\n */ function read(buf, options, forceType) {\n    var input = buf;\n    if (typeof buf !== \"string\") {\n        assert.buffer(buf, \"buf\");\n        buf = buf.toString(\"ascii\");\n    }\n    var lines = buf.trim().split(/[\\r\\n]+/g);\n    var m;\n    var si = -1;\n    while(!m && si < lines.length){\n        m = lines[++si].match(/*JSSTYLED*/ /[-]+[ ]*BEGIN ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);\n    }\n    assert.ok(m, \"invalid PEM header\");\n    var m2;\n    var ei = lines.length;\n    while(!m2 && ei > 0){\n        m2 = lines[--ei].match(/*JSSTYLED*/ /[-]+[ ]*END ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);\n    }\n    assert.ok(m2, \"invalid PEM footer\");\n    /* Begin and end banners must match key type */ assert.equal(m[2], m2[2]);\n    var type = m[2].toLowerCase();\n    var alg;\n    if (m[1]) {\n        /* They also must match algorithms, if given */ assert.equal(m[1], m2[1], \"PEM header and footer mismatch\");\n        alg = m[1].trim();\n    }\n    lines = lines.slice(si, ei + 1);\n    var headers = {};\n    while(true){\n        lines = lines.slice(1);\n        m = lines[0].match(/*JSSTYLED*/ /^([A-Za-z0-9-]+): (.+)$/);\n        if (!m) break;\n        headers[m[1].toLowerCase()] = m[2];\n    }\n    /* Chop off the first and last lines */ lines = lines.slice(0, -1).join(\"\");\n    buf = Buffer.from(lines, \"base64\");\n    var cipher, key, iv;\n    if (headers[\"proc-type\"]) {\n        var parts = headers[\"proc-type\"].split(\",\");\n        if (parts[0] === \"4\" && parts[1] === \"ENCRYPTED\") {\n            if (typeof options.passphrase === \"string\") {\n                options.passphrase = Buffer.from(options.passphrase, \"utf-8\");\n            }\n            if (!Buffer.isBuffer(options.passphrase)) {\n                throw new errors.KeyEncryptedError(options.filename, \"PEM\");\n            } else {\n                parts = headers[\"dek-info\"].split(\",\");\n                assert.ok(parts.length === 2);\n                cipher = parts[0].toLowerCase();\n                iv = Buffer.from(parts[1], \"hex\");\n                key = utils.opensslKeyDeriv(cipher, iv, options.passphrase, 1).key;\n            }\n        }\n    }\n    if (alg && alg.toLowerCase() === \"encrypted\") {\n        var eder = new asn1.BerReader(buf);\n        var pbesEnd;\n        eder.readSequence();\n        eder.readSequence();\n        pbesEnd = eder.offset + eder.length;\n        var method = eder.readOID();\n        if (method !== OID_PBES2) {\n            throw new Error(\"Unsupported PEM/PKCS8 encryption \" + \"scheme: \" + method);\n        }\n        eder.readSequence(); /* PBES2-params */ \n        eder.readSequence(); /* keyDerivationFunc */ \n        var kdfEnd = eder.offset + eder.length;\n        var kdfOid = eder.readOID();\n        if (kdfOid !== OID_PBKDF2) throw new Error(\"Unsupported PBES2 KDF: \" + kdfOid);\n        eder.readSequence();\n        var salt = eder.readString(asn1.Ber.OctetString, true);\n        var iterations = eder.readInt();\n        var hashAlg = \"sha1\";\n        if (eder.offset < kdfEnd) {\n            eder.readSequence();\n            var hashAlgOid = eder.readOID();\n            hashAlg = OID_TO_HASH[hashAlgOid];\n            if (hashAlg === undefined) {\n                throw new Error(\"Unsupported PBKDF2 hash: \" + hashAlgOid);\n            }\n        }\n        eder._offset = kdfEnd;\n        eder.readSequence(); /* encryptionScheme */ \n        var cipherOid = eder.readOID();\n        cipher = OID_TO_CIPHER[cipherOid];\n        if (cipher === undefined) {\n            throw new Error(\"Unsupported PBES2 cipher: \" + cipherOid);\n        }\n        iv = eder.readString(asn1.Ber.OctetString, true);\n        eder._offset = pbesEnd;\n        buf = eder.readString(asn1.Ber.OctetString, true);\n        if (typeof options.passphrase === \"string\") {\n            options.passphrase = Buffer.from(options.passphrase, \"utf-8\");\n        }\n        if (!Buffer.isBuffer(options.passphrase)) {\n            throw new errors.KeyEncryptedError(options.filename, \"PEM\");\n        }\n        var cinfo = utils.opensshCipherInfo(cipher);\n        cipher = cinfo.opensslName;\n        key = utils.pbkdf2(hashAlg, salt, iterations, cinfo.keySize, options.passphrase);\n        alg = undefined;\n    }\n    if (cipher && key && iv) {\n        var cipherStream = crypto.createDecipheriv(cipher, key, iv);\n        var chunk, chunks = [];\n        cipherStream.once(\"error\", function(e) {\n            if (e.toString().indexOf(\"bad decrypt\") !== -1) {\n                throw new Error(\"Incorrect passphrase \" + \"supplied, could not decrypt key\");\n            }\n            throw e;\n        });\n        cipherStream.write(buf);\n        cipherStream.end();\n        while((chunk = cipherStream.read()) !== null)chunks.push(chunk);\n        buf = Buffer.concat(chunks);\n    }\n    /* The new OpenSSH internal format abuses PEM headers */ if (alg && alg.toLowerCase() === \"openssh\") return sshpriv.readSSHPrivate(type, buf, options);\n    if (alg && alg.toLowerCase() === \"ssh2\") return rfc4253.readType(type, buf, options);\n    var der = new asn1.BerReader(buf);\n    der.originalInput = input;\n    /*\n\t * All of the PEM file types start with a sequence tag, so chop it\n\t * off here\n\t */ der.readSequence();\n    /* PKCS#1 type keys name an algorithm in the banner explicitly */ if (alg) {\n        if (forceType) assert.strictEqual(forceType, \"pkcs1\");\n        return pkcs1.readPkcs1(alg, type, der);\n    } else {\n        if (forceType) assert.strictEqual(forceType, \"pkcs8\");\n        return pkcs8.readPkcs8(alg, type, der);\n    }\n}\nfunction write(key, options, type) {\n    assert.object(key);\n    var alg = {\n        \"ecdsa\": \"EC\",\n        \"rsa\": \"RSA\",\n        \"dsa\": \"DSA\",\n        \"ed25519\": \"EdDSA\"\n    }[key.type];\n    var header;\n    var der = new asn1.BerWriter();\n    if (PrivateKey.isPrivateKey(key)) {\n        if (type && type === \"pkcs8\") {\n            header = \"PRIVATE KEY\";\n            pkcs8.writePkcs8(der, key);\n        } else {\n            if (type) assert.strictEqual(type, \"pkcs1\");\n            header = alg + \" PRIVATE KEY\";\n            pkcs1.writePkcs1(der, key);\n        }\n    } else if (Key.isKey(key)) {\n        if (type && type === \"pkcs1\") {\n            header = alg + \" PUBLIC KEY\";\n            pkcs1.writePkcs1(der, key);\n        } else {\n            if (type) assert.strictEqual(type, \"pkcs8\");\n            header = \"PUBLIC KEY\";\n            pkcs8.writePkcs8(der, key);\n        }\n    } else {\n        throw new Error(\"key is not a Key or PrivateKey\");\n    }\n    var tmp = der.buffer.toString(\"base64\");\n    var len = tmp.length + tmp.length / 64 + 18 + 16 + header.length * 2 + 10;\n    var buf = Buffer.alloc(len);\n    var o = 0;\n    o += buf.write(\"-----BEGIN \" + header + \"-----\\n\", o);\n    for(var i = 0; i < tmp.length;){\n        var limit = i + 64;\n        if (limit > tmp.length) limit = tmp.length;\n        o += buf.write(tmp.slice(i, limit), o);\n        buf[o++] = 10;\n        i = limit;\n    }\n    o += buf.write(\"-----END \" + header + \"-----\\n\", o);\n    return buf.slice(0, o);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/formats/pem.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/formats/pkcs1.js":
/*!*************************************************!*\
  !*** ./node_modules/sshpk/lib/formats/pkcs1.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\nmodule.exports = {\n    read: read,\n    readPkcs1: readPkcs1,\n    write: write,\n    writePkcs1: writePkcs1\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar asn1 = __webpack_require__(/*! asn1 */ \"(rsc)/./node_modules/asn1/lib/index.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ../algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar Key = __webpack_require__(/*! ../key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar pem = __webpack_require__(/*! ./pem */ \"(rsc)/./node_modules/sshpk/lib/formats/pem.js\");\nvar pkcs8 = __webpack_require__(/*! ./pkcs8 */ \"(rsc)/./node_modules/sshpk/lib/formats/pkcs8.js\");\nvar readECDSACurve = pkcs8.readECDSACurve;\nfunction read(buf, options) {\n    return pem.read(buf, options, \"pkcs1\");\n}\nfunction write(key, options) {\n    return pem.write(key, options, \"pkcs1\");\n}\n/* Helper to read in a single mpint */ function readMPInt(der, nm) {\n    assert.strictEqual(der.peek(), asn1.Ber.Integer, nm + \" is not an Integer\");\n    return utils.mpNormalize(der.readString(asn1.Ber.Integer, true));\n}\nfunction readPkcs1(alg, type, der) {\n    switch(alg){\n        case \"RSA\":\n            if (type === \"public\") return readPkcs1RSAPublic(der);\n            else if (type === \"private\") return readPkcs1RSAPrivate(der);\n            throw new Error(\"Unknown key type: \" + type);\n        case \"DSA\":\n            if (type === \"public\") return readPkcs1DSAPublic(der);\n            else if (type === \"private\") return readPkcs1DSAPrivate(der);\n            throw new Error(\"Unknown key type: \" + type);\n        case \"EC\":\n        case \"ECDSA\":\n            if (type === \"private\") return readPkcs1ECDSAPrivate(der);\n            else if (type === \"public\") return readPkcs1ECDSAPublic(der);\n            throw new Error(\"Unknown key type: \" + type);\n        case \"EDDSA\":\n        case \"EdDSA\":\n            if (type === \"private\") return readPkcs1EdDSAPrivate(der);\n            throw new Error(type + \" keys not supported with EdDSA\");\n        default:\n            throw new Error(\"Unknown key algo: \" + alg);\n    }\n}\nfunction readPkcs1RSAPublic(der) {\n    // modulus and exponent\n    var n = readMPInt(der, \"modulus\");\n    var e = readMPInt(der, \"exponent\");\n    // now, make the key\n    var key = {\n        type: \"rsa\",\n        parts: [\n            {\n                name: \"e\",\n                data: e\n            },\n            {\n                name: \"n\",\n                data: n\n            }\n        ]\n    };\n    return new Key(key);\n}\nfunction readPkcs1RSAPrivate(der) {\n    var version = readMPInt(der, \"version\");\n    assert.strictEqual(version[0], 0);\n    // modulus then public exponent\n    var n = readMPInt(der, \"modulus\");\n    var e = readMPInt(der, \"public exponent\");\n    var d = readMPInt(der, \"private exponent\");\n    var p = readMPInt(der, \"prime1\");\n    var q = readMPInt(der, \"prime2\");\n    var dmodp = readMPInt(der, \"exponent1\");\n    var dmodq = readMPInt(der, \"exponent2\");\n    var iqmp = readMPInt(der, \"iqmp\");\n    // now, make the key\n    var key = {\n        type: \"rsa\",\n        parts: [\n            {\n                name: \"n\",\n                data: n\n            },\n            {\n                name: \"e\",\n                data: e\n            },\n            {\n                name: \"d\",\n                data: d\n            },\n            {\n                name: \"iqmp\",\n                data: iqmp\n            },\n            {\n                name: \"p\",\n                data: p\n            },\n            {\n                name: \"q\",\n                data: q\n            },\n            {\n                name: \"dmodp\",\n                data: dmodp\n            },\n            {\n                name: \"dmodq\",\n                data: dmodq\n            }\n        ]\n    };\n    return new PrivateKey(key);\n}\nfunction readPkcs1DSAPrivate(der) {\n    var version = readMPInt(der, \"version\");\n    assert.strictEqual(version.readUInt8(0), 0);\n    var p = readMPInt(der, \"p\");\n    var q = readMPInt(der, \"q\");\n    var g = readMPInt(der, \"g\");\n    var y = readMPInt(der, \"y\");\n    var x = readMPInt(der, \"x\");\n    // now, make the key\n    var key = {\n        type: \"dsa\",\n        parts: [\n            {\n                name: \"p\",\n                data: p\n            },\n            {\n                name: \"q\",\n                data: q\n            },\n            {\n                name: \"g\",\n                data: g\n            },\n            {\n                name: \"y\",\n                data: y\n            },\n            {\n                name: \"x\",\n                data: x\n            }\n        ]\n    };\n    return new PrivateKey(key);\n}\nfunction readPkcs1EdDSAPrivate(der) {\n    var version = readMPInt(der, \"version\");\n    assert.strictEqual(version.readUInt8(0), 1);\n    // private key\n    var k = der.readString(asn1.Ber.OctetString, true);\n    der.readSequence(0xa0);\n    var oid = der.readOID();\n    assert.strictEqual(oid, \"1.3.101.112\", \"the ed25519 curve identifier\");\n    der.readSequence(0xa1);\n    var A = utils.readBitString(der);\n    var key = {\n        type: \"ed25519\",\n        parts: [\n            {\n                name: \"A\",\n                data: utils.zeroPadToLength(A, 32)\n            },\n            {\n                name: \"k\",\n                data: k\n            }\n        ]\n    };\n    return new PrivateKey(key);\n}\nfunction readPkcs1DSAPublic(der) {\n    var y = readMPInt(der, \"y\");\n    var p = readMPInt(der, \"p\");\n    var q = readMPInt(der, \"q\");\n    var g = readMPInt(der, \"g\");\n    var key = {\n        type: \"dsa\",\n        parts: [\n            {\n                name: \"y\",\n                data: y\n            },\n            {\n                name: \"p\",\n                data: p\n            },\n            {\n                name: \"q\",\n                data: q\n            },\n            {\n                name: \"g\",\n                data: g\n            }\n        ]\n    };\n    return new Key(key);\n}\nfunction readPkcs1ECDSAPublic(der) {\n    der.readSequence();\n    var oid = der.readOID();\n    assert.strictEqual(oid, \"1.2.840.10045.2.1\", \"must be ecPublicKey\");\n    var curveOid = der.readOID();\n    var curve;\n    var curves = Object.keys(algs.curves);\n    for(var j = 0; j < curves.length; ++j){\n        var c = curves[j];\n        var cd = algs.curves[c];\n        if (cd.pkcs8oid === curveOid) {\n            curve = c;\n            break;\n        }\n    }\n    assert.string(curve, \"a known ECDSA named curve\");\n    var Q = der.readString(asn1.Ber.BitString, true);\n    Q = utils.ecNormalize(Q);\n    var key = {\n        type: \"ecdsa\",\n        parts: [\n            {\n                name: \"curve\",\n                data: Buffer.from(curve)\n            },\n            {\n                name: \"Q\",\n                data: Q\n            }\n        ]\n    };\n    return new Key(key);\n}\nfunction readPkcs1ECDSAPrivate(der) {\n    var version = readMPInt(der, \"version\");\n    assert.strictEqual(version.readUInt8(0), 1);\n    // private key\n    var d = der.readString(asn1.Ber.OctetString, true);\n    der.readSequence(0xa0);\n    var curve = readECDSACurve(der);\n    assert.string(curve, \"a known elliptic curve\");\n    der.readSequence(0xa1);\n    var Q = der.readString(asn1.Ber.BitString, true);\n    Q = utils.ecNormalize(Q);\n    var key = {\n        type: \"ecdsa\",\n        parts: [\n            {\n                name: \"curve\",\n                data: Buffer.from(curve)\n            },\n            {\n                name: \"Q\",\n                data: Q\n            },\n            {\n                name: \"d\",\n                data: d\n            }\n        ]\n    };\n    return new PrivateKey(key);\n}\nfunction writePkcs1(der, key) {\n    der.startSequence();\n    switch(key.type){\n        case \"rsa\":\n            if (PrivateKey.isPrivateKey(key)) writePkcs1RSAPrivate(der, key);\n            else writePkcs1RSAPublic(der, key);\n            break;\n        case \"dsa\":\n            if (PrivateKey.isPrivateKey(key)) writePkcs1DSAPrivate(der, key);\n            else writePkcs1DSAPublic(der, key);\n            break;\n        case \"ecdsa\":\n            if (PrivateKey.isPrivateKey(key)) writePkcs1ECDSAPrivate(der, key);\n            else writePkcs1ECDSAPublic(der, key);\n            break;\n        case \"ed25519\":\n            if (PrivateKey.isPrivateKey(key)) writePkcs1EdDSAPrivate(der, key);\n            else writePkcs1EdDSAPublic(der, key);\n            break;\n        default:\n            throw new Error(\"Unknown key algo: \" + key.type);\n    }\n    der.endSequence();\n}\nfunction writePkcs1RSAPublic(der, key) {\n    der.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n}\nfunction writePkcs1RSAPrivate(der, key) {\n    var ver = Buffer.from([\n        0\n    ]);\n    der.writeBuffer(ver, asn1.Ber.Integer);\n    der.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.d.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n    if (!key.part.dmodp || !key.part.dmodq) utils.addRSAMissing(key);\n    der.writeBuffer(key.part.dmodp.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.dmodq.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.iqmp.data, asn1.Ber.Integer);\n}\nfunction writePkcs1DSAPrivate(der, key) {\n    var ver = Buffer.from([\n        0\n    ]);\n    der.writeBuffer(ver, asn1.Ber.Integer);\n    der.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.y.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.x.data, asn1.Ber.Integer);\n}\nfunction writePkcs1DSAPublic(der, key) {\n    der.writeBuffer(key.part.y.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n}\nfunction writePkcs1ECDSAPublic(der, key) {\n    der.startSequence();\n    der.writeOID(\"1.2.840.10045.2.1\"); /* ecPublicKey */ \n    var curve = key.part.curve.data.toString();\n    var curveOid = algs.curves[curve].pkcs8oid;\n    assert.string(curveOid, \"a known ECDSA named curve\");\n    der.writeOID(curveOid);\n    der.endSequence();\n    var Q = utils.ecNormalize(key.part.Q.data, true);\n    der.writeBuffer(Q, asn1.Ber.BitString);\n}\nfunction writePkcs1ECDSAPrivate(der, key) {\n    var ver = Buffer.from([\n        1\n    ]);\n    der.writeBuffer(ver, asn1.Ber.Integer);\n    der.writeBuffer(key.part.d.data, asn1.Ber.OctetString);\n    der.startSequence(0xa0);\n    var curve = key.part.curve.data.toString();\n    var curveOid = algs.curves[curve].pkcs8oid;\n    assert.string(curveOid, \"a known ECDSA named curve\");\n    der.writeOID(curveOid);\n    der.endSequence();\n    der.startSequence(0xa1);\n    var Q = utils.ecNormalize(key.part.Q.data, true);\n    der.writeBuffer(Q, asn1.Ber.BitString);\n    der.endSequence();\n}\nfunction writePkcs1EdDSAPrivate(der, key) {\n    var ver = Buffer.from([\n        1\n    ]);\n    der.writeBuffer(ver, asn1.Ber.Integer);\n    der.writeBuffer(key.part.k.data, asn1.Ber.OctetString);\n    der.startSequence(0xa0);\n    der.writeOID(\"1.3.101.112\");\n    der.endSequence();\n    der.startSequence(0xa1);\n    utils.writeBitString(der, key.part.A.data);\n    der.endSequence();\n}\nfunction writePkcs1EdDSAPublic(der, key) {\n    throw new Error(\"Public keys are not supported for EdDSA PKCS#1\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/formats/pkcs1.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/formats/pkcs8.js":
/*!*************************************************!*\
  !*** ./node_modules/sshpk/lib/formats/pkcs8.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2018 Joyent, Inc.\nmodule.exports = {\n    read: read,\n    readPkcs8: readPkcs8,\n    write: write,\n    writePkcs8: writePkcs8,\n    pkcs8ToBuffer: pkcs8ToBuffer,\n    readECDSACurve: readECDSACurve,\n    writeECDSACurve: writeECDSACurve\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar asn1 = __webpack_require__(/*! asn1 */ \"(rsc)/./node_modules/asn1/lib/index.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ../algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar Key = __webpack_require__(/*! ../key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar pem = __webpack_require__(/*! ./pem */ \"(rsc)/./node_modules/sshpk/lib/formats/pem.js\");\nfunction read(buf, options) {\n    return pem.read(buf, options, \"pkcs8\");\n}\nfunction write(key, options) {\n    return pem.write(key, options, \"pkcs8\");\n}\n/* Helper to read in a single mpint */ function readMPInt(der, nm) {\n    assert.strictEqual(der.peek(), asn1.Ber.Integer, nm + \" is not an Integer\");\n    return utils.mpNormalize(der.readString(asn1.Ber.Integer, true));\n}\nfunction readPkcs8(alg, type, der) {\n    /* Private keys in pkcs#8 format have a weird extra int */ if (der.peek() === asn1.Ber.Integer) {\n        assert.strictEqual(type, \"private\", \"unexpected Integer at start of public key\");\n        der.readString(asn1.Ber.Integer, true);\n    }\n    der.readSequence();\n    var next = der.offset + der.length;\n    var oid = der.readOID();\n    switch(oid){\n        case \"1.2.840.113549.1.1.1\":\n            der._offset = next;\n            if (type === \"public\") return readPkcs8RSAPublic(der);\n            else return readPkcs8RSAPrivate(der);\n        case \"1.2.840.10040.4.1\":\n            if (type === \"public\") return readPkcs8DSAPublic(der);\n            else return readPkcs8DSAPrivate(der);\n        case \"1.2.840.10045.2.1\":\n            if (type === \"public\") return readPkcs8ECDSAPublic(der);\n            else return readPkcs8ECDSAPrivate(der);\n        case \"1.3.101.112\":\n            if (type === \"public\") {\n                return readPkcs8EdDSAPublic(der);\n            } else {\n                return readPkcs8EdDSAPrivate(der);\n            }\n        case \"1.3.101.110\":\n            if (type === \"public\") {\n                return readPkcs8X25519Public(der);\n            } else {\n                return readPkcs8X25519Private(der);\n            }\n        default:\n            throw new Error(\"Unknown key type OID \" + oid);\n    }\n}\nfunction readPkcs8RSAPublic(der) {\n    // bit string sequence\n    der.readSequence(asn1.Ber.BitString);\n    der.readByte();\n    der.readSequence();\n    // modulus\n    var n = readMPInt(der, \"modulus\");\n    var e = readMPInt(der, \"exponent\");\n    // now, make the key\n    var key = {\n        type: \"rsa\",\n        source: der.originalInput,\n        parts: [\n            {\n                name: \"e\",\n                data: e\n            },\n            {\n                name: \"n\",\n                data: n\n            }\n        ]\n    };\n    return new Key(key);\n}\nfunction readPkcs8RSAPrivate(der) {\n    der.readSequence(asn1.Ber.OctetString);\n    der.readSequence();\n    var ver = readMPInt(der, \"version\");\n    assert.equal(ver[0], 0x0, \"unknown RSA private key version\");\n    // modulus then public exponent\n    var n = readMPInt(der, \"modulus\");\n    var e = readMPInt(der, \"public exponent\");\n    var d = readMPInt(der, \"private exponent\");\n    var p = readMPInt(der, \"prime1\");\n    var q = readMPInt(der, \"prime2\");\n    var dmodp = readMPInt(der, \"exponent1\");\n    var dmodq = readMPInt(der, \"exponent2\");\n    var iqmp = readMPInt(der, \"iqmp\");\n    // now, make the key\n    var key = {\n        type: \"rsa\",\n        parts: [\n            {\n                name: \"n\",\n                data: n\n            },\n            {\n                name: \"e\",\n                data: e\n            },\n            {\n                name: \"d\",\n                data: d\n            },\n            {\n                name: \"iqmp\",\n                data: iqmp\n            },\n            {\n                name: \"p\",\n                data: p\n            },\n            {\n                name: \"q\",\n                data: q\n            },\n            {\n                name: \"dmodp\",\n                data: dmodp\n            },\n            {\n                name: \"dmodq\",\n                data: dmodq\n            }\n        ]\n    };\n    return new PrivateKey(key);\n}\nfunction readPkcs8DSAPublic(der) {\n    der.readSequence();\n    var p = readMPInt(der, \"p\");\n    var q = readMPInt(der, \"q\");\n    var g = readMPInt(der, \"g\");\n    // bit string sequence\n    der.readSequence(asn1.Ber.BitString);\n    der.readByte();\n    var y = readMPInt(der, \"y\");\n    // now, make the key\n    var key = {\n        type: \"dsa\",\n        parts: [\n            {\n                name: \"p\",\n                data: p\n            },\n            {\n                name: \"q\",\n                data: q\n            },\n            {\n                name: \"g\",\n                data: g\n            },\n            {\n                name: \"y\",\n                data: y\n            }\n        ]\n    };\n    return new Key(key);\n}\nfunction readPkcs8DSAPrivate(der) {\n    der.readSequence();\n    var p = readMPInt(der, \"p\");\n    var q = readMPInt(der, \"q\");\n    var g = readMPInt(der, \"g\");\n    der.readSequence(asn1.Ber.OctetString);\n    var x = readMPInt(der, \"x\");\n    /* The pkcs#8 format does not include the public key */ var y = utils.calculateDSAPublic(g, p, x);\n    var key = {\n        type: \"dsa\",\n        parts: [\n            {\n                name: \"p\",\n                data: p\n            },\n            {\n                name: \"q\",\n                data: q\n            },\n            {\n                name: \"g\",\n                data: g\n            },\n            {\n                name: \"y\",\n                data: y\n            },\n            {\n                name: \"x\",\n                data: x\n            }\n        ]\n    };\n    return new PrivateKey(key);\n}\nfunction readECDSACurve(der) {\n    var curveName, curveNames;\n    var j, c, cd;\n    if (der.peek() === asn1.Ber.OID) {\n        var oid = der.readOID();\n        curveNames = Object.keys(algs.curves);\n        for(j = 0; j < curveNames.length; ++j){\n            c = curveNames[j];\n            cd = algs.curves[c];\n            if (cd.pkcs8oid === oid) {\n                curveName = c;\n                break;\n            }\n        }\n    } else {\n        // ECParameters sequence\n        der.readSequence();\n        var version = der.readString(asn1.Ber.Integer, true);\n        assert.strictEqual(version[0], 1, \"ECDSA key not version 1\");\n        var curve = {};\n        // FieldID sequence\n        der.readSequence();\n        var fieldTypeOid = der.readOID();\n        assert.strictEqual(fieldTypeOid, \"1.2.840.10045.1.1\", \"ECDSA key is not from a prime-field\");\n        var p = curve.p = utils.mpNormalize(der.readString(asn1.Ber.Integer, true));\n        /*\n\t\t * p always starts with a 1 bit, so count the zeros to get its\n\t\t * real size.\n\t\t */ curve.size = p.length * 8 - utils.countZeros(p);\n        // Curve sequence\n        der.readSequence();\n        curve.a = utils.mpNormalize(der.readString(asn1.Ber.OctetString, true));\n        curve.b = utils.mpNormalize(der.readString(asn1.Ber.OctetString, true));\n        if (der.peek() === asn1.Ber.BitString) curve.s = der.readString(asn1.Ber.BitString, true);\n        // Combined Gx and Gy\n        curve.G = der.readString(asn1.Ber.OctetString, true);\n        assert.strictEqual(curve.G[0], 0x4, \"uncompressed G is required\");\n        curve.n = utils.mpNormalize(der.readString(asn1.Ber.Integer, true));\n        curve.h = utils.mpNormalize(der.readString(asn1.Ber.Integer, true));\n        assert.strictEqual(curve.h[0], 0x1, \"a cofactor=1 curve is \" + \"required\");\n        curveNames = Object.keys(algs.curves);\n        var ks = Object.keys(curve);\n        for(j = 0; j < curveNames.length; ++j){\n            c = curveNames[j];\n            cd = algs.curves[c];\n            var equal = true;\n            for(var i = 0; i < ks.length; ++i){\n                var k = ks[i];\n                if (cd[k] === undefined) continue;\n                if (typeof cd[k] === \"object\" && cd[k].equals !== undefined) {\n                    if (!cd[k].equals(curve[k])) {\n                        equal = false;\n                        break;\n                    }\n                } else if (Buffer.isBuffer(cd[k])) {\n                    if (cd[k].toString(\"binary\") !== curve[k].toString(\"binary\")) {\n                        equal = false;\n                        break;\n                    }\n                } else {\n                    if (cd[k] !== curve[k]) {\n                        equal = false;\n                        break;\n                    }\n                }\n            }\n            if (equal) {\n                curveName = c;\n                break;\n            }\n        }\n    }\n    return curveName;\n}\nfunction readPkcs8ECDSAPrivate(der) {\n    var curveName = readECDSACurve(der);\n    assert.string(curveName, \"a known elliptic curve\");\n    der.readSequence(asn1.Ber.OctetString);\n    der.readSequence();\n    var version = readMPInt(der, \"version\");\n    assert.equal(version[0], 1, \"unknown version of ECDSA key\");\n    var d = der.readString(asn1.Ber.OctetString, true);\n    var Q;\n    if (der.peek() == 0xa0) {\n        der.readSequence(0xa0);\n        der._offset += der.length;\n    }\n    if (der.peek() == 0xa1) {\n        der.readSequence(0xa1);\n        Q = der.readString(asn1.Ber.BitString, true);\n        Q = utils.ecNormalize(Q);\n    }\n    if (Q === undefined) {\n        var pub = utils.publicFromPrivateECDSA(curveName, d);\n        Q = pub.part.Q.data;\n    }\n    var key = {\n        type: \"ecdsa\",\n        parts: [\n            {\n                name: \"curve\",\n                data: Buffer.from(curveName)\n            },\n            {\n                name: \"Q\",\n                data: Q\n            },\n            {\n                name: \"d\",\n                data: d\n            }\n        ]\n    };\n    return new PrivateKey(key);\n}\nfunction readPkcs8ECDSAPublic(der) {\n    var curveName = readECDSACurve(der);\n    assert.string(curveName, \"a known elliptic curve\");\n    var Q = der.readString(asn1.Ber.BitString, true);\n    Q = utils.ecNormalize(Q);\n    var key = {\n        type: \"ecdsa\",\n        parts: [\n            {\n                name: \"curve\",\n                data: Buffer.from(curveName)\n            },\n            {\n                name: \"Q\",\n                data: Q\n            }\n        ]\n    };\n    return new Key(key);\n}\nfunction readPkcs8EdDSAPublic(der) {\n    if (der.peek() === 0x00) der.readByte();\n    var A = utils.readBitString(der);\n    var key = {\n        type: \"ed25519\",\n        parts: [\n            {\n                name: \"A\",\n                data: utils.zeroPadToLength(A, 32)\n            }\n        ]\n    };\n    return new Key(key);\n}\nfunction readPkcs8X25519Public(der) {\n    var A = utils.readBitString(der);\n    var key = {\n        type: \"curve25519\",\n        parts: [\n            {\n                name: \"A\",\n                data: utils.zeroPadToLength(A, 32)\n            }\n        ]\n    };\n    return new Key(key);\n}\nfunction readPkcs8EdDSAPrivate(der) {\n    if (der.peek() === 0x00) der.readByte();\n    der.readSequence(asn1.Ber.OctetString);\n    var k = der.readString(asn1.Ber.OctetString, true);\n    k = utils.zeroPadToLength(k, 32);\n    var A, tag;\n    while((tag = der.peek()) !== null){\n        if (tag === (asn1.Ber.Context | 1)) {\n            A = utils.readBitString(der, tag);\n        } else {\n            der.readSequence(tag);\n            der._offset += der.length;\n        }\n    }\n    if (A === undefined) A = utils.calculateED25519Public(k);\n    var key = {\n        type: \"ed25519\",\n        parts: [\n            {\n                name: \"A\",\n                data: utils.zeroPadToLength(A, 32)\n            },\n            {\n                name: \"k\",\n                data: utils.zeroPadToLength(k, 32)\n            }\n        ]\n    };\n    return new PrivateKey(key);\n}\nfunction readPkcs8X25519Private(der) {\n    if (der.peek() === 0x00) der.readByte();\n    der.readSequence(asn1.Ber.OctetString);\n    var k = der.readString(asn1.Ber.OctetString, true);\n    k = utils.zeroPadToLength(k, 32);\n    var A = utils.calculateX25519Public(k);\n    var key = {\n        type: \"curve25519\",\n        parts: [\n            {\n                name: \"A\",\n                data: utils.zeroPadToLength(A, 32)\n            },\n            {\n                name: \"k\",\n                data: utils.zeroPadToLength(k, 32)\n            }\n        ]\n    };\n    return new PrivateKey(key);\n}\nfunction pkcs8ToBuffer(key) {\n    var der = new asn1.BerWriter();\n    writePkcs8(der, key);\n    return der.buffer;\n}\nfunction writePkcs8(der, key) {\n    der.startSequence();\n    if (PrivateKey.isPrivateKey(key)) {\n        var version = 0;\n        if (key.type === \"ed25519\") version = 1;\n        var vbuf = Buffer.from([\n            version\n        ]);\n        der.writeBuffer(vbuf, asn1.Ber.Integer);\n    }\n    der.startSequence();\n    switch(key.type){\n        case \"rsa\":\n            der.writeOID(\"1.2.840.113549.1.1.1\");\n            if (PrivateKey.isPrivateKey(key)) writePkcs8RSAPrivate(key, der);\n            else writePkcs8RSAPublic(key, der);\n            break;\n        case \"dsa\":\n            der.writeOID(\"1.2.840.10040.4.1\");\n            if (PrivateKey.isPrivateKey(key)) writePkcs8DSAPrivate(key, der);\n            else writePkcs8DSAPublic(key, der);\n            break;\n        case \"ecdsa\":\n            der.writeOID(\"1.2.840.10045.2.1\");\n            if (PrivateKey.isPrivateKey(key)) writePkcs8ECDSAPrivate(key, der);\n            else writePkcs8ECDSAPublic(key, der);\n            break;\n        case \"ed25519\":\n            der.writeOID(\"1.3.101.112\");\n            if (PrivateKey.isPrivateKey(key)) writePkcs8EdDSAPrivate(key, der);\n            else writePkcs8EdDSAPublic(key, der);\n            break;\n        default:\n            throw new Error(\"Unsupported key type: \" + key.type);\n    }\n    der.endSequence();\n}\nfunction writePkcs8RSAPrivate(key, der) {\n    der.writeNull();\n    der.endSequence();\n    der.startSequence(asn1.Ber.OctetString);\n    der.startSequence();\n    var version = Buffer.from([\n        0\n    ]);\n    der.writeBuffer(version, asn1.Ber.Integer);\n    der.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.d.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n    if (!key.part.dmodp || !key.part.dmodq) utils.addRSAMissing(key);\n    der.writeBuffer(key.part.dmodp.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.dmodq.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.iqmp.data, asn1.Ber.Integer);\n    der.endSequence();\n    der.endSequence();\n}\nfunction writePkcs8RSAPublic(key, der) {\n    der.writeNull();\n    der.endSequence();\n    der.startSequence(asn1.Ber.BitString);\n    der.writeByte(0x00);\n    der.startSequence();\n    der.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n    der.endSequence();\n    der.endSequence();\n}\nfunction writePkcs8DSAPrivate(key, der) {\n    der.startSequence();\n    der.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n    der.endSequence();\n    der.endSequence();\n    der.startSequence(asn1.Ber.OctetString);\n    der.writeBuffer(key.part.x.data, asn1.Ber.Integer);\n    der.endSequence();\n}\nfunction writePkcs8DSAPublic(key, der) {\n    der.startSequence();\n    der.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n    der.endSequence();\n    der.endSequence();\n    der.startSequence(asn1.Ber.BitString);\n    der.writeByte(0x00);\n    der.writeBuffer(key.part.y.data, asn1.Ber.Integer);\n    der.endSequence();\n}\nfunction writeECDSACurve(key, der) {\n    var curve = algs.curves[key.curve];\n    if (curve.pkcs8oid) {\n        /* This one has a name in pkcs#8, so just write the oid */ der.writeOID(curve.pkcs8oid);\n    } else {\n        // ECParameters sequence\n        der.startSequence();\n        var version = Buffer.from([\n            1\n        ]);\n        der.writeBuffer(version, asn1.Ber.Integer);\n        // FieldID sequence\n        der.startSequence();\n        der.writeOID(\"1.2.840.10045.1.1\"); // prime-field\n        der.writeBuffer(curve.p, asn1.Ber.Integer);\n        der.endSequence();\n        // Curve sequence\n        der.startSequence();\n        var a = curve.p;\n        if (a[0] === 0x0) a = a.slice(1);\n        der.writeBuffer(a, asn1.Ber.OctetString);\n        der.writeBuffer(curve.b, asn1.Ber.OctetString);\n        der.writeBuffer(curve.s, asn1.Ber.BitString);\n        der.endSequence();\n        der.writeBuffer(curve.G, asn1.Ber.OctetString);\n        der.writeBuffer(curve.n, asn1.Ber.Integer);\n        var h = curve.h;\n        if (!h) {\n            h = Buffer.from([\n                1\n            ]);\n        }\n        der.writeBuffer(h, asn1.Ber.Integer);\n        // ECParameters\n        der.endSequence();\n    }\n}\nfunction writePkcs8ECDSAPublic(key, der) {\n    writeECDSACurve(key, der);\n    der.endSequence();\n    var Q = utils.ecNormalize(key.part.Q.data, true);\n    der.writeBuffer(Q, asn1.Ber.BitString);\n}\nfunction writePkcs8ECDSAPrivate(key, der) {\n    writeECDSACurve(key, der);\n    der.endSequence();\n    der.startSequence(asn1.Ber.OctetString);\n    der.startSequence();\n    var version = Buffer.from([\n        1\n    ]);\n    der.writeBuffer(version, asn1.Ber.Integer);\n    der.writeBuffer(key.part.d.data, asn1.Ber.OctetString);\n    der.startSequence(0xa1);\n    var Q = utils.ecNormalize(key.part.Q.data, true);\n    der.writeBuffer(Q, asn1.Ber.BitString);\n    der.endSequence();\n    der.endSequence();\n    der.endSequence();\n}\nfunction writePkcs8EdDSAPublic(key, der) {\n    der.endSequence();\n    utils.writeBitString(der, key.part.A.data);\n}\nfunction writePkcs8EdDSAPrivate(key, der) {\n    der.endSequence();\n    der.startSequence(asn1.Ber.OctetString);\n    var k = utils.mpNormalize(key.part.k.data);\n    /* RFCs call for storing exactly 32 bytes, so strip any leading zeros */ while(k.length > 32 && k[0] === 0x00)k = k.slice(1);\n    der.writeBuffer(k, asn1.Ber.OctetString);\n    der.endSequence();\n    utils.writeBitString(der, key.part.A.data, asn1.Ber.Context | 1);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/formats/pkcs8.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/formats/putty.js":
/*!*************************************************!*\
  !*** ./node_modules/sshpk/lib/formats/putty.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2018 Joyent, Inc.\nmodule.exports = {\n    read: read,\n    write: write\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar rfc4253 = __webpack_require__(/*! ./rfc4253 */ \"(rsc)/./node_modules/sshpk/lib/formats/rfc4253.js\");\nvar Key = __webpack_require__(/*! ../key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar SSHBuffer = __webpack_require__(/*! ../ssh-buffer */ \"(rsc)/./node_modules/sshpk/lib/ssh-buffer.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar errors = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/sshpk/lib/errors.js\");\n// https://tartarus.org/~simon/putty-prerel-snapshots/htmldoc/AppendixC.html\nfunction read(buf, options) {\n    var lines = buf.toString(\"ascii\").split(/[\\r\\n]+/);\n    var found = false;\n    var parts;\n    var si = 0;\n    var formatVersion;\n    while(si < lines.length){\n        parts = splitHeader(lines[si++]);\n        if (parts) {\n            formatVersion = ({\n                \"putty-user-key-file-2\": 2,\n                \"putty-user-key-file-3\": 3\n            })[parts[0].toLowerCase()];\n            if (formatVersion) {\n                found = true;\n                break;\n            }\n        }\n    }\n    if (!found) {\n        throw new Error(\"No PuTTY format first line found\");\n    }\n    var alg = parts[1];\n    parts = splitHeader(lines[si++]);\n    assert.equal(parts[0].toLowerCase(), \"encryption\");\n    var encryption = parts[1];\n    parts = splitHeader(lines[si++]);\n    assert.equal(parts[0].toLowerCase(), \"comment\");\n    var comment = parts[1];\n    parts = splitHeader(lines[si++]);\n    assert.equal(parts[0].toLowerCase(), \"public-lines\");\n    var publicLines = parseInt(parts[1], 10);\n    if (!isFinite(publicLines) || publicLines < 0 || publicLines > lines.length) {\n        throw new Error(\"Invalid public-lines count\");\n    }\n    var publicBuf = Buffer.from(lines.slice(si, si + publicLines).join(\"\"), \"base64\");\n    var keyType = rfc4253.algToKeyType(alg);\n    var key = rfc4253.read(publicBuf);\n    if (key.type !== keyType) {\n        throw new Error(\"Outer key algorithm mismatch\");\n    }\n    si += publicLines;\n    if (lines[si]) {\n        parts = splitHeader(lines[si++]);\n        assert.equal(parts[0].toLowerCase(), \"private-lines\");\n        var privateLines = parseInt(parts[1], 10);\n        if (!isFinite(privateLines) || privateLines < 0 || privateLines > lines.length) {\n            throw new Error(\"Invalid private-lines count\");\n        }\n        var privateBuf = Buffer.from(lines.slice(si, si + privateLines).join(\"\"), \"base64\");\n        if (encryption !== \"none\" && formatVersion === 3) {\n            throw new Error(\"Encrypted keys arenot supported for\" + \" PuTTY format version 3\");\n        }\n        if (encryption === \"aes256-cbc\") {\n            if (!options.passphrase) {\n                throw new errors.KeyEncryptedError(options.filename, \"PEM\");\n            }\n            var iv = Buffer.alloc(16, 0);\n            var decipher = crypto.createDecipheriv(\"aes-256-cbc\", derivePPK2EncryptionKey(options.passphrase), iv);\n            decipher.setAutoPadding(false);\n            privateBuf = Buffer.concat([\n                decipher.update(privateBuf),\n                decipher.final()\n            ]);\n        }\n        key = new PrivateKey(key);\n        if (key.type !== keyType) {\n            throw new Error(\"Outer key algorithm mismatch\");\n        }\n        var sshbuf = new SSHBuffer({\n            buffer: privateBuf\n        });\n        var privateKeyParts;\n        if (alg === \"ssh-dss\") {\n            privateKeyParts = [\n                {\n                    name: \"x\",\n                    data: sshbuf.readBuffer()\n                }\n            ];\n        } else if (alg === \"ssh-rsa\") {\n            privateKeyParts = [\n                {\n                    name: \"d\",\n                    data: sshbuf.readBuffer()\n                },\n                {\n                    name: \"p\",\n                    data: sshbuf.readBuffer()\n                },\n                {\n                    name: \"q\",\n                    data: sshbuf.readBuffer()\n                },\n                {\n                    name: \"iqmp\",\n                    data: sshbuf.readBuffer()\n                }\n            ];\n        } else if (alg.match(/^ecdsa-sha2-nistp/)) {\n            privateKeyParts = [\n                {\n                    name: \"d\",\n                    data: sshbuf.readBuffer()\n                }\n            ];\n        } else if (alg === \"ssh-ed25519\") {\n            privateKeyParts = [\n                {\n                    name: \"k\",\n                    data: sshbuf.readBuffer()\n                }\n            ];\n        } else {\n            throw new Error(\"Unsupported PPK key type: \" + alg);\n        }\n        key = new PrivateKey({\n            type: key.type,\n            parts: key.parts.concat(privateKeyParts)\n        });\n    }\n    key.comment = comment;\n    return key;\n}\nfunction derivePPK2EncryptionKey(passphrase) {\n    var hash1 = crypto.createHash(\"sha1\").update(Buffer.concat([\n        Buffer.from([\n            0,\n            0,\n            0,\n            0\n        ]),\n        Buffer.from(passphrase)\n    ])).digest();\n    var hash2 = crypto.createHash(\"sha1\").update(Buffer.concat([\n        Buffer.from([\n            0,\n            0,\n            0,\n            1\n        ]),\n        Buffer.from(passphrase)\n    ])).digest();\n    return Buffer.concat([\n        hash1,\n        hash2\n    ]).slice(0, 32);\n}\nfunction splitHeader(line) {\n    var idx = line.indexOf(\":\");\n    if (idx === -1) return null;\n    var header = line.slice(0, idx);\n    ++idx;\n    while(line[idx] === \" \")++idx;\n    var rest = line.slice(idx);\n    return [\n        header,\n        rest\n    ];\n}\nfunction write(key, options) {\n    assert.object(key);\n    if (!Key.isKey(key)) throw new Error(\"Must be a public key\");\n    var alg = rfc4253.keyTypeToAlg(key);\n    var buf = rfc4253.write(key);\n    var comment = key.comment || \"\";\n    var b64 = buf.toString(\"base64\");\n    var lines = wrap(b64, 64);\n    lines.unshift(\"Public-Lines: \" + lines.length);\n    lines.unshift(\"Comment: \" + comment);\n    lines.unshift(\"Encryption: none\");\n    lines.unshift(\"PuTTY-User-Key-File-2: \" + alg);\n    return Buffer.from(lines.join(\"\\n\") + \"\\n\");\n}\nfunction wrap(txt, len) {\n    var lines = [];\n    var pos = 0;\n    while(pos < txt.length){\n        lines.push(txt.slice(pos, pos + 64));\n        pos += 64;\n    }\n    return lines;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/formats/putty.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/formats/rfc4253.js":
/*!***************************************************!*\
  !*** ./node_modules/sshpk/lib/formats/rfc4253.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\nmodule.exports = {\n    read: read.bind(undefined, false, undefined),\n    readType: read.bind(undefined, false),\n    write: write,\n    /* semi-private api, used by sshpk-agent */ readPartial: read.bind(undefined, true),\n    /* shared with ssh format */ readInternal: read,\n    keyTypeToAlg: keyTypeToAlg,\n    algToKeyType: algToKeyType\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ../algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar Key = __webpack_require__(/*! ../key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar SSHBuffer = __webpack_require__(/*! ../ssh-buffer */ \"(rsc)/./node_modules/sshpk/lib/ssh-buffer.js\");\nfunction algToKeyType(alg) {\n    assert.string(alg);\n    if (alg === \"ssh-dss\") return \"dsa\";\n    else if (alg === \"ssh-rsa\") return \"rsa\";\n    else if (alg === \"ssh-ed25519\") return \"ed25519\";\n    else if (alg === \"ssh-curve25519\") return \"curve25519\";\n    else if (alg.match(/^ecdsa-sha2-/)) return \"ecdsa\";\n    else throw new Error(\"Unknown algorithm \" + alg);\n}\nfunction keyTypeToAlg(key) {\n    assert.object(key);\n    if (key.type === \"dsa\") return \"ssh-dss\";\n    else if (key.type === \"rsa\") return \"ssh-rsa\";\n    else if (key.type === \"ed25519\") return \"ssh-ed25519\";\n    else if (key.type === \"curve25519\") return \"ssh-curve25519\";\n    else if (key.type === \"ecdsa\") return \"ecdsa-sha2-\" + key.part.curve.data.toString();\n    else throw new Error(\"Unknown key type \" + key.type);\n}\nfunction read(partial, type, buf, options) {\n    if (typeof buf === \"string\") buf = Buffer.from(buf);\n    assert.buffer(buf, \"buf\");\n    var key = {};\n    var parts = key.parts = [];\n    var sshbuf = new SSHBuffer({\n        buffer: buf\n    });\n    var alg = sshbuf.readString();\n    assert.ok(!sshbuf.atEnd(), \"key must have at least one part\");\n    key.type = algToKeyType(alg);\n    var partCount = algs.info[key.type].parts.length;\n    if (type && type === \"private\") partCount = algs.privInfo[key.type].parts.length;\n    while(!sshbuf.atEnd() && parts.length < partCount)parts.push(sshbuf.readPart());\n    while(!partial && !sshbuf.atEnd())parts.push(sshbuf.readPart());\n    assert.ok(parts.length >= 1, \"key must have at least one part\");\n    assert.ok(partial || sshbuf.atEnd(), \"leftover bytes at end of key\");\n    var Constructor = Key;\n    var algInfo = algs.info[key.type];\n    if (type === \"private\" || algInfo.parts.length !== parts.length) {\n        algInfo = algs.privInfo[key.type];\n        Constructor = PrivateKey;\n    }\n    assert.strictEqual(algInfo.parts.length, parts.length);\n    if (key.type === \"ecdsa\") {\n        var res = /^ecdsa-sha2-(.+)$/.exec(alg);\n        assert.ok(res !== null);\n        assert.strictEqual(res[1], parts[0].data.toString());\n    }\n    var normalized = true;\n    for(var i = 0; i < algInfo.parts.length; ++i){\n        var p = parts[i];\n        p.name = algInfo.parts[i];\n        /*\n\t\t * OpenSSH stores ed25519 \"private\" keys as seed + public key\n\t\t * concat'd together (k followed by A). We want to keep them\n\t\t * separate for other formats that don't do this.\n\t\t */ if (key.type === \"ed25519\" && p.name === \"k\") p.data = p.data.slice(0, 32);\n        if (p.name !== \"curve\" && algInfo.normalize !== false) {\n            var nd;\n            if (key.type === \"ed25519\") {\n                nd = utils.zeroPadToLength(p.data, 32);\n            } else {\n                nd = utils.mpNormalize(p.data);\n            }\n            if (nd.toString(\"binary\") !== p.data.toString(\"binary\")) {\n                p.data = nd;\n                normalized = false;\n            }\n        }\n    }\n    if (normalized) key._rfc4253Cache = sshbuf.toBuffer();\n    if (partial && typeof partial === \"object\") {\n        partial.remainder = sshbuf.remainder();\n        partial.consumed = sshbuf._offset;\n    }\n    return new Constructor(key);\n}\nfunction write(key, options) {\n    assert.object(key);\n    var alg = keyTypeToAlg(key);\n    var i;\n    var algInfo = algs.info[key.type];\n    if (PrivateKey.isPrivateKey(key)) algInfo = algs.privInfo[key.type];\n    var parts = algInfo.parts;\n    var buf = new SSHBuffer({});\n    buf.writeString(alg);\n    for(i = 0; i < parts.length; ++i){\n        var data = key.part[parts[i]].data;\n        if (algInfo.normalize !== false) {\n            if (key.type === \"ed25519\") data = utils.zeroPadToLength(data, 32);\n            else data = utils.mpNormalize(data);\n        }\n        if (key.type === \"ed25519\" && parts[i] === \"k\") data = Buffer.concat([\n            data,\n            key.part.A.data\n        ]);\n        buf.writeBuffer(data);\n    }\n    return buf.toBuffer();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/formats/rfc4253.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/formats/ssh-private.js":
/*!*******************************************************!*\
  !*** ./node_modules/sshpk/lib/formats/ssh-private.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\nmodule.exports = {\n    read: read,\n    readSSHPrivate: readSSHPrivate,\n    write: write\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar asn1 = __webpack_require__(/*! asn1 */ \"(rsc)/./node_modules/asn1/lib/index.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ../algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar Key = __webpack_require__(/*! ../key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar pem = __webpack_require__(/*! ./pem */ \"(rsc)/./node_modules/sshpk/lib/formats/pem.js\");\nvar rfc4253 = __webpack_require__(/*! ./rfc4253 */ \"(rsc)/./node_modules/sshpk/lib/formats/rfc4253.js\");\nvar SSHBuffer = __webpack_require__(/*! ../ssh-buffer */ \"(rsc)/./node_modules/sshpk/lib/ssh-buffer.js\");\nvar errors = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/sshpk/lib/errors.js\");\nvar bcrypt;\nfunction read(buf, options) {\n    return pem.read(buf, options);\n}\nvar MAGIC = \"openssh-key-v1\";\nfunction readSSHPrivate(type, buf, options) {\n    buf = new SSHBuffer({\n        buffer: buf\n    });\n    var magic = buf.readCString();\n    assert.strictEqual(magic, MAGIC, \"bad magic string\");\n    var cipher = buf.readString();\n    var kdf = buf.readString();\n    var kdfOpts = buf.readBuffer();\n    var nkeys = buf.readInt();\n    if (nkeys !== 1) {\n        throw new Error(\"OpenSSH-format key file contains \" + \"multiple keys: this is unsupported.\");\n    }\n    var pubKey = buf.readBuffer();\n    if (type === \"public\") {\n        assert.ok(buf.atEnd(), \"excess bytes left after key\");\n        return rfc4253.read(pubKey);\n    }\n    var privKeyBlob = buf.readBuffer();\n    assert.ok(buf.atEnd(), \"excess bytes left after key\");\n    var kdfOptsBuf = new SSHBuffer({\n        buffer: kdfOpts\n    });\n    switch(kdf){\n        case \"none\":\n            if (cipher !== \"none\") {\n                throw new Error('OpenSSH-format key uses KDF \"none\" ' + 'but specifies a cipher other than \"none\"');\n            }\n            break;\n        case \"bcrypt\":\n            var salt = kdfOptsBuf.readBuffer();\n            var rounds = kdfOptsBuf.readInt();\n            var cinf = utils.opensshCipherInfo(cipher);\n            if (bcrypt === undefined) {\n                bcrypt = __webpack_require__(/*! bcrypt-pbkdf */ \"(rsc)/./node_modules/bcrypt-pbkdf/index.js\");\n            }\n            if (typeof options.passphrase === \"string\") {\n                options.passphrase = Buffer.from(options.passphrase, \"utf-8\");\n            }\n            if (!Buffer.isBuffer(options.passphrase)) {\n                throw new errors.KeyEncryptedError(options.filename, \"OpenSSH\");\n            }\n            var pass = new Uint8Array(options.passphrase);\n            var salti = new Uint8Array(salt);\n            /* Use the pbkdf to derive both the key and the IV. */ var out = new Uint8Array(cinf.keySize + cinf.blockSize);\n            var res = bcrypt.pbkdf(pass, pass.length, salti, salti.length, out, out.length, rounds);\n            if (res !== 0) {\n                throw new Error(\"bcrypt_pbkdf function returned \" + \"failure, parameters invalid\");\n            }\n            out = Buffer.from(out);\n            var ckey = out.slice(0, cinf.keySize);\n            var iv = out.slice(cinf.keySize, cinf.keySize + cinf.blockSize);\n            var cipherStream = crypto.createDecipheriv(cinf.opensslName, ckey, iv);\n            cipherStream.setAutoPadding(false);\n            var chunk, chunks = [];\n            cipherStream.once(\"error\", function(e) {\n                if (e.toString().indexOf(\"bad decrypt\") !== -1) {\n                    throw new Error(\"Incorrect passphrase \" + \"supplied, could not decrypt key\");\n                }\n                throw e;\n            });\n            cipherStream.write(privKeyBlob);\n            cipherStream.end();\n            while((chunk = cipherStream.read()) !== null)chunks.push(chunk);\n            privKeyBlob = Buffer.concat(chunks);\n            break;\n        default:\n            throw new Error('OpenSSH-format key uses unknown KDF \"' + kdf + '\"');\n    }\n    buf = new SSHBuffer({\n        buffer: privKeyBlob\n    });\n    var checkInt1 = buf.readInt();\n    var checkInt2 = buf.readInt();\n    if (checkInt1 !== checkInt2) {\n        throw new Error(\"Incorrect passphrase supplied, could not \" + \"decrypt key\");\n    }\n    var ret = {};\n    var key = rfc4253.readInternal(ret, \"private\", buf.remainder());\n    buf.skip(ret.consumed);\n    var comment = buf.readString();\n    key.comment = comment;\n    return key;\n}\nfunction write(key, options) {\n    var pubKey;\n    if (PrivateKey.isPrivateKey(key)) pubKey = key.toPublic();\n    else pubKey = key;\n    var cipher = \"none\";\n    var kdf = \"none\";\n    var kdfopts = Buffer.alloc(0);\n    var cinf = {\n        blockSize: 8\n    };\n    var passphrase;\n    if (options !== undefined) {\n        passphrase = options.passphrase;\n        if (typeof passphrase === \"string\") passphrase = Buffer.from(passphrase, \"utf-8\");\n        if (passphrase !== undefined) {\n            assert.buffer(passphrase, \"options.passphrase\");\n            assert.optionalString(options.cipher, \"options.cipher\");\n            cipher = options.cipher;\n            if (cipher === undefined) cipher = \"aes128-ctr\";\n            cinf = utils.opensshCipherInfo(cipher);\n            kdf = \"bcrypt\";\n        }\n    }\n    var privBuf;\n    if (PrivateKey.isPrivateKey(key)) {\n        privBuf = new SSHBuffer({});\n        var checkInt = crypto.randomBytes(4).readUInt32BE(0);\n        privBuf.writeInt(checkInt);\n        privBuf.writeInt(checkInt);\n        privBuf.write(key.toBuffer(\"rfc4253\"));\n        privBuf.writeString(key.comment || \"\");\n        var n = 1;\n        while(privBuf._offset % cinf.blockSize !== 0)privBuf.writeChar(n++);\n        privBuf = privBuf.toBuffer();\n    }\n    switch(kdf){\n        case \"none\":\n            break;\n        case \"bcrypt\":\n            var salt = crypto.randomBytes(16);\n            var rounds = 16;\n            var kdfssh = new SSHBuffer({});\n            kdfssh.writeBuffer(salt);\n            kdfssh.writeInt(rounds);\n            kdfopts = kdfssh.toBuffer();\n            if (bcrypt === undefined) {\n                bcrypt = __webpack_require__(/*! bcrypt-pbkdf */ \"(rsc)/./node_modules/bcrypt-pbkdf/index.js\");\n            }\n            var pass = new Uint8Array(passphrase);\n            var salti = new Uint8Array(salt);\n            /* Use the pbkdf to derive both the key and the IV. */ var out = new Uint8Array(cinf.keySize + cinf.blockSize);\n            var res = bcrypt.pbkdf(pass, pass.length, salti, salti.length, out, out.length, rounds);\n            if (res !== 0) {\n                throw new Error(\"bcrypt_pbkdf function returned \" + \"failure, parameters invalid\");\n            }\n            out = Buffer.from(out);\n            var ckey = out.slice(0, cinf.keySize);\n            var iv = out.slice(cinf.keySize, cinf.keySize + cinf.blockSize);\n            var cipherStream = crypto.createCipheriv(cinf.opensslName, ckey, iv);\n            cipherStream.setAutoPadding(false);\n            var chunk, chunks = [];\n            cipherStream.once(\"error\", function(e) {\n                throw e;\n            });\n            cipherStream.write(privBuf);\n            cipherStream.end();\n            while((chunk = cipherStream.read()) !== null)chunks.push(chunk);\n            privBuf = Buffer.concat(chunks);\n            break;\n        default:\n            throw new Error(\"Unsupported kdf \" + kdf);\n    }\n    var buf = new SSHBuffer({});\n    buf.writeCString(MAGIC);\n    buf.writeString(cipher); /* cipher */ \n    buf.writeString(kdf); /* kdf */ \n    buf.writeBuffer(kdfopts); /* kdfoptions */ \n    buf.writeInt(1); /* nkeys */ \n    buf.writeBuffer(pubKey.toBuffer(\"rfc4253\"));\n    if (privBuf) buf.writeBuffer(privBuf);\n    buf = buf.toBuffer();\n    var header;\n    if (PrivateKey.isPrivateKey(key)) header = \"OPENSSH PRIVATE KEY\";\n    else header = \"OPENSSH PUBLIC KEY\";\n    var tmp = buf.toString(\"base64\");\n    var len = tmp.length + tmp.length / 70 + 18 + 16 + header.length * 2 + 10;\n    buf = Buffer.alloc(len);\n    var o = 0;\n    o += buf.write(\"-----BEGIN \" + header + \"-----\\n\", o);\n    for(var i = 0; i < tmp.length;){\n        var limit = i + 70;\n        if (limit > tmp.length) limit = tmp.length;\n        o += buf.write(tmp.slice(i, limit), o);\n        buf[o++] = 10;\n        i = limit;\n    }\n    o += buf.write(\"-----END \" + header + \"-----\\n\", o);\n    return buf.slice(0, o);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL2Zvcm1hdHMvc3NoLXByaXZhdGUuanMiLCJtYXBwaW5ncyI6IkFBQUEsOEJBQThCO0FBRTlCQSxPQUFPQyxPQUFPLEdBQUc7SUFDaEJDLE1BQU1BO0lBQ05DLGdCQUFnQkE7SUFDaEJDLE9BQU9BO0FBQ1I7QUFFQSxJQUFJQyxTQUFTQyxtQkFBT0EsQ0FBQztBQUNyQixJQUFJQyxPQUFPRCxtQkFBT0EsQ0FBQztBQUNuQixJQUFJRSxTQUFTRiw4RkFBOEI7QUFDM0MsSUFBSUcsT0FBT0gsbUJBQU9BLENBQUM7QUFDbkIsSUFBSUksUUFBUUosbUJBQU9BLENBQUM7QUFDcEIsSUFBSUssU0FBU0wsbUJBQU9BLENBQUM7QUFFckIsSUFBSU0sTUFBTU4sbUJBQU9BLENBQUM7QUFDbEIsSUFBSU8sYUFBYVAsbUJBQU9BLENBQUM7QUFDekIsSUFBSVEsTUFBTVIsbUJBQU9BLENBQUM7QUFDbEIsSUFBSVMsVUFBVVQsbUJBQU9BLENBQUM7QUFDdEIsSUFBSVUsWUFBWVYsbUJBQU9BLENBQUM7QUFDeEIsSUFBSVcsU0FBU1gsbUJBQU9BLENBQUM7QUFFckIsSUFBSVk7QUFFSixTQUFTaEIsS0FBS2lCLEdBQUcsRUFBRUMsT0FBTztJQUN6QixPQUFRTixJQUFJWixJQUFJLENBQUNpQixLQUFLQztBQUN2QjtBQUVBLElBQUlDLFFBQVE7QUFFWixTQUFTbEIsZUFBZW1CLElBQUksRUFBRUgsR0FBRyxFQUFFQyxPQUFPO0lBQ3pDRCxNQUFNLElBQUlILFVBQVU7UUFBQ08sUUFBUUo7SUFBRztJQUVoQyxJQUFJSyxRQUFRTCxJQUFJTSxXQUFXO0lBQzNCcEIsT0FBT3FCLFdBQVcsQ0FBQ0YsT0FBT0gsT0FBTztJQUVqQyxJQUFJTSxTQUFTUixJQUFJUyxVQUFVO0lBQzNCLElBQUlDLE1BQU1WLElBQUlTLFVBQVU7SUFDeEIsSUFBSUUsVUFBVVgsSUFBSVksVUFBVTtJQUU1QixJQUFJQyxRQUFRYixJQUFJYyxPQUFPO0lBQ3ZCLElBQUlELFVBQVUsR0FBRztRQUNoQixNQUFPLElBQUlFLE1BQU0sc0NBQ2I7SUFDTDtJQUVBLElBQUlDLFNBQVNoQixJQUFJWSxVQUFVO0lBRTNCLElBQUlULFNBQVMsVUFBVTtRQUN0QmpCLE9BQU8rQixFQUFFLENBQUNqQixJQUFJa0IsS0FBSyxJQUFJO1FBQ3ZCLE9BQVF0QixRQUFRYixJQUFJLENBQUNpQztJQUN0QjtJQUVBLElBQUlHLGNBQWNuQixJQUFJWSxVQUFVO0lBQ2hDMUIsT0FBTytCLEVBQUUsQ0FBQ2pCLElBQUlrQixLQUFLLElBQUk7SUFFdkIsSUFBSUUsYUFBYSxJQUFJdkIsVUFBVTtRQUFFTyxRQUFRTztJQUFRO0lBQ2pELE9BQVFEO1FBQ1IsS0FBSztZQUNKLElBQUlGLFdBQVcsUUFBUTtnQkFDdEIsTUFBTyxJQUFJTyxNQUFNLHdDQUNaO1lBQ047WUFDQTtRQUNELEtBQUs7WUFDSixJQUFJTSxPQUFPRCxXQUFXUixVQUFVO1lBQ2hDLElBQUlVLFNBQVNGLFdBQVdOLE9BQU87WUFDL0IsSUFBSVMsT0FBT2hDLE1BQU1pQyxpQkFBaUIsQ0FBQ2hCO1lBQ25DLElBQUlULFdBQVcwQixXQUFXO2dCQUN6QjFCLFNBQVNaLG1CQUFPQSxDQUFDO1lBQ2xCO1lBRUEsSUFBSSxPQUFRYyxRQUFReUIsVUFBVSxLQUFNLFVBQVU7Z0JBQzdDekIsUUFBUXlCLFVBQVUsR0FBR3JDLE9BQU9zQyxJQUFJLENBQUMxQixRQUFReUIsVUFBVSxFQUMvQztZQUNMO1lBQ0EsSUFBSSxDQUFDckMsT0FBT3VDLFFBQVEsQ0FBQzNCLFFBQVF5QixVQUFVLEdBQUc7Z0JBQ3pDLE1BQU8sSUFBSTVCLE9BQU8rQixpQkFBaUIsQ0FDL0I1QixRQUFRNkIsUUFBUSxFQUFFO1lBQ3ZCO1lBRUEsSUFBSUMsT0FBTyxJQUFJQyxXQUFXL0IsUUFBUXlCLFVBQVU7WUFDNUMsSUFBSU8sUUFBUSxJQUFJRCxXQUFXWDtZQUMzQixvREFBb0QsR0FDcEQsSUFBSWEsTUFBTSxJQUFJRixXQUFXVCxLQUFLWSxPQUFPLEdBQUdaLEtBQUthLFNBQVM7WUFDdEQsSUFBSUMsTUFBTXRDLE9BQU91QyxLQUFLLENBQUNQLE1BQU1BLEtBQUtRLE1BQU0sRUFBRU4sT0FBT0EsTUFBTU0sTUFBTSxFQUN6REwsS0FBS0EsSUFBSUssTUFBTSxFQUFFakI7WUFDckIsSUFBSWUsUUFBUSxHQUFHO2dCQUNkLE1BQU8sSUFBSXRCLE1BQU0sb0NBQ2I7WUFDTDtZQUNBbUIsTUFBTTdDLE9BQU9zQyxJQUFJLENBQUNPO1lBQ2xCLElBQUlNLE9BQU9OLElBQUlPLEtBQUssQ0FBQyxHQUFHbEIsS0FBS1ksT0FBTztZQUNwQyxJQUFJTyxLQUFLUixJQUFJTyxLQUFLLENBQUNsQixLQUFLWSxPQUFPLEVBQUVaLEtBQUtZLE9BQU8sR0FBR1osS0FBS2EsU0FBUztZQUM5RCxJQUFJTyxlQUFlbkQsT0FBT29ELGdCQUFnQixDQUFDckIsS0FBS3NCLFdBQVcsRUFDdkRMLE1BQU1FO1lBQ1ZDLGFBQWFHLGNBQWMsQ0FBQztZQUM1QixJQUFJQyxPQUFPQyxTQUFTLEVBQUU7WUFDdEJMLGFBQWFNLElBQUksQ0FBQyxTQUFTLFNBQVVDLENBQUM7Z0JBQ3JDLElBQUlBLEVBQUVDLFFBQVEsR0FBR0MsT0FBTyxDQUFDLG1CQUFtQixDQUFDLEdBQUc7b0JBQy9DLE1BQU8sSUFBSXJDLE1BQU0sMEJBQ2I7Z0JBQ0w7Z0JBQ0EsTUFBT21DO1lBQ1I7WUFDQVAsYUFBYTFELEtBQUssQ0FBQ2tDO1lBQ25Cd0IsYUFBYVUsR0FBRztZQUNoQixNQUFPLENBQUNOLFFBQVFKLGFBQWE1RCxJQUFJLEVBQUMsTUFBTyxLQUN4Q2lFLE9BQU9NLElBQUksQ0FBQ1A7WUFDYjVCLGNBQWM5QixPQUFPa0UsTUFBTSxDQUFDUDtZQUM1QjtRQUNEO1lBQ0MsTUFBTyxJQUFJakMsTUFDUCwwQ0FBMENMLE1BQU07SUFDckQ7SUFFQVYsTUFBTSxJQUFJSCxVQUFVO1FBQUNPLFFBQVFlO0lBQVc7SUFFeEMsSUFBSXFDLFlBQVl4RCxJQUFJYyxPQUFPO0lBQzNCLElBQUkyQyxZQUFZekQsSUFBSWMsT0FBTztJQUMzQixJQUFJMEMsY0FBY0MsV0FBVztRQUM1QixNQUFPLElBQUkxQyxNQUFNLDhDQUNiO0lBQ0w7SUFFQSxJQUFJMkMsTUFBTSxDQUFDO0lBQ1gsSUFBSUMsTUFBTS9ELFFBQVFnRSxZQUFZLENBQUNGLEtBQUssV0FBVzFELElBQUk2RCxTQUFTO0lBRTVEN0QsSUFBSThELElBQUksQ0FBQ0osSUFBSUssUUFBUTtJQUVyQixJQUFJQyxVQUFVaEUsSUFBSVMsVUFBVTtJQUM1QmtELElBQUlLLE9BQU8sR0FBR0E7SUFFZCxPQUFRTDtBQUNUO0FBRUEsU0FBUzFFLE1BQU0wRSxHQUFHLEVBQUUxRCxPQUFPO0lBQzFCLElBQUllO0lBQ0osSUFBSXRCLFdBQVd1RSxZQUFZLENBQUNOLE1BQzNCM0MsU0FBUzJDLElBQUlPLFFBQVE7U0FFckJsRCxTQUFTMkM7SUFFVixJQUFJbkQsU0FBUztJQUNiLElBQUlFLE1BQU07SUFDVixJQUFJeUQsVUFBVTlFLE9BQU8rRSxLQUFLLENBQUM7SUFDM0IsSUFBSTdDLE9BQU87UUFBRWEsV0FBVztJQUFFO0lBQzFCLElBQUlWO0lBQ0osSUFBSXpCLFlBQVl3QixXQUFXO1FBQzFCQyxhQUFhekIsUUFBUXlCLFVBQVU7UUFDL0IsSUFBSSxPQUFRQSxlQUFnQixVQUMzQkEsYUFBYXJDLE9BQU9zQyxJQUFJLENBQUNELFlBQVk7UUFDdEMsSUFBSUEsZUFBZUQsV0FBVztZQUM3QnZDLE9BQU9rQixNQUFNLENBQUNzQixZQUFZO1lBQzFCeEMsT0FBT21GLGNBQWMsQ0FBQ3BFLFFBQVFPLE1BQU0sRUFBRTtZQUN0Q0EsU0FBU1AsUUFBUU8sTUFBTTtZQUN2QixJQUFJQSxXQUFXaUIsV0FDZGpCLFNBQVM7WUFDVmUsT0FBT2hDLE1BQU1pQyxpQkFBaUIsQ0FBQ2hCO1lBQy9CRSxNQUFNO1FBQ1A7SUFDRDtJQUVBLElBQUk0RDtJQUNKLElBQUk1RSxXQUFXdUUsWUFBWSxDQUFDTixNQUFNO1FBQ2pDVyxVQUFVLElBQUl6RSxVQUFVLENBQUM7UUFDekIsSUFBSTBFLFdBQVcvRSxPQUFPZ0YsV0FBVyxDQUFDLEdBQUdDLFlBQVksQ0FBQztRQUNsREgsUUFBUUksUUFBUSxDQUFDSDtRQUNqQkQsUUFBUUksUUFBUSxDQUFDSDtRQUNqQkQsUUFBUXJGLEtBQUssQ0FBQzBFLElBQUlnQixRQUFRLENBQUM7UUFDM0JMLFFBQVFNLFdBQVcsQ0FBQ2pCLElBQUlLLE9BQU8sSUFBSTtRQUVuQyxJQUFJYSxJQUFJO1FBQ1IsTUFBT1AsUUFBUVEsT0FBTyxHQUFHdkQsS0FBS2EsU0FBUyxLQUFLLEVBQzNDa0MsUUFBUVMsU0FBUyxDQUFDRjtRQUNuQlAsVUFBVUEsUUFBUUssUUFBUTtJQUMzQjtJQUVBLE9BQVFqRTtRQUNSLEtBQUs7WUFDSjtRQUNELEtBQUs7WUFDSixJQUFJVyxPQUFPN0IsT0FBT2dGLFdBQVcsQ0FBQztZQUM5QixJQUFJbEQsU0FBUztZQUNiLElBQUkwRCxTQUFTLElBQUluRixVQUFVLENBQUM7WUFDNUJtRixPQUFPQyxXQUFXLENBQUM1RDtZQUNuQjJELE9BQU9OLFFBQVEsQ0FBQ3BEO1lBQ2hCNkMsVUFBVWEsT0FBT0wsUUFBUTtZQUV6QixJQUFJNUUsV0FBVzBCLFdBQVc7Z0JBQ3pCMUIsU0FBU1osbUJBQU9BLENBQUM7WUFDbEI7WUFDQSxJQUFJNEMsT0FBTyxJQUFJQyxXQUFXTjtZQUMxQixJQUFJTyxRQUFRLElBQUlELFdBQVdYO1lBQzNCLG9EQUFvRCxHQUNwRCxJQUFJYSxNQUFNLElBQUlGLFdBQVdULEtBQUtZLE9BQU8sR0FBR1osS0FBS2EsU0FBUztZQUN0RCxJQUFJQyxNQUFNdEMsT0FBT3VDLEtBQUssQ0FBQ1AsTUFBTUEsS0FBS1EsTUFBTSxFQUFFTixPQUFPQSxNQUFNTSxNQUFNLEVBQ3pETCxLQUFLQSxJQUFJSyxNQUFNLEVBQUVqQjtZQUNyQixJQUFJZSxRQUFRLEdBQUc7Z0JBQ2QsTUFBTyxJQUFJdEIsTUFBTSxvQ0FDYjtZQUNMO1lBQ0FtQixNQUFNN0MsT0FBT3NDLElBQUksQ0FBQ087WUFDbEIsSUFBSU0sT0FBT04sSUFBSU8sS0FBSyxDQUFDLEdBQUdsQixLQUFLWSxPQUFPO1lBQ3BDLElBQUlPLEtBQUtSLElBQUlPLEtBQUssQ0FBQ2xCLEtBQUtZLE9BQU8sRUFBRVosS0FBS1ksT0FBTyxHQUFHWixLQUFLYSxTQUFTO1lBRTlELElBQUlPLGVBQWVuRCxPQUFPMEYsY0FBYyxDQUFDM0QsS0FBS3NCLFdBQVcsRUFDckRMLE1BQU1FO1lBQ1ZDLGFBQWFHLGNBQWMsQ0FBQztZQUM1QixJQUFJQyxPQUFPQyxTQUFTLEVBQUU7WUFDdEJMLGFBQWFNLElBQUksQ0FBQyxTQUFTLFNBQVVDLENBQUM7Z0JBQ3JDLE1BQU9BO1lBQ1I7WUFDQVAsYUFBYTFELEtBQUssQ0FBQ3FGO1lBQ25CM0IsYUFBYVUsR0FBRztZQUNoQixNQUFPLENBQUNOLFFBQVFKLGFBQWE1RCxJQUFJLEVBQUMsTUFBTyxLQUN4Q2lFLE9BQU9NLElBQUksQ0FBQ1A7WUFDYnVCLFVBQVVqRixPQUFPa0UsTUFBTSxDQUFDUDtZQUN4QjtRQUNEO1lBQ0MsTUFBTyxJQUFJakMsTUFBTSxxQkFBcUJMO0lBQ3ZDO0lBRUEsSUFBSVYsTUFBTSxJQUFJSCxVQUFVLENBQUM7SUFFekJHLElBQUltRixZQUFZLENBQUNqRjtJQUNqQkYsSUFBSTRFLFdBQVcsQ0FBQ3BFLFNBQVMsVUFBVTtJQUNuQ1IsSUFBSTRFLFdBQVcsQ0FBQ2xFLE1BQU8sT0FBTztJQUM5QlYsSUFBSWlGLFdBQVcsQ0FBQ2QsVUFBVSxjQUFjO0lBRXhDbkUsSUFBSTBFLFFBQVEsQ0FBQyxJQUFLLFNBQVM7SUFDM0IxRSxJQUFJaUYsV0FBVyxDQUFDakUsT0FBTzJELFFBQVEsQ0FBQztJQUVoQyxJQUFJTCxTQUNIdEUsSUFBSWlGLFdBQVcsQ0FBQ1g7SUFFakJ0RSxNQUFNQSxJQUFJMkUsUUFBUTtJQUVsQixJQUFJUztJQUNKLElBQUkxRixXQUFXdUUsWUFBWSxDQUFDTixNQUMzQnlCLFNBQVM7U0FFVEEsU0FBUztJQUVWLElBQUlDLE1BQU1yRixJQUFJbUQsUUFBUSxDQUFDO0lBQ3ZCLElBQUltQyxNQUFNRCxJQUFJOUMsTUFBTSxHQUFJOEMsSUFBSTlDLE1BQU0sR0FBRyxLQUNqQyxLQUFLLEtBQUs2QyxPQUFPN0MsTUFBTSxHQUFDLElBQUk7SUFDaEN2QyxNQUFNWCxPQUFPK0UsS0FBSyxDQUFDa0I7SUFDbkIsSUFBSUMsSUFBSTtJQUNSQSxLQUFLdkYsSUFBSWYsS0FBSyxDQUFDLGdCQUFnQm1HLFNBQVMsV0FBV0c7SUFDbkQsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlILElBQUk5QyxNQUFNLEVBQUk7UUFDakMsSUFBSWtELFFBQVFELElBQUk7UUFDaEIsSUFBSUMsUUFBUUosSUFBSTlDLE1BQU0sRUFDckJrRCxRQUFRSixJQUFJOUMsTUFBTTtRQUNuQmdELEtBQUt2RixJQUFJZixLQUFLLENBQUNvRyxJQUFJNUMsS0FBSyxDQUFDK0MsR0FBR0MsUUFBUUY7UUFDcEN2RixHQUFHLENBQUN1RixJQUFJLEdBQUc7UUFDWEMsSUFBSUM7SUFDTDtJQUNBRixLQUFLdkYsSUFBSWYsS0FBSyxDQUFDLGNBQWNtRyxTQUFTLFdBQVdHO0lBRWpELE9BQVF2RixJQUFJeUMsS0FBSyxDQUFDLEdBQUc4QztBQUN0QiIsInNvdXJjZXMiOlsid2VicGFjazovL2NpdmlsLWVuZ2luZWVyaW5nLXBsYXRmb3JtLy4vbm9kZV9tb2R1bGVzL3NzaHBrL2xpYi9mb3JtYXRzL3NzaC1wcml2YXRlLmpzPzMzZmQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUgSm95ZW50LCBJbmMuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRyZWFkOiByZWFkLFxuXHRyZWFkU1NIUHJpdmF0ZTogcmVhZFNTSFByaXZhdGUsXG5cdHdyaXRlOiB3cml0ZVxufTtcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydC1wbHVzJyk7XG52YXIgYXNuMSA9IHJlcXVpcmUoJ2FzbjEnKTtcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlci1idWZmZXInKS5CdWZmZXI7XG52YXIgYWxncyA9IHJlcXVpcmUoJy4uL2FsZ3MnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG5cbnZhciBLZXkgPSByZXF1aXJlKCcuLi9rZXknKTtcbnZhciBQcml2YXRlS2V5ID0gcmVxdWlyZSgnLi4vcHJpdmF0ZS1rZXknKTtcbnZhciBwZW0gPSByZXF1aXJlKCcuL3BlbScpO1xudmFyIHJmYzQyNTMgPSByZXF1aXJlKCcuL3JmYzQyNTMnKTtcbnZhciBTU0hCdWZmZXIgPSByZXF1aXJlKCcuLi9zc2gtYnVmZmVyJyk7XG52YXIgZXJyb3JzID0gcmVxdWlyZSgnLi4vZXJyb3JzJyk7XG5cbnZhciBiY3J5cHQ7XG5cbmZ1bmN0aW9uIHJlYWQoYnVmLCBvcHRpb25zKSB7XG5cdHJldHVybiAocGVtLnJlYWQoYnVmLCBvcHRpb25zKSk7XG59XG5cbnZhciBNQUdJQyA9ICdvcGVuc3NoLWtleS12MSc7XG5cbmZ1bmN0aW9uIHJlYWRTU0hQcml2YXRlKHR5cGUsIGJ1Ziwgb3B0aW9ucykge1xuXHRidWYgPSBuZXcgU1NIQnVmZmVyKHtidWZmZXI6IGJ1Zn0pO1xuXG5cdHZhciBtYWdpYyA9IGJ1Zi5yZWFkQ1N0cmluZygpO1xuXHRhc3NlcnQuc3RyaWN0RXF1YWwobWFnaWMsIE1BR0lDLCAnYmFkIG1hZ2ljIHN0cmluZycpO1xuXG5cdHZhciBjaXBoZXIgPSBidWYucmVhZFN0cmluZygpO1xuXHR2YXIga2RmID0gYnVmLnJlYWRTdHJpbmcoKTtcblx0dmFyIGtkZk9wdHMgPSBidWYucmVhZEJ1ZmZlcigpO1xuXG5cdHZhciBua2V5cyA9IGJ1Zi5yZWFkSW50KCk7XG5cdGlmIChua2V5cyAhPT0gMSkge1xuXHRcdHRocm93IChuZXcgRXJyb3IoJ09wZW5TU0gtZm9ybWF0IGtleSBmaWxlIGNvbnRhaW5zICcgK1xuXHRcdCAgICAnbXVsdGlwbGUga2V5czogdGhpcyBpcyB1bnN1cHBvcnRlZC4nKSk7XG5cdH1cblxuXHR2YXIgcHViS2V5ID0gYnVmLnJlYWRCdWZmZXIoKTtcblxuXHRpZiAodHlwZSA9PT0gJ3B1YmxpYycpIHtcblx0XHRhc3NlcnQub2soYnVmLmF0RW5kKCksICdleGNlc3MgYnl0ZXMgbGVmdCBhZnRlciBrZXknKTtcblx0XHRyZXR1cm4gKHJmYzQyNTMucmVhZChwdWJLZXkpKTtcblx0fVxuXG5cdHZhciBwcml2S2V5QmxvYiA9IGJ1Zi5yZWFkQnVmZmVyKCk7XG5cdGFzc2VydC5vayhidWYuYXRFbmQoKSwgJ2V4Y2VzcyBieXRlcyBsZWZ0IGFmdGVyIGtleScpO1xuXG5cdHZhciBrZGZPcHRzQnVmID0gbmV3IFNTSEJ1ZmZlcih7IGJ1ZmZlcjoga2RmT3B0cyB9KTtcblx0c3dpdGNoIChrZGYpIHtcblx0Y2FzZSAnbm9uZSc6XG5cdFx0aWYgKGNpcGhlciAhPT0gJ25vbmUnKSB7XG5cdFx0XHR0aHJvdyAobmV3IEVycm9yKCdPcGVuU1NILWZvcm1hdCBrZXkgdXNlcyBLREYgXCJub25lXCIgJyArXG5cdFx0XHQgICAgICdidXQgc3BlY2lmaWVzIGEgY2lwaGVyIG90aGVyIHRoYW4gXCJub25lXCInKSk7XG5cdFx0fVxuXHRcdGJyZWFrO1xuXHRjYXNlICdiY3J5cHQnOlxuXHRcdHZhciBzYWx0ID0ga2RmT3B0c0J1Zi5yZWFkQnVmZmVyKCk7XG5cdFx0dmFyIHJvdW5kcyA9IGtkZk9wdHNCdWYucmVhZEludCgpO1xuXHRcdHZhciBjaW5mID0gdXRpbHMub3BlbnNzaENpcGhlckluZm8oY2lwaGVyKTtcblx0XHRpZiAoYmNyeXB0ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdGJjcnlwdCA9IHJlcXVpcmUoJ2JjcnlwdC1wYmtkZicpO1xuXHRcdH1cblxuXHRcdGlmICh0eXBlb2YgKG9wdGlvbnMucGFzc3BocmFzZSkgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRvcHRpb25zLnBhc3NwaHJhc2UgPSBCdWZmZXIuZnJvbShvcHRpb25zLnBhc3NwaHJhc2UsXG5cdFx0XHQgICAgJ3V0Zi04Jyk7XG5cdFx0fVxuXHRcdGlmICghQnVmZmVyLmlzQnVmZmVyKG9wdGlvbnMucGFzc3BocmFzZSkpIHtcblx0XHRcdHRocm93IChuZXcgZXJyb3JzLktleUVuY3J5cHRlZEVycm9yKFxuXHRcdFx0ICAgIG9wdGlvbnMuZmlsZW5hbWUsICdPcGVuU1NIJykpO1xuXHRcdH1cblxuXHRcdHZhciBwYXNzID0gbmV3IFVpbnQ4QXJyYXkob3B0aW9ucy5wYXNzcGhyYXNlKTtcblx0XHR2YXIgc2FsdGkgPSBuZXcgVWludDhBcnJheShzYWx0KTtcblx0XHQvKiBVc2UgdGhlIHBia2RmIHRvIGRlcml2ZSBib3RoIHRoZSBrZXkgYW5kIHRoZSBJVi4gKi9cblx0XHR2YXIgb3V0ID0gbmV3IFVpbnQ4QXJyYXkoY2luZi5rZXlTaXplICsgY2luZi5ibG9ja1NpemUpO1xuXHRcdHZhciByZXMgPSBiY3J5cHQucGJrZGYocGFzcywgcGFzcy5sZW5ndGgsIHNhbHRpLCBzYWx0aS5sZW5ndGgsXG5cdFx0ICAgIG91dCwgb3V0Lmxlbmd0aCwgcm91bmRzKTtcblx0XHRpZiAocmVzICE9PSAwKSB7XG5cdFx0XHR0aHJvdyAobmV3IEVycm9yKCdiY3J5cHRfcGJrZGYgZnVuY3Rpb24gcmV0dXJuZWQgJyArXG5cdFx0XHQgICAgJ2ZhaWx1cmUsIHBhcmFtZXRlcnMgaW52YWxpZCcpKTtcblx0XHR9XG5cdFx0b3V0ID0gQnVmZmVyLmZyb20ob3V0KTtcblx0XHR2YXIgY2tleSA9IG91dC5zbGljZSgwLCBjaW5mLmtleVNpemUpO1xuXHRcdHZhciBpdiA9IG91dC5zbGljZShjaW5mLmtleVNpemUsIGNpbmYua2V5U2l6ZSArIGNpbmYuYmxvY2tTaXplKTtcblx0XHR2YXIgY2lwaGVyU3RyZWFtID0gY3J5cHRvLmNyZWF0ZURlY2lwaGVyaXYoY2luZi5vcGVuc3NsTmFtZSxcblx0XHQgICAgY2tleSwgaXYpO1xuXHRcdGNpcGhlclN0cmVhbS5zZXRBdXRvUGFkZGluZyhmYWxzZSk7XG5cdFx0dmFyIGNodW5rLCBjaHVua3MgPSBbXTtcblx0XHRjaXBoZXJTdHJlYW0ub25jZSgnZXJyb3InLCBmdW5jdGlvbiAoZSkge1xuXHRcdFx0aWYgKGUudG9TdHJpbmcoKS5pbmRleE9mKCdiYWQgZGVjcnlwdCcpICE9PSAtMSkge1xuXHRcdFx0XHR0aHJvdyAobmV3IEVycm9yKCdJbmNvcnJlY3QgcGFzc3BocmFzZSAnICtcblx0XHRcdFx0ICAgICdzdXBwbGllZCwgY291bGQgbm90IGRlY3J5cHQga2V5JykpO1xuXHRcdFx0fVxuXHRcdFx0dGhyb3cgKGUpO1xuXHRcdH0pO1xuXHRcdGNpcGhlclN0cmVhbS53cml0ZShwcml2S2V5QmxvYik7XG5cdFx0Y2lwaGVyU3RyZWFtLmVuZCgpO1xuXHRcdHdoaWxlICgoY2h1bmsgPSBjaXBoZXJTdHJlYW0ucmVhZCgpKSAhPT0gbnVsbClcblx0XHRcdGNodW5rcy5wdXNoKGNodW5rKTtcblx0XHRwcml2S2V5QmxvYiA9IEJ1ZmZlci5jb25jYXQoY2h1bmtzKTtcblx0XHRicmVhaztcblx0ZGVmYXVsdDpcblx0XHR0aHJvdyAobmV3IEVycm9yKFxuXHRcdCAgICAnT3BlblNTSC1mb3JtYXQga2V5IHVzZXMgdW5rbm93biBLREYgXCInICsga2RmICsgJ1wiJykpO1xuXHR9XG5cblx0YnVmID0gbmV3IFNTSEJ1ZmZlcih7YnVmZmVyOiBwcml2S2V5QmxvYn0pO1xuXG5cdHZhciBjaGVja0ludDEgPSBidWYucmVhZEludCgpO1xuXHR2YXIgY2hlY2tJbnQyID0gYnVmLnJlYWRJbnQoKTtcblx0aWYgKGNoZWNrSW50MSAhPT0gY2hlY2tJbnQyKSB7XG5cdFx0dGhyb3cgKG5ldyBFcnJvcignSW5jb3JyZWN0IHBhc3NwaHJhc2Ugc3VwcGxpZWQsIGNvdWxkIG5vdCAnICtcblx0XHQgICAgJ2RlY3J5cHQga2V5JykpO1xuXHR9XG5cblx0dmFyIHJldCA9IHt9O1xuXHR2YXIga2V5ID0gcmZjNDI1My5yZWFkSW50ZXJuYWwocmV0LCAncHJpdmF0ZScsIGJ1Zi5yZW1haW5kZXIoKSk7XG5cblx0YnVmLnNraXAocmV0LmNvbnN1bWVkKTtcblxuXHR2YXIgY29tbWVudCA9IGJ1Zi5yZWFkU3RyaW5nKCk7XG5cdGtleS5jb21tZW50ID0gY29tbWVudDtcblxuXHRyZXR1cm4gKGtleSk7XG59XG5cbmZ1bmN0aW9uIHdyaXRlKGtleSwgb3B0aW9ucykge1xuXHR2YXIgcHViS2V5O1xuXHRpZiAoUHJpdmF0ZUtleS5pc1ByaXZhdGVLZXkoa2V5KSlcblx0XHRwdWJLZXkgPSBrZXkudG9QdWJsaWMoKTtcblx0ZWxzZVxuXHRcdHB1YktleSA9IGtleTtcblxuXHR2YXIgY2lwaGVyID0gJ25vbmUnO1xuXHR2YXIga2RmID0gJ25vbmUnO1xuXHR2YXIga2Rmb3B0cyA9IEJ1ZmZlci5hbGxvYygwKTtcblx0dmFyIGNpbmYgPSB7IGJsb2NrU2l6ZTogOCB9O1xuXHR2YXIgcGFzc3BocmFzZTtcblx0aWYgKG9wdGlvbnMgIT09IHVuZGVmaW5lZCkge1xuXHRcdHBhc3NwaHJhc2UgPSBvcHRpb25zLnBhc3NwaHJhc2U7XG5cdFx0aWYgKHR5cGVvZiAocGFzc3BocmFzZSkgPT09ICdzdHJpbmcnKVxuXHRcdFx0cGFzc3BocmFzZSA9IEJ1ZmZlci5mcm9tKHBhc3NwaHJhc2UsICd1dGYtOCcpO1xuXHRcdGlmIChwYXNzcGhyYXNlICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdGFzc2VydC5idWZmZXIocGFzc3BocmFzZSwgJ29wdGlvbnMucGFzc3BocmFzZScpO1xuXHRcdFx0YXNzZXJ0Lm9wdGlvbmFsU3RyaW5nKG9wdGlvbnMuY2lwaGVyLCAnb3B0aW9ucy5jaXBoZXInKTtcblx0XHRcdGNpcGhlciA9IG9wdGlvbnMuY2lwaGVyO1xuXHRcdFx0aWYgKGNpcGhlciA9PT0gdW5kZWZpbmVkKVxuXHRcdFx0XHRjaXBoZXIgPSAnYWVzMTI4LWN0cic7XG5cdFx0XHRjaW5mID0gdXRpbHMub3BlbnNzaENpcGhlckluZm8oY2lwaGVyKTtcblx0XHRcdGtkZiA9ICdiY3J5cHQnO1xuXHRcdH1cblx0fVxuXG5cdHZhciBwcml2QnVmO1xuXHRpZiAoUHJpdmF0ZUtleS5pc1ByaXZhdGVLZXkoa2V5KSkge1xuXHRcdHByaXZCdWYgPSBuZXcgU1NIQnVmZmVyKHt9KTtcblx0XHR2YXIgY2hlY2tJbnQgPSBjcnlwdG8ucmFuZG9tQnl0ZXMoNCkucmVhZFVJbnQzMkJFKDApO1xuXHRcdHByaXZCdWYud3JpdGVJbnQoY2hlY2tJbnQpO1xuXHRcdHByaXZCdWYud3JpdGVJbnQoY2hlY2tJbnQpO1xuXHRcdHByaXZCdWYud3JpdGUoa2V5LnRvQnVmZmVyKCdyZmM0MjUzJykpO1xuXHRcdHByaXZCdWYud3JpdGVTdHJpbmcoa2V5LmNvbW1lbnQgfHwgJycpO1xuXG5cdFx0dmFyIG4gPSAxO1xuXHRcdHdoaWxlIChwcml2QnVmLl9vZmZzZXQgJSBjaW5mLmJsb2NrU2l6ZSAhPT0gMClcblx0XHRcdHByaXZCdWYud3JpdGVDaGFyKG4rKyk7XG5cdFx0cHJpdkJ1ZiA9IHByaXZCdWYudG9CdWZmZXIoKTtcblx0fVxuXG5cdHN3aXRjaCAoa2RmKSB7XG5cdGNhc2UgJ25vbmUnOlxuXHRcdGJyZWFrO1xuXHRjYXNlICdiY3J5cHQnOlxuXHRcdHZhciBzYWx0ID0gY3J5cHRvLnJhbmRvbUJ5dGVzKDE2KTtcblx0XHR2YXIgcm91bmRzID0gMTY7XG5cdFx0dmFyIGtkZnNzaCA9IG5ldyBTU0hCdWZmZXIoe30pO1xuXHRcdGtkZnNzaC53cml0ZUJ1ZmZlcihzYWx0KTtcblx0XHRrZGZzc2gud3JpdGVJbnQocm91bmRzKTtcblx0XHRrZGZvcHRzID0ga2Rmc3NoLnRvQnVmZmVyKCk7XG5cblx0XHRpZiAoYmNyeXB0ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdGJjcnlwdCA9IHJlcXVpcmUoJ2JjcnlwdC1wYmtkZicpO1xuXHRcdH1cblx0XHR2YXIgcGFzcyA9IG5ldyBVaW50OEFycmF5KHBhc3NwaHJhc2UpO1xuXHRcdHZhciBzYWx0aSA9IG5ldyBVaW50OEFycmF5KHNhbHQpO1xuXHRcdC8qIFVzZSB0aGUgcGJrZGYgdG8gZGVyaXZlIGJvdGggdGhlIGtleSBhbmQgdGhlIElWLiAqL1xuXHRcdHZhciBvdXQgPSBuZXcgVWludDhBcnJheShjaW5mLmtleVNpemUgKyBjaW5mLmJsb2NrU2l6ZSk7XG5cdFx0dmFyIHJlcyA9IGJjcnlwdC5wYmtkZihwYXNzLCBwYXNzLmxlbmd0aCwgc2FsdGksIHNhbHRpLmxlbmd0aCxcblx0XHQgICAgb3V0LCBvdXQubGVuZ3RoLCByb3VuZHMpO1xuXHRcdGlmIChyZXMgIT09IDApIHtcblx0XHRcdHRocm93IChuZXcgRXJyb3IoJ2JjcnlwdF9wYmtkZiBmdW5jdGlvbiByZXR1cm5lZCAnICtcblx0XHRcdCAgICAnZmFpbHVyZSwgcGFyYW1ldGVycyBpbnZhbGlkJykpO1xuXHRcdH1cblx0XHRvdXQgPSBCdWZmZXIuZnJvbShvdXQpO1xuXHRcdHZhciBja2V5ID0gb3V0LnNsaWNlKDAsIGNpbmYua2V5U2l6ZSk7XG5cdFx0dmFyIGl2ID0gb3V0LnNsaWNlKGNpbmYua2V5U2l6ZSwgY2luZi5rZXlTaXplICsgY2luZi5ibG9ja1NpemUpO1xuXG5cdFx0dmFyIGNpcGhlclN0cmVhbSA9IGNyeXB0by5jcmVhdGVDaXBoZXJpdihjaW5mLm9wZW5zc2xOYW1lLFxuXHRcdCAgICBja2V5LCBpdik7XG5cdFx0Y2lwaGVyU3RyZWFtLnNldEF1dG9QYWRkaW5nKGZhbHNlKTtcblx0XHR2YXIgY2h1bmssIGNodW5rcyA9IFtdO1xuXHRcdGNpcGhlclN0cmVhbS5vbmNlKCdlcnJvcicsIGZ1bmN0aW9uIChlKSB7XG5cdFx0XHR0aHJvdyAoZSk7XG5cdFx0fSk7XG5cdFx0Y2lwaGVyU3RyZWFtLndyaXRlKHByaXZCdWYpO1xuXHRcdGNpcGhlclN0cmVhbS5lbmQoKTtcblx0XHR3aGlsZSAoKGNodW5rID0gY2lwaGVyU3RyZWFtLnJlYWQoKSkgIT09IG51bGwpXG5cdFx0XHRjaHVua3MucHVzaChjaHVuayk7XG5cdFx0cHJpdkJ1ZiA9IEJ1ZmZlci5jb25jYXQoY2h1bmtzKTtcblx0XHRicmVhaztcblx0ZGVmYXVsdDpcblx0XHR0aHJvdyAobmV3IEVycm9yKCdVbnN1cHBvcnRlZCBrZGYgJyArIGtkZikpO1xuXHR9XG5cblx0dmFyIGJ1ZiA9IG5ldyBTU0hCdWZmZXIoe30pO1xuXG5cdGJ1Zi53cml0ZUNTdHJpbmcoTUFHSUMpO1xuXHRidWYud3JpdGVTdHJpbmcoY2lwaGVyKTtcdC8qIGNpcGhlciAqL1xuXHRidWYud3JpdGVTdHJpbmcoa2RmKTtcdFx0Lyoga2RmICovXG5cdGJ1Zi53cml0ZUJ1ZmZlcihrZGZvcHRzKTtcdC8qIGtkZm9wdGlvbnMgKi9cblxuXHRidWYud3JpdGVJbnQoMSk7XHRcdC8qIG5rZXlzICovXG5cdGJ1Zi53cml0ZUJ1ZmZlcihwdWJLZXkudG9CdWZmZXIoJ3JmYzQyNTMnKSk7XG5cblx0aWYgKHByaXZCdWYpXG5cdFx0YnVmLndyaXRlQnVmZmVyKHByaXZCdWYpO1xuXG5cdGJ1ZiA9IGJ1Zi50b0J1ZmZlcigpO1xuXG5cdHZhciBoZWFkZXI7XG5cdGlmIChQcml2YXRlS2V5LmlzUHJpdmF0ZUtleShrZXkpKVxuXHRcdGhlYWRlciA9ICdPUEVOU1NIIFBSSVZBVEUgS0VZJztcblx0ZWxzZVxuXHRcdGhlYWRlciA9ICdPUEVOU1NIIFBVQkxJQyBLRVknO1xuXG5cdHZhciB0bXAgPSBidWYudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuXHR2YXIgbGVuID0gdG1wLmxlbmd0aCArICh0bXAubGVuZ3RoIC8gNzApICtcblx0ICAgIDE4ICsgMTYgKyBoZWFkZXIubGVuZ3RoKjIgKyAxMDtcblx0YnVmID0gQnVmZmVyLmFsbG9jKGxlbik7XG5cdHZhciBvID0gMDtcblx0byArPSBidWYud3JpdGUoJy0tLS0tQkVHSU4gJyArIGhlYWRlciArICctLS0tLVxcbicsIG8pO1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHRtcC5sZW5ndGg7ICkge1xuXHRcdHZhciBsaW1pdCA9IGkgKyA3MDtcblx0XHRpZiAobGltaXQgPiB0bXAubGVuZ3RoKVxuXHRcdFx0bGltaXQgPSB0bXAubGVuZ3RoO1xuXHRcdG8gKz0gYnVmLndyaXRlKHRtcC5zbGljZShpLCBsaW1pdCksIG8pO1xuXHRcdGJ1ZltvKytdID0gMTA7XG5cdFx0aSA9IGxpbWl0O1xuXHR9XG5cdG8gKz0gYnVmLndyaXRlKCctLS0tLUVORCAnICsgaGVhZGVyICsgJy0tLS0tXFxuJywgbyk7XG5cblx0cmV0dXJuIChidWYuc2xpY2UoMCwgbykpO1xufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZWFkIiwicmVhZFNTSFByaXZhdGUiLCJ3cml0ZSIsImFzc2VydCIsInJlcXVpcmUiLCJhc24xIiwiQnVmZmVyIiwiYWxncyIsInV0aWxzIiwiY3J5cHRvIiwiS2V5IiwiUHJpdmF0ZUtleSIsInBlbSIsInJmYzQyNTMiLCJTU0hCdWZmZXIiLCJlcnJvcnMiLCJiY3J5cHQiLCJidWYiLCJvcHRpb25zIiwiTUFHSUMiLCJ0eXBlIiwiYnVmZmVyIiwibWFnaWMiLCJyZWFkQ1N0cmluZyIsInN0cmljdEVxdWFsIiwiY2lwaGVyIiwicmVhZFN0cmluZyIsImtkZiIsImtkZk9wdHMiLCJyZWFkQnVmZmVyIiwibmtleXMiLCJyZWFkSW50IiwiRXJyb3IiLCJwdWJLZXkiLCJvayIsImF0RW5kIiwicHJpdktleUJsb2IiLCJrZGZPcHRzQnVmIiwic2FsdCIsInJvdW5kcyIsImNpbmYiLCJvcGVuc3NoQ2lwaGVySW5mbyIsInVuZGVmaW5lZCIsInBhc3NwaHJhc2UiLCJmcm9tIiwiaXNCdWZmZXIiLCJLZXlFbmNyeXB0ZWRFcnJvciIsImZpbGVuYW1lIiwicGFzcyIsIlVpbnQ4QXJyYXkiLCJzYWx0aSIsIm91dCIsImtleVNpemUiLCJibG9ja1NpemUiLCJyZXMiLCJwYmtkZiIsImxlbmd0aCIsImNrZXkiLCJzbGljZSIsIml2IiwiY2lwaGVyU3RyZWFtIiwiY3JlYXRlRGVjaXBoZXJpdiIsIm9wZW5zc2xOYW1lIiwic2V0QXV0b1BhZGRpbmciLCJjaHVuayIsImNodW5rcyIsIm9uY2UiLCJlIiwidG9TdHJpbmciLCJpbmRleE9mIiwiZW5kIiwicHVzaCIsImNvbmNhdCIsImNoZWNrSW50MSIsImNoZWNrSW50MiIsInJldCIsImtleSIsInJlYWRJbnRlcm5hbCIsInJlbWFpbmRlciIsInNraXAiLCJjb25zdW1lZCIsImNvbW1lbnQiLCJpc1ByaXZhdGVLZXkiLCJ0b1B1YmxpYyIsImtkZm9wdHMiLCJhbGxvYyIsIm9wdGlvbmFsU3RyaW5nIiwicHJpdkJ1ZiIsImNoZWNrSW50IiwicmFuZG9tQnl0ZXMiLCJyZWFkVUludDMyQkUiLCJ3cml0ZUludCIsInRvQnVmZmVyIiwid3JpdGVTdHJpbmciLCJuIiwiX29mZnNldCIsIndyaXRlQ2hhciIsImtkZnNzaCIsIndyaXRlQnVmZmVyIiwiY3JlYXRlQ2lwaGVyaXYiLCJ3cml0ZUNTdHJpbmciLCJoZWFkZXIiLCJ0bXAiLCJsZW4iLCJvIiwiaSIsImxpbWl0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/formats/ssh-private.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/formats/ssh.js":
/*!***********************************************!*\
  !*** ./node_modules/sshpk/lib/formats/ssh.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\nmodule.exports = {\n    read: read,\n    write: write\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar rfc4253 = __webpack_require__(/*! ./rfc4253 */ \"(rsc)/./node_modules/sshpk/lib/formats/rfc4253.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar Key = __webpack_require__(/*! ../key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar sshpriv = __webpack_require__(/*! ./ssh-private */ \"(rsc)/./node_modules/sshpk/lib/formats/ssh-private.js\");\n/*JSSTYLED*/ var SSHKEY_RE = /^([a-z0-9-]+)[ \\t]+([a-zA-Z0-9+\\/]+[=]*)([ \\t]+([^ \\t][^\\n]*[\\n]*)?)?$/;\n/*JSSTYLED*/ var SSHKEY_RE2 = /^([a-z0-9-]+)[ \\t\\n]+([a-zA-Z0-9+\\/][a-zA-Z0-9+\\/ \\t\\n=]*)([^a-zA-Z0-9+\\/ \\t\\n=].*)?$/;\nfunction read(buf, options) {\n    if (typeof buf !== \"string\") {\n        assert.buffer(buf, \"buf\");\n        buf = buf.toString(\"ascii\");\n    }\n    var trimmed = buf.trim().replace(/[\\\\\\r]/g, \"\");\n    var m = trimmed.match(SSHKEY_RE);\n    if (!m) m = trimmed.match(SSHKEY_RE2);\n    assert.ok(m, \"key must match regex\");\n    var type = rfc4253.algToKeyType(m[1]);\n    var kbuf = Buffer.from(m[2], \"base64\");\n    /*\n\t * This is a bit tricky. If we managed to parse the key and locate the\n\t * key comment with the regex, then do a non-partial read and assert\n\t * that we have consumed all bytes. If we couldn't locate the key\n\t * comment, though, there may be whitespace shenanigans going on that\n\t * have conjoined the comment to the rest of the key. We do a partial\n\t * read in this case to try to make the best out of a sorry situation.\n\t */ var key;\n    var ret = {};\n    if (m[4]) {\n        try {\n            key = rfc4253.read(kbuf);\n        } catch (e) {\n            m = trimmed.match(SSHKEY_RE2);\n            assert.ok(m, \"key must match regex\");\n            kbuf = Buffer.from(m[2], \"base64\");\n            key = rfc4253.readInternal(ret, \"public\", kbuf);\n        }\n    } else {\n        key = rfc4253.readInternal(ret, \"public\", kbuf);\n    }\n    assert.strictEqual(type, key.type);\n    if (m[4] && m[4].length > 0) {\n        key.comment = m[4];\n    } else if (ret.consumed) {\n        /*\n\t\t * Now the magic: trying to recover the key comment when it's\n\t\t * gotten conjoined to the key or otherwise shenanigan'd.\n\t\t *\n\t\t * Work out how much base64 we used, then drop all non-base64\n\t\t * chars from the beginning up to this point in the the string.\n\t\t * Then offset in this and try to make up for missing = chars.\n\t\t */ var data = m[2] + (m[3] ? m[3] : \"\");\n        var realOffset = Math.ceil(ret.consumed / 3) * 4;\n        data = data.slice(0, realOffset - 2)./*JSSTYLED*/ replace(/[^a-zA-Z0-9+\\/=]/g, \"\") + data.slice(realOffset - 2);\n        var padding = ret.consumed % 3;\n        if (padding > 0 && data.slice(realOffset - 1, realOffset) !== \"=\") realOffset--;\n        while(data.slice(realOffset, realOffset + 1) === \"=\")realOffset++;\n        /* Finally, grab what we think is the comment & clean it up. */ var trailer = data.slice(realOffset);\n        trailer = trailer.replace(/[\\r\\n]/g, \" \").replace(/^\\s+/, \"\");\n        if (trailer.match(/^[a-zA-Z0-9]/)) key.comment = trailer;\n    }\n    return key;\n}\nfunction write(key, options) {\n    assert.object(key);\n    if (!Key.isKey(key)) throw new Error(\"Must be a public key\");\n    var parts = [];\n    var alg = rfc4253.keyTypeToAlg(key);\n    parts.push(alg);\n    var buf = rfc4253.write(key);\n    parts.push(buf.toString(\"base64\"));\n    if (key.comment) parts.push(key.comment);\n    return Buffer.from(parts.join(\" \"));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/formats/ssh.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/formats/x509-pem.js":
/*!****************************************************!*\
  !*** ./node_modules/sshpk/lib/formats/x509-pem.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2016 Joyent, Inc.\nvar x509 = __webpack_require__(/*! ./x509 */ \"(rsc)/./node_modules/sshpk/lib/formats/x509.js\");\nmodule.exports = {\n    read: read,\n    verify: x509.verify,\n    sign: x509.sign,\n    write: write\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar asn1 = __webpack_require__(/*! asn1 */ \"(rsc)/./node_modules/asn1/lib/index.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ../algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar Key = __webpack_require__(/*! ../key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar pem = __webpack_require__(/*! ./pem */ \"(rsc)/./node_modules/sshpk/lib/formats/pem.js\");\nvar Identity = __webpack_require__(/*! ../identity */ \"(rsc)/./node_modules/sshpk/lib/identity.js\");\nvar Signature = __webpack_require__(/*! ../signature */ \"(rsc)/./node_modules/sshpk/lib/signature.js\");\nvar Certificate = __webpack_require__(/*! ../certificate */ \"(rsc)/./node_modules/sshpk/lib/certificate.js\");\nfunction read(buf, options) {\n    if (typeof buf !== \"string\") {\n        assert.buffer(buf, \"buf\");\n        buf = buf.toString(\"ascii\");\n    }\n    var lines = buf.trim().split(/[\\r\\n]+/g);\n    var m;\n    var si = -1;\n    while(!m && si < lines.length){\n        m = lines[++si].match(/*JSSTYLED*/ /[-]+[ ]*BEGIN CERTIFICATE[ ]*[-]+/);\n    }\n    assert.ok(m, \"invalid PEM header\");\n    var m2;\n    var ei = lines.length;\n    while(!m2 && ei > 0){\n        m2 = lines[--ei].match(/*JSSTYLED*/ /[-]+[ ]*END CERTIFICATE[ ]*[-]+/);\n    }\n    assert.ok(m2, \"invalid PEM footer\");\n    lines = lines.slice(si, ei + 1);\n    var headers = {};\n    while(true){\n        lines = lines.slice(1);\n        m = lines[0].match(/*JSSTYLED*/ /^([A-Za-z0-9-]+): (.+)$/);\n        if (!m) break;\n        headers[m[1].toLowerCase()] = m[2];\n    }\n    /* Chop off the first and last lines */ lines = lines.slice(0, -1).join(\"\");\n    buf = Buffer.from(lines, \"base64\");\n    return x509.read(buf, options);\n}\nfunction write(cert, options) {\n    var dbuf = x509.write(cert, options);\n    var header = \"CERTIFICATE\";\n    var tmp = dbuf.toString(\"base64\");\n    var len = tmp.length + tmp.length / 64 + 18 + 16 + header.length * 2 + 10;\n    var buf = Buffer.alloc(len);\n    var o = 0;\n    o += buf.write(\"-----BEGIN \" + header + \"-----\\n\", o);\n    for(var i = 0; i < tmp.length;){\n        var limit = i + 64;\n        if (limit > tmp.length) limit = tmp.length;\n        o += buf.write(tmp.slice(i, limit), o);\n        buf[o++] = 10;\n        i = limit;\n    }\n    o += buf.write(\"-----END \" + header + \"-----\\n\", o);\n    return buf.slice(0, o);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL2Zvcm1hdHMveDUwOS1wZW0uanMiLCJtYXBwaW5ncyI6IkFBQUEsOEJBQThCO0FBRTlCLElBQUlBLE9BQU9DLG1CQUFPQSxDQUFDO0FBRW5CQyxPQUFPQyxPQUFPLEdBQUc7SUFDaEJDLE1BQU1BO0lBQ05DLFFBQVFMLEtBQUtLLE1BQU07SUFDbkJDLE1BQU1OLEtBQUtNLElBQUk7SUFDZkMsT0FBT0E7QUFDUjtBQUVBLElBQUlDLFNBQVNQLG1CQUFPQSxDQUFDO0FBQ3JCLElBQUlRLE9BQU9SLG1CQUFPQSxDQUFDO0FBQ25CLElBQUlTLFNBQVNULDhGQUE4QjtBQUMzQyxJQUFJVSxPQUFPVixtQkFBT0EsQ0FBQztBQUNuQixJQUFJVyxRQUFRWCxtQkFBT0EsQ0FBQztBQUNwQixJQUFJWSxNQUFNWixtQkFBT0EsQ0FBQztBQUNsQixJQUFJYSxhQUFhYixtQkFBT0EsQ0FBQztBQUN6QixJQUFJYyxNQUFNZCxtQkFBT0EsQ0FBQztBQUNsQixJQUFJZSxXQUFXZixtQkFBT0EsQ0FBQztBQUN2QixJQUFJZ0IsWUFBWWhCLG1CQUFPQSxDQUFDO0FBQ3hCLElBQUlpQixjQUFjakIsbUJBQU9BLENBQUM7QUFFMUIsU0FBU0csS0FBS2UsR0FBRyxFQUFFQyxPQUFPO0lBQ3pCLElBQUksT0FBUUQsUUFBUyxVQUFVO1FBQzlCWCxPQUFPYSxNQUFNLENBQUNGLEtBQUs7UUFDbkJBLE1BQU1BLElBQUlHLFFBQVEsQ0FBQztJQUNwQjtJQUVBLElBQUlDLFFBQVFKLElBQUlLLElBQUksR0FBR0MsS0FBSyxDQUFDO0lBRTdCLElBQUlDO0lBQ0osSUFBSUMsS0FBSyxDQUFDO0lBQ1YsTUFBTyxDQUFDRCxLQUFLQyxLQUFLSixNQUFNSyxNQUFNLENBQUU7UUFDL0JGLElBQUlILEtBQUssQ0FBQyxFQUFFSSxHQUFHLENBQUNFLEtBQUssQ0FBQyxVQUFVLEdBQzVCO0lBQ0w7SUFDQXJCLE9BQU9zQixFQUFFLENBQUNKLEdBQUc7SUFFYixJQUFJSztJQUNKLElBQUlDLEtBQUtULE1BQU1LLE1BQU07SUFDckIsTUFBTyxDQUFDRyxNQUFNQyxLQUFLLEVBQUc7UUFDckJELEtBQUtSLEtBQUssQ0FBQyxFQUFFUyxHQUFHLENBQUNILEtBQUssQ0FBQyxVQUFVLEdBQzdCO0lBQ0w7SUFDQXJCLE9BQU9zQixFQUFFLENBQUNDLElBQUk7SUFFZFIsUUFBUUEsTUFBTVUsS0FBSyxDQUFDTixJQUFJSyxLQUFLO0lBRTdCLElBQUlFLFVBQVUsQ0FBQztJQUNmLE1BQU8sS0FBTTtRQUNaWCxRQUFRQSxNQUFNVSxLQUFLLENBQUM7UUFDcEJQLElBQUlILEtBQUssQ0FBQyxFQUFFLENBQUNNLEtBQUssQ0FBQyxVQUFVLEdBQ3pCO1FBQ0osSUFBSSxDQUFDSCxHQUNKO1FBQ0RRLE9BQU8sQ0FBQ1IsQ0FBQyxDQUFDLEVBQUUsQ0FBQ1MsV0FBVyxHQUFHLEdBQUdULENBQUMsQ0FBQyxFQUFFO0lBQ25DO0lBRUEscUNBQXFDLEdBQ3JDSCxRQUFRQSxNQUFNVSxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUdHLElBQUksQ0FBQztJQUNoQ2pCLE1BQU1ULE9BQU8yQixJQUFJLENBQUNkLE9BQU87SUFFekIsT0FBUXZCLEtBQUtJLElBQUksQ0FBQ2UsS0FBS0M7QUFDeEI7QUFFQSxTQUFTYixNQUFNK0IsSUFBSSxFQUFFbEIsT0FBTztJQUMzQixJQUFJbUIsT0FBT3ZDLEtBQUtPLEtBQUssQ0FBQytCLE1BQU1sQjtJQUU1QixJQUFJb0IsU0FBUztJQUNiLElBQUlDLE1BQU1GLEtBQUtqQixRQUFRLENBQUM7SUFDeEIsSUFBSW9CLE1BQU1ELElBQUliLE1BQU0sR0FBSWEsSUFBSWIsTUFBTSxHQUFHLEtBQ2pDLEtBQUssS0FBS1ksT0FBT1osTUFBTSxHQUFDLElBQUk7SUFDaEMsSUFBSVQsTUFBTVQsT0FBT2lDLEtBQUssQ0FBQ0Q7SUFDdkIsSUFBSUUsSUFBSTtJQUNSQSxLQUFLekIsSUFBSVosS0FBSyxDQUFDLGdCQUFnQmlDLFNBQVMsV0FBV0k7SUFDbkQsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlKLElBQUliLE1BQU0sRUFBSTtRQUNqQyxJQUFJa0IsUUFBUUQsSUFBSTtRQUNoQixJQUFJQyxRQUFRTCxJQUFJYixNQUFNLEVBQ3JCa0IsUUFBUUwsSUFBSWIsTUFBTTtRQUNuQmdCLEtBQUt6QixJQUFJWixLQUFLLENBQUNrQyxJQUFJUixLQUFLLENBQUNZLEdBQUdDLFFBQVFGO1FBQ3BDekIsR0FBRyxDQUFDeUIsSUFBSSxHQUFHO1FBQ1hDLElBQUlDO0lBQ0w7SUFDQUYsS0FBS3pCLElBQUlaLEtBQUssQ0FBQyxjQUFjaUMsU0FBUyxXQUFXSTtJQUVqRCxPQUFRekIsSUFBSWMsS0FBSyxDQUFDLEdBQUdXO0FBQ3RCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2l2aWwtZW5naW5lZXJpbmctcGxhdGZvcm0vLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL2Zvcm1hdHMveDUwOS1wZW0uanM/MGE1MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNiBKb3llbnQsIEluYy5cblxudmFyIHg1MDkgPSByZXF1aXJlKCcuL3g1MDknKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdHJlYWQ6IHJlYWQsXG5cdHZlcmlmeTogeDUwOS52ZXJpZnksXG5cdHNpZ246IHg1MDkuc2lnbixcblx0d3JpdGU6IHdyaXRlXG59O1xuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0LXBsdXMnKTtcbnZhciBhc24xID0gcmVxdWlyZSgnYXNuMScpO1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmVyLWJ1ZmZlcicpLkJ1ZmZlcjtcbnZhciBhbGdzID0gcmVxdWlyZSgnLi4vYWxncycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBLZXkgPSByZXF1aXJlKCcuLi9rZXknKTtcbnZhciBQcml2YXRlS2V5ID0gcmVxdWlyZSgnLi4vcHJpdmF0ZS1rZXknKTtcbnZhciBwZW0gPSByZXF1aXJlKCcuL3BlbScpO1xudmFyIElkZW50aXR5ID0gcmVxdWlyZSgnLi4vaWRlbnRpdHknKTtcbnZhciBTaWduYXR1cmUgPSByZXF1aXJlKCcuLi9zaWduYXR1cmUnKTtcbnZhciBDZXJ0aWZpY2F0ZSA9IHJlcXVpcmUoJy4uL2NlcnRpZmljYXRlJyk7XG5cbmZ1bmN0aW9uIHJlYWQoYnVmLCBvcHRpb25zKSB7XG5cdGlmICh0eXBlb2YgKGJ1ZikgIT09ICdzdHJpbmcnKSB7XG5cdFx0YXNzZXJ0LmJ1ZmZlcihidWYsICdidWYnKTtcblx0XHRidWYgPSBidWYudG9TdHJpbmcoJ2FzY2lpJyk7XG5cdH1cblxuXHR2YXIgbGluZXMgPSBidWYudHJpbSgpLnNwbGl0KC9bXFxyXFxuXSsvZyk7XG5cblx0dmFyIG07XG5cdHZhciBzaSA9IC0xO1xuXHR3aGlsZSAoIW0gJiYgc2kgPCBsaW5lcy5sZW5ndGgpIHtcblx0XHRtID0gbGluZXNbKytzaV0ubWF0Y2goLypKU1NUWUxFRCovXG5cdFx0ICAgIC9bLV0rWyBdKkJFR0lOIENFUlRJRklDQVRFWyBdKlstXSsvKTtcblx0fVxuXHRhc3NlcnQub2sobSwgJ2ludmFsaWQgUEVNIGhlYWRlcicpO1xuXG5cdHZhciBtMjtcblx0dmFyIGVpID0gbGluZXMubGVuZ3RoO1xuXHR3aGlsZSAoIW0yICYmIGVpID4gMCkge1xuXHRcdG0yID0gbGluZXNbLS1laV0ubWF0Y2goLypKU1NUWUxFRCovXG5cdFx0ICAgIC9bLV0rWyBdKkVORCBDRVJUSUZJQ0FURVsgXSpbLV0rLyk7XG5cdH1cblx0YXNzZXJ0Lm9rKG0yLCAnaW52YWxpZCBQRU0gZm9vdGVyJyk7XG5cblx0bGluZXMgPSBsaW5lcy5zbGljZShzaSwgZWkgKyAxKTtcblxuXHR2YXIgaGVhZGVycyA9IHt9O1xuXHR3aGlsZSAodHJ1ZSkge1xuXHRcdGxpbmVzID0gbGluZXMuc2xpY2UoMSk7XG5cdFx0bSA9IGxpbmVzWzBdLm1hdGNoKC8qSlNTVFlMRUQqL1xuXHRcdCAgICAvXihbQS1aYS16MC05LV0rKTogKC4rKSQvKTtcblx0XHRpZiAoIW0pXG5cdFx0XHRicmVhaztcblx0XHRoZWFkZXJzW21bMV0udG9Mb3dlckNhc2UoKV0gPSBtWzJdO1xuXHR9XG5cblx0LyogQ2hvcCBvZmYgdGhlIGZpcnN0IGFuZCBsYXN0IGxpbmVzICovXG5cdGxpbmVzID0gbGluZXMuc2xpY2UoMCwgLTEpLmpvaW4oJycpO1xuXHRidWYgPSBCdWZmZXIuZnJvbShsaW5lcywgJ2Jhc2U2NCcpO1xuXG5cdHJldHVybiAoeDUwOS5yZWFkKGJ1Ziwgb3B0aW9ucykpO1xufVxuXG5mdW5jdGlvbiB3cml0ZShjZXJ0LCBvcHRpb25zKSB7XG5cdHZhciBkYnVmID0geDUwOS53cml0ZShjZXJ0LCBvcHRpb25zKTtcblxuXHR2YXIgaGVhZGVyID0gJ0NFUlRJRklDQVRFJztcblx0dmFyIHRtcCA9IGRidWYudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuXHR2YXIgbGVuID0gdG1wLmxlbmd0aCArICh0bXAubGVuZ3RoIC8gNjQpICtcblx0ICAgIDE4ICsgMTYgKyBoZWFkZXIubGVuZ3RoKjIgKyAxMDtcblx0dmFyIGJ1ZiA9IEJ1ZmZlci5hbGxvYyhsZW4pO1xuXHR2YXIgbyA9IDA7XG5cdG8gKz0gYnVmLndyaXRlKCctLS0tLUJFR0lOICcgKyBoZWFkZXIgKyAnLS0tLS1cXG4nLCBvKTtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0bXAubGVuZ3RoOyApIHtcblx0XHR2YXIgbGltaXQgPSBpICsgNjQ7XG5cdFx0aWYgKGxpbWl0ID4gdG1wLmxlbmd0aClcblx0XHRcdGxpbWl0ID0gdG1wLmxlbmd0aDtcblx0XHRvICs9IGJ1Zi53cml0ZSh0bXAuc2xpY2UoaSwgbGltaXQpLCBvKTtcblx0XHRidWZbbysrXSA9IDEwO1xuXHRcdGkgPSBsaW1pdDtcblx0fVxuXHRvICs9IGJ1Zi53cml0ZSgnLS0tLS1FTkQgJyArIGhlYWRlciArICctLS0tLVxcbicsIG8pO1xuXG5cdHJldHVybiAoYnVmLnNsaWNlKDAsIG8pKTtcbn1cbiJdLCJuYW1lcyI6WyJ4NTA5IiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZWFkIiwidmVyaWZ5Iiwic2lnbiIsIndyaXRlIiwiYXNzZXJ0IiwiYXNuMSIsIkJ1ZmZlciIsImFsZ3MiLCJ1dGlscyIsIktleSIsIlByaXZhdGVLZXkiLCJwZW0iLCJJZGVudGl0eSIsIlNpZ25hdHVyZSIsIkNlcnRpZmljYXRlIiwiYnVmIiwib3B0aW9ucyIsImJ1ZmZlciIsInRvU3RyaW5nIiwibGluZXMiLCJ0cmltIiwic3BsaXQiLCJtIiwic2kiLCJsZW5ndGgiLCJtYXRjaCIsIm9rIiwibTIiLCJlaSIsInNsaWNlIiwiaGVhZGVycyIsInRvTG93ZXJDYXNlIiwiam9pbiIsImZyb20iLCJjZXJ0IiwiZGJ1ZiIsImhlYWRlciIsInRtcCIsImxlbiIsImFsbG9jIiwibyIsImkiLCJsaW1pdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/formats/x509-pem.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/formats/x509.js":
/*!************************************************!*\
  !*** ./node_modules/sshpk/lib/formats/x509.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2017 Joyent, Inc.\nmodule.exports = {\n    read: read,\n    verify: verify,\n    sign: sign,\n    signAsync: signAsync,\n    write: write\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar asn1 = __webpack_require__(/*! asn1 */ \"(rsc)/./node_modules/asn1/lib/index.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ../algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar Key = __webpack_require__(/*! ../key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar pem = __webpack_require__(/*! ./pem */ \"(rsc)/./node_modules/sshpk/lib/formats/pem.js\");\nvar Identity = __webpack_require__(/*! ../identity */ \"(rsc)/./node_modules/sshpk/lib/identity.js\");\nvar Signature = __webpack_require__(/*! ../signature */ \"(rsc)/./node_modules/sshpk/lib/signature.js\");\nvar Certificate = __webpack_require__(/*! ../certificate */ \"(rsc)/./node_modules/sshpk/lib/certificate.js\");\nvar pkcs8 = __webpack_require__(/*! ./pkcs8 */ \"(rsc)/./node_modules/sshpk/lib/formats/pkcs8.js\");\n/*\n * This file is based on RFC5280 (X.509).\n */ /* Helper to read in a single mpint */ function readMPInt(der, nm) {\n    assert.strictEqual(der.peek(), asn1.Ber.Integer, nm + \" is not an Integer\");\n    return utils.mpNormalize(der.readString(asn1.Ber.Integer, true));\n}\nfunction verify(cert, key) {\n    var sig = cert.signatures.x509;\n    assert.object(sig, \"x509 signature\");\n    var algParts = sig.algo.split(\"-\");\n    if (algParts[0] !== key.type) return false;\n    var blob = sig.cache;\n    if (blob === undefined) {\n        var der = new asn1.BerWriter();\n        writeTBSCert(cert, der);\n        blob = der.buffer;\n    }\n    var verifier = key.createVerify(algParts[1]);\n    verifier.write(blob);\n    return verifier.verify(sig.signature);\n}\nfunction Local(i) {\n    return asn1.Ber.Context | asn1.Ber.Constructor | i;\n}\nfunction Context(i) {\n    return asn1.Ber.Context | i;\n}\nvar SIGN_ALGS = {\n    \"rsa-md5\": \"1.2.840.113549.1.1.4\",\n    \"rsa-sha1\": \"1.2.840.113549.1.1.5\",\n    \"rsa-sha256\": \"1.2.840.113549.1.1.11\",\n    \"rsa-sha384\": \"1.2.840.113549.1.1.12\",\n    \"rsa-sha512\": \"1.2.840.113549.1.1.13\",\n    \"dsa-sha1\": \"1.2.840.10040.4.3\",\n    \"dsa-sha256\": \"2.16.840.1.101.3.4.3.2\",\n    \"ecdsa-sha1\": \"1.2.840.10045.4.1\",\n    \"ecdsa-sha256\": \"1.2.840.10045.4.3.2\",\n    \"ecdsa-sha384\": \"1.2.840.10045.4.3.3\",\n    \"ecdsa-sha512\": \"1.2.840.10045.4.3.4\",\n    \"ed25519-sha512\": \"1.3.101.112\"\n};\nObject.keys(SIGN_ALGS).forEach(function(k) {\n    SIGN_ALGS[SIGN_ALGS[k]] = k;\n});\nSIGN_ALGS[\"1.3.14.3.2.3\"] = \"rsa-md5\";\nSIGN_ALGS[\"1.3.14.3.2.29\"] = \"rsa-sha1\";\nvar EXTS = {\n    \"issuerKeyId\": \"2.5.29.35\",\n    \"altName\": \"2.5.29.17\",\n    \"basicConstraints\": \"2.5.29.19\",\n    \"keyUsage\": \"2.5.29.15\",\n    \"extKeyUsage\": \"2.5.29.37\"\n};\nfunction read(buf, options) {\n    if (typeof buf === \"string\") {\n        buf = Buffer.from(buf, \"binary\");\n    }\n    assert.buffer(buf, \"buf\");\n    var der = new asn1.BerReader(buf);\n    der.readSequence();\n    if (Math.abs(der.length - der.remain) > 1) {\n        throw new Error(\"DER sequence does not contain whole byte \" + \"stream\");\n    }\n    var tbsStart = der.offset;\n    der.readSequence();\n    var sigOffset = der.offset + der.length;\n    var tbsEnd = sigOffset;\n    if (der.peek() === Local(0)) {\n        der.readSequence(Local(0));\n        var version = der.readInt();\n        assert.ok(version <= 3, \"only x.509 versions up to v3 supported\");\n    }\n    var cert = {};\n    cert.signatures = {};\n    var sig = cert.signatures.x509 = {};\n    sig.extras = {};\n    cert.serial = readMPInt(der, \"serial\");\n    der.readSequence();\n    var after = der.offset + der.length;\n    var certAlgOid = der.readOID();\n    var certAlg = SIGN_ALGS[certAlgOid];\n    if (certAlg === undefined) throw new Error(\"unknown signature algorithm \" + certAlgOid);\n    der._offset = after;\n    cert.issuer = Identity.parseAsn1(der);\n    der.readSequence();\n    cert.validFrom = readDate(der);\n    cert.validUntil = readDate(der);\n    cert.subjects = [\n        Identity.parseAsn1(der)\n    ];\n    der.readSequence();\n    after = der.offset + der.length;\n    cert.subjectKey = pkcs8.readPkcs8(undefined, \"public\", der);\n    der._offset = after;\n    /* issuerUniqueID */ if (der.peek() === Local(1)) {\n        der.readSequence(Local(1));\n        sig.extras.issuerUniqueID = buf.slice(der.offset, der.offset + der.length);\n        der._offset += der.length;\n    }\n    /* subjectUniqueID */ if (der.peek() === Local(2)) {\n        der.readSequence(Local(2));\n        sig.extras.subjectUniqueID = buf.slice(der.offset, der.offset + der.length);\n        der._offset += der.length;\n    }\n    /* extensions */ if (der.peek() === Local(3)) {\n        der.readSequence(Local(3));\n        var extEnd = der.offset + der.length;\n        der.readSequence();\n        while(der.offset < extEnd)readExtension(cert, buf, der);\n        assert.strictEqual(der.offset, extEnd);\n    }\n    assert.strictEqual(der.offset, sigOffset);\n    der.readSequence();\n    after = der.offset + der.length;\n    var sigAlgOid = der.readOID();\n    var sigAlg = SIGN_ALGS[sigAlgOid];\n    if (sigAlg === undefined) throw new Error(\"unknown signature algorithm \" + sigAlgOid);\n    der._offset = after;\n    var sigData = der.readString(asn1.Ber.BitString, true);\n    if (sigData[0] === 0) sigData = sigData.slice(1);\n    var algParts = sigAlg.split(\"-\");\n    sig.signature = Signature.parse(sigData, algParts[0], \"asn1\");\n    sig.signature.hashAlgorithm = algParts[1];\n    sig.algo = sigAlg;\n    sig.cache = buf.slice(tbsStart, tbsEnd);\n    return new Certificate(cert);\n}\nfunction readDate(der) {\n    if (der.peek() === asn1.Ber.UTCTime) {\n        return utcTimeToDate(der.readString(asn1.Ber.UTCTime));\n    } else if (der.peek() === asn1.Ber.GeneralizedTime) {\n        return gTimeToDate(der.readString(asn1.Ber.GeneralizedTime));\n    } else {\n        throw new Error(\"Unsupported date format\");\n    }\n}\nfunction writeDate(der, date) {\n    if (date.getUTCFullYear() >= 2050 || date.getUTCFullYear() < 1950) {\n        der.writeString(dateToGTime(date), asn1.Ber.GeneralizedTime);\n    } else {\n        der.writeString(dateToUTCTime(date), asn1.Ber.UTCTime);\n    }\n}\n/* RFC5280, section 4.2.1.6 (GeneralName type) */ var ALTNAME = {\n    OtherName: Local(0),\n    RFC822Name: Context(1),\n    DNSName: Context(2),\n    X400Address: Local(3),\n    DirectoryName: Local(4),\n    EDIPartyName: Local(5),\n    URI: Context(6),\n    IPAddress: Context(7),\n    OID: Context(8)\n};\n/* RFC5280, section 4.2.1.12 (KeyPurposeId) */ var EXTPURPOSE = {\n    \"serverAuth\": \"1.3.6.1.5.5.7.3.1\",\n    \"clientAuth\": \"1.3.6.1.5.5.7.3.2\",\n    \"codeSigning\": \"1.3.6.1.5.5.7.3.3\",\n    /* See https://github.com/joyent/oid-docs/blob/master/root.md */ \"joyentDocker\": \"1.3.6.1.4.1.38678.1.4.1\",\n    \"joyentCmon\": \"1.3.6.1.4.1.38678.1.4.2\"\n};\nvar EXTPURPOSE_REV = {};\nObject.keys(EXTPURPOSE).forEach(function(k) {\n    EXTPURPOSE_REV[EXTPURPOSE[k]] = k;\n});\nvar KEYUSEBITS = [\n    \"signature\",\n    \"identity\",\n    \"keyEncryption\",\n    \"encryption\",\n    \"keyAgreement\",\n    \"ca\",\n    \"crl\"\n];\nfunction readExtension(cert, buf, der) {\n    der.readSequence();\n    var after = der.offset + der.length;\n    var extId = der.readOID();\n    var id;\n    var sig = cert.signatures.x509;\n    if (!sig.extras.exts) sig.extras.exts = [];\n    var critical;\n    if (der.peek() === asn1.Ber.Boolean) critical = der.readBoolean();\n    switch(extId){\n        case EXTS.basicConstraints:\n            der.readSequence(asn1.Ber.OctetString);\n            der.readSequence();\n            var bcEnd = der.offset + der.length;\n            var ca = false;\n            if (der.peek() === asn1.Ber.Boolean) ca = der.readBoolean();\n            if (cert.purposes === undefined) cert.purposes = [];\n            if (ca === true) cert.purposes.push(\"ca\");\n            var bc = {\n                oid: extId,\n                critical: critical\n            };\n            if (der.offset < bcEnd && der.peek() === asn1.Ber.Integer) bc.pathLen = der.readInt();\n            sig.extras.exts.push(bc);\n            break;\n        case EXTS.extKeyUsage:\n            der.readSequence(asn1.Ber.OctetString);\n            der.readSequence();\n            if (cert.purposes === undefined) cert.purposes = [];\n            var ekEnd = der.offset + der.length;\n            while(der.offset < ekEnd){\n                var oid = der.readOID();\n                cert.purposes.push(EXTPURPOSE_REV[oid] || oid);\n            }\n            /*\n\t\t * This is a bit of a hack: in the case where we have a cert\n\t\t * that's only allowed to do serverAuth or clientAuth (and not\n\t\t * the other), we want to make sure all our Subjects are of\n\t\t * the right type. But we already parsed our Subjects and\n\t\t * decided if they were hosts or users earlier (since it appears\n\t\t * first in the cert).\n\t\t *\n\t\t * So we go through and mutate them into the right kind here if\n\t\t * it doesn't match. This might not be hugely beneficial, as it\n\t\t * seems that single-purpose certs are not often seen in the\n\t\t * wild.\n\t\t */ if (cert.purposes.indexOf(\"serverAuth\") !== -1 && cert.purposes.indexOf(\"clientAuth\") === -1) {\n                cert.subjects.forEach(function(ide) {\n                    if (ide.type !== \"host\") {\n                        ide.type = \"host\";\n                        ide.hostname = ide.uid || ide.email || ide.components[0].value;\n                    }\n                });\n            } else if (cert.purposes.indexOf(\"clientAuth\") !== -1 && cert.purposes.indexOf(\"serverAuth\") === -1) {\n                cert.subjects.forEach(function(ide) {\n                    if (ide.type !== \"user\") {\n                        ide.type = \"user\";\n                        ide.uid = ide.hostname || ide.email || ide.components[0].value;\n                    }\n                });\n            }\n            sig.extras.exts.push({\n                oid: extId,\n                critical: critical\n            });\n            break;\n        case EXTS.keyUsage:\n            der.readSequence(asn1.Ber.OctetString);\n            var bits = der.readString(asn1.Ber.BitString, true);\n            var setBits = readBitField(bits, KEYUSEBITS);\n            setBits.forEach(function(bit) {\n                if (cert.purposes === undefined) cert.purposes = [];\n                if (cert.purposes.indexOf(bit) === -1) cert.purposes.push(bit);\n            });\n            sig.extras.exts.push({\n                oid: extId,\n                critical: critical,\n                bits: bits\n            });\n            break;\n        case EXTS.altName:\n            der.readSequence(asn1.Ber.OctetString);\n            der.readSequence();\n            var aeEnd = der.offset + der.length;\n            while(der.offset < aeEnd){\n                switch(der.peek()){\n                    case ALTNAME.OtherName:\n                    case ALTNAME.EDIPartyName:\n                        der.readSequence();\n                        der._offset += der.length;\n                        break;\n                    case ALTNAME.OID:\n                        der.readOID(ALTNAME.OID);\n                        break;\n                    case ALTNAME.RFC822Name:\n                        /* RFC822 specifies email addresses */ var email = der.readString(ALTNAME.RFC822Name);\n                        id = Identity.forEmail(email);\n                        if (!cert.subjects[0].equals(id)) cert.subjects.push(id);\n                        break;\n                    case ALTNAME.DirectoryName:\n                        der.readSequence(ALTNAME.DirectoryName);\n                        id = Identity.parseAsn1(der);\n                        if (!cert.subjects[0].equals(id)) cert.subjects.push(id);\n                        break;\n                    case ALTNAME.DNSName:\n                        var host = der.readString(ALTNAME.DNSName);\n                        id = Identity.forHost(host);\n                        if (!cert.subjects[0].equals(id)) cert.subjects.push(id);\n                        break;\n                    default:\n                        der.readString(der.peek());\n                        break;\n                }\n            }\n            sig.extras.exts.push({\n                oid: extId,\n                critical: critical\n            });\n            break;\n        default:\n            sig.extras.exts.push({\n                oid: extId,\n                critical: critical,\n                data: der.readString(asn1.Ber.OctetString, true)\n            });\n            break;\n    }\n    der._offset = after;\n}\nvar UTCTIME_RE = /^([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})?Z$/;\nfunction utcTimeToDate(t) {\n    var m = t.match(UTCTIME_RE);\n    assert.ok(m, \"timestamps must be in UTC\");\n    var d = new Date();\n    var thisYear = d.getUTCFullYear();\n    var century = Math.floor(thisYear / 100) * 100;\n    var year = parseInt(m[1], 10);\n    if (thisYear % 100 < 50 && year >= 60) year += century - 1;\n    else year += century;\n    d.setUTCFullYear(year, parseInt(m[2], 10) - 1, parseInt(m[3], 10));\n    d.setUTCHours(parseInt(m[4], 10), parseInt(m[5], 10));\n    if (m[6] && m[6].length > 0) d.setUTCSeconds(parseInt(m[6], 10));\n    return d;\n}\nvar GTIME_RE = /^([0-9]{4})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})?Z$/;\nfunction gTimeToDate(t) {\n    var m = t.match(GTIME_RE);\n    assert.ok(m);\n    var d = new Date();\n    d.setUTCFullYear(parseInt(m[1], 10), parseInt(m[2], 10) - 1, parseInt(m[3], 10));\n    d.setUTCHours(parseInt(m[4], 10), parseInt(m[5], 10));\n    if (m[6] && m[6].length > 0) d.setUTCSeconds(parseInt(m[6], 10));\n    return d;\n}\nfunction zeroPad(n, m) {\n    if (m === undefined) m = 2;\n    var s = \"\" + n;\n    while(s.length < m)s = \"0\" + s;\n    return s;\n}\nfunction dateToUTCTime(d) {\n    var s = \"\";\n    s += zeroPad(d.getUTCFullYear() % 100);\n    s += zeroPad(d.getUTCMonth() + 1);\n    s += zeroPad(d.getUTCDate());\n    s += zeroPad(d.getUTCHours());\n    s += zeroPad(d.getUTCMinutes());\n    s += zeroPad(d.getUTCSeconds());\n    s += \"Z\";\n    return s;\n}\nfunction dateToGTime(d) {\n    var s = \"\";\n    s += zeroPad(d.getUTCFullYear(), 4);\n    s += zeroPad(d.getUTCMonth() + 1);\n    s += zeroPad(d.getUTCDate());\n    s += zeroPad(d.getUTCHours());\n    s += zeroPad(d.getUTCMinutes());\n    s += zeroPad(d.getUTCSeconds());\n    s += \"Z\";\n    return s;\n}\nfunction sign(cert, key) {\n    if (cert.signatures.x509 === undefined) cert.signatures.x509 = {};\n    var sig = cert.signatures.x509;\n    sig.algo = key.type + \"-\" + key.defaultHashAlgorithm();\n    if (SIGN_ALGS[sig.algo] === undefined) return false;\n    var der = new asn1.BerWriter();\n    writeTBSCert(cert, der);\n    var blob = der.buffer;\n    sig.cache = blob;\n    var signer = key.createSign();\n    signer.write(blob);\n    cert.signatures.x509.signature = signer.sign();\n    return true;\n}\nfunction signAsync(cert, signer, done) {\n    if (cert.signatures.x509 === undefined) cert.signatures.x509 = {};\n    var sig = cert.signatures.x509;\n    var der = new asn1.BerWriter();\n    writeTBSCert(cert, der);\n    var blob = der.buffer;\n    sig.cache = blob;\n    signer(blob, function(err, signature) {\n        if (err) {\n            done(err);\n            return;\n        }\n        sig.algo = signature.type + \"-\" + signature.hashAlgorithm;\n        if (SIGN_ALGS[sig.algo] === undefined) {\n            done(new Error('Invalid signing algorithm \"' + sig.algo + '\"'));\n            return;\n        }\n        sig.signature = signature;\n        done();\n    });\n}\nfunction write(cert, options) {\n    var sig = cert.signatures.x509;\n    assert.object(sig, \"x509 signature\");\n    var der = new asn1.BerWriter();\n    der.startSequence();\n    if (sig.cache) {\n        der._ensure(sig.cache.length);\n        sig.cache.copy(der._buf, der._offset);\n        der._offset += sig.cache.length;\n    } else {\n        writeTBSCert(cert, der);\n    }\n    der.startSequence();\n    der.writeOID(SIGN_ALGS[sig.algo]);\n    if (sig.algo.match(/^rsa-/)) der.writeNull();\n    der.endSequence();\n    var sigData = sig.signature.toBuffer(\"asn1\");\n    var data = Buffer.alloc(sigData.length + 1);\n    data[0] = 0;\n    sigData.copy(data, 1);\n    der.writeBuffer(data, asn1.Ber.BitString);\n    der.endSequence();\n    return der.buffer;\n}\nfunction writeTBSCert(cert, der) {\n    var sig = cert.signatures.x509;\n    assert.object(sig, \"x509 signature\");\n    der.startSequence();\n    der.startSequence(Local(0));\n    der.writeInt(2);\n    der.endSequence();\n    der.writeBuffer(utils.mpNormalize(cert.serial), asn1.Ber.Integer);\n    der.startSequence();\n    der.writeOID(SIGN_ALGS[sig.algo]);\n    if (sig.algo.match(/^rsa-/)) der.writeNull();\n    der.endSequence();\n    cert.issuer.toAsn1(der);\n    der.startSequence();\n    writeDate(der, cert.validFrom);\n    writeDate(der, cert.validUntil);\n    der.endSequence();\n    var subject = cert.subjects[0];\n    var altNames = cert.subjects.slice(1);\n    subject.toAsn1(der);\n    pkcs8.writePkcs8(der, cert.subjectKey);\n    if (sig.extras && sig.extras.issuerUniqueID) {\n        der.writeBuffer(sig.extras.issuerUniqueID, Local(1));\n    }\n    if (sig.extras && sig.extras.subjectUniqueID) {\n        der.writeBuffer(sig.extras.subjectUniqueID, Local(2));\n    }\n    if (altNames.length > 0 || subject.type === \"host\" || cert.purposes !== undefined && cert.purposes.length > 0 || sig.extras && sig.extras.exts) {\n        der.startSequence(Local(3));\n        der.startSequence();\n        var exts = [];\n        if (cert.purposes !== undefined && cert.purposes.length > 0) {\n            exts.push({\n                oid: EXTS.basicConstraints,\n                critical: true\n            });\n            exts.push({\n                oid: EXTS.keyUsage,\n                critical: true\n            });\n            exts.push({\n                oid: EXTS.extKeyUsage,\n                critical: true\n            });\n        }\n        exts.push({\n            oid: EXTS.altName\n        });\n        if (sig.extras && sig.extras.exts) exts = sig.extras.exts;\n        for(var i = 0; i < exts.length; ++i){\n            der.startSequence();\n            der.writeOID(exts[i].oid);\n            if (exts[i].critical !== undefined) der.writeBoolean(exts[i].critical);\n            if (exts[i].oid === EXTS.altName) {\n                der.startSequence(asn1.Ber.OctetString);\n                der.startSequence();\n                if (subject.type === \"host\") {\n                    der.writeString(subject.hostname, Context(2));\n                }\n                for(var j = 0; j < altNames.length; ++j){\n                    if (altNames[j].type === \"host\") {\n                        der.writeString(altNames[j].hostname, ALTNAME.DNSName);\n                    } else if (altNames[j].type === \"email\") {\n                        der.writeString(altNames[j].email, ALTNAME.RFC822Name);\n                    } else {\n                        /*\n\t\t\t\t\t\t * Encode anything else as a\n\t\t\t\t\t\t * DN style name for now.\n\t\t\t\t\t\t */ der.startSequence(ALTNAME.DirectoryName);\n                        altNames[j].toAsn1(der);\n                        der.endSequence();\n                    }\n                }\n                der.endSequence();\n                der.endSequence();\n            } else if (exts[i].oid === EXTS.basicConstraints) {\n                der.startSequence(asn1.Ber.OctetString);\n                der.startSequence();\n                var ca = cert.purposes.indexOf(\"ca\") !== -1;\n                var pathLen = exts[i].pathLen;\n                der.writeBoolean(ca);\n                if (pathLen !== undefined) der.writeInt(pathLen);\n                der.endSequence();\n                der.endSequence();\n            } else if (exts[i].oid === EXTS.extKeyUsage) {\n                der.startSequence(asn1.Ber.OctetString);\n                der.startSequence();\n                cert.purposes.forEach(function(purpose) {\n                    if (purpose === \"ca\") return;\n                    if (KEYUSEBITS.indexOf(purpose) !== -1) return;\n                    var oid = purpose;\n                    if (EXTPURPOSE[purpose] !== undefined) oid = EXTPURPOSE[purpose];\n                    der.writeOID(oid);\n                });\n                der.endSequence();\n                der.endSequence();\n            } else if (exts[i].oid === EXTS.keyUsage) {\n                der.startSequence(asn1.Ber.OctetString);\n                /*\n\t\t\t\t * If we parsed this certificate from a byte\n\t\t\t\t * stream (i.e. we didn't generate it in sshpk)\n\t\t\t\t * then we'll have a \".bits\" property on the\n\t\t\t\t * ext with the original raw byte contents.\n\t\t\t\t *\n\t\t\t\t * If we have this, use it here instead of\n\t\t\t\t * regenerating it. This guarantees we output\n\t\t\t\t * the same data we parsed, so signatures still\n\t\t\t\t * validate.\n\t\t\t\t */ if (exts[i].bits !== undefined) {\n                    der.writeBuffer(exts[i].bits, asn1.Ber.BitString);\n                } else {\n                    var bits = writeBitField(cert.purposes, KEYUSEBITS);\n                    der.writeBuffer(bits, asn1.Ber.BitString);\n                }\n                der.endSequence();\n            } else {\n                der.writeBuffer(exts[i].data, asn1.Ber.OctetString);\n            }\n            der.endSequence();\n        }\n        der.endSequence();\n        der.endSequence();\n    }\n    der.endSequence();\n}\n/*\n * Reads an ASN.1 BER bitfield out of the Buffer produced by doing\n * `BerReader#readString(asn1.Ber.BitString)`. That function gives us the raw\n * contents of the BitString tag, which is a count of unused bits followed by\n * the bits as a right-padded byte string.\n *\n * `bits` is the Buffer, `bitIndex` should contain an array of string names\n * for the bits in the string, ordered starting with bit #0 in the ASN.1 spec.\n *\n * Returns an array of Strings, the names of the bits that were set to 1.\n */ function readBitField(bits, bitIndex) {\n    var bitLen = 8 * (bits.length - 1) - bits[0];\n    var setBits = {};\n    for(var i = 0; i < bitLen; ++i){\n        var byteN = 1 + Math.floor(i / 8);\n        var bit = 7 - i % 8;\n        var mask = 1 << bit;\n        var bitVal = (bits[byteN] & mask) !== 0;\n        var name = bitIndex[i];\n        if (bitVal && typeof name === \"string\") {\n            setBits[name] = true;\n        }\n    }\n    return Object.keys(setBits);\n}\n/*\n * `setBits` is an array of strings, containing the names for each bit that\n * sould be set to 1. `bitIndex` is same as in `readBitField()`.\n *\n * Returns a Buffer, ready to be written out with `BerWriter#writeString()`.\n */ function writeBitField(setBits, bitIndex) {\n    var bitLen = bitIndex.length;\n    var blen = Math.ceil(bitLen / 8);\n    var unused = blen * 8 - bitLen;\n    var bits = Buffer.alloc(1 + blen); // zero-filled\n    bits[0] = unused;\n    for(var i = 0; i < bitLen; ++i){\n        var byteN = 1 + Math.floor(i / 8);\n        var bit = 7 - i % 8;\n        var mask = 1 << bit;\n        var name = bitIndex[i];\n        if (name === undefined) continue;\n        var bitVal = setBits.indexOf(name) !== -1;\n        if (bitVal) {\n            bits[byteN] |= mask;\n        }\n    }\n    return bits;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/formats/x509.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/identity.js":
/*!********************************************!*\
  !*** ./node_modules/sshpk/lib/identity.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2017 Joyent, Inc.\nmodule.exports = Identity;\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar algs = __webpack_require__(/*! ./algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar Fingerprint = __webpack_require__(/*! ./fingerprint */ \"(rsc)/./node_modules/sshpk/lib/fingerprint.js\");\nvar Signature = __webpack_require__(/*! ./signature */ \"(rsc)/./node_modules/sshpk/lib/signature.js\");\nvar errs = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/sshpk/lib/errors.js\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar asn1 = __webpack_require__(/*! asn1 */ \"(rsc)/./node_modules/asn1/lib/index.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\n/*JSSTYLED*/ var DNS_NAME_RE = /^([*]|[a-z0-9][a-z0-9\\-]{0,62})(?:\\.([*]|[a-z0-9][a-z0-9\\-]{0,62}))*$/i;\nvar oids = {};\noids.cn = \"2.5.4.3\";\noids.o = \"2.5.4.10\";\noids.ou = \"2.5.4.11\";\noids.l = \"2.5.4.7\";\noids.s = \"2.5.4.8\";\noids.c = \"2.5.4.6\";\noids.sn = \"2.5.4.4\";\noids.postalCode = \"2.5.4.17\";\noids.serialNumber = \"2.5.4.5\";\noids.street = \"2.5.4.9\";\noids.x500UniqueIdentifier = \"2.5.4.45\";\noids.role = \"2.5.4.72\";\noids.telephoneNumber = \"2.5.4.20\";\noids.description = \"2.5.4.13\";\noids.dc = \"0.9.2342.19200300.100.1.25\";\noids.uid = \"0.9.2342.19200300.100.1.1\";\noids.mail = \"0.9.2342.19200300.100.1.3\";\noids.title = \"2.5.4.12\";\noids.gn = \"2.5.4.42\";\noids.initials = \"2.5.4.43\";\noids.pseudonym = \"2.5.4.65\";\noids.emailAddress = \"1.2.840.113549.1.9.1\";\nvar unoids = {};\nObject.keys(oids).forEach(function(k) {\n    unoids[oids[k]] = k;\n});\nfunction Identity(opts) {\n    var self = this;\n    assert.object(opts, \"options\");\n    assert.arrayOfObject(opts.components, \"options.components\");\n    this.components = opts.components;\n    this.componentLookup = {};\n    this.components.forEach(function(c) {\n        if (c.name && !c.oid) c.oid = oids[c.name];\n        if (c.oid && !c.name) c.name = unoids[c.oid];\n        if (self.componentLookup[c.name] === undefined) self.componentLookup[c.name] = [];\n        self.componentLookup[c.name].push(c);\n    });\n    if (this.componentLookup.cn && this.componentLookup.cn.length > 0) {\n        this.cn = this.componentLookup.cn[0].value;\n    }\n    assert.optionalString(opts.type, \"options.type\");\n    if (opts.type === undefined) {\n        if (this.components.length === 1 && this.componentLookup.cn && this.componentLookup.cn.length === 1 && this.componentLookup.cn[0].value.match(DNS_NAME_RE)) {\n            this.type = \"host\";\n            this.hostname = this.componentLookup.cn[0].value;\n        } else if (this.componentLookup.dc && this.components.length === this.componentLookup.dc.length) {\n            this.type = \"host\";\n            this.hostname = this.componentLookup.dc.map(function(c) {\n                return c.value;\n            }).join(\".\");\n        } else if (this.componentLookup.uid && this.components.length === this.componentLookup.uid.length) {\n            this.type = \"user\";\n            this.uid = this.componentLookup.uid[0].value;\n        } else if (this.componentLookup.cn && this.componentLookup.cn.length === 1 && this.componentLookup.cn[0].value.match(DNS_NAME_RE)) {\n            this.type = \"host\";\n            this.hostname = this.componentLookup.cn[0].value;\n        } else if (this.componentLookup.uid && this.componentLookup.uid.length === 1) {\n            this.type = \"user\";\n            this.uid = this.componentLookup.uid[0].value;\n        } else if (this.componentLookup.mail && this.componentLookup.mail.length === 1) {\n            this.type = \"email\";\n            this.email = this.componentLookup.mail[0].value;\n        } else if (this.componentLookup.cn && this.componentLookup.cn.length === 1) {\n            this.type = \"user\";\n            this.uid = this.componentLookup.cn[0].value;\n        } else {\n            this.type = \"unknown\";\n        }\n    } else {\n        this.type = opts.type;\n        if (this.type === \"host\") this.hostname = opts.hostname;\n        else if (this.type === \"user\") this.uid = opts.uid;\n        else if (this.type === \"email\") this.email = opts.email;\n        else throw new Error(\"Unknown type \" + this.type);\n    }\n}\nIdentity.prototype.toString = function() {\n    return this.components.map(function(c) {\n        var n = c.name.toUpperCase();\n        /*JSSTYLED*/ n = n.replace(/=/g, \"\\\\=\");\n        var v = c.value;\n        /*JSSTYLED*/ v = v.replace(/,/g, \"\\\\,\");\n        return n + \"=\" + v;\n    }).join(\", \");\n};\nIdentity.prototype.get = function(name, asArray) {\n    assert.string(name, \"name\");\n    var arr = this.componentLookup[name];\n    if (arr === undefined || arr.length === 0) return undefined;\n    if (!asArray && arr.length > 1) throw new Error(\"Multiple values for attribute \" + name);\n    if (!asArray) return arr[0].value;\n    return arr.map(function(c) {\n        return c.value;\n    });\n};\nIdentity.prototype.toArray = function(idx) {\n    return this.components.map(function(c) {\n        return {\n            name: c.name,\n            value: c.value\n        };\n    });\n};\n/*\n * These are from X.680 -- PrintableString allowed chars are in section 37.4\n * table 8. Spec for IA5Strings is \"1,6 + SPACE + DEL\" where 1 refers to\n * ISO IR #001 (standard ASCII control characters) and 6 refers to ISO IR #006\n * (the basic ASCII character set).\n */ /* JSSTYLED */ var NOT_PRINTABLE = /[^a-zA-Z0-9 '(),+.\\/:=?-]/;\n/* JSSTYLED */ var NOT_IA5 = /[^\\x00-\\x7f]/;\nIdentity.prototype.toAsn1 = function(der, tag) {\n    der.startSequence(tag);\n    this.components.forEach(function(c) {\n        der.startSequence(asn1.Ber.Constructor | asn1.Ber.Set);\n        der.startSequence();\n        der.writeOID(c.oid);\n        /*\n\t\t * If we fit in a PrintableString, use that. Otherwise use an\n\t\t * IA5String or UTF8String.\n\t\t *\n\t\t * If this identity was parsed from a DN, use the ASN.1 types\n\t\t * from the original representation (otherwise this might not\n\t\t * be a full match for the original in some validators).\n\t\t */ if (c.asn1type === asn1.Ber.Utf8String || c.value.match(NOT_IA5)) {\n            var v = Buffer.from(c.value, \"utf8\");\n            der.writeBuffer(v, asn1.Ber.Utf8String);\n        } else if (c.asn1type === asn1.Ber.IA5String || c.value.match(NOT_PRINTABLE)) {\n            der.writeString(c.value, asn1.Ber.IA5String);\n        } else {\n            var type = asn1.Ber.PrintableString;\n            if (c.asn1type !== undefined) type = c.asn1type;\n            der.writeString(c.value, type);\n        }\n        der.endSequence();\n        der.endSequence();\n    });\n    der.endSequence();\n};\nfunction globMatch(a, b) {\n    if (a === \"**\" || b === \"**\") return true;\n    var aParts = a.split(\".\");\n    var bParts = b.split(\".\");\n    if (aParts.length !== bParts.length) return false;\n    for(var i = 0; i < aParts.length; ++i){\n        if (aParts[i] === \"*\" || bParts[i] === \"*\") continue;\n        if (aParts[i] !== bParts[i]) return false;\n    }\n    return true;\n}\nIdentity.prototype.equals = function(other) {\n    if (!Identity.isIdentity(other, [\n        1,\n        0\n    ])) return false;\n    if (other.components.length !== this.components.length) return false;\n    for(var i = 0; i < this.components.length; ++i){\n        if (this.components[i].oid !== other.components[i].oid) return false;\n        if (!globMatch(this.components[i].value, other.components[i].value)) {\n            return false;\n        }\n    }\n    return true;\n};\nIdentity.forHost = function(hostname) {\n    assert.string(hostname, \"hostname\");\n    return new Identity({\n        type: \"host\",\n        hostname: hostname,\n        components: [\n            {\n                name: \"cn\",\n                value: hostname\n            }\n        ]\n    });\n};\nIdentity.forUser = function(uid) {\n    assert.string(uid, \"uid\");\n    return new Identity({\n        type: \"user\",\n        uid: uid,\n        components: [\n            {\n                name: \"uid\",\n                value: uid\n            }\n        ]\n    });\n};\nIdentity.forEmail = function(email) {\n    assert.string(email, \"email\");\n    return new Identity({\n        type: \"email\",\n        email: email,\n        components: [\n            {\n                name: \"mail\",\n                value: email\n            }\n        ]\n    });\n};\nIdentity.parseDN = function(dn) {\n    assert.string(dn, \"dn\");\n    var parts = [\n        \"\"\n    ];\n    var idx = 0;\n    var rem = dn;\n    while(rem.length > 0){\n        var m;\n        /*JSSTYLED*/ if ((m = /^,/.exec(rem)) !== null) {\n            parts[++idx] = \"\";\n            rem = rem.slice(m[0].length);\n        /*JSSTYLED*/ } else if ((m = /^\\\\,/.exec(rem)) !== null) {\n            parts[idx] += \",\";\n            rem = rem.slice(m[0].length);\n        /*JSSTYLED*/ } else if ((m = /^\\\\./.exec(rem)) !== null) {\n            parts[idx] += m[0];\n            rem = rem.slice(m[0].length);\n        /*JSSTYLED*/ } else if ((m = /^[^\\\\,]+/.exec(rem)) !== null) {\n            parts[idx] += m[0];\n            rem = rem.slice(m[0].length);\n        } else {\n            throw new Error(\"Failed to parse DN\");\n        }\n    }\n    var cmps = parts.map(function(c) {\n        c = c.trim();\n        var eqPos = c.indexOf(\"=\");\n        while(eqPos > 0 && c.charAt(eqPos - 1) === \"\\\\\")eqPos = c.indexOf(\"=\", eqPos + 1);\n        if (eqPos === -1) {\n            throw new Error(\"Failed to parse DN\");\n        }\n        /*JSSTYLED*/ var name = c.slice(0, eqPos).toLowerCase().replace(/\\\\=/g, \"=\");\n        var value = c.slice(eqPos + 1);\n        return {\n            name: name,\n            value: value\n        };\n    });\n    return new Identity({\n        components: cmps\n    });\n};\nIdentity.fromArray = function(components) {\n    assert.arrayOfObject(components, \"components\");\n    components.forEach(function(cmp) {\n        assert.object(cmp, \"component\");\n        assert.string(cmp.name, \"component.name\");\n        if (!Buffer.isBuffer(cmp.value) && !(typeof cmp.value === \"string\")) {\n            throw new Error(\"Invalid component value\");\n        }\n    });\n    return new Identity({\n        components: components\n    });\n};\nIdentity.parseAsn1 = function(der, top) {\n    var components = [];\n    der.readSequence(top);\n    var end = der.offset + der.length;\n    while(der.offset < end){\n        der.readSequence(asn1.Ber.Constructor | asn1.Ber.Set);\n        var after = der.offset + der.length;\n        der.readSequence();\n        var oid = der.readOID();\n        var type = der.peek();\n        var value;\n        switch(type){\n            case asn1.Ber.PrintableString:\n            case asn1.Ber.IA5String:\n            case asn1.Ber.OctetString:\n            case asn1.Ber.T61String:\n                value = der.readString(type);\n                break;\n            case asn1.Ber.Utf8String:\n                value = der.readString(type, true);\n                value = value.toString(\"utf8\");\n                break;\n            case asn1.Ber.CharacterString:\n            case asn1.Ber.BMPString:\n                value = der.readString(type, true);\n                value = value.toString(\"utf16le\");\n                break;\n            default:\n                throw new Error(\"Unknown asn1 type \" + type);\n        }\n        components.push({\n            oid: oid,\n            asn1type: type,\n            value: value\n        });\n        der._offset = after;\n    }\n    der._offset = end;\n    return new Identity({\n        components: components\n    });\n};\nIdentity.isIdentity = function(obj, ver) {\n    return utils.isCompatible(obj, Identity, ver);\n};\n/*\n * API versions for Identity:\n * [1,0] -- initial ver\n */ Identity.prototype._sshpkApiVersion = [\n    1,\n    0\n];\nIdentity._oldVersionDetect = function(obj) {\n    return [\n        1,\n        0\n    ];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/identity.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/index.js":
/*!*****************************************!*\
  !*** ./node_modules/sshpk/lib/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\nvar Key = __webpack_require__(/*! ./key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar Fingerprint = __webpack_require__(/*! ./fingerprint */ \"(rsc)/./node_modules/sshpk/lib/fingerprint.js\");\nvar Signature = __webpack_require__(/*! ./signature */ \"(rsc)/./node_modules/sshpk/lib/signature.js\");\nvar PrivateKey = __webpack_require__(/*! ./private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar Certificate = __webpack_require__(/*! ./certificate */ \"(rsc)/./node_modules/sshpk/lib/certificate.js\");\nvar Identity = __webpack_require__(/*! ./identity */ \"(rsc)/./node_modules/sshpk/lib/identity.js\");\nvar errs = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/sshpk/lib/errors.js\");\nmodule.exports = {\n    /* top-level classes */ Key: Key,\n    parseKey: Key.parse,\n    Fingerprint: Fingerprint,\n    parseFingerprint: Fingerprint.parse,\n    Signature: Signature,\n    parseSignature: Signature.parse,\n    PrivateKey: PrivateKey,\n    parsePrivateKey: PrivateKey.parse,\n    generatePrivateKey: PrivateKey.generate,\n    Certificate: Certificate,\n    parseCertificate: Certificate.parse,\n    createSelfSignedCertificate: Certificate.createSelfSigned,\n    createCertificate: Certificate.create,\n    Identity: Identity,\n    identityFromDN: Identity.parseDN,\n    identityForHost: Identity.forHost,\n    identityForUser: Identity.forUser,\n    identityForEmail: Identity.forEmail,\n    identityFromArray: Identity.fromArray,\n    /* errors */ FingerprintFormatError: errs.FingerprintFormatError,\n    InvalidAlgorithmError: errs.InvalidAlgorithmError,\n    KeyParseError: errs.KeyParseError,\n    SignatureParseError: errs.SignatureParseError,\n    KeyEncryptedError: errs.KeyEncryptedError,\n    CertificateParseError: errs.CertificateParseError\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLDhCQUE4QjtBQUU5QixJQUFJQSxNQUFNQyxtQkFBT0EsQ0FBQztBQUNsQixJQUFJQyxjQUFjRCxtQkFBT0EsQ0FBQztBQUMxQixJQUFJRSxZQUFZRixtQkFBT0EsQ0FBQztBQUN4QixJQUFJRyxhQUFhSCxtQkFBT0EsQ0FBQztBQUN6QixJQUFJSSxjQUFjSixtQkFBT0EsQ0FBQztBQUMxQixJQUFJSyxXQUFXTCxtQkFBT0EsQ0FBQztBQUN2QixJQUFJTSxPQUFPTixtQkFBT0EsQ0FBQztBQUVuQk8sT0FBT0MsT0FBTyxHQUFHO0lBQ2hCLHFCQUFxQixHQUNyQlQsS0FBS0E7SUFDTFUsVUFBVVYsSUFBSVcsS0FBSztJQUNuQlQsYUFBYUE7SUFDYlUsa0JBQWtCVixZQUFZUyxLQUFLO0lBQ25DUixXQUFXQTtJQUNYVSxnQkFBZ0JWLFVBQVVRLEtBQUs7SUFDL0JQLFlBQVlBO0lBQ1pVLGlCQUFpQlYsV0FBV08sS0FBSztJQUNqQ0ksb0JBQW9CWCxXQUFXWSxRQUFRO0lBQ3ZDWCxhQUFhQTtJQUNiWSxrQkFBa0JaLFlBQVlNLEtBQUs7SUFDbkNPLDZCQUE2QmIsWUFBWWMsZ0JBQWdCO0lBQ3pEQyxtQkFBbUJmLFlBQVlnQixNQUFNO0lBQ3JDZixVQUFVQTtJQUNWZ0IsZ0JBQWdCaEIsU0FBU2lCLE9BQU87SUFDaENDLGlCQUFpQmxCLFNBQVNtQixPQUFPO0lBQ2pDQyxpQkFBaUJwQixTQUFTcUIsT0FBTztJQUNqQ0Msa0JBQWtCdEIsU0FBU3VCLFFBQVE7SUFDbkNDLG1CQUFtQnhCLFNBQVN5QixTQUFTO0lBRXJDLFVBQVUsR0FDVkMsd0JBQXdCekIsS0FBS3lCLHNCQUFzQjtJQUNuREMsdUJBQXVCMUIsS0FBSzBCLHFCQUFxQjtJQUNqREMsZUFBZTNCLEtBQUsyQixhQUFhO0lBQ2pDQyxxQkFBcUI1QixLQUFLNEIsbUJBQW1CO0lBQzdDQyxtQkFBbUI3QixLQUFLNkIsaUJBQWlCO0lBQ3pDQyx1QkFBdUI5QixLQUFLOEIscUJBQXFCO0FBQ2xEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2l2aWwtZW5naW5lZXJpbmctcGxhdGZvcm0vLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL2luZGV4LmpzP2I4ZmYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUgSm95ZW50LCBJbmMuXG5cbnZhciBLZXkgPSByZXF1aXJlKCcuL2tleScpO1xudmFyIEZpbmdlcnByaW50ID0gcmVxdWlyZSgnLi9maW5nZXJwcmludCcpO1xudmFyIFNpZ25hdHVyZSA9IHJlcXVpcmUoJy4vc2lnbmF0dXJlJyk7XG52YXIgUHJpdmF0ZUtleSA9IHJlcXVpcmUoJy4vcHJpdmF0ZS1rZXknKTtcbnZhciBDZXJ0aWZpY2F0ZSA9IHJlcXVpcmUoJy4vY2VydGlmaWNhdGUnKTtcbnZhciBJZGVudGl0eSA9IHJlcXVpcmUoJy4vaWRlbnRpdHknKTtcbnZhciBlcnJzID0gcmVxdWlyZSgnLi9lcnJvcnMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdC8qIHRvcC1sZXZlbCBjbGFzc2VzICovXG5cdEtleTogS2V5LFxuXHRwYXJzZUtleTogS2V5LnBhcnNlLFxuXHRGaW5nZXJwcmludDogRmluZ2VycHJpbnQsXG5cdHBhcnNlRmluZ2VycHJpbnQ6IEZpbmdlcnByaW50LnBhcnNlLFxuXHRTaWduYXR1cmU6IFNpZ25hdHVyZSxcblx0cGFyc2VTaWduYXR1cmU6IFNpZ25hdHVyZS5wYXJzZSxcblx0UHJpdmF0ZUtleTogUHJpdmF0ZUtleSxcblx0cGFyc2VQcml2YXRlS2V5OiBQcml2YXRlS2V5LnBhcnNlLFxuXHRnZW5lcmF0ZVByaXZhdGVLZXk6IFByaXZhdGVLZXkuZ2VuZXJhdGUsXG5cdENlcnRpZmljYXRlOiBDZXJ0aWZpY2F0ZSxcblx0cGFyc2VDZXJ0aWZpY2F0ZTogQ2VydGlmaWNhdGUucGFyc2UsXG5cdGNyZWF0ZVNlbGZTaWduZWRDZXJ0aWZpY2F0ZTogQ2VydGlmaWNhdGUuY3JlYXRlU2VsZlNpZ25lZCxcblx0Y3JlYXRlQ2VydGlmaWNhdGU6IENlcnRpZmljYXRlLmNyZWF0ZSxcblx0SWRlbnRpdHk6IElkZW50aXR5LFxuXHRpZGVudGl0eUZyb21ETjogSWRlbnRpdHkucGFyc2VETixcblx0aWRlbnRpdHlGb3JIb3N0OiBJZGVudGl0eS5mb3JIb3N0LFxuXHRpZGVudGl0eUZvclVzZXI6IElkZW50aXR5LmZvclVzZXIsXG5cdGlkZW50aXR5Rm9yRW1haWw6IElkZW50aXR5LmZvckVtYWlsLFxuXHRpZGVudGl0eUZyb21BcnJheTogSWRlbnRpdHkuZnJvbUFycmF5LFxuXG5cdC8qIGVycm9ycyAqL1xuXHRGaW5nZXJwcmludEZvcm1hdEVycm9yOiBlcnJzLkZpbmdlcnByaW50Rm9ybWF0RXJyb3IsXG5cdEludmFsaWRBbGdvcml0aG1FcnJvcjogZXJycy5JbnZhbGlkQWxnb3JpdGhtRXJyb3IsXG5cdEtleVBhcnNlRXJyb3I6IGVycnMuS2V5UGFyc2VFcnJvcixcblx0U2lnbmF0dXJlUGFyc2VFcnJvcjogZXJycy5TaWduYXR1cmVQYXJzZUVycm9yLFxuXHRLZXlFbmNyeXB0ZWRFcnJvcjogZXJycy5LZXlFbmNyeXB0ZWRFcnJvcixcblx0Q2VydGlmaWNhdGVQYXJzZUVycm9yOiBlcnJzLkNlcnRpZmljYXRlUGFyc2VFcnJvclxufTtcbiJdLCJuYW1lcyI6WyJLZXkiLCJyZXF1aXJlIiwiRmluZ2VycHJpbnQiLCJTaWduYXR1cmUiLCJQcml2YXRlS2V5IiwiQ2VydGlmaWNhdGUiLCJJZGVudGl0eSIsImVycnMiLCJtb2R1bGUiLCJleHBvcnRzIiwicGFyc2VLZXkiLCJwYXJzZSIsInBhcnNlRmluZ2VycHJpbnQiLCJwYXJzZVNpZ25hdHVyZSIsInBhcnNlUHJpdmF0ZUtleSIsImdlbmVyYXRlUHJpdmF0ZUtleSIsImdlbmVyYXRlIiwicGFyc2VDZXJ0aWZpY2F0ZSIsImNyZWF0ZVNlbGZTaWduZWRDZXJ0aWZpY2F0ZSIsImNyZWF0ZVNlbGZTaWduZWQiLCJjcmVhdGVDZXJ0aWZpY2F0ZSIsImNyZWF0ZSIsImlkZW50aXR5RnJvbUROIiwicGFyc2VETiIsImlkZW50aXR5Rm9ySG9zdCIsImZvckhvc3QiLCJpZGVudGl0eUZvclVzZXIiLCJmb3JVc2VyIiwiaWRlbnRpdHlGb3JFbWFpbCIsImZvckVtYWlsIiwiaWRlbnRpdHlGcm9tQXJyYXkiLCJmcm9tQXJyYXkiLCJGaW5nZXJwcmludEZvcm1hdEVycm9yIiwiSW52YWxpZEFsZ29yaXRobUVycm9yIiwiS2V5UGFyc2VFcnJvciIsIlNpZ25hdHVyZVBhcnNlRXJyb3IiLCJLZXlFbmNyeXB0ZWRFcnJvciIsIkNlcnRpZmljYXRlUGFyc2VFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/key.js":
/*!***************************************!*\
  !*** ./node_modules/sshpk/lib/key.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2018 Joyent, Inc.\nmodule.exports = Key;\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar algs = __webpack_require__(/*! ./algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar Fingerprint = __webpack_require__(/*! ./fingerprint */ \"(rsc)/./node_modules/sshpk/lib/fingerprint.js\");\nvar Signature = __webpack_require__(/*! ./signature */ \"(rsc)/./node_modules/sshpk/lib/signature.js\");\nvar DiffieHellman = (__webpack_require__(/*! ./dhe */ \"(rsc)/./node_modules/sshpk/lib/dhe.js\").DiffieHellman);\nvar errs = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/sshpk/lib/errors.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar PrivateKey = __webpack_require__(/*! ./private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar edCompat;\ntry {\n    edCompat = __webpack_require__(/*! ./ed-compat */ \"(rsc)/./node_modules/sshpk/lib/ed-compat.js\");\n} catch (e) {\n/* Just continue through, and bail out if we try to use it. */ }\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\nvar KeyParseError = errs.KeyParseError;\nvar formats = {};\nformats[\"auto\"] = __webpack_require__(/*! ./formats/auto */ \"(rsc)/./node_modules/sshpk/lib/formats/auto.js\");\nformats[\"pem\"] = __webpack_require__(/*! ./formats/pem */ \"(rsc)/./node_modules/sshpk/lib/formats/pem.js\");\nformats[\"pkcs1\"] = __webpack_require__(/*! ./formats/pkcs1 */ \"(rsc)/./node_modules/sshpk/lib/formats/pkcs1.js\");\nformats[\"pkcs8\"] = __webpack_require__(/*! ./formats/pkcs8 */ \"(rsc)/./node_modules/sshpk/lib/formats/pkcs8.js\");\nformats[\"rfc4253\"] = __webpack_require__(/*! ./formats/rfc4253 */ \"(rsc)/./node_modules/sshpk/lib/formats/rfc4253.js\");\nformats[\"ssh\"] = __webpack_require__(/*! ./formats/ssh */ \"(rsc)/./node_modules/sshpk/lib/formats/ssh.js\");\nformats[\"ssh-private\"] = __webpack_require__(/*! ./formats/ssh-private */ \"(rsc)/./node_modules/sshpk/lib/formats/ssh-private.js\");\nformats[\"openssh\"] = formats[\"ssh-private\"];\nformats[\"dnssec\"] = __webpack_require__(/*! ./formats/dnssec */ \"(rsc)/./node_modules/sshpk/lib/formats/dnssec.js\");\nformats[\"putty\"] = __webpack_require__(/*! ./formats/putty */ \"(rsc)/./node_modules/sshpk/lib/formats/putty.js\");\nformats[\"ppk\"] = formats[\"putty\"];\nfunction Key(opts) {\n    assert.object(opts, \"options\");\n    assert.arrayOfObject(opts.parts, \"options.parts\");\n    assert.string(opts.type, \"options.type\");\n    assert.optionalString(opts.comment, \"options.comment\");\n    var algInfo = algs.info[opts.type];\n    if (typeof algInfo !== \"object\") throw new InvalidAlgorithmError(opts.type);\n    var partLookup = {};\n    for(var i = 0; i < opts.parts.length; ++i){\n        var part = opts.parts[i];\n        partLookup[part.name] = part;\n    }\n    this.type = opts.type;\n    this.parts = opts.parts;\n    this.part = partLookup;\n    this.comment = undefined;\n    this.source = opts.source;\n    /* for speeding up hashing/fingerprint operations */ this._rfc4253Cache = opts._rfc4253Cache;\n    this._hashCache = {};\n    var sz;\n    this.curve = undefined;\n    if (this.type === \"ecdsa\") {\n        var curve = this.part.curve.data.toString();\n        this.curve = curve;\n        sz = algs.curves[curve].size;\n    } else if (this.type === \"ed25519\" || this.type === \"curve25519\") {\n        sz = 256;\n        this.curve = \"curve25519\";\n    } else {\n        var szPart = this.part[algInfo.sizePart];\n        sz = szPart.data.length;\n        sz = sz * 8 - utils.countZeros(szPart.data);\n    }\n    this.size = sz;\n}\nKey.formats = formats;\nKey.prototype.toBuffer = function(format, options) {\n    if (format === undefined) format = \"ssh\";\n    assert.string(format, \"format\");\n    assert.object(formats[format], \"formats[format]\");\n    assert.optionalObject(options, \"options\");\n    if (format === \"rfc4253\") {\n        if (this._rfc4253Cache === undefined) this._rfc4253Cache = formats[\"rfc4253\"].write(this);\n        return this._rfc4253Cache;\n    }\n    return formats[format].write(this, options);\n};\nKey.prototype.toString = function(format, options) {\n    return this.toBuffer(format, options).toString();\n};\nKey.prototype.hash = function(algo, type) {\n    assert.string(algo, \"algorithm\");\n    assert.optionalString(type, \"type\");\n    if (type === undefined) type = \"ssh\";\n    algo = algo.toLowerCase();\n    if (algs.hashAlgs[algo] === undefined) throw new InvalidAlgorithmError(algo);\n    var cacheKey = algo + \"||\" + type;\n    if (this._hashCache[cacheKey]) return this._hashCache[cacheKey];\n    var buf;\n    if (type === \"ssh\") {\n        buf = this.toBuffer(\"rfc4253\");\n    } else if (type === \"spki\") {\n        buf = formats.pkcs8.pkcs8ToBuffer(this);\n    } else {\n        throw new Error(\"Hash type \" + type + \" not supported\");\n    }\n    var hash = crypto.createHash(algo).update(buf).digest();\n    this._hashCache[cacheKey] = hash;\n    return hash;\n};\nKey.prototype.fingerprint = function(algo, type) {\n    if (algo === undefined) algo = \"sha256\";\n    if (type === undefined) type = \"ssh\";\n    assert.string(algo, \"algorithm\");\n    assert.string(type, \"type\");\n    var opts = {\n        type: \"key\",\n        hash: this.hash(algo, type),\n        algorithm: algo,\n        hashType: type\n    };\n    return new Fingerprint(opts);\n};\nKey.prototype.defaultHashAlgorithm = function() {\n    var hashAlgo = \"sha1\";\n    if (this.type === \"rsa\") hashAlgo = \"sha256\";\n    if (this.type === \"dsa\" && this.size > 1024) hashAlgo = \"sha256\";\n    if (this.type === \"ed25519\") hashAlgo = \"sha512\";\n    if (this.type === \"ecdsa\") {\n        if (this.size <= 256) hashAlgo = \"sha256\";\n        else if (this.size <= 384) hashAlgo = \"sha384\";\n        else hashAlgo = \"sha512\";\n    }\n    return hashAlgo;\n};\nKey.prototype.createVerify = function(hashAlgo) {\n    if (hashAlgo === undefined) hashAlgo = this.defaultHashAlgorithm();\n    assert.string(hashAlgo, \"hash algorithm\");\n    /* ED25519 is not supported by OpenSSL, use a javascript impl. */ if (this.type === \"ed25519\" && edCompat !== undefined) return new edCompat.Verifier(this, hashAlgo);\n    if (this.type === \"curve25519\") throw new Error(\"Curve25519 keys are not suitable for \" + \"signing or verification\");\n    var v, nm, err;\n    try {\n        nm = hashAlgo.toUpperCase();\n        v = crypto.createVerify(nm);\n    } catch (e) {\n        err = e;\n    }\n    if (v === undefined || err instanceof Error && err.message.match(/Unknown message digest/)) {\n        nm = \"RSA-\";\n        nm += hashAlgo.toUpperCase();\n        v = crypto.createVerify(nm);\n    }\n    assert.ok(v, \"failed to create verifier\");\n    var oldVerify = v.verify.bind(v);\n    var key = this.toBuffer(\"pkcs8\");\n    var curve = this.curve;\n    var self = this;\n    v.verify = function(signature, fmt) {\n        if (Signature.isSignature(signature, [\n            2,\n            0\n        ])) {\n            if (signature.type !== self.type) return false;\n            if (signature.hashAlgorithm && signature.hashAlgorithm !== hashAlgo) return false;\n            if (signature.curve && self.type === \"ecdsa\" && signature.curve !== curve) return false;\n            return oldVerify(key, signature.toBuffer(\"asn1\"));\n        } else if (typeof signature === \"string\" || Buffer.isBuffer(signature)) {\n            return oldVerify(key, signature, fmt);\n        /*\n\t\t * Avoid doing this on valid arguments, walking the prototype\n\t\t * chain can be quite slow.\n\t\t */ } else if (Signature.isSignature(signature, [\n            1,\n            0\n        ])) {\n            throw new Error(\"signature was created by too old \" + \"a version of sshpk and cannot be verified\");\n        } else {\n            throw new TypeError(\"signature must be a string, \" + \"Buffer, or Signature object\");\n        }\n    };\n    return v;\n};\nKey.prototype.createDiffieHellman = function() {\n    if (this.type === \"rsa\") throw new Error(\"RSA keys do not support Diffie-Hellman\");\n    return new DiffieHellman(this);\n};\nKey.prototype.createDH = Key.prototype.createDiffieHellman;\nKey.parse = function(data, format, options) {\n    if (typeof data !== \"string\") assert.buffer(data, \"data\");\n    if (format === undefined) format = \"auto\";\n    assert.string(format, \"format\");\n    if (typeof options === \"string\") options = {\n        filename: options\n    };\n    assert.optionalObject(options, \"options\");\n    if (options === undefined) options = {};\n    assert.optionalString(options.filename, \"options.filename\");\n    if (options.filename === undefined) options.filename = \"(unnamed)\";\n    assert.object(formats[format], \"formats[format]\");\n    try {\n        var k = formats[format].read(data, options);\n        if (k instanceof PrivateKey) k = k.toPublic();\n        if (!k.comment) k.comment = options.filename;\n        return k;\n    } catch (e) {\n        if (e.name === \"KeyEncryptedError\") throw e;\n        throw new KeyParseError(options.filename, format, e);\n    }\n};\nKey.isKey = function(obj, ver) {\n    return utils.isCompatible(obj, Key, ver);\n};\n/*\n * API versions for Key:\n * [1,0] -- initial ver, may take Signature for createVerify or may not\n * [1,1] -- added pkcs1, pkcs8 formats\n * [1,2] -- added auto, ssh-private, openssh formats\n * [1,3] -- added defaultHashAlgorithm\n * [1,4] -- added ed support, createDH\n * [1,5] -- first explicitly tagged version\n * [1,6] -- changed ed25519 part names\n * [1,7] -- spki hash types\n */ Key.prototype._sshpkApiVersion = [\n    1,\n    7\n];\nKey._oldVersionDetect = function(obj) {\n    assert.func(obj.toBuffer);\n    assert.func(obj.fingerprint);\n    if (obj.createDH) return [\n        1,\n        4\n    ];\n    if (obj.defaultHashAlgorithm) return [\n        1,\n        3\n    ];\n    if (obj.formats[\"auto\"]) return [\n        1,\n        2\n    ];\n    if (obj.formats[\"pkcs1\"]) return [\n        1,\n        1\n    ];\n    return [\n        1,\n        0\n    ];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/key.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/private-key.js":
/*!***********************************************!*\
  !*** ./node_modules/sshpk/lib/private-key.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2017 Joyent, Inc.\nmodule.exports = PrivateKey;\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ./algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar Fingerprint = __webpack_require__(/*! ./fingerprint */ \"(rsc)/./node_modules/sshpk/lib/fingerprint.js\");\nvar Signature = __webpack_require__(/*! ./signature */ \"(rsc)/./node_modules/sshpk/lib/signature.js\");\nvar errs = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/sshpk/lib/errors.js\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar dhe = __webpack_require__(/*! ./dhe */ \"(rsc)/./node_modules/sshpk/lib/dhe.js\");\nvar generateECDSA = dhe.generateECDSA;\nvar generateED25519 = dhe.generateED25519;\nvar edCompat = __webpack_require__(/*! ./ed-compat */ \"(rsc)/./node_modules/sshpk/lib/ed-compat.js\");\nvar nacl = __webpack_require__(/*! tweetnacl */ \"(rsc)/./node_modules/tweetnacl/nacl-fast.js\");\nvar Key = __webpack_require__(/*! ./key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\nvar KeyParseError = errs.KeyParseError;\nvar KeyEncryptedError = errs.KeyEncryptedError;\nvar formats = {};\nformats[\"auto\"] = __webpack_require__(/*! ./formats/auto */ \"(rsc)/./node_modules/sshpk/lib/formats/auto.js\");\nformats[\"pem\"] = __webpack_require__(/*! ./formats/pem */ \"(rsc)/./node_modules/sshpk/lib/formats/pem.js\");\nformats[\"pkcs1\"] = __webpack_require__(/*! ./formats/pkcs1 */ \"(rsc)/./node_modules/sshpk/lib/formats/pkcs1.js\");\nformats[\"pkcs8\"] = __webpack_require__(/*! ./formats/pkcs8 */ \"(rsc)/./node_modules/sshpk/lib/formats/pkcs8.js\");\nformats[\"rfc4253\"] = __webpack_require__(/*! ./formats/rfc4253 */ \"(rsc)/./node_modules/sshpk/lib/formats/rfc4253.js\");\nformats[\"ssh-private\"] = __webpack_require__(/*! ./formats/ssh-private */ \"(rsc)/./node_modules/sshpk/lib/formats/ssh-private.js\");\nformats[\"openssh\"] = formats[\"ssh-private\"];\nformats[\"ssh\"] = formats[\"ssh-private\"];\nformats[\"dnssec\"] = __webpack_require__(/*! ./formats/dnssec */ \"(rsc)/./node_modules/sshpk/lib/formats/dnssec.js\");\nformats[\"putty\"] = __webpack_require__(/*! ./formats/putty */ \"(rsc)/./node_modules/sshpk/lib/formats/putty.js\");\nfunction PrivateKey(opts) {\n    assert.object(opts, \"options\");\n    Key.call(this, opts);\n    this._pubCache = undefined;\n}\nutil.inherits(PrivateKey, Key);\nPrivateKey.formats = formats;\nPrivateKey.prototype.toBuffer = function(format, options) {\n    if (format === undefined) format = \"pkcs1\";\n    assert.string(format, \"format\");\n    assert.object(formats[format], \"formats[format]\");\n    assert.optionalObject(options, \"options\");\n    return formats[format].write(this, options);\n};\nPrivateKey.prototype.hash = function(algo, type) {\n    return this.toPublic().hash(algo, type);\n};\nPrivateKey.prototype.fingerprint = function(algo, type) {\n    return this.toPublic().fingerprint(algo, type);\n};\nPrivateKey.prototype.toPublic = function() {\n    if (this._pubCache) return this._pubCache;\n    var algInfo = algs.info[this.type];\n    var pubParts = [];\n    for(var i = 0; i < algInfo.parts.length; ++i){\n        var p = algInfo.parts[i];\n        pubParts.push(this.part[p]);\n    }\n    this._pubCache = new Key({\n        type: this.type,\n        source: this,\n        parts: pubParts\n    });\n    if (this.comment) this._pubCache.comment = this.comment;\n    return this._pubCache;\n};\nPrivateKey.prototype.derive = function(newType) {\n    assert.string(newType, \"type\");\n    var priv, pub, pair;\n    if (this.type === \"ed25519\" && newType === \"curve25519\") {\n        priv = this.part.k.data;\n        if (priv[0] === 0x00) priv = priv.slice(1);\n        pair = nacl.box.keyPair.fromSecretKey(new Uint8Array(priv));\n        pub = Buffer.from(pair.publicKey);\n        return new PrivateKey({\n            type: \"curve25519\",\n            parts: [\n                {\n                    name: \"A\",\n                    data: utils.mpNormalize(pub)\n                },\n                {\n                    name: \"k\",\n                    data: utils.mpNormalize(priv)\n                }\n            ]\n        });\n    } else if (this.type === \"curve25519\" && newType === \"ed25519\") {\n        priv = this.part.k.data;\n        if (priv[0] === 0x00) priv = priv.slice(1);\n        pair = nacl.sign.keyPair.fromSeed(new Uint8Array(priv));\n        pub = Buffer.from(pair.publicKey);\n        return new PrivateKey({\n            type: \"ed25519\",\n            parts: [\n                {\n                    name: \"A\",\n                    data: utils.mpNormalize(pub)\n                },\n                {\n                    name: \"k\",\n                    data: utils.mpNormalize(priv)\n                }\n            ]\n        });\n    }\n    throw new Error(\"Key derivation not supported from \" + this.type + \" to \" + newType);\n};\nPrivateKey.prototype.createVerify = function(hashAlgo) {\n    return this.toPublic().createVerify(hashAlgo);\n};\nPrivateKey.prototype.createSign = function(hashAlgo) {\n    if (hashAlgo === undefined) hashAlgo = this.defaultHashAlgorithm();\n    assert.string(hashAlgo, \"hash algorithm\");\n    /* ED25519 is not supported by OpenSSL, use a javascript impl. */ if (this.type === \"ed25519\" && edCompat !== undefined) return new edCompat.Signer(this, hashAlgo);\n    if (this.type === \"curve25519\") throw new Error(\"Curve25519 keys are not suitable for \" + \"signing or verification\");\n    var v, nm, err;\n    try {\n        nm = hashAlgo.toUpperCase();\n        v = crypto.createSign(nm);\n    } catch (e) {\n        err = e;\n    }\n    if (v === undefined || err instanceof Error && err.message.match(/Unknown message digest/)) {\n        nm = \"RSA-\";\n        nm += hashAlgo.toUpperCase();\n        v = crypto.createSign(nm);\n    }\n    assert.ok(v, \"failed to create verifier\");\n    var oldSign = v.sign.bind(v);\n    var key = this.toBuffer(\"pkcs1\");\n    var type = this.type;\n    var curve = this.curve;\n    v.sign = function() {\n        var sig = oldSign(key);\n        if (typeof sig === \"string\") sig = Buffer.from(sig, \"binary\");\n        sig = Signature.parse(sig, type, \"asn1\");\n        sig.hashAlgorithm = hashAlgo;\n        sig.curve = curve;\n        return sig;\n    };\n    return v;\n};\nPrivateKey.parse = function(data, format, options) {\n    if (typeof data !== \"string\") assert.buffer(data, \"data\");\n    if (format === undefined) format = \"auto\";\n    assert.string(format, \"format\");\n    if (typeof options === \"string\") options = {\n        filename: options\n    };\n    assert.optionalObject(options, \"options\");\n    if (options === undefined) options = {};\n    assert.optionalString(options.filename, \"options.filename\");\n    if (options.filename === undefined) options.filename = \"(unnamed)\";\n    assert.object(formats[format], \"formats[format]\");\n    try {\n        var k = formats[format].read(data, options);\n        assert.ok(k instanceof PrivateKey, \"key is not a private key\");\n        if (!k.comment) k.comment = options.filename;\n        return k;\n    } catch (e) {\n        if (e.name === \"KeyEncryptedError\") throw e;\n        throw new KeyParseError(options.filename, format, e);\n    }\n};\nPrivateKey.isPrivateKey = function(obj, ver) {\n    return utils.isCompatible(obj, PrivateKey, ver);\n};\nPrivateKey.generate = function(type, options) {\n    if (options === undefined) options = {};\n    assert.object(options, \"options\");\n    switch(type){\n        case \"ecdsa\":\n            if (options.curve === undefined) options.curve = \"nistp256\";\n            assert.string(options.curve, \"options.curve\");\n            return generateECDSA(options.curve);\n        case \"ed25519\":\n            return generateED25519();\n        default:\n            throw new Error(\"Key generation not supported with key \" + 'type \"' + type + '\"');\n    }\n};\n/*\n * API versions for PrivateKey:\n * [1,0] -- initial ver\n * [1,1] -- added auto, pkcs[18], openssh/ssh-private formats\n * [1,2] -- added defaultHashAlgorithm\n * [1,3] -- added derive, ed, createDH\n * [1,4] -- first tagged version\n * [1,5] -- changed ed25519 part names and format\n * [1,6] -- type arguments for hash() and fingerprint()\n */ PrivateKey.prototype._sshpkApiVersion = [\n    1,\n    6\n];\nPrivateKey._oldVersionDetect = function(obj) {\n    assert.func(obj.toPublic);\n    assert.func(obj.createSign);\n    if (obj.derive) return [\n        1,\n        3\n    ];\n    if (obj.defaultHashAlgorithm) return [\n        1,\n        2\n    ];\n    if (obj.formats[\"auto\"]) return [\n        1,\n        1\n    ];\n    return [\n        1,\n        0\n    ];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/private-key.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/signature.js":
/*!*********************************************!*\
  !*** ./node_modules/sshpk/lib/signature.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\nmodule.exports = Signature;\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ./algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar errs = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/sshpk/lib/errors.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar asn1 = __webpack_require__(/*! asn1 */ \"(rsc)/./node_modules/asn1/lib/index.js\");\nvar SSHBuffer = __webpack_require__(/*! ./ssh-buffer */ \"(rsc)/./node_modules/sshpk/lib/ssh-buffer.js\");\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\nvar SignatureParseError = errs.SignatureParseError;\nfunction Signature(opts) {\n    assert.object(opts, \"options\");\n    assert.arrayOfObject(opts.parts, \"options.parts\");\n    assert.string(opts.type, \"options.type\");\n    var partLookup = {};\n    for(var i = 0; i < opts.parts.length; ++i){\n        var part = opts.parts[i];\n        partLookup[part.name] = part;\n    }\n    this.type = opts.type;\n    this.hashAlgorithm = opts.hashAlgo;\n    this.curve = opts.curve;\n    this.parts = opts.parts;\n    this.part = partLookup;\n}\nSignature.prototype.toBuffer = function(format) {\n    if (format === undefined) format = \"asn1\";\n    assert.string(format, \"format\");\n    var buf;\n    var stype = \"ssh-\" + this.type;\n    switch(this.type){\n        case \"rsa\":\n            switch(this.hashAlgorithm){\n                case \"sha256\":\n                    stype = \"rsa-sha2-256\";\n                    break;\n                case \"sha512\":\n                    stype = \"rsa-sha2-512\";\n                    break;\n                case \"sha1\":\n                case undefined:\n                    break;\n                default:\n                    throw new Error(\"SSH signature \" + \"format does not support hash \" + \"algorithm \" + this.hashAlgorithm);\n            }\n            if (format === \"ssh\") {\n                buf = new SSHBuffer({});\n                buf.writeString(stype);\n                buf.writePart(this.part.sig);\n                return buf.toBuffer();\n            } else {\n                return this.part.sig.data;\n            }\n            break;\n        case \"ed25519\":\n            if (format === \"ssh\") {\n                buf = new SSHBuffer({});\n                buf.writeString(stype);\n                buf.writePart(this.part.sig);\n                return buf.toBuffer();\n            } else {\n                return this.part.sig.data;\n            }\n            break;\n        case \"dsa\":\n        case \"ecdsa\":\n            var r, s;\n            if (format === \"asn1\") {\n                var der = new asn1.BerWriter();\n                der.startSequence();\n                r = utils.mpNormalize(this.part.r.data);\n                s = utils.mpNormalize(this.part.s.data);\n                der.writeBuffer(r, asn1.Ber.Integer);\n                der.writeBuffer(s, asn1.Ber.Integer);\n                der.endSequence();\n                return der.buffer;\n            } else if (format === \"ssh\" && this.type === \"dsa\") {\n                buf = new SSHBuffer({});\n                buf.writeString(\"ssh-dss\");\n                r = this.part.r.data;\n                if (r.length > 20 && r[0] === 0x00) r = r.slice(1);\n                s = this.part.s.data;\n                if (s.length > 20 && s[0] === 0x00) s = s.slice(1);\n                if (this.hashAlgorithm && this.hashAlgorithm !== \"sha1\" || r.length + s.length !== 40) {\n                    throw new Error(\"OpenSSH only supports \" + \"DSA signatures with SHA1 hash\");\n                }\n                buf.writeBuffer(Buffer.concat([\n                    r,\n                    s\n                ]));\n                return buf.toBuffer();\n            } else if (format === \"ssh\" && this.type === \"ecdsa\") {\n                var inner = new SSHBuffer({});\n                r = this.part.r.data;\n                inner.writeBuffer(r);\n                inner.writePart(this.part.s);\n                buf = new SSHBuffer({});\n                /* XXX: find a more proper way to do this? */ var curve;\n                if (r[0] === 0x00) r = r.slice(1);\n                var sz = r.length * 8;\n                if (sz === 256) curve = \"nistp256\";\n                else if (sz === 384) curve = \"nistp384\";\n                else if (sz === 528) curve = \"nistp521\";\n                buf.writeString(\"ecdsa-sha2-\" + curve);\n                buf.writeBuffer(inner.toBuffer());\n                return buf.toBuffer();\n            }\n            throw new Error(\"Invalid signature format\");\n        default:\n            throw new Error(\"Invalid signature data\");\n    }\n};\nSignature.prototype.toString = function(format) {\n    assert.optionalString(format, \"format\");\n    return this.toBuffer(format).toString(\"base64\");\n};\nSignature.parse = function(data, type, format) {\n    if (typeof data === \"string\") data = Buffer.from(data, \"base64\");\n    assert.buffer(data, \"data\");\n    assert.string(format, \"format\");\n    assert.string(type, \"type\");\n    var opts = {};\n    opts.type = type.toLowerCase();\n    opts.parts = [];\n    try {\n        assert.ok(data.length > 0, \"signature must not be empty\");\n        switch(opts.type){\n            case \"rsa\":\n                return parseOneNum(data, type, format, opts);\n            case \"ed25519\":\n                return parseOneNum(data, type, format, opts);\n            case \"dsa\":\n            case \"ecdsa\":\n                if (format === \"asn1\") return parseDSAasn1(data, type, format, opts);\n                else if (opts.type === \"dsa\") return parseDSA(data, type, format, opts);\n                else return parseECDSA(data, type, format, opts);\n            default:\n                throw new InvalidAlgorithmError(type);\n        }\n    } catch (e) {\n        if (e instanceof InvalidAlgorithmError) throw e;\n        throw new SignatureParseError(type, format, e);\n    }\n};\nfunction parseOneNum(data, type, format, opts) {\n    if (format === \"ssh\") {\n        try {\n            var buf = new SSHBuffer({\n                buffer: data\n            });\n            var head = buf.readString();\n        } catch (e) {\n        /* fall through */ }\n        if (buf !== undefined) {\n            var msg = \"SSH signature does not match expected \" + \"type (expected \" + type + \", got \" + head + \")\";\n            switch(head){\n                case \"ssh-rsa\":\n                    assert.strictEqual(type, \"rsa\", msg);\n                    opts.hashAlgo = \"sha1\";\n                    break;\n                case \"rsa-sha2-256\":\n                    assert.strictEqual(type, \"rsa\", msg);\n                    opts.hashAlgo = \"sha256\";\n                    break;\n                case \"rsa-sha2-512\":\n                    assert.strictEqual(type, \"rsa\", msg);\n                    opts.hashAlgo = \"sha512\";\n                    break;\n                case \"ssh-ed25519\":\n                    assert.strictEqual(type, \"ed25519\", msg);\n                    opts.hashAlgo = \"sha512\";\n                    break;\n                default:\n                    throw new Error(\"Unknown SSH signature \" + \"type: \" + head);\n            }\n            var sig = buf.readPart();\n            assert.ok(buf.atEnd(), \"extra trailing bytes\");\n            sig.name = \"sig\";\n            opts.parts.push(sig);\n            return new Signature(opts);\n        }\n    }\n    opts.parts.push({\n        name: \"sig\",\n        data: data\n    });\n    return new Signature(opts);\n}\nfunction parseDSAasn1(data, type, format, opts) {\n    var der = new asn1.BerReader(data);\n    der.readSequence();\n    var r = der.readString(asn1.Ber.Integer, true);\n    var s = der.readString(asn1.Ber.Integer, true);\n    opts.parts.push({\n        name: \"r\",\n        data: utils.mpNormalize(r)\n    });\n    opts.parts.push({\n        name: \"s\",\n        data: utils.mpNormalize(s)\n    });\n    return new Signature(opts);\n}\nfunction parseDSA(data, type, format, opts) {\n    if (data.length != 40) {\n        var buf = new SSHBuffer({\n            buffer: data\n        });\n        var d = buf.readBuffer();\n        if (d.toString(\"ascii\") === \"ssh-dss\") d = buf.readBuffer();\n        assert.ok(buf.atEnd(), \"extra trailing bytes\");\n        assert.strictEqual(d.length, 40, \"invalid inner length\");\n        data = d;\n    }\n    opts.parts.push({\n        name: \"r\",\n        data: data.slice(0, 20)\n    });\n    opts.parts.push({\n        name: \"s\",\n        data: data.slice(20, 40)\n    });\n    return new Signature(opts);\n}\nfunction parseECDSA(data, type, format, opts) {\n    var buf = new SSHBuffer({\n        buffer: data\n    });\n    var r, s;\n    var inner = buf.readBuffer();\n    var stype = inner.toString(\"ascii\");\n    if (stype.slice(0, 6) === \"ecdsa-\") {\n        var parts = stype.split(\"-\");\n        assert.strictEqual(parts[0], \"ecdsa\");\n        assert.strictEqual(parts[1], \"sha2\");\n        opts.curve = parts[2];\n        switch(opts.curve){\n            case \"nistp256\":\n                opts.hashAlgo = \"sha256\";\n                break;\n            case \"nistp384\":\n                opts.hashAlgo = \"sha384\";\n                break;\n            case \"nistp521\":\n                opts.hashAlgo = \"sha512\";\n                break;\n            default:\n                throw new Error(\"Unsupported ECDSA curve: \" + opts.curve);\n        }\n        inner = buf.readBuffer();\n        assert.ok(buf.atEnd(), \"extra trailing bytes on outer\");\n        buf = new SSHBuffer({\n            buffer: inner\n        });\n        r = buf.readPart();\n    } else {\n        r = {\n            data: inner\n        };\n    }\n    s = buf.readPart();\n    assert.ok(buf.atEnd(), \"extra trailing bytes\");\n    r.name = \"r\";\n    s.name = \"s\";\n    opts.parts.push(r);\n    opts.parts.push(s);\n    return new Signature(opts);\n}\nSignature.isSignature = function(obj, ver) {\n    return utils.isCompatible(obj, Signature, ver);\n};\n/*\n * API versions for Signature:\n * [1,0] -- initial ver\n * [2,0] -- support for rsa in full ssh format, compat with sshpk-agent\n *          hashAlgorithm property\n * [2,1] -- first tagged version\n */ Signature.prototype._sshpkApiVersion = [\n    2,\n    1\n];\nSignature._oldVersionDetect = function(obj) {\n    assert.func(obj.toBuffer);\n    if (obj.hasOwnProperty(\"hashAlgorithm\")) return [\n        2,\n        0\n    ];\n    return [\n        1,\n        0\n    ];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/signature.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/ssh-buffer.js":
/*!**********************************************!*\
  !*** ./node_modules/sshpk/lib/ssh-buffer.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\nmodule.exports = SSHBuffer;\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nfunction SSHBuffer(opts) {\n    assert.object(opts, \"options\");\n    if (opts.buffer !== undefined) assert.buffer(opts.buffer, \"options.buffer\");\n    this._size = opts.buffer ? opts.buffer.length : 1024;\n    this._buffer = opts.buffer || Buffer.alloc(this._size);\n    this._offset = 0;\n}\nSSHBuffer.prototype.toBuffer = function() {\n    return this._buffer.slice(0, this._offset);\n};\nSSHBuffer.prototype.atEnd = function() {\n    return this._offset >= this._buffer.length;\n};\nSSHBuffer.prototype.remainder = function() {\n    return this._buffer.slice(this._offset);\n};\nSSHBuffer.prototype.skip = function(n) {\n    this._offset += n;\n};\nSSHBuffer.prototype.expand = function() {\n    this._size *= 2;\n    var buf = Buffer.alloc(this._size);\n    this._buffer.copy(buf, 0);\n    this._buffer = buf;\n};\nSSHBuffer.prototype.readPart = function() {\n    return {\n        data: this.readBuffer()\n    };\n};\nSSHBuffer.prototype.readBuffer = function() {\n    var len = this._buffer.readUInt32BE(this._offset);\n    this._offset += 4;\n    assert.ok(this._offset + len <= this._buffer.length, \"length out of bounds at +0x\" + this._offset.toString(16) + \" (data truncated?)\");\n    var buf = this._buffer.slice(this._offset, this._offset + len);\n    this._offset += len;\n    return buf;\n};\nSSHBuffer.prototype.readString = function() {\n    return this.readBuffer().toString();\n};\nSSHBuffer.prototype.readCString = function() {\n    var offset = this._offset;\n    while(offset < this._buffer.length && this._buffer[offset] !== 0x00)offset++;\n    assert.ok(offset < this._buffer.length, \"c string does not terminate\");\n    var str = this._buffer.slice(this._offset, offset).toString();\n    this._offset = offset + 1;\n    return str;\n};\nSSHBuffer.prototype.readInt = function() {\n    var v = this._buffer.readUInt32BE(this._offset);\n    this._offset += 4;\n    return v;\n};\nSSHBuffer.prototype.readInt64 = function() {\n    assert.ok(this._offset + 8 < this._buffer.length, \"buffer not long enough to read Int64\");\n    var v = this._buffer.slice(this._offset, this._offset + 8);\n    this._offset += 8;\n    return v;\n};\nSSHBuffer.prototype.readChar = function() {\n    var v = this._buffer[this._offset++];\n    return v;\n};\nSSHBuffer.prototype.writeBuffer = function(buf) {\n    while(this._offset + 4 + buf.length > this._size)this.expand();\n    this._buffer.writeUInt32BE(buf.length, this._offset);\n    this._offset += 4;\n    buf.copy(this._buffer, this._offset);\n    this._offset += buf.length;\n};\nSSHBuffer.prototype.writeString = function(str) {\n    this.writeBuffer(Buffer.from(str, \"utf8\"));\n};\nSSHBuffer.prototype.writeCString = function(str) {\n    while(this._offset + 1 + str.length > this._size)this.expand();\n    this._buffer.write(str, this._offset);\n    this._offset += str.length;\n    this._buffer[this._offset++] = 0;\n};\nSSHBuffer.prototype.writeInt = function(v) {\n    while(this._offset + 4 > this._size)this.expand();\n    this._buffer.writeUInt32BE(v, this._offset);\n    this._offset += 4;\n};\nSSHBuffer.prototype.writeInt64 = function(v) {\n    assert.buffer(v, \"value\");\n    if (v.length > 8) {\n        var lead = v.slice(0, v.length - 8);\n        for(var i = 0; i < lead.length; ++i){\n            assert.strictEqual(lead[i], 0, \"must fit in 64 bits of precision\");\n        }\n        v = v.slice(v.length - 8, v.length);\n    }\n    while(this._offset + 8 > this._size)this.expand();\n    v.copy(this._buffer, this._offset);\n    this._offset += 8;\n};\nSSHBuffer.prototype.writeChar = function(v) {\n    while(this._offset + 1 > this._size)this.expand();\n    this._buffer[this._offset++] = v;\n};\nSSHBuffer.prototype.writePart = function(p) {\n    this.writeBuffer(p.data);\n};\nSSHBuffer.prototype.write = function(buf) {\n    while(this._offset + buf.length > this._size)this.expand();\n    buf.copy(this._buffer, this._offset);\n    this._offset += buf.length;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/ssh-buffer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/sshpk/lib/utils.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\nmodule.exports = {\n    bufferSplit: bufferSplit,\n    addRSAMissing: addRSAMissing,\n    calculateDSAPublic: calculateDSAPublic,\n    calculateED25519Public: calculateED25519Public,\n    calculateX25519Public: calculateX25519Public,\n    mpNormalize: mpNormalize,\n    mpDenormalize: mpDenormalize,\n    ecNormalize: ecNormalize,\n    countZeros: countZeros,\n    assertCompatible: assertCompatible,\n    isCompatible: isCompatible,\n    opensslKeyDeriv: opensslKeyDeriv,\n    opensshCipherInfo: opensshCipherInfo,\n    publicFromPrivateECDSA: publicFromPrivateECDSA,\n    zeroPadToLength: zeroPadToLength,\n    writeBitString: writeBitString,\n    readBitString: readBitString,\n    pbkdf2: pbkdf2\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar PrivateKey = __webpack_require__(/*! ./private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar Key = __webpack_require__(/*! ./key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar algs = __webpack_require__(/*! ./algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar asn1 = __webpack_require__(/*! asn1 */ \"(rsc)/./node_modules/asn1/lib/index.js\");\nvar ec = __webpack_require__(/*! ecc-jsbn/lib/ec */ \"(rsc)/./node_modules/ecc-jsbn/lib/ec.js\");\nvar jsbn = (__webpack_require__(/*! jsbn */ \"(rsc)/./node_modules/jsbn/index.js\").BigInteger);\nvar nacl = __webpack_require__(/*! tweetnacl */ \"(rsc)/./node_modules/tweetnacl/nacl-fast.js\");\nvar MAX_CLASS_DEPTH = 3;\nfunction isCompatible(obj, klass, needVer) {\n    if (obj === null || typeof obj !== \"object\") return false;\n    if (needVer === undefined) needVer = klass.prototype._sshpkApiVersion;\n    if (obj instanceof klass && klass.prototype._sshpkApiVersion[0] == needVer[0]) return true;\n    var proto = Object.getPrototypeOf(obj);\n    var depth = 0;\n    while(proto.constructor.name !== klass.name){\n        proto = Object.getPrototypeOf(proto);\n        if (!proto || ++depth > MAX_CLASS_DEPTH) return false;\n    }\n    if (proto.constructor.name !== klass.name) return false;\n    var ver = proto._sshpkApiVersion;\n    if (ver === undefined) ver = klass._oldVersionDetect(obj);\n    if (ver[0] != needVer[0] || ver[1] < needVer[1]) return false;\n    return true;\n}\nfunction assertCompatible(obj, klass, needVer, name) {\n    if (name === undefined) name = \"object\";\n    assert.ok(obj, name + \" must not be null\");\n    assert.object(obj, name + \" must be an object\");\n    if (needVer === undefined) needVer = klass.prototype._sshpkApiVersion;\n    if (obj instanceof klass && klass.prototype._sshpkApiVersion[0] == needVer[0]) return;\n    var proto = Object.getPrototypeOf(obj);\n    var depth = 0;\n    while(proto.constructor.name !== klass.name){\n        proto = Object.getPrototypeOf(proto);\n        assert.ok(proto && ++depth <= MAX_CLASS_DEPTH, name + \" must be a \" + klass.name + \" instance\");\n    }\n    assert.strictEqual(proto.constructor.name, klass.name, name + \" must be a \" + klass.name + \" instance\");\n    var ver = proto._sshpkApiVersion;\n    if (ver === undefined) ver = klass._oldVersionDetect(obj);\n    assert.ok(ver[0] == needVer[0] && ver[1] >= needVer[1], name + \" must be compatible with \" + klass.name + \" klass \" + \"version \" + needVer[0] + \".\" + needVer[1]);\n}\nvar CIPHER_LEN = {\n    \"des-ede3-cbc\": {\n        key: 24,\n        iv: 8\n    },\n    \"aes-128-cbc\": {\n        key: 16,\n        iv: 16\n    },\n    \"aes-256-cbc\": {\n        key: 32,\n        iv: 16\n    }\n};\nvar PKCS5_SALT_LEN = 8;\nfunction opensslKeyDeriv(cipher, salt, passphrase, count) {\n    assert.buffer(salt, \"salt\");\n    assert.buffer(passphrase, \"passphrase\");\n    assert.number(count, \"iteration count\");\n    var clen = CIPHER_LEN[cipher];\n    assert.object(clen, \"supported cipher\");\n    salt = salt.slice(0, PKCS5_SALT_LEN);\n    var D, D_prev, bufs;\n    var material = Buffer.alloc(0);\n    while(material.length < clen.key + clen.iv){\n        bufs = [];\n        if (D_prev) bufs.push(D_prev);\n        bufs.push(passphrase);\n        bufs.push(salt);\n        D = Buffer.concat(bufs);\n        for(var j = 0; j < count; ++j)D = crypto.createHash(\"md5\").update(D).digest();\n        material = Buffer.concat([\n            material,\n            D\n        ]);\n        D_prev = D;\n    }\n    return {\n        key: material.slice(0, clen.key),\n        iv: material.slice(clen.key, clen.key + clen.iv)\n    };\n}\n/* See: RFC2898 */ function pbkdf2(hashAlg, salt, iterations, size, passphrase) {\n    var hkey = Buffer.alloc(salt.length + 4);\n    salt.copy(hkey);\n    var gen = 0, ts = [];\n    var i = 1;\n    while(gen < size){\n        var t = T(i++);\n        gen += t.length;\n        ts.push(t);\n    }\n    return Buffer.concat(ts).slice(0, size);\n    function T(I) {\n        hkey.writeUInt32BE(I, hkey.length - 4);\n        var hmac = crypto.createHmac(hashAlg, passphrase);\n        hmac.update(hkey);\n        var Ti = hmac.digest();\n        var Uc = Ti;\n        var c = 1;\n        while(c++ < iterations){\n            hmac = crypto.createHmac(hashAlg, passphrase);\n            hmac.update(Uc);\n            Uc = hmac.digest();\n            for(var x = 0; x < Ti.length; ++x)Ti[x] ^= Uc[x];\n        }\n        return Ti;\n    }\n}\n/* Count leading zero bits on a buffer */ function countZeros(buf) {\n    var o = 0, obit = 8;\n    while(o < buf.length){\n        var mask = 1 << obit;\n        if ((buf[o] & mask) === mask) break;\n        obit--;\n        if (obit < 0) {\n            o++;\n            obit = 8;\n        }\n    }\n    return o * 8 + (8 - obit) - 1;\n}\nfunction bufferSplit(buf, chr) {\n    assert.buffer(buf);\n    assert.string(chr);\n    var parts = [];\n    var lastPart = 0;\n    var matches = 0;\n    for(var i = 0; i < buf.length; ++i){\n        if (buf[i] === chr.charCodeAt(matches)) ++matches;\n        else if (buf[i] === chr.charCodeAt(0)) matches = 1;\n        else matches = 0;\n        if (matches >= chr.length) {\n            var newPart = i + 1;\n            parts.push(buf.slice(lastPart, newPart - matches));\n            lastPart = newPart;\n            matches = 0;\n        }\n    }\n    if (lastPart <= buf.length) parts.push(buf.slice(lastPart, buf.length));\n    return parts;\n}\nfunction ecNormalize(buf, addZero) {\n    assert.buffer(buf);\n    if (buf[0] === 0x00 && buf[1] === 0x04) {\n        if (addZero) return buf;\n        return buf.slice(1);\n    } else if (buf[0] === 0x04) {\n        if (!addZero) return buf;\n    } else {\n        while(buf[0] === 0x00)buf = buf.slice(1);\n        if (buf[0] === 0x02 || buf[0] === 0x03) throw new Error(\"Compressed elliptic curve points \" + \"are not supported\");\n        if (buf[0] !== 0x04) throw new Error(\"Not a valid elliptic curve point\");\n        if (!addZero) return buf;\n    }\n    var b = Buffer.alloc(buf.length + 1);\n    b[0] = 0x0;\n    buf.copy(b, 1);\n    return b;\n}\nfunction readBitString(der, tag) {\n    if (tag === undefined) tag = asn1.Ber.BitString;\n    var buf = der.readString(tag, true);\n    assert.strictEqual(buf[0], 0x00, \"bit strings with unused bits are \" + \"not supported (0x\" + buf[0].toString(16) + \")\");\n    return buf.slice(1);\n}\nfunction writeBitString(der, buf, tag) {\n    if (tag === undefined) tag = asn1.Ber.BitString;\n    var b = Buffer.alloc(buf.length + 1);\n    b[0] = 0x00;\n    buf.copy(b, 1);\n    der.writeBuffer(b, tag);\n}\nfunction mpNormalize(buf) {\n    assert.buffer(buf);\n    while(buf.length > 1 && buf[0] === 0x00 && (buf[1] & 0x80) === 0x00)buf = buf.slice(1);\n    if ((buf[0] & 0x80) === 0x80) {\n        var b = Buffer.alloc(buf.length + 1);\n        b[0] = 0x00;\n        buf.copy(b, 1);\n        buf = b;\n    }\n    return buf;\n}\nfunction mpDenormalize(buf) {\n    assert.buffer(buf);\n    while(buf.length > 1 && buf[0] === 0x00)buf = buf.slice(1);\n    return buf;\n}\nfunction zeroPadToLength(buf, len) {\n    assert.buffer(buf);\n    assert.number(len);\n    while(buf.length > len){\n        assert.equal(buf[0], 0x00);\n        buf = buf.slice(1);\n    }\n    while(buf.length < len){\n        var b = Buffer.alloc(buf.length + 1);\n        b[0] = 0x00;\n        buf.copy(b, 1);\n        buf = b;\n    }\n    return buf;\n}\nfunction bigintToMpBuf(bigint) {\n    var buf = Buffer.from(bigint.toByteArray());\n    buf = mpNormalize(buf);\n    return buf;\n}\nfunction calculateDSAPublic(g, p, x) {\n    assert.buffer(g);\n    assert.buffer(p);\n    assert.buffer(x);\n    g = new jsbn(g);\n    p = new jsbn(p);\n    x = new jsbn(x);\n    var y = g.modPow(x, p);\n    var ybuf = bigintToMpBuf(y);\n    return ybuf;\n}\nfunction calculateED25519Public(k) {\n    assert.buffer(k);\n    var kp = nacl.sign.keyPair.fromSeed(new Uint8Array(k));\n    return Buffer.from(kp.publicKey);\n}\nfunction calculateX25519Public(k) {\n    assert.buffer(k);\n    var kp = nacl.box.keyPair.fromSeed(new Uint8Array(k));\n    return Buffer.from(kp.publicKey);\n}\nfunction addRSAMissing(key) {\n    assert.object(key);\n    assertCompatible(key, PrivateKey, [\n        1,\n        1\n    ]);\n    var d = new jsbn(key.part.d.data);\n    var buf;\n    if (!key.part.dmodp) {\n        var p = new jsbn(key.part.p.data);\n        var dmodp = d.mod(p.subtract(1));\n        buf = bigintToMpBuf(dmodp);\n        key.part.dmodp = {\n            name: \"dmodp\",\n            data: buf\n        };\n        key.parts.push(key.part.dmodp);\n    }\n    if (!key.part.dmodq) {\n        var q = new jsbn(key.part.q.data);\n        var dmodq = d.mod(q.subtract(1));\n        buf = bigintToMpBuf(dmodq);\n        key.part.dmodq = {\n            name: \"dmodq\",\n            data: buf\n        };\n        key.parts.push(key.part.dmodq);\n    }\n}\nfunction publicFromPrivateECDSA(curveName, priv) {\n    assert.string(curveName, \"curveName\");\n    assert.buffer(priv);\n    var params = algs.curves[curveName];\n    var p = new jsbn(params.p);\n    var a = new jsbn(params.a);\n    var b = new jsbn(params.b);\n    var curve = new ec.ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(params.G.toString(\"hex\"));\n    var d = new jsbn(mpNormalize(priv));\n    var pub = G.multiply(d);\n    pub = Buffer.from(curve.encodePointHex(pub), \"hex\");\n    var parts = [];\n    parts.push({\n        name: \"curve\",\n        data: Buffer.from(curveName)\n    });\n    parts.push({\n        name: \"Q\",\n        data: pub\n    });\n    var key = new Key({\n        type: \"ecdsa\",\n        curve: curve,\n        parts: parts\n    });\n    return key;\n}\nfunction opensshCipherInfo(cipher) {\n    var inf = {};\n    switch(cipher){\n        case \"3des-cbc\":\n            inf.keySize = 24;\n            inf.blockSize = 8;\n            inf.opensslName = \"des-ede3-cbc\";\n            break;\n        case \"blowfish-cbc\":\n            inf.keySize = 16;\n            inf.blockSize = 8;\n            inf.opensslName = \"bf-cbc\";\n            break;\n        case \"aes128-cbc\":\n        case \"aes128-ctr\":\n        case \"aes128-gcm@openssh.com\":\n            inf.keySize = 16;\n            inf.blockSize = 16;\n            inf.opensslName = \"aes-128-\" + cipher.slice(7, 10);\n            break;\n        case \"aes192-cbc\":\n        case \"aes192-ctr\":\n        case \"aes192-gcm@openssh.com\":\n            inf.keySize = 24;\n            inf.blockSize = 16;\n            inf.opensslName = \"aes-192-\" + cipher.slice(7, 10);\n            break;\n        case \"aes256-cbc\":\n        case \"aes256-ctr\":\n        case \"aes256-gcm@openssh.com\":\n            inf.keySize = 32;\n            inf.blockSize = 16;\n            inf.opensslName = \"aes-256-\" + cipher.slice(7, 10);\n            break;\n        default:\n            throw new Error('Unsupported openssl cipher \"' + cipher + '\"');\n    }\n    return inf;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/utils.js\n");

/***/ })

};
;