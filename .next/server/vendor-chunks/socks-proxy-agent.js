"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/socks-proxy-agent";
exports.ids = ["vendor-chunks/socks-proxy-agent"];
exports.modules = {

/***/ "(rsc)/./node_modules/socks-proxy-agent/dist/agent.js":
/*!******************************************************!*\
  !*** ./node_modules/socks-proxy-agent/dist/agent.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst dns_1 = __importDefault(__webpack_require__(/*! dns */ \"dns\"));\nconst tls_1 = __importDefault(__webpack_require__(/*! tls */ \"tls\"));\nconst url_1 = __importDefault(__webpack_require__(/*! url */ \"url\"));\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\"));\nconst agent_base_1 = __webpack_require__(/*! agent-base */ \"(rsc)/./node_modules/agent-base/dist/src/index.js\");\nconst socks_1 = __webpack_require__(/*! socks */ \"(rsc)/./node_modules/socks/build/index.js\");\nconst debug = debug_1.default(\"socks-proxy-agent\");\nfunction dnsLookup(host) {\n    return new Promise((resolve, reject)=>{\n        dns_1.default.lookup(host, (err, res)=>{\n            if (err) {\n                reject(err);\n            } else {\n                resolve(res);\n            }\n        });\n    });\n}\nfunction parseSocksProxy(opts) {\n    let port = 0;\n    let lookup = false;\n    let type = 5;\n    // Prefer `hostname` over `host`, because of `url.parse()`\n    const host = opts.hostname || opts.host;\n    if (!host) {\n        throw new TypeError('No \"host\"');\n    }\n    if (typeof opts.port === \"number\") {\n        port = opts.port;\n    } else if (typeof opts.port === \"string\") {\n        port = parseInt(opts.port, 10);\n    }\n    // From RFC 1928, Section 3: https://tools.ietf.org/html/rfc1928#section-3\n    // \"The SOCKS service is conventionally located on TCP port 1080\"\n    if (!port) {\n        port = 1080;\n    }\n    // figure out if we want socks v4 or v5, based on the \"protocol\" used.\n    // Defaults to 5.\n    if (opts.protocol) {\n        switch(opts.protocol.replace(\":\", \"\")){\n            case \"socks4\":\n                lookup = true;\n            // pass through\n            case \"socks4a\":\n                type = 4;\n                break;\n            case \"socks5\":\n                lookup = true;\n            // pass through\n            case \"socks\":\n            case \"socks5h\":\n                type = 5;\n                break;\n            default:\n                throw new TypeError(`A \"socks\" protocol must be specified! Got: ${opts.protocol}`);\n        }\n    }\n    if (typeof opts.type !== \"undefined\") {\n        if (opts.type === 4 || opts.type === 5) {\n            type = opts.type;\n        } else {\n            throw new TypeError(`\"type\" must be 4 or 5, got: ${opts.type}`);\n        }\n    }\n    const proxy = {\n        host,\n        port,\n        type\n    };\n    let userId = opts.userId || opts.username;\n    let password = opts.password;\n    if (opts.auth) {\n        const auth = opts.auth.split(\":\");\n        userId = auth[0];\n        password = auth[1];\n    }\n    if (userId) {\n        Object.defineProperty(proxy, \"userId\", {\n            value: userId,\n            enumerable: false\n        });\n    }\n    if (password) {\n        Object.defineProperty(proxy, \"password\", {\n            value: password,\n            enumerable: false\n        });\n    }\n    return {\n        lookup,\n        proxy\n    };\n}\n/**\n * The `SocksProxyAgent`.\n *\n * @api public\n */ class SocksProxyAgent extends agent_base_1.Agent {\n    constructor(_opts){\n        let opts;\n        if (typeof _opts === \"string\") {\n            opts = url_1.default.parse(_opts);\n        } else {\n            opts = _opts;\n        }\n        if (!opts) {\n            throw new TypeError(\"a SOCKS proxy server `host` and `port` must be specified!\");\n        }\n        super(opts);\n        const parsedProxy = parseSocksProxy(opts);\n        this.lookup = parsedProxy.lookup;\n        this.proxy = parsedProxy.proxy;\n    }\n    /**\n     * Initiates a SOCKS connection to the specified SOCKS proxy server,\n     * which in turn connects to the specified remote host and port.\n     *\n     * @api protected\n     */ callback(req, opts) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const { lookup, proxy } = this;\n            let { host, port, timeout } = opts;\n            if (!host) {\n                throw new Error(\"No `host` defined!\");\n            }\n            if (lookup) {\n                // Client-side DNS resolution for \"4\" and \"5\" socks proxy versions.\n                host = yield dnsLookup(host);\n            }\n            const socksOpts = {\n                proxy,\n                destination: {\n                    host,\n                    port\n                },\n                command: \"connect\",\n                timeout\n            };\n            debug(\"Creating socks proxy connection: %o\", socksOpts);\n            const { socket } = yield socks_1.SocksClient.createConnection(socksOpts);\n            debug(\"Successfully created socks proxy connection\");\n            if (opts.secureEndpoint) {\n                // The proxy is connecting to a TLS server, so upgrade\n                // this socket connection to a TLS connection.\n                debug(\"Upgrading socket connection to TLS\");\n                const servername = opts.servername || host;\n                return tls_1.default.connect(Object.assign(Object.assign({}, omit(opts, \"host\", \"hostname\", \"path\", \"port\")), {\n                    socket,\n                    servername\n                }));\n            }\n            return socket;\n        });\n    }\n}\nexports[\"default\"] = SocksProxyAgent;\nfunction omit(obj, ...keys) {\n    const ret = {};\n    let key;\n    for(key in obj){\n        if (!keys.includes(key)) {\n            ret[key] = obj[key];\n        }\n    }\n    return ret;\n} //# sourceMappingURL=agent.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/socks-proxy-agent/dist/agent.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/socks-proxy-agent/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/socks-proxy-agent/dist/index.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nconst agent_1 = __importDefault(__webpack_require__(/*! ./agent */ \"(rsc)/./node_modules/socks-proxy-agent/dist/agent.js\"));\nfunction createSocksProxyAgent(opts) {\n    return new agent_1.default(opts);\n}\n(function(createSocksProxyAgent) {\n    createSocksProxyAgent.SocksProxyAgent = agent_1.default;\n    createSocksProxyAgent.prototype = agent_1.default.prototype;\n})(createSocksProxyAgent || (createSocksProxyAgent = {}));\nmodule.exports = createSocksProxyAgent; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc29ja3MtcHJveHktYWdlbnQvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLGtCQUFrQixJQUFLLElBQUksSUFBSSxDQUFDQSxlQUFlLElBQUssU0FBVUMsR0FBRztJQUNqRSxPQUFPLE9BQVFBLElBQUlDLFVBQVUsR0FBSUQsTUFBTTtRQUFFLFdBQVdBO0lBQUk7QUFDNUQ7QUFDQSxNQUFNRSxVQUFVSCxnQkFBZ0JJLG1CQUFPQSxDQUFDLHFFQUFTO0FBQ2pELFNBQVNDLHNCQUFzQkMsSUFBSTtJQUMvQixPQUFPLElBQUlILFFBQVFJLE9BQU8sQ0FBQ0Q7QUFDL0I7QUFDQyxVQUFVRCxxQkFBcUI7SUFDNUJBLHNCQUFzQkcsZUFBZSxHQUFHTCxRQUFRSSxPQUFPO0lBQ3ZERixzQkFBc0JJLFNBQVMsR0FBR04sUUFBUUksT0FBTyxDQUFDRSxTQUFTO0FBQy9ELEdBQUdKLHlCQUEwQkEsQ0FBQUEsd0JBQXdCLENBQUM7QUFDdERLLE9BQU9DLE9BQU8sR0FBR04sdUJBQ2pCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NpdmlsLWVuZ2luZWVyaW5nLXBsYXRmb3JtLy4vbm9kZV9tb2R1bGVzL3NvY2tzLXByb3h5LWFnZW50L2Rpc3QvaW5kZXguanM/ZDU0MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbmNvbnN0IGFnZW50XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vYWdlbnRcIikpO1xuZnVuY3Rpb24gY3JlYXRlU29ja3NQcm94eUFnZW50KG9wdHMpIHtcbiAgICByZXR1cm4gbmV3IGFnZW50XzEuZGVmYXVsdChvcHRzKTtcbn1cbihmdW5jdGlvbiAoY3JlYXRlU29ja3NQcm94eUFnZW50KSB7XG4gICAgY3JlYXRlU29ja3NQcm94eUFnZW50LlNvY2tzUHJveHlBZ2VudCA9IGFnZW50XzEuZGVmYXVsdDtcbiAgICBjcmVhdGVTb2Nrc1Byb3h5QWdlbnQucHJvdG90eXBlID0gYWdlbnRfMS5kZWZhdWx0LnByb3RvdHlwZTtcbn0pKGNyZWF0ZVNvY2tzUHJveHlBZ2VudCB8fCAoY3JlYXRlU29ja3NQcm94eUFnZW50ID0ge30pKTtcbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlU29ja3NQcm94eUFnZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJhZ2VudF8xIiwicmVxdWlyZSIsImNyZWF0ZVNvY2tzUHJveHlBZ2VudCIsIm9wdHMiLCJkZWZhdWx0IiwiU29ja3NQcm94eUFnZW50IiwicHJvdG90eXBlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/socks-proxy-agent/dist/index.js\n");

/***/ })

};
;