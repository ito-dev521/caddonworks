/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/png-js";
exports.ids = ["vendor-chunks/png-js"];
exports.modules = {

/***/ "(rsc)/./node_modules/png-js/png-node.js":
/*!*****************************************!*\
  !*** ./node_modules/png-js/png-node.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * MIT LICENSE\n * Copyright (c) 2011 Devon Govett\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this\n * software and associated documentation files (the \"Software\"), to deal in the Software\n * without restriction, including without limitation the rights to use, copy, modify, merge,\n * publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons\n * to whom the Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all copies or\n * substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING\n * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */ const fs = __webpack_require__(/*! fs */ \"fs\");\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\nmodule.exports = class PNG {\n    static decode(path, fn) {\n        return fs.readFile(path, function(err, file) {\n            const png = new PNG(file);\n            return png.decode((pixels)=>fn(pixels));\n        });\n    }\n    static load(path) {\n        const file = fs.readFileSync(path);\n        return new PNG(file);\n    }\n    constructor(data){\n        let i;\n        this.data = data;\n        this.pos = 8; // Skip the default header\n        this.palette = [];\n        this.imgData = [];\n        this.transparency = {};\n        this.text = {};\n        while(true){\n            const chunkSize = this.readUInt32();\n            let section = \"\";\n            for(i = 0; i < 4; i++){\n                section += String.fromCharCode(this.data[this.pos++]);\n            }\n            switch(section){\n                case \"IHDR\":\n                    // we can grab  interesting values from here (like width, height, etc)\n                    this.width = this.readUInt32();\n                    this.height = this.readUInt32();\n                    this.bits = this.data[this.pos++];\n                    this.colorType = this.data[this.pos++];\n                    this.compressionMethod = this.data[this.pos++];\n                    this.filterMethod = this.data[this.pos++];\n                    this.interlaceMethod = this.data[this.pos++];\n                    break;\n                case \"PLTE\":\n                    this.palette = this.read(chunkSize);\n                    break;\n                case \"IDAT\":\n                    for(i = 0; i < chunkSize; i++){\n                        this.imgData.push(this.data[this.pos++]);\n                    }\n                    break;\n                case \"tRNS\":\n                    // This chunk can only occur once and it must occur after the\n                    // PLTE chunk and before the IDAT chunk.\n                    this.transparency = {};\n                    switch(this.colorType){\n                        case 3:\n                            // Indexed color, RGB. Each byte in this chunk is an alpha for\n                            // the palette index in the PLTE (\"palette\") chunk up until the\n                            // last non-opaque entry. Set up an array, stretching over all\n                            // palette entries which will be 0 (opaque) or 1 (transparent).\n                            this.transparency.indexed = this.read(chunkSize);\n                            var short = 255 - this.transparency.indexed.length;\n                            if (short > 0) {\n                                for(i = 0; i < short; i++){\n                                    this.transparency.indexed.push(255);\n                                }\n                            }\n                            break;\n                        case 0:\n                            // Greyscale. Corresponding to entries in the PLTE chunk.\n                            // Grey is two bytes, range 0 .. (2 ^ bit-depth) - 1\n                            this.transparency.grayscale = this.read(chunkSize)[0];\n                            break;\n                        case 2:\n                            // True color with proper alpha channel.\n                            this.transparency.rgb = this.read(chunkSize);\n                            break;\n                    }\n                    break;\n                case \"tEXt\":\n                    var text = this.read(chunkSize);\n                    var index = text.indexOf(0);\n                    var key = String.fromCharCode.apply(String, text.slice(0, index));\n                    this.text[key] = String.fromCharCode.apply(String, text.slice(index + 1));\n                    break;\n                case \"IEND\":\n                    // we've got everything we need!\n                    switch(this.colorType){\n                        case 0:\n                        case 3:\n                        case 4:\n                            this.colors = 1;\n                            break;\n                        case 2:\n                        case 6:\n                            this.colors = 3;\n                            break;\n                    }\n                    this.hasAlphaChannel = [\n                        4,\n                        6\n                    ].includes(this.colorType);\n                    var colors = this.colors + (this.hasAlphaChannel ? 1 : 0);\n                    this.pixelBitlength = this.bits * colors;\n                    switch(this.colors){\n                        case 1:\n                            this.colorSpace = \"DeviceGray\";\n                            break;\n                        case 3:\n                            this.colorSpace = \"DeviceRGB\";\n                            break;\n                    }\n                    this.imgData = new Buffer(this.imgData);\n                    return;\n                    break;\n                default:\n                    // unknown (or unimportant) section, skip it\n                    this.pos += chunkSize;\n            }\n            this.pos += 4; // Skip the CRC\n            if (this.pos > this.data.length) {\n                throw new Error(\"Incomplete or corrupt PNG file\");\n            }\n        }\n    }\n    read(bytes) {\n        const result = new Array(bytes);\n        for(let i = 0; i < bytes; i++){\n            result[i] = this.data[this.pos++];\n        }\n        return result;\n    }\n    readUInt32() {\n        const b1 = this.data[this.pos++] << 24;\n        const b2 = this.data[this.pos++] << 16;\n        const b3 = this.data[this.pos++] << 8;\n        const b4 = this.data[this.pos++];\n        return b1 | b2 | b3 | b4;\n    }\n    readUInt16() {\n        const b1 = this.data[this.pos++] << 8;\n        const b2 = this.data[this.pos++];\n        return b1 | b2;\n    }\n    decodePixels(fn) {\n        return zlib.inflate(this.imgData, (err, data)=>{\n            if (err) {\n                throw err;\n            }\n            const { width, height } = this;\n            const pixelBytes = this.pixelBitlength / 8;\n            const pixels = new Buffer(width * height * pixelBytes);\n            const { length } = data;\n            let pos = 0;\n            function pass(x0, y0, dx, dy, singlePass = false) {\n                const w = Math.ceil((width - x0) / dx);\n                const h = Math.ceil((height - y0) / dy);\n                const scanlineLength = pixelBytes * w;\n                const buffer = singlePass ? pixels : new Buffer(scanlineLength * h);\n                let row = 0;\n                let c = 0;\n                while(row < h && pos < length){\n                    var byte, col, i, left, upper;\n                    switch(data[pos++]){\n                        case 0:\n                            for(i = 0; i < scanlineLength; i++){\n                                buffer[c++] = data[pos++];\n                            }\n                            break;\n                        case 1:\n                            for(i = 0; i < scanlineLength; i++){\n                                byte = data[pos++];\n                                left = i < pixelBytes ? 0 : buffer[c - pixelBytes];\n                                buffer[c++] = (byte + left) % 256;\n                            }\n                            break;\n                        case 2:\n                            for(i = 0; i < scanlineLength; i++){\n                                byte = data[pos++];\n                                col = (i - i % pixelBytes) / pixelBytes;\n                                upper = row && buffer[(row - 1) * scanlineLength + col * pixelBytes + i % pixelBytes];\n                                buffer[c++] = (upper + byte) % 256;\n                            }\n                            break;\n                        case 3:\n                            for(i = 0; i < scanlineLength; i++){\n                                byte = data[pos++];\n                                col = (i - i % pixelBytes) / pixelBytes;\n                                left = i < pixelBytes ? 0 : buffer[c - pixelBytes];\n                                upper = row && buffer[(row - 1) * scanlineLength + col * pixelBytes + i % pixelBytes];\n                                buffer[c++] = (byte + Math.floor((left + upper) / 2)) % 256;\n                            }\n                            break;\n                        case 4:\n                            for(i = 0; i < scanlineLength; i++){\n                                var paeth, upperLeft;\n                                byte = data[pos++];\n                                col = (i - i % pixelBytes) / pixelBytes;\n                                left = i < pixelBytes ? 0 : buffer[c - pixelBytes];\n                                if (row === 0) {\n                                    upper = upperLeft = 0;\n                                } else {\n                                    upper = buffer[(row - 1) * scanlineLength + col * pixelBytes + i % pixelBytes];\n                                    upperLeft = col && buffer[(row - 1) * scanlineLength + (col - 1) * pixelBytes + i % pixelBytes];\n                                }\n                                const p = left + upper - upperLeft;\n                                const pa = Math.abs(p - left);\n                                const pb = Math.abs(p - upper);\n                                const pc = Math.abs(p - upperLeft);\n                                if (pa <= pb && pa <= pc) {\n                                    paeth = left;\n                                } else if (pb <= pc) {\n                                    paeth = upper;\n                                } else {\n                                    paeth = upperLeft;\n                                }\n                                buffer[c++] = (byte + paeth) % 256;\n                            }\n                            break;\n                        default:\n                            throw new Error(`Invalid filter algorithm: ${data[pos - 1]}`);\n                    }\n                    if (!singlePass) {\n                        let pixelsPos = ((y0 + row * dy) * width + x0) * pixelBytes;\n                        let bufferPos = row * scanlineLength;\n                        for(i = 0; i < w; i++){\n                            for(let j = 0; j < pixelBytes; j++)pixels[pixelsPos++] = buffer[bufferPos++];\n                            pixelsPos += (dx - 1) * pixelBytes;\n                        }\n                    }\n                    row++;\n                }\n            }\n            if (this.interlaceMethod === 1) {\n                /*\n          1 6 4 6 2 6 4 6\n          7 7 7 7 7 7 7 7\n          5 6 5 6 5 6 5 6\n          7 7 7 7 7 7 7 7\n          3 6 4 6 3 6 4 6\n          7 7 7 7 7 7 7 7\n          5 6 5 6 5 6 5 6\n          7 7 7 7 7 7 7 7\n        */ pass(0, 0, 8, 8); // 1\n                pass(4, 0, 8, 8); // 2\n                pass(0, 4, 4, 8); // 3\n                pass(2, 0, 4, 4); // 4\n                pass(0, 2, 2, 4); // 5\n                pass(1, 0, 2, 2); // 6\n                pass(0, 1, 1, 2); // 7\n            } else {\n                pass(0, 0, 1, 1, true);\n            }\n            return fn(pixels);\n        });\n    }\n    decodePalette() {\n        const { palette } = this;\n        const { length } = palette;\n        const transparency = this.transparency.indexed || [];\n        const ret = new Buffer(transparency.length + length);\n        let pos = 0;\n        let c = 0;\n        for(let i = 0; i < length; i += 3){\n            var left;\n            ret[pos++] = palette[i];\n            ret[pos++] = palette[i + 1];\n            ret[pos++] = palette[i + 2];\n            ret[pos++] = (left = transparency[c++]) != null ? left : 255;\n        }\n        return ret;\n    }\n    copyToImageData(imageData, pixels) {\n        let j, k;\n        let { colors } = this;\n        let palette = null;\n        let alpha = this.hasAlphaChannel;\n        if (this.palette.length) {\n            palette = this._decodedPalette || (this._decodedPalette = this.decodePalette());\n            colors = 4;\n            alpha = true;\n        }\n        const data = imageData.data || imageData;\n        const { length } = data;\n        const input = palette || pixels;\n        let i = j = 0;\n        if (colors === 1) {\n            while(i < length){\n                k = palette ? pixels[i / 4] * 4 : j;\n                const v = input[k++];\n                data[i++] = v;\n                data[i++] = v;\n                data[i++] = v;\n                data[i++] = alpha ? input[k++] : 255;\n                j = k;\n            }\n        } else {\n            while(i < length){\n                k = palette ? pixels[i / 4] * 4 : j;\n                data[i++] = input[k++];\n                data[i++] = input[k++];\n                data[i++] = input[k++];\n                data[i++] = alpha ? input[k++] : 255;\n                j = k;\n            }\n        }\n    }\n    decode(fn) {\n        const ret = new Buffer(this.width * this.height * 4);\n        return this.decodePixels((pixels)=>{\n            this.copyToImageData(ret, pixels);\n            return fn(ret);\n        });\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/png-js/png-node.js\n");

/***/ })

};
;