/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/string_decoder";
exports.ids = ["vendor-chunks/string_decoder"];
exports.modules = {

/***/ "(rsc)/./node_modules/string_decoder/index.js":
/*!**********************************************!*\
  !*** ./node_modules/string_decoder/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\nvar Buffer = (__webpack_require__(/*! buffer */ \"buffer\").Buffer);\nvar isBufferEncoding = Buffer.isEncoding || function(encoding) {\n    switch(encoding && encoding.toLowerCase()){\n        case \"hex\":\n        case \"utf8\":\n        case \"utf-8\":\n        case \"ascii\":\n        case \"binary\":\n        case \"base64\":\n        case \"ucs2\":\n        case \"ucs-2\":\n        case \"utf16le\":\n        case \"utf-16le\":\n        case \"raw\":\n            return true;\n        default:\n            return false;\n    }\n};\nfunction assertEncoding(encoding) {\n    if (encoding && !isBufferEncoding(encoding)) {\n        throw new Error(\"Unknown encoding: \" + encoding);\n    }\n}\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters. CESU-8 is handled as part of the UTF-8 encoding.\n//\n// @TODO Handling all encodings inside a single object makes it very difficult\n// to reason about this code, so it should be split up in the future.\n// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code\n// points as used by CESU-8.\nvar StringDecoder = exports.StringDecoder = function(encoding) {\n    this.encoding = (encoding || \"utf8\").toLowerCase().replace(/[-_]/, \"\");\n    assertEncoding(encoding);\n    switch(this.encoding){\n        case \"utf8\":\n            // CESU-8 represents each of Surrogate Pair by 3-bytes\n            this.surrogateSize = 3;\n            break;\n        case \"ucs2\":\n        case \"utf16le\":\n            // UTF-16 represents each of Surrogate Pair by 2-bytes\n            this.surrogateSize = 2;\n            this.detectIncompleteChar = utf16DetectIncompleteChar;\n            break;\n        case \"base64\":\n            // Base-64 stores 3 bytes in 4 chars, and pads the remainder.\n            this.surrogateSize = 3;\n            this.detectIncompleteChar = base64DetectIncompleteChar;\n            break;\n        default:\n            this.write = passThroughWrite;\n            return;\n    }\n    // Enough space to store all bytes of a single character. UTF-8 needs 4\n    // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).\n    this.charBuffer = new Buffer(6);\n    // Number of bytes received for the current incomplete multi-byte character.\n    this.charReceived = 0;\n    // Number of bytes expected for the current incomplete multi-byte character.\n    this.charLength = 0;\n};\n// write decodes the given buffer and returns it as JS string that is\n// guaranteed to not contain any partial multi-byte characters. Any partial\n// character found at the end of the buffer is buffered up, and will be\n// returned when calling write again with the remaining bytes.\n//\n// Note: Converting a Buffer containing an orphan surrogate to a String\n// currently works, but converting a String to a Buffer (via `new Buffer`, or\n// Buffer#write) will replace incomplete surrogates with the unicode\n// replacement character. See https://codereview.chromium.org/121173009/ .\nStringDecoder.prototype.write = function(buffer) {\n    var charStr = \"\";\n    // if our last write ended with an incomplete multibyte character\n    while(this.charLength){\n        // determine how many remaining bytes this buffer has to offer for this char\n        var available = buffer.length >= this.charLength - this.charReceived ? this.charLength - this.charReceived : buffer.length;\n        // add the new bytes to the char buffer\n        buffer.copy(this.charBuffer, this.charReceived, 0, available);\n        this.charReceived += available;\n        if (this.charReceived < this.charLength) {\n            // still not enough chars in this buffer? wait for more ...\n            return \"\";\n        }\n        // remove bytes belonging to the current character from the buffer\n        buffer = buffer.slice(available, buffer.length);\n        // get the character that was split\n        charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);\n        // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n        var charCode = charStr.charCodeAt(charStr.length - 1);\n        if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n            this.charLength += this.surrogateSize;\n            charStr = \"\";\n            continue;\n        }\n        this.charReceived = this.charLength = 0;\n        // if there are no more bytes in this buffer, just emit our char\n        if (buffer.length === 0) {\n            return charStr;\n        }\n        break;\n    }\n    // determine and set charLength / charReceived\n    this.detectIncompleteChar(buffer);\n    var end = buffer.length;\n    if (this.charLength) {\n        // buffer the incomplete character bytes we got\n        buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);\n        end -= this.charReceived;\n    }\n    charStr += buffer.toString(this.encoding, 0, end);\n    var end = charStr.length - 1;\n    var charCode = charStr.charCodeAt(end);\n    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n    if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n        var size = this.surrogateSize;\n        this.charLength += size;\n        this.charReceived += size;\n        this.charBuffer.copy(this.charBuffer, size, 0, size);\n        buffer.copy(this.charBuffer, 0, 0, size);\n        return charStr.substring(0, end);\n    }\n    // or just emit the charStr\n    return charStr;\n};\n// detectIncompleteChar determines if there is an incomplete UTF-8 character at\n// the end of the given buffer. If so, it sets this.charLength to the byte\n// length that character, and sets this.charReceived to the number of bytes\n// that are available for this character.\nStringDecoder.prototype.detectIncompleteChar = function(buffer) {\n    // determine how many bytes we have to check at the end of this buffer\n    var i = buffer.length >= 3 ? 3 : buffer.length;\n    // Figure out if one of the last i bytes of our buffer announces an\n    // incomplete char.\n    for(; i > 0; i--){\n        var c = buffer[buffer.length - i];\n        // See http://en.wikipedia.org/wiki/UTF-8#Description\n        // 110XXXXX\n        if (i == 1 && c >> 5 == 0x06) {\n            this.charLength = 2;\n            break;\n        }\n        // 1110XXXX\n        if (i <= 2 && c >> 4 == 0x0E) {\n            this.charLength = 3;\n            break;\n        }\n        // 11110XXX\n        if (i <= 3 && c >> 3 == 0x1E) {\n            this.charLength = 4;\n            break;\n        }\n    }\n    this.charReceived = i;\n};\nStringDecoder.prototype.end = function(buffer) {\n    var res = \"\";\n    if (buffer && buffer.length) res = this.write(buffer);\n    if (this.charReceived) {\n        var cr = this.charReceived;\n        var buf = this.charBuffer;\n        var enc = this.encoding;\n        res += buf.slice(0, cr).toString(enc);\n    }\n    return res;\n};\nfunction passThroughWrite(buffer) {\n    return buffer.toString(this.encoding);\n}\nfunction utf16DetectIncompleteChar(buffer) {\n    this.charReceived = buffer.length % 2;\n    this.charLength = this.charReceived ? 2 : 0;\n}\nfunction base64DetectIncompleteChar(buffer) {\n    this.charReceived = buffer.length % 3;\n    this.charLength = this.charReceived ? 3 : 0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/string_decoder/index.js\n");

/***/ })

};
;