/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/http-signature";
exports.ids = ["vendor-chunks/http-signature"];
exports.modules = {

/***/ "(rsc)/./node_modules/http-signature/lib/index.js":
/*!**************************************************!*\
  !*** ./node_modules/http-signature/lib/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\nvar parser = __webpack_require__(/*! ./parser */ \"(rsc)/./node_modules/http-signature/lib/parser.js\");\nvar signer = __webpack_require__(/*! ./signer */ \"(rsc)/./node_modules/http-signature/lib/signer.js\");\nvar verify = __webpack_require__(/*! ./verify */ \"(rsc)/./node_modules/http-signature/lib/verify.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/http-signature/lib/utils.js\");\n///--- API\nmodule.exports = {\n    parse: parser.parseRequest,\n    parseRequest: parser.parseRequest,\n    sign: signer.signRequest,\n    signRequest: signer.signRequest,\n    createSigner: signer.createSigner,\n    isSigner: signer.isSigner,\n    sshKeyToPEM: utils.sshKeyToPEM,\n    sshKeyFingerprint: utils.fingerprint,\n    pemToRsaSSHKey: utils.pemToRsaSSHKey,\n    verify: verify.verifySignature,\n    verifySignature: verify.verifySignature,\n    verifyHMAC: verify.verifyHMAC\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaHR0cC1zaWduYXR1cmUvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLDhCQUE4QjtBQUU5QixJQUFJQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUNyQixJQUFJQyxTQUFTRCxtQkFBT0EsQ0FBQztBQUNyQixJQUFJRSxTQUFTRixtQkFBT0EsQ0FBQztBQUNyQixJQUFJRyxRQUFRSCxtQkFBT0EsQ0FBQztBQUlwQixVQUFVO0FBRVZJLE9BQU9DLE9BQU8sR0FBRztJQUVmQyxPQUFPUCxPQUFPUSxZQUFZO0lBQzFCQSxjQUFjUixPQUFPUSxZQUFZO0lBRWpDQyxNQUFNUCxPQUFPUSxXQUFXO0lBQ3hCQSxhQUFhUixPQUFPUSxXQUFXO0lBQy9CQyxjQUFjVCxPQUFPUyxZQUFZO0lBQ2pDQyxVQUFVVixPQUFPVSxRQUFRO0lBRXpCQyxhQUFhVCxNQUFNUyxXQUFXO0lBQzlCQyxtQkFBbUJWLE1BQU1XLFdBQVc7SUFDcENDLGdCQUFnQlosTUFBTVksY0FBYztJQUVwQ2IsUUFBUUEsT0FBT2MsZUFBZTtJQUM5QkEsaUJBQWlCZCxPQUFPYyxlQUFlO0lBQ3ZDQyxZQUFZZixPQUFPZSxVQUFVO0FBQy9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2l2aWwtZW5naW5lZXJpbmctcGxhdGZvcm0vLi9ub2RlX21vZHVsZXMvaHR0cC1zaWduYXR1cmUvbGliL2luZGV4LmpzPzYyYmQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUgSm95ZW50LCBJbmMuXG5cbnZhciBwYXJzZXIgPSByZXF1aXJlKCcuL3BhcnNlcicpO1xudmFyIHNpZ25lciA9IHJlcXVpcmUoJy4vc2lnbmVyJyk7XG52YXIgdmVyaWZ5ID0gcmVxdWlyZSgnLi92ZXJpZnknKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxuXG5cbi8vLy0tLSBBUElcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgcGFyc2U6IHBhcnNlci5wYXJzZVJlcXVlc3QsXG4gIHBhcnNlUmVxdWVzdDogcGFyc2VyLnBhcnNlUmVxdWVzdCxcblxuICBzaWduOiBzaWduZXIuc2lnblJlcXVlc3QsXG4gIHNpZ25SZXF1ZXN0OiBzaWduZXIuc2lnblJlcXVlc3QsXG4gIGNyZWF0ZVNpZ25lcjogc2lnbmVyLmNyZWF0ZVNpZ25lcixcbiAgaXNTaWduZXI6IHNpZ25lci5pc1NpZ25lcixcblxuICBzc2hLZXlUb1BFTTogdXRpbHMuc3NoS2V5VG9QRU0sXG4gIHNzaEtleUZpbmdlcnByaW50OiB1dGlscy5maW5nZXJwcmludCxcbiAgcGVtVG9Sc2FTU0hLZXk6IHV0aWxzLnBlbVRvUnNhU1NIS2V5LFxuXG4gIHZlcmlmeTogdmVyaWZ5LnZlcmlmeVNpZ25hdHVyZSxcbiAgdmVyaWZ5U2lnbmF0dXJlOiB2ZXJpZnkudmVyaWZ5U2lnbmF0dXJlLFxuICB2ZXJpZnlITUFDOiB2ZXJpZnkudmVyaWZ5SE1BQ1xufTtcbiJdLCJuYW1lcyI6WyJwYXJzZXIiLCJyZXF1aXJlIiwic2lnbmVyIiwidmVyaWZ5IiwidXRpbHMiLCJtb2R1bGUiLCJleHBvcnRzIiwicGFyc2UiLCJwYXJzZVJlcXVlc3QiLCJzaWduIiwic2lnblJlcXVlc3QiLCJjcmVhdGVTaWduZXIiLCJpc1NpZ25lciIsInNzaEtleVRvUEVNIiwic3NoS2V5RmluZ2VycHJpbnQiLCJmaW5nZXJwcmludCIsInBlbVRvUnNhU1NIS2V5IiwidmVyaWZ5U2lnbmF0dXJlIiwidmVyaWZ5SE1BQyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/http-signature/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/http-signature/lib/parser.js":
/*!***************************************************!*\
  !*** ./node_modules/http-signature/lib/parser.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2012 Joyent, Inc.  All rights reserved.\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/http-signature/lib/utils.js\");\n///--- Globals\nvar HASH_ALGOS = utils.HASH_ALGOS;\nvar PK_ALGOS = utils.PK_ALGOS;\nvar HttpSignatureError = utils.HttpSignatureError;\nvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\nvar validateAlgorithm = utils.validateAlgorithm;\nvar State = {\n    New: 0,\n    Params: 1\n};\nvar ParamsState = {\n    Name: 0,\n    Quote: 1,\n    Value: 2,\n    Comma: 3\n};\n///--- Specific Errors\nfunction ExpiredRequestError(message) {\n    HttpSignatureError.call(this, message, ExpiredRequestError);\n}\nutil.inherits(ExpiredRequestError, HttpSignatureError);\nfunction InvalidHeaderError(message) {\n    HttpSignatureError.call(this, message, InvalidHeaderError);\n}\nutil.inherits(InvalidHeaderError, HttpSignatureError);\nfunction InvalidParamsError(message) {\n    HttpSignatureError.call(this, message, InvalidParamsError);\n}\nutil.inherits(InvalidParamsError, HttpSignatureError);\nfunction MissingHeaderError(message) {\n    HttpSignatureError.call(this, message, MissingHeaderError);\n}\nutil.inherits(MissingHeaderError, HttpSignatureError);\nfunction StrictParsingError(message) {\n    HttpSignatureError.call(this, message, StrictParsingError);\n}\nutil.inherits(StrictParsingError, HttpSignatureError);\n///--- Exported API\nmodule.exports = {\n    /**\n   * Parses the 'Authorization' header out of an http.ServerRequest object.\n   *\n   * Note that this API will fully validate the Authorization header, and throw\n   * on any error.  It will not however check the signature, or the keyId format\n   * as those are specific to your environment.  You can use the options object\n   * to pass in extra constraints.\n   *\n   * As a response object you can expect this:\n   *\n   *     {\n   *       \"scheme\": \"Signature\",\n   *       \"params\": {\n   *         \"keyId\": \"foo\",\n   *         \"algorithm\": \"rsa-sha256\",\n   *         \"headers\": [\n   *           \"date\" or \"x-date\",\n   *           \"digest\"\n   *         ],\n   *         \"signature\": \"base64\"\n   *       },\n   *       \"signingString\": \"ready to be passed to crypto.verify()\"\n   *     }\n   *\n   * @param {Object} request an http.ServerRequest.\n   * @param {Object} options an optional options object with:\n   *                   - clockSkew: allowed clock skew in seconds (default 300).\n   *                   - headers: required header names (def: date or x-date)\n   *                   - algorithms: algorithms to support (default: all).\n   *                   - strict: should enforce latest spec parsing\n   *                             (default: false).\n   * @return {Object} parsed out object (see above).\n   * @throws {TypeError} on invalid input.\n   * @throws {InvalidHeaderError} on an invalid Authorization header error.\n   * @throws {InvalidParamsError} if the params in the scheme are invalid.\n   * @throws {MissingHeaderError} if the params indicate a header not present,\n   *                              either in the request headers from the params,\n   *                              or not in the params from a required header\n   *                              in options.\n   * @throws {StrictParsingError} if old attributes are used in strict parsing\n   *                              mode.\n   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.\n   */ parseRequest: function parseRequest(request, options) {\n        assert.object(request, \"request\");\n        assert.object(request.headers, \"request.headers\");\n        if (options === undefined) {\n            options = {};\n        }\n        if (options.headers === undefined) {\n            options.headers = [\n                request.headers[\"x-date\"] ? \"x-date\" : \"date\"\n            ];\n        }\n        assert.object(options, \"options\");\n        assert.arrayOfString(options.headers, \"options.headers\");\n        assert.optionalFinite(options.clockSkew, \"options.clockSkew\");\n        var authzHeaderName = options.authorizationHeaderName || \"authorization\";\n        if (!request.headers[authzHeaderName]) {\n            throw new MissingHeaderError(\"no \" + authzHeaderName + \" header \" + \"present in the request\");\n        }\n        options.clockSkew = options.clockSkew || 300;\n        var i = 0;\n        var state = State.New;\n        var substate = ParamsState.Name;\n        var tmpName = \"\";\n        var tmpValue = \"\";\n        var parsed = {\n            scheme: \"\",\n            params: {},\n            signingString: \"\"\n        };\n        var authz = request.headers[authzHeaderName];\n        for(i = 0; i < authz.length; i++){\n            var c = authz.charAt(i);\n            switch(Number(state)){\n                case State.New:\n                    if (c !== \" \") parsed.scheme += c;\n                    else state = State.Params;\n                    break;\n                case State.Params:\n                    switch(Number(substate)){\n                        case ParamsState.Name:\n                            var code = c.charCodeAt(0);\n                            // restricted name of A-Z / a-z\n                            if (code >= 0x41 && code <= 0x5a || // A-Z\n                            code >= 0x61 && code <= 0x7a) {\n                                tmpName += c;\n                            } else if (c === \"=\") {\n                                if (tmpName.length === 0) throw new InvalidHeaderError(\"bad param format\");\n                                substate = ParamsState.Quote;\n                            } else {\n                                throw new InvalidHeaderError(\"bad param format\");\n                            }\n                            break;\n                        case ParamsState.Quote:\n                            if (c === '\"') {\n                                tmpValue = \"\";\n                                substate = ParamsState.Value;\n                            } else {\n                                throw new InvalidHeaderError(\"bad param format\");\n                            }\n                            break;\n                        case ParamsState.Value:\n                            if (c === '\"') {\n                                parsed.params[tmpName] = tmpValue;\n                                substate = ParamsState.Comma;\n                            } else {\n                                tmpValue += c;\n                            }\n                            break;\n                        case ParamsState.Comma:\n                            if (c === \",\") {\n                                tmpName = \"\";\n                                substate = ParamsState.Name;\n                            } else {\n                                throw new InvalidHeaderError(\"bad param format\");\n                            }\n                            break;\n                        default:\n                            throw new Error(\"Invalid substate\");\n                    }\n                    break;\n                default:\n                    throw new Error(\"Invalid substate\");\n            }\n        }\n        if (!parsed.params.headers || parsed.params.headers === \"\") {\n            if (request.headers[\"x-date\"]) {\n                parsed.params.headers = [\n                    \"x-date\"\n                ];\n            } else {\n                parsed.params.headers = [\n                    \"date\"\n                ];\n            }\n        } else {\n            parsed.params.headers = parsed.params.headers.split(\" \");\n        }\n        // Minimally validate the parsed object\n        if (!parsed.scheme || parsed.scheme !== \"Signature\") throw new InvalidHeaderError('scheme was not \"Signature\"');\n        if (!parsed.params.keyId) throw new InvalidHeaderError(\"keyId was not specified\");\n        if (!parsed.params.algorithm) throw new InvalidHeaderError(\"algorithm was not specified\");\n        if (!parsed.params.signature) throw new InvalidHeaderError(\"signature was not specified\");\n        // Check the algorithm against the official list\n        parsed.params.algorithm = parsed.params.algorithm.toLowerCase();\n        try {\n            validateAlgorithm(parsed.params.algorithm);\n        } catch (e) {\n            if (e instanceof InvalidAlgorithmError) throw new InvalidParamsError(parsed.params.algorithm + \" is not \" + \"supported\");\n            else throw e;\n        }\n        // Build the signingString\n        for(i = 0; i < parsed.params.headers.length; i++){\n            var h = parsed.params.headers[i].toLowerCase();\n            parsed.params.headers[i] = h;\n            if (h === \"request-line\") {\n                if (!options.strict) {\n                    /*\n           * We allow headers from the older spec drafts if strict parsing isn't\n           * specified in options.\n           */ parsed.signingString += request.method + \" \" + request.url + \" HTTP/\" + request.httpVersion;\n                } else {\n                    /* Strict parsing doesn't allow older draft headers. */ throw new StrictParsingError(\"request-line is not a valid header \" + \"with strict parsing enabled.\");\n                }\n            } else if (h === \"(request-target)\") {\n                parsed.signingString += \"(request-target): \" + request.method.toLowerCase() + \" \" + request.url;\n            } else {\n                var value = request.headers[h];\n                if (value === undefined) throw new MissingHeaderError(h + \" was not in the request\");\n                parsed.signingString += h + \": \" + value;\n            }\n            if (i + 1 < parsed.params.headers.length) parsed.signingString += \"\\n\";\n        }\n        // Check against the constraints\n        var date;\n        if (request.headers.date || request.headers[\"x-date\"]) {\n            if (request.headers[\"x-date\"]) {\n                date = new Date(request.headers[\"x-date\"]);\n            } else {\n                date = new Date(request.headers.date);\n            }\n            var now = new Date();\n            var skew = Math.abs(now.getTime() - date.getTime());\n            if (skew > options.clockSkew * 1000) {\n                throw new ExpiredRequestError(\"clock skew of \" + skew / 1000 + \"s was greater than \" + options.clockSkew + \"s\");\n            }\n        }\n        options.headers.forEach(function(hdr) {\n            // Remember that we already checked any headers in the params\n            // were in the request, so if this passes we're good.\n            if (parsed.params.headers.indexOf(hdr.toLowerCase()) < 0) throw new MissingHeaderError(hdr + \" was not a signed header\");\n        });\n        if (options.algorithms) {\n            if (options.algorithms.indexOf(parsed.params.algorithm) === -1) throw new InvalidParamsError(parsed.params.algorithm + \" is not a supported algorithm\");\n        }\n        parsed.algorithm = parsed.params.algorithm.toUpperCase();\n        parsed.keyId = parsed.params.keyId;\n        return parsed;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/http-signature/lib/parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/http-signature/lib/signer.js":
/*!***************************************************!*\
  !*** ./node_modules/http-signature/lib/signer.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2012 Joyent, Inc.  All rights reserved.\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar http = __webpack_require__(/*! http */ \"http\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar sshpk = __webpack_require__(/*! sshpk */ \"(rsc)/./node_modules/sshpk/lib/index.js\");\nvar jsprim = __webpack_require__(/*! jsprim */ \"(rsc)/./node_modules/jsprim/lib/jsprim.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/http-signature/lib/utils.js\");\nvar sprintf = (__webpack_require__(/*! util */ \"util\").format);\nvar HASH_ALGOS = utils.HASH_ALGOS;\nvar PK_ALGOS = utils.PK_ALGOS;\nvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\nvar HttpSignatureError = utils.HttpSignatureError;\nvar validateAlgorithm = utils.validateAlgorithm;\n///--- Globals\nvar AUTHZ_FMT = 'Signature keyId=\"%s\",algorithm=\"%s\",headers=\"%s\",signature=\"%s\"';\n///--- Specific Errors\nfunction MissingHeaderError(message) {\n    HttpSignatureError.call(this, message, MissingHeaderError);\n}\nutil.inherits(MissingHeaderError, HttpSignatureError);\nfunction StrictParsingError(message) {\n    HttpSignatureError.call(this, message, StrictParsingError);\n}\nutil.inherits(StrictParsingError, HttpSignatureError);\n/* See createSigner() */ function RequestSigner(options) {\n    assert.object(options, \"options\");\n    var alg = [];\n    if (options.algorithm !== undefined) {\n        assert.string(options.algorithm, \"options.algorithm\");\n        alg = validateAlgorithm(options.algorithm);\n    }\n    this.rs_alg = alg;\n    /*\n   * RequestSigners come in two varieties: ones with an rs_signFunc, and ones\n   * with an rs_signer.\n   *\n   * rs_signFunc-based RequestSigners have to build up their entire signing\n   * string within the rs_lines array and give it to rs_signFunc as a single\n   * concat'd blob. rs_signer-based RequestSigners can add a line at a time to\n   * their signing state by using rs_signer.update(), thus only needing to\n   * buffer the hash function state and one line at a time.\n   */ if (options.sign !== undefined) {\n        assert.func(options.sign, \"options.sign\");\n        this.rs_signFunc = options.sign;\n    } else if (alg[0] === \"hmac\" && options.key !== undefined) {\n        assert.string(options.keyId, \"options.keyId\");\n        this.rs_keyId = options.keyId;\n        if (typeof options.key !== \"string\" && !Buffer.isBuffer(options.key)) throw new TypeError(\"options.key for HMAC must be a string or Buffer\");\n        /*\n     * Make an rs_signer for HMACs, not a rs_signFunc -- HMACs digest their\n     * data in chunks rather than requiring it all to be given in one go\n     * at the end, so they are more similar to signers than signFuncs.\n     */ this.rs_signer = crypto.createHmac(alg[1].toUpperCase(), options.key);\n        this.rs_signer.sign = function() {\n            var digest = this.digest(\"base64\");\n            return {\n                hashAlgorithm: alg[1],\n                toString: function() {\n                    return digest;\n                }\n            };\n        };\n    } else if (options.key !== undefined) {\n        var key = options.key;\n        if (typeof key === \"string\" || Buffer.isBuffer(key)) key = sshpk.parsePrivateKey(key);\n        assert.ok(sshpk.PrivateKey.isPrivateKey(key, [\n            1,\n            2\n        ]), \"options.key must be a sshpk.PrivateKey\");\n        this.rs_key = key;\n        assert.string(options.keyId, \"options.keyId\");\n        this.rs_keyId = options.keyId;\n        if (!PK_ALGOS[key.type]) {\n            throw new InvalidAlgorithmError(key.type.toUpperCase() + \" type \" + \"keys are not supported\");\n        }\n        if (alg[0] !== undefined && key.type !== alg[0]) {\n            throw new InvalidAlgorithmError(\"options.key must be a \" + alg[0].toUpperCase() + \" key, was given a \" + key.type.toUpperCase() + \" key instead\");\n        }\n        this.rs_signer = key.createSign(alg[1]);\n    } else {\n        throw new TypeError(\"options.sign (func) or options.key is required\");\n    }\n    this.rs_headers = [];\n    this.rs_lines = [];\n}\n/**\n * Adds a header to be signed, with its value, into this signer.\n *\n * @param {String} header\n * @param {String} value\n * @return {String} value written\n */ RequestSigner.prototype.writeHeader = function(header, value) {\n    assert.string(header, \"header\");\n    header = header.toLowerCase();\n    assert.string(value, \"value\");\n    this.rs_headers.push(header);\n    if (this.rs_signFunc) {\n        this.rs_lines.push(header + \": \" + value);\n    } else {\n        var line = header + \": \" + value;\n        if (this.rs_headers.length > 0) line = \"\\n\" + line;\n        this.rs_signer.update(line);\n    }\n    return value;\n};\n/**\n * Adds a default Date header, returning its value.\n *\n * @return {String}\n */ RequestSigner.prototype.writeDateHeader = function() {\n    return this.writeHeader(\"date\", jsprim.rfc1123(new Date()));\n};\n/**\n * Adds the request target line to be signed.\n *\n * @param {String} method, HTTP method (e.g. 'get', 'post', 'put')\n * @param {String} path\n */ RequestSigner.prototype.writeTarget = function(method, path) {\n    assert.string(method, \"method\");\n    assert.string(path, \"path\");\n    method = method.toLowerCase();\n    this.writeHeader(\"(request-target)\", method + \" \" + path);\n};\n/**\n * Calculate the value for the Authorization header on this request\n * asynchronously.\n *\n * @param {Func} callback (err, authz)\n */ RequestSigner.prototype.sign = function(cb) {\n    assert.func(cb, \"callback\");\n    if (this.rs_headers.length < 1) throw new Error(\"At least one header must be signed\");\n    var alg, authz;\n    if (this.rs_signFunc) {\n        var data = this.rs_lines.join(\"\\n\");\n        var self = this;\n        this.rs_signFunc(data, function(err, sig) {\n            if (err) {\n                cb(err);\n                return;\n            }\n            try {\n                assert.object(sig, \"signature\");\n                assert.string(sig.keyId, \"signature.keyId\");\n                assert.string(sig.algorithm, \"signature.algorithm\");\n                assert.string(sig.signature, \"signature.signature\");\n                alg = validateAlgorithm(sig.algorithm);\n                authz = sprintf(AUTHZ_FMT, sig.keyId, sig.algorithm, self.rs_headers.join(\" \"), sig.signature);\n            } catch (e) {\n                cb(e);\n                return;\n            }\n            cb(null, authz);\n        });\n    } else {\n        try {\n            var sigObj = this.rs_signer.sign();\n        } catch (e) {\n            cb(e);\n            return;\n        }\n        alg = (this.rs_alg[0] || this.rs_key.type) + \"-\" + sigObj.hashAlgorithm;\n        var signature = sigObj.toString();\n        authz = sprintf(AUTHZ_FMT, this.rs_keyId, alg, this.rs_headers.join(\" \"), signature);\n        cb(null, authz);\n    }\n};\n///--- Exported API\nmodule.exports = {\n    /**\n   * Identifies whether a given object is a request signer or not.\n   *\n   * @param {Object} object, the object to identify\n   * @returns {Boolean}\n   */ isSigner: function(obj) {\n        if (typeof obj === \"object\" && obj instanceof RequestSigner) return true;\n        return false;\n    },\n    /**\n   * Creates a request signer, used to asynchronously build a signature\n   * for a request (does not have to be an http.ClientRequest).\n   *\n   * @param {Object} options, either:\n   *                   - {String} keyId\n   *                   - {String|Buffer} key\n   *                   - {String} algorithm (optional, required for HMAC)\n   *                 or:\n   *                   - {Func} sign (data, cb)\n   * @return {RequestSigner}\n   */ createSigner: function createSigner(options) {\n        return new RequestSigner(options);\n    },\n    /**\n   * Adds an 'Authorization' header to an http.ClientRequest object.\n   *\n   * Note that this API will add a Date header if it's not already set. Any\n   * other headers in the options.headers array MUST be present, or this\n   * will throw.\n   *\n   * You shouldn't need to check the return type; it's just there if you want\n   * to be pedantic.\n   *\n   * The optional flag indicates whether parsing should use strict enforcement\n   * of the version draft-cavage-http-signatures-04 of the spec or beyond.\n   * The default is to be loose and support\n   * older versions for compatibility.\n   *\n   * @param {Object} request an instance of http.ClientRequest.\n   * @param {Object} options signing parameters object:\n   *                   - {String} keyId required.\n   *                   - {String} key required (either a PEM or HMAC key).\n   *                   - {Array} headers optional; defaults to ['date'].\n   *                   - {String} algorithm optional (unless key is HMAC);\n   *                              default is the same as the sshpk default\n   *                              signing algorithm for the type of key given\n   *                   - {String} httpVersion optional; defaults to '1.1'.\n   *                   - {Boolean} strict optional; defaults to 'false'.\n   * @return {Boolean} true if Authorization (and optionally Date) were added.\n   * @throws {TypeError} on bad parameter types (input).\n   * @throws {InvalidAlgorithmError} if algorithm was bad or incompatible with\n   *                                 the given key.\n   * @throws {sshpk.KeyParseError} if key was bad.\n   * @throws {MissingHeaderError} if a header to be signed was specified but\n   *                              was not present.\n   */ signRequest: function signRequest(request, options) {\n        assert.object(request, \"request\");\n        assert.object(options, \"options\");\n        assert.optionalString(options.algorithm, \"options.algorithm\");\n        assert.string(options.keyId, \"options.keyId\");\n        assert.optionalArrayOfString(options.headers, \"options.headers\");\n        assert.optionalString(options.httpVersion, \"options.httpVersion\");\n        if (!request.getHeader(\"Date\")) request.setHeader(\"Date\", jsprim.rfc1123(new Date()));\n        if (!options.headers) options.headers = [\n            \"date\"\n        ];\n        if (!options.httpVersion) options.httpVersion = \"1.1\";\n        var alg = [];\n        if (options.algorithm) {\n            options.algorithm = options.algorithm.toLowerCase();\n            alg = validateAlgorithm(options.algorithm);\n        }\n        var i;\n        var stringToSign = \"\";\n        for(i = 0; i < options.headers.length; i++){\n            if (typeof options.headers[i] !== \"string\") throw new TypeError(\"options.headers must be an array of Strings\");\n            var h = options.headers[i].toLowerCase();\n            if (h === \"request-line\") {\n                if (!options.strict) {\n                    /**\n           * We allow headers from the older spec drafts if strict parsing isn't\n           * specified in options.\n           */ stringToSign += request.method + \" \" + request.path + \" HTTP/\" + options.httpVersion;\n                } else {\n                    /* Strict parsing doesn't allow older draft headers. */ throw new StrictParsingError(\"request-line is not a valid header \" + \"with strict parsing enabled.\");\n                }\n            } else if (h === \"(request-target)\") {\n                stringToSign += \"(request-target): \" + request.method.toLowerCase() + \" \" + request.path;\n            } else {\n                var value = request.getHeader(h);\n                if (value === undefined || value === \"\") {\n                    throw new MissingHeaderError(h + \" was not in the request\");\n                }\n                stringToSign += h + \": \" + value;\n            }\n            if (i + 1 < options.headers.length) stringToSign += \"\\n\";\n        }\n        /* This is just for unit tests. */ if (request.hasOwnProperty(\"_stringToSign\")) {\n            request._stringToSign = stringToSign;\n        }\n        var signature;\n        if (alg[0] === \"hmac\") {\n            if (typeof options.key !== \"string\" && !Buffer.isBuffer(options.key)) throw new TypeError(\"options.key must be a string or Buffer\");\n            var hmac = crypto.createHmac(alg[1].toUpperCase(), options.key);\n            hmac.update(stringToSign);\n            signature = hmac.digest(\"base64\");\n        } else {\n            var key = options.key;\n            if (typeof key === \"string\" || Buffer.isBuffer(key)) key = sshpk.parsePrivateKey(options.key);\n            assert.ok(sshpk.PrivateKey.isPrivateKey(key, [\n                1,\n                2\n            ]), \"options.key must be a sshpk.PrivateKey\");\n            if (!PK_ALGOS[key.type]) {\n                throw new InvalidAlgorithmError(key.type.toUpperCase() + \" type \" + \"keys are not supported\");\n            }\n            if (alg[0] !== undefined && key.type !== alg[0]) {\n                throw new InvalidAlgorithmError(\"options.key must be a \" + alg[0].toUpperCase() + \" key, was given a \" + key.type.toUpperCase() + \" key instead\");\n            }\n            var signer = key.createSign(alg[1]);\n            signer.update(stringToSign);\n            var sigObj = signer.sign();\n            if (!HASH_ALGOS[sigObj.hashAlgorithm]) {\n                throw new InvalidAlgorithmError(sigObj.hashAlgorithm.toUpperCase() + \" is not a supported hash algorithm\");\n            }\n            options.algorithm = key.type + \"-\" + sigObj.hashAlgorithm;\n            signature = sigObj.toString();\n            assert.notStrictEqual(signature, \"\", \"empty signature produced\");\n        }\n        var authzHeaderName = options.authorizationHeaderName || \"Authorization\";\n        request.setHeader(authzHeaderName, sprintf(AUTHZ_FMT, options.keyId, options.algorithm, options.headers.join(\" \"), signature));\n        return true;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/http-signature/lib/signer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/http-signature/lib/utils.js":
/*!**************************************************!*\
  !*** ./node_modules/http-signature/lib/utils.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2012 Joyent, Inc.  All rights reserved.\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar sshpk = __webpack_require__(/*! sshpk */ \"(rsc)/./node_modules/sshpk/lib/index.js\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar HASH_ALGOS = {\n    \"sha1\": true,\n    \"sha256\": true,\n    \"sha512\": true\n};\nvar PK_ALGOS = {\n    \"rsa\": true,\n    \"dsa\": true,\n    \"ecdsa\": true\n};\nfunction HttpSignatureError(message, caller) {\n    if (Error.captureStackTrace) Error.captureStackTrace(this, caller || HttpSignatureError);\n    this.message = message;\n    this.name = caller.name;\n}\nutil.inherits(HttpSignatureError, Error);\nfunction InvalidAlgorithmError(message) {\n    HttpSignatureError.call(this, message, InvalidAlgorithmError);\n}\nutil.inherits(InvalidAlgorithmError, HttpSignatureError);\nfunction validateAlgorithm(algorithm) {\n    var alg = algorithm.toLowerCase().split(\"-\");\n    if (alg.length !== 2) {\n        throw new InvalidAlgorithmError(alg[0].toUpperCase() + \" is not a \" + \"valid algorithm\");\n    }\n    if (alg[0] !== \"hmac\" && !PK_ALGOS[alg[0]]) {\n        throw new InvalidAlgorithmError(alg[0].toUpperCase() + \" type keys \" + \"are not supported\");\n    }\n    if (!HASH_ALGOS[alg[1]]) {\n        throw new InvalidAlgorithmError(alg[1].toUpperCase() + \" is not a \" + \"supported hash algorithm\");\n    }\n    return alg;\n}\n///--- API\nmodule.exports = {\n    HASH_ALGOS: HASH_ALGOS,\n    PK_ALGOS: PK_ALGOS,\n    HttpSignatureError: HttpSignatureError,\n    InvalidAlgorithmError: InvalidAlgorithmError,\n    validateAlgorithm: validateAlgorithm,\n    /**\n   * Converts an OpenSSH public key (rsa only) to a PKCS#8 PEM file.\n   *\n   * The intent of this module is to interoperate with OpenSSL only,\n   * specifically the node crypto module's `verify` method.\n   *\n   * @param {String} key an OpenSSH public key.\n   * @return {String} PEM encoded form of the RSA public key.\n   * @throws {TypeError} on bad input.\n   * @throws {Error} on invalid ssh key formatted data.\n   */ sshKeyToPEM: function sshKeyToPEM(key) {\n        assert.string(key, \"ssh_key\");\n        var k = sshpk.parseKey(key, \"ssh\");\n        return k.toString(\"pem\");\n    },\n    /**\n   * Generates an OpenSSH fingerprint from an ssh public key.\n   *\n   * @param {String} key an OpenSSH public key.\n   * @return {String} key fingerprint.\n   * @throws {TypeError} on bad input.\n   * @throws {Error} if what you passed doesn't look like an ssh public key.\n   */ fingerprint: function fingerprint(key) {\n        assert.string(key, \"ssh_key\");\n        var k = sshpk.parseKey(key, \"ssh\");\n        return k.fingerprint(\"md5\").toString(\"hex\");\n    },\n    /**\n   * Converts a PKGCS#8 PEM file to an OpenSSH public key (rsa)\n   *\n   * The reverse of the above function.\n   */ pemToRsaSSHKey: function pemToRsaSSHKey(pem, comment) {\n        assert.equal(\"string\", typeof pem, \"typeof pem\");\n        var k = sshpk.parseKey(pem, \"pem\");\n        k.comment = comment;\n        return k.toString(\"ssh\");\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaHR0cC1zaWduYXR1cmUvbGliL3V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFBLG9EQUFvRDtBQUVwRCxJQUFJQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUNyQixJQUFJQyxRQUFRRCxtQkFBT0EsQ0FBQztBQUNwQixJQUFJRSxPQUFPRixtQkFBT0EsQ0FBQztBQUVuQixJQUFJRyxhQUFhO0lBQ2YsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0FBQ1o7QUFFQSxJQUFJQyxXQUFXO0lBQ2IsT0FBTztJQUNQLE9BQU87SUFDUCxTQUFTO0FBQ1g7QUFFQSxTQUFTQyxtQkFBbUJDLE9BQU8sRUFBRUMsTUFBTTtJQUN6QyxJQUFJQyxNQUFNQyxpQkFBaUIsRUFDekJELE1BQU1DLGlCQUFpQixDQUFDLElBQUksRUFBRUYsVUFBVUY7SUFFMUMsSUFBSSxDQUFDQyxPQUFPLEdBQUdBO0lBQ2YsSUFBSSxDQUFDSSxJQUFJLEdBQUdILE9BQU9HLElBQUk7QUFDekI7QUFDQVIsS0FBS1MsUUFBUSxDQUFDTixvQkFBb0JHO0FBRWxDLFNBQVNJLHNCQUFzQk4sT0FBTztJQUNwQ0QsbUJBQW1CUSxJQUFJLENBQUMsSUFBSSxFQUFFUCxTQUFTTTtBQUN6QztBQUNBVixLQUFLUyxRQUFRLENBQUNDLHVCQUF1QlA7QUFFckMsU0FBU1Msa0JBQWtCQyxTQUFTO0lBQ2xDLElBQUlDLE1BQU1ELFVBQVVFLFdBQVcsR0FBR0MsS0FBSyxDQUFDO0lBRXhDLElBQUlGLElBQUlHLE1BQU0sS0FBSyxHQUFHO1FBQ3BCLE1BQU8sSUFBSVAsc0JBQXNCSSxHQUFHLENBQUMsRUFBRSxDQUFDSSxXQUFXLEtBQUssZUFDdEQ7SUFDSjtJQUVBLElBQUlKLEdBQUcsQ0FBQyxFQUFFLEtBQUssVUFBVSxDQUFDWixRQUFRLENBQUNZLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRTtRQUMxQyxNQUFPLElBQUlKLHNCQUFzQkksR0FBRyxDQUFDLEVBQUUsQ0FBQ0ksV0FBVyxLQUFLLGdCQUN0RDtJQUNKO0lBRUEsSUFBSSxDQUFDakIsVUFBVSxDQUFDYSxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFDdkIsTUFBTyxJQUFJSixzQkFBc0JJLEdBQUcsQ0FBQyxFQUFFLENBQUNJLFdBQVcsS0FBSyxlQUN0RDtJQUNKO0lBRUEsT0FBUUo7QUFDVjtBQUVBLFVBQVU7QUFFVkssT0FBT0MsT0FBTyxHQUFHO0lBRWZuQixZQUFZQTtJQUNaQyxVQUFVQTtJQUVWQyxvQkFBb0JBO0lBQ3BCTyx1QkFBdUJBO0lBRXZCRSxtQkFBbUJBO0lBRW5COzs7Ozs7Ozs7O0dBVUMsR0FDRFMsYUFBYSxTQUFTQSxZQUFZQyxHQUFHO1FBQ25DekIsT0FBTzBCLE1BQU0sQ0FBQ0QsS0FBSztRQUVuQixJQUFJRSxJQUFJekIsTUFBTTBCLFFBQVEsQ0FBQ0gsS0FBSztRQUM1QixPQUFRRSxFQUFFRSxRQUFRLENBQUM7SUFDckI7SUFHQTs7Ozs7OztHQU9DLEdBQ0RDLGFBQWEsU0FBU0EsWUFBWUwsR0FBRztRQUNuQ3pCLE9BQU8wQixNQUFNLENBQUNELEtBQUs7UUFFbkIsSUFBSUUsSUFBSXpCLE1BQU0wQixRQUFRLENBQUNILEtBQUs7UUFDNUIsT0FBUUUsRUFBRUcsV0FBVyxDQUFDLE9BQU9ELFFBQVEsQ0FBQztJQUN4QztJQUVBOzs7O0dBSUMsR0FDREUsZ0JBQWdCLFNBQVNBLGVBQWVDLEdBQUcsRUFBRUMsT0FBTztRQUNsRGpDLE9BQU9rQyxLQUFLLENBQUMsVUFBVSxPQUFRRixLQUFNO1FBRXJDLElBQUlMLElBQUl6QixNQUFNMEIsUUFBUSxDQUFDSSxLQUFLO1FBQzVCTCxFQUFFTSxPQUFPLEdBQUdBO1FBQ1osT0FBUU4sRUFBRUUsUUFBUSxDQUFDO0lBQ3JCO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaXZpbC1lbmdpbmVlcmluZy1wbGF0Zm9ybS8uL25vZGVfbW9kdWxlcy9odHRwLXNpZ25hdHVyZS9saWIvdXRpbHMuanM/YjZiOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMiBKb3llbnQsIEluYy4gIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQtcGx1cycpO1xudmFyIHNzaHBrID0gcmVxdWlyZSgnc3NocGsnKTtcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG52YXIgSEFTSF9BTEdPUyA9IHtcbiAgJ3NoYTEnOiB0cnVlLFxuICAnc2hhMjU2JzogdHJ1ZSxcbiAgJ3NoYTUxMic6IHRydWVcbn07XG5cbnZhciBQS19BTEdPUyA9IHtcbiAgJ3JzYSc6IHRydWUsXG4gICdkc2EnOiB0cnVlLFxuICAnZWNkc2EnOiB0cnVlXG59O1xuXG5mdW5jdGlvbiBIdHRwU2lnbmF0dXJlRXJyb3IobWVzc2FnZSwgY2FsbGVyKSB7XG4gIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSlcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBjYWxsZXIgfHwgSHR0cFNpZ25hdHVyZUVycm9yKTtcblxuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICB0aGlzLm5hbWUgPSBjYWxsZXIubmFtZTtcbn1cbnV0aWwuaW5oZXJpdHMoSHR0cFNpZ25hdHVyZUVycm9yLCBFcnJvcik7XG5cbmZ1bmN0aW9uIEludmFsaWRBbGdvcml0aG1FcnJvcihtZXNzYWdlKSB7XG4gIEh0dHBTaWduYXR1cmVFcnJvci5jYWxsKHRoaXMsIG1lc3NhZ2UsIEludmFsaWRBbGdvcml0aG1FcnJvcik7XG59XG51dGlsLmluaGVyaXRzKEludmFsaWRBbGdvcml0aG1FcnJvciwgSHR0cFNpZ25hdHVyZUVycm9yKTtcblxuZnVuY3Rpb24gdmFsaWRhdGVBbGdvcml0aG0oYWxnb3JpdGhtKSB7XG4gIHZhciBhbGcgPSBhbGdvcml0aG0udG9Mb3dlckNhc2UoKS5zcGxpdCgnLScpO1xuXG4gIGlmIChhbGcubGVuZ3RoICE9PSAyKSB7XG4gICAgdGhyb3cgKG5ldyBJbnZhbGlkQWxnb3JpdGhtRXJyb3IoYWxnWzBdLnRvVXBwZXJDYXNlKCkgKyAnIGlzIG5vdCBhICcgK1xuICAgICAgJ3ZhbGlkIGFsZ29yaXRobScpKTtcbiAgfVxuXG4gIGlmIChhbGdbMF0gIT09ICdobWFjJyAmJiAhUEtfQUxHT1NbYWxnWzBdXSkge1xuICAgIHRocm93IChuZXcgSW52YWxpZEFsZ29yaXRobUVycm9yKGFsZ1swXS50b1VwcGVyQ2FzZSgpICsgJyB0eXBlIGtleXMgJyArXG4gICAgICAnYXJlIG5vdCBzdXBwb3J0ZWQnKSk7XG4gIH1cblxuICBpZiAoIUhBU0hfQUxHT1NbYWxnWzFdXSkge1xuICAgIHRocm93IChuZXcgSW52YWxpZEFsZ29yaXRobUVycm9yKGFsZ1sxXS50b1VwcGVyQ2FzZSgpICsgJyBpcyBub3QgYSAnICtcbiAgICAgICdzdXBwb3J0ZWQgaGFzaCBhbGdvcml0aG0nKSk7XG4gIH1cblxuICByZXR1cm4gKGFsZyk7XG59XG5cbi8vLy0tLSBBUElcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgSEFTSF9BTEdPUzogSEFTSF9BTEdPUyxcbiAgUEtfQUxHT1M6IFBLX0FMR09TLFxuXG4gIEh0dHBTaWduYXR1cmVFcnJvcjogSHR0cFNpZ25hdHVyZUVycm9yLFxuICBJbnZhbGlkQWxnb3JpdGhtRXJyb3I6IEludmFsaWRBbGdvcml0aG1FcnJvcixcblxuICB2YWxpZGF0ZUFsZ29yaXRobTogdmFsaWRhdGVBbGdvcml0aG0sXG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGFuIE9wZW5TU0ggcHVibGljIGtleSAocnNhIG9ubHkpIHRvIGEgUEtDUyM4IFBFTSBmaWxlLlxuICAgKlxuICAgKiBUaGUgaW50ZW50IG9mIHRoaXMgbW9kdWxlIGlzIHRvIGludGVyb3BlcmF0ZSB3aXRoIE9wZW5TU0wgb25seSxcbiAgICogc3BlY2lmaWNhbGx5IHRoZSBub2RlIGNyeXB0byBtb2R1bGUncyBgdmVyaWZ5YCBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgYW4gT3BlblNTSCBwdWJsaWMga2V5LlxuICAgKiBAcmV0dXJuIHtTdHJpbmd9IFBFTSBlbmNvZGVkIGZvcm0gb2YgdGhlIFJTQSBwdWJsaWMga2V5LlxuICAgKiBAdGhyb3dzIHtUeXBlRXJyb3J9IG9uIGJhZCBpbnB1dC5cbiAgICogQHRocm93cyB7RXJyb3J9IG9uIGludmFsaWQgc3NoIGtleSBmb3JtYXR0ZWQgZGF0YS5cbiAgICovXG4gIHNzaEtleVRvUEVNOiBmdW5jdGlvbiBzc2hLZXlUb1BFTShrZXkpIHtcbiAgICBhc3NlcnQuc3RyaW5nKGtleSwgJ3NzaF9rZXknKTtcblxuICAgIHZhciBrID0gc3NocGsucGFyc2VLZXkoa2V5LCAnc3NoJyk7XG4gICAgcmV0dXJuIChrLnRvU3RyaW5nKCdwZW0nKSk7XG4gIH0sXG5cblxuICAvKipcbiAgICogR2VuZXJhdGVzIGFuIE9wZW5TU0ggZmluZ2VycHJpbnQgZnJvbSBhbiBzc2ggcHVibGljIGtleS5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGtleSBhbiBPcGVuU1NIIHB1YmxpYyBrZXkuXG4gICAqIEByZXR1cm4ge1N0cmluZ30ga2V5IGZpbmdlcnByaW50LlxuICAgKiBAdGhyb3dzIHtUeXBlRXJyb3J9IG9uIGJhZCBpbnB1dC5cbiAgICogQHRocm93cyB7RXJyb3J9IGlmIHdoYXQgeW91IHBhc3NlZCBkb2Vzbid0IGxvb2sgbGlrZSBhbiBzc2ggcHVibGljIGtleS5cbiAgICovXG4gIGZpbmdlcnByaW50OiBmdW5jdGlvbiBmaW5nZXJwcmludChrZXkpIHtcbiAgICBhc3NlcnQuc3RyaW5nKGtleSwgJ3NzaF9rZXknKTtcblxuICAgIHZhciBrID0gc3NocGsucGFyc2VLZXkoa2V5LCAnc3NoJyk7XG4gICAgcmV0dXJuIChrLmZpbmdlcnByaW50KCdtZDUnKS50b1N0cmluZygnaGV4JykpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhIFBLR0NTIzggUEVNIGZpbGUgdG8gYW4gT3BlblNTSCBwdWJsaWMga2V5IChyc2EpXG4gICAqXG4gICAqIFRoZSByZXZlcnNlIG9mIHRoZSBhYm92ZSBmdW5jdGlvbi5cbiAgICovXG4gIHBlbVRvUnNhU1NIS2V5OiBmdW5jdGlvbiBwZW1Ub1JzYVNTSEtleShwZW0sIGNvbW1lbnQpIHtcbiAgICBhc3NlcnQuZXF1YWwoJ3N0cmluZycsIHR5cGVvZiAocGVtKSwgJ3R5cGVvZiBwZW0nKTtcblxuICAgIHZhciBrID0gc3NocGsucGFyc2VLZXkocGVtLCAncGVtJyk7XG4gICAgay5jb21tZW50ID0gY29tbWVudDtcbiAgICByZXR1cm4gKGsudG9TdHJpbmcoJ3NzaCcpKTtcbiAgfVxufTtcbiJdLCJuYW1lcyI6WyJhc3NlcnQiLCJyZXF1aXJlIiwic3NocGsiLCJ1dGlsIiwiSEFTSF9BTEdPUyIsIlBLX0FMR09TIiwiSHR0cFNpZ25hdHVyZUVycm9yIiwibWVzc2FnZSIsImNhbGxlciIsIkVycm9yIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJuYW1lIiwiaW5oZXJpdHMiLCJJbnZhbGlkQWxnb3JpdGhtRXJyb3IiLCJjYWxsIiwidmFsaWRhdGVBbGdvcml0aG0iLCJhbGdvcml0aG0iLCJhbGciLCJ0b0xvd2VyQ2FzZSIsInNwbGl0IiwibGVuZ3RoIiwidG9VcHBlckNhc2UiLCJtb2R1bGUiLCJleHBvcnRzIiwic3NoS2V5VG9QRU0iLCJrZXkiLCJzdHJpbmciLCJrIiwicGFyc2VLZXkiLCJ0b1N0cmluZyIsImZpbmdlcnByaW50IiwicGVtVG9Sc2FTU0hLZXkiLCJwZW0iLCJjb21tZW50IiwiZXF1YWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/http-signature/lib/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/http-signature/lib/verify.js":
/*!***************************************************!*\
  !*** ./node_modules/http-signature/lib/verify.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar sshpk = __webpack_require__(/*! sshpk */ \"(rsc)/./node_modules/sshpk/lib/index.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/http-signature/lib/utils.js\");\nvar HASH_ALGOS = utils.HASH_ALGOS;\nvar PK_ALGOS = utils.PK_ALGOS;\nvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\nvar HttpSignatureError = utils.HttpSignatureError;\nvar validateAlgorithm = utils.validateAlgorithm;\n///--- Exported API\nmodule.exports = {\n    /**\n   * Verify RSA/DSA signature against public key.  You are expected to pass in\n   * an object that was returned from `parse()`.\n   *\n   * @param {Object} parsedSignature the object you got from `parse`.\n   * @param {String} pubkey RSA/DSA private key PEM.\n   * @return {Boolean} true if valid, false otherwise.\n   * @throws {TypeError} if you pass in bad arguments.\n   * @throws {InvalidAlgorithmError}\n   */ verifySignature: function verifySignature(parsedSignature, pubkey) {\n        assert.object(parsedSignature, \"parsedSignature\");\n        if (typeof pubkey === \"string\" || Buffer.isBuffer(pubkey)) pubkey = sshpk.parseKey(pubkey);\n        assert.ok(sshpk.Key.isKey(pubkey, [\n            1,\n            1\n        ]), \"pubkey must be a sshpk.Key\");\n        var alg = validateAlgorithm(parsedSignature.algorithm);\n        if (alg[0] === \"hmac\" || alg[0] !== pubkey.type) return false;\n        var v = pubkey.createVerify(alg[1]);\n        v.update(parsedSignature.signingString);\n        return v.verify(parsedSignature.params.signature, \"base64\");\n    },\n    /**\n   * Verify HMAC against shared secret.  You are expected to pass in an object\n   * that was returned from `parse()`.\n   *\n   * @param {Object} parsedSignature the object you got from `parse`.\n   * @param {String} secret HMAC shared secret.\n   * @return {Boolean} true if valid, false otherwise.\n   * @throws {TypeError} if you pass in bad arguments.\n   * @throws {InvalidAlgorithmError}\n   */ verifyHMAC: function verifyHMAC(parsedSignature, secret) {\n        assert.object(parsedSignature, \"parsedHMAC\");\n        assert.string(secret, \"secret\");\n        var alg = validateAlgorithm(parsedSignature.algorithm);\n        if (alg[0] !== \"hmac\") return false;\n        var hashAlg = alg[1].toUpperCase();\n        var hmac = crypto.createHmac(hashAlg, secret);\n        hmac.update(parsedSignature.signingString);\n        /*\n     * Now double-hash to avoid leaking timing information - there's\n     * no easy constant-time compare in JS, so we use this approach\n     * instead. See for more info:\n     * https://www.isecpartners.com/blog/2011/february/double-hmac-\n     * verification.aspx\n     */ var h1 = crypto.createHmac(hashAlg, secret);\n        h1.update(hmac.digest());\n        h1 = h1.digest();\n        var h2 = crypto.createHmac(hashAlg, secret);\n        h2.update(new Buffer(parsedSignature.params.signature, \"base64\"));\n        h2 = h2.digest();\n        /* Node 0.8 returns strings from .digest(). */ if (typeof h1 === \"string\") return h1 === h2;\n        /* And node 0.10 lacks the .equals() method on Buffers. */ if (Buffer.isBuffer(h1) && !h1.equals) return h1.toString(\"binary\") === h2.toString(\"binary\");\n        return h1.equals(h2);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaHR0cC1zaWduYXR1cmUvbGliL3ZlcmlmeS5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4QkFBOEI7QUFFOUIsSUFBSUEsU0FBU0MsbUJBQU9BLENBQUM7QUFDckIsSUFBSUMsU0FBU0QsbUJBQU9BLENBQUM7QUFDckIsSUFBSUUsUUFBUUYsbUJBQU9BLENBQUM7QUFDcEIsSUFBSUcsUUFBUUgsbUJBQU9BLENBQUM7QUFFcEIsSUFBSUksYUFBYUQsTUFBTUMsVUFBVTtBQUNqQyxJQUFJQyxXQUFXRixNQUFNRSxRQUFRO0FBQzdCLElBQUlDLHdCQUF3QkgsTUFBTUcscUJBQXFCO0FBQ3ZELElBQUlDLHFCQUFxQkosTUFBTUksa0JBQWtCO0FBQ2pELElBQUlDLG9CQUFvQkwsTUFBTUssaUJBQWlCO0FBRS9DLG1CQUFtQjtBQUVuQkMsT0FBT0MsT0FBTyxHQUFHO0lBQ2Y7Ozs7Ozs7OztHQVNDLEdBQ0RDLGlCQUFpQixTQUFTQSxnQkFBZ0JDLGVBQWUsRUFBRUMsTUFBTTtRQUMvRGQsT0FBT2UsTUFBTSxDQUFDRixpQkFBaUI7UUFDL0IsSUFBSSxPQUFRQyxXQUFZLFlBQVlFLE9BQU9DLFFBQVEsQ0FBQ0gsU0FDbERBLFNBQVNYLE1BQU1lLFFBQVEsQ0FBQ0o7UUFDMUJkLE9BQU9tQixFQUFFLENBQUNoQixNQUFNaUIsR0FBRyxDQUFDQyxLQUFLLENBQUNQLFFBQVE7WUFBQztZQUFHO1NBQUUsR0FBRztRQUUzQyxJQUFJUSxNQUFNYixrQkFBa0JJLGdCQUFnQlUsU0FBUztRQUNyRCxJQUFJRCxHQUFHLENBQUMsRUFBRSxLQUFLLFVBQVVBLEdBQUcsQ0FBQyxFQUFFLEtBQUtSLE9BQU9VLElBQUksRUFDN0MsT0FBUTtRQUVWLElBQUlDLElBQUlYLE9BQU9ZLFlBQVksQ0FBQ0osR0FBRyxDQUFDLEVBQUU7UUFDbENHLEVBQUVFLE1BQU0sQ0FBQ2QsZ0JBQWdCZSxhQUFhO1FBQ3RDLE9BQVFILEVBQUVJLE1BQU0sQ0FBQ2hCLGdCQUFnQmlCLE1BQU0sQ0FBQ0MsU0FBUyxFQUFFO0lBQ3JEO0lBRUE7Ozs7Ozs7OztHQVNDLEdBQ0RDLFlBQVksU0FBU0EsV0FBV25CLGVBQWUsRUFBRW9CLE1BQU07UUFDckRqQyxPQUFPZSxNQUFNLENBQUNGLGlCQUFpQjtRQUMvQmIsT0FBT2tDLE1BQU0sQ0FBQ0QsUUFBUTtRQUV0QixJQUFJWCxNQUFNYixrQkFBa0JJLGdCQUFnQlUsU0FBUztRQUNyRCxJQUFJRCxHQUFHLENBQUMsRUFBRSxLQUFLLFFBQ2IsT0FBUTtRQUVWLElBQUlhLFVBQVViLEdBQUcsQ0FBQyxFQUFFLENBQUNjLFdBQVc7UUFFaEMsSUFBSUMsT0FBT25DLE9BQU9vQyxVQUFVLENBQUNILFNBQVNGO1FBQ3RDSSxLQUFLVixNQUFNLENBQUNkLGdCQUFnQmUsYUFBYTtRQUV6Qzs7Ozs7O0tBTUMsR0FDRCxJQUFJVyxLQUFLckMsT0FBT29DLFVBQVUsQ0FBQ0gsU0FBU0Y7UUFDcENNLEdBQUdaLE1BQU0sQ0FBQ1UsS0FBS0csTUFBTTtRQUNyQkQsS0FBS0EsR0FBR0MsTUFBTTtRQUNkLElBQUlDLEtBQUt2QyxPQUFPb0MsVUFBVSxDQUFDSCxTQUFTRjtRQUNwQ1EsR0FBR2QsTUFBTSxDQUFDLElBQUlYLE9BQU9ILGdCQUFnQmlCLE1BQU0sQ0FBQ0MsU0FBUyxFQUFFO1FBQ3ZEVSxLQUFLQSxHQUFHRCxNQUFNO1FBRWQsNENBQTRDLEdBQzVDLElBQUksT0FBUUQsT0FBUSxVQUNsQixPQUFRQSxPQUFPRTtRQUNqQix3REFBd0QsR0FDeEQsSUFBSXpCLE9BQU9DLFFBQVEsQ0FBQ3NCLE9BQU8sQ0FBQ0EsR0FBR0csTUFBTSxFQUNuQyxPQUFRSCxHQUFHSSxRQUFRLENBQUMsY0FBY0YsR0FBR0UsUUFBUSxDQUFDO1FBRWhELE9BQVFKLEdBQUdHLE1BQU0sQ0FBQ0Q7SUFDcEI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2NpdmlsLWVuZ2luZWVyaW5nLXBsYXRmb3JtLy4vbm9kZV9tb2R1bGVzL2h0dHAtc2lnbmF0dXJlL2xpYi92ZXJpZnkuanM/YzdkNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNSBKb3llbnQsIEluYy5cblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydC1wbHVzJyk7XG52YXIgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG52YXIgc3NocGsgPSByZXF1aXJlKCdzc2hwaycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG52YXIgSEFTSF9BTEdPUyA9IHV0aWxzLkhBU0hfQUxHT1M7XG52YXIgUEtfQUxHT1MgPSB1dGlscy5QS19BTEdPUztcbnZhciBJbnZhbGlkQWxnb3JpdGhtRXJyb3IgPSB1dGlscy5JbnZhbGlkQWxnb3JpdGhtRXJyb3I7XG52YXIgSHR0cFNpZ25hdHVyZUVycm9yID0gdXRpbHMuSHR0cFNpZ25hdHVyZUVycm9yO1xudmFyIHZhbGlkYXRlQWxnb3JpdGhtID0gdXRpbHMudmFsaWRhdGVBbGdvcml0aG07XG5cbi8vLy0tLSBFeHBvcnRlZCBBUElcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8qKlxuICAgKiBWZXJpZnkgUlNBL0RTQSBzaWduYXR1cmUgYWdhaW5zdCBwdWJsaWMga2V5LiAgWW91IGFyZSBleHBlY3RlZCB0byBwYXNzIGluXG4gICAqIGFuIG9iamVjdCB0aGF0IHdhcyByZXR1cm5lZCBmcm9tIGBwYXJzZSgpYC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcnNlZFNpZ25hdHVyZSB0aGUgb2JqZWN0IHlvdSBnb3QgZnJvbSBgcGFyc2VgLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHVia2V5IFJTQS9EU0EgcHJpdmF0ZSBrZXkgUEVNLlxuICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIHZhbGlkLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gaWYgeW91IHBhc3MgaW4gYmFkIGFyZ3VtZW50cy5cbiAgICogQHRocm93cyB7SW52YWxpZEFsZ29yaXRobUVycm9yfVxuICAgKi9cbiAgdmVyaWZ5U2lnbmF0dXJlOiBmdW5jdGlvbiB2ZXJpZnlTaWduYXR1cmUocGFyc2VkU2lnbmF0dXJlLCBwdWJrZXkpIHtcbiAgICBhc3NlcnQub2JqZWN0KHBhcnNlZFNpZ25hdHVyZSwgJ3BhcnNlZFNpZ25hdHVyZScpO1xuICAgIGlmICh0eXBlb2YgKHB1YmtleSkgPT09ICdzdHJpbmcnIHx8IEJ1ZmZlci5pc0J1ZmZlcihwdWJrZXkpKVxuICAgICAgcHVia2V5ID0gc3NocGsucGFyc2VLZXkocHVia2V5KTtcbiAgICBhc3NlcnQub2soc3NocGsuS2V5LmlzS2V5KHB1YmtleSwgWzEsIDFdKSwgJ3B1YmtleSBtdXN0IGJlIGEgc3NocGsuS2V5Jyk7XG5cbiAgICB2YXIgYWxnID0gdmFsaWRhdGVBbGdvcml0aG0ocGFyc2VkU2lnbmF0dXJlLmFsZ29yaXRobSk7XG4gICAgaWYgKGFsZ1swXSA9PT0gJ2htYWMnIHx8IGFsZ1swXSAhPT0gcHVia2V5LnR5cGUpXG4gICAgICByZXR1cm4gKGZhbHNlKTtcblxuICAgIHZhciB2ID0gcHVia2V5LmNyZWF0ZVZlcmlmeShhbGdbMV0pO1xuICAgIHYudXBkYXRlKHBhcnNlZFNpZ25hdHVyZS5zaWduaW5nU3RyaW5nKTtcbiAgICByZXR1cm4gKHYudmVyaWZ5KHBhcnNlZFNpZ25hdHVyZS5wYXJhbXMuc2lnbmF0dXJlLCAnYmFzZTY0JykpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBWZXJpZnkgSE1BQyBhZ2FpbnN0IHNoYXJlZCBzZWNyZXQuICBZb3UgYXJlIGV4cGVjdGVkIHRvIHBhc3MgaW4gYW4gb2JqZWN0XG4gICAqIHRoYXQgd2FzIHJldHVybmVkIGZyb20gYHBhcnNlKClgLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyc2VkU2lnbmF0dXJlIHRoZSBvYmplY3QgeW91IGdvdCBmcm9tIGBwYXJzZWAuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzZWNyZXQgSE1BQyBzaGFyZWQgc2VjcmV0LlxuICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIHZhbGlkLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gaWYgeW91IHBhc3MgaW4gYmFkIGFyZ3VtZW50cy5cbiAgICogQHRocm93cyB7SW52YWxpZEFsZ29yaXRobUVycm9yfVxuICAgKi9cbiAgdmVyaWZ5SE1BQzogZnVuY3Rpb24gdmVyaWZ5SE1BQyhwYXJzZWRTaWduYXR1cmUsIHNlY3JldCkge1xuICAgIGFzc2VydC5vYmplY3QocGFyc2VkU2lnbmF0dXJlLCAncGFyc2VkSE1BQycpO1xuICAgIGFzc2VydC5zdHJpbmcoc2VjcmV0LCAnc2VjcmV0Jyk7XG5cbiAgICB2YXIgYWxnID0gdmFsaWRhdGVBbGdvcml0aG0ocGFyc2VkU2lnbmF0dXJlLmFsZ29yaXRobSk7XG4gICAgaWYgKGFsZ1swXSAhPT0gJ2htYWMnKVxuICAgICAgcmV0dXJuIChmYWxzZSk7XG5cbiAgICB2YXIgaGFzaEFsZyA9IGFsZ1sxXS50b1VwcGVyQ2FzZSgpO1xuXG4gICAgdmFyIGhtYWMgPSBjcnlwdG8uY3JlYXRlSG1hYyhoYXNoQWxnLCBzZWNyZXQpO1xuICAgIGhtYWMudXBkYXRlKHBhcnNlZFNpZ25hdHVyZS5zaWduaW5nU3RyaW5nKTtcblxuICAgIC8qXG4gICAgICogTm93IGRvdWJsZS1oYXNoIHRvIGF2b2lkIGxlYWtpbmcgdGltaW5nIGluZm9ybWF0aW9uIC0gdGhlcmUnc1xuICAgICAqIG5vIGVhc3kgY29uc3RhbnQtdGltZSBjb21wYXJlIGluIEpTLCBzbyB3ZSB1c2UgdGhpcyBhcHByb2FjaFxuICAgICAqIGluc3RlYWQuIFNlZSBmb3IgbW9yZSBpbmZvOlxuICAgICAqIGh0dHBzOi8vd3d3LmlzZWNwYXJ0bmVycy5jb20vYmxvZy8yMDExL2ZlYnJ1YXJ5L2RvdWJsZS1obWFjLVxuICAgICAqIHZlcmlmaWNhdGlvbi5hc3B4XG4gICAgICovXG4gICAgdmFyIGgxID0gY3J5cHRvLmNyZWF0ZUhtYWMoaGFzaEFsZywgc2VjcmV0KTtcbiAgICBoMS51cGRhdGUoaG1hYy5kaWdlc3QoKSk7XG4gICAgaDEgPSBoMS5kaWdlc3QoKTtcbiAgICB2YXIgaDIgPSBjcnlwdG8uY3JlYXRlSG1hYyhoYXNoQWxnLCBzZWNyZXQpO1xuICAgIGgyLnVwZGF0ZShuZXcgQnVmZmVyKHBhcnNlZFNpZ25hdHVyZS5wYXJhbXMuc2lnbmF0dXJlLCAnYmFzZTY0JykpO1xuICAgIGgyID0gaDIuZGlnZXN0KCk7XG5cbiAgICAvKiBOb2RlIDAuOCByZXR1cm5zIHN0cmluZ3MgZnJvbSAuZGlnZXN0KCkuICovXG4gICAgaWYgKHR5cGVvZiAoaDEpID09PSAnc3RyaW5nJylcbiAgICAgIHJldHVybiAoaDEgPT09IGgyKTtcbiAgICAvKiBBbmQgbm9kZSAwLjEwIGxhY2tzIHRoZSAuZXF1YWxzKCkgbWV0aG9kIG9uIEJ1ZmZlcnMuICovXG4gICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihoMSkgJiYgIWgxLmVxdWFscylcbiAgICAgIHJldHVybiAoaDEudG9TdHJpbmcoJ2JpbmFyeScpID09PSBoMi50b1N0cmluZygnYmluYXJ5JykpO1xuXG4gICAgcmV0dXJuIChoMS5lcXVhbHMoaDIpKTtcbiAgfVxufTtcbiJdLCJuYW1lcyI6WyJhc3NlcnQiLCJyZXF1aXJlIiwiY3J5cHRvIiwic3NocGsiLCJ1dGlscyIsIkhBU0hfQUxHT1MiLCJQS19BTEdPUyIsIkludmFsaWRBbGdvcml0aG1FcnJvciIsIkh0dHBTaWduYXR1cmVFcnJvciIsInZhbGlkYXRlQWxnb3JpdGhtIiwibW9kdWxlIiwiZXhwb3J0cyIsInZlcmlmeVNpZ25hdHVyZSIsInBhcnNlZFNpZ25hdHVyZSIsInB1YmtleSIsIm9iamVjdCIsIkJ1ZmZlciIsImlzQnVmZmVyIiwicGFyc2VLZXkiLCJvayIsIktleSIsImlzS2V5IiwiYWxnIiwiYWxnb3JpdGhtIiwidHlwZSIsInYiLCJjcmVhdGVWZXJpZnkiLCJ1cGRhdGUiLCJzaWduaW5nU3RyaW5nIiwidmVyaWZ5IiwicGFyYW1zIiwic2lnbmF0dXJlIiwidmVyaWZ5SE1BQyIsInNlY3JldCIsInN0cmluZyIsImhhc2hBbGciLCJ0b1VwcGVyQ2FzZSIsImhtYWMiLCJjcmVhdGVIbWFjIiwiaDEiLCJkaWdlc3QiLCJoMiIsImVxdWFscyIsInRvU3RyaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/http-signature/lib/verify.js\n");

/***/ })

};
;