"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/box-node-sdk";
exports.ids = ["vendor-chunks/box-node-sdk"];
exports.modules = {

/***/ "(rsc)/./node_modules/box-node-sdk/lib/api-request-manager.js":
/*!**************************************************************!*\
  !*** ./node_modules/box-node-sdk/lib/api-request-manager.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * @fileoverview A library for making requests to the Box API.\n */ \n// ------------------------------------------------------------------------------\n// Requirements\n// ------------------------------------------------------------------------------\nvar APIRequest = __webpack_require__(/*! ./api-request */ \"(rsc)/./node_modules/box-node-sdk/lib/api-request.js\"), errors = __webpack_require__(/*! ./util/errors */ \"(rsc)/./node_modules/box-node-sdk/lib/util/errors.js\"), Promise = __webpack_require__(/*! bluebird */ \"(rsc)/./node_modules/bluebird/js/release/bluebird.js\");\n// ------------------------------------------------------------------------------\n// Private\n// ------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------\n// Public\n// ------------------------------------------------------------------------------\n/**\n * A library for communicating with the Box API.\n *\n * @param {Config} config SDK configuration object instance.\n * @param {EventEmitter} eventBus The event bus for SDK events\n * @constructor\n */ function APIRequestManager(config, eventBus) {\n    this.config = config;\n    this.eventBus = eventBus;\n}\n/**\n * Make a request to the API, and get the response via callback.\n *\n * @param {Object} options The request options\n * @returns {Promise<Response>} A promise resolving to the response object\n */ APIRequestManager.prototype.makeRequest = function(options) {\n    // Add default APIRequestManager options to each request\n    var requestConfig = this.config.extend({\n        request: options\n    });\n    // Make the request\n    var apiRequest = new APIRequest(requestConfig, this.eventBus);\n    return Promise.fromCallback((callback)=>apiRequest.execute(callback)).catch((err)=>errors.unwrapAndThrow(err));\n};\n/**\n * Make a request to the API, and return a read stream for the response.\n *\n * @param {Object} options The request options\n * @returns {Stream.Readable} The response stream\n */ APIRequestManager.prototype.makeStreamingRequest = function(options) {\n    // Add default APIRequestManager options to each request\n    var requestConfig = this.config.extend({\n        request: options\n    });\n    // Make the request\n    var apiRequest = new APIRequest(requestConfig, this.eventBus);\n    apiRequest.execute();\n    return apiRequest.getResponseStream();\n};\n/**\n * @module box-node-sdk/lib/api-request-manager\n * @see {@Link APIRequestManager}\n */ module.exports = APIRequestManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYm94LW5vZGUtc2RrL2xpYi9hcGktcmVxdWVzdC1tYW5hZ2VyLmpzIiwibWFwcGluZ3MiOiJBQUFBOztDQUVDLEdBRUQ7QUFFQSxpRkFBaUY7QUFDakYsZUFBZTtBQUNmLGlGQUFpRjtBQUNqRixJQUFJQSxhQUFhQyxtQkFBT0EsQ0FBQyw4RUFDeEJDLFNBQVNELG1CQUFPQSxDQUFDLDhFQUNqQkUsVUFBVUYsbUJBQU9BLENBQUM7QUFFbkIsaUZBQWlGO0FBQ2pGLFVBQVU7QUFDVixpRkFBaUY7QUFFakYsaUZBQWlGO0FBQ2pGLFNBQVM7QUFDVCxpRkFBaUY7QUFFakY7Ozs7OztDQU1DLEdBQ0QsU0FBU0csa0JBQWtCQyxNQUFNLEVBQUVDLFFBQVE7SUFFMUMsSUFBSSxDQUFDRCxNQUFNLEdBQUdBO0lBQ2QsSUFBSSxDQUFDQyxRQUFRLEdBQUdBO0FBQ2pCO0FBRUE7Ozs7O0NBS0MsR0FDREYsa0JBQWtCRyxTQUFTLENBQUNDLFdBQVcsR0FBRyxTQUFTQyxPQUFPO0lBQ3pELHdEQUF3RDtJQUN4RCxJQUFJQyxnQkFBZ0IsSUFBSSxDQUFDTCxNQUFNLENBQUNNLE1BQU0sQ0FBQztRQUN0Q0MsU0FBU0g7SUFDVjtJQUVBLG1CQUFtQjtJQUNuQixJQUFJSSxhQUFhLElBQUliLFdBQVdVLGVBQWUsSUFBSSxDQUFDSixRQUFRO0lBQzVELE9BQU9ILFFBQVFXLFlBQVksQ0FBQ0MsQ0FBQUEsV0FBWUYsV0FBV0csT0FBTyxDQUFDRCxXQUN6REUsS0FBSyxDQUFDQyxDQUFBQSxNQUFPaEIsT0FBT2lCLGNBQWMsQ0FBQ0Q7QUFDdEM7QUFFQTs7Ozs7Q0FLQyxHQUNEZCxrQkFBa0JHLFNBQVMsQ0FBQ2Esb0JBQW9CLEdBQUcsU0FBU1gsT0FBTztJQUNsRSx3REFBd0Q7SUFDeEQsSUFBSUMsZ0JBQWdCLElBQUksQ0FBQ0wsTUFBTSxDQUFDTSxNQUFNLENBQUM7UUFDdENDLFNBQVNIO0lBQ1Y7SUFFQSxtQkFBbUI7SUFDbkIsSUFBSUksYUFBYSxJQUFJYixXQUFXVSxlQUFlLElBQUksQ0FBQ0osUUFBUTtJQUM1RE8sV0FBV0csT0FBTztJQUNsQixPQUFPSCxXQUFXUSxpQkFBaUI7QUFDcEM7QUFFQTs7O0NBR0MsR0FDREMsT0FBT0MsT0FBTyxHQUFHbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaXZpbC1lbmdpbmVlcmluZy1wbGF0Zm9ybS8uL25vZGVfbW9kdWxlcy9ib3gtbm9kZS1zZGsvbGliL2FwaS1yZXF1ZXN0LW1hbmFnZXIuanM/ZTAyNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgQSBsaWJyYXJ5IGZvciBtYWtpbmcgcmVxdWVzdHMgdG8gdGhlIEJveCBBUEkuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFJlcXVpcmVtZW50c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG52YXIgQVBJUmVxdWVzdCA9IHJlcXVpcmUoJy4vYXBpLXJlcXVlc3QnKSxcblx0ZXJyb3JzID0gcmVxdWlyZSgnLi91dGlsL2Vycm9ycycpLFxuXHRQcm9taXNlID0gcmVxdWlyZSgnYmx1ZWJpcmQnKTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBQcml2YXRlXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBQdWJsaWNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vKipcbiAqIEEgbGlicmFyeSBmb3IgY29tbXVuaWNhdGluZyB3aXRoIHRoZSBCb3ggQVBJLlxuICpcbiAqIEBwYXJhbSB7Q29uZmlnfSBjb25maWcgU0RLIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGluc3RhbmNlLlxuICogQHBhcmFtIHtFdmVudEVtaXR0ZXJ9IGV2ZW50QnVzIFRoZSBldmVudCBidXMgZm9yIFNESyBldmVudHNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBBUElSZXF1ZXN0TWFuYWdlcihjb25maWcsIGV2ZW50QnVzKSB7XG5cblx0dGhpcy5jb25maWcgPSBjb25maWc7XG5cdHRoaXMuZXZlbnRCdXMgPSBldmVudEJ1cztcbn1cblxuLyoqXG4gKiBNYWtlIGEgcmVxdWVzdCB0byB0aGUgQVBJLCBhbmQgZ2V0IHRoZSByZXNwb25zZSB2aWEgY2FsbGJhY2suXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgVGhlIHJlcXVlc3Qgb3B0aW9uc1xuICogQHJldHVybnMge1Byb21pc2U8UmVzcG9uc2U+fSBBIHByb21pc2UgcmVzb2x2aW5nIHRvIHRoZSByZXNwb25zZSBvYmplY3RcbiAqL1xuQVBJUmVxdWVzdE1hbmFnZXIucHJvdG90eXBlLm1ha2VSZXF1ZXN0ID0gZnVuY3Rpb24ob3B0aW9ucykge1xuXHQvLyBBZGQgZGVmYXVsdCBBUElSZXF1ZXN0TWFuYWdlciBvcHRpb25zIHRvIGVhY2ggcmVxdWVzdFxuXHR2YXIgcmVxdWVzdENvbmZpZyA9IHRoaXMuY29uZmlnLmV4dGVuZCh7XG5cdFx0cmVxdWVzdDogb3B0aW9uc1xuXHR9KTtcblxuXHQvLyBNYWtlIHRoZSByZXF1ZXN0XG5cdHZhciBhcGlSZXF1ZXN0ID0gbmV3IEFQSVJlcXVlc3QocmVxdWVzdENvbmZpZywgdGhpcy5ldmVudEJ1cyk7XG5cdHJldHVybiBQcm9taXNlLmZyb21DYWxsYmFjayhjYWxsYmFjayA9PiBhcGlSZXF1ZXN0LmV4ZWN1dGUoY2FsbGJhY2spKVxuXHRcdC5jYXRjaChlcnIgPT4gZXJyb3JzLnVud3JhcEFuZFRocm93KGVycikpO1xufTtcblxuLyoqXG4gKiBNYWtlIGEgcmVxdWVzdCB0byB0aGUgQVBJLCBhbmQgcmV0dXJuIGEgcmVhZCBzdHJlYW0gZm9yIHRoZSByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBUaGUgcmVxdWVzdCBvcHRpb25zXG4gKiBAcmV0dXJucyB7U3RyZWFtLlJlYWRhYmxlfSBUaGUgcmVzcG9uc2Ugc3RyZWFtXG4gKi9cbkFQSVJlcXVlc3RNYW5hZ2VyLnByb3RvdHlwZS5tYWtlU3RyZWFtaW5nUmVxdWVzdCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcblx0Ly8gQWRkIGRlZmF1bHQgQVBJUmVxdWVzdE1hbmFnZXIgb3B0aW9ucyB0byBlYWNoIHJlcXVlc3Rcblx0dmFyIHJlcXVlc3RDb25maWcgPSB0aGlzLmNvbmZpZy5leHRlbmQoe1xuXHRcdHJlcXVlc3Q6IG9wdGlvbnNcblx0fSk7XG5cblx0Ly8gTWFrZSB0aGUgcmVxdWVzdFxuXHR2YXIgYXBpUmVxdWVzdCA9IG5ldyBBUElSZXF1ZXN0KHJlcXVlc3RDb25maWcsIHRoaXMuZXZlbnRCdXMpO1xuXHRhcGlSZXF1ZXN0LmV4ZWN1dGUoKTtcblx0cmV0dXJuIGFwaVJlcXVlc3QuZ2V0UmVzcG9uc2VTdHJlYW0oKTtcbn07XG5cbi8qKlxuICogQG1vZHVsZSBib3gtbm9kZS1zZGsvbGliL2FwaS1yZXF1ZXN0LW1hbmFnZXJcbiAqIEBzZWUge0BMaW5rIEFQSVJlcXVlc3RNYW5hZ2VyfVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IEFQSVJlcXVlc3RNYW5hZ2VyO1xuIl0sIm5hbWVzIjpbIkFQSVJlcXVlc3QiLCJyZXF1aXJlIiwiZXJyb3JzIiwiUHJvbWlzZSIsIkFQSVJlcXVlc3RNYW5hZ2VyIiwiY29uZmlnIiwiZXZlbnRCdXMiLCJwcm90b3R5cGUiLCJtYWtlUmVxdWVzdCIsIm9wdGlvbnMiLCJyZXF1ZXN0Q29uZmlnIiwiZXh0ZW5kIiwicmVxdWVzdCIsImFwaVJlcXVlc3QiLCJmcm9tQ2FsbGJhY2siLCJjYWxsYmFjayIsImV4ZWN1dGUiLCJjYXRjaCIsImVyciIsInVud3JhcEFuZFRocm93IiwibWFrZVN0cmVhbWluZ1JlcXVlc3QiLCJnZXRSZXNwb25zZVN0cmVhbSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/box-node-sdk/lib/api-request-manager.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/box-node-sdk/lib/api-request.js":
/*!******************************************************!*\
  !*** ./node_modules/box-node-sdk/lib/api-request.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * @fileoverview A Box API Request\n */ // @NOTE(fschott) 08/05/2014: THIS FILE SHOULD NOT BE ACCESSED DIRECTLY OUTSIDE OF API-REQUEST-MANAGER\n// This module is used by APIRequestManager to make requests. If you'd like to make requests to the\n// Box API, consider using APIRequestManager instead. {@Link APIRequestManager}\n\n// ------------------------------------------------------------------------------\n// Requirements\n// ------------------------------------------------------------------------------\nvar assert = __webpack_require__(/*! assert */ \"assert\"), request = __webpack_require__(/*! request */ \"(rsc)/./node_modules/request/index.js\"), EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter), Config = __webpack_require__(/*! ./util/config */ \"(rsc)/./node_modules/box-node-sdk/lib/util/config.js\"), httpStatusCodes = __webpack_require__(/*! http-status */ \"(rsc)/./node_modules/http-status/lib/index.js\"), getRetryTimeout = __webpack_require__(/*! ./util/exponential-backoff */ \"(rsc)/./node_modules/box-node-sdk/lib/util/exponential-backoff.js\");\n// ------------------------------------------------------------------------------\n// Typedefs and Callbacks\n// ------------------------------------------------------------------------------\n/**\n * The API response object includes information about the request made and its response. The information attached is a subset\n * of the information returned by the request module, which is too large and complex to be safely handled (contains circular\n * references, errors on serialization, etc.)\n * @NOTE(fschott) 08-19-2014: We cannot return the request/response objects directly because they contain loads of extra\n *  information, unnecessary bloat, circular dependencies, and cause an infinite loop when stringifying.\n *\n * @typedef {Object} APIRequest~ResponseObject\n * @property {APIRequest~RequestObject} request Information about the request that generated this response\n * @property {int} statusCode The response HTTP status code\n * @property {Object} headers A collection of response headers\n * @property {Object|Buffer|string} [body] The response body. Encoded to JSON by default, but can be a buffer\n *  (if encoding fails or if json encoding is disabled) or a string (if string encoding is enabled). Will be undefined\n *  if no response body is sent.\n */ /**\n * The API request object includes information about the request made. The information attached is a subset of the information\n * of a request module instance, which is too large and complex to be safely handled (contains circular references, errors on\n * serialization, etc.).\n * @NOTE(fschott) 08-19-2014: We cannot return the request/response objects directly because they contain loads of extra\n *  information, unnecessary bloat, circular dependencies, and cause an infinite loop when stringifying.\n *\n * @typedef {Object} APIRequest~RequestObject\n * @property {Object} uri Information about the request, including host, path, and the full 'href' url\n * @property {string} method The request method (GET, POST, etc.)\n * @property {Object} headers A collection of headers sent with the request\n */ /**\n * The error returned by APIRequest callbacks, which includes any relevent, available information about the request\n * and response. Note that these properties do not exist on stream errors, only errors retuned to the callback.\n *\n * @typedef {Error} APIRequest~Error\n * @property {APIRequest~RequestObject} request Information about the request that generated this error\n * @property {APIRequest~ResponseObject} [response] Information about the response related to this error, if available\n * @property {int} [statusCode] The response HTTP status code\n * @property {boolean} [maxRetriesExceeded] True iff the max number of retries were exceeded. Otherwise, undefined.\n */ /**\n * Callback invoked when an APIRequest request is complete and finalized. On success,\n * propagates the relevent response information. An err will indicate an unresolvable issue\n * with the request (permanent failure or temp error response from the server, retried too many times).\n *\n * @callback APIRequest~Callback\n * @param {?APIRequest~Error} err If Error object, API request did not get back the data it was supposed to. This\n *  could be either because of a temporary error, or a more serious error connecting to the API.\n * @param {APIRequest~ResponseObject} response The response returned by an APIRequestManager request\n */ // ------------------------------------------------------------------------------\n// Private\n// ------------------------------------------------------------------------------\n// Message to replace removed headers with in the request\nvar REMOVED_HEADER_MESSAGE = \"[REMOVED BY SDK]\";\n// Range of SERVER ERROR http status codes\nvar HTTP_STATUS_CODE_SERVER_ERROR_BLOCK_RANGE = [\n    500,\n    599\n];\n// Timer used to track elapsed time beginning from executing an async request to emitting the response.\nvar asyncRequestTimer;\n// A map of HTTP status codes and whether or not they can be retried\nvar retryableStatusCodes = {};\nretryableStatusCodes[httpStatusCodes.REQUEST_TIMEOUT] = true;\nretryableStatusCodes[httpStatusCodes.TOO_MANY_REQUESTS] = true;\n/**\n * Returns true if the response info indicates a temporary/transient error.\n *\n * @param {?APIRequest~ResponseObject} response The response info from an API request,\n * or undefined if the API request did not return any response info.\n * @returns {boolean} True if the API call error is temporary (and hence can\n * be retried). False otherwise.\n * @private\n */ function isTemporaryError(response) {\n    var statusCode = response.statusCode;\n    // An API error is a temporary/transient if it returns a 5xx HTTP Status, with the exception of the 507 status.\n    // The API returns a 507 error when the user has run out of account space, in which case, it should be treated\n    // as a permanent, non-retryable error.\n    if (statusCode !== httpStatusCodes.INSUFFICIENT_STORAGE && statusCode >= HTTP_STATUS_CODE_SERVER_ERROR_BLOCK_RANGE[0] && statusCode <= HTTP_STATUS_CODE_SERVER_ERROR_BLOCK_RANGE[1]) {\n        return true;\n    }\n    // An API error is a temporary/transient error if it returns a HTTP Status that indicates it is a temporary,\n    if (retryableStatusCodes[statusCode]) {\n        return true;\n    }\n    return false;\n}\n/**\n * Determine whether a given request can be retried, based on its options\n * @param {Object} options The request options\n * @returns {boolean} Whether or not the request is retryable\n * @private\n */ function isRequestRetryable(options) {\n    return !options.formData;\n}\n/**\n * Clean sensitive headers from the request object. This prevents this data from\n * propagating out to the SDK and getting unintentionally logged via the error or\n * response objects. Note that this function modifies the given object and returns\n * nothing.\n *\n * @param {APIRequest~RequestObject} requestObj Any request object\n * @returns {void}\n * @private\n */ function cleanSensitiveHeaders(requestObj) {\n    if (requestObj.headers) {\n        if (requestObj.headers.BoxApi) {\n            requestObj.headers.BoxApi = REMOVED_HEADER_MESSAGE;\n        }\n        if (requestObj.headers.Authorization) {\n            requestObj.headers.Authorization = REMOVED_HEADER_MESSAGE;\n        }\n    }\n}\n// ------------------------------------------------------------------------------\n// Public\n// ------------------------------------------------------------------------------\n/**\n * APIRequest helps to prepare and execute requests to the Box API. It supports\n * retries, multipart uploads, and more.\n *\n\n * @param {Config} config Request-specific Config object\n * @param {EventEmitter} eventBus Event bus for the SDK instance\n * @constructor\n */ function APIRequest(config, eventBus) {\n    assert(config instanceof Config, \"Config must be passed to APIRequest constructor\");\n    assert(eventBus instanceof EventEmitter, \"Valid event bus must be passed to APIRequest constructor\");\n    this.config = config;\n    this.eventBus = eventBus;\n    this.isRetryable = isRequestRetryable(config.request);\n}\n/**\n * Executes the request with the given options. If a callback is provided, we'll\n * handle the response via callbacks. Otherwise, the response will be streamed to\n * via the stream property. You can access this stream with the getResponseStream()\n * method.\n *\n * @param {APIRequest~Callback} [callback] Callback for handling the response\n * @returns {void}\n */ APIRequest.prototype.execute = function(callback) {\n    this._callback = callback || this._callback;\n    // Initiate an async- or stream-based request, based on the presence of the callback.\n    if (this._callback) {\n        // Start the request timer immediately before executing the async request\n        if (!asyncRequestTimer) {\n            asyncRequestTimer = process.hrtime();\n        }\n        this.request = request(this.config.request, this._handleResponse.bind(this));\n    } else {\n        this.request = request(this.config.request);\n        this.stream = this.request;\n        this.stream.on(\"error\", (err)=>this.eventBus.emit(\"response\", err));\n        this.stream.on(\"response\", (response)=>this.eventBus.emit(\"response\", null, response));\n    }\n};\n/**\n * Return the response read stream for a request. This will be undefined until\n * a stream-based request has been started.\n *\n * @returns {?ReadableStream} The response stream\n */ APIRequest.prototype.getResponseStream = function() {\n    return this.stream;\n};\n/**\n * Handle the request response in the callback case.\n *\n * @param {?Error} err An error, if one occurred\n * @param {Object} [response] The full response object, returned by the request module.\n *  Contains information about the request & response, including the response body itself.\n * @returns {void}\n * @private\n */ APIRequest.prototype._handleResponse = function(err, response) {\n    // Clean sensitive headers here to prevent the user from accidentily using/logging them in prod\n    cleanSensitiveHeaders(this.request);\n    // If the API connected successfully but responded with a temporary error (like a 5xx code,\n    // a rate limited response, etc.) then this is considered an error as well.\n    if (!err && isTemporaryError(response)) {\n        var errorMessage = `${response.statusCode} - ${httpStatusCodes[response.statusCode]}`;\n        err = new Error(errorMessage);\n    }\n    if (err) {\n        // Attach request & response information to the error object\n        err.request = this.request;\n        if (response) {\n            err.response = response;\n            err.statusCode = response.statusCode;\n        }\n        // Have the SDK emit the error response\n        this.eventBus.emit(\"response\", err);\n        var isJWT = false;\n        if (this.config.request.hasOwnProperty(\"form\") && this.config.request.form.hasOwnProperty(\"grant_type\") && this.config.request.form.grant_type === \"urn:ietf:params:oauth:grant-type:jwt-bearer\") {\n            isJWT = true;\n        }\n        // If our APIRequest instance is retryable, attempt a retry. Otherwise, finish and propagate the error. Doesn't retry when the request is for JWT authentication, since that is handled in retryJWTGrant.\n        if (this.isRetryable && !isJWT) {\n            this._retry(err);\n        } else {\n            this._finish(err);\n        }\n        return;\n    }\n    // If the request was successful, emit & propagate the response!\n    this.eventBus.emit(\"response\", null, response);\n    this._finish(null, response);\n};\n/**\n * Attempt a retry. If the request hasn't exceeded it's maximum number of retries,\n * re-execute the request (after the retry interval). Otherwise, propagate a new error.\n *\n * @param {?Error} err An error, if one occurred\n * @returns {void}\n * @private\n */ APIRequest.prototype._retry = function(err) {\n    this.numRetries = this.numRetries || 0;\n    if (this.numRetries < this.config.numMaxRetries) {\n        var retryTimeout;\n        this.numRetries += 1;\n        // If the retry strategy is defined, then use it to determine the time (in ms) until the next retry or to\n        // propagate an error to the user.\n        if (this.config.retryStrategy) {\n            // Get the total elapsed time so far since the request was executed\n            var totalElapsedTime = process.hrtime(asyncRequestTimer);\n            var totalElapsedTimeMS = totalElapsedTime[0] * 1000 + totalElapsedTime[1] / 1000000;\n            var retryOptions = {\n                error: err,\n                numRetryAttempts: this.numRetries,\n                numMaxRetries: this.config.numMaxRetries,\n                retryIntervalMS: this.config.retryIntervalMS,\n                totalElapsedTimeMS\n            };\n            retryTimeout = this.config.retryStrategy(retryOptions);\n            // If the retry strategy doesn't return a number/time in ms, then propagate the response error to the user.\n            // However, if the retry strategy returns its own error, this will be propagated to the user instead.\n            if (typeof retryTimeout !== \"number\") {\n                if (retryTimeout instanceof Error) {\n                    err = retryTimeout;\n                }\n                this._finish(err);\n                return;\n            }\n        } else if (err.hasOwnProperty(\"response\") && err.response.hasOwnProperty(\"headers\") && err.response.headers.hasOwnProperty(\"retry-after\")) {\n            retryTimeout = err.response.headers[\"retry-after\"] * 1000;\n        } else {\n            retryTimeout = getRetryTimeout(this.numRetries, this.config.retryIntervalMS);\n        }\n        setTimeout(this.execute.bind(this), retryTimeout);\n    } else {\n        err.maxRetriesExceeded = true;\n        this._finish(err);\n    }\n};\n/**\n * Propagate the response to the provided callback.\n *\n * @param {?Error} err An error, if one occurred\n * @param {APIRequest~ResponseObject} response Information about the request & response\n * @returns {void}\n * @private\n */ APIRequest.prototype._finish = function(err, response) {\n    var callback = this._callback;\n    process.nextTick(()=>{\n        if (err) {\n            callback(err);\n            return;\n        }\n        callback(null, response);\n    });\n};\n/**\n * @module box-node-sdk/lib/api-request\n * @see {@Link APIRequest}\n */ module.exports = APIRequest;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/box-node-sdk/lib/api-request.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/box-node-sdk/lib/box-client.js":
/*!*****************************************************!*\
  !*** ./node_modules/box-node-sdk/lib/box-client.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * @fileoverview Box API Client\n */ \n// ------------------------------------------------------------------------------\n// Typedefs and Callbacks\n// ------------------------------------------------------------------------------\n/**\n * A collaboration role constant\n * @typedef {string} CollaborationRole\n */ /**\n* A Box file or folder type constant\n* @typedef {string} ItemType\n*/ /**\n * An access level constant. Used for setting and updating shared links, folder upload, etc.\n * @typedef {?Object} AccessLevel\n */ // ------------------------------------------------------------------------------\n// Requirements\n// ------------------------------------------------------------------------------\nvar util = __webpack_require__(/*! util */ \"util\"), qs = __webpack_require__(/*! querystring */ \"querystring\"), errors = __webpack_require__(/*! ./util/errors */ \"(rsc)/./node_modules/box-node-sdk/lib/util/errors.js\"), httpStatusCodes = __webpack_require__(/*! http-status */ \"(rsc)/./node_modules/http-status/lib/index.js\"), isIP = (__webpack_require__(/*! net */ \"net\").isIP), merge = __webpack_require__(/*! merge-options */ \"(rsc)/./node_modules/merge-options/index.js\"), PagingIterator = __webpack_require__(/*! ./util/paging-iterator */ \"(rsc)/./node_modules/box-node-sdk/lib/util/paging-iterator.js\"), Promise = __webpack_require__(/*! bluebird */ \"(rsc)/./node_modules/bluebird/js/release/bluebird.js\"), pkg = __webpack_require__(/*! ../package.json */ \"(rsc)/./node_modules/box-node-sdk/package.json\");\n// API Resource Managers\nvar Users = __webpack_require__(/*! ./managers/users */ \"(rsc)/./node_modules/box-node-sdk/lib/managers/users.js\"), Files = __webpack_require__(/*! ./managers/files */ \"(rsc)/./node_modules/box-node-sdk/lib/managers/files.js\"), Folders = __webpack_require__(/*! ./managers/folders */ \"(rsc)/./node_modules/box-node-sdk/lib/managers/folders.js\"), Collaborations = __webpack_require__(/*! ./managers/collaborations */ \"(rsc)/./node_modules/box-node-sdk/lib/managers/collaborations.js\"), Groups = __webpack_require__(/*! ./managers/groups */ \"(rsc)/./node_modules/box-node-sdk/lib/managers/groups.js\"), Comments = __webpack_require__(/*! ./managers/comments */ \"(rsc)/./node_modules/box-node-sdk/lib/managers/comments.js\"), SharedItems = __webpack_require__(/*! ./managers/shared-items */ \"(rsc)/./node_modules/box-node-sdk/lib/managers/shared-items.js\"), Metadata = __webpack_require__(/*! ./managers/metadata */ \"(rsc)/./node_modules/box-node-sdk/lib/managers/metadata.js\"), Collections = __webpack_require__(/*! ./managers/collections */ \"(rsc)/./node_modules/box-node-sdk/lib/managers/collections.js\"), Events = __webpack_require__(/*! ./managers/events */ \"(rsc)/./node_modules/box-node-sdk/lib/managers/events.js\"), Search = __webpack_require__(/*! ./managers/search */ \"(rsc)/./node_modules/box-node-sdk/lib/managers/search.js\"), Tasks = __webpack_require__(/*! ./managers/tasks */ \"(rsc)/./node_modules/box-node-sdk/lib/managers/tasks.js\"), Trash = __webpack_require__(/*! ./managers/trash */ \"(rsc)/./node_modules/box-node-sdk/lib/managers/trash.js\"), Enterprise = __webpack_require__(/*! ./managers/enterprise */ \"(rsc)/./node_modules/box-node-sdk/lib/managers/enterprise.js\"), LegalHoldPolicies = __webpack_require__(/*! ./managers/legal-hold-policies */ \"(rsc)/./node_modules/box-node-sdk/lib/managers/legal-hold-policies.js\"), WebLinks = __webpack_require__(/*! ./managers/web-links */ \"(rsc)/./node_modules/box-node-sdk/lib/managers/web-links.js\"), RetentionPolicies = __webpack_require__(/*! ./managers/retention-policies */ \"(rsc)/./node_modules/box-node-sdk/lib/managers/retention-policies.js\"), DevicePins = __webpack_require__(/*! ./managers/device-pins */ \"(rsc)/./node_modules/box-node-sdk/lib/managers/device-pins.js\"), Webhooks = __webpack_require__(/*! ./managers/webhooks */ \"(rsc)/./node_modules/box-node-sdk/lib/managers/webhooks.js\"), RecentItems = __webpack_require__(/*! ./managers/recent-items */ \"(rsc)/./node_modules/box-node-sdk/lib/managers/recent-items.js\"), CollaborationWhitelist = __webpack_require__(/*! ./managers/collaboration-whitelist */ \"(rsc)/./node_modules/box-node-sdk/lib/managers/collaboration-whitelist.js\"), TermsOfService = __webpack_require__(/*! ./managers/terms-of-service */ \"(rsc)/./node_modules/box-node-sdk/lib/managers/terms-of-service.js\"), StoragePolicies = __webpack_require__(/*! ./managers/storage-policies */ \"(rsc)/./node_modules/box-node-sdk/lib/managers/storage-policies.js\");\n// ------------------------------------------------------------------------------\n// Private\n// ------------------------------------------------------------------------------\n// The Authorization header label\nvar HEADER_AUTHORIZATION = \"Authorization\", // Prefix our token with this string in the Authorization header\nHEADER_AUTHORIZATION_PREFIX = \"Bearer \", // The 'BoxApi' header label\nHEADER_BOXAPI = \"BoxApi\", // The XFF header label - Used to give the API better information for uploads, rate-limiting, etc.\nHEADER_XFF = \"X-Forwarded-For\", // As-User header\nHEADER_AS_USER = \"As-User\", // Range of SUCCESS http status codes\nHTTP_STATUS_CODE_SUCCESS_BLOCK_RANGE = [\n    200,\n    299\n];\n/**\n * Build the 'Authorization' Header for the API\n *\n * @param {string} accessToken An OAuth Access Token\n * @returns {string} A properly formatted 'Authorization' header\n * @private\n */ function buildAuthorizationHeader(accessToken) {\n    return HEADER_AUTHORIZATION_PREFIX + accessToken;\n}\n/**\n * Returns true iff the response is a 401 UNAUTHORIZED that is caused by an expired access token.\n * @param {APIRequest~ResponseObject} response - The response returned by an APIRequestManager request\n * @returns {boolean} - true iff the response is a 401 UNAUTHORIZED caused by an expired access token\n * @private\n */ function isUnauthorizedDueToExpiredAccessToken(response) {\n    // There are three cases to consider:\n    // 1) The response body is a Buffer. This indicates that the request was malformed (i.e. malformed url) so return false.\n    // 2) The status code is UNAUTHORIZED and the response body is an empty object or null. This indicates that the access tokens are expired, so return true.\n    // 3) The status code is UNAUTHORIZED and the response body is a non-empty object. This indicates that the 401 was returned for some reason other\n    //    than expired tokens, so return false.\n    if (Buffer.isBuffer(response.body)) {\n        return false;\n    }\n    var isResponseStatusCodeUnauthorized = response.statusCode === httpStatusCodes.UNAUTHORIZED, isResponseBodyEmpty = !response.body || Object.getOwnPropertyNames(response.body).length === 0;\n    return isResponseStatusCodeUnauthorized && isResponseBodyEmpty;\n}\n/**\n * Returns a full URL. If the url argument begins with http:// or https://, then url is simply returned.\n * Otherwise, the defaultBasePath is prepended to url and returned.\n *\n * @param {string} defaultBasePath The default root URL that will be prepended if `url` is a partial url\n * @param {string} url A full or partial URL that will be used to construct the final URL\n * @returns {string} The final URL\n * @private\n */ function getFullURL(defaultBasePath, url) {\n    if (/^https?:\\/\\//.test(url)) {\n        return url;\n    }\n    return defaultBasePath + url;\n}\n/**\n * Create a valid request object for the Batch API from a standard request\n * params object\n * @param {Object} params The request params\n * @returns {Object} The batch API request object\n * @private\n */ function formatRequestForBatch(params) {\n    var relativePath = params.url.replace(/^http.*?\\/\\d\\.\\d\\//, \"/\");\n    return {\n        method: params.method,\n        relative_url: relativePath + (params.qs ? `?${qs.stringify(params.qs)}` : \"\"),\n        body: params.body,\n        headers: params.headers\n    };\n}\n/**\n * Format a Batch API response object into a standard request response\n * for use in response handling\n * @param {Object} response The batch API response object\n * @returns {Object} The standard response object\n * @private\n */ function formatResponseForBatch(response) {\n    return {\n        statusCode: response.status,\n        headers: response.headers,\n        body: response.response\n    };\n}\n/**\n * Construct the X-Box-UA header to send analytics identifiers\n * @param {Object} [client] Analytics client information\n * @returns {string} The header value\n */ function constructBoxUAHeader(client) {\n    var analyticsIdentifiers = {\n        agent: `box-node-sdk/${pkg.version}`,\n        env: `Node/${process.version.replace(\"v\", \"\")}`\n    };\n    if (client) {\n        analyticsIdentifiers.client = `${client.name}/${client.version}`;\n    }\n    return Object.keys(analyticsIdentifiers).map((k)=>`${k}=${analyticsIdentifiers[k]}`).join(\"; \");\n}\n/**\n * The BoxClient can make API calls on behalf of a valid API Session. It is responsible\n * for formatting the requests and handling the response. Its goal is to deliver\n * sensible results to the user.\n *\n * @param {APISession} apiSession An initialized API Session, used to get/revoke tokens and handle\n * unauthorized responses from the API.\n * @param {Config} config The SDK configuration options\n * @param {APIRequestManager} requestManager The API Request Manager\n * @constructor\n */ function BoxClient(apiSession, config, requestManager) {\n    // the API Session used by the client for authentication\n    this._session = apiSession;\n    // Attach a request manager instance for making requests\n    this._requestManager = requestManager;\n    // An object of custom headers to apply to every request. Modified via BoxClient.setCustomHeader().\n    this._customHeaders = {};\n    // Attach the configured properties\n    this._baseURL = util.format(\"%s/%s\", config.apiRootURL, config.apiVersion);\n    this._uploadBaseURL = util.format(\"%s/%s\", config.uploadAPIRootURL, config.apiVersion);\n    this._uploadRequestTimeoutMS = config.uploadRequestTimeoutMS;\n    this._useIterators = config.iterators;\n    this._analyticsClient = config.analyticsClient;\n    // Attach API Resource Managers\n    this.users = new Users(this);\n    this.files = new Files(this);\n    this.folders = new Folders(this);\n    this.comments = new Comments(this);\n    this.collaborations = new Collaborations(this);\n    this.groups = new Groups(this);\n    this.sharedItems = new SharedItems(this);\n    this.metadata = new Metadata(this);\n    this.collections = new Collections(this);\n    this.events = new Events(this);\n    this.search = new Search(this);\n    this.tasks = new Tasks(this);\n    this.trash = new Trash(this);\n    this.enterprise = new Enterprise(this);\n    this.legalHoldPolicies = new LegalHoldPolicies(this);\n    this.weblinks = new WebLinks(this);\n    this.retentionPolicies = new RetentionPolicies(this);\n    this.devicePins = new DevicePins(this);\n    this.webhooks = new Webhooks(this);\n    this.recentItems = new RecentItems(this);\n    this.collaborationWhitelist = new CollaborationWhitelist(this);\n    this.termsOfService = new TermsOfService(this);\n    this.storagePolicies = new StoragePolicies(this);\n    // Array of requests when in batch mode, null otherwise\n    this._batch = null;\n}\n/**\n * Returns an object containing the given headers as well as other headers (like the authorization header and\n * custom headers) that should be included in a request.\n * @param {?Object} callerHeaders - headers that the caller wishes to include in the request. This method will not\n * override these headers with its own. Thus, if all the headers that this method was planning to add are already\n * specified here, this method will return an object with exactly the same headers.\n * @param {string} accessToken - the access token that will be used to make the request\n * @returns {Object} - a new object with the headers needed for the request\n * @private\n */ BoxClient.prototype._createHeadersForRequest = function(callerHeaders, accessToken) {\n    var headers = {};\n    // 'Authorization' - contains your valid access token for authorization\n    headers[HEADER_AUTHORIZATION] = buildAuthorizationHeader(accessToken);\n    // We copy our own custom headers (XFF, BoxApi, etc.) before copying over the caller-specified headers so that\n    // the caller-specified headers will take precedence.\n    Object.assign(headers, this._customHeaders, callerHeaders);\n    // Add analytics headers last so they cannot be overwritten\n    Object.assign(headers, {\n        \"X-Box-UA\": constructBoxUAHeader(this._analyticsClient)\n    });\n    return headers;\n};\n/**\n * Makes an API request to the Box API on behalf of the client. Before executing\n * the request, it first ensures the user has usable tokens. Will be called again\n * if the request returns a temporary error. Will propogate error if request returns\n * a permanent error, or if usable tokens are not available.\n *\n * @param {Object} params - Request lib params to configure the request\n * @param {APIRequest~Callback} [callback] - passed response data\n * @returns {Promise} Promise resolving to the response\n * @private\n */ BoxClient.prototype._makeRequest = function(params, callback) {\n    var promise;\n    if (this._batch) {\n        // eslint-disable-next-line promise/avoid-new\n        promise = new Promise((resolve, reject)=>{\n            this._batch.push({\n                params,\n                resolve,\n                reject\n            });\n        });\n    } else {\n        // Check that tokens are fresh, update if tokens are expired or soon-to-be expired\n        promise = this._session.getAccessToken(this._tokenOptions).then((accessToken)=>{\n            params.headers = this._createHeadersForRequest(params.headers, accessToken);\n            if (params.streaming) {\n                // streaming is specific to the SDK, so delete it from params before continuing\n                delete params.streaming;\n                var responseStream = this._requestManager.makeStreamingRequest(params);\n                // Listen to 'response' event, so we can cleanup the token store in case when the request is unauthorized\n                // due to expired access token\n                responseStream.on(\"response\", (response)=>{\n                    if (isUnauthorizedDueToExpiredAccessToken(response)) {\n                        var expiredTokensError = errors.buildAuthError(response);\n                        // Give the session a chance to handle the error (ex: a persistent session will clear the token store)\n                        if (this._session.handleExpiredTokensError) {\n                            this._session.handleExpiredTokensError(expiredTokensError);\n                        }\n                    }\n                });\n                return responseStream;\n            }\n            // Make the request to Box, and perform standard response handling\n            return this._requestManager.makeRequest(params);\n        });\n    }\n    return promise.then((response)=>{\n        if (!response.statusCode) {\n            // Response is not yet complete, and is just a stream that will return the response later\n            // Just return the stream, since it doesn't need further response handling\n            return response;\n        }\n        if (isUnauthorizedDueToExpiredAccessToken(response)) {\n            var expiredTokensError = errors.buildAuthError(response);\n            // Give the session a chance to handle the error (ex: a persistent session will clear the token store)\n            if (this._session.handleExpiredTokensError) {\n                return this._session.handleExpiredTokensError(expiredTokensError);\n            }\n            throw expiredTokensError;\n        }\n        return response;\n    }).asCallback(callback);\n};\n// ------------------------------------------------------------------------------\n// Public\n// ------------------------------------------------------------------------------\n/**\n * Enum of valid collaboration roles\n *\n * @readonly\n * @enum {CollaborationRole}\n */ BoxClient.prototype.collaborationRoles = {\n    EDITOR: \"editor\",\n    VIEWER: \"viewer\",\n    PREVIEWER: \"previewer\",\n    UPLOADER: \"uploader\",\n    PREVIEWER_UPLOADER: \"previewer uploader\",\n    VIEWER_UPLOADER: \"viewer uploader\",\n    CO_OWNER: \"co-owner\",\n    OWNER: \"owner\"\n};\n/**\n * Enum of Box item types\n *\n * @readonly\n * @enum {ItemType}\n */ BoxClient.prototype.itemTypes = {\n    FILE: \"file\",\n    FOLDER: \"folder\"\n};\n/**\n * Enum of valid values for setting different access levels. To be used when\n * creating and editting shared links, upload emails, etc.\n *\n * @readonly\n * @type {AccessLevel}\n */ BoxClient.prototype.accessLevels = {\n    OPEN: {\n        access: \"open\"\n    },\n    COLLABORATORS: {\n        access: \"collaborators\"\n    },\n    COMPANY: {\n        access: \"company\"\n    },\n    DEFAULT: {},\n    DISABLED: null\n};\n/** @const {string} */ BoxClient.prototype.CURRENT_USER_ID = Users.prototype.CURRENT_USER_ID;\n/**\n * Set a custom header. A custom header is applied to every request for the life of the client. To\n * remove a header, set it's value to null.\n *\n * @param {string} header The name of the custom header to set.\n * @param {*} value The value of the custom header. Set to null to remove the given header.\n * @returns {void}\n */ BoxClient.prototype.setCustomHeader = function(header, value) {\n    if (value) {\n        this._customHeaders[header] = value;\n    } else {\n        delete this._customHeaders[header];\n    }\n};\n/**\n * Sets the list of requesting IP addresses for the X-Forwarded-For header. Used to give the API\n * better information for uploads, rate-limiting, etc.\n *\n * @param {string[]} ips - Array of IP Addresses\n * @returns {void}\n */ BoxClient.prototype.setIPs = function(ips) {\n    var validIPs = ips.filter((ipString)=>isIP(ipString)).join(\", \");\n    this.setCustomHeader(HEADER_XFF, validIPs);\n    this._tokenOptions = {\n        ip: validIPs\n    };\n};\n/**\n * Sets the shared item context on the API Session. Overwrites any current context.\n *\n * @param {string} url The shared link url\n * @param {?string} password The shared link password, null if no password exists.\n * @returns {void}\n */ BoxClient.prototype.setSharedContext = function(url, password) {\n    var sharedContextAuthHeader = this.buildSharedItemAuthHeader(url, password);\n    this.setCustomHeader(HEADER_BOXAPI, sharedContextAuthHeader);\n};\n/**\n * Removes any current shared item context from API Session.\n *\n * @returns {void}\n */ BoxClient.prototype.revokeSharedContext = function() {\n    this.setCustomHeader(HEADER_BOXAPI, null);\n};\n/**\n * Set up the As-User context, which is used by enterprise admins to\n * impersonate their managed users and perform actions on their behalf.\n *\n * @param {string} userID - The ID of the user to impersonate\n * @returns {void}\n */ BoxClient.prototype.asUser = function(userID) {\n    this.setCustomHeader(HEADER_AS_USER, userID);\n};\n/**\n * Revoke the As-User context and return to making calls on behalf of the user\n * who owns the client's access token.\n *\n * @returns {void}\n */ BoxClient.prototype.asSelf = function() {\n    this.setCustomHeader(HEADER_AS_USER, null);\n};\n/**\n * Revokes the client's access tokens. The client will no longer be tied to a user\n * and will be unable to make calls to the API, rendering it effectively useless.\n *\n * @param {Function} [callback] Called after revoking, with an error if one existed\n * @returns {Promise} A promise resolving when the client's access token is revoked\n */ BoxClient.prototype.revokeTokens = function(callback) {\n    return this._session.revokeTokens(this._tokenOptions).asCallback(callback);\n};\n/**\n * Exchange the client access token for one with lower scope\n * @param {string|string[]} scopes The scope(s) requested for the new token\n * @param {string} [resource] The absolute URL of an API resource to scope the new token to\n * @param {Object} [options] - Optional parameters\n * @param {ActorParams} [options.actor] - Optional actor parameters for creating annotator tokens with Token Auth client\n * @param {SharedLinkParams} [options.sharedLink] - Optional shared link parameters for creating tokens using shared links\n * @param {Function} [callback] Called with the new token\n * @returns {Promise<TokenInfo>} A promise resolving to the exchanged token info\n */ BoxClient.prototype.exchangeToken = function(scopes, resource, options, callback) {\n    // Shuffle optional parameters\n    if (typeof options === \"function\") {\n        callback = options;\n        options = {};\n    }\n    var opts = Object.assign({\n        tokenRequestOptions: this._tokenOptions || null\n    }, options);\n    return this._session.exchangeToken(scopes, resource, opts).asCallback(callback);\n};\n/**\n * Makes GET request to Box API V2 endpoint\n *\n * @param {string} path - path to a certain API endpoint (ex: /file)\n * @param {?Object} params - object containing parameters for the request, such as query strings and headers\n * @param {APIRequest~Callback} callback - passed final API response or err if request failed\n * @returns {void}\n */ BoxClient.prototype.get = function(path, params, callback) {\n    var newParams = merge({}, params || {});\n    newParams.method = \"GET\";\n    newParams.url = getFullURL(this._baseURL, path);\n    return this._makeRequest(newParams, callback);\n};\n/**\n * Makes POST request to Box API V2 endpoint\n *\n * @param {string} path - path to a certain API endpoint (ex: /file)\n * @param {?Object} params - object containing parameters for the request, such as query strings and headers\n * @param {APIRequest~Callback} callback - passed final API response or err if request failed\n * @returns {void}\n */ BoxClient.prototype.post = function(path, params, callback) {\n    var newParams = merge({}, params || {});\n    newParams.method = \"POST\";\n    newParams.url = getFullURL(this._baseURL, path);\n    return this._makeRequest(newParams, callback);\n};\n/**\n * Makes PUT request to Box API V2 endpoint\n *\n * @param {string} path - path to a certain API endpoint (ex: /file)\n * @param {?Object} params - object containing parameters for the request, such as query strings and headers\n * @param {APIRequest~Callback} callback - passed final API response or err if request failed\n * @returns {void}\n */ BoxClient.prototype.put = function(path, params, callback) {\n    var newParams = merge({}, params || {});\n    newParams.method = \"PUT\";\n    newParams.url = getFullURL(this._baseURL, path);\n    return this._makeRequest(newParams, callback);\n};\n/**\n * Makes DELETE request to Box API V2 endpoint\n *\n * @param {string} path - path to a certain API endpoint (ex: /file)\n * @param {?Object} params - object containing parameters for the request, such as query strings and headers\n * @param {APIRequest~Callback} callback - passed final API response or err if request failed\n * @returns {void}\n */ BoxClient.prototype.del = function(path, params, callback) {\n    var newParams = merge({}, params || {});\n    newParams.method = \"DELETE\";\n    newParams.url = getFullURL(this._baseURL, path);\n    return this._makeRequest(newParams, callback);\n};\n/**\n * Makes an OPTIONS call to a Box API V2 endpoint\n *\n * @param {string} path - Path to an API endpoint (e.g. /files/content)\n * @param {?Object} params - An optional object containing request parameters\n * @param {APIRequest~Callback} callback - Called with API call results, or err if call failed\n * @returns {void}\n */ BoxClient.prototype.options = function(path, params, callback) {\n    var newParams = merge({}, params || {});\n    newParams.method = \"OPTIONS\";\n    newParams.url = getFullURL(this._baseURL, path);\n    return this._makeRequest(newParams, callback);\n};\n/**\n * Makes a POST call to a Box API V2 upload endpoint\n * @param {string} path - path to an upload API endpoint\n * @param {?Object} params - an optional object containing request parameters\n * @param {?Object} formData - multipart form data to include in the upload request {@see https://github.com/mikeal/request#multipartform-data-multipart-form-uploads}\n * @param {APIRequest~Callback} callback - called with API call results, or an error if the call failed\n * @returns {void}\n */ BoxClient.prototype.upload = function(path, params, formData, callback) {\n    var defaults = {\n        method: \"POST\"\n    };\n    var newParams = merge(defaults, params || {});\n    newParams.url = getFullURL(this._uploadBaseURL, path);\n    newParams.formData = formData;\n    newParams.timeout = this._uploadRequestTimeoutMS;\n    return this._makeRequest(newParams, callback);\n};\n/**\n * Puts the client into batch mode, which will queue calls instead of\n * immediately making the API request.\n *\n * DEPRECATED: Batch API is not supported and should not be used; make calls in parallel instead.\n *\n * @returns {BoxClient} Current client object\n */ BoxClient.prototype.batch = util.deprecate(function() {\n    /* eslint-disable no-invalid-this */ this._batch = [];\n    return this;\n/* eslint-enable no-invalid-this */ }, \"Batch API is not supported and should not be used; make calls in parallel instead.\");\n/**\n * Executes a batch of requests.\n *\n * DEPRECATED: Batch API is not supported and should not be used; make calls in parallel instead.\n *\n * @returns {Promise<Object>} Promise resolving to the collection of batch responses\n */ BoxClient.prototype.batchExec = util.deprecate(function(callback) {\n    /* eslint-disable no-invalid-this */ if (!this._batch) {\n        return Promise.reject(new Error(\"Must start a batch before executing\")).asCallback(callback);\n    }\n    var params = {\n        body: {\n            requests: this._batch.map((batchReq)=>formatRequestForBatch(batchReq.params))\n        }\n    };\n    var batch = this._batch;\n    this._batch = null;\n    return this.post(\"/batch\", params).then((res)=>{\n        var responses = res.body.responses;\n        responses.map((x)=>formatResponseForBatch(x)).forEach((response, index)=>{\n            batch[index].resolve(response);\n        });\n        return res.body;\n    }).catch((err)=>{\n        batch.forEach((req)=>req.reject(err));\n        throw err;\n    }).asCallback(callback);\n/* eslint-enable no-invalid-this */ }, \"Batch API is not supported and should not be used; make calls in parallel instead.\");\n/**\n * Build the 'BoxApi' Header used for authenticating access to a shared item\n *\n * @param {string} url The shared link url\n * @param {string} [password] The shared link password\n * @returns {string} A properly formatted 'BoxApi' header\n */ BoxClient.prototype.buildSharedItemAuthHeader = function(url, password) {\n    var encodedURL = encodeURIComponent(url), encodedPassword = encodeURIComponent(password);\n    if (password) {\n        return util.format(\"shared_link=%s&shared_link_password=%s\", encodedURL, encodedPassword);\n    }\n    return util.format(\"shared_link=%s\", encodedURL);\n};\n/**\n * Return a callback that properly handles a successful response code by passing the response\n * body to the original callback. Any request error or unsuccessful response codes are propagated\n * back to the callback as errors. This is the standard behavior of most endpoints.\n *\n * @param {Function} callback The original callback given by the consumer\n * @returns {?APIRequest~Callback} A new callback that processes the response before passing it to the callback.\n */ BoxClient.prototype.defaultResponseHandler = function(callback) {\n    var self = this;\n    if (!callback) {\n        return null;\n    }\n    return function(err, response) {\n        // Error with Request\n        if (err) {\n            callback(err);\n            return;\n        }\n        // Successful Response\n        if (response.statusCode >= HTTP_STATUS_CODE_SUCCESS_BLOCK_RANGE[0] && response.statusCode <= HTTP_STATUS_CODE_SUCCESS_BLOCK_RANGE[1]) {\n            if (self._useIterators && PagingIterator.isIterable(response)) {\n                callback(null, new PagingIterator(response, self));\n                return;\n            }\n            callback(null, response.body);\n            return;\n        }\n        // Unexpected Response\n        callback(errors.buildUnexpectedResponseError(response));\n    };\n};\n/**\n * Wrap a client method with the default handler for both callback and promise styles\n * @param {Function} method The client method (e.g. client.get)\n * @returns {Function}  The wrapped method\n */ BoxClient.prototype.wrapWithDefaultHandler = function(method) {\n    var self = this;\n    return function wrappedClientMethod() {\n        // Check if the last argument is a callback\n        var lastArg = arguments[arguments.length - 1], callback;\n        if (typeof lastArg === \"function\") {\n            callback = self.defaultResponseHandler(lastArg);\n            arguments[arguments.length - 1] = callback;\n        }\n        var ret = method.apply(self, arguments);\n        if (ret instanceof Promise) {\n            ret = ret.then((response)=>{\n                if (response.statusCode >= HTTP_STATUS_CODE_SUCCESS_BLOCK_RANGE[0] && response.statusCode <= HTTP_STATUS_CODE_SUCCESS_BLOCK_RANGE[1]) {\n                    if (self._useIterators && PagingIterator.isIterable(response)) {\n                        return new PagingIterator(response, self);\n                    }\n                    return response.body;\n                }\n                throw errors.buildUnexpectedResponseError(response);\n            });\n        }\n        if (callback) {\n            // If the callback will handle any errors, don't worry about the promise\n            ret.suppressUnhandledRejections();\n        }\n        return ret;\n    };\n};\n/**\n * Add a SDK plugin. Warning: This will modify the box-client interface and can override existing properties.\n * @param {string} name Plugin name. Will be accessible via client.<plugin-name>\n * @param {Function} plugin The SDK plugin to add\n * @param {Object} [options] Plugin-specific options\n * @returns {void}\n * @throws Will throw an error if plugin name matches an existing method on box-client\n */ BoxClient.prototype.plug = function(name, plugin, options) {\n    options = options || {};\n    if (name in this && typeof this[name] === \"function\") {\n        throw new Error(\"You cannot define a plugin that overrides an existing method on the client\");\n    }\n    // Create plugin and export plugin onto client.\n    this[name] = plugin(this, options);\n};\n// ------------------------------------------------------------------------------\n// Public\n// ------------------------------------------------------------------------------\n/**\n * @module box-node-sdk/lib/box-client\n * @see {@Link BoxClient}\n */ module.exports = BoxClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/box-node-sdk/lib/box-client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/box-node-sdk/lib/box-node-sdk.js":
/*!*******************************************************!*\
  !*** ./node_modules/box-node-sdk/lib/box-node-sdk.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * @fileoverview Box SDK for Node.js\n */ \n// ------------------------------------------------------------------------------\n// Typedefs and Callbacks\n// ------------------------------------------------------------------------------\n/**\n * Object representing interface functions for PersistentClient to interact with the consumer app's central storage layer.\n * @typedef {Object} TokenStore\n * @property {ReadTokenInfoFromStore} read - read TokenInfo from app central store.\n * @property {WriteTokenInfoToStore} write - write TokenInfo to the app's central store.\n * @property {ClearTokenInfoFromStore} clear - delete TokenInfo from the app's central store.\n */ /**\n * Acquires TokenInfo from the consumer app's central store.\n * @typedef {Function} ReadTokenInfoFromStore\n * @param {Function} callback - err if store read issue occurred, otherwise propagates a TokenInfo object\n */ /**\n * Writes TokenInfo to the consumer app's central store\n * @typedef {Function} WriteTokenInfoToStore\n * @param {TokenInfo} tokenInfo - the token info to be written\n * @param {Function} callback - err if store write issue occurred, otherwise propagates null err\n *  and null result to indicate success\n */ /**\n * Clears TokenInfo from the consumer app's central store\n * @typedef {Function} ClearTokenInfoFromStore\n * @param {Function} callback - err if store delete issue occurred, otherwise propagates null err\n *  and null result to indicate success\n */ // ------------------------------------------------------------------------------\n// Requirements\n// ------------------------------------------------------------------------------\nvar EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter), util = __webpack_require__(/*! util */ \"util\"), qs = __webpack_require__(/*! querystring */ \"querystring\"), Config = __webpack_require__(/*! ./util/config */ \"(rsc)/./node_modules/box-node-sdk/lib/util/config.js\"), APIRequestManager = __webpack_require__(/*! ./api-request-manager */ \"(rsc)/./node_modules/box-node-sdk/lib/api-request-manager.js\"), TokenManager = __webpack_require__(/*! ./token-manager */ \"(rsc)/./node_modules/box-node-sdk/lib/token-manager.js\"), BasicAPISession = __webpack_require__(/*! ./sessions/basic-session */ \"(rsc)/./node_modules/box-node-sdk/lib/sessions/basic-session.js\"), PersistentAPISession = __webpack_require__(/*! ./sessions/persistent-session */ \"(rsc)/./node_modules/box-node-sdk/lib/sessions/persistent-session.js\"), AnonymousAPISession = __webpack_require__(/*! ./sessions/anonymous-session */ \"(rsc)/./node_modules/box-node-sdk/lib/sessions/anonymous-session.js\"), AppAuthSession = __webpack_require__(/*! ./sessions/app-auth-session */ \"(rsc)/./node_modules/box-node-sdk/lib/sessions/app-auth-session.js\"), BoxClient = __webpack_require__(/*! ./box-client */ \"(rsc)/./node_modules/box-node-sdk/lib/box-client.js\"), Webhooks = __webpack_require__(/*! ./managers/webhooks */ \"(rsc)/./node_modules/box-node-sdk/lib/managers/webhooks.js\");\n// ------------------------------------------------------------------------------\n// Private\n// ------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------\n// Public\n// ------------------------------------------------------------------------------\n/**\n * A backend NodeJS SDK to interact with the Box V2 API.\n * This is the single entry point for all SDK consumer interactions. This is the only file that a 3rd party app\n * should require. All other components are private and reached out to via this component.\n * 1. Provides getters to spawn client instances for users to interact with the Box API.\n * 2. Provides manual capability to acquire tokens via token grant endpoints.\n *    However, it is recommended to use clients to do this for you.\n * 3. Emits notification events about relevant request/response events. Useful for logging Box API interactions.\n *    Notification events: request retries, exceeding max retries, permanent failures.\n *\n * @param {UserConfigurationOptions} params User settings used to initialize and customize the SDK\n * @constructor\n */ function BoxSDKNode(params) {\n    EventEmitter.call(this);\n    var eventBus = new EventEmitter();\n    var self = this;\n    eventBus.on(\"response\", function() {\n        var args = [].slice.call(arguments);\n        args.unshift(\"response\");\n        self.emit.apply(self, args);\n    });\n    // Setup the configuration with the given params\n    this.config = new Config(params);\n    this._eventBus = eventBus;\n    this._setup();\n}\nutil.inherits(BoxSDKNode, EventEmitter);\n/**\n * Setup the SDK instance by instantiating necessary objects with current\n * configuration values.\n *\n * @param {EventEmitter} eventBus The event bus to use\n * @returns {void}\n * @private\n */ BoxSDKNode.prototype._setup = function() {\n    // Instantiate the request manager\n    this.requestManager = new APIRequestManager(this.config, this._eventBus);\n    // Initialize the rest of the SDK with the given configuration\n    this.tokenManager = new TokenManager(this.config, this.requestManager);\n    this.anonymousSession = new AnonymousAPISession(this.config, this.tokenManager);\n};\n/**\n * Expose the BoxClient property enumerations to the SDK as a whole. This allows\n * the consumer to access and use these values from anywhere in their application\n * (like a helper) by requiring the SDK, instead of needing to pass the client.\n */ BoxSDKNode.prototype.accessLevels = BoxClient.prototype.accessLevels;\nBoxSDKNode.accessLevels = BoxSDKNode.prototype.accessLevels;\nBoxSDKNode.prototype.collaborationRoles = BoxClient.prototype.collaborationRoles;\nBoxSDKNode.collaborationRoles = BoxSDKNode.prototype.collaborationRoles;\nBoxSDKNode.prototype.CURRENT_USER_ID = BoxClient.prototype.CURRENT_USER_ID;\nBoxSDKNode.CURRENT_USER_ID = BoxSDKNode.prototype.CURRENT_USER_ID;\n/**\n * Gets the BoxSDKNode instance by passing boxAppSettings json downloaded from the developer console.\n *\n * @param {Object} appConfig boxAppSettings object retrieved from Dev Console.\n * @returns {BoxSDKNode} an instance that has been preconfigured with the values from the Dev Console\n */ BoxSDKNode.getPreconfiguredInstance = function(appConfig) {\n    if (typeof appConfig.boxAppSettings !== \"object\") {\n        throw new TypeError(\"Configuration does not include boxAppSettings object.\");\n    }\n    var boxAppSettings = appConfig.boxAppSettings;\n    var webhooks = appConfig.webhooks;\n    if (typeof webhooks === \"object\") {\n        Webhooks.setSignatureKeys(webhooks.primaryKey, webhooks.secondaryKey);\n    }\n    var params = {};\n    if (typeof boxAppSettings.clientID === \"string\") {\n        params.clientID = boxAppSettings.clientID;\n    }\n    if (typeof boxAppSettings.clientSecret === \"string\") {\n        params.clientSecret = boxAppSettings.clientSecret;\n    }\n    // Only try to assign app auth settings if they are present\n    // Some configurations do not include them (but might include other info, e.g. webhooks)\n    if (typeof boxAppSettings.appAuth === \"object\" && boxAppSettings.appAuth.publicKeyID) {\n        var appAuth = {};\n        // Assign publicKeyID to keyID\n        appAuth.keyID = boxAppSettings.appAuth.publicKeyID;\n        appAuth.privateKey = boxAppSettings.appAuth.privateKey;\n        var passphrase = boxAppSettings.appAuth.passphrase;\n        if (typeof passphrase === \"string\") {\n            appAuth.passphrase = passphrase;\n        }\n        params.appAuth = appAuth;\n    }\n    if (typeof appConfig.enterpriseID === \"string\") {\n        params.enterpriseID = appConfig.enterpriseID;\n    }\n    return new BoxSDKNode(params);\n};\n/**\n * Updates the SDK configuration with new parameters.\n *\n * @param {UserConfigurationOptions} params User settings\n * @returns {void}\n */ BoxSDKNode.prototype.configure = function(params) {\n    this.config = this.config.extend(params);\n    this._setup();\n};\n/**\n * Returns a Box Client with a Basic API Session. The client is able to make requests on behalf of a user.\n * A basic session has no access to a user's refresh token. Because of this, once the session's tokens\n * expire the client cannot recover and a new session will need to be generated.\n *\n * @param {string} accessToken A user's Box API access token\n * @returns {BoxClient} Returns a new Box Client paired to a new BasicAPISession\n */ BoxSDKNode.prototype.getBasicClient = function(accessToken) {\n    var apiSession = new BasicAPISession(accessToken, this.tokenManager);\n    return new BoxClient(apiSession, this.config, this.requestManager);\n};\n/**\n * Returns a Box Client with a Basic API Session. The client is able to make requests on behalf of a user.\n * A basic session has no access to a user's refresh token. Because of this, once the session's tokens\n * expire the client cannot recover and a new session will need to be generated.\n *\n * @param {string} accessToken A user's Box API access token\n * @returns {BoxClient} Returns a new Box Client paired to a new BasicAPISession\n */ BoxSDKNode.getBasicClient = function(accessToken) {\n    return new BoxSDKNode({\n        clientID: \"\",\n        clientSecret: \"\"\n    }).getBasicClient(accessToken);\n};\n/**\n * Returns a Box Client with a persistent API session. A persistent API session helps manage the user's tokens,\n * and can refresh them automatically if the access token expires. If a central data-store is given, the session\n * can read & write tokens to it.\n *\n * @NOTE: If tokenInfo or tokenStore are formatted incorrectly, this method will throw an error. If you\n * haven't explicitly created either of these objects or are otherwise not completly confident in their validity,\n * you should wrap your call to getPersistentClient in a try-catch to handle any potential errors.\n *\n * @param {TokenInfo} tokenInfo A tokenInfo object to use for authentication\n * @param {TokenStore} [tokenStore] An optional token store for reading/writing tokens to session\n * @returns {BoxClient} Returns a new Box Client paired to a new PersistentAPISession\n */ BoxSDKNode.prototype.getPersistentClient = function(tokenInfo, tokenStore) {\n    var apiSession = new PersistentAPISession(tokenInfo, tokenStore, this.config, this.tokenManager);\n    return new BoxClient(apiSession, this.config, this.requestManager);\n};\n/**\n * Returns A Box Client with an Anonymous API Session. An Anonymous API Session has access to an anonymous\n * client-credentials token, which isn't tied to any specific user. Because of this, the client will only\n * have access to endpoints that allow client-credential tokens. All Anonymous API Sessions share the\n * same tokens, which allows them to refresh them efficiently and reduce load on both the application and\n * the API.\n *\n * @returns {BoxClient} Returns a new Box Client paired to a AnonymousAPISession\n */ BoxSDKNode.prototype.getAnonymousClient = function() {\n    return new BoxClient(this.anonymousSession, this.config, this.requestManager);\n};\n/**\n * Create a new client using App Auth for the given entity.  This allows either\n * managing App Users (as the enterprise) or performing operations as the App\n * Users themselves (as a user).\n *\n * @param {string} type The type of entity to operate as, \"enterprise\" or \"user\"\n * @param {string} id The Box ID of the entity to operate as\n * @param {TokenStore} [tokenStore] (Optional) the token store to use for caching tokens\n * @returns {BoxClient} A new client authorized as the app user or enterprise\n */ BoxSDKNode.prototype.getAppAuthClient = function(type, id, tokenStore) {\n    if (type === \"enterprise\" && !id) {\n        if (this.config.enterpriseID) {\n            id = this.config.enterpriseID;\n        } else {\n            throw new Error(\"Enterprise ID must be passed\");\n        }\n    }\n    var appAuthSession = new AppAuthSession(type, id, this.config, this.tokenManager, tokenStore);\n    return new BoxClient(appAuthSession, this.config, this.requestManager);\n};\n/**\n * Generate the URL for the authorize page to send users to for the first leg of\n * the OAuth2 flow.\n *\n * @param {Object} params The OAuth2 parameters\n * @returns {string} The authorize page URL\n */ BoxSDKNode.prototype.getAuthorizeURL = function(params) {\n    params.client_id = this.config.clientID;\n    return `${this.config.authorizeRootURL}/oauth2/authorize?${qs.stringify(params)}`;\n};\n/**\n * Acquires token info using an authorization code\n *\n * @param {string} authorizationCode - authorization code issued by Box\n * @param {TokenRequestOptions} [options] - Sets optional behavior for the token grant, null for default behavior\n * @param {Function} [callback] - passed a TokenInfo object if tokens were granted successfully\n * @returns {Promise<TokenInfo>} Promise resolving to the token info\n */ BoxSDKNode.prototype.getTokensAuthorizationCodeGrant = function(authorizationCode, options, callback) {\n    return this.tokenManager.getTokensAuthorizationCodeGrant(authorizationCode, options).asCallback(callback);\n};\n/**\n * Refreshes the access and refresh tokens for a given refresh token.\n *\n * @param {string} refreshToken - A valid OAuth refresh token\n * @param {TokenRequestOptions} [options] - Sets optional behavior for the token grant, null for default behavior\n * @param {Function} [callback] - passed a TokenInfo object if tokens were granted successfully\n * @returns {Promise<TokenInfo>} Promise resolving to the token info\n */ BoxSDKNode.prototype.getTokensRefreshGrant = function(refreshToken, options, callback) {\n    if (typeof options === \"function\") {\n        callback = options;\n        options = null;\n    }\n    return this.tokenManager.getTokensRefreshGrant(refreshToken, options).asCallback(callback);\n};\n/**\n * Gets tokens for enterprise administration of app users\n * @param {string} enterpriseID The ID of the enterprise to generate a token for\n * @param {TokenRequestOptions} [options] - Sets optional behavior for the token grant, null for default behavior\n * @param {Function} [callback] Passed the tokens if successful\n * @returns {Promise<TokenInfo>} Promise resolving to the token info\n */ BoxSDKNode.prototype.getEnterpriseAppAuthTokens = function(enterpriseID, options, callback) {\n    if (typeof options === \"function\") {\n        callback = options;\n        options = null;\n    }\n    if (!enterpriseID) {\n        if (this.config.enterpriseID) {\n            enterpriseID = this.config.enterpriseID;\n        } else {\n            throw new Error(\"Enterprise id must be passed\");\n        }\n    }\n    return this.tokenManager.getTokensJWTGrant(\"enterprise\", enterpriseID, options).asCallback(callback);\n};\n/**\n * Gets tokens for App Users via a JWT grant\n * @param {string} userID The ID of the App User to generate a token for\n * @param {TokenRequestOptions} [options] - Sets optional behavior for the token grant, null for default behavior\n * @param {Function} [callback] Passed the tokens if successful\n * @returns {Promise<TokentInfo>} Promise reolving to the token infp\n */ BoxSDKNode.prototype.getAppUserTokens = function(userID, options, callback) {\n    if (typeof options === \"function\") {\n        callback = options;\n        options = null;\n    }\n    return this.tokenManager.getTokensJWTGrant(\"user\", userID, options).asCallback(callback);\n};\n/**\n * Revokes a token pair associated with a given access or refresh token.\n *\n * @param {string} token - A valid access or refresh token to revoke\n * @param {TokenRequestOptions} [options] - Sets optional behavior for the token grant, null for default behavior\n * @param {Function} [callback] - If err, revoke failed. Otherwise, revoke succeeded.\n * @returns {Promise<TokenInfo>} Promise resolving to the token info\n */ BoxSDKNode.prototype.revokeTokens = function(token, options, callback) {\n    if (typeof options === \"function\") {\n        callback = options;\n        options = null;\n    }\n    return this.tokenManager.revokeTokens(token, options).asCallback(callback);\n};\n/**\n * Expose Webhooks.validateMessage() to the SDK as a whole. This allows\n * the consumer to call BoxSDK.validateWebhookMessage() by just requiring the SDK,\n * instead of needing to create a client (which is not needed to validate messages).\n */ BoxSDKNode.validateWebhookMessage = Webhooks.validateMessage;\n/** @module box-node-sdk/lib/box-node-sdk */ module.exports = BoxSDKNode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/box-node-sdk/lib/box-node-sdk.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/box-node-sdk/lib/chunked-uploader.js":
/*!***********************************************************!*\
  !*** ./node_modules/box-node-sdk/lib/chunked-uploader.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * @fileoverview Upload manager for large file uploads\n */ \nconst Promise = __webpack_require__(/*! bluebird */ \"(rsc)/./node_modules/bluebird/js/release/bluebird.js\");\n// -----------------------------------------------------------------------------\n// Typedefs\n// -----------------------------------------------------------------------------\n/**\n * Chunk uploaded event\n * @event Chunk#uploaded\n * @param {UploadPart} data The data of the uploaded chunk\n * @private\n */ /**\n * Chunk error event\n * @event Chunk#error\n * @param {Error} err The error that occurred\n * @private\n */ /**\n * Event for when the upload is successfully aborted\n * @event ChunkedUploader#aborted\n */ /**\n * Event for when the abort fails because the upload session is not destroyed.\n * In general, the abort can be retried, and no new chunks will be uploaded.\n * @event ChunkedUploader#abortFailed\n * @param {Error} err The error that occurred\n */ /**\n * Event for when a chunk fails to upload.  Note that the chunk will automatically\n * retry until it is successfully uploaded.\n * @event ChunkedUploader#chunkError\n * @param {Error} err The error that occurred during chunk upload\n */ /**\n * Event for when a chunk is successfully uploaded\n * @event ChunkedUploader#chunkUploaded\n * @param {UploadPart} data The data for the uploaded chunk\n */ /**\n * Event for when the entire upload is complete\n * @event ChunkedUploader#uploadComplete\n * @param {Object} file The file object for the newly-uploaded file\n */ /**\n * Event for when an upload fails\n * @event ChunkedUploader#error\n * @param {Error} err The error that occurred\n */ // -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\nconst EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter), ReadableStream = (__webpack_require__(/*! stream */ \"stream\").Readable), crypto = __webpack_require__(/*! crypto */ \"crypto\");\n// -----------------------------------------------------------------------------\n// Private\n// -----------------------------------------------------------------------------\nconst DEFAULT_OPTIONS = Object.freeze({\n    parallelism: 4,\n    retryInterval: 1000\n});\n/**\n * Chunk of a file to be uploaded, which handles trying to upload itself until\n * it succeeds.\n * @private\n */ class Chunk extends EventEmitter {\n    /**\n\t * Create a Chunk, representing a part of a file being uploaded\n\t * @param {BoxClient} client The Box SDK client\n\t * @param {string} sessionID The ID of the upload session the chunk belongs to\n\t * @param {Buffer|string} chunk The chunk that was uploaded\n\t * @param {int} offset The byte offset within the file where this chunk begins\n\t * @param {int} totalSize The total size of the file this chunk belongs to\n\t * @param {Object} options The options from the ChunkedUploader\n\t * @param {int} options.retryInterval The number of ms to wait before retrying a chunk upload\n\t */ constructor(client, sessionID, chunk, offset, totalSize, options){\n        super();\n        this.client = client;\n        this.sessionID = sessionID;\n        this.chunk = chunk;\n        this.length = chunk.length;\n        this.offset = offset;\n        this.totalSize = totalSize;\n        this.options = options;\n        this.data = null;\n        this.retry = null;\n        this.canceled = false;\n    }\n    /**\n\t * Get the final object representation of this chunk for the API\n\t * @returns {UploadPart} The chunk object\n\t */ getData() {\n        return this.data.part;\n    }\n    /**\n\t * Upload a chunk to the API\n\t * @returns {void}\n\t * @emits Chunk#uploaded\n\t * @emits Chunk#error\n\t */ upload() {\n        this.client.files.uploadPart(this.sessionID, this.chunk, this.offset, this.totalSize, (err, data)=>{\n            if (this.canceled) {\n                this.chunk = null;\n                return;\n            }\n            if (err) {\n                // handle the error or retry\n                if (err.statusCode) {\n                    // an API error, probably not retryable!\n                    this.emit(\"error\", err);\n                } else {\n                    // maybe a network error, retry\n                    this.retry = setTimeout(()=>this.upload(), this.options.retryInterval);\n                }\n                return;\n            }\n            // Record the chunk data for commit, and try to free up the chunk buffer\n            this.data = data;\n            this.chunk = null;\n            this.emit(\"uploaded\", data);\n        });\n    }\n    /**\n\t * Cancel trying to upload a chunk, preventing it from retrying and clearing\n\t * the associated buffer\n\t * @returns {void}\n\t */ cancel() {\n        clearTimeout(this.retry);\n        this.chunk = null;\n        this.canceled = true;\n    }\n}\n// -----------------------------------------------------------------------------\n// Public\n// -----------------------------------------------------------------------------\n/** Manager for uploading a file in chunks */ class ChunkedUploader extends EventEmitter {\n    /**\n\t * Create an upload manager\n\t * @param {BoxClient} client The client to use to upload the file\n\t * @param {Object} uploadSessionInfo The upload session info to use for chunked upload\n\t * @param {ReadableStream|Buffer|string} file The file to upload\n\t * @param {int} size The size of the file to be uploaded\n\t * @param {Object} [options] Optional parameters\n\t * @param {int} [options.retryInterval=1000] The number of ms to wait before retrying operations\n\t * @param {int} [options.parallelism=4] The number of concurrent chunks to upload\n\t * @param {Object} [options.fileAttributes] Attributes to set on the file during commit\n\t */ constructor(client, uploadSessionInfo, file, size, options){\n        super();\n        this._client = client;\n        this._sessionID = uploadSessionInfo.id;\n        this._partSize = uploadSessionInfo.part_size;\n        this._uploadSessionInfo = uploadSessionInfo;\n        if (file instanceof ReadableStream) {\n            // Pause the stream so we can read specific chunks from it\n            this._stream = file.pause();\n            this._streamBuffer = [];\n        } else if (file instanceof Buffer || typeof file === \"string\") {\n            this._file = file;\n        } else {\n            throw new TypeError(\"file must be a Stream, Buffer, or string!\");\n        }\n        this._size = size;\n        this._options = Object.assign({}, DEFAULT_OPTIONS, options);\n        this._isStarted = false;\n        this._numChunksInFlight = 0;\n        this._chunks = [];\n        this._position = 0;\n        this._fileHash = crypto.createHash(\"sha1\");\n    }\n    /**\n\t * Start an upload\n\t * @returns {Promise<Object>} A promise resolving to the uploaded file\n\t */ start() {\n        if (this._isStarted) {\n            return this._promise;\n        }\n        // Create the initial chunks\n        for(let i = 0; i < this._options.parallelism; i++){\n            this._getNextChunk((chunk)=>chunk ? this._uploadChunk(chunk) : this._commit());\n        }\n        this._isStarted = true;\n        /* eslint-disable promise/avoid-new */ this._promise = new Promise((resolve, reject)=>{\n            this._resolve = resolve;\n            this._reject = reject;\n        });\n        /* eslint-enable promise/avoid-new */ return this._promise;\n    }\n    /**\n\t * Abort a running upload, which cancels all currently uploading chunks,\n\t * attempts to free up held memory, and aborts the upload session.  This\n\t * cannot be undone or resumed.\n\t * @returns {Promise} A promise resolving when the upload is aborted\n\t * @emits ChunkedUploader#aborted\n\t * @emits ChunkedUploader#abortFailed\n\t */ abort() {\n        this._chunks.forEach((chunk)=>chunk.removeAllListeners().cancel());\n        this._chunks = [];\n        this._file = null;\n        this._stream = null;\n        return this._client.files.abortUploadSession(this._sessionID)/* eslint-disable promise/always-return */ .then(()=>{\n            this.emit(\"aborted\");\n        })/* eslint-enable promise/always-return */ .catch((err)=>{\n            this.emit(\"abortFailed\", err);\n            throw err;\n        });\n    }\n    /**\n\t * Get the next chunk of the file to be uploaded\n\t * @param {Function} callback Called with the next chunk of the file to be uploaded\n\t * @returns {void}\n\t * @private\n\t */ _getNextChunk(callback) {\n        if (this._position >= this._size) {\n            callback(null);\n            return;\n        }\n        let buf;\n        if (this._file) {\n            // Buffer/string case, just get the slice we need\n            buf = this._file.slice(this._position, this._position + this._partSize);\n        } else if (this._streamBuffer.length > 0) {\n            buf = this._streamBuffer.shift();\n        } else {\n            // Stream case, need to read\n            buf = this._stream.read(this._partSize);\n            if (!buf) {\n                // stream needs to read more, retry later\n                setImmediate(()=>this._getNextChunk(callback));\n                return;\n            } else if (buf.length > this._partSize) {\n                // stream is done reading and had extra data, buffer the remainder of the file\n                for(let i = 0; i < buf.length; i += this._partSize){\n                    this._streamBuffer.push(buf.slice(i, i + this._partSize));\n                }\n                buf = this._streamBuffer.shift();\n            }\n        }\n        this._fileHash.update(buf);\n        let chunk = new Chunk(this._client, this._sessionID, buf, this._position, this._size, this._options);\n        this._position += buf.length;\n        callback(chunk);\n    }\n    /**\n\t * Upload a chunk\n\t * @param {Chunk} chunk The chunk to upload\n\t * @returns {void}\n\t * @emits ChunkedUploader#chunkError\n\t * @emits ChunkedUploader#chunkUploaded\n\t */ _uploadChunk(chunk) {\n        this._numChunksInFlight += 1;\n        chunk.on(\"error\", (err)=>this.emit(\"chunkError\", err));\n        chunk.on(\"uploaded\", (data)=>{\n            this._numChunksInFlight -= 1;\n            this.emit(\"chunkUploaded\", data);\n            this._getNextChunk((nextChunk)=>nextChunk ? this._uploadChunk(nextChunk) : this._commit());\n        });\n        chunk.upload();\n        this._chunks.push(chunk);\n    }\n    /**\n\t * Commit the upload, finalizing it\n\t * @returns {void}\n\t * @emits ChunkedUploader#uploadComplete\n\t * @emits ChunkedUploader#error\n\t */ _commit() {\n        if (!this._isStarted || this._numChunksInFlight > 0) {\n            return;\n        }\n        let hash = this._fileHash.digest(\"base64\");\n        this._isStarted = false;\n        let options = Object.assign({\n            parts: this._chunks.map((c)=>c.getData())\n        }, this._options.fileAttributes);\n        this._client.files.commitUploadSession(this._sessionID, hash, options, (err, file)=>{\n            // It's not clear what the SDK can do here, so we just return the error and session info\n            // so users can retry if they wish\n            if (err) {\n                this.emit(\"error\", {\n                    uploadSession: this._uploadSessionInfo,\n                    error: err\n                });\n                this._reject(err);\n                return;\n            }\n            this.emit(\"uploadComplete\", file);\n            this._resolve(file);\n        });\n    }\n}\nmodule.exports = ChunkedUploader;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/box-node-sdk/lib/chunked-uploader.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/box-node-sdk/lib/enterprise-event-stream.js":
/*!******************************************************************!*\
  !*** ./node_modules/box-node-sdk/lib/enterprise-event-stream.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * @fileoverview Enterprise event stream backed by the enterprise events API\n */ \n// ------------------------------------------------------------------------------\n// Requirements\n// ------------------------------------------------------------------------------\nconst Readable = (__webpack_require__(/*! stream */ \"stream\").Readable), util = __webpack_require__(/*! util */ \"util\");\n// ------------------------------------------------------------------------------\n// Private\n// ------------------------------------------------------------------------------\nconst DEFAULT_OPTIONS = Object.freeze({\n    pollingInterval: 60,\n    chunkSize: 500\n}); // ------------------------------------------------------------------------------\n// Public\n// ------------------------------------------------------------------------------\n/**\n * Stream of Box enterprise events.\n *\n * By default, the stream starts from the current time.\n * Pass 'startDate' to start from a specific time.\n * Pass 'streamPosition' to start from a previous stream position, or '0' for all available past events (~1 year).\n * Once the stream catches up to the current time, it will begin polling every 'pollingInterval' seconds.\n * If 'pollingInterval' = 0, then the stream will end when it catches up to the current time (no polling).\n *\n * @param {BoxClient} client - The client to use to get events\n * @param {Object} [options] - Options\n * @param {string} [options.streamPosition] - The stream position to start from (pass '0' for all past events)\n * @param {string} [options.startDate] - The date to start from\n * @param {string} [options.endDate] - The date to end at\n * @param {EventType[]} [options.eventTypeFilter] - Array of event types to return\n * @param {int} [options.pollingInterval=60] - Polling interval (in seconds).  Pass 0 for no polling.\n * @param {int} [options.chunkSize=500] - Number of events to fetch per call (max = 500)\n * @constructor\n * @extends Readable\n */ function EnterpriseEventStream(client, options) {\n    Readable.call(this, {\n        objectMode: true\n    });\n    /**\n\t * @var {BoxClient} - The client for making API calls\n\t * @private\n\t */ this._client = client;\n    /**\n\t * @var {Object} - Options\n\t * @private\n\t */ this._options = Object.assign({}, DEFAULT_OPTIONS, options);\n    // Handle the case where the caller passes streamPosition = 0 instead of streamPosition = '0'.\n    if (!this._options.startDate && !this._options.streamPosition && this._options.streamPosition !== 0) {\n        // If neither startDate nor streamPosition is specified, start from the current time.\n        this._options.startDate = new Date().toISOString().replace(/\\.000Z$/, \"-00:00\");\n    }\n    /**\n\t * @var {?string} - The current stream position\n\t * @private\n\t */ this._streamPosition = this._options.streamPosition;\n}\nutil.inherits(EnterpriseEventStream, Readable);\n/**\n * @returns {?string} - Returns null if no events have been fetched from Box yet.\n */ EnterpriseEventStream.prototype.getStreamPosition = function() {\n    return this._streamPosition;\n};\n/**\n * Get the stream state.\n *\n * @returns {Object} - The stream state\n */ EnterpriseEventStream.prototype.getStreamState = function() {\n    // We need to return both streamPosition and startDate, since streamPosition will be null until\n    // the first set of events is returned from Box.\n    return {\n        streamPosition: this._streamPosition,\n        startDate: this._options.startDate,\n        endDate: this._options.endDate,\n        eventTypeFilter: this._options.eventTypeFilter\n    };\n};\n/**\n * Set the stream state.\n *\n * @param {Object} state - The stream state\n * @returns {void}\n */ EnterpriseEventStream.prototype.setStreamState = function(state) {\n    // We need to set both streamPosition and startDate, since streamPosition will be null until\n    // the first set of events is returned from Box.\n    this._streamPosition = state.streamPosition;\n    this._options.startDate = state.startDate;\n    this._options.endDate = state.endDate;\n    this._options.eventTypeFilter = state.eventTypeFilter;\n};\n/**\n * Fetch the next chunk of events\n *\n * If there are no events, poll until events are available.\n * If an error occurs, emit the error but continuing polling as usual.\n * @param {Function} callback - Passed the array of events\n * @returns {void}\n * @private\n */ EnterpriseEventStream.prototype.fetchEvents = function(callback) {\n    const self = this, params = {\n        stream_type: \"admin_logs\"\n    };\n    // Use the current stream position.\n    // Handle the case where the caller passes streamPosition === 0 instead of streamPosition === '0'.\n    if (this._streamPosition || this._streamPosition === 0) {\n        params.stream_position = this._streamPosition;\n    }\n    if (this._options.startDate) {\n        params.created_after = this._options.startDate;\n    }\n    if (this._options.endDate) {\n        params.created_before = this._options.endDate;\n    }\n    if (this._options.eventTypeFilter) {\n        params.event_type = this._options.eventTypeFilter.join(\",\");\n    }\n    if (this._options.chunkSize) {\n        params.limit = this._options.chunkSize;\n    }\n    this._client.events.get(params, (err, result)=>{\n        if (err) {\n            self.emit(\"error\", err);\n        // If there was a \"permanent\" error, we would call the callback with it here.\n        // But it's not clear which errors are truly permanent?\n        // If Box is down or returning errors for an extended period, we still want to resume when it recovers.\n        // So, continue polling at the regular frequency.\n        // Don't use a shorter retry interval (to avoid DDOSing Box).\n        }\n        if (err || !result || !result.entries || result.entries.length === 0) {\n            if (!self._options.pollingInterval) {\n                // If polling is disabled, end the stream.\n                callback();\n                return;\n            }\n            // There were no events returned (or an error occurred), so schedule another poll.\n            const delay = self._options.pollingInterval * 1000;\n            // Stream readers can use this to flush buffered events to a downstream system.\n            self.emit(\"wait\", delay);\n            setTimeout(()=>{\n                self.fetchEvents(callback);\n            }, delay);\n            return;\n        }\n        // Only update the stream position if there were events returned.\n        // The API currently returns next_stream_position = 0 if there are no events (may be a bug?).\n        // But we don't want to start over at the beginning in that case, so ignore it.\n        self._streamPosition = result.next_stream_position;\n        // Notify the reader of the new stream position.\n        // Stream readers can respond to the 'newStreamState' event to persist the stream state.\n        self.emit(\"newStreamState\", self.getStreamState());\n        callback(null, result.entries);\n    });\n};\n/**\n * Implementation of the stream-internal read function.\tThis is called\n * by the stream whenever it needs more data, and will not be called again\n * until data is pushed into the stream.\n * @returns {void}\n * @private\n */ EnterpriseEventStream.prototype._read = function() {\n    // Fetch the next chunk of events.\n    const self = this;\n    // This will poll forever until events are available.\n    this.fetchEvents((err, events)=>{\n        if (err || !events || events.length === 0) {\n            // Close the stream if there was a \"permanent\" failure or we reached the end of the events.\n            self.push(null);\n            return;\n        }\n        // Pause the stream to avoid race conditions while pushing in the new events.\n        // Without this, _read() would be called again from inside each push(),\n        // resulting in multiple parallel calls to fetchEvents().\n        // See https://github.com/nodejs/node/issues/3203\n        const wasPaused = self.isPaused();\n        self.pause();\n        // Push all of the events into the stream.\n        events.forEach((event)=>{\n            self.push(event);\n        });\n        if (!wasPaused) {\n            // This will deliver the events and trigger the next call to _read() once they have been consumed.\n            self.resume();\n        }\n    });\n};\nmodule.exports = EnterpriseEventStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/box-node-sdk/lib/enterprise-event-stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/box-node-sdk/lib/event-stream.js":
/*!*******************************************************!*\
  !*** ./node_modules/box-node-sdk/lib/event-stream.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * @fileoverview Event stream backed by the events API\n */ \n// ------------------------------------------------------------------------------\n// Requirements\n// ------------------------------------------------------------------------------\nvar Readable = (__webpack_require__(/*! stream */ \"stream\").Readable), qs = __webpack_require__(/*! querystring */ \"querystring\"), util = __webpack_require__(/*! util */ \"util\"), Promise = __webpack_require__(/*! bluebird */ \"(rsc)/./node_modules/bluebird/js/release/bluebird.js\");\n// ------------------------------------------------------------------------------\n// Private\n// ------------------------------------------------------------------------------\nconst DEFAULT_OPTIONS = Object.freeze({\n    deduplicationFilterSize: 5000,\n    retryDelay: 1000,\n    fetchInterval: 1000\n});\n// ------------------------------------------------------------------------------\n// Public\n// ------------------------------------------------------------------------------\n/**\n * Stream of Box events from a given client and point in time.\n * @param {BoxClient} client The client to use to get events\n * @param {string} streamPosition The point in time to start at\n * @param {Object} [options] Optional parameters\n * @param {int} [options.retryDelay=1000] Number of ms to wait before retrying after an error\n * @param {int} [options.deduplicationFilterSize=5000] Number of IDs to track for deduplication\n * @param {int} [options.fetchInterval=1000] Minimunm number of ms between calls for more events\n * @constructor\n * @extends Readable\n */ function EventStream(client, streamPosition, options) {\n    Readable.call(this, {\n        objectMode: true\n    });\n    /**\n\t * @var {BoxClient} The client for making API calls\n\t * @private\n\t */ this._client = client;\n    /**\n\t * @var {string} The latest stream position\n\t * @private\n\t */ this._streamPosition = streamPosition;\n    /**\n\t * @var {?Object} The information for how to long poll\n\t * @private\n\t */ this._longPollInfo = null;\n    /**\n\t * @var {int} The number of long poll requests we've made against one URL so far\n\t * @private\n\t */ this._longPollRetries = 0;\n    /**\n\t * @var {Object.<string, boolean>} Hash of event IDs we've already pushed\n\t * @private\n\t */ this._dedupHash = {};\n    /**\n\t * Rate limiting promise to ensure that events are not fetched too often,\n\t * initially resolved to allow an immediate API call.\n\t * @var {Promise}\n\t * @private\n\t */ this._rateLimiter = Promise.resolve();\n    this._options = Object.assign({}, DEFAULT_OPTIONS, options);\n}\nutil.inherits(EventStream, Readable);\n/**\n * Retrieve the url and params for long polling for new updates\n * @returns {Promise} Promise for testing purposes\n * @private\n */ EventStream.prototype.getLongPollInfo = function() {\n    if (this.destroyed) {\n        return Promise.resolve(false);\n    }\n    return this._client.events.getLongPollInfo().then((longPollInfo)=>{\n        // On getting new long poll info, reset everything\n        this._longPollInfo = longPollInfo;\n        this._longPollRetries = 0;\n        return this.doLongPoll();\n    }).catch((err)=>{\n        this.emit(\"error\", err);\n        // Only retry on resolvable errors\n        if (!err.authExpired) {\n            this.retryPollInfo();\n        }\n    });\n};\n/**\n * Long poll for notification of new events.\tWe do this rather than\n * polling for the events directly in order to minimize the number of API\n * calls necessary.\n * @returns {Promise} Promise for testing pruposes\n * @private\n */ EventStream.prototype.doLongPoll = function() {\n    if (this.destroyed) {\n        return Promise.resolve(false);\n    }\n    // If we're over the max number of retries, reset\n    if (this._longPollRetries > this._longPollInfo.max_retries) {\n        return this.getLongPollInfo();\n    }\n    var url = this._longPollInfo.url, qsDelim = url.indexOf(\"?\"), query = {};\n    // Break out the query params, otherwise the request URL gets messed up\n    if (qsDelim > 0) {\n        query = qs.parse(url.substr(qsDelim + 1));\n        url = url.substr(0, qsDelim);\n    }\n    query.stream_position = this._streamPosition;\n    var options = {\n        qs: query,\n        timeout: this._longPollInfo.retry_timeout * 1000\n    };\n    this._longPollRetries += 1;\n    return this._client.wrapWithDefaultHandler(this._client.get)(url, options).then((data)=>{\n        if (this.destroyed) {\n            return false;\n        }\n        if (data.message === \"reconnect\") {\n            return this.getLongPollInfo();\n        }\n        // We don't expect any messages other than reconnect and new_change, so if\n        // we get one just retry the long poll\n        if (data.message !== \"new_change\") {\n            return this.doLongPoll();\n        }\n        return this.fetchEvents();\n    }).catch(()=>{\n        this.retryPollInfo();\n    });\n};\n/**\n * Retries long-polling after a delay.\n * Does not attempt if stream is already destroyed.\n * @returns {void}\n * @private\n */ EventStream.prototype.retryPollInfo = function() {\n    if (!this.destroyed) {\n        this._retryTimer = setTimeout(()=>this.getLongPollInfo(), this._options.retryDelay);\n    }\n};\n/**\n * Fetch the latest group of events and push them into the stream\n * @returns {Promise} Promise for testing purposes\n * @private\n */ EventStream.prototype.fetchEvents = function() {\n    if (this.destroyed) {\n        return Promise.resolve(false);\n    }\n    var eventParams = {\n        stream_position: this._streamPosition,\n        limit: 500\n    };\n    // Get new events after the rate limiter expires\n    return this._rateLimiter.then(()=>this._client.events.get(eventParams).then((events)=>{\n            // Reset the rate limiter\n            this._rateLimiter = Promise.delay(this._options.fetchInterval);\n            // If the response wasn't what we expected, re-poll\n            if (!events.entries || !events.next_stream_position) {\n                return this.doLongPoll();\n            }\n            this._streamPosition = events.next_stream_position;\n            // De-duplicate the fetched events, since the API often returns\n            // the same events at multiple subsequent stream positions\n            var newEvents = events.entries.filter((event)=>!this._dedupHash[event.event_id]);\n            // If there aren't any non-duplicate events, go back to polling\n            if (newEvents.length === 0) {\n                return this.doLongPoll();\n            }\n            // Pause the stream to avoid race conditions while pushing in the new events.\n            // Without this, _read() would be called again from inside each push(),\n            // resulting in multiple parallel calls to fetchEvents().\n            // See https://github.com/nodejs/node/issues/3203\n            var wasPaused = this.isPaused();\n            this.pause();\n            // Push new events into the stream\n            newEvents.forEach((event)=>{\n                this._dedupHash[event.event_id] = true;\n                this.push(event);\n            });\n            if (!wasPaused) {\n                // This will deliver the events and trigger the next call to _read() once they have been consumed.\n                this.resume();\n            }\n            // Once the deduplication filter gets too big, clean it up\n            if (Object.keys(this._dedupHash).length >= this._options.deduplicationFilterSize) {\n                this.cleanupDedupFilter(events.entries);\n            }\n            return true;\n        }).catch((err)=>{\n            this.emit(\"error\", err);\n            this.retryPollInfo();\n        }));\n};\n/**\n * Clean up the deduplication filter, to prevent it from growing\n * too big and eating up memory.\tWe look at the latest set of events\n * returned and assume that any IDs not in that set don't need to be\n * tracked for deduplication any more.\n * @param {Object[]} latestEvents The latest events from the API\n * @returns {void}\n * @private\n */ EventStream.prototype.cleanupDedupFilter = function(latestEvents) {\n    var dedupIDs = Object.keys(this._dedupHash);\n    dedupIDs.forEach((eventID)=>{\n        var isEventCleared = !latestEvents.find((e)=>e.event_id === eventID);\n        if (isEventCleared) {\n            delete this._dedupHash[eventID];\n        }\n    });\n};\n/**\n * Implementation of the stream-internal read function.\tThis is called\n * by the stream whenever it needs more data, and will not be called again\n * until data is pushed into the stream.\n * @returns {void}\n * @private\n */ EventStream.prototype._read = function() {\n    // Start the process of getting new events\n    this.getLongPollInfo();\n};\n/**\n * Implementation of stream-internal `_destroy` function (v8.0.0 and later).\n * Called by stream consumers to effectively stop polling via the public\n * `destroy()`.\n * @returns {void}\n * @private\n */ EventStream.prototype._destroy = function() {\n    clearTimeout(this._retryTimer);\n    delete this._retryTimer;\n};\n// backwards-compat for Node.js pre-v8.0.0\n/* istanbul ignore if */ if (typeof Readable.prototype.destroy !== \"function\") {\n    /**\n\t * Destroys the stream.  Rough polyfill for `Readable#destroy`.\n\t * @returns {void}\n\t * @public\n\t */ EventStream.prototype.destroy = function() {\n        if (!this.destroyed) {\n            process.nextTick(()=>{\n                this.emit(\"close\");\n            });\n            this.destroyed = true;\n            this._destroy();\n        }\n    };\n}\nmodule.exports = EventStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/box-node-sdk/lib/event-stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/box-node-sdk/lib/managers/collaboration-whitelist.js":
/*!***************************************************************************!*\
  !*** ./node_modules/box-node-sdk/lib/managers/collaboration-whitelist.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * @fileoverview Manager for the Box Collaboration Whitelist Resource\n */ \n// -----------------------------------------------------------------------------\n// Typedefs\n// -----------------------------------------------------------------------------\n/**\n * Collaboration Whitelist parameter constant\n * @typedef {string} CollaborationWhitelistDirection Determines the type of restriction for whitelisting for a domain\n */ // ------------------------------------------------------------------------------\n// Requirements\n// ------------------------------------------------------------------------------\nvar urlPath = __webpack_require__(/*! ../util/url-path */ \"(rsc)/./node_modules/box-node-sdk/lib/util/url-path.js\");\n// ------------------------------------------------------------------------------\n// Private\n// ------------------------------------------------------------------------------\nvar BASE_PATH = \"/collaboration_whitelist_entries\", TARGET_ENTRY_PATH = \"/collaboration_whitelist_exempt_targets\";\n// ------------------------------------------------------------------------------\n// Public\n// ------------------------------------------------------------------------------\n/**\n * Simple manager for interacting with all 'Collaboration Whitelist' endpoints and actions.\n *\n * @constructor\n * @param {BoxClient} client - The Box API Client that is responsible for making calls to the API\n * @returns {void}\n */ function CollaborationWhitelist(client) {\n    this.client = client;\n}\n/**\n * Enum of valid collaboration whitelist directions\n *\n * @readonly\n * @enum {CollaborationWhitelistDirection}\n */ CollaborationWhitelist.prototype.directions = Object.freeze({\n    INBOUND: \"inbound\",\n    OUTBOUND: \"outbound\",\n    BOTH: \"both\"\n});\n/**\n * Add a domain to the enterprise's whitelist.\n *\n * API Endpoint: '/collaboration_whitelist_entries'\n * Method: POST\n *\n * @param {string} domain - The domain to be added to the whitelist\n * @param {CollaborationWhitelistDirection} direction - Inbound refers to collaboration actions within an enterprise. Outbound\n *                                                      refers to collaboration actions external to an enterprise. Both refers to\n *                                                      collaboration actions taken within and external to an enterprise\n * @param {Function} [callback] - Passed the collaboration whitelist information if it was created successfully\n * @returns {Promise<Object>} A promise resolve to the collaboration whitelist object\n */ CollaborationWhitelist.prototype.addDomain = function(domain, direction, callback) {\n    var params = {\n        body: {\n            domain,\n            direction\n        }\n    };\n    var apiPath = urlPath(BASE_PATH);\n    return this.client.wrapWithDefaultHandler(this.client.post)(apiPath, params, callback);\n};\n/**\n * Requests a collaboration whitelist entry with a given ID.\n *\n * API Endpoint: '/collaboration_whitelist_entries/:domainID'\n * Method: GET\n *\n * @param {string} domainID - Box ID of the collaboration whitelist being requested\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {Function} [callback] - Passed the collaboration whitelist information if it was acquired successfully\n * @returns {Promise<Object>} A promise resolving to the collaboration whitelist object\n */ CollaborationWhitelist.prototype.getWhitelistedDomain = function(domainID, options, callback) {\n    var params = {\n        qs: options\n    };\n    var apiPath = urlPath(BASE_PATH, domainID);\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Requests all collaboration whitelist entries within an enterprise.\n *\n * API Endpoint: '/collaboration_whitelist_entries'\n * Method: GET\n *\n * @param {Object} [options] - Additional options. Can be left null in most cases.\n * @param {int} [options.limit] - The number of collaboration whitelists to retrieve\n * @param {string} [options.marker] - Paging marker, retrieve records starting at this position in the list. Left blank to start at the beginning.\n * @param {Function} [callback] - Passed a list of collaboration whitelists if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the collection of collaboration whitelists\n */ CollaborationWhitelist.prototype.getAllWhitelistedDomains = function(options, callback) {\n    var params = {\n        qs: options\n    };\n    var apiPath = urlPath(BASE_PATH);\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Delete a given collaboration whitelist entry.\n *\n * API Endpoint: '/collaboration_whitelist_entries/:domainID'\n * Method: DELETE\n *\n * @param {string} domainID - Box ID of the collaboration whitelist being requested\n * @param {Function} [callback] - Empty response body passed if successful.\n * @returns {Promise<void>} A promise resolving to nothing\n */ CollaborationWhitelist.prototype.removeDomain = function(domainID, callback) {\n    var apiPath = urlPath(BASE_PATH, domainID);\n    return this.client.wrapWithDefaultHandler(this.client.del)(apiPath, null, callback);\n};\n/**\n * Adds a Box User to the exempt target list.\n *\n * API Endpoint: '/collaboration_whitelist_exempt_targets'\n * Method: GET\n *\n * @param {string} userID - The ID of the Box User to be added to the whitelist\n * @param {Function} [callback] - Passed a collaboration whitelist for user if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to a user collaboration whitelist\n */ CollaborationWhitelist.prototype.addExemption = function(userID, callback) {\n    var params = {\n        body: {\n            user: {\n                id: userID,\n                type: \"user\"\n            }\n        }\n    };\n    var apiPath = urlPath(TARGET_ENTRY_PATH);\n    return this.client.wrapWithDefaultHandler(this.client.post)(apiPath, params, callback);\n};\n/**\n * Retrieves information about a collaboration whitelist for user by whitelist ID.\n *\n * API Endpoint: '/collaboration_whitelist_exempt_targets/:exemptionID'\n * Method: GET\n *\n * @param {string} exemptionID - The ID of the collaboration whitelist\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {Function} [callback] - Passed the collaboration whitelist information for a user if it was acquired successfully\n * @returns {Promise<Object>} A promise resolving to the collaboration whitelist object\n */ CollaborationWhitelist.prototype.getExemption = function(exemptionID, options, callback) {\n    var params = {\n        qs: options\n    };\n    var apiPath = urlPath(TARGET_ENTRY_PATH, exemptionID);\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Retrieve a list of all exemptions to an enterprise's collaboration whitelist.\n *\n * API Endpoint: '/collaboration_whitelist_exempt_targets'\n * Method: GET\n *\n * @param {Object} [options] - Additional options. Can be left null in most cases.\n * @param {string} [options.limit] - The number of user collaboration whitelists to retrieve\n * @param {string} [options.marker] - Paging marker, retrieve records starting at this position in the list. Left blank to start at the beginning.\n * @param {Function} [callback] - Passed a list of user collaboration whitelists if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the collection of user collaboration whitelists\n */ CollaborationWhitelist.prototype.getAllExemptions = function(options, callback) {\n    var params = {\n        qs: options\n    };\n    var apiPath = urlPath(TARGET_ENTRY_PATH);\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Delete a given user collaboration whitelist.\n *\n * API Endpoint: '/collaboration_whitelist_exempt_targets/:exemptionID'\n * Method: DELETE\n *\n * @param {string} exemptionID - Box ID of the user collaboration whitelist being requested\n * @param {Function} [callback] - Empty response body passed if successful.\n * @returns {Promise<void>} A promise resolving to nothing\n */ CollaborationWhitelist.prototype.removeExemption = function(exemptionID, callback) {\n    var apiPath = urlPath(TARGET_ENTRY_PATH, exemptionID);\n    return this.client.wrapWithDefaultHandler(this.client.del)(apiPath, null, callback);\n};\n/**\n * @module box-node-sdk/lib/managers/collaboration-whitelists\n * @see {@Link CollaborationWhitelist}\n */ module.exports = CollaborationWhitelist;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/box-node-sdk/lib/managers/collaboration-whitelist.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/box-node-sdk/lib/managers/collaborations.js":
/*!******************************************************************!*\
  !*** ./node_modules/box-node-sdk/lib/managers/collaborations.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * @fileoverview Manager for the Box Collaboration Resource\n */ \n// ------------------------------------------------------------------------------\n// Requirements\n// ------------------------------------------------------------------------------\nvar urlPath = __webpack_require__(/*! ../util/url-path */ \"(rsc)/./node_modules/box-node-sdk/lib/util/url-path.js\");\n// ------------------------------------------------------------------------------\n// Private\n// ------------------------------------------------------------------------------\nvar BASE_PATH = \"/collaborations\";\n// ------------------------------------------------------------------------------\n// Public\n// ------------------------------------------------------------------------------\n/**\n * Simple manager for interacting with all 'Collaboration' endpoints and actions.\n *\n * @constructor\n * @param {BoxClient} client - The Box API Client that is responsible for making calls to the API\n * @returns {void}\n */ function Collaborations(client) {\n    this.client = client;\n}\n/**\n * Requests a collaboration object with a given ID.\n *\n * API Endpoint: '/collaborations/:collaborationID'\n * Method: GET\n *\n * @param {string} collaborationID - Box ID of the collaboration being requested\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {Function} [callback] - Passed the collaboration information if it was acquired successfully\n * @returns {Promise<Object>} A promise resolving to the collaboration object\n */ Collaborations.prototype.get = function(collaborationID, options, callback) {\n    var params = {\n        qs: options\n    };\n    var apiPath = urlPath(BASE_PATH, collaborationID);\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Gets a user's pending collaborations\n *\n * API Endpoint: '/collaborations'\n * Method: GET\n *\n * @param {Function} [callback] - Called with a collection of pending collaborations if successful\n * @returns {Promise<Object>} A promise resolving to the collection of pending collaborations\n */ Collaborations.prototype.getPending = function(callback) {\n    var params = {\n        qs: {\n            status: \"pending\"\n        }\n    };\n    return this.client.wrapWithDefaultHandler(this.client.get)(BASE_PATH, params, callback);\n};\n/**\n * Update some information about a given collaboration.\n *\n * API Endpoint: '/collaborations/:collaborationID'\n * Method: PUT\n *\n * @param {string} collaborationID - Box ID of the collaboration being requested\n * @param {Object} updates - Fields of the collaboration to be updated\n * @param {Function} [callback] - Passed the updated collaboration information if it was acquired successfully\n * @returns {Promise<Object>} A promise resolving to the updated collaboration object\n */ Collaborations.prototype.update = function(collaborationID, updates, callback) {\n    var params = {\n        body: updates\n    };\n    var apiPath = urlPath(BASE_PATH, collaborationID);\n    return this.client.wrapWithDefaultHandler(this.client.put)(apiPath, params, callback);\n};\n/**\n * Update the status of a pending collaboration.\n *\n * API Endpoint: '/collaborations/:collaborationID'\n * Method: PUT\n *\n * @param {string} collaborationID - Box ID of the collaboration being requested\n * @param {string} newStatus - The new collaboration status ('accepted'/'rejected')\n * @param {Function} [callback] - Passed the updated collaboration information if it was acquired successfully\n * @returns {Promise<Object>} A promise resolving to the accepted collaboration object\n */ Collaborations.prototype.respondToPending = function(collaborationID, newStatus, callback) {\n    var options = {\n        status: newStatus\n    };\n    return this.update(collaborationID, options, callback);\n};\n/**\n * Invite a collaborator to a folder. You'll have to create the 'accessible_by' input object\n * yourself, but the method allows for multiple types of collaborator invites. See\n * {@link http://developers.box.com/docs/#collaborations-add-a-collaboration} for formatting\n * help.\n *\n * API Endpoint: '/collaborations\n * Method: POST\n *\n * @param {Object} accessibleBy - The accessible_by object expected by the API\n * @param {string} itemID - Box ID of the item to which the user should be invited\n * @param {CollaborationRole} role - The role which the invited collaborator should have\n * @param {Object} [options] - Optional parameters for the collaboration\n * @param {ItemType} [options.type=folder] - Type of object to be collaborated\n * @param {boolean} [options.notify] - Determines if the user or group will receive email notifications\n * @param {boolean} [options.can_view_path] - Whether view path collaboration feature is enabled or not\n * @param {Function} [callback] - Called with the new collaboration if successful\n * @returns {Promise<Object>} A promise resolving to the created collaboration object\n */ Collaborations.prototype.create = function(accessibleBy, itemID, role, options, callback) {\n    var defaultOptions = {\n        type: \"folder\"\n    };\n    if (typeof options === \"function\") {\n        callback = options;\n        options = {};\n    }\n    options = Object.assign({}, defaultOptions, options);\n    var params = {\n        body: {\n            item: {\n                type: options.type,\n                id: itemID\n            },\n            accessible_by: accessibleBy,\n            role\n        }\n    };\n    if (typeof options.can_view_path === \"boolean\") {\n        params.body.can_view_path = options.can_view_path;\n    }\n    if (typeof options.notify === \"boolean\") {\n        params.qs = {\n            notify: options.notify\n        };\n    }\n    return this.client.wrapWithDefaultHandler(this.client.post)(BASE_PATH, params, callback);\n};\n/**\n * Invite a user to collaborate on an item via their user ID.\n *\n * API Endpoint: '/collaborations\n * Method: POST\n *\n * @param {int} userID - The ID of the user you'll invite as a collaborator\n * @param {string} itemID - Box ID of the item to which the user should be invited\n * @param {CollaborationRole} role - The role which the invited collaborator should have\n * @param {Object} [options] - Optional parameters for the collaboration\n * @param {ItemType} [options.type=folder] - Type of object to be collaborated\n * @param {boolean} [options.notify] - Determines if the user will receive email notifications\n * @param {boolean} [options.can_view_path] - Whether view path collaboration feature is enabled or not\n * @param {Function} [callback] - Called with the new collaboration if successful\n * @returns {Promise<Object>} A promise resolving to the created collaboration object\n */ Collaborations.prototype.createWithUserID = function(userID, itemID, role, options, callback) {\n    if (typeof options === \"function\") {\n        callback = options;\n        options = {};\n    }\n    var accessibleBy = {\n        type: \"user\",\n        id: userID\n    };\n    return this.create(accessibleBy, itemID, role, options, callback);\n};\n/**\n * Invite a user to collaborate on an item via their user login email address.\n *\n * API Endpoint: '/collaborations\n * Method: POST\n *\n * @param {string} email - The collaborator's email address\n * @param {string} itemID - Box ID of the item to which the user should be invited\n * @param {CollaborationRole} role - The role which the invited collaborator should have\n * @param {Object} [options] - Optional parameters for the collaboration\n * @param {ItemType} [options.type=folder] - Type of object to be collaborated\n * @param {boolean} [options.notify] - Determines if the user will receive email notifications\n * @param {boolean} [options.can_view_path] - Whether view path collaboration feature is enabled or not\n * @param {Function} [callback] - Called with the new collaboration if successful\n * @returns {Promise<Object>} A promise resolving to the created collaboration object\n */ Collaborations.prototype.createWithUserEmail = function(email, itemID, role, options, callback) {\n    if (typeof options === \"function\") {\n        callback = options;\n        options = {};\n    }\n    var accessibleBy = {\n        type: \"user\",\n        login: email\n    };\n    return this.create(accessibleBy, itemID, role, options, callback);\n};\n/**\n * Invite a group to collaborate on an item via their group ID.\n *\n * API Endpoint: '/collaborations\n * Method: POST\n *\n * @param {int} groupID - The ID of the group you'll invite as a collaborator\n * @param {string} itemID - Box ID of the item to which the group should be invited\n * @param {CollaborationRole} role - The role which the invited collaborator should have\n * @param {Object} [options] - Optional parameters for the collaboration\n * @param {ItemType} [options.type=folder] - Type of object to be collaborated\n * @param {boolean} [options.notify] - Determines if the group will receive email notifications\n * @param {boolean} [options.can_view_path] - Whether view path collaboration feature is enabled or not\n * @param {Function} [callback] - Called with the new collaboration if successful\n * @returns {Promise<Object>} A promise resolving to the created collaboration object\n */ Collaborations.prototype.createWithGroupID = function(groupID, itemID, role, options, callback) {\n    if (typeof options === \"function\") {\n        callback = options;\n        options = {};\n    }\n    var accessibleBy = {\n        type: \"group\",\n        id: groupID\n    };\n    return this.create(accessibleBy, itemID, role, options, callback);\n};\n/**\n * Delete a given collaboration.\n *\n * API Endpoint: '/collaborations/:collaborationID'\n * Method: DELETE\n *\n * @param {string} collaborationID - Box ID of the collaboration being requested\n * @param {Function} [callback] - Empty response body passed if successful.\n * @returns {Promise<void>} A promise resolving to nothing\n */ Collaborations.prototype.delete = function(collaborationID, callback) {\n    var apiPath = urlPath(BASE_PATH, collaborationID);\n    return this.client.wrapWithDefaultHandler(this.client.del)(apiPath, null, callback);\n};\n/**\n * @module box-node-sdk/lib/managers/collaborations\n * @see {@Link Collaborations}\n */ module.exports = Collaborations;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/box-node-sdk/lib/managers/collaborations.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/box-node-sdk/lib/managers/collections.js":
/*!***************************************************************!*\
  !*** ./node_modules/box-node-sdk/lib/managers/collections.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * @fileoverview Manager for the Box Collection Resource\n */ \n// ------------------------------------------------------------------------------\n// Requirements\n// ------------------------------------------------------------------------------\nvar urlPath = __webpack_require__(/*! ../util/url-path */ \"(rsc)/./node_modules/box-node-sdk/lib/util/url-path.js\");\n// ------------------------------------------------------------------------------\n// Private\n// ------------------------------------------------------------------------------\nvar BASE_PATH = \"/collections\";\n// ------------------------------------------------------------------------------\n// Public\n// ------------------------------------------------------------------------------\n/**\n * Simple manager for interacting with all 'Collection' endpoints and actions.\n *\n * @constructor\n * @param {BoxClient} client - The Box API Client that is responsible for making calls to the API\n * @returns {void}\n */ function Collections(client) {\n    this.client = client;\n}\n/**\n * Requests all of a user's collection objects.\n *\n * API Endpoint: '/collections'\n * Method: GET\n *\n * @param {Function} [callback] - Called with a collection of collections if successful\n * @returns {Promise<Object>} A promise resolving to the collection of collections\n */ Collections.prototype.getAll = function(callback) {\n    return this.client.wrapWithDefaultHandler(this.client.get)(BASE_PATH, {}, callback);\n};\n/**\n * Requests the items in the collection object with a given ID.\n *\n * API Endpoint: '/collections/:collectionID/items'\n * Method: GET\n *\n * @param {string} collectionID - Box ID of the collection with items being requested\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {Function} [callback] - Passed the items information if they were acquired successfully\n * @returns {Promise<Object>} A promise resolving to the collection of items in the collection\n */ Collections.prototype.getItems = function(collectionID, options, callback) {\n    var params = {\n        qs: options\n    };\n    var apiPath = urlPath(BASE_PATH, collectionID, \"items\");\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * @module box-node-sdk/lib/managers/collections\n * @see {@Link Collections}\n */ module.exports = Collections;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYm94LW5vZGUtc2RrL2xpYi9tYW5hZ2Vycy9jb2xsZWN0aW9ucy5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Q0FFQyxHQUVEO0FBRUEsaUZBQWlGO0FBQ2pGLGVBQWU7QUFDZixpRkFBaUY7QUFDakYsSUFBSUEsVUFBVUMsbUJBQU9BLENBQUM7QUFFdEIsaUZBQWlGO0FBQ2pGLFVBQVU7QUFDVixpRkFBaUY7QUFDakYsSUFBSUMsWUFBWTtBQUVoQixpRkFBaUY7QUFDakYsU0FBUztBQUNULGlGQUFpRjtBQUVqRjs7Ozs7O0NBTUMsR0FDRCxTQUFTQyxZQUFZQyxNQUFNO0lBQzFCLElBQUksQ0FBQ0EsTUFBTSxHQUFHQTtBQUNmO0FBRUE7Ozs7Ozs7O0NBUUMsR0FDREQsWUFBWUUsU0FBUyxDQUFDQyxNQUFNLEdBQUcsU0FBU0MsUUFBUTtJQUMvQyxPQUFPLElBQUksQ0FBQ0gsTUFBTSxDQUFDSSxzQkFBc0IsQ0FBQyxJQUFJLENBQUNKLE1BQU0sQ0FBQ0ssR0FBRyxFQUFFUCxXQUFXLENBQUMsR0FBR0s7QUFDM0U7QUFFQTs7Ozs7Ozs7OztDQVVDLEdBQ0RKLFlBQVlFLFNBQVMsQ0FBQ0ssUUFBUSxHQUFHLFNBQVNDLFlBQVksRUFBRUMsT0FBTyxFQUFFTCxRQUFRO0lBQ3hFLElBQUlNLFNBQVM7UUFDWkMsSUFBSUY7SUFDTDtJQUNBLElBQUlHLFVBQVVmLFFBQVFFLFdBQVdTLGNBQWM7SUFDL0MsT0FBTyxJQUFJLENBQUNQLE1BQU0sQ0FBQ0ksc0JBQXNCLENBQUMsSUFBSSxDQUFDSixNQUFNLENBQUNLLEdBQUcsRUFBRU0sU0FBU0YsUUFBUU47QUFDN0U7QUFFQTs7O0NBR0MsR0FDRFMsT0FBT0MsT0FBTyxHQUFHZCIsInNvdXJjZXMiOlsid2VicGFjazovL2NpdmlsLWVuZ2luZWVyaW5nLXBsYXRmb3JtLy4vbm9kZV9tb2R1bGVzL2JveC1ub2RlLXNkay9saWIvbWFuYWdlcnMvY29sbGVjdGlvbnMuanM/NzZiMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgTWFuYWdlciBmb3IgdGhlIEJveCBDb2xsZWN0aW9uIFJlc291cmNlXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFJlcXVpcmVtZW50c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG52YXIgdXJsUGF0aCA9IHJlcXVpcmUoJy4uL3V0aWwvdXJsLXBhdGgnKTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBQcml2YXRlXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbnZhciBCQVNFX1BBVEggPSAnL2NvbGxlY3Rpb25zJztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBQdWJsaWNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vKipcbiAqIFNpbXBsZSBtYW5hZ2VyIGZvciBpbnRlcmFjdGluZyB3aXRoIGFsbCAnQ29sbGVjdGlvbicgZW5kcG9pbnRzIGFuZCBhY3Rpb25zLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtCb3hDbGllbnR9IGNsaWVudCAtIFRoZSBCb3ggQVBJIENsaWVudCB0aGF0IGlzIHJlc3BvbnNpYmxlIGZvciBtYWtpbmcgY2FsbHMgdG8gdGhlIEFQSVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIENvbGxlY3Rpb25zKGNsaWVudCkge1xuXHR0aGlzLmNsaWVudCA9IGNsaWVudDtcbn1cblxuLyoqXG4gKiBSZXF1ZXN0cyBhbGwgb2YgYSB1c2VyJ3MgY29sbGVjdGlvbiBvYmplY3RzLlxuICpcbiAqIEFQSSBFbmRwb2ludDogJy9jb2xsZWN0aW9ucydcbiAqIE1ldGhvZDogR0VUXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSAtIENhbGxlZCB3aXRoIGEgY29sbGVjdGlvbiBvZiBjb2xsZWN0aW9ucyBpZiBzdWNjZXNzZnVsXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fSBBIHByb21pc2UgcmVzb2x2aW5nIHRvIHRoZSBjb2xsZWN0aW9uIG9mIGNvbGxlY3Rpb25zXG4gKi9cbkNvbGxlY3Rpb25zLnByb3RvdHlwZS5nZXRBbGwgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuXHRyZXR1cm4gdGhpcy5jbGllbnQud3JhcFdpdGhEZWZhdWx0SGFuZGxlcih0aGlzLmNsaWVudC5nZXQpKEJBU0VfUEFUSCwge30sIGNhbGxiYWNrKTtcbn07XG5cbi8qKlxuICogUmVxdWVzdHMgdGhlIGl0ZW1zIGluIHRoZSBjb2xsZWN0aW9uIG9iamVjdCB3aXRoIGEgZ2l2ZW4gSUQuXG4gKlxuICogQVBJIEVuZHBvaW50OiAnL2NvbGxlY3Rpb25zLzpjb2xsZWN0aW9uSUQvaXRlbXMnXG4gKiBNZXRob2Q6IEdFVFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xsZWN0aW9uSUQgLSBCb3ggSUQgb2YgdGhlIGNvbGxlY3Rpb24gd2l0aCBpdGVtcyBiZWluZyByZXF1ZXN0ZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBBZGRpdGlvbmFsIG9wdGlvbnMgZm9yIHRoZSByZXF1ZXN0LiBDYW4gYmUgbGVmdCBudWxsIGluIG1vc3QgY2FzZXMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gUGFzc2VkIHRoZSBpdGVtcyBpbmZvcm1hdGlvbiBpZiB0aGV5IHdlcmUgYWNxdWlyZWQgc3VjY2Vzc2Z1bGx5XG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fSBBIHByb21pc2UgcmVzb2x2aW5nIHRvIHRoZSBjb2xsZWN0aW9uIG9mIGl0ZW1zIGluIHRoZSBjb2xsZWN0aW9uXG4gKi9cbkNvbGxlY3Rpb25zLnByb3RvdHlwZS5nZXRJdGVtcyA9IGZ1bmN0aW9uKGNvbGxlY3Rpb25JRCwgb3B0aW9ucywgY2FsbGJhY2spIHtcblx0dmFyIHBhcmFtcyA9IHtcblx0XHRxczogb3B0aW9uc1xuXHR9O1xuXHR2YXIgYXBpUGF0aCA9IHVybFBhdGgoQkFTRV9QQVRILCBjb2xsZWN0aW9uSUQsICdpdGVtcycpO1xuXHRyZXR1cm4gdGhpcy5jbGllbnQud3JhcFdpdGhEZWZhdWx0SGFuZGxlcih0aGlzLmNsaWVudC5nZXQpKGFwaVBhdGgsIHBhcmFtcywgY2FsbGJhY2spO1xufTtcblxuLyoqXG4gKiBAbW9kdWxlIGJveC1ub2RlLXNkay9saWIvbWFuYWdlcnMvY29sbGVjdGlvbnNcbiAqIEBzZWUge0BMaW5rIENvbGxlY3Rpb25zfVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IENvbGxlY3Rpb25zO1xuIl0sIm5hbWVzIjpbInVybFBhdGgiLCJyZXF1aXJlIiwiQkFTRV9QQVRIIiwiQ29sbGVjdGlvbnMiLCJjbGllbnQiLCJwcm90b3R5cGUiLCJnZXRBbGwiLCJjYWxsYmFjayIsIndyYXBXaXRoRGVmYXVsdEhhbmRsZXIiLCJnZXQiLCJnZXRJdGVtcyIsImNvbGxlY3Rpb25JRCIsIm9wdGlvbnMiLCJwYXJhbXMiLCJxcyIsImFwaVBhdGgiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/box-node-sdk/lib/managers/collections.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/box-node-sdk/lib/managers/comments.js":
/*!************************************************************!*\
  !*** ./node_modules/box-node-sdk/lib/managers/comments.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * @fileoverview Manager for the Box Comments Resource\n */ \n// ------------------------------------------------------------------------------\n// Requirements\n// ------------------------------------------------------------------------------\nvar urlPath = __webpack_require__(/*! ../util/url-path */ \"(rsc)/./node_modules/box-node-sdk/lib/util/url-path.js\");\n// ------------------------------------------------------------------------------\n// Private\n// ------------------------------------------------------------------------------\nvar BASE_PATH = \"/comments\";\n// ------------------------------------------------------------------------------\n// Public\n// ------------------------------------------------------------------------------\n/**\n * Simple manager for interacting with all 'Comment' endpoints and actions.\n *\n * @constructor\n * @param {BoxClient} client - The Box API Client that is responsible for making calls to the API\n * @returns {void}\n */ function Comments(client) {\n    this.client = client;\n}\n/**\n * Requests a comment object with the given ID.\n *\n * API Endpoint: '/comments/:commentID'\n * Method: GET\n *\n * @param {string} commentID - Box ID of the comment being requested\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {Function} [callback] - Passed the comment information if it was acquired successfully\n * @returns {Promise<Object>} A promise resolving to the comment object\n */ Comments.prototype.get = function(commentID, options, callback) {\n    var params = {\n        qs: options\n    };\n    var apiPath = urlPath(BASE_PATH, commentID);\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Posts a new comment on a file.\n *\n * API Endpoint: '/comments\n * Method: POST\n *\n * @param {string} fileID - Box file id of the file to comment on\n * @param {string} commentBody - text of the comment\n * @param {Function} [callback] - passed the new comment data if it was posted successfully\n * @returns {Promise<Object>} A promise resolving to the new comment object\n */ Comments.prototype.create = function(fileID, commentBody, callback) {\n    // @TODO(bemerick) 2013-10-29: Don't hardcode this 'item'. Abstract to all commentable types...\n    var params = {\n        body: {\n            item: {\n                type: \"file\",\n                id: fileID\n            },\n            message: commentBody\n        }\n    };\n    return this.client.wrapWithDefaultHandler(this.client.post)(BASE_PATH, params, callback);\n};\n/**\n * Posts a new tagged comment on a file.\n *\n * API Endpoint: '/comments\n * Method: POST\n *\n * @param {string} fileID - Box file id of the file to comment on\n * @param {string} commentBody - text of the tagged comment\n * @param {Function} [callback] - passed the new tagged comment data if it was posted successfully\n * @returns {Promise<Object>} A promise resolving to the new comment object\n */ Comments.prototype.createTaggedComment = function(fileID, commentBody, callback) {\n    var params = {\n        body: {\n            item: {\n                type: \"file\",\n                id: fileID\n            },\n            tagged_message: commentBody\n        }\n    };\n    return this.client.wrapWithDefaultHandler(this.client.post)(BASE_PATH, params, callback);\n};\n/**\n * Posts a new comment as a reply to another comment.\n *\n * API Endpoint: '/comments\n * Method: POST\n *\n * @param {string} commentID - Comment ID of the comment to reply to\n * @param {string} commentBody - text of the comment\n * @param {Function} [callback] - passed the new comment data if it was posted successfully\n * @returns {Promise<Object>} A promise resolving to the new comment object\n */ Comments.prototype.reply = function(commentID, commentBody, callback) {\n    var params = {\n        body: {\n            item: {\n                type: \"comment\",\n                id: commentID\n            },\n            message: commentBody\n        }\n    };\n    return this.client.wrapWithDefaultHandler(this.client.post)(BASE_PATH, params, callback);\n};\n/**\n * Posts a new tagged comment as a reply to another comment.\n *\n * API Endpoint: '/comments\n * Method: POST\n *\n * @param {string} commentID - Comment ID of the comment to reply to\n * @param {string} commentBody - text of the tagged comment\n * @param {Function} [callback] - passed the new tagged comment data if it was posted successfully\n * @returns {Promise<Object>} A promise resolving to the new comment object\n */ Comments.prototype.createTaggedReply = function(commentID, commentBody, callback) {\n    var params = {\n        body: {\n            item: {\n                type: \"comment\",\n                id: commentID\n            },\n            tagged_message: commentBody\n        }\n    };\n    return this.client.wrapWithDefaultHandler(this.client.post)(BASE_PATH, params, callback);\n};\n/**\n * Update some information about a given comment.\n *\n * API Endpoint: '/comments/:commentID'\n * Method: PUT\n *\n * @param {string} commentID - Box ID of the comment being requested\n * @param {Object} updates - Fields to update on the comment\n * @param {Function} [callback] - Passed the updated comment information if it was acquired successfully\n * @returns {Promise<Object>} A promise resolving to the updated comment object\n */ Comments.prototype.update = function(commentID, updates, callback) {\n    var params = {\n        body: updates\n    };\n    var apiPath = urlPath(BASE_PATH, commentID);\n    return this.client.wrapWithDefaultHandler(this.client.put)(apiPath, params, callback);\n};\n/**\n * Delete a given comment.\n *\n * API Endpoint: '/comments/:commentID'\n * Method: DELETE\n *\n * @param {string} commentID - Box ID of the comment being requested\n * @param {Function} [callback] - Empty response body passed if successful.\n * @returns {Promise<void>} A promise resolving to nothing\n */ Comments.prototype.delete = function(commentID, callback) {\n    var apiPath = urlPath(BASE_PATH, commentID);\n    return this.client.wrapWithDefaultHandler(this.client.del)(apiPath, null, callback);\n};\n/**\n * @module box-node-sdk/lib/managers/comments\n * @see {@Link Comments}\n */ module.exports = Comments;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/box-node-sdk/lib/managers/comments.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/box-node-sdk/lib/managers/device-pins.js":
/*!***************************************************************!*\
  !*** ./node_modules/box-node-sdk/lib/managers/device-pins.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * @fileoverview Manager for the Device Pins resource\n * @author mwiller\n */ \n// ------------------------------------------------------------------------------\n// Requirements\n// ------------------------------------------------------------------------------\nvar urlPath = __webpack_require__(/*! ../util/url-path */ \"(rsc)/./node_modules/box-node-sdk/lib/util/url-path.js\");\n// ------------------------------------------------------------------------------\n// Private\n// ------------------------------------------------------------------------------\nvar BASE_PATH = \"/device_pinners\", ENTERPRISES_PATH = \"/enterprises\", DEVICE_PINNERS_SUBRESOURCE = \"device_pinners\";\n// ------------------------------------------------------------------------------\n// Public\n// ------------------------------------------------------------------------------\n/**\n * Simple manager for interacting with all Device Pin endpoints and actions.\n *\n * @constructor\n * @param {BoxClient} client - The Box API Client that is responsible for making calls to the API\n * @returns {void}\n */ function DevicePins(client) {\n    this.client = client;\n}\n/**\n * Get a specific device pinning record\n *\n * API Endpoint: '/device_pinners/:pinID'\n * Method: GET\n *\n * @param {string} pinID - The ID of the pin to retrieve\n * @param {Object} [options] - Optional paramters, can be left null in many cases\n * @param {Function} [callback] - Passed the device pin if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the device pin object\n */ DevicePins.prototype.get = function(pinID, options, callback) {\n    var apiPath = urlPath(BASE_PATH, pinID), params = {\n        qs: options\n    };\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Delete a specific device pinning record\n *\n * API Endpoint: '/device_pinners/:pinID'\n * Method: DELETE\n *\n * @param {string} pinID - The ID of the pin to delete\n * @param {Object} [options] - Optional paramters, can be left null in many cases\n * @param {Function} [callback] - Passed nothing if successful, error otherwise\n * @returns {Promise<void>} A promise resolving to nothing\n */ DevicePins.prototype.delete = function(pinID, options, callback) {\n    var apiPath = urlPath(BASE_PATH, pinID), params = {\n        qs: options\n    };\n    return this.client.wrapWithDefaultHandler(this.client.del)(apiPath, params, callback);\n};\n/**\n * Get all device pin records for the current enterprise\n *\n * API Endpoint: '/enterprises/:enterpriseID/device_pinners'\n * Method: GET\n *\n * @param {Object} [options] - Optional paramters, can be left null in many cases\n * @param {Function} [callback] - Passed a list of device pins if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the collection of device pins\n */ DevicePins.prototype.getAll = function(options, callback) {\n    return this.client.users.get(this.client.CURRENT_USER_ID, {\n        fields: \"enterprise\"\n    }).then((data)=>{\n        if (!data.enterprise || !data.enterprise.id) {\n            throw new Error(\"User must be in an enterprise to view device pins\");\n        }\n        var apiPath = urlPath(ENTERPRISES_PATH, data.enterprise.id, DEVICE_PINNERS_SUBRESOURCE), params = {\n            qs: options\n        };\n        return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params);\n    }).asCallback(callback);\n};\nmodule.exports = DevicePins;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYm94LW5vZGUtc2RrL2xpYi9tYW5hZ2Vycy9kZXZpY2UtcGlucy5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7O0NBR0MsR0FFRDtBQUVBLGlGQUFpRjtBQUNqRixlQUFlO0FBQ2YsaUZBQWlGO0FBQ2pGLElBQUlBLFVBQVVDLG1CQUFPQSxDQUFDO0FBRXRCLGlGQUFpRjtBQUNqRixVQUFVO0FBQ1YsaUZBQWlGO0FBQ2pGLElBQUlDLFlBQVksbUJBQ2ZDLG1CQUFtQixnQkFDbkJDLDZCQUE2QjtBQUU5QixpRkFBaUY7QUFDakYsU0FBUztBQUNULGlGQUFpRjtBQUVqRjs7Ozs7O0NBTUMsR0FDRCxTQUFTQyxXQUFXQyxNQUFNO0lBQ3pCLElBQUksQ0FBQ0EsTUFBTSxHQUFHQTtBQUNmO0FBRUE7Ozs7Ozs7Ozs7Q0FVQyxHQUNERCxXQUFXRSxTQUFTLENBQUNDLEdBQUcsR0FBRyxTQUFTQyxLQUFLLEVBQUVDLE9BQU8sRUFBRUMsUUFBUTtJQUUzRCxJQUFJQyxVQUFVWixRQUFRRSxXQUFXTyxRQUNoQ0ksU0FBUztRQUNSQyxJQUFJSjtJQUNMO0lBRUQsT0FBTyxJQUFJLENBQUNKLE1BQU0sQ0FBQ1Msc0JBQXNCLENBQUMsSUFBSSxDQUFDVCxNQUFNLENBQUNFLEdBQUcsRUFBRUksU0FBU0MsUUFBUUY7QUFDN0U7QUFFQTs7Ozs7Ozs7OztDQVVDLEdBQ0ROLFdBQVdFLFNBQVMsQ0FBQ1MsTUFBTSxHQUFHLFNBQVNQLEtBQUssRUFBRUMsT0FBTyxFQUFFQyxRQUFRO0lBRTlELElBQUlDLFVBQVVaLFFBQVFFLFdBQVdPLFFBQ2hDSSxTQUFTO1FBQ1JDLElBQUlKO0lBQ0w7SUFFRCxPQUFPLElBQUksQ0FBQ0osTUFBTSxDQUFDUyxzQkFBc0IsQ0FBQyxJQUFJLENBQUNULE1BQU0sQ0FBQ1csR0FBRyxFQUFFTCxTQUFTQyxRQUFRRjtBQUM3RTtBQUVBOzs7Ozs7Ozs7Q0FTQyxHQUNETixXQUFXRSxTQUFTLENBQUNXLE1BQU0sR0FBRyxTQUFTUixPQUFPLEVBQUVDLFFBQVE7SUFFdkQsT0FBTyxJQUFJLENBQUNMLE1BQU0sQ0FBQ2EsS0FBSyxDQUFDWCxHQUFHLENBQUMsSUFBSSxDQUFDRixNQUFNLENBQUNjLGVBQWUsRUFBRTtRQUFDQyxRQUFRO0lBQVksR0FDN0VDLElBQUksQ0FBQ0MsQ0FBQUE7UUFFTCxJQUFJLENBQUNBLEtBQUtDLFVBQVUsSUFBSSxDQUFDRCxLQUFLQyxVQUFVLENBQUNDLEVBQUUsRUFBRTtZQUM1QyxNQUFNLElBQUlDLE1BQU07UUFDakI7UUFFQSxJQUFJZCxVQUFVWixRQUFRRyxrQkFBa0JvQixLQUFLQyxVQUFVLENBQUNDLEVBQUUsRUFBRXJCLDZCQUMzRFMsU0FBUztZQUNSQyxJQUFJSjtRQUNMO1FBRUQsT0FBTyxJQUFJLENBQUNKLE1BQU0sQ0FBQ1Msc0JBQXNCLENBQUMsSUFBSSxDQUFDVCxNQUFNLENBQUNFLEdBQUcsRUFBRUksU0FBU0M7SUFDckUsR0FDQ2MsVUFBVSxDQUFDaEI7QUFDZDtBQUVBaUIsT0FBT0MsT0FBTyxHQUFHeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaXZpbC1lbmdpbmVlcmluZy1wbGF0Zm9ybS8uL25vZGVfbW9kdWxlcy9ib3gtbm9kZS1zZGsvbGliL21hbmFnZXJzL2RldmljZS1waW5zLmpzPzBjNDMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IE1hbmFnZXIgZm9yIHRoZSBEZXZpY2UgUGlucyByZXNvdXJjZVxuICogQGF1dGhvciBtd2lsbGVyXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFJlcXVpcmVtZW50c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG52YXIgdXJsUGF0aCA9IHJlcXVpcmUoJy4uL3V0aWwvdXJsLXBhdGgnKTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBQcml2YXRlXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbnZhciBCQVNFX1BBVEggPSAnL2RldmljZV9waW5uZXJzJyxcblx0RU5URVJQUklTRVNfUEFUSCA9ICcvZW50ZXJwcmlzZXMnLFxuXHRERVZJQ0VfUElOTkVSU19TVUJSRVNPVVJDRSA9ICdkZXZpY2VfcGlubmVycyc7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUHVibGljXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLyoqXG4gKiBTaW1wbGUgbWFuYWdlciBmb3IgaW50ZXJhY3Rpbmcgd2l0aCBhbGwgRGV2aWNlIFBpbiBlbmRwb2ludHMgYW5kIGFjdGlvbnMuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0JveENsaWVudH0gY2xpZW50IC0gVGhlIEJveCBBUEkgQ2xpZW50IHRoYXQgaXMgcmVzcG9uc2libGUgZm9yIG1ha2luZyBjYWxscyB0byB0aGUgQVBJXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gRGV2aWNlUGlucyhjbGllbnQpIHtcblx0dGhpcy5jbGllbnQgPSBjbGllbnQ7XG59XG5cbi8qKlxuICogR2V0IGEgc3BlY2lmaWMgZGV2aWNlIHBpbm5pbmcgcmVjb3JkXG4gKlxuICogQVBJIEVuZHBvaW50OiAnL2RldmljZV9waW5uZXJzLzpwaW5JRCdcbiAqIE1ldGhvZDogR0VUXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBpbklEIC0gVGhlIElEIG9mIHRoZSBwaW4gdG8gcmV0cmlldmVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBPcHRpb25hbCBwYXJhbXRlcnMsIGNhbiBiZSBsZWZ0IG51bGwgaW4gbWFueSBjYXNlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSAtIFBhc3NlZCB0aGUgZGV2aWNlIHBpbiBpZiBzdWNjZXNzZnVsLCBlcnJvciBvdGhlcndpc2VcbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59IEEgcHJvbWlzZSByZXNvbHZpbmcgdG8gdGhlIGRldmljZSBwaW4gb2JqZWN0XG4gKi9cbkRldmljZVBpbnMucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKHBpbklELCBvcHRpb25zLCBjYWxsYmFjaykge1xuXG5cdHZhciBhcGlQYXRoID0gdXJsUGF0aChCQVNFX1BBVEgsIHBpbklEKSxcblx0XHRwYXJhbXMgPSB7XG5cdFx0XHRxczogb3B0aW9uc1xuXHRcdH07XG5cblx0cmV0dXJuIHRoaXMuY2xpZW50LndyYXBXaXRoRGVmYXVsdEhhbmRsZXIodGhpcy5jbGllbnQuZ2V0KShhcGlQYXRoLCBwYXJhbXMsIGNhbGxiYWNrKTtcbn07XG5cbi8qKlxuICogRGVsZXRlIGEgc3BlY2lmaWMgZGV2aWNlIHBpbm5pbmcgcmVjb3JkXG4gKlxuICogQVBJIEVuZHBvaW50OiAnL2RldmljZV9waW5uZXJzLzpwaW5JRCdcbiAqIE1ldGhvZDogREVMRVRFXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBpbklEIC0gVGhlIElEIG9mIHRoZSBwaW4gdG8gZGVsZXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gT3B0aW9uYWwgcGFyYW10ZXJzLCBjYW4gYmUgbGVmdCBudWxsIGluIG1hbnkgY2FzZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gLSBQYXNzZWQgbm90aGluZyBpZiBzdWNjZXNzZnVsLCBlcnJvciBvdGhlcndpc2VcbiAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fSBBIHByb21pc2UgcmVzb2x2aW5nIHRvIG5vdGhpbmdcbiAqL1xuRGV2aWNlUGlucy5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24ocGluSUQsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG5cblx0dmFyIGFwaVBhdGggPSB1cmxQYXRoKEJBU0VfUEFUSCwgcGluSUQpLFxuXHRcdHBhcmFtcyA9IHtcblx0XHRcdHFzOiBvcHRpb25zXG5cdFx0fTtcblxuXHRyZXR1cm4gdGhpcy5jbGllbnQud3JhcFdpdGhEZWZhdWx0SGFuZGxlcih0aGlzLmNsaWVudC5kZWwpKGFwaVBhdGgsIHBhcmFtcywgY2FsbGJhY2spO1xufTtcblxuLyoqXG4gKiBHZXQgYWxsIGRldmljZSBwaW4gcmVjb3JkcyBmb3IgdGhlIGN1cnJlbnQgZW50ZXJwcmlzZVxuICpcbiAqIEFQSSBFbmRwb2ludDogJy9lbnRlcnByaXNlcy86ZW50ZXJwcmlzZUlEL2RldmljZV9waW5uZXJzJ1xuICogTWV0aG9kOiBHRVRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gT3B0aW9uYWwgcGFyYW10ZXJzLCBjYW4gYmUgbGVmdCBudWxsIGluIG1hbnkgY2FzZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gLSBQYXNzZWQgYSBsaXN0IG9mIGRldmljZSBwaW5zIGlmIHN1Y2Nlc3NmdWwsIGVycm9yIG90aGVyd2lzZVxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0gQSBwcm9taXNlIHJlc29sdmluZyB0byB0aGUgY29sbGVjdGlvbiBvZiBkZXZpY2UgcGluc1xuICovXG5EZXZpY2VQaW5zLnByb3RvdHlwZS5nZXRBbGwgPSBmdW5jdGlvbihvcHRpb25zLCBjYWxsYmFjaykge1xuXG5cdHJldHVybiB0aGlzLmNsaWVudC51c2Vycy5nZXQodGhpcy5jbGllbnQuQ1VSUkVOVF9VU0VSX0lELCB7ZmllbGRzOiAnZW50ZXJwcmlzZSd9KVxuXHRcdC50aGVuKGRhdGEgPT4ge1xuXG5cdFx0XHRpZiAoIWRhdGEuZW50ZXJwcmlzZSB8fCAhZGF0YS5lbnRlcnByaXNlLmlkKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignVXNlciBtdXN0IGJlIGluIGFuIGVudGVycHJpc2UgdG8gdmlldyBkZXZpY2UgcGlucycpO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgYXBpUGF0aCA9IHVybFBhdGgoRU5URVJQUklTRVNfUEFUSCwgZGF0YS5lbnRlcnByaXNlLmlkLCBERVZJQ0VfUElOTkVSU19TVUJSRVNPVVJDRSksXG5cdFx0XHRcdHBhcmFtcyA9IHtcblx0XHRcdFx0XHRxczogb3B0aW9uc1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5jbGllbnQud3JhcFdpdGhEZWZhdWx0SGFuZGxlcih0aGlzLmNsaWVudC5nZXQpKGFwaVBhdGgsIHBhcmFtcyk7XG5cdFx0fSlcblx0XHQuYXNDYWxsYmFjayhjYWxsYmFjayk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IERldmljZVBpbnM7XG4iXSwibmFtZXMiOlsidXJsUGF0aCIsInJlcXVpcmUiLCJCQVNFX1BBVEgiLCJFTlRFUlBSSVNFU19QQVRIIiwiREVWSUNFX1BJTk5FUlNfU1VCUkVTT1VSQ0UiLCJEZXZpY2VQaW5zIiwiY2xpZW50IiwicHJvdG90eXBlIiwiZ2V0IiwicGluSUQiLCJvcHRpb25zIiwiY2FsbGJhY2siLCJhcGlQYXRoIiwicGFyYW1zIiwicXMiLCJ3cmFwV2l0aERlZmF1bHRIYW5kbGVyIiwiZGVsZXRlIiwiZGVsIiwiZ2V0QWxsIiwidXNlcnMiLCJDVVJSRU5UX1VTRVJfSUQiLCJmaWVsZHMiLCJ0aGVuIiwiZGF0YSIsImVudGVycHJpc2UiLCJpZCIsIkVycm9yIiwiYXNDYWxsYmFjayIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/box-node-sdk/lib/managers/device-pins.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/box-node-sdk/lib/managers/enterprise.js":
/*!**************************************************************!*\
  !*** ./node_modules/box-node-sdk/lib/managers/enterprise.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * @fileoverview Manager for Enterprise resources\n */ \n// -----------------------------------------------------------------------------\n// Typedefs\n// -----------------------------------------------------------------------------\n/** @typedef {string} EnterpriseUserType */ /** @typedef {string} EnterpriseRole */ /** @typedef {string} EnterpriseUserStatus */ // -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\nvar urlPath = __webpack_require__(/*! ../util/url-path */ \"(rsc)/./node_modules/box-node-sdk/lib/util/url-path.js\");\n// -----------------------------------------------------------------------------\n// Private\n// -----------------------------------------------------------------------------\nvar USERS_PATH = \"/users\", INVITES_PATH = \"/invites\", FOLDERS_SUBRESOURCE = \"folders\", ROOT_FOLDER_ID = \"0\";\n// -----------------------------------------------------------------------------\n// Public\n// -----------------------------------------------------------------------------\n/**\n * Simple manager for interacting with all Enterprise endpoints and actions.\n *\n * @constructor\n * @param {BoxClient} client - The Box API Client that is responsible for making calls to the API\n * @returns {void}\n */ function Enterprise(client) {\n    this.client = client;\n}\n/**\n * List of valid user types\n * @readonly\n * @enum {EnterpriseUserType}\n */ Enterprise.prototype.userTypes = Object.freeze({\n    ALL: \"all\",\n    MANAGED: \"managed\",\n    EXTERNAL: \"external\"\n});\n/**\n * List of valid user statuses\n * @readonly\n * @enum {EnterpriseUserStatus}\n */ Enterprise.prototype.userStatuses = Object.freeze({\n    ACTIVE: \"active\",\n    INACTIVE: \"inactive\",\n    CANNOT_DELETE_OR_EDIT: \"cannot_delete_edit\",\n    CANNOT_DELETE_EDIT_OR_UPLOAD: \"cannot_delete_edit_upload\"\n});\n/**\n * List of valid roles\n * @readonly\n * @enum {EnterpriseRole}\n */ Enterprise.prototype.userRoles = Object.freeze({\n    USER: \"user\",\n    COADMIN: \"coadmin\"\n});\n/**\n * Get a list of users in the current enterprise\n *\n * API Endpoint: '/users'\n * Method: GET\n *\n * @param {Object} [options] - Optional parameters, can be left null in most cases\n * @param {string} [options.filter_term] - Filter the results to only users starting with the filter_term in either the name or the login\n * @param {int} [options.limit=100] - The number of records to return\n * @param {boolean} [options.usemarker=false] - Whether or not to use marker-based pagination\n * @param {string} [options.marker=''] - The marker for the page at which to start. Default is the first page\n * @param {int} [options.offset=0] - The record at which to start\n * @param {EnterpriseUserType} [options.user_type=managed] - The type of user to search for\n * @param {Function} [callback] - Passed the list of users if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the collection of users\n */ Enterprise.prototype.getUsers = function(options, callback) {\n    var apiPath = urlPath(USERS_PATH), params = {\n        qs: options\n    };\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Invites a user to join the enterprise\n *\n * API Endpoint: '/invites'\n * Method: POST\n *\n * @param {string} enterpriseID - The ID of the enterprise to invite the user to\n * @param {string} email - The email address of the user to invite\n * @param {Function} [callback] - Passed the invite object if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the invite object\n */ Enterprise.prototype.inviteUser = function(enterpriseID, email, callback) {\n    var apiPath = urlPath(INVITES_PATH), params = {\n        body: {\n            enterprise: {\n                id: enterpriseID\n            },\n            actionable_by: {\n                login: email\n            }\n        }\n    };\n    return this.client.wrapWithDefaultHandler(this.client.post)(apiPath, params, callback);\n};\n/**\n * Create a new user in the current enterprise\n *\n * API Endpoint: '/users'\n * Method: POST\n *\n * @param {string} login - The email address this user uses to login\n * @param {string} name - The name of this user\n * @param {Object} [options] - Optional parameters, can be left null in most cases\n * @param {EnterpriseRole} [options.role] - This user’s enterprise role\n * @param {string} [options.language] - The user's language\n * @param {boolean} [options.is_sync_enabled] - Whether or not this user can use Box Sync\n * @param {string} [options.job_title] - The user’s job title\n * @param {string} [options.phone] - The user’s phone number\n * @param {string} [options.address] - The user’s address\n * @param {int} [options.space_amount] - The user’s total available storage space in bytes\n * @param {Array} [options.tracking_codes] - An array of key/value pairs set by the user’s admin\n * @param {EnterpriseUserStatus} [options.status] - The user's status\n * @param {boolean} [options.can_see_managed_users] - Whether the user should be able to see other managed users\n * @param {string} [options.timezone] - The user's timezone\n * @param {boolean} [options.is_exempt_from_device_limits] - Whether to exempt this user from Enterprise device limits\n * @param {boolean} [options.is_exempt_from_login_verification] - Whether or not this user must use two-factor authentication\n * @param {Function} [callback] - Passed the created user if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the created user\n */ Enterprise.prototype.addUser = function(login, name, options, callback) {\n    var apiPath = urlPath(USERS_PATH), params = {\n        body: {\n            login,\n            name\n        }\n    };\n    Object.assign(params.body, options);\n    return this.client.wrapWithDefaultHandler(this.client.post)(apiPath, params, callback);\n};\n/**\n * Create a new app user in the current enterprise\n *\n * API Endpoint: '/users'\n * Method: POST\n *\n * @param {string} name - The name of this user\n * @param {Object} [options] - Optional parameters, can be left null in most cases\n * @param {string} [options.language] - The user's language\n * @param {string} [options.job_title] - The user’s job title\n * @param {string} [options.phone] - The user’s phone number\n * @param {string} [options.address] - The user’s address\n * @param {int} [options.space_amount] - The user’s total available storage space in bytes\n * @param {string} [options.timezone] - The user's timezone\n * @param {Function} [callback] - Passed the created user if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the created user\n */ Enterprise.prototype.addAppUser = function(name, options, callback) {\n    var apiPath = urlPath(USERS_PATH), params = {\n        body: {\n            name,\n            is_platform_access_only: true\n        }\n    };\n    Object.assign(params.body, options);\n    return this.client.wrapWithDefaultHandler(this.client.post)(apiPath, params, callback);\n};\n/**\n * Transfers all of a user's files into another user's account.\n *\n * API Endpoint: '/users/:sourceUserID/folders/0'\n * Method: PUT\n *\n * @param {string} sourceUserID - The ID of the user whose files will be transferred\n * @param {string} destUserID - The ID of the user to transfer the files to\n * @param {Function} [callback] - Passed the new folder which contains all the files if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the folder containing the transferred content\n */ Enterprise.prototype.transferUserContent = function(sourceUserID, destUserID, callback) {\n    var apiPath = urlPath(USERS_PATH, sourceUserID, FOLDERS_SUBRESOURCE, ROOT_FOLDER_ID), params = {\n        body: {\n            owned_by: {\n                id: destUserID\n            }\n        }\n    };\n    return this.client.wrapWithDefaultHandler(this.client.put)(apiPath, params, callback);\n};\nmodule.exports = Enterprise;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/box-node-sdk/lib/managers/enterprise.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/box-node-sdk/lib/managers/events.js":
/*!**********************************************************!*\
  !*** ./node_modules/box-node-sdk/lib/managers/events.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * @fileoverview Manager for the Box Events Resource\n */ \n// ------------------------------------------------------------------------------\n// Typedefs and Callbacks\n// ------------------------------------------------------------------------------\n/**\n * An event type constant\n * @typedef {string} EventType\n */ // ------------------------------------------------------------------------------\n// Requirements\n// ------------------------------------------------------------------------------\nvar urlPath = __webpack_require__(/*! ../util/url-path */ \"(rsc)/./node_modules/box-node-sdk/lib/util/url-path.js\"), errors = __webpack_require__(/*! ../util/errors */ \"(rsc)/./node_modules/box-node-sdk/lib/util/errors.js\"), EventStream = __webpack_require__(/*! ../event-stream */ \"(rsc)/./node_modules/box-node-sdk/lib/event-stream.js\"), EnterpriseEventStream = __webpack_require__(/*! ../enterprise-event-stream */ \"(rsc)/./node_modules/box-node-sdk/lib/enterprise-event-stream.js\"), Promise = __webpack_require__(/*! bluebird */ \"(rsc)/./node_modules/bluebird/js/release/bluebird.js\"), httpStatusCodes = __webpack_require__(/*! http-status */ \"(rsc)/./node_modules/http-status/lib/index.js\");\n// ------------------------------------------------------------------------------\n// Private\n// ------------------------------------------------------------------------------\n// Base path for all files endpoints\nvar BASE_PATH = \"/events\";\n/** @const {string} */ var CURRENT_STREAM_POSITION = \"now\";\n// ------------------------------------------------------------------------------\n// Public\n// ------------------------------------------------------------------------------\n/**\n * Simple manager for interacting with all 'Events' endpoints and actions.\n *\n * @param {BoxClient} client The Box API Client that is responsible for making calls to the API\n * @constructor\n */ function Events(client) {\n    // Attach the client, for making API calls\n    this.client = client;\n}\nEvents.prototype.CURRENT_STREAM_POSITION = CURRENT_STREAM_POSITION;\n/**\n * Get the current stream position.\n *\n * API Endpoint: '/events'\n * Method: GET\n *\n * @param {Function} [callback] Passed the current stream position if successful\n * @returns {Promise<string>} A promise resolving to the stream position\n */ Events.prototype.getCurrentStreamPosition = function(callback) {\n    var params = {\n        qs: {\n            stream_position: CURRENT_STREAM_POSITION\n        }\n    };\n    var apiPath = urlPath(BASE_PATH);\n    return this.client.get(apiPath, params).then((response)=>{\n        if (response.statusCode !== httpStatusCodes.OK) {\n            throw errors.buildUnexpectedResponseError(response);\n        }\n        return response.body.next_stream_position;\n    }).asCallback(callback);\n};\n/**\n * Get a chunk of events\n *\n * API Endpoint: '/events'\n * Method: GET\n *\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {Function} [callback] Passed the current stream position if successful\n * @returns {Promise<Object>} A promise resolving to the collection of events\n */ Events.prototype.get = function(options, callback) {\n    var params = {\n        qs: options\n    };\n    var apiPath = urlPath(BASE_PATH);\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Get information for long-polling until new events are available\n *\n * API Endpoint: '/events'\n * Method: OPTIONS\n *\n * @param {Function} [callback] Passed the long poll info if successful\n * @returns {Promise<Object>} A promise resolving to the long poll info\n */ Events.prototype.getLongPollInfo = function(callback) {\n    var apiPath = urlPath(BASE_PATH);\n    return this.client.options(apiPath, {}).then((response)=>{\n        if (response.statusCode !== httpStatusCodes.OK) {\n            throw errors.buildUnexpectedResponseError(response);\n        }\n        var longpollInfo = response.body.entries.find((entry)=>entry.type === \"realtime_server\");\n        if (!longpollInfo) {\n            throw errors.buildResponseError(\"No valid long poll server specified\", response);\n        }\n        return longpollInfo;\n    }).asCallback(callback);\n};\n/**\n * Create a stream of events, using the long-poll API to wait for new events.\n *\n * API Endpoint: '/events'\n * Method: OPTIONS\n *\n * @param {string} [streamPosition] Starting stream position\n * @param {Object} [options] Optional parameters for the event stream\n * @param {int} [options.retryDelay=1000] Number of ms to wait before retrying after an error\n * @param {int} [options.deduplicationFilterSize=5000] Number of IDs to track for deduplication\n * @param {int} [options.fetchInterval=1000] Minimunm number of ms between calls for more events\n * @param {Function} [callback] Passed the events stream if successful\n * @returns {Promise<EventStream>} A promise resolving to the event stream\n */ Events.prototype.getEventStream = function(streamPosition, options, callback) {\n    var self = this;\n    if (typeof streamPosition === \"string\") {\n        if (typeof options === \"function\") {\n            callback = options;\n            options = {};\n        }\n        return Promise.resolve(new EventStream(self.client, streamPosition, options)).asCallback(callback);\n    }\n    // Fix up optional arguments\n    callback = options;\n    options = streamPosition;\n    if (typeof options === \"function\") {\n        callback = options;\n        options = {};\n    }\n    return this.getCurrentStreamPosition().then((currentStreamPosition)=>new EventStream(self.client, currentStreamPosition, options)).asCallback(callback);\n};\n/**\n * Create a stream of enterprise events.\n *\n * By default, the stream starts from the current time.\n * Pass 'startDate' to start from a specific time.\n * Pass 'streamPosition' to start from a previous stream position, or '0' for all available past events (~1 year).\n * Once the stream catches up to the current time, it will begin polling every 'pollingInterval' seconds.\n * If 'pollingInterval' = 0, then the stream will end when it catches up to the current time (no polling).\n *\n * @param {Object} [options] - Options\n * @param {string} [options.streamPosition] - The stream position to start from (pass '0' for all past events)\n * @param {string} [options.startDate] - The date to start from\n * @param {string} [options.endDate] - The date to end at\n * @param {EventType[]} [options.eventTypeFilter] - Array of event types to return\n * @param {int} [options.pollingInterval=60] - Polling interval (in seconds).  Pass 0 for no polling.\n * @param {int} [options.chunkSize=500] - Number of events to fetch per call (max = 500)\n * @param {Function} [callback] Passed the events stream if successful\n * @returns {Promise<EnterpriseEventStream>} A promise resolving to the enterprise event stream\n */ Events.prototype.getEnterpriseEventStream = function(options, callback) {\n    var self = this;\n    return Promise.resolve(new EnterpriseEventStream(self.client, options)).asCallback(callback);\n};\n/**\n * Enum of enterprise event types\n *\n * @readonly\n * @enum {EventType}\n */ Events.prototype.enterpriseEventTypes = Object.freeze({\n    ADD_DEVICE_ASSOCIATION: \"ADD_DEVICE_ASSOCIATION\",\n    ADD_LOGIN_ACTIVITY_DEVICE: \"ADD_LOGIN_ACTIVITY_DEVICE\",\n    ADMIN_LOGIN: \"ADMIN_LOGIN\",\n    APPLICATION_PUBLIC_KEY_ADDED: \"APPLICATION_PUBLIC_KEY_ADDED\",\n    APPLICATION_PUBLIC_KEY_DELETED: \"APPLICATION_PUBLIC_KEY_DELETED\",\n    CHANGE_ADMIN_ROLE: \"CHANGE_ADMIN_ROLE\",\n    COLLABORATION_ACCEPT: \"COLLABORATION_ACCEPT\",\n    COLLABORATION_EXPIRATION: \"COLLABORATION_EXPIRATION\",\n    COLLABORATION_INVITE: \"COLLABORATION_INVITE\",\n    COLLABORATION_REMOVE: \"COLLABORATION_REMOVE\",\n    COLLABORATION_ROLE_CHANGE: \"COLLABORATION_ROLE_CHANGE\",\n    COMMENT_CREATE: \"COMMENT_CREATE\",\n    COMMENT_DELETE: \"COMMENT_DELETE\",\n    COMMENT_EDIT: \"COMMENT_EDIT\",\n    CONTENT_ACCESS: \"CONTENT_ACCESS\",\n    CONTENT_WORKFLOW_AUTOMATION_ADD: \"CONTENT_WORKFLOW_AUTOMATION_ADD\",\n    CONTENT_WORKFLOW_UPLOAD_POLICY_VIOLATION: \"CONTENT_WORKFLOW_UPLOAD_POLICY_VIOLATION\",\n    COPY: \"COPY\",\n    DELETE: \"DELETE\",\n    DELETE_USER: \"DELETE_USER\",\n    DOWNLOAD: \"DOWNLOAD\",\n    EDIT: \"EDIT\",\n    EDIT_USER: \"EDIT_USER\",\n    EMAIL_ALIAS_CONFIRM: \"EMAIL_ALIAS_CONFIRM\",\n    ENABLE_TWO_FACTOR_AUTH: \"ENABLE_TWO_FACTOR_AUTH\",\n    ENTERPRISE_APP_AUTHORIZATION_DELETE: \"ENTERPRISE_APP_AUTHORIZATION_DELETE\",\n    FAILED_LOGIN: \"FAILED_LOGIN\",\n    FILE_MARKED_MALICIOUS: \"FILE_MARKED_MALICIOUS\",\n    FILE_WATERMARKED_DOWNLOAD: \"FILE_WATERMARKED_DOWNLOAD\",\n    GROUP_ADD_FILE: \"GROUP_ADD_FILE\",\n    GROUP_ADD_FOLDER: \"GROUP_ADD_FOLDER\",\n    GROUP_ADD_ITEM: \"GROUP_ADD_ITEM\",\n    GROUP_ADD_USER: \"GROUP_ADD_USER\",\n    GROUP_CREATION: \"GROUP_CREATION\",\n    GROUP_DELETION: \"GROUP_DELETION\",\n    GROUP_EDITED: \"GROUP_EDITED\",\n    GROUP_REMOVE_FILE: \"GROUP_REMOVE_FILE\",\n    GROUP_REMOVE_FOLDER: \"GROUP_REMOVE_FOLDER\",\n    GROUP_REMOVE_USER: \"GROUP_REMOVE_USER\",\n    ITEM_MODIFY: \"ITEM_MODIFY\",\n    ITEM_OPEN: \"ITEM_OPEN\",\n    ITEM_SHARED_UPDATE: \"ITEM_SHARED_UPDATE\",\n    ITEM_SYNC: \"ITEM_SYNC\",\n    ITEM_UNSYNC: \"ITEM_UNSYNC\",\n    LOCK: \"LOCK\",\n    LOGIN: \"LOGIN\",\n    METADATA_INSTANCE_CREATE: \"METADATA_INSTANCE_CREATE\",\n    METADATA_INSTANCE_DELETE: \"METADATA_INSTANCE_DELETE\",\n    METADATA_INSTANCE_UPDATE: \"METADATA_INSTANCE_UPDATE\",\n    METADATA_TEMPLATE_CREATE: \"METADATA_TEMPLATE_CREATE\",\n    METADATA_TEMPLATE_UPDATE: \"METADATA_TEMPLATE_UPDATE\",\n    MOVE: \"MOVE\",\n    NEW_USER: \"NEW_USER\",\n    PREVIEW: \"PREVIEW\",\n    REMOVE_DEVICE_ASSOCIATION: \"REMOVE_DEVICE_ASSOCIATION\",\n    REMOVE_LOGIN_ACTIVITY_DEVICE: \"REMOVE_LOGIN_ACTIVITY_DEVICE\",\n    RENAME: \"RENAME\",\n    SHARE: \"SHARE\",\n    SHARE_EXPIRATION: \"SHARE_EXPIRATION\",\n    STORAGE_EXPIRATION: \"STORAGE_EXPIRATION\",\n    TASK_ASSIGNMENT_CREATE: \"TASK_ASSIGNMENT_CREATE\",\n    TASK_ASSIGNMENT_UPDATE: \"TASK_ASSIGNMENT_UPDATE\",\n    TASK_CREATE: \"TASK_CREATE\",\n    TERMS_OF_SERVICE_AGREE: \"TERMS_OF_SERVICE_AGREE\",\n    TERMS_OF_SERVICE_REJECT: \"TERMS_OF_SERVICE_REJECT\",\n    UNDELETE: \"UNDELETE\",\n    UNLOCK: \"UNLOCK\",\n    UNSHARE: \"UNSHARE\",\n    UPDATE_COLLABORATION_EXPIRATION: \"UPDATE_COLLABORATION_EXPIRATION\",\n    UPDATE_SHARE_EXPIRATION: \"UPDATE_SHARE_EXPIRATION\",\n    UPLOAD: \"UPLOAD\",\n    WATERMARK_LABEL_CREATE: \"WATERMARK_LABEL_CREATE\",\n    WATERMARK_LABEL_DELETE: \"WATERMARK_LABEL_DELETE\"\n});\nmodule.exports = Events;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/box-node-sdk/lib/managers/events.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/box-node-sdk/lib/managers/files.js":
/*!*********************************************************!*\
  !*** ./node_modules/box-node-sdk/lib/managers/files.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * @fileoverview Manager for the Box Files Resource\n */ \n// -----------------------------------------------------------------------------\n// Typedefs\n// -----------------------------------------------------------------------------\n/**\n * A representation request type constant\n * @typedef {string} FileRepresentationType Different representations we can request from reps endpoint\n */ // -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\n/**\n * @typedef {Object} UploadPart\n * @property {string} part_id An 8-character hexadecimal string identifying the part\n * @property {int} offset The byte offset of the part within the whole file\n * @property {int} size The size of the part in bytes\n */ // -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\nvar urlPath = __webpack_require__(/*! ../util/url-path */ \"(rsc)/./node_modules/box-node-sdk/lib/util/url-path.js\"), errors = __webpack_require__(/*! ../util/errors */ \"(rsc)/./node_modules/box-node-sdk/lib/util/errors.js\"), httpStatusCodes = __webpack_require__(/*! http-status */ \"(rsc)/./node_modules/http-status/lib/index.js\"), crypto = __webpack_require__(/*! crypto */ \"crypto\"), Promise = __webpack_require__(/*! bluebird */ \"(rsc)/./node_modules/bluebird/js/release/bluebird.js\"), Readable = (__webpack_require__(/*! stream */ \"stream\").Readable), urlTemplate = __webpack_require__(/*! url-template */ \"(rsc)/./node_modules/url-template/lib/url-template.js\"), ChunkedUploader = __webpack_require__(/*! ../chunked-uploader */ \"(rsc)/./node_modules/box-node-sdk/lib/chunked-uploader.js\");\n// -----------------------------------------------------------------------------\n// Private\n// -----------------------------------------------------------------------------\n// Base path for all files endpoints\nvar BASE_PATH = \"/files\", VERSIONS_SUBRESOURCE = \"/versions\", WATERMARK_SUBRESOURCE = \"/watermark\", UPLOAD_SESSION_SUBRESOURCE = \"/upload_sessions\", ZIP_DOWNLOAD_PATH = \"/zip_downloads\";\n// Enum of valid lock types\nvar lockTypes = {\n    LOCK: \"lock\",\n    UNLOCK: \"unlock\"\n};\n/**\n * Returns the multipart form value for file upload metadata.\n * @param {string} parentFolderID - the ID of the parent folder to upload to\n * @param {string} filename - the file name that the uploaded file should have\n * @param {Object} [options] - Optional metadata\n * @returns {Object} - the form value expected by the API for the 'metadata' key\n * @private\n */ function createFileMetadataFormData(parentFolderID, filename, options) {\n    // Although the filename and parent folder ID can be specified without using a\n    // metadata form field, Platform has recommended that we use the metadata form\n    // field to specify these parameters (one benefit is that UTF-8 characters can\n    // be specified in the filename).\n    var metadata = {\n        name: filename,\n        parent: {\n            id: parentFolderID\n        }\n    };\n    Object.assign(metadata, options);\n    return JSON.stringify(metadata);\n}\n/**\n * Returns the multipart form value for file upload content.\n * @param {string|Buffer|Stream} content - the content of the file being uploaded\n * @param {Object} options - options for the content\n * @returns {Object} - the form value expected by the API for the 'content' key\n * @private\n */ function createFileContentFormData(content, options) {\n    // The upload API appears to look for a form field that contains a filename\n    // property and assume that this form field contains the file content. Thus,\n    // the value of name does not actually matter (as long as it does not conflict\n    // with other field names). Similarly, the value of options.filename does not\n    // matter either (as long as it exists), since the upload API will use the\n    // filename specified in the metadata form field instead.\n    return {\n        value: content,\n        options: Object.assign({\n            filename: \"unused\"\n        }, options)\n    };\n}\n/**\n * Poll the representation info URL until representation is generated,\n * then return content URL template.\n * @param {BoxClient} client The client to use for making API calls\n * @param {string} infoURL The URL to use for getting representation info\n * @returns {Promise<string>} A promise resolving to the content URL template\n */ function pollRepresentationInfo(client, infoURL) {\n    return client.get(infoURL).then((response)=>{\n        if (response.statusCode !== 200) {\n            throw errors.buildUnexpectedResponseError(response);\n        }\n        var info = response.body;\n        switch(info.status.state){\n            case \"success\":\n            case \"viewable\":\n            case \"error\":\n                return info;\n            case \"none\":\n            case \"pending\":\n                return Promise.delay(1000).then(()=>pollRepresentationInfo(client, infoURL));\n            default:\n                throw new Error(`Unknown representation status: ${info.status.state}`);\n        }\n    });\n}\n// ------------------------------------------------------------------------------\n// Public\n// ------------------------------------------------------------------------------\n/**\n * Simple manager for interacting with all 'File' endpoints and actions.\n *\n * @param {BoxClient} client The Box API Client that is responsible for making calls to the API\n * @constructor\n */ function Files(client) {\n    // Attach the client, for making API calls\n    this.client = client;\n}\n/**\n * Requests a file object with the given ID.\n *\n * API Endpoint: '/files/:fileID'\n * Method: GET\n *\n * @param {string} fileID - Box ID of the file being requested\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {Function} [callback] - Passed the file information if it was acquired successfully\n * @returns {Promise<Object>} A promise resolving to the file object\n */ Files.prototype.get = function(fileID, options, callback) {\n    var params = {\n        qs: options\n    };\n    var apiPath = urlPath(BASE_PATH, fileID);\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Requests a download URL for a given file.\n *\n * API Endpoint: '/files/:fileID/content'\n * Method: GET\n * Special Expected Responses:\n *   202 ACCEPTED - Download isn't available yet. Returns an error.\n *   302 FOUND - Download is available. A Download URL is returned.\n *\n * @param {string} fileID - Box ID of the file being requested\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {Function} [callback] - Passed the download URL if request was successful.\n * @returns {Promise<string>} A promise resolving to the file's download URL\n */ Files.prototype.getDownloadURL = function(fileID, options, callback) {\n    var params = {\n        qs: options\n    };\n    var apiPath = urlPath(BASE_PATH, fileID, \"/content\");\n    // Handle Special API Response\n    return this.client.get(apiPath, params).then((response)=>{\n        switch(response.statusCode){\n            // 302 - Found\n            // No data returned, but the location header points to a download link for that file.\n            case httpStatusCodes.FOUND:\n                return response.headers.location;\n            // 202 - Download isn't ready yet.\n            case httpStatusCodes.ACCEPTED:\n                throw errors.buildResponseError(response, \"Download not ready at this time\");\n            // Unexpected Response\n            default:\n                throw errors.buildUnexpectedResponseError(response);\n        }\n    }).asCallback(callback);\n};\n/**\n * Requests a Readable Stream for the given file ID.\n *\n * API Endpoint: '/files/:fileID/content'\n * Method: GET\n * Special Expected Responses:\n *   202 ACCEPTED - Download isn't available yet. Returns an error.\n *   302 FOUND - Download is available. A Download stream is returned.\n *\n * @param {string} fileID - Box ID of the file being requested\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {string} [options.version] - ID of the version of this file to download\n * @param {int[]} [options.byteRange] - starting and ending bytes of the file to read, e.g. [0, 99] to read the first 100 bytes\n * @param {Function} [callback] - passed the readable stream if request was successful\n * @returns {Promise<Readable>} A promise resolving for the file stream\n */ Files.prototype.getReadStream = function(fileID, options, callback) {\n    options = options || {};\n    var downloadStreamOptions = {\n        streaming: true,\n        headers: {}\n    };\n    if (options.byteRange) {\n        var range = options.byteRange;\n        delete options.byteRange;\n        downloadStreamOptions.headers.Range = `bytes=${range[0]}-${range[1]}`;\n    }\n    // Get the download URL to download from\n    return this.getDownloadURL(fileID, options)// Return a read stream to download the file\n    .then((url)=>this.client.get(url, downloadStreamOptions)).asCallback(callback);\n};\n/**\n * Requests a Thumbnail for a given file.\n *\n * API Endpoint: '/files/:fileID/thumbnail.png'\n * Method: GET\n * Special Expected Responses:\n *   200 OK - Thumbnail available. Returns a thumbnail file.\n *   202 ACCEPTED - Thumbnail isn't available yet. Returns a `location` URL for a generic placeholder thumbnail.\n *   302 FOUND - Unable to generate thumbnail. Returns a `location` URL for a generic placeholder thumbnail.\n *\n * @param {string} fileID - Box ID of the file being requested\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {Function} [callback] - Passed the thumbnail file or the URL to a placeholder thumbnail if successful.\n * @returns {Promise<Object>} A promise resolving to the thumbnail information\n */ Files.prototype.getThumbnail = function(fileID, options, callback) {\n    var params = {\n        qs: options,\n        json: false\n    };\n    var apiPath = urlPath(BASE_PATH, fileID, \"/thumbnail.png\");\n    // Handle Special API Response\n    return this.client.get(apiPath, params).then((response)=>{\n        switch(response.statusCode){\n            // 202 - Thumbnail will be generated, but is not ready yet\n            // 302 - Thumbnail can not be generated\n            // return the url for a thumbnail placeholder\n            case httpStatusCodes.ACCEPTED:\n            case httpStatusCodes.FOUND:\n                return {\n                    statusCode: response.statusCode,\n                    location: response.headers.location\n                };\n            // 200 - Thumbnail image recieved\n            // return the thumbnail file\n            case httpStatusCodes.OK:\n                return {\n                    statusCode: response.statusCode,\n                    file: response.body\n                };\n            // Unexpected Response\n            default:\n                throw errors.buildUnexpectedResponseError(response);\n        }\n    }).asCallback(callback);\n};\n/**\n * Gets the comments on a file.\n *\n * API Endpoint: '/files/:fileID/comments'\n * Method: GET\n *\n * @param {string} fileID - Box file id of the file\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {Function} [callback] - passed the file comments if they were successfully acquired\n * @returns {Promise<Object>} A promise resolving to the collection of comments\n */ Files.prototype.getComments = function(fileID, options, callback) {\n    var params = {\n        qs: options\n    };\n    var apiPath = urlPath(BASE_PATH, fileID, \"/comments\");\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Update some information about a given file.\n *\n * API Endpoint: '/files/:fileID'\n * Method: PUT\n *\n * @param {string} fileID - Box ID of the file being requested\n * @param {Object} updates - File fields to update\n * @param {string} [updates.etag] Only apply the updates if the file etag matches\n * @param {Function} [callback] - Passed the updated file information if it was acquired successfully\n * @returns {Promise<Object>} A promise resolving to the update file object\n */ Files.prototype.update = function(fileID, updates, callback) {\n    var params = {\n        body: updates\n    };\n    if (updates && updates.etag) {\n        params.headers = {\n            \"If-Match\": updates.etag\n        };\n        delete updates.etag;\n    }\n    var apiPath = urlPath(BASE_PATH, fileID);\n    return this.client.wrapWithDefaultHandler(this.client.put)(apiPath, params, callback);\n};\n/**\n * Add a file to a given collection\n *\n * API Endpoint: '/files/:fileID'\n * Method: PUT\n *\n * @param {string} fileID - The file to add to the collection\n * @param {string} collectionID - The collection to add the file to\n * @param {Function} [callback] - Passed the updated file if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the updated file object\n */ Files.prototype.addToCollection = function(fileID, collectionID, callback) {\n    return this.get(fileID, {\n        fields: \"collections\"\n    }).then((data)=>{\n        var collections = data.collections || [];\n        // Convert to correct format\n        collections = collections.map((c)=>({\n                id: c.id\n            }));\n        if (!collections.find((c)=>c.id === collectionID)) {\n            collections.push({\n                id: collectionID\n            });\n        }\n        return this.update(fileID, {\n            collections\n        });\n    }).asCallback(callback);\n};\n/**\n * Remove a file from a given collection\n *\n * API Endpoint: '/files/:fileID'\n * Method: PUT\n *\n * @param {string} fileID - The file to remove from the collection\n * @param {string} collectionID - The collection to remove the file from\n * @param {Function} [callback] - Passed the updated file if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the updated file object\n */ Files.prototype.removeFromCollection = function(fileID, collectionID, callback) {\n    return this.get(fileID, {\n        fields: \"collections\"\n    }).then((data)=>{\n        var collections = data.collections || [];\n        // Convert to correct object format and remove the specified collection\n        collections = collections.map((c)=>({\n                id: c.id\n            })).filter((c)=>c.id !== collectionID);\n        return this.update(fileID, {\n            collections\n        });\n    }).asCallback(callback);\n};\n/**\n * Move a file into a new parent folder.\n *\n * API Endpoint: '/files/:fileID'\n * Method: PUT\n *\n * @param {string} fileID - The Box ID of the file being requested\n * @param {string} newParentID - The Box ID for the new parent folder. '0' to move to All Files.\n * @param {Function} [callback] - Passed the updated file information if it was acquired successfully\n * @returns {Promise<Object>} A promise resolving to the updated file object\n */ Files.prototype.move = function(fileID, newParentID, callback) {\n    var params = {\n        body: {\n            parent: {\n                id: newParentID\n            }\n        }\n    };\n    var apiPath = urlPath(BASE_PATH, fileID);\n    return this.client.wrapWithDefaultHandler(this.client.put)(apiPath, params, callback);\n};\n/**\n * Copy a file into a new folder.\n *\n * API Endpoint: '/files/:fileID/copy\n * Method: POST\n *\n * @param {string} fileID - The Box ID of the file being requested\n * @param {string} newParentID - The Box ID for the new parent folder. '0' to copy to All Files.\n * @param {Object} [options] - Optional parameters for the copy operation, can be left null in most cases\n * @param {string} [options.name] - A new name to use if there is an identically-named item in the new parent folder\n * @param {Function} [callback] - passed the new file info if call was successful\n * @returns {Promise<Object>} A promise resolving to the new file object\n */ Files.prototype.copy = function(fileID, newParentID, options, callback) {\n    // @NOTE(mwiller) 2016-10-25: Shuffle arguments to maintain backward compatibility\n    //  This can be removed at the v2.0 update\n    if (typeof options === \"function\") {\n        callback = options;\n        options = {};\n    }\n    options = options || {};\n    options.parent = {\n        id: newParentID\n    };\n    var params = {\n        body: options\n    };\n    var apiPath = urlPath(BASE_PATH, fileID, \"/copy\");\n    return this.client.wrapWithDefaultHandler(this.client.post)(apiPath, params, callback);\n};\n/**\n * Delete a given file.\n *\n * API Endpoint: '/files/:fileID'\n * Method: DELETE\n *\n * @param {string} fileID - Box ID of the file being requested\n * @param {Object} [options] Optional parameters\n * @param {string} [options.etag] Only delete the file if the etag value matches\n * @param {Function} [callback] - Empty response body passed if successful.\n * @returns {Promise<void>} A promise resolving to nothing\n */ Files.prototype.delete = function(fileID, options, callback) {\n    // Switch around arguments if necessary for backwards compatibility\n    if (typeof options === \"function\") {\n        callback = options;\n        options = {};\n    }\n    var params = {};\n    if (options && options.etag) {\n        params.headers = {\n            \"If-Match\": options.etag\n        };\n    }\n    var apiPath = urlPath(BASE_PATH, fileID);\n    return this.client.wrapWithDefaultHandler(this.client.del)(apiPath, params, callback);\n};\n/**\n * Get preflight information for a new file upload.  Without any file data,\n * this will return an upload URL and token to be used when uploading the file.\n * Using this upload URL will allow for the fastest upload, and the one-time\n * token can be passed to a worker or other client to actually perform the\n * upload with.  If file data (e.g. size, parent, name) is passed, it will be\n * validated as if the actual file were being uploaded.  This enables checking\n * of preconditions such as name uniqueness and available storage space before\n * attempting a large file upload.\n *\n * API Endpoint: '/files/content'\n * Method: OPTIONS\n *\n * @param {string} parentFolderID - The id of the parent folder to upload to\n * @param {Object} [fileData] - Optional data about the file to be uploaded\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {Function} [callback] - Called with upload data if successful, or err if the upload would not succeed\n * @returns {Promise<Object>} A promise resolving to the upload data\n */ Files.prototype.preflightUploadFile = function(parentFolderID, fileData, options, callback) {\n    var params = {\n        body: {\n            parent: {\n                id: parentFolderID\n            }\n        },\n        qs: options\n    };\n    if (fileData) {\n        Object.assign(params.body, fileData);\n    }\n    var apiPath = urlPath(BASE_PATH, \"/content\");\n    return this.client.wrapWithDefaultHandler(this.client.options)(apiPath, params, callback);\n};\n/**\n * Get preflight information for a file version upload.  Without any file data,\n * this will return an upload URL and token to be used when uploading the file.\n * Using this upload URL will allow for the fastest upload, and the one-time\n * token can be passed to a worker or other client to actually perform the\n * upload with.  If file data (e.g. size, parent, name) is passed, it will be\n * validated as if the actual file were being uploaded.  This enables checking\n * of preconditions such as name uniqueness and available storage space before\n * attempting a large file upload.\n *\n * API Endpoint: '/files/:fileID/content'\n * Method: OPTIONS\n *\n * @param {string} fileID - The file ID to which a new version will be uploaded\n * @param {Object} [fileData] - Optional data about the file to be uploaded\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {Function} [callback] - Called with upload data if successful, or err if the upload would not succeed\n * @returns {Promise<Object>} A promise resolving to the upload data\n */ Files.prototype.preflightUploadNewFileVersion = function(fileID, fileData, options, callback) {\n    var params = {\n        qs: options\n    };\n    if (fileData) {\n        params.body = fileData;\n    }\n    var apiPath = urlPath(BASE_PATH, fileID, \"/content\");\n    return this.client.wrapWithDefaultHandler(this.client.options)(apiPath, params, callback);\n};\n/**\n * If there are previous versions of this file, this method can be used to promote one of the older\n * versions to the top of the stack. This actually mints a copy of the old version and puts it on\n * the top of the versions stack. The file will have the exact same contents, the same SHA1/etag,\n * and the same name as the original. Other properties such as comments do not get updated to their former values.\n *\n * API Endpoint: '/files/:fileID/versions/current'\n * Method: POST\n *\n * @param {string} fileID - The file ID which version will be promoted\n * @param {string} versionID - The ID of the file_version that you want to make current\n * @param {Function} [callback] - Passed the promoted file version information if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the promoted file version\n */ Files.prototype.promoteVersion = function(fileID, versionID, callback) {\n    var apiPath = urlPath(BASE_PATH, fileID, VERSIONS_SUBRESOURCE, \"/current\"), params = {\n        body: {\n            type: \"file_version\",\n            id: versionID\n        }\n    };\n    return this.client.wrapWithDefaultHandler(this.client.post)(apiPath, params, callback);\n};\n/**\n * Uploads a new file. Unlike non-upload methods, this method will not perform any retries.\n * This method currently does not support any optional parameters such as contentModifiedAt.\n *\n * API Endpoint: '/files/content'\n * Method: POST\n *\n * @param {string} parentFolderID - the id of the parent folder to upload to\n * @param {string} filename - the file name that the uploaded file should have\n * @param {string|Buffer|ReadStream} content - the content of the file. It can be a string, a Buffer, or a read stream\n * (like that returned by fs.createReadStream()).\n * @param {Object} [options] - Optional parameters\n * @param {string} [options.content_created_at] - RFC 3339 timestamp when the file was created\n * @param {string} [options.content_modified_at] - RFC 3339 timestamp when the file was last modified\n * @param {int} [options.content_length] - Optional length of the content. Required if content is a read stream of any type other than fs stream.\n * @param {Function} [callback] - called with data about the upload if successful, or an error if the\n * upload failed\n * @returns {Promise<Object>} A promise resolving to the uploaded file\n */ Files.prototype.uploadFile = function(parentFolderID, filename, content, options, callback) {\n    // Shuffle around optional parameter\n    if (typeof options === \"function\") {\n        callback = options;\n        options = {};\n    }\n    var formOptions = {};\n    if (options && options.hasOwnProperty(\"content_length\")) {\n        formOptions.knownLength = options.content_length;\n        // Delete content_length from options so it's not added to the attributes of the form\n        delete options.content_length;\n    }\n    var apiPath = urlPath(BASE_PATH, \"/content\"), multipartFormData = {\n        attributes: createFileMetadataFormData(parentFolderID, filename, options),\n        content: createFileContentFormData(content, formOptions)\n    };\n    return this.client.wrapWithDefaultHandler(this.client.upload)(apiPath, null, multipartFormData, callback);\n};\n/**\n * Uploads a new version of a file. Unlike non-upload methods, this method will not perform any retries.\n * This method currently does not support any optional parameters such as contentModifiedAt.\n *\n * API Endpoint: '/files/:fileID/content'\n * Method: POST\n *\n * @param {string} fileID - the id of the file to upload a new version of\n * @param {string|Buffer|Stream} content - the content of the file. It can be a string, a Buffer, or a read stream\n * (like that returned by fs.createReadStream()).\n * @param {Object} [options] - Optional parameters\n * @param {string} [options.content_modified_at] - RFC 3339 timestamp when the file was last modified\n * @param {string} [options.name] - A new name for the file\n * @param {int} [options.content_length] - Optional length of the content. Required if content is a read stream of any type other than fs stream.\n * @param {Function} [callback] - called with data about the upload if successful, or an error if the\n * upload failed\n * @returns {Promise<Object>} A promise resolving to the uploaded file\n */ Files.prototype.uploadNewFileVersion = function(fileID, content, options, callback) {\n    // Shuffle around optional parameter\n    if (typeof options === \"function\") {\n        callback = options;\n        options = {};\n    }\n    var apiPath = urlPath(BASE_PATH, fileID, \"/content\"), multipartFormData = {};\n    var formOptions = {};\n    if (options) {\n        if (options.hasOwnProperty(\"content_length\")) {\n            formOptions.knownLength = options.content_length;\n            // Delete content_length from options so it's not added to the attributes of the form\n            delete options.content_length;\n        }\n        multipartFormData.attributes = JSON.stringify(options);\n    }\n    multipartFormData.content = createFileContentFormData(content, formOptions);\n    return this.client.wrapWithDefaultHandler(this.client.upload)(apiPath, null, multipartFormData, callback);\n};\n/**\n * Retrieves all metadata associated with a file.\n *\n * API Endpoint: '/files/:fileID/metadata'\n * Method: GET\n *\n * @param {string} fileID - the ID of the file to get metadata for\n * @param {Function} [callback] - called with an array of metadata when successful\n * @returns {Promise<Object>} A promise resolving to a collection of metadata on the file\n */ Files.prototype.getAllMetadata = function(fileID, callback) {\n    var apiPath = urlPath(BASE_PATH, fileID, \"metadata\");\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, null, callback);\n};\n/**\n * Retrieve a single metadata template instance for a file.\n *\n * API Endpoint: '/files/:fileID/metadata/:scope/:template'\n * Method: GET\n *\n * @param {string} fileID - The ID of the file to retrive the metadata of\n * @param {string} scope - The scope of the metadata template, e.g. \"global\"\n * @param {string} template - The metadata template to retrieve\n * @param {Function} [callback] - Passed the metadata template if successful\n * @returns {Promise<Object>} A promise resolving to the metadata template\n */ Files.prototype.getMetadata = function(fileID, scope, template, callback) {\n    var apiPath = urlPath(BASE_PATH, fileID, \"metadata\", scope, template);\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, null, callback);\n};\n/**\n * Adds metadata to a file.  Metadata must either match a template schema or\n * be placed into the unstructured \"properties\" template in global scope.\n *\n * API Endpoint: '/files/:fileID/metadata/:scope/:template'\n * Method: POST\n *\n * @param {string} fileID - The ID of the file to add metadata to\n * @param {string} scope - The scope of the metadata template, e.g. \"enterprise\"\n * @param {string} template - The metadata template schema to add\n * @param {Object} data - Key/value pairs tp add as metadata\n * @param {Function} [callback] - Called with error if unsuccessful\n * @returns {Promise<Object>} A promise resolving to the new metadata\n */ Files.prototype.addMetadata = function(fileID, scope, template, data, callback) {\n    var apiPath = urlPath(BASE_PATH, fileID, \"metadata\", scope, template), params = {\n        body: data\n    };\n    return this.client.wrapWithDefaultHandler(this.client.post)(apiPath, params, callback);\n};\n/**\n * Updates a metadata template instance with JSON Patch-formatted data.\n *\n * API Endpoint: '/files/:fileID/metadata/:scope/:template'\n * Method: PUT\n *\n * @param {string} fileID - The file to update metadata for\n * @param {string} scope - The scope of the template to update\n * @param {string} template - The template to update\n * @param {Object} patch - The patch data\n * @param {Function} [callback] - Called with updated metadata if successful\n * @returns {Promise<Object>} A promise resolving to the updated metadata\n */ Files.prototype.updateMetadata = function(fileID, scope, template, patch, callback) {\n    var apiPath = urlPath(BASE_PATH, fileID, \"metadata\", scope, template), params = {\n        body: patch,\n        headers: {\n            \"Content-Type\": \"application/json-patch+json\"\n        }\n    };\n    return this.client.wrapWithDefaultHandler(this.client.put)(apiPath, params, callback);\n};\n/**\n * Sets metadata on a file, overwriting any metadata that exists for the provided keys.\n *\n * @param {string} fileID - The file to set metadata on\n * @param {string} scope - The scope of the metadata template\n * @param {string} template - The key of the metadata template\n * @param {Object} metadata - The metadata to set\n * @param {Function} [callback] - Called with updated metadata if successful\n * @returns {Promise<Object>} A promise resolving to the updated metadata\n */ Files.prototype.setMetadata = function(fileID, scope, template, metadata, callback) {\n    return this.addMetadata(fileID, scope, template, metadata).catch((err)=>{\n        if (err.statusCode !== 409) {\n            throw err;\n        }\n        // Metadata already exists on the file; update instead\n        var updates = Object.keys(metadata).map((key)=>({\n                op: \"add\",\n                path: `/${key}`,\n                value: metadata[key]\n            }));\n        return this.updateMetadata(fileID, scope, template, updates);\n    }).asCallback(callback);\n};\n/**\n * Deletes a metadata template from a file.\n *\n * API Endpoint: '/files/:fileID/metadata/:scope/:template'\n * Method: DELETE\n *\n * @param {string} fileID - The ID of the file to remove metadata from\n * @param {string} scope - The scope of the metadata template\n * @param {string} template - The template to remove from the file\n * @param {Function} [callback] - Called with nothing if successful, error otherwise\n * @returns {Promise<void>} A promise resolving to nothing\n */ Files.prototype.deleteMetadata = function(fileID, scope, template, callback) {\n    var apiPath = urlPath(BASE_PATH, fileID, \"metadata\", scope, template);\n    return this.client.wrapWithDefaultHandler(this.client.del)(apiPath, null, callback);\n};\n/**\n * Permanently deletes an item that is in the trash. The item will no longer exist in Box. This action cannot be undone.\n *\n * API Endpoint: '/files/:fileID/trash'\n * Method: DELETE\n *\n * @param {string} fileID - The ID of the file to remove metadata from\n * @param {Object} [options] Optional parameters\n * @param {string} [options.etag] Only delete the file if the etag matches\n * @param {Function} [callback] - Called with nothing if successful, error otherwise\n * @returns {Promise<void>} A promise resolving to nothing\n */ Files.prototype.deletePermanently = function(fileID, options, callback) {\n    if (typeof options === \"function\") {\n        callback = options;\n        options = {};\n    }\n    var params = {};\n    if (options && options.etag) {\n        params.headers = {\n            \"If-Match\": options.etag\n        };\n    }\n    var apiPath = urlPath(BASE_PATH, fileID, \"/trash\");\n    return this.client.wrapWithDefaultHandler(this.client.del)(apiPath, params, callback);\n};\n/**\n * Retrieves a file that has been moved to the trash.\n *\n * API Endpoint: '/files/:fileID/trash'\n * Method: GET\n *\n * @param {string} fileID - The ID of the file being requested\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {Function} [callback] - Passed the trashed file information if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the trashed file\n */ Files.prototype.getTrashedFile = function(fileID, options, callback) {\n    var params = {\n        qs: options\n    };\n    var apiPath = urlPath(BASE_PATH, fileID, \"trash\");\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Retrieves all of the tasks for given file.\n *\n * API Endpoint: '/files/:fileID/tasks'\n * Method: GET\n *\n * @param {string} fileID - The ID of the file to get tasks for\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {Function} [callback] - Passed the file tasks if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to a collections of tasks on the file\n */ Files.prototype.getTasks = function(fileID, options, callback) {\n    var params = {\n        qs: options\n    };\n    var apiPath = urlPath(BASE_PATH, fileID, \"/tasks\");\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Used to retrieve an expiring URL for creating an embedded preview session.\n * The URL will expire after 60 seconds and the preview session will expire after 60 minutes.\n *\n * API Endpoint: '/files/:fileID?fields=expiring_embed_link'\n * Method: GET\n *\n * @param {string} fileID - The ID of the file to generate embed link for\n * @param {Function} [callback] - Passed with the embed link if successful, error otherwise\n * @returns {Promise<string>} A promise resolving to the file embed link URL\n */ Files.prototype.getEmbedLink = function(fileID, callback) {\n    var params = {\n        qs: {\n            fields: \"expiring_embed_link\"\n        }\n    };\n    var apiPath = urlPath(BASE_PATH, fileID);\n    return this.client.get(apiPath, params).then((response)=>{\n        if (response.statusCode !== httpStatusCodes.OK) {\n            throw errors.buildUnexpectedResponseError(response);\n        }\n        return response.body.expiring_embed_link.url;\n    }).asCallback(callback);\n};\n/**\n * Locks  a file.\n *\n * API Endpoint: '/files/:fileID'\n * Method: PUT\n *\n * @param {string} fileID - The ID of the file to lock\n * @param {Object} [options] - Optional parameters, can be left null in most cases\n * @param {?string} [options.expires_at] - The time the lock expires\n * @param {boolean} [options.is_download_prevented] - Whether or not the file can be downloaded while locked\n * @param {Function} [callback] - Passed with the locked file information if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the locked file object\n */ Files.prototype.lock = function(fileID, options, callback) {\n    var apiPath = urlPath(BASE_PATH, fileID), params = {\n        body: {\n            lock: {\n                type: lockTypes.LOCK\n            }\n        }\n    };\n    Object.assign(params.body.lock, options);\n    return this.client.wrapWithDefaultHandler(this.client.put)(apiPath, params, callback);\n};\n/**\n * Unlocks a file.\n *\n * API Endpoint: '/files/:fileID'\n *  Method: PUT\n *\n * @param {string} fileID - The ID of the file to unlock\n * @param {Function} [callback] - Passed with the unlocked file information if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the unlocked file object\n */ Files.prototype.unlock = function(fileID, callback) {\n    var apiPath = urlPath(BASE_PATH, fileID), params = {\n        body: {\n            lock: null\n        }\n    };\n    return this.client.wrapWithDefaultHandler(this.client.put)(apiPath, params, callback);\n};\n/**\n * Restores an item that has been moved to the trash. Default behavior is to\n * restore the item to the folder it was in before it was moved to the trash.\n * If that parent folder no longer exists or if there is now an item with the\n * same name in that parent folder, the new parent folder and/or new name will\n * need to be included in the request.\n *\n * API Endpoint: '/files/:fileID'\n * Method: POST\n *\n * @param {string} fileID - The ID of the file to restore\n * @param {Object} [options] - Optional parameters, can be left null in most cases\n * @param {string} [options.name] - The new name for this item\n * @param {string} [options.parent_id] - The new parent folder for this item\n * @param {Function} [callback] - Called with item information if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the restored file object\n */ Files.prototype.restoreFromTrash = function(fileID, options, callback) {\n    // Set up the parent_id parameter\n    if (options && options.parent_id) {\n        options.parent = {\n            id: options.parent_id\n        };\n        delete options.parent_id;\n    }\n    var apiPath = urlPath(BASE_PATH, fileID), params = {\n        body: options || {}\n    };\n    return this.client.wrapWithDefaultHandler(this.client.post)(apiPath, params, callback);\n};\n/**\n * If there are previous versions of this file, this method can be used to retrieve information\n * about the older versions.\n *\n * API Endpoint: '/files/:fileID/versions'\n * Method: GET\n *\n * @param {string} fileID - The ID of the file to view version for\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {Function} [callback] - Passed a list of previous file versions if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the collection of file versions\n */ Files.prototype.getVersions = function(fileID, options, callback) {\n    var apiPath = urlPath(BASE_PATH, fileID, VERSIONS_SUBRESOURCE), params = {\n        qs: options\n    };\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Used to retrieve the watermark for a corresponding Box file.\n *\n * API Endpoint: '/files/:fileID/watermark'\n * Method: GET\n *\n * @param {string} fileID - The Box ID of the file to get watermark for\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {Function} [callback] - Passed the watermark information if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the watermark info\n */ Files.prototype.getWatermark = function(fileID, options, callback) {\n    var apiPath = urlPath(BASE_PATH, fileID, WATERMARK_SUBRESOURCE), params = {\n        qs: options\n    };\n    return this.client.get(apiPath, params).then((response)=>{\n        if (response.statusCode !== 200) {\n            throw errors.buildUnexpectedResponseError(response);\n        }\n        return response.body.watermark;\n    }).asCallback(callback);\n};\n/**\n * Used to apply or update the watermark for a corresponding Box file.\n *\n * API Endpoint: '/files/:fileID/watermark'\n * Method: PUT\n *\n * @param {string} fileID - The Box ID of the file to update watermark for\n * @param {Object} [options] - Optional parameters, can be left null\n * @param {Function} [callback] - Passed the watermark information if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the watermark info\n */ Files.prototype.applyWatermark = function(fileID, options, callback) {\n    var apiPath = urlPath(BASE_PATH, fileID, WATERMARK_SUBRESOURCE), params = {\n        body: {\n            watermark: {\n                imprint: \"default\" // Currently the API only supports default imprint\n            }\n        }\n    };\n    Object.assign(params.body.watermark, options);\n    return this.client.wrapWithDefaultHandler(this.client.put)(apiPath, params, callback);\n};\n/**\n * Used to remove the watermark for a corresponding Box file.\n *\n * API Endpoint: '/files/:fileID/watermark'\n * Method: DELETE\n *\n * @param {string} fileID - The Box ID of the file to remove watermark from\n * @param {Function} [callback] - Empty response body passed if successful, error otherwise\n * @returns {Promise<void>} A promise resolving to nothing\n */ Files.prototype.removeWatermark = function(fileID, callback) {\n    var apiPath = urlPath(BASE_PATH, fileID, WATERMARK_SUBRESOURCE);\n    return this.client.wrapWithDefaultHandler(this.client.del)(apiPath, null, callback);\n};\n/**\n * Discards a specific file version to the trash. Depending on the enterprise settings\n * for this user, the item will either be actually deleted from Box or moved to the trash.\n *\n * API Endpoint: '/files/:fileID/version/:versionID'\n * Method: DELETE\n *\n * @param {string} fileID - The file ID which old version will be moved to the trash or delete permanently\n * @param {string} versionID - The ID of the version to move to the trash or delete permanently\n * @param {Object} [options] Optional parameters\n * @param {string} [options.etag] Only delete the version of the file etag matches\n * @param {Function} [callback] - Empty response body, error otherwise\n * @returns {Promise<void>} A promise resolving to nothing\n */ Files.prototype.deleteVersion = function(fileID, versionID, options, callback) {\n    // Switch around arguments if necessary for backwwards compatibility\n    if (typeof options === \"function\") {\n        callback = options;\n        options = {};\n    }\n    var params = {};\n    if (options && options.etag) {\n        params.headers = {\n            \"If-Match\": options.etag\n        };\n    }\n    var apiPath = urlPath(BASE_PATH, fileID, VERSIONS_SUBRESOURCE, versionID);\n    return this.client.wrapWithDefaultHandler(this.client.del)(apiPath, params, callback);\n};\n/**\n * Creates a session used to upload a new file in chunks..  This will first\n * verify that the file can be created and then open a session for uploading\n * pieces of the file.\n *\n * API Endpoint: '/files/upload_sessions'\n * Method: POST\n *\n * @param {string} folderID - The ID of the folder to upload the file to\n * @param {int} size - The size of the file that will be uploaded\n * @param {string} name - The name of the file to be created\n * @param {Function} [callback] - Passed the upload session info if successful\n * @returns {Promise<Object>} A promise resolving to the new upload session object\n */ Files.prototype.createUploadSession = function(folderID, size, name, callback) {\n    var apiURL = this.client._uploadBaseURL + urlPath(BASE_PATH, UPLOAD_SESSION_SUBRESOURCE), params = {\n        body: {\n            folder_id: folderID,\n            file_size: size,\n            file_name: name\n        }\n    };\n    return this.client.wrapWithDefaultHandler(this.client.post)(apiURL, params, callback);\n};\n/**\n * Creates a session used to upload a new version of a file in chunks.  This\n * will first verify that the version can be created and then open a session for\n * uploading pieces of the file.\n *\n * API Endpoint: '/files/:fileID/upload_sessions'\n * Method: POST\n *\n * @param {string} fileID - The ID of the file to upload a new version of\n * @param {int} size - The size of the file that will be uploaded\n * @param {Function} [callback] - Passed the upload session info if successful\n * @returns {Promise<Object>} A promise resolving to the new upload session object\n */ Files.prototype.createNewVersionUploadSession = function(fileID, size, callback) {\n    var apiURL = this.client._uploadBaseURL + urlPath(BASE_PATH, fileID, UPLOAD_SESSION_SUBRESOURCE), params = {\n        body: {\n            file_size: size\n        }\n    };\n    return this.client.wrapWithDefaultHandler(this.client.post)(apiURL, params, callback);\n};\n/**\n * Uploads a chunk of a file to an open upload session\n *\n * API Endpoint: '/files/upload_sessions/:sessionID'\n * Method: PUT\n *\n * @param {string} sessionID - The ID of the upload session to upload to\n * @param {Buffer|string} part - The chunk of the file to upload\n * @param {int} offset - The byte position where the chunk begins in the file\n * @param {int} totalSize - The total size of the file being uploaded\n * @param {Function} [callback] - Passed the part definition if successful\n * @returns {Promise<Object>} A promise resolving to the part object\n */ Files.prototype.uploadPart = function(sessionID, part, offset, totalSize, callback) {\n    var apiURL = this.client._uploadBaseURL + urlPath(BASE_PATH, UPLOAD_SESSION_SUBRESOURCE, sessionID);\n    var hash = crypto.createHash(\"sha1\").update(part).digest(\"base64\");\n    var params = {\n        headers: {\n            \"Content-Type\": \"application/octet-stream\",\n            Digest: `SHA=${hash}`,\n            \"Content-Range\": `bytes ${offset}-${offset + part.length - 1}/${totalSize}`\n        },\n        json: false,\n        body: part\n    };\n    return this.client.put(apiURL, params).then((response)=>{\n        if (response.statusCode !== 200) {\n            throw errors.buildUnexpectedResponseError(response);\n        }\n        return JSON.parse(response.body);\n    }).asCallback(callback);\n};\n/**\n * Commit an upload session after all parts have been uploaded, creating the new file\n *\n * API Endpoint: '/files/upload_sessions/:sessionID/commit'\n * Method: POST\n *\n * @param {string} sessionID - The ID of the upload session to commit\n * @param {string} fileHash - The base64-encoded SHA-1 hash of the file being uploaded\n * @param {Object} [options] - Optional parameters set on the created file, can be left null\n * @param {UploadPart[]} [options.parts] The list of uploaded parts to be committed, will be fetched from the API otherwise\n * @param {Function} [callback] - Passed the new file information if successful\n * @returns {Promise<Object>} A promise resolving to the uploaded file object\n */ Files.prototype.commitUploadSession = function(sessionID, fileHash, options, callback) {\n    options = options || {};\n    var userParts;\n    if (options.parts) {\n        userParts = options.parts;\n        delete options.parts;\n    }\n    var apiURL = this.client._uploadBaseURL + urlPath(BASE_PATH, UPLOAD_SESSION_SUBRESOURCE, sessionID, \"commit\"), params = {\n        headers: {\n            Digest: `SHA=${fileHash}`\n        },\n        body: {\n            attributes: options\n        }\n    };\n    var fetchParts = (offset, fetchedParts)=>{\n        let pagingOptions = {\n            limit: 1000,\n            offset\n        };\n        return this.getUploadSessionParts(sessionID, pagingOptions).then((data)=>{\n            fetchedParts = fetchedParts.concat(data.entries);\n            if (data.offset + data.entries.length >= data.total_count) {\n                return Promise.resolve(fetchedParts);\n            }\n            return fetchParts(offset + data.limit, fetchedParts);\n        });\n    };\n    return (userParts ? Promise.resolve(userParts) : fetchParts(0, [])).then((parts)=>{\n        // Commit the upload with the list of parts\n        params.body.parts = parts;\n        return this.client.post(apiURL, params);\n    }).then((response)=>{\n        if (response.statusCode === 201) {\n            return response.body;\n        }\n        if (response.statusCode === 202) {\n            var retryInterval = response.headers[\"retry-after\"] || 1;\n            return Promise.delay(retryInterval * 1000).then(()=>{\n                // Ensure we don't have to fetch parts from the API again on retry\n                options = Object.assign({}, options, {\n                    parts: params.body.parts\n                });\n                return this.commitUploadSession(sessionID, fileHash, options);\n            });\n        }\n        throw errors.buildUnexpectedResponseError(response);\n    }).asCallback(callback);\n};\n/**\n * Abort an upload session, discarding any chunks that were uploaded to it\n *\n * API Endpoint: '/files/upload_sessions/:sessionID'\n * Method: DELETE\n *\n * @param {string} sessionID - The ID of the upload session to commit\n * @param {Function} [callback] - Passed nothing if successful, error otherwise\n * @returns {Promise<void>} A promise resolving to nothing\n */ Files.prototype.abortUploadSession = function(sessionID, callback) {\n    var apiURL = this.client._uploadBaseURL + urlPath(BASE_PATH, UPLOAD_SESSION_SUBRESOURCE, sessionID);\n    return this.client.wrapWithDefaultHandler(this.client.del)(apiURL, null, callback);\n};\n/**\n * Get a list of all parts that have been uploaded to an upload session\n *\n * API Endpoint: '/files/upload_sessions/:sessionID/parts'\n * Method: GET\n *\n * @param {string} sessionID - The ID of the session to get a list of parts from\n * @param {Object} [options] - Optional parameters, can be left null\n * @param {string} [options.offset] - Paging offset for the list of parts\n * @param {int} [options.limit] - Maximum number of parts to return\n * @param {Function} [callback] - Passed the list of parts if successful\n * @returns {Promise<Object>} A promise resolving to the collection of uploaded parts\n */ Files.prototype.getUploadSessionParts = function(sessionID, options, callback) {\n    var apiURL = this.client._uploadBaseURL + urlPath(BASE_PATH, UPLOAD_SESSION_SUBRESOURCE, sessionID, \"parts\"), params = {\n        qs: options\n    };\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiURL, params, callback);\n};\n/**\n * Get the status of an upload session, e.g. whether or not is has started or\n * finished committing\n *\n * API Endpoint: '/files/upload_sessions/:sessionID'\n * Method: GET\n *\n * @param {string} sessionID - The ID of the upload session to get the status of\n * @param {Function} [callback] - Passed the session status if successful\n * @returns {Promise<Object>} A promise resolving to the upload session object\n */ Files.prototype.getUploadSession = function(sessionID, callback) {\n    var apiURL = this.client._uploadBaseURL + urlPath(BASE_PATH, UPLOAD_SESSION_SUBRESOURCE, sessionID);\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiURL, null, callback);\n};\n/**\n * Upload a file in chunks, which is generally faster and more reliable for\n * large files.\n *\n * API Endpoint: '/files/upload_sessions'\n * Method: POST\n *\n * @param {string} folderID - The ID of the folder to upload the file to\n * @param {int} size - The size of the file that will be uploaded\n * @param {string} name - The name of the file to be created\n * @param {Buffer|string|Readable} file - The file to upload\n * @param {Object} [options] - Optional parameters for the upload\n * @param {int} [options.parallelism] The number of chunks to upload concurrently\n * @param {int} [options.retryInterval] The amount of time to wait before retrying a failed chunk upload, in ms\n * @param {Object} [options.fileAttributes] Attributes to set on the newly-uploaded file\n * @param {Function} [callback] - Passed the uploader if successful\n * @returns {Promise<ChunkedUploader>} A promise resolving to the chunked uploader\n */ Files.prototype.getChunkedUploader = function(folderID, size, name, file, options, callback) {\n    if (file instanceof Readable) {\n        // Need to pause the stream immediately to prevent certain libraries,\n        // e.g. request from placing the stream into flowing mode and consuming bytes\n        file.pause();\n    }\n    return this.createUploadSession(folderID, size, name).then((sessionInfo)=>new ChunkedUploader(this.client, sessionInfo, file, size, options)).asCallback(callback);\n};\n/**\n * Upload a new file version in chunks, which is generally faster and more\n * reliable for large files.\n *\n * API Endpoint: '/files/:fileID/upload_sessions'\n * Method: POST\n *\n * @param {string} fileID - The ID of the file to upload a new version of\n * @param {int} size - The size of the file that will be uploaded\n * @param {Buffer|string|Readable} file - The file to upload\n * @param {Object} [options] - Optional parameters for the upload\n * @param {int} [options.parallelism] The number of chunks to upload concurrently\n * @param {int} [options.retryInterval] The amount of time to wait before retrying a failed chunk upload, in ms\n * @param {Object} [options.fileAttributes] Attributes to set on the updated file object\n * @param {Function} [callback] - Passed the uploader if successful\n * @returns {Promise<ChunkedUploader>} A promise resolving to the chunked uploader\n */ Files.prototype.getNewVersionChunkedUploader = function(fileID, size, file, options, callback) {\n    if (file instanceof Readable) {\n        // Need to pause the stream immediately to prevent certain libraries,\n        // e.g. request from placing the stream into flowing mode and consuming bytes\n        file.pause();\n    }\n    return this.createNewVersionUploadSession(fileID, size).then((sessionInfo)=>new ChunkedUploader(this.client, sessionInfo, file, size, options)).asCallback(callback);\n};\n/**\n * Requests collaborations on a given file.\n *\n * API Endpoint: '/files/:fileID/collaborations'\n * Method: GET\n *\n * @param {string} fileID - Box ID of the file being requested\n * @param {Object} [options] - Additional options. Can be left null in most cases.\n * @param {int} [options.limit] - The maximum number of collaborations to return\n * @param {int} [options.offset] - Paging parameter for the collaborations collection\n * @param {string} [options.fields] - Comma-separated list of fields to return on the collaboration objects\n * @param {Function} [callback] - Passed the collaborations if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the collection of collaborations on the file\n */ Files.prototype.getCollaborations = function(fileID, options, callback) {\n    var params = {\n        qs: options\n    };\n    var apiPath = urlPath(BASE_PATH, fileID, \"/collaborations\");\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Enum of valid x-rep- hint values for generating representation info\n *\n * @readonly\n * @enum {FileRepresentationType}\n */ Files.prototype.representation = {\n    PDF: \"[pdf]\",\n    THUMBNAIL: \"[jpg?dimensions=320x320]\",\n    IMAGE_MEDIUM: \"[jpg?dimensions=1024x1024][png?dimensions=1024x1024]\",\n    IMAGE_LARGE: \"[jpg?dimensions=2048x2048][png?dimensions=2048x2048]\",\n    EXTRACTED_TEXT: \"[extracted_text]\"\n};\n/**\n * Requests information for all representation objects generated for a specific Box file\n *\n * API Endpoint: '/files/:fileID?fields=representations'\n * Method : GET\n *\n * @param {string} fileID - Box ID of the file being requested\n * @param {client.files.representation} representationType - The x-rep-hints value the application should create a\n *    representation for. This value can either come from FileRepresentationType enum or manually created\n * @param {Object} [options] - Additional options. Can be left empty\n * @param {boolean} [options.generateRepresentations = false] - Set to true to return representation info where all states resolve to success.\n * @param {Function} [callback] - Passed an array of representaton objects if successful\n * @returns {Promise<Object>} A promise resolving to the representation response objects\n*/ Files.prototype.getRepresentationInfo = function(fileID, representationType, options, callback) {\n    if (typeof options === \"function\") {\n        callback = options;\n        options = {};\n    }\n    if (!representationType && options && options.generateRepresentations) {\n        throw new Error(\"Must provide a valid X-Rep-Hints string to get representations with a success status\");\n    }\n    var params = {\n        qs: {\n            fields: \"representations\"\n        },\n        headers: {\n            \"x-rep-hints\": representationType\n        }\n    };\n    var apiPath = urlPath(BASE_PATH, fileID);\n    return this.client.get(apiPath, params).then((response)=>{\n        switch(response.statusCode){\n            // 202 - A Box file representation will be generated, but is not ready yet\n            case httpStatusCodes.ACCEPTED:\n                throw errors.buildResponseError(response, \"Representation not ready at this time\");\n            // 200 - A Boxfile representation generated successfully\n            // return the representation object\n            case httpStatusCodes.OK:\n                if (options && options.generateRepresentations) {\n                    var data = response.body.representations.entries;\n                    var promiseArray = data.map((entry)=>{\n                        switch(entry.status.state){\n                            case \"success\":\n                            case \"viewable\":\n                            case \"error\":\n                                return Promise.resolve(entry);\n                            default:\n                                return pollRepresentationInfo(this.client, entry.info.url);\n                        }\n                    });\n                    return Promise.all(promiseArray).then((entries)=>({\n                            entries\n                        }));\n                }\n                return response.body.representations;\n            // Unexpected Response\n            default:\n                throw errors.buildUnexpectedResponseError(response);\n        }\n    }).asCallback(callback);\n};\n/**\n * Get the contents of a representation of a file, e.g, the binary content of an image or pdf.\n *\n * API Endpoint: '/files/:fileID?fields=representations'\n * Method : GET\n *\n * @param {string} fileID The file ID to get the representation of\n * @param {string} representationType The X-Rep-Hints type to request\n * @param {Object} [options] Optional parameters\n * @param {string} [options.assetPath] Asset path for representations with multiple files\n * @param {Function} [callback] Passed a stream over the representation contents if successful\n * @returns {Promise<Readable>} A promise resolving to a stream over the representation contents\n */ Files.prototype.getRepresentationContent = function(fileID, representationType, options, callback) {\n    if (!representationType) {\n        throw new Error(\"Must provide a valid X-Rep-Hints string\");\n    }\n    options = Object.assign({\n        assetPath: \"\"\n    }, options);\n    return this.getRepresentationInfo(fileID, representationType).then((reps)=>{\n        var repInfo = reps.entries.pop();\n        if (!repInfo) {\n            throw new Error(\"Could not get information for requested representation\");\n        }\n        switch(repInfo.status.state){\n            case \"success\":\n            case \"viewable\":\n                return repInfo.content.url_template;\n            case \"error\":\n                throw new Error(\"Representation had error status\");\n            case \"none\":\n            case \"pending\":\n                return pollRepresentationInfo(this.client, repInfo.info.url).then((info)=>{\n                    if (info.status.state === \"error\") {\n                        throw new Error(\"Representation had error status\");\n                    }\n                    return info.content.url_template;\n                });\n            default:\n                throw new Error(`Unknown representation status: ${repInfo.status.state}`);\n        }\n    }).then((assetURLTemplate)=>{\n        var url = urlTemplate.parse(assetURLTemplate).expand({\n            asset_path: options.assetPath\n        });\n        return this.client.get(url, {\n            streaming: true\n        });\n    }).asCallback(callback);\n};\n/**\n * Creates a zip of multiple files and folders.\n *\n * API Endpoint: '/zip_downloads'\n * Method: POST\n *\n * @param {name} name - The name of the zip file to be created\n * @param {Array} items - Array of files or folders to be part of the created zip\n * @param {Function} [callback] Passed a zip information object\n * @returns {Promise<string>} A promise resolving to a zip information object\n */ Files.prototype.createZip = function(name, items, callback) {\n    var params = {\n        body: {\n            download_file_name: name,\n            items\n        }\n    };\n    return this.client.wrapWithDefaultHandler(this.client.post)(ZIP_DOWNLOAD_PATH, params, callback);\n};\n/**\n * Creates a zip of multiple files and folders and downloads it.\n *\n * API Endpoint: '/zip_downloads'\n * Method: GET\n *\n * @param {name} name - The name of the zip file to be created\n * @param {Array} items - Array of files or folders to be part of the created zip\n * @param {Stream} stream - Stream to pipe the readable stream of the zip file\n * @param {Function} [callback] - Passed a zip download status object\n * @returns {Promise<Readable>} A promise resolving to a zip download status object\n */ Files.prototype.downloadZip = function(name, items, stream, callback) {\n    var downloadStreamOptions = {\n        streaming: true,\n        headers: {}\n    };\n    var params = {\n        body: {\n            download_file_name: name,\n            items\n        }\n    };\n    return this.client.post(ZIP_DOWNLOAD_PATH, params).then((response)=>this.client.get(response.body.download_url, downloadStreamOptions).then((responseStream)=>{\n            responseStream.pipe(stream);\n            // eslint-disable-next-line promise/avoid-new\n            return new Promise((resolve, reject)=>{\n                responseStream.on(\"end\", ()=>resolve(\"Done downloading\"));\n                responseStream.on(\"error\", (error)=>reject(error));\n            }).then(()=>this.client.get(response.body.status_url).then((responseStatus)=>responseStatus.body));\n        })).asCallback(callback);\n};\n/**\n * @module box-node-sdk/lib/managers/files\n * @see {@Link Files}\n */ module.exports = Files;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/box-node-sdk/lib/managers/files.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/box-node-sdk/lib/managers/folders.js":
/*!***********************************************************!*\
  !*** ./node_modules/box-node-sdk/lib/managers/folders.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * @fileoverview Manager for the Box Folders Resource\n */ \n// ------------------------------------------------------------------------------\n// Requirements\n// ------------------------------------------------------------------------------\nvar urlPath = __webpack_require__(/*! ../util/url-path */ \"(rsc)/./node_modules/box-node-sdk/lib/util/url-path.js\"), errors = __webpack_require__(/*! ../util/errors */ \"(rsc)/./node_modules/box-node-sdk/lib/util/errors.js\");\n// ------------------------------------------------------------------------------\n// Private\n// ------------------------------------------------------------------------------\nvar BASE_PATH = \"/folders\", FOLDER_LOCK = \"/folder_locks\", WATERMARK_SUBRESOURCE = \"/watermark\";\n// ------------------------------------------------------------------------------\n// Public\n// ------------------------------------------------------------------------------\n/**\n * Simple manager for interacting with all 'Folder' endpoints and actions.\n *\n * @constructor\n * @param {BoxClient} client - The Box API Client that is responsible for making calls to the API\n * @returns {void}\n */ function Folders(client) {\n    this.client = client;\n}\n/**\n * Requests a folder object with the given ID.\n *\n * API Endpoint: '/folders/:folderID'\n * Method: GET\n *\n * @param {string} folderID - Box ID of the folder being requested\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {Function} [callback] - Passed the folder information if it was acquired successfully\n * @returns {Promise<Object>} A promise resolving to the folder object\n */ Folders.prototype.get = function(folderID, options, callback) {\n    var params = {\n        qs: options\n    };\n    var apiPath = urlPath(BASE_PATH, folderID);\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Requests items contained within a given folder.\n *\n * API Endpoint: '/folders/:folderID/items'\n * Method: GET\n *\n * @param {string} folderID - Box ID of the folder being requested\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {Function} [callback] - Passed the folder information if it was acquired successfully\n * @returns {Promise<Object>} A promise resolving to the collection of the items in the folder\n */ Folders.prototype.getItems = function(folderID, options, callback) {\n    var params = {\n        qs: options\n    };\n    var apiPath = urlPath(BASE_PATH, folderID, \"/items\");\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Requests collaborations on a given folder.\n *\n * API Endpoint: '/folders/:folderID/collaborations'\n * Method: GET\n *\n * @param {string} folderID - Box ID of the folder being requested\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {Function} [callback] - Passed the folder information if it was acquired successfully\n * @returns {Promise<Object>} A promise resolving to the collection of collaborations\n */ Folders.prototype.getCollaborations = function(folderID, options, callback) {\n    var params = {\n        qs: options\n    };\n    var apiPath = urlPath(BASE_PATH, folderID, \"/collaborations\");\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Creates a new Folder within a parent folder\n *\n * API Endpoint: '/folders\n * Method: POST\n *\n * @param {string} parentFolderID - Box folder id of the folder to add into\n * @param {string} name - The name for the new folder\n * @param {Function} [callback] - passed the new folder info if call was successful\n * @returns {Promise<Object>} A promise resolving to the created folder object\n */ Folders.prototype.create = function(parentFolderID, name, callback) {\n    var params = {\n        body: {\n            name,\n            parent: {\n                id: parentFolderID\n            }\n        }\n    };\n    return this.client.wrapWithDefaultHandler(this.client.post)(BASE_PATH, params, callback);\n};\n/**\n * Copy a folder into a new, different folder\n *\n * API Endpoint: '/folders/:folderID/copy\n * Method: POST\n *\n * @param {string} folderID - The Box ID of the folder being requested\n * @param {string} newParentID - The Box ID for the new parent folder. '0' to copy to All Files.\n * @param {Object} [options] - Optional parameters for the copy operation, can be left null in most cases\n * @param {string} [options.name] - A new name to use if there is an identically-named item in the new parent folder\n * @param {Function} [callback] - passed the new folder info if call was successful\n * @returns {Promise<Object>} A promise resolving to the new folder object\n */ Folders.prototype.copy = function(folderID, newParentID, options, callback) {\n    // @NOTE(mwiller) 2016-10-25: Shuffle arguments to maintain backward compatibility\n    //  This can be removed at the v2.0 update\n    if (typeof options === \"function\") {\n        callback = options;\n        options = {};\n    }\n    options = options || {};\n    options.parent = {\n        id: newParentID\n    };\n    var params = {\n        body: options\n    };\n    var apiPath = urlPath(BASE_PATH, folderID, \"/copy\");\n    return this.client.wrapWithDefaultHandler(this.client.post)(apiPath, params, callback);\n};\n/**\n * Update some information about a given folder.\n *\n * API Endpoint: '/folders/:folderID'\n * Method: PUT\n *\n * @param {string} folderID - The Box ID of the folder being requested\n * @param {Object} updates - Folder fields to update\n * @param {string} [updates.etag] Only update the folder if the ETag matches\n * @param {Function} [callback] - Passed the updated folder information if it was acquired successfully\n * @returns {Promise<Object>} A promise resolving to the updated folder object\n */ Folders.prototype.update = function(folderID, updates, callback) {\n    var params = {\n        body: updates\n    };\n    if (updates && updates.etag) {\n        params.headers = {\n            \"If-Match\": updates.etag\n        };\n        delete updates.etag;\n    }\n    var apiPath = urlPath(BASE_PATH, folderID);\n    return this.client.wrapWithDefaultHandler(this.client.put)(apiPath, params, callback);\n};\n/**\n * Add a folder to a given collection\n *\n * API Endpoint: '/folders/:folderID'\n * Method: PUT\n *\n * @param {string} folderID - The folder to add to the collection\n * @param {string} collectionID - The collection to add the folder to\n * @param {Function} [callback] - Passed the updated folder if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the updated folder object\n */ Folders.prototype.addToCollection = function(folderID, collectionID, callback) {\n    return this.get(folderID, {\n        fields: \"collections\"\n    }).then((data)=>{\n        var collections = data.collections || [];\n        // Convert to correct format\n        collections = collections.map((c)=>({\n                id: c.id\n            }));\n        if (!collections.find((c)=>c.id === collectionID)) {\n            collections.push({\n                id: collectionID\n            });\n        }\n        return this.update(folderID, {\n            collections\n        });\n    }).asCallback(callback);\n};\n/**\n * Remove a folder from a given collection\n *\n * API Endpoint: '/folders/:folderID'\n * Method: PUT\n *\n * @param {string} folderID - The folder to remove from the collection\n * @param {string} collectionID - The collection to remove the folder from\n * @param {Function} [callback] - Passed the updated folder if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the updated folder object\n */ Folders.prototype.removeFromCollection = function(folderID, collectionID, callback) {\n    return this.get(folderID, {\n        fields: \"collections\"\n    }).then((data)=>{\n        var collections = data.collections || [];\n        // Convert to correct object format and remove the specified collection\n        collections = collections.map((c)=>({\n                id: c.id\n            })).filter((c)=>c.id !== collectionID);\n        return this.update(folderID, {\n            collections\n        });\n    }).asCallback(callback);\n};\n/**\n * Move a folder into a new parent folder.\n *\n * API Endpoint: '/folders/:folderID'\n * Method: PUT\n *\n * @param {string} folderID - The Box ID of the folder being requested\n * @param {string} newParentID - The Box ID for the new parent folder. '0' to move to All Files.\n * @param {Function} [callback] - Passed the updated folder information if it was acquired successfully\n * @returns {Promise<Object>} A promise resolving to the updated folder object\n */ Folders.prototype.move = function(folderID, newParentID, callback) {\n    var params = {\n        body: {\n            parent: {\n                id: newParentID\n            }\n        }\n    };\n    var apiPath = urlPath(BASE_PATH, folderID);\n    return this.client.wrapWithDefaultHandler(this.client.put)(apiPath, params, callback);\n};\n/**\n * Delete a given folder.\n *\n * API Endpoint: '/folders/:folderID'\n * Method: DELETE\n *\n * @param {string} folderID - Box ID of the folder being requested\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {string} [options.etag] Only delete the folder if the ETag matches\n * @param {Function} [callback] - Empty response body passed if successful.\n * @returns {Promise<void>} A promise resolving to nothing\n */ Folders.prototype.delete = function(folderID, options, callback) {\n    var params = {\n        qs: options\n    };\n    if (options && options.etag) {\n        params.headers = {\n            \"If-Match\": options.etag\n        };\n        delete options.etag;\n    }\n    var apiPath = urlPath(BASE_PATH, folderID);\n    return this.client.wrapWithDefaultHandler(this.client.del)(apiPath, params, callback);\n};\n/**\n * Retrieves all metadata associated with a folder.\n *\n * API Endpoint: '/folders/:folderID/metadata'\n * Method: GET\n *\n * @param {string} folderID - the ID of the folder to get metadata for\n * @param {Function} [callback] - called with an array of metadata when successful\n * @returns {Promise<Object>} A promise resolving to the collection of metadata on the folder\n */ Folders.prototype.getAllMetadata = function(folderID, callback) {\n    var apiPath = urlPath(BASE_PATH, folderID, \"metadata\");\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, null, callback);\n};\n/**\n * Retrieve a single metadata template instance for a folder.\n *\n * API Endpoint: '/folders/:folderID/metadata/:scope/:template'\n * Method: GET\n *\n * @param {string} folderID - The ID of the folder to retrive the metadata of\n * @param {string} scope - The scope of the metadata template, e.g. \"global\"\n * @param {string} template - The metadata template to retrieve\n * @param {Function} [callback] - Passed the metadata template if successful\n * @returns {Promise<Object>} A promise resolving to the metadata template\n */ Folders.prototype.getMetadata = function(folderID, scope, template, callback) {\n    var apiPath = urlPath(BASE_PATH, folderID, \"metadata\", scope, template);\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, null, callback);\n};\n/**\n * Adds metadata to a folder.  Metadata must either match a template schema or\n * be placed into the unstructured \"properties\" template in global scope.\n *\n * API Endpoint: '/folders/:folderID/metadata/:scope/:template'\n * Method: POST\n *\n * @param {string} folderID - The ID of the folder to add metadata to\n * @param {string} scope - The scope of the metadata template, e.g. \"enterprise\"\n * @param {string} template - The metadata template schema to add\n * @param {Object} data - Key/value pairs tp add as metadata\n * @param {Function} [callback] - Called with error if unsuccessful\n * @returns {Promise<Object>} A promise resolving to the created metadata\n */ Folders.prototype.addMetadata = function(folderID, scope, template, data, callback) {\n    var apiPath = urlPath(BASE_PATH, folderID, \"metadata\", scope, template), params = {\n        body: data\n    };\n    return this.client.wrapWithDefaultHandler(this.client.post)(apiPath, params, callback);\n};\n/**\n * Updates a metadata template instance with JSON Patch-formatted data.\n *\n * API Endpoint: '/folders/:folderID/metadata/:scope/:template'\n * Method: PUT\n *\n * @param {string} folderID - The folder to update metadata for\n * @param {string} scope - The scope of the template to update\n * @param {string} template - The template to update\n * @param {Object} patch - The patch data\n * @param {Function} [callback] - Called with updated metadata if successful\n * @returns {Promise<Object>} A promise resolving to the updated metadata\n */ Folders.prototype.updateMetadata = function(folderID, scope, template, patch, callback) {\n    var apiPath = urlPath(BASE_PATH, folderID, \"metadata\", scope, template), params = {\n        body: patch,\n        headers: {\n            \"Content-Type\": \"application/json-patch+json\"\n        }\n    };\n    return this.client.wrapWithDefaultHandler(this.client.put)(apiPath, params, callback);\n};\n/**\n * Sets metadata on a folder, overwriting any metadata that exists for the provided keys.\n *\n * @param {string} folderID - The folder to set metadata on\n * @param {string} scope - The scope of the metadata template\n * @param {string} template - The key of the metadata template\n * @param {Object} metadata - The metadata to set\n * @param {Function} [callback] - Called with updated metadata if successful\n * @returns {Promise<Object>} A promise resolving to the updated metadata\n */ Folders.prototype.setMetadata = function(folderID, scope, template, metadata, callback) {\n    return this.addMetadata(folderID, scope, template, metadata).catch((err)=>{\n        if (err.statusCode !== 409) {\n            throw err;\n        }\n        // Metadata already exists on the file; update instead\n        var updates = Object.keys(metadata).map((key)=>({\n                op: \"add\",\n                path: `/${key}`,\n                value: metadata[key]\n            }));\n        return this.updateMetadata(folderID, scope, template, updates);\n    }).asCallback(callback);\n};\n/**\n * Deletes a metadata template from a folder.\n *\n * API Endpoint: '/folders/:folderID/metadata/:scope/:template'\n * Method: DELETE\n *\n * @param {string} folderID - The ID of the folder to remove metadata from\n * @param {string} scope - The scope of the metadata template\n * @param {string} template - The template to remove from the folder\n * @param {Function} [callback] - Called with nothing if successful, error otherwise\n * @returns {Promise<void>} A promise resolving to nothing\n */ Folders.prototype.deleteMetadata = function(folderID, scope, template, callback) {\n    var apiPath = urlPath(BASE_PATH, folderID, \"metadata\", scope, template);\n    return this.client.wrapWithDefaultHandler(this.client.del)(apiPath, null, callback);\n};\n/**\n * Retrieves a folder that has been moved to the trash\n *\n * API Endpoint: '/folders/:folderID/trash'\n * Method: GET\n *\n * @param  {string} folderID  - The ID of the folder being requested\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param  {Funnction} [callback]  - Passed the folder information if it was acquired successfully\n * @returns {Promise<Object>} A promise resolving to the trashed folder object\n */ Folders.prototype.getTrashedFolder = function(folderID, options, callback) {\n    var params = {\n        qs: options\n    };\n    var apiPath = urlPath(BASE_PATH, folderID, \"trash\");\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Restores an item that has been moved to the trash. Default behavior is to restore the item\n * to the folder it was in before it was moved to the trash. If that parent folder no longer\n * exists or if there is now an item with the same name in that parent folder, the new parent\n * older and/or new name will need to be included in the request.\n *\n * API Endpoint: '/folders/:folderID'\n * Method: POST\n *\n * @param {string} folderID - The ID of the folder to restore\n * @param {Object} [options] - Optional parameters, can be left null\n * @param {?string} [options.name] - The new name for this item\n * @param {string} [options.parent_id] - The new parent folder for this item\n * @param {Function} [callback] - Called with folder information if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the restored folder object\n */ Folders.prototype.restoreFromTrash = function(folderID, options, callback) {\n    // Set up the parent_id parameter\n    if (options && options.parent_id) {\n        options.parent = {\n            id: options.parent_id\n        };\n        delete options.parent_id;\n    }\n    var apiPath = urlPath(BASE_PATH, folderID), params = {\n        body: options || {}\n    };\n    return this.client.wrapWithDefaultHandler(this.client.post)(apiPath, params, callback);\n};\n/**\n * Permanently deletes an folder that is in the trash. The item will no longer exist in Box. This action cannot be undone\n *\n * API Endpoint: '/folders/:folderID/trash'\n * Method: DELETE\n *\n * @param  {string} folderID Box ID of the folder being requested\n * @param {Object} [options] Optional parameters\n * @param {string} [options.etag] Only delete the folder if the ETag matches\n * @param  {Function} [callback] Called with nothing if successful, error otherwise\n * @returns {Promise<void>} A promise resolving to nothing\n */ Folders.prototype.deletePermanently = function(folderID, options, callback) {\n    // Switch around arguments if necessary for backwards compatibility\n    if (typeof options === \"function\") {\n        callback = options;\n        options = {};\n    }\n    var params = {};\n    if (options && options.etag) {\n        params.headers = {\n            \"If-Match\": options.etag\n        };\n    }\n    var apiPath = urlPath(BASE_PATH, folderID, \"/trash\");\n    return this.client.wrapWithDefaultHandler(this.client.del)(apiPath, params, callback);\n};\n/**\n * Used to retrieve the watermark for a corresponding Box folder.\n *\n * API Endpoint: '/folders/:folderID/watermark'\n * Method: GET\n *\n * @param {string} folderID - The Box ID of the folder to get watermark for\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {Function} [callback] - Passed the watermark information if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the watermark info\n */ Folders.prototype.getWatermark = function(folderID, options, callback) {\n    var apiPath = urlPath(BASE_PATH, folderID, WATERMARK_SUBRESOURCE), params = {\n        qs: options\n    };\n    return this.client.get(apiPath, params).then((response)=>{\n        if (response.statusCode !== 200) {\n            throw errors.buildUnexpectedResponseError(response);\n        }\n        return response.body.watermark;\n    }).asCallback(callback);\n};\n/**\n * Used to apply or update the watermark for a corresponding Box folder.\n *\n * API Endpoint: '/folders/:folderID/watermark'\n * Method: PUT\n *\n * @param {string} folderID - The Box ID of the folder to update watermark for\n * @param {Object} [options] - Optional parameters, can be left null\n * @param {Function} [callback] - Passed the watermark information if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the watermark info\n */ Folders.prototype.applyWatermark = function(folderID, options, callback) {\n    var apiPath = urlPath(BASE_PATH, folderID, WATERMARK_SUBRESOURCE), params = {\n        body: {\n            watermark: {\n                imprint: \"default\" // Currently the API only supports default imprint\n            }\n        }\n    };\n    Object.assign(params.body.watermark, options);\n    return this.client.wrapWithDefaultHandler(this.client.put)(apiPath, params, callback);\n};\n/**\n * Used to remove the watermark for a corresponding Box folder.\n *\n * API Endpoint: '/folders/:folderID/watermark'\n * Method: DELETE\n *\n * @param {string} folderID - The Box ID of the folder to remove watermark from\n * @param {Function} [callback] - Empty response body passed if successful, error otherwise\n * @returns {Promise<void>} A promise resolving to nothing\n */ Folders.prototype.removeWatermark = function(folderID, callback) {\n    var apiPath = urlPath(BASE_PATH, folderID, WATERMARK_SUBRESOURCE);\n    return this.client.wrapWithDefaultHandler(this.client.del)(apiPath, null, callback);\n};\n/**\n * Used to lock a Box folder.\n *\n * API Endpoint: '/folder_locks'\n * Method: POST\n *\n * @param {string} folderID - The Box ID of the folder to lock\n * @param {Function} [callback] - Passed the folder lock object if successful, error otherwise\n * @returns {Promise<void>} A promise resolving to a folder lock object\n */ Folders.prototype.lock = function(folderID, callback) {\n    var params = {\n        body: {\n            folder: {\n                type: \"folder\",\n                id: folderID\n            },\n            locked_operations: {\n                move: true,\n                delete: true\n            }\n        }\n    };\n    return this.client.wrapWithDefaultHandler(this.client.post)(FOLDER_LOCK, params, callback);\n};\n/**\n * Used to get all locks on a folder.\n *\n * API Endpoint: '/folder_locks'\n * Method: GET\n *\n * @param {string} folderID - The Box ID of the folder to lock\n * @param {Function} [callback] - Passed a collection of folder lock objects if successful, error otherwise\n * @returns {Promise<void>} A promise resolving to a collection of folder lock objects\n */ Folders.prototype.getLocks = function(folderID, callback) {\n    var params = {\n        qs: {\n            folder_id: folderID\n        }\n    };\n    return this.client.wrapWithDefaultHandler(this.client.get)(FOLDER_LOCK, params, callback);\n};\n/**\n * Used to delete a lock on a folder.\n *\n * API Endpoint: '/folder_locks/:folderLockID'\n * Method: DELETE\n *\n * @param {string} folderLockID - The Box ID of the folder lock\n * @param {Function} [callback] - Empty response body passed if successful, error otherwise\n * @returns {Promise<void>} A promise resolving to nothing\n */ Folders.prototype.deleteLock = function(folderLockID, callback) {\n    var apiPath = urlPath(FOLDER_LOCK, folderLockID);\n    return this.client.wrapWithDefaultHandler(this.client.del)(apiPath, null, callback);\n};\n/**\n * @module box-node-sdk/lib/managers/folders\n * @see {@Link Folders}\n */ module.exports = Folders;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYm94LW5vZGUtc2RrL2xpYi9tYW5hZ2Vycy9mb2xkZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFBOztDQUVDLEdBRUQ7QUFFQSxpRkFBaUY7QUFDakYsZUFBZTtBQUNmLGlGQUFpRjtBQUNqRixJQUFJQSxVQUFVQyxtQkFBT0EsQ0FBQyxtRkFDckJDLFNBQVNELG1CQUFPQSxDQUFDO0FBR2xCLGlGQUFpRjtBQUNqRixVQUFVO0FBQ1YsaUZBQWlGO0FBQ2pGLElBQUlFLFlBQVksWUFDZkMsY0FBYyxpQkFDZEMsd0JBQXdCO0FBR3pCLGlGQUFpRjtBQUNqRixTQUFTO0FBQ1QsaUZBQWlGO0FBRWpGOzs7Ozs7Q0FNQyxHQUNELFNBQVNDLFFBQVFDLE1BQU07SUFDdEIsSUFBSSxDQUFDQSxNQUFNLEdBQUdBO0FBQ2Y7QUFFQTs7Ozs7Ozs7OztDQVVDLEdBQ0RELFFBQVFFLFNBQVMsQ0FBQ0MsR0FBRyxHQUFHLFNBQVNDLFFBQVEsRUFBRUMsT0FBTyxFQUFFQyxRQUFRO0lBQzNELElBQUlDLFNBQVM7UUFDWkMsSUFBSUg7SUFDTDtJQUNBLElBQUlJLFVBQVVmLFFBQVFHLFdBQVdPO0lBQ2pDLE9BQU8sSUFBSSxDQUFDSCxNQUFNLENBQUNTLHNCQUFzQixDQUFDLElBQUksQ0FBQ1QsTUFBTSxDQUFDRSxHQUFHLEVBQUVNLFNBQVNGLFFBQVFEO0FBQzdFO0FBRUE7Ozs7Ozs7Ozs7Q0FVQyxHQUNETixRQUFRRSxTQUFTLENBQUNTLFFBQVEsR0FBRyxTQUFTUCxRQUFRLEVBQUVDLE9BQU8sRUFBRUMsUUFBUTtJQUNoRSxJQUFJQyxTQUFTO1FBQ1pDLElBQUlIO0lBQ0w7SUFDQSxJQUFJSSxVQUFVZixRQUFRRyxXQUFXTyxVQUFVO0lBQzNDLE9BQU8sSUFBSSxDQUFDSCxNQUFNLENBQUNTLHNCQUFzQixDQUFDLElBQUksQ0FBQ1QsTUFBTSxDQUFDRSxHQUFHLEVBQUVNLFNBQVNGLFFBQVFEO0FBQzdFO0FBRUE7Ozs7Ozs7Ozs7Q0FVQyxHQUNETixRQUFRRSxTQUFTLENBQUNVLGlCQUFpQixHQUFHLFNBQVNSLFFBQVEsRUFBRUMsT0FBTyxFQUFFQyxRQUFRO0lBQ3pFLElBQUlDLFNBQVM7UUFDWkMsSUFBSUg7SUFDTDtJQUNBLElBQUlJLFVBQVVmLFFBQVFHLFdBQVdPLFVBQVU7SUFDM0MsT0FBTyxJQUFJLENBQUNILE1BQU0sQ0FBQ1Msc0JBQXNCLENBQUMsSUFBSSxDQUFDVCxNQUFNLENBQUNFLEdBQUcsRUFBRU0sU0FBU0YsUUFBUUQ7QUFDN0U7QUFFQTs7Ozs7Ozs7OztDQVVDLEdBQ0ROLFFBQVFFLFNBQVMsQ0FBQ1csTUFBTSxHQUFHLFNBQVNDLGNBQWMsRUFBRUMsSUFBSSxFQUFFVCxRQUFRO0lBQ2pFLElBQUlDLFNBQVM7UUFDWlMsTUFBTTtZQUNMRDtZQUNBRSxRQUFRO2dCQUNQQyxJQUFJSjtZQUNMO1FBQ0Q7SUFDRDtJQUNBLE9BQU8sSUFBSSxDQUFDYixNQUFNLENBQUNTLHNCQUFzQixDQUFDLElBQUksQ0FBQ1QsTUFBTSxDQUFDa0IsSUFBSSxFQUFFdEIsV0FBV1UsUUFBUUQ7QUFDaEY7QUFFQTs7Ozs7Ozs7Ozs7O0NBWUMsR0FDRE4sUUFBUUUsU0FBUyxDQUFDa0IsSUFBSSxHQUFHLFNBQVNoQixRQUFRLEVBQUVpQixXQUFXLEVBQUVoQixPQUFPLEVBQUVDLFFBQVE7SUFFekUsa0ZBQWtGO0lBQ2xGLDBDQUEwQztJQUMxQyxJQUFJLE9BQU9ELFlBQVksWUFBWTtRQUNsQ0MsV0FBV0Q7UUFDWEEsVUFBVSxDQUFDO0lBQ1o7SUFFQUEsVUFBVUEsV0FBVyxDQUFDO0lBRXRCQSxRQUFRWSxNQUFNLEdBQUc7UUFDaEJDLElBQUlHO0lBQ0w7SUFFQSxJQUFJZCxTQUFTO1FBQ1pTLE1BQU1YO0lBQ1A7SUFDQSxJQUFJSSxVQUFVZixRQUFRRyxXQUFXTyxVQUFVO0lBQzNDLE9BQU8sSUFBSSxDQUFDSCxNQUFNLENBQUNTLHNCQUFzQixDQUFDLElBQUksQ0FBQ1QsTUFBTSxDQUFDa0IsSUFBSSxFQUFFVixTQUFTRixRQUFRRDtBQUM5RTtBQUVBOzs7Ozs7Ozs7OztDQVdDLEdBQ0ROLFFBQVFFLFNBQVMsQ0FBQ29CLE1BQU0sR0FBRyxTQUFTbEIsUUFBUSxFQUFFbUIsT0FBTyxFQUFFakIsUUFBUTtJQUM5RCxJQUFJQyxTQUFTO1FBQ1pTLE1BQU1PO0lBQ1A7SUFFQSxJQUFJQSxXQUFXQSxRQUFRQyxJQUFJLEVBQUU7UUFDNUJqQixPQUFPa0IsT0FBTyxHQUFHO1lBQ2hCLFlBQVlGLFFBQVFDLElBQUk7UUFDekI7UUFDQSxPQUFPRCxRQUFRQyxJQUFJO0lBQ3BCO0lBRUEsSUFBSWYsVUFBVWYsUUFBUUcsV0FBV087SUFDakMsT0FBTyxJQUFJLENBQUNILE1BQU0sQ0FBQ1Msc0JBQXNCLENBQUMsSUFBSSxDQUFDVCxNQUFNLENBQUN5QixHQUFHLEVBQUVqQixTQUFTRixRQUFRRDtBQUM3RTtBQUVBOzs7Ozs7Ozs7O0NBVUMsR0FDRE4sUUFBUUUsU0FBUyxDQUFDeUIsZUFBZSxHQUFHLFNBQVN2QixRQUFRLEVBQUV3QixZQUFZLEVBQUV0QixRQUFRO0lBRTVFLE9BQU8sSUFBSSxDQUFDSCxHQUFHLENBQUNDLFVBQVU7UUFBQ3lCLFFBQVE7SUFBYSxHQUM5Q0MsSUFBSSxDQUFDQyxDQUFBQTtRQUVMLElBQUlDLGNBQWNELEtBQUtDLFdBQVcsSUFBSSxFQUFFO1FBRXhDLDRCQUE0QjtRQUM1QkEsY0FBY0EsWUFBWUMsR0FBRyxDQUFDQyxDQUFBQSxJQUFNO2dCQUFDaEIsSUFBSWdCLEVBQUVoQixFQUFFO1lBQUE7UUFFN0MsSUFBSSxDQUFDYyxZQUFZRyxJQUFJLENBQUNELENBQUFBLElBQUtBLEVBQUVoQixFQUFFLEtBQUtVLGVBQWU7WUFFbERJLFlBQVlJLElBQUksQ0FBQztnQkFBQ2xCLElBQUlVO1lBQVk7UUFDbkM7UUFFQSxPQUFPLElBQUksQ0FBQ04sTUFBTSxDQUFDbEIsVUFBVTtZQUFDNEI7UUFBVztJQUMxQyxHQUNDSyxVQUFVLENBQUMvQjtBQUNkO0FBRUE7Ozs7Ozs7Ozs7Q0FVQyxHQUNETixRQUFRRSxTQUFTLENBQUNvQyxvQkFBb0IsR0FBRyxTQUFTbEMsUUFBUSxFQUFFd0IsWUFBWSxFQUFFdEIsUUFBUTtJQUVqRixPQUFPLElBQUksQ0FBQ0gsR0FBRyxDQUFDQyxVQUFVO1FBQUN5QixRQUFRO0lBQWEsR0FDOUNDLElBQUksQ0FBQ0MsQ0FBQUE7UUFFTCxJQUFJQyxjQUFjRCxLQUFLQyxXQUFXLElBQUksRUFBRTtRQUN4Qyx1RUFBdUU7UUFDdkVBLGNBQWNBLFlBQVlDLEdBQUcsQ0FBQ0MsQ0FBQUEsSUFBTTtnQkFBQ2hCLElBQUlnQixFQUFFaEIsRUFBRTtZQUFBLElBQUlxQixNQUFNLENBQUNMLENBQUFBLElBQUtBLEVBQUVoQixFQUFFLEtBQUtVO1FBRXRFLE9BQU8sSUFBSSxDQUFDTixNQUFNLENBQUNsQixVQUFVO1lBQUM0QjtRQUFXO0lBQzFDLEdBQ0NLLFVBQVUsQ0FBQy9CO0FBQ2Q7QUFFQTs7Ozs7Ozs7OztDQVVDLEdBQ0ROLFFBQVFFLFNBQVMsQ0FBQ3NDLElBQUksR0FBRyxTQUFTcEMsUUFBUSxFQUFFaUIsV0FBVyxFQUFFZixRQUFRO0lBQ2hFLElBQUlDLFNBQVM7UUFDWlMsTUFBTTtZQUNMQyxRQUFRO2dCQUNQQyxJQUFJRztZQUNMO1FBQ0Q7SUFDRDtJQUNBLElBQUlaLFVBQVVmLFFBQVFHLFdBQVdPO0lBQ2pDLE9BQU8sSUFBSSxDQUFDSCxNQUFNLENBQUNTLHNCQUFzQixDQUFDLElBQUksQ0FBQ1QsTUFBTSxDQUFDeUIsR0FBRyxFQUFFakIsU0FBU0YsUUFBUUQ7QUFDN0U7QUFFQTs7Ozs7Ozs7Ozs7Q0FXQyxHQUNETixRQUFRRSxTQUFTLENBQUN1QyxNQUFNLEdBQUcsU0FBU3JDLFFBQVEsRUFBRUMsT0FBTyxFQUFFQyxRQUFRO0lBRTlELElBQUlDLFNBQVM7UUFDWkMsSUFBSUg7SUFDTDtJQUVBLElBQUlBLFdBQVdBLFFBQVFtQixJQUFJLEVBQUU7UUFDNUJqQixPQUFPa0IsT0FBTyxHQUFHO1lBQ2hCLFlBQVlwQixRQUFRbUIsSUFBSTtRQUN6QjtRQUNBLE9BQU9uQixRQUFRbUIsSUFBSTtJQUNwQjtJQUVBLElBQUlmLFVBQVVmLFFBQVFHLFdBQVdPO0lBQ2pDLE9BQU8sSUFBSSxDQUFDSCxNQUFNLENBQUNTLHNCQUFzQixDQUFDLElBQUksQ0FBQ1QsTUFBTSxDQUFDeUMsR0FBRyxFQUFFakMsU0FBU0YsUUFBUUQ7QUFDN0U7QUFFQTs7Ozs7Ozs7O0NBU0MsR0FDRE4sUUFBUUUsU0FBUyxDQUFDeUMsY0FBYyxHQUFHLFNBQVN2QyxRQUFRLEVBQUVFLFFBQVE7SUFFN0QsSUFBSUcsVUFBVWYsUUFBUUcsV0FBV08sVUFBVTtJQUMzQyxPQUFPLElBQUksQ0FBQ0gsTUFBTSxDQUFDUyxzQkFBc0IsQ0FBQyxJQUFJLENBQUNULE1BQU0sQ0FBQ0UsR0FBRyxFQUFFTSxTQUFTLE1BQU1IO0FBQzNFO0FBRUE7Ozs7Ozs7Ozs7O0NBV0MsR0FDRE4sUUFBUUUsU0FBUyxDQUFDMEMsV0FBVyxHQUFHLFNBQVN4QyxRQUFRLEVBQUV5QyxLQUFLLEVBQUVDLFFBQVEsRUFBRXhDLFFBQVE7SUFFM0UsSUFBSUcsVUFBVWYsUUFBUUcsV0FBV08sVUFBVSxZQUFZeUMsT0FBT0M7SUFDOUQsT0FBTyxJQUFJLENBQUM3QyxNQUFNLENBQUNTLHNCQUFzQixDQUFDLElBQUksQ0FBQ1QsTUFBTSxDQUFDRSxHQUFHLEVBQUVNLFNBQVMsTUFBTUg7QUFDM0U7QUFFQTs7Ozs7Ozs7Ozs7OztDQWFDLEdBQ0ROLFFBQVFFLFNBQVMsQ0FBQzZDLFdBQVcsR0FBRyxTQUFTM0MsUUFBUSxFQUFFeUMsS0FBSyxFQUFFQyxRQUFRLEVBQUVmLElBQUksRUFBRXpCLFFBQVE7SUFFakYsSUFBSUcsVUFBVWYsUUFBUUcsV0FBV08sVUFBVSxZQUFZeUMsT0FBT0MsV0FDN0R2QyxTQUFTO1FBQ1JTLE1BQU1lO0lBQ1A7SUFFRCxPQUFPLElBQUksQ0FBQzlCLE1BQU0sQ0FBQ1Msc0JBQXNCLENBQUMsSUFBSSxDQUFDVCxNQUFNLENBQUNrQixJQUFJLEVBQUVWLFNBQVNGLFFBQVFEO0FBQzlFO0FBRUE7Ozs7Ozs7Ozs7OztDQVlDLEdBQ0ROLFFBQVFFLFNBQVMsQ0FBQzhDLGNBQWMsR0FBRyxTQUFTNUMsUUFBUSxFQUFFeUMsS0FBSyxFQUFFQyxRQUFRLEVBQUVHLEtBQUssRUFBRTNDLFFBQVE7SUFFckYsSUFBSUcsVUFBVWYsUUFBUUcsV0FBV08sVUFBVSxZQUFZeUMsT0FBT0MsV0FDN0R2QyxTQUFTO1FBQ1JTLE1BQU1pQztRQUNOeEIsU0FBUztZQUNSLGdCQUFnQjtRQUNqQjtJQUNEO0lBRUQsT0FBTyxJQUFJLENBQUN4QixNQUFNLENBQUNTLHNCQUFzQixDQUFDLElBQUksQ0FBQ1QsTUFBTSxDQUFDeUIsR0FBRyxFQUFFakIsU0FBU0YsUUFBUUQ7QUFDN0U7QUFFQTs7Ozs7Ozs7O0NBU0MsR0FDRE4sUUFBUUUsU0FBUyxDQUFDZ0QsV0FBVyxHQUFHLFNBQVM5QyxRQUFRLEVBQUV5QyxLQUFLLEVBQUVDLFFBQVEsRUFBRUssUUFBUSxFQUFFN0MsUUFBUTtJQUVyRixPQUFPLElBQUksQ0FBQ3lDLFdBQVcsQ0FBQzNDLFVBQVV5QyxPQUFPQyxVQUFVSyxVQUNqREMsS0FBSyxDQUFDQyxDQUFBQTtRQUVOLElBQUlBLElBQUlDLFVBQVUsS0FBSyxLQUFLO1lBQzNCLE1BQU1EO1FBQ1A7UUFFQSxzREFBc0Q7UUFDdEQsSUFBSTlCLFVBQVVnQyxPQUFPQyxJQUFJLENBQUNMLFVBQVVsQixHQUFHLENBQUN3QixDQUFBQSxNQUFRO2dCQUMvQ0MsSUFBSTtnQkFDSkMsTUFBTSxDQUFDLENBQUMsRUFBRUYsSUFBSSxDQUFDO2dCQUNmRyxPQUFPVCxRQUFRLENBQUNNLElBQUk7WUFDckI7UUFFQSxPQUFPLElBQUksQ0FBQ1QsY0FBYyxDQUFDNUMsVUFBVXlDLE9BQU9DLFVBQVV2QjtJQUN2RCxHQUNDYyxVQUFVLENBQUMvQjtBQUNkO0FBRUE7Ozs7Ozs7Ozs7O0NBV0MsR0FDRE4sUUFBUUUsU0FBUyxDQUFDMkQsY0FBYyxHQUFHLFNBQVN6RCxRQUFRLEVBQUV5QyxLQUFLLEVBQUVDLFFBQVEsRUFBRXhDLFFBQVE7SUFFOUUsSUFBSUcsVUFBVWYsUUFBUUcsV0FBV08sVUFBVSxZQUFZeUMsT0FBT0M7SUFDOUQsT0FBTyxJQUFJLENBQUM3QyxNQUFNLENBQUNTLHNCQUFzQixDQUFDLElBQUksQ0FBQ1QsTUFBTSxDQUFDeUMsR0FBRyxFQUFFakMsU0FBUyxNQUFNSDtBQUMzRTtBQUVBOzs7Ozs7Ozs7O0NBVUMsR0FDRE4sUUFBUUUsU0FBUyxDQUFDNEQsZ0JBQWdCLEdBQUcsU0FBUzFELFFBQVEsRUFBRUMsT0FBTyxFQUFFQyxRQUFRO0lBQ3hFLElBQUlDLFNBQVM7UUFDWkMsSUFBSUg7SUFDTDtJQUVBLElBQUlJLFVBQVVmLFFBQVFHLFdBQVdPLFVBQVU7SUFDM0MsT0FBTyxJQUFJLENBQUNILE1BQU0sQ0FBQ1Msc0JBQXNCLENBQUMsSUFBSSxDQUFDVCxNQUFNLENBQUNFLEdBQUcsRUFBRU0sU0FBU0YsUUFBUUQ7QUFDN0U7QUFFQTs7Ozs7Ozs7Ozs7Ozs7O0NBZUMsR0FDRE4sUUFBUUUsU0FBUyxDQUFDNkQsZ0JBQWdCLEdBQUcsU0FBUzNELFFBQVEsRUFBRUMsT0FBTyxFQUFFQyxRQUFRO0lBRXhFLGlDQUFpQztJQUNqQyxJQUFJRCxXQUFXQSxRQUFRMkQsU0FBUyxFQUFFO1FBRWpDM0QsUUFBUVksTUFBTSxHQUFHO1lBQ2hCQyxJQUFJYixRQUFRMkQsU0FBUztRQUN0QjtRQUVBLE9BQU8zRCxRQUFRMkQsU0FBUztJQUN6QjtJQUVBLElBQUl2RCxVQUFVZixRQUFRRyxXQUFXTyxXQUNoQ0csU0FBUztRQUNSUyxNQUFNWCxXQUFXLENBQUM7SUFDbkI7SUFFRCxPQUFPLElBQUksQ0FBQ0osTUFBTSxDQUFDUyxzQkFBc0IsQ0FBQyxJQUFJLENBQUNULE1BQU0sQ0FBQ2tCLElBQUksRUFBRVYsU0FBU0YsUUFBUUQ7QUFDOUU7QUFFQTs7Ozs7Ozs7Ozs7Q0FXQyxHQUNETixRQUFRRSxTQUFTLENBQUMrRCxpQkFBaUIsR0FBRyxTQUFTN0QsUUFBUSxFQUFFQyxPQUFPLEVBQUVDLFFBQVE7SUFFekUsbUVBQW1FO0lBQ25FLElBQUksT0FBT0QsWUFBWSxZQUFZO1FBQ2xDQyxXQUFXRDtRQUNYQSxVQUFVLENBQUM7SUFDWjtJQUVBLElBQUlFLFNBQVMsQ0FBQztJQUVkLElBQUlGLFdBQVdBLFFBQVFtQixJQUFJLEVBQUU7UUFDNUJqQixPQUFPa0IsT0FBTyxHQUFHO1lBQ2hCLFlBQVlwQixRQUFRbUIsSUFBSTtRQUN6QjtJQUNEO0lBRUEsSUFBSWYsVUFBVWYsUUFBUUcsV0FBV08sVUFBVTtJQUMzQyxPQUFPLElBQUksQ0FBQ0gsTUFBTSxDQUFDUyxzQkFBc0IsQ0FBQyxJQUFJLENBQUNULE1BQU0sQ0FBQ3lDLEdBQUcsRUFBRWpDLFNBQVNGLFFBQVFEO0FBQzdFO0FBRUE7Ozs7Ozs7Ozs7Q0FVQyxHQUNETixRQUFRRSxTQUFTLENBQUNnRSxZQUFZLEdBQUcsU0FBUzlELFFBQVEsRUFBRUMsT0FBTyxFQUFFQyxRQUFRO0lBRXBFLElBQUlHLFVBQVVmLFFBQVFHLFdBQVdPLFVBQVVMLHdCQUMxQ1EsU0FBUztRQUNSQyxJQUFJSDtJQUNMO0lBRUQsT0FBTyxJQUFJLENBQUNKLE1BQU0sQ0FBQ0UsR0FBRyxDQUFDTSxTQUFTRixRQUM5QnVCLElBQUksQ0FBQ3FDLENBQUFBO1FBRUwsSUFBSUEsU0FBU2IsVUFBVSxLQUFLLEtBQUs7WUFDaEMsTUFBTTFELE9BQU93RSw0QkFBNEIsQ0FBQ0Q7UUFDM0M7UUFFQSxPQUFPQSxTQUFTbkQsSUFBSSxDQUFDcUQsU0FBUztJQUMvQixHQUNDaEMsVUFBVSxDQUFDL0I7QUFDZDtBQUVBOzs7Ozs7Ozs7O0NBVUMsR0FDRE4sUUFBUUUsU0FBUyxDQUFDb0UsY0FBYyxHQUFHLFNBQVNsRSxRQUFRLEVBQUVDLE9BQU8sRUFBRUMsUUFBUTtJQUN0RSxJQUFJRyxVQUFVZixRQUFRRyxXQUFXTyxVQUFVTCx3QkFDMUNRLFNBQVM7UUFDUlMsTUFBTTtZQUNMcUQsV0FBVztnQkFDVkUsU0FBUyxVQUFVLGtEQUFrRDtZQUN0RTtRQUNEO0lBQ0Q7SUFFRGhCLE9BQU9pQixNQUFNLENBQUNqRSxPQUFPUyxJQUFJLENBQUNxRCxTQUFTLEVBQUVoRTtJQUVyQyxPQUFPLElBQUksQ0FBQ0osTUFBTSxDQUFDUyxzQkFBc0IsQ0FBQyxJQUFJLENBQUNULE1BQU0sQ0FBQ3lCLEdBQUcsRUFBRWpCLFNBQVNGLFFBQVFEO0FBQzdFO0FBRUE7Ozs7Ozs7OztDQVNDLEdBQ0ROLFFBQVFFLFNBQVMsQ0FBQ3VFLGVBQWUsR0FBRyxTQUFTckUsUUFBUSxFQUFFRSxRQUFRO0lBRTlELElBQUlHLFVBQVVmLFFBQVFHLFdBQVdPLFVBQVVMO0lBRTNDLE9BQU8sSUFBSSxDQUFDRSxNQUFNLENBQUNTLHNCQUFzQixDQUFDLElBQUksQ0FBQ1QsTUFBTSxDQUFDeUMsR0FBRyxFQUFFakMsU0FBUyxNQUFNSDtBQUMzRTtBQUVBOzs7Ozs7Ozs7Q0FTQyxHQUNETixRQUFRRSxTQUFTLENBQUN3RSxJQUFJLEdBQUcsU0FBU3RFLFFBQVEsRUFBRUUsUUFBUTtJQUNuRCxJQUFJQyxTQUFTO1FBQ1pTLE1BQU07WUFDTDJELFFBQVE7Z0JBQ1BDLE1BQU07Z0JBQ04xRCxJQUFJZDtZQUNMO1lBQ0F5RSxtQkFBbUI7Z0JBQ2xCckMsTUFBTTtnQkFDTkMsUUFBUTtZQUNUO1FBQ0Q7SUFDRDtJQUNBLE9BQU8sSUFBSSxDQUFDeEMsTUFBTSxDQUFDUyxzQkFBc0IsQ0FBQyxJQUFJLENBQUNULE1BQU0sQ0FBQ2tCLElBQUksRUFBRXJCLGFBQWFTLFFBQVFEO0FBQ2xGO0FBRUE7Ozs7Ozs7OztDQVNDLEdBQ0ROLFFBQVFFLFNBQVMsQ0FBQzRFLFFBQVEsR0FBRyxTQUFTMUUsUUFBUSxFQUFFRSxRQUFRO0lBQ3ZELElBQUlDLFNBQVM7UUFDWkMsSUFBSTtZQUNIdUUsV0FBVzNFO1FBQ1o7SUFDRDtJQUNBLE9BQU8sSUFBSSxDQUFDSCxNQUFNLENBQUNTLHNCQUFzQixDQUFDLElBQUksQ0FBQ1QsTUFBTSxDQUFDRSxHQUFHLEVBQUVMLGFBQWFTLFFBQVFEO0FBQ2pGO0FBRUE7Ozs7Ozs7OztDQVNDLEdBQ0ROLFFBQVFFLFNBQVMsQ0FBQzhFLFVBQVUsR0FBRyxTQUFTQyxZQUFZLEVBQUUzRSxRQUFRO0lBRTdELElBQUlHLFVBQVVmLFFBQVFJLGFBQWFtRjtJQUVuQyxPQUFPLElBQUksQ0FBQ2hGLE1BQU0sQ0FBQ1Msc0JBQXNCLENBQUMsSUFBSSxDQUFDVCxNQUFNLENBQUN5QyxHQUFHLEVBQUVqQyxTQUFTLE1BQU1IO0FBQzNFO0FBQ0E7OztDQUdDLEdBQ0Q0RSxPQUFPQyxPQUFPLEdBQUduRiIsInNvdXJjZXMiOlsid2VicGFjazovL2NpdmlsLWVuZ2luZWVyaW5nLXBsYXRmb3JtLy4vbm9kZV9tb2R1bGVzL2JveC1ub2RlLXNkay9saWIvbWFuYWdlcnMvZm9sZGVycy5qcz81YjlhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBNYW5hZ2VyIGZvciB0aGUgQm94IEZvbGRlcnMgUmVzb3VyY2VcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUmVxdWlyZW1lbnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbnZhciB1cmxQYXRoID0gcmVxdWlyZSgnLi4vdXRpbC91cmwtcGF0aCcpLFxuXHRlcnJvcnMgPSByZXF1aXJlKCcuLi91dGlsL2Vycm9ycycpO1xuXG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUHJpdmF0ZVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG52YXIgQkFTRV9QQVRIID0gJy9mb2xkZXJzJyxcblx0Rk9MREVSX0xPQ0sgPSAnL2ZvbGRlcl9sb2NrcycsXG5cdFdBVEVSTUFSS19TVUJSRVNPVVJDRSA9ICcvd2F0ZXJtYXJrJztcblxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFB1YmxpY1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8qKlxuICogU2ltcGxlIG1hbmFnZXIgZm9yIGludGVyYWN0aW5nIHdpdGggYWxsICdGb2xkZXInIGVuZHBvaW50cyBhbmQgYWN0aW9ucy5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7Qm94Q2xpZW50fSBjbGllbnQgLSBUaGUgQm94IEFQSSBDbGllbnQgdGhhdCBpcyByZXNwb25zaWJsZSBmb3IgbWFraW5nIGNhbGxzIHRvIHRoZSBBUElcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiBGb2xkZXJzKGNsaWVudCkge1xuXHR0aGlzLmNsaWVudCA9IGNsaWVudDtcbn1cblxuLyoqXG4gKiBSZXF1ZXN0cyBhIGZvbGRlciBvYmplY3Qgd2l0aCB0aGUgZ2l2ZW4gSUQuXG4gKlxuICogQVBJIEVuZHBvaW50OiAnL2ZvbGRlcnMvOmZvbGRlcklEJ1xuICogTWV0aG9kOiBHRVRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9sZGVySUQgLSBCb3ggSUQgb2YgdGhlIGZvbGRlciBiZWluZyByZXF1ZXN0ZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBBZGRpdGlvbmFsIG9wdGlvbnMgZm9yIHRoZSByZXF1ZXN0LiBDYW4gYmUgbGVmdCBudWxsIGluIG1vc3QgY2FzZXMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gUGFzc2VkIHRoZSBmb2xkZXIgaW5mb3JtYXRpb24gaWYgaXQgd2FzIGFjcXVpcmVkIHN1Y2Nlc3NmdWxseVxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0gQSBwcm9taXNlIHJlc29sdmluZyB0byB0aGUgZm9sZGVyIG9iamVjdFxuICovXG5Gb2xkZXJzLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihmb2xkZXJJRCwgb3B0aW9ucywgY2FsbGJhY2spIHtcblx0dmFyIHBhcmFtcyA9IHtcblx0XHRxczogb3B0aW9uc1xuXHR9O1xuXHR2YXIgYXBpUGF0aCA9IHVybFBhdGgoQkFTRV9QQVRILCBmb2xkZXJJRCk7XG5cdHJldHVybiB0aGlzLmNsaWVudC53cmFwV2l0aERlZmF1bHRIYW5kbGVyKHRoaXMuY2xpZW50LmdldCkoYXBpUGF0aCwgcGFyYW1zLCBjYWxsYmFjayk7XG59O1xuXG4vKipcbiAqIFJlcXVlc3RzIGl0ZW1zIGNvbnRhaW5lZCB3aXRoaW4gYSBnaXZlbiBmb2xkZXIuXG4gKlxuICogQVBJIEVuZHBvaW50OiAnL2ZvbGRlcnMvOmZvbGRlcklEL2l0ZW1zJ1xuICogTWV0aG9kOiBHRVRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9sZGVySUQgLSBCb3ggSUQgb2YgdGhlIGZvbGRlciBiZWluZyByZXF1ZXN0ZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBBZGRpdGlvbmFsIG9wdGlvbnMgZm9yIHRoZSByZXF1ZXN0LiBDYW4gYmUgbGVmdCBudWxsIGluIG1vc3QgY2FzZXMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gUGFzc2VkIHRoZSBmb2xkZXIgaW5mb3JtYXRpb24gaWYgaXQgd2FzIGFjcXVpcmVkIHN1Y2Nlc3NmdWxseVxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0gQSBwcm9taXNlIHJlc29sdmluZyB0byB0aGUgY29sbGVjdGlvbiBvZiB0aGUgaXRlbXMgaW4gdGhlIGZvbGRlclxuICovXG5Gb2xkZXJzLnByb3RvdHlwZS5nZXRJdGVtcyA9IGZ1bmN0aW9uKGZvbGRlcklELCBvcHRpb25zLCBjYWxsYmFjaykge1xuXHR2YXIgcGFyYW1zID0ge1xuXHRcdHFzOiBvcHRpb25zXG5cdH07XG5cdHZhciBhcGlQYXRoID0gdXJsUGF0aChCQVNFX1BBVEgsIGZvbGRlcklELCAnL2l0ZW1zJyk7XG5cdHJldHVybiB0aGlzLmNsaWVudC53cmFwV2l0aERlZmF1bHRIYW5kbGVyKHRoaXMuY2xpZW50LmdldCkoYXBpUGF0aCwgcGFyYW1zLCBjYWxsYmFjayk7XG59O1xuXG4vKipcbiAqIFJlcXVlc3RzIGNvbGxhYm9yYXRpb25zIG9uIGEgZ2l2ZW4gZm9sZGVyLlxuICpcbiAqIEFQSSBFbmRwb2ludDogJy9mb2xkZXJzLzpmb2xkZXJJRC9jb2xsYWJvcmF0aW9ucydcbiAqIE1ldGhvZDogR0VUXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGZvbGRlcklEIC0gQm94IElEIG9mIHRoZSBmb2xkZXIgYmVpbmcgcmVxdWVzdGVkXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gQWRkaXRpb25hbCBvcHRpb25zIGZvciB0aGUgcmVxdWVzdC4gQ2FuIGJlIGxlZnQgbnVsbCBpbiBtb3N0IGNhc2VzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSAtIFBhc3NlZCB0aGUgZm9sZGVyIGluZm9ybWF0aW9uIGlmIGl0IHdhcyBhY3F1aXJlZCBzdWNjZXNzZnVsbHlcbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59IEEgcHJvbWlzZSByZXNvbHZpbmcgdG8gdGhlIGNvbGxlY3Rpb24gb2YgY29sbGFib3JhdGlvbnNcbiAqL1xuRm9sZGVycy5wcm90b3R5cGUuZ2V0Q29sbGFib3JhdGlvbnMgPSBmdW5jdGlvbihmb2xkZXJJRCwgb3B0aW9ucywgY2FsbGJhY2spIHtcblx0dmFyIHBhcmFtcyA9IHtcblx0XHRxczogb3B0aW9uc1xuXHR9O1xuXHR2YXIgYXBpUGF0aCA9IHVybFBhdGgoQkFTRV9QQVRILCBmb2xkZXJJRCwgJy9jb2xsYWJvcmF0aW9ucycpO1xuXHRyZXR1cm4gdGhpcy5jbGllbnQud3JhcFdpdGhEZWZhdWx0SGFuZGxlcih0aGlzLmNsaWVudC5nZXQpKGFwaVBhdGgsIHBhcmFtcywgY2FsbGJhY2spO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IEZvbGRlciB3aXRoaW4gYSBwYXJlbnQgZm9sZGVyXG4gKlxuICogQVBJIEVuZHBvaW50OiAnL2ZvbGRlcnNcbiAqIE1ldGhvZDogUE9TVFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJlbnRGb2xkZXJJRCAtIEJveCBmb2xkZXIgaWQgb2YgdGhlIGZvbGRlciB0byBhZGQgaW50b1xuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBmb3IgdGhlIG5ldyBmb2xkZXJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gLSBwYXNzZWQgdGhlIG5ldyBmb2xkZXIgaW5mbyBpZiBjYWxsIHdhcyBzdWNjZXNzZnVsXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fSBBIHByb21pc2UgcmVzb2x2aW5nIHRvIHRoZSBjcmVhdGVkIGZvbGRlciBvYmplY3RcbiAqL1xuRm9sZGVycy5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24ocGFyZW50Rm9sZGVySUQsIG5hbWUsIGNhbGxiYWNrKSB7XG5cdHZhciBwYXJhbXMgPSB7XG5cdFx0Ym9keToge1xuXHRcdFx0bmFtZSxcblx0XHRcdHBhcmVudDoge1xuXHRcdFx0XHRpZDogcGFyZW50Rm9sZGVySURcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdHJldHVybiB0aGlzLmNsaWVudC53cmFwV2l0aERlZmF1bHRIYW5kbGVyKHRoaXMuY2xpZW50LnBvc3QpKEJBU0VfUEFUSCwgcGFyYW1zLCBjYWxsYmFjayk7XG59O1xuXG4vKipcbiAqIENvcHkgYSBmb2xkZXIgaW50byBhIG5ldywgZGlmZmVyZW50IGZvbGRlclxuICpcbiAqIEFQSSBFbmRwb2ludDogJy9mb2xkZXJzLzpmb2xkZXJJRC9jb3B5XG4gKiBNZXRob2Q6IFBPU1RcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9sZGVySUQgLSBUaGUgQm94IElEIG9mIHRoZSBmb2xkZXIgYmVpbmcgcmVxdWVzdGVkXG4gKiBAcGFyYW0ge3N0cmluZ30gbmV3UGFyZW50SUQgLSBUaGUgQm94IElEIGZvciB0aGUgbmV3IHBhcmVudCBmb2xkZXIuICcwJyB0byBjb3B5IHRvIEFsbCBGaWxlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBPcHRpb25hbCBwYXJhbWV0ZXJzIGZvciB0aGUgY29weSBvcGVyYXRpb24sIGNhbiBiZSBsZWZ0IG51bGwgaW4gbW9zdCBjYXNlc1xuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLm5hbWVdIC0gQSBuZXcgbmFtZSB0byB1c2UgaWYgdGhlcmUgaXMgYW4gaWRlbnRpY2FsbHktbmFtZWQgaXRlbSBpbiB0aGUgbmV3IHBhcmVudCBmb2xkZXJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gLSBwYXNzZWQgdGhlIG5ldyBmb2xkZXIgaW5mbyBpZiBjYWxsIHdhcyBzdWNjZXNzZnVsXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fSBBIHByb21pc2UgcmVzb2x2aW5nIHRvIHRoZSBuZXcgZm9sZGVyIG9iamVjdFxuICovXG5Gb2xkZXJzLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24oZm9sZGVySUQsIG5ld1BhcmVudElELCBvcHRpb25zLCBjYWxsYmFjaykge1xuXG5cdC8vIEBOT1RFKG13aWxsZXIpIDIwMTYtMTAtMjU6IFNodWZmbGUgYXJndW1lbnRzIHRvIG1haW50YWluIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcblx0Ly8gIFRoaXMgY2FuIGJlIHJlbW92ZWQgYXQgdGhlIHYyLjAgdXBkYXRlXG5cdGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdGNhbGxiYWNrID0gb3B0aW9ucztcblx0XHRvcHRpb25zID0ge307XG5cdH1cblxuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRvcHRpb25zLnBhcmVudCA9IHtcblx0XHRpZDogbmV3UGFyZW50SURcblx0fTtcblxuXHR2YXIgcGFyYW1zID0ge1xuXHRcdGJvZHk6IG9wdGlvbnNcblx0fTtcblx0dmFyIGFwaVBhdGggPSB1cmxQYXRoKEJBU0VfUEFUSCwgZm9sZGVySUQsICcvY29weScpO1xuXHRyZXR1cm4gdGhpcy5jbGllbnQud3JhcFdpdGhEZWZhdWx0SGFuZGxlcih0aGlzLmNsaWVudC5wb3N0KShhcGlQYXRoLCBwYXJhbXMsIGNhbGxiYWNrKTtcbn07XG5cbi8qKlxuICogVXBkYXRlIHNvbWUgaW5mb3JtYXRpb24gYWJvdXQgYSBnaXZlbiBmb2xkZXIuXG4gKlxuICogQVBJIEVuZHBvaW50OiAnL2ZvbGRlcnMvOmZvbGRlcklEJ1xuICogTWV0aG9kOiBQVVRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9sZGVySUQgLSBUaGUgQm94IElEIG9mIHRoZSBmb2xkZXIgYmVpbmcgcmVxdWVzdGVkXG4gKiBAcGFyYW0ge09iamVjdH0gdXBkYXRlcyAtIEZvbGRlciBmaWVsZHMgdG8gdXBkYXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gW3VwZGF0ZXMuZXRhZ10gT25seSB1cGRhdGUgdGhlIGZvbGRlciBpZiB0aGUgRVRhZyBtYXRjaGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gUGFzc2VkIHRoZSB1cGRhdGVkIGZvbGRlciBpbmZvcm1hdGlvbiBpZiBpdCB3YXMgYWNxdWlyZWQgc3VjY2Vzc2Z1bGx5XG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fSBBIHByb21pc2UgcmVzb2x2aW5nIHRvIHRoZSB1cGRhdGVkIGZvbGRlciBvYmplY3RcbiAqL1xuRm9sZGVycy5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oZm9sZGVySUQsIHVwZGF0ZXMsIGNhbGxiYWNrKSB7XG5cdHZhciBwYXJhbXMgPSB7XG5cdFx0Ym9keTogdXBkYXRlc1xuXHR9O1xuXG5cdGlmICh1cGRhdGVzICYmIHVwZGF0ZXMuZXRhZykge1xuXHRcdHBhcmFtcy5oZWFkZXJzID0ge1xuXHRcdFx0J0lmLU1hdGNoJzogdXBkYXRlcy5ldGFnXG5cdFx0fTtcblx0XHRkZWxldGUgdXBkYXRlcy5ldGFnO1xuXHR9XG5cblx0dmFyIGFwaVBhdGggPSB1cmxQYXRoKEJBU0VfUEFUSCwgZm9sZGVySUQpO1xuXHRyZXR1cm4gdGhpcy5jbGllbnQud3JhcFdpdGhEZWZhdWx0SGFuZGxlcih0aGlzLmNsaWVudC5wdXQpKGFwaVBhdGgsIHBhcmFtcywgY2FsbGJhY2spO1xufTtcblxuLyoqXG4gKiBBZGQgYSBmb2xkZXIgdG8gYSBnaXZlbiBjb2xsZWN0aW9uXG4gKlxuICogQVBJIEVuZHBvaW50OiAnL2ZvbGRlcnMvOmZvbGRlcklEJ1xuICogTWV0aG9kOiBQVVRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9sZGVySUQgLSBUaGUgZm9sZGVyIHRvIGFkZCB0byB0aGUgY29sbGVjdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IGNvbGxlY3Rpb25JRCAtIFRoZSBjb2xsZWN0aW9uIHRvIGFkZCB0aGUgZm9sZGVyIHRvXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gUGFzc2VkIHRoZSB1cGRhdGVkIGZvbGRlciBpZiBzdWNjZXNzZnVsLCBlcnJvciBvdGhlcndpc2VcbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59IEEgcHJvbWlzZSByZXNvbHZpbmcgdG8gdGhlIHVwZGF0ZWQgZm9sZGVyIG9iamVjdFxuICovXG5Gb2xkZXJzLnByb3RvdHlwZS5hZGRUb0NvbGxlY3Rpb24gPSBmdW5jdGlvbihmb2xkZXJJRCwgY29sbGVjdGlvbklELCBjYWxsYmFjaykge1xuXG5cdHJldHVybiB0aGlzLmdldChmb2xkZXJJRCwge2ZpZWxkczogJ2NvbGxlY3Rpb25zJ30pXG5cdFx0LnRoZW4oZGF0YSA9PiB7XG5cblx0XHRcdHZhciBjb2xsZWN0aW9ucyA9IGRhdGEuY29sbGVjdGlvbnMgfHwgW107XG5cblx0XHRcdC8vIENvbnZlcnQgdG8gY29ycmVjdCBmb3JtYXRcblx0XHRcdGNvbGxlY3Rpb25zID0gY29sbGVjdGlvbnMubWFwKGMgPT4gKHtpZDogYy5pZH0pKTtcblxuXHRcdFx0aWYgKCFjb2xsZWN0aW9ucy5maW5kKGMgPT4gYy5pZCA9PT0gY29sbGVjdGlvbklEKSkge1xuXG5cdFx0XHRcdGNvbGxlY3Rpb25zLnB1c2goe2lkOiBjb2xsZWN0aW9uSUR9KTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXMudXBkYXRlKGZvbGRlcklELCB7Y29sbGVjdGlvbnN9KTtcblx0XHR9KVxuXHRcdC5hc0NhbGxiYWNrKGNhbGxiYWNrKTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGEgZm9sZGVyIGZyb20gYSBnaXZlbiBjb2xsZWN0aW9uXG4gKlxuICogQVBJIEVuZHBvaW50OiAnL2ZvbGRlcnMvOmZvbGRlcklEJ1xuICogTWV0aG9kOiBQVVRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9sZGVySUQgLSBUaGUgZm9sZGVyIHRvIHJlbW92ZSBmcm9tIHRoZSBjb2xsZWN0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sbGVjdGlvbklEIC0gVGhlIGNvbGxlY3Rpb24gdG8gcmVtb3ZlIHRoZSBmb2xkZXIgZnJvbVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSAtIFBhc3NlZCB0aGUgdXBkYXRlZCBmb2xkZXIgaWYgc3VjY2Vzc2Z1bCwgZXJyb3Igb3RoZXJ3aXNlXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fSBBIHByb21pc2UgcmVzb2x2aW5nIHRvIHRoZSB1cGRhdGVkIGZvbGRlciBvYmplY3RcbiAqL1xuRm9sZGVycy5wcm90b3R5cGUucmVtb3ZlRnJvbUNvbGxlY3Rpb24gPSBmdW5jdGlvbihmb2xkZXJJRCwgY29sbGVjdGlvbklELCBjYWxsYmFjaykge1xuXG5cdHJldHVybiB0aGlzLmdldChmb2xkZXJJRCwge2ZpZWxkczogJ2NvbGxlY3Rpb25zJ30pXG5cdFx0LnRoZW4oZGF0YSA9PiB7XG5cblx0XHRcdHZhciBjb2xsZWN0aW9ucyA9IGRhdGEuY29sbGVjdGlvbnMgfHwgW107XG5cdFx0XHQvLyBDb252ZXJ0IHRvIGNvcnJlY3Qgb2JqZWN0IGZvcm1hdCBhbmQgcmVtb3ZlIHRoZSBzcGVjaWZpZWQgY29sbGVjdGlvblxuXHRcdFx0Y29sbGVjdGlvbnMgPSBjb2xsZWN0aW9ucy5tYXAoYyA9PiAoe2lkOiBjLmlkfSkpLmZpbHRlcihjID0+IGMuaWQgIT09IGNvbGxlY3Rpb25JRCk7XG5cblx0XHRcdHJldHVybiB0aGlzLnVwZGF0ZShmb2xkZXJJRCwge2NvbGxlY3Rpb25zfSk7XG5cdFx0fSlcblx0XHQuYXNDYWxsYmFjayhjYWxsYmFjayk7XG59O1xuXG4vKipcbiAqIE1vdmUgYSBmb2xkZXIgaW50byBhIG5ldyBwYXJlbnQgZm9sZGVyLlxuICpcbiAqIEFQSSBFbmRwb2ludDogJy9mb2xkZXJzLzpmb2xkZXJJRCdcbiAqIE1ldGhvZDogUFVUXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGZvbGRlcklEIC0gVGhlIEJveCBJRCBvZiB0aGUgZm9sZGVyIGJlaW5nIHJlcXVlc3RlZFxuICogQHBhcmFtIHtzdHJpbmd9IG5ld1BhcmVudElEIC0gVGhlIEJveCBJRCBmb3IgdGhlIG5ldyBwYXJlbnQgZm9sZGVyLiAnMCcgdG8gbW92ZSB0byBBbGwgRmlsZXMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gUGFzc2VkIHRoZSB1cGRhdGVkIGZvbGRlciBpbmZvcm1hdGlvbiBpZiBpdCB3YXMgYWNxdWlyZWQgc3VjY2Vzc2Z1bGx5XG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fSBBIHByb21pc2UgcmVzb2x2aW5nIHRvIHRoZSB1cGRhdGVkIGZvbGRlciBvYmplY3RcbiAqL1xuRm9sZGVycy5wcm90b3R5cGUubW92ZSA9IGZ1bmN0aW9uKGZvbGRlcklELCBuZXdQYXJlbnRJRCwgY2FsbGJhY2spIHtcblx0dmFyIHBhcmFtcyA9IHtcblx0XHRib2R5OiB7XG5cdFx0XHRwYXJlbnQ6IHtcblx0XHRcdFx0aWQ6IG5ld1BhcmVudElEXG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHR2YXIgYXBpUGF0aCA9IHVybFBhdGgoQkFTRV9QQVRILCBmb2xkZXJJRCk7XG5cdHJldHVybiB0aGlzLmNsaWVudC53cmFwV2l0aERlZmF1bHRIYW5kbGVyKHRoaXMuY2xpZW50LnB1dCkoYXBpUGF0aCwgcGFyYW1zLCBjYWxsYmFjayk7XG59O1xuXG4vKipcbiAqIERlbGV0ZSBhIGdpdmVuIGZvbGRlci5cbiAqXG4gKiBBUEkgRW5kcG9pbnQ6ICcvZm9sZGVycy86Zm9sZGVySUQnXG4gKiBNZXRob2Q6IERFTEVURVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBmb2xkZXJJRCAtIEJveCBJRCBvZiB0aGUgZm9sZGVyIGJlaW5nIHJlcXVlc3RlZFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIEFkZGl0aW9uYWwgb3B0aW9ucyBmb3IgdGhlIHJlcXVlc3QuIENhbiBiZSBsZWZ0IG51bGwgaW4gbW9zdCBjYXNlcy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5ldGFnXSBPbmx5IGRlbGV0ZSB0aGUgZm9sZGVyIGlmIHRoZSBFVGFnIG1hdGNoZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gLSBFbXB0eSByZXNwb25zZSBib2R5IHBhc3NlZCBpZiBzdWNjZXNzZnVsLlxuICogQHJldHVybnMge1Byb21pc2U8dm9pZD59IEEgcHJvbWlzZSByZXNvbHZpbmcgdG8gbm90aGluZ1xuICovXG5Gb2xkZXJzLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbihmb2xkZXJJRCwgb3B0aW9ucywgY2FsbGJhY2spIHtcblxuXHR2YXIgcGFyYW1zID0ge1xuXHRcdHFzOiBvcHRpb25zXG5cdH07XG5cblx0aWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5ldGFnKSB7XG5cdFx0cGFyYW1zLmhlYWRlcnMgPSB7XG5cdFx0XHQnSWYtTWF0Y2gnOiBvcHRpb25zLmV0YWdcblx0XHR9O1xuXHRcdGRlbGV0ZSBvcHRpb25zLmV0YWc7XG5cdH1cblxuXHR2YXIgYXBpUGF0aCA9IHVybFBhdGgoQkFTRV9QQVRILCBmb2xkZXJJRCk7XG5cdHJldHVybiB0aGlzLmNsaWVudC53cmFwV2l0aERlZmF1bHRIYW5kbGVyKHRoaXMuY2xpZW50LmRlbCkoYXBpUGF0aCwgcGFyYW1zLCBjYWxsYmFjayk7XG59O1xuXG4vKipcbiAqIFJldHJpZXZlcyBhbGwgbWV0YWRhdGEgYXNzb2NpYXRlZCB3aXRoIGEgZm9sZGVyLlxuICpcbiAqIEFQSSBFbmRwb2ludDogJy9mb2xkZXJzLzpmb2xkZXJJRC9tZXRhZGF0YSdcbiAqIE1ldGhvZDogR0VUXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGZvbGRlcklEIC0gdGhlIElEIG9mIHRoZSBmb2xkZXIgdG8gZ2V0IG1ldGFkYXRhIGZvclxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSAtIGNhbGxlZCB3aXRoIGFuIGFycmF5IG9mIG1ldGFkYXRhIHdoZW4gc3VjY2Vzc2Z1bFxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0gQSBwcm9taXNlIHJlc29sdmluZyB0byB0aGUgY29sbGVjdGlvbiBvZiBtZXRhZGF0YSBvbiB0aGUgZm9sZGVyXG4gKi9cbkZvbGRlcnMucHJvdG90eXBlLmdldEFsbE1ldGFkYXRhID0gZnVuY3Rpb24oZm9sZGVySUQsIGNhbGxiYWNrKSB7XG5cblx0dmFyIGFwaVBhdGggPSB1cmxQYXRoKEJBU0VfUEFUSCwgZm9sZGVySUQsICdtZXRhZGF0YScpO1xuXHRyZXR1cm4gdGhpcy5jbGllbnQud3JhcFdpdGhEZWZhdWx0SGFuZGxlcih0aGlzLmNsaWVudC5nZXQpKGFwaVBhdGgsIG51bGwsIGNhbGxiYWNrKTtcbn07XG5cbi8qKlxuICogUmV0cmlldmUgYSBzaW5nbGUgbWV0YWRhdGEgdGVtcGxhdGUgaW5zdGFuY2UgZm9yIGEgZm9sZGVyLlxuICpcbiAqIEFQSSBFbmRwb2ludDogJy9mb2xkZXJzLzpmb2xkZXJJRC9tZXRhZGF0YS86c2NvcGUvOnRlbXBsYXRlJ1xuICogTWV0aG9kOiBHRVRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9sZGVySUQgLSBUaGUgSUQgb2YgdGhlIGZvbGRlciB0byByZXRyaXZlIHRoZSBtZXRhZGF0YSBvZlxuICogQHBhcmFtIHtzdHJpbmd9IHNjb3BlIC0gVGhlIHNjb3BlIG9mIHRoZSBtZXRhZGF0YSB0ZW1wbGF0ZSwgZS5nLiBcImdsb2JhbFwiXG4gKiBAcGFyYW0ge3N0cmluZ30gdGVtcGxhdGUgLSBUaGUgbWV0YWRhdGEgdGVtcGxhdGUgdG8gcmV0cmlldmVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gLSBQYXNzZWQgdGhlIG1ldGFkYXRhIHRlbXBsYXRlIGlmIHN1Y2Nlc3NmdWxcbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59IEEgcHJvbWlzZSByZXNvbHZpbmcgdG8gdGhlIG1ldGFkYXRhIHRlbXBsYXRlXG4gKi9cbkZvbGRlcnMucHJvdG90eXBlLmdldE1ldGFkYXRhID0gZnVuY3Rpb24oZm9sZGVySUQsIHNjb3BlLCB0ZW1wbGF0ZSwgY2FsbGJhY2spIHtcblxuXHR2YXIgYXBpUGF0aCA9IHVybFBhdGgoQkFTRV9QQVRILCBmb2xkZXJJRCwgJ21ldGFkYXRhJywgc2NvcGUsIHRlbXBsYXRlKTtcblx0cmV0dXJuIHRoaXMuY2xpZW50LndyYXBXaXRoRGVmYXVsdEhhbmRsZXIodGhpcy5jbGllbnQuZ2V0KShhcGlQYXRoLCBudWxsLCBjYWxsYmFjayk7XG59O1xuXG4vKipcbiAqIEFkZHMgbWV0YWRhdGEgdG8gYSBmb2xkZXIuICBNZXRhZGF0YSBtdXN0IGVpdGhlciBtYXRjaCBhIHRlbXBsYXRlIHNjaGVtYSBvclxuICogYmUgcGxhY2VkIGludG8gdGhlIHVuc3RydWN0dXJlZCBcInByb3BlcnRpZXNcIiB0ZW1wbGF0ZSBpbiBnbG9iYWwgc2NvcGUuXG4gKlxuICogQVBJIEVuZHBvaW50OiAnL2ZvbGRlcnMvOmZvbGRlcklEL21ldGFkYXRhLzpzY29wZS86dGVtcGxhdGUnXG4gKiBNZXRob2Q6IFBPU1RcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9sZGVySUQgLSBUaGUgSUQgb2YgdGhlIGZvbGRlciB0byBhZGQgbWV0YWRhdGEgdG9cbiAqIEBwYXJhbSB7c3RyaW5nfSBzY29wZSAtIFRoZSBzY29wZSBvZiB0aGUgbWV0YWRhdGEgdGVtcGxhdGUsIGUuZy4gXCJlbnRlcnByaXNlXCJcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZW1wbGF0ZSAtIFRoZSBtZXRhZGF0YSB0ZW1wbGF0ZSBzY2hlbWEgdG8gYWRkXG4gKiBAcGFyYW0ge09iamVjdH0gZGF0YSAtIEtleS92YWx1ZSBwYWlycyB0cCBhZGQgYXMgbWV0YWRhdGFcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gLSBDYWxsZWQgd2l0aCBlcnJvciBpZiB1bnN1Y2Nlc3NmdWxcbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59IEEgcHJvbWlzZSByZXNvbHZpbmcgdG8gdGhlIGNyZWF0ZWQgbWV0YWRhdGFcbiAqL1xuRm9sZGVycy5wcm90b3R5cGUuYWRkTWV0YWRhdGEgPSBmdW5jdGlvbihmb2xkZXJJRCwgc2NvcGUsIHRlbXBsYXRlLCBkYXRhLCBjYWxsYmFjaykge1xuXG5cdHZhciBhcGlQYXRoID0gdXJsUGF0aChCQVNFX1BBVEgsIGZvbGRlcklELCAnbWV0YWRhdGEnLCBzY29wZSwgdGVtcGxhdGUpLFxuXHRcdHBhcmFtcyA9IHtcblx0XHRcdGJvZHk6IGRhdGFcblx0XHR9O1xuXG5cdHJldHVybiB0aGlzLmNsaWVudC53cmFwV2l0aERlZmF1bHRIYW5kbGVyKHRoaXMuY2xpZW50LnBvc3QpKGFwaVBhdGgsIHBhcmFtcywgY2FsbGJhY2spO1xufTtcblxuLyoqXG4gKiBVcGRhdGVzIGEgbWV0YWRhdGEgdGVtcGxhdGUgaW5zdGFuY2Ugd2l0aCBKU09OIFBhdGNoLWZvcm1hdHRlZCBkYXRhLlxuICpcbiAqIEFQSSBFbmRwb2ludDogJy9mb2xkZXJzLzpmb2xkZXJJRC9tZXRhZGF0YS86c2NvcGUvOnRlbXBsYXRlJ1xuICogTWV0aG9kOiBQVVRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9sZGVySUQgLSBUaGUgZm9sZGVyIHRvIHVwZGF0ZSBtZXRhZGF0YSBmb3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBzY29wZSAtIFRoZSBzY29wZSBvZiB0aGUgdGVtcGxhdGUgdG8gdXBkYXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gdGVtcGxhdGUgLSBUaGUgdGVtcGxhdGUgdG8gdXBkYXRlXG4gKiBAcGFyYW0ge09iamVjdH0gcGF0Y2ggLSBUaGUgcGF0Y2ggZGF0YVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSAtIENhbGxlZCB3aXRoIHVwZGF0ZWQgbWV0YWRhdGEgaWYgc3VjY2Vzc2Z1bFxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0gQSBwcm9taXNlIHJlc29sdmluZyB0byB0aGUgdXBkYXRlZCBtZXRhZGF0YVxuICovXG5Gb2xkZXJzLnByb3RvdHlwZS51cGRhdGVNZXRhZGF0YSA9IGZ1bmN0aW9uKGZvbGRlcklELCBzY29wZSwgdGVtcGxhdGUsIHBhdGNoLCBjYWxsYmFjaykge1xuXG5cdHZhciBhcGlQYXRoID0gdXJsUGF0aChCQVNFX1BBVEgsIGZvbGRlcklELCAnbWV0YWRhdGEnLCBzY29wZSwgdGVtcGxhdGUpLFxuXHRcdHBhcmFtcyA9IHtcblx0XHRcdGJvZHk6IHBhdGNoLFxuXHRcdFx0aGVhZGVyczoge1xuXHRcdFx0XHQnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24tcGF0Y2granNvbidcblx0XHRcdH1cblx0XHR9O1xuXG5cdHJldHVybiB0aGlzLmNsaWVudC53cmFwV2l0aERlZmF1bHRIYW5kbGVyKHRoaXMuY2xpZW50LnB1dCkoYXBpUGF0aCwgcGFyYW1zLCBjYWxsYmFjayk7XG59O1xuXG4vKipcbiAqIFNldHMgbWV0YWRhdGEgb24gYSBmb2xkZXIsIG92ZXJ3cml0aW5nIGFueSBtZXRhZGF0YSB0aGF0IGV4aXN0cyBmb3IgdGhlIHByb3ZpZGVkIGtleXMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGZvbGRlcklEIC0gVGhlIGZvbGRlciB0byBzZXQgbWV0YWRhdGEgb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBzY29wZSAtIFRoZSBzY29wZSBvZiB0aGUgbWV0YWRhdGEgdGVtcGxhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZW1wbGF0ZSAtIFRoZSBrZXkgb2YgdGhlIG1ldGFkYXRhIHRlbXBsYXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWV0YWRhdGEgLSBUaGUgbWV0YWRhdGEgdG8gc2V0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gQ2FsbGVkIHdpdGggdXBkYXRlZCBtZXRhZGF0YSBpZiBzdWNjZXNzZnVsXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fSBBIHByb21pc2UgcmVzb2x2aW5nIHRvIHRoZSB1cGRhdGVkIG1ldGFkYXRhXG4gKi9cbkZvbGRlcnMucHJvdG90eXBlLnNldE1ldGFkYXRhID0gZnVuY3Rpb24oZm9sZGVySUQsIHNjb3BlLCB0ZW1wbGF0ZSwgbWV0YWRhdGEsIGNhbGxiYWNrKSB7XG5cblx0cmV0dXJuIHRoaXMuYWRkTWV0YWRhdGEoZm9sZGVySUQsIHNjb3BlLCB0ZW1wbGF0ZSwgbWV0YWRhdGEpXG5cdFx0LmNhdGNoKGVyciA9PiB7XG5cblx0XHRcdGlmIChlcnIuc3RhdHVzQ29kZSAhPT0gNDA5KSB7XG5cdFx0XHRcdHRocm93IGVycjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWV0YWRhdGEgYWxyZWFkeSBleGlzdHMgb24gdGhlIGZpbGU7IHVwZGF0ZSBpbnN0ZWFkXG5cdFx0XHR2YXIgdXBkYXRlcyA9IE9iamVjdC5rZXlzKG1ldGFkYXRhKS5tYXAoa2V5ID0+ICh7XG5cdFx0XHRcdG9wOiAnYWRkJyxcblx0XHRcdFx0cGF0aDogYC8ke2tleX1gLFxuXHRcdFx0XHR2YWx1ZTogbWV0YWRhdGFba2V5XSxcblx0XHRcdH0pKTtcblxuXHRcdFx0cmV0dXJuIHRoaXMudXBkYXRlTWV0YWRhdGEoZm9sZGVySUQsIHNjb3BlLCB0ZW1wbGF0ZSwgdXBkYXRlcyk7XG5cdFx0fSlcblx0XHQuYXNDYWxsYmFjayhjYWxsYmFjayk7XG59O1xuXG4vKipcbiAqIERlbGV0ZXMgYSBtZXRhZGF0YSB0ZW1wbGF0ZSBmcm9tIGEgZm9sZGVyLlxuICpcbiAqIEFQSSBFbmRwb2ludDogJy9mb2xkZXJzLzpmb2xkZXJJRC9tZXRhZGF0YS86c2NvcGUvOnRlbXBsYXRlJ1xuICogTWV0aG9kOiBERUxFVEVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9sZGVySUQgLSBUaGUgSUQgb2YgdGhlIGZvbGRlciB0byByZW1vdmUgbWV0YWRhdGEgZnJvbVxuICogQHBhcmFtIHtzdHJpbmd9IHNjb3BlIC0gVGhlIHNjb3BlIG9mIHRoZSBtZXRhZGF0YSB0ZW1wbGF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHRlbXBsYXRlIC0gVGhlIHRlbXBsYXRlIHRvIHJlbW92ZSBmcm9tIHRoZSBmb2xkZXJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gLSBDYWxsZWQgd2l0aCBub3RoaW5nIGlmIHN1Y2Nlc3NmdWwsIGVycm9yIG90aGVyd2lzZVxuICogQHJldHVybnMge1Byb21pc2U8dm9pZD59IEEgcHJvbWlzZSByZXNvbHZpbmcgdG8gbm90aGluZ1xuICovXG5Gb2xkZXJzLnByb3RvdHlwZS5kZWxldGVNZXRhZGF0YSA9IGZ1bmN0aW9uKGZvbGRlcklELCBzY29wZSwgdGVtcGxhdGUsIGNhbGxiYWNrKSB7XG5cblx0dmFyIGFwaVBhdGggPSB1cmxQYXRoKEJBU0VfUEFUSCwgZm9sZGVySUQsICdtZXRhZGF0YScsIHNjb3BlLCB0ZW1wbGF0ZSk7XG5cdHJldHVybiB0aGlzLmNsaWVudC53cmFwV2l0aERlZmF1bHRIYW5kbGVyKHRoaXMuY2xpZW50LmRlbCkoYXBpUGF0aCwgbnVsbCwgY2FsbGJhY2spO1xufTtcblxuLyoqXG4gKiBSZXRyaWV2ZXMgYSBmb2xkZXIgdGhhdCBoYXMgYmVlbiBtb3ZlZCB0byB0aGUgdHJhc2hcbiAqXG4gKiBBUEkgRW5kcG9pbnQ6ICcvZm9sZGVycy86Zm9sZGVySUQvdHJhc2gnXG4gKiBNZXRob2Q6IEdFVFxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gZm9sZGVySUQgIC0gVGhlIElEIG9mIHRoZSBmb2xkZXIgYmVpbmcgcmVxdWVzdGVkXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gQWRkaXRpb25hbCBvcHRpb25zIGZvciB0aGUgcmVxdWVzdC4gQ2FuIGJlIGxlZnQgbnVsbCBpbiBtb3N0IGNhc2VzLlxuICogQHBhcmFtICB7RnVubmN0aW9ufSBbY2FsbGJhY2tdICAtIFBhc3NlZCB0aGUgZm9sZGVyIGluZm9ybWF0aW9uIGlmIGl0IHdhcyBhY3F1aXJlZCBzdWNjZXNzZnVsbHlcbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59IEEgcHJvbWlzZSByZXNvbHZpbmcgdG8gdGhlIHRyYXNoZWQgZm9sZGVyIG9iamVjdFxuICovXG5Gb2xkZXJzLnByb3RvdHlwZS5nZXRUcmFzaGVkRm9sZGVyID0gZnVuY3Rpb24oZm9sZGVySUQsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG5cdHZhciBwYXJhbXMgPSB7XG5cdFx0cXM6IG9wdGlvbnNcblx0fTtcblxuXHR2YXIgYXBpUGF0aCA9IHVybFBhdGgoQkFTRV9QQVRILCBmb2xkZXJJRCwgJ3RyYXNoJyk7XG5cdHJldHVybiB0aGlzLmNsaWVudC53cmFwV2l0aERlZmF1bHRIYW5kbGVyKHRoaXMuY2xpZW50LmdldCkoYXBpUGF0aCwgcGFyYW1zLCBjYWxsYmFjayk7XG59O1xuXG4vKipcbiAqIFJlc3RvcmVzIGFuIGl0ZW0gdGhhdCBoYXMgYmVlbiBtb3ZlZCB0byB0aGUgdHJhc2guIERlZmF1bHQgYmVoYXZpb3IgaXMgdG8gcmVzdG9yZSB0aGUgaXRlbVxuICogdG8gdGhlIGZvbGRlciBpdCB3YXMgaW4gYmVmb3JlIGl0IHdhcyBtb3ZlZCB0byB0aGUgdHJhc2guIElmIHRoYXQgcGFyZW50IGZvbGRlciBubyBsb25nZXJcbiAqIGV4aXN0cyBvciBpZiB0aGVyZSBpcyBub3cgYW4gaXRlbSB3aXRoIHRoZSBzYW1lIG5hbWUgaW4gdGhhdCBwYXJlbnQgZm9sZGVyLCB0aGUgbmV3IHBhcmVudFxuICogb2xkZXIgYW5kL29yIG5ldyBuYW1lIHdpbGwgbmVlZCB0byBiZSBpbmNsdWRlZCBpbiB0aGUgcmVxdWVzdC5cbiAqXG4gKiBBUEkgRW5kcG9pbnQ6ICcvZm9sZGVycy86Zm9sZGVySUQnXG4gKiBNZXRob2Q6IFBPU1RcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9sZGVySUQgLSBUaGUgSUQgb2YgdGhlIGZvbGRlciB0byByZXN0b3JlXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gT3B0aW9uYWwgcGFyYW1ldGVycywgY2FuIGJlIGxlZnQgbnVsbFxuICogQHBhcmFtIHs/c3RyaW5nfSBbb3B0aW9ucy5uYW1lXSAtIFRoZSBuZXcgbmFtZSBmb3IgdGhpcyBpdGVtXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMucGFyZW50X2lkXSAtIFRoZSBuZXcgcGFyZW50IGZvbGRlciBmb3IgdGhpcyBpdGVtXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gQ2FsbGVkIHdpdGggZm9sZGVyIGluZm9ybWF0aW9uIGlmIHN1Y2Nlc3NmdWwsIGVycm9yIG90aGVyd2lzZVxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0gQSBwcm9taXNlIHJlc29sdmluZyB0byB0aGUgcmVzdG9yZWQgZm9sZGVyIG9iamVjdFxuICovXG5Gb2xkZXJzLnByb3RvdHlwZS5yZXN0b3JlRnJvbVRyYXNoID0gZnVuY3Rpb24oZm9sZGVySUQsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG5cblx0Ly8gU2V0IHVwIHRoZSBwYXJlbnRfaWQgcGFyYW1ldGVyXG5cdGlmIChvcHRpb25zICYmIG9wdGlvbnMucGFyZW50X2lkKSB7XG5cblx0XHRvcHRpb25zLnBhcmVudCA9IHtcblx0XHRcdGlkOiBvcHRpb25zLnBhcmVudF9pZFxuXHRcdH07XG5cblx0XHRkZWxldGUgb3B0aW9ucy5wYXJlbnRfaWQ7XG5cdH1cblxuXHR2YXIgYXBpUGF0aCA9IHVybFBhdGgoQkFTRV9QQVRILCBmb2xkZXJJRCksXG5cdFx0cGFyYW1zID0ge1xuXHRcdFx0Ym9keTogb3B0aW9ucyB8fCB7fVxuXHRcdH07XG5cblx0cmV0dXJuIHRoaXMuY2xpZW50LndyYXBXaXRoRGVmYXVsdEhhbmRsZXIodGhpcy5jbGllbnQucG9zdCkoYXBpUGF0aCwgcGFyYW1zLCBjYWxsYmFjayk7XG59O1xuXG4vKipcbiAqIFBlcm1hbmVudGx5IGRlbGV0ZXMgYW4gZm9sZGVyIHRoYXQgaXMgaW4gdGhlIHRyYXNoLiBUaGUgaXRlbSB3aWxsIG5vIGxvbmdlciBleGlzdCBpbiBCb3guIFRoaXMgYWN0aW9uIGNhbm5vdCBiZSB1bmRvbmVcbiAqXG4gKiBBUEkgRW5kcG9pbnQ6ICcvZm9sZGVycy86Zm9sZGVySUQvdHJhc2gnXG4gKiBNZXRob2Q6IERFTEVURVxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gZm9sZGVySUQgQm94IElEIG9mIHRoZSBmb2xkZXIgYmVpbmcgcmVxdWVzdGVkXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbmFsIHBhcmFtZXRlcnNcbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5ldGFnXSBPbmx5IGRlbGV0ZSB0aGUgZm9sZGVyIGlmIHRoZSBFVGFnIG1hdGNoZXNcbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIENhbGxlZCB3aXRoIG5vdGhpbmcgaWYgc3VjY2Vzc2Z1bCwgZXJyb3Igb3RoZXJ3aXNlXG4gKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn0gQSBwcm9taXNlIHJlc29sdmluZyB0byBub3RoaW5nXG4gKi9cbkZvbGRlcnMucHJvdG90eXBlLmRlbGV0ZVBlcm1hbmVudGx5ID0gZnVuY3Rpb24oZm9sZGVySUQsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG5cblx0Ly8gU3dpdGNoIGFyb3VuZCBhcmd1bWVudHMgaWYgbmVjZXNzYXJ5IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuXHRpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcblx0XHRjYWxsYmFjayA9IG9wdGlvbnM7XG5cdFx0b3B0aW9ucyA9IHt9O1xuXHR9XG5cblx0dmFyIHBhcmFtcyA9IHt9O1xuXG5cdGlmIChvcHRpb25zICYmIG9wdGlvbnMuZXRhZykge1xuXHRcdHBhcmFtcy5oZWFkZXJzID0ge1xuXHRcdFx0J0lmLU1hdGNoJzogb3B0aW9ucy5ldGFnXG5cdFx0fTtcblx0fVxuXG5cdHZhciBhcGlQYXRoID0gdXJsUGF0aChCQVNFX1BBVEgsIGZvbGRlcklELCAnL3RyYXNoJyk7XG5cdHJldHVybiB0aGlzLmNsaWVudC53cmFwV2l0aERlZmF1bHRIYW5kbGVyKHRoaXMuY2xpZW50LmRlbCkoYXBpUGF0aCwgcGFyYW1zLCBjYWxsYmFjayk7XG59O1xuXG4vKipcbiAqIFVzZWQgdG8gcmV0cmlldmUgdGhlIHdhdGVybWFyayBmb3IgYSBjb3JyZXNwb25kaW5nIEJveCBmb2xkZXIuXG4gKlxuICogQVBJIEVuZHBvaW50OiAnL2ZvbGRlcnMvOmZvbGRlcklEL3dhdGVybWFyaydcbiAqIE1ldGhvZDogR0VUXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGZvbGRlcklEIC0gVGhlIEJveCBJRCBvZiB0aGUgZm9sZGVyIHRvIGdldCB3YXRlcm1hcmsgZm9yXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gQWRkaXRpb25hbCBvcHRpb25zIGZvciB0aGUgcmVxdWVzdC4gQ2FuIGJlIGxlZnQgbnVsbCBpbiBtb3N0IGNhc2VzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSAtIFBhc3NlZCB0aGUgd2F0ZXJtYXJrIGluZm9ybWF0aW9uIGlmIHN1Y2Nlc3NmdWwsIGVycm9yIG90aGVyd2lzZVxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0gQSBwcm9taXNlIHJlc29sdmluZyB0byB0aGUgd2F0ZXJtYXJrIGluZm9cbiAqL1xuRm9sZGVycy5wcm90b3R5cGUuZ2V0V2F0ZXJtYXJrID0gZnVuY3Rpb24oZm9sZGVySUQsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG5cblx0dmFyIGFwaVBhdGggPSB1cmxQYXRoKEJBU0VfUEFUSCwgZm9sZGVySUQsIFdBVEVSTUFSS19TVUJSRVNPVVJDRSksXG5cdFx0cGFyYW1zID0ge1xuXHRcdFx0cXM6IG9wdGlvbnNcblx0XHR9O1xuXG5cdHJldHVybiB0aGlzLmNsaWVudC5nZXQoYXBpUGF0aCwgcGFyYW1zKVxuXHRcdC50aGVuKHJlc3BvbnNlID0+IHtcblxuXHRcdFx0aWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgIT09IDIwMCkge1xuXHRcdFx0XHR0aHJvdyBlcnJvcnMuYnVpbGRVbmV4cGVjdGVkUmVzcG9uc2VFcnJvcihyZXNwb25zZSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiByZXNwb25zZS5ib2R5LndhdGVybWFyaztcblx0XHR9KVxuXHRcdC5hc0NhbGxiYWNrKGNhbGxiYWNrKTtcbn07XG5cbi8qKlxuICogVXNlZCB0byBhcHBseSBvciB1cGRhdGUgdGhlIHdhdGVybWFyayBmb3IgYSBjb3JyZXNwb25kaW5nIEJveCBmb2xkZXIuXG4gKlxuICogQVBJIEVuZHBvaW50OiAnL2ZvbGRlcnMvOmZvbGRlcklEL3dhdGVybWFyaydcbiAqIE1ldGhvZDogUFVUXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGZvbGRlcklEIC0gVGhlIEJveCBJRCBvZiB0aGUgZm9sZGVyIHRvIHVwZGF0ZSB3YXRlcm1hcmsgZm9yXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gT3B0aW9uYWwgcGFyYW1ldGVycywgY2FuIGJlIGxlZnQgbnVsbFxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSAtIFBhc3NlZCB0aGUgd2F0ZXJtYXJrIGluZm9ybWF0aW9uIGlmIHN1Y2Nlc3NmdWwsIGVycm9yIG90aGVyd2lzZVxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0gQSBwcm9taXNlIHJlc29sdmluZyB0byB0aGUgd2F0ZXJtYXJrIGluZm9cbiAqL1xuRm9sZGVycy5wcm90b3R5cGUuYXBwbHlXYXRlcm1hcmsgPSBmdW5jdGlvbihmb2xkZXJJRCwgb3B0aW9ucywgY2FsbGJhY2spIHtcblx0dmFyIGFwaVBhdGggPSB1cmxQYXRoKEJBU0VfUEFUSCwgZm9sZGVySUQsIFdBVEVSTUFSS19TVUJSRVNPVVJDRSksXG5cdFx0cGFyYW1zID0ge1xuXHRcdFx0Ym9keToge1xuXHRcdFx0XHR3YXRlcm1hcms6IHtcblx0XHRcdFx0XHRpbXByaW50OiAnZGVmYXVsdCcgLy8gQ3VycmVudGx5IHRoZSBBUEkgb25seSBzdXBwb3J0cyBkZWZhdWx0IGltcHJpbnRcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cblx0T2JqZWN0LmFzc2lnbihwYXJhbXMuYm9keS53YXRlcm1hcmssIG9wdGlvbnMpO1xuXG5cdHJldHVybiB0aGlzLmNsaWVudC53cmFwV2l0aERlZmF1bHRIYW5kbGVyKHRoaXMuY2xpZW50LnB1dCkoYXBpUGF0aCwgcGFyYW1zLCBjYWxsYmFjayk7XG59O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVtb3ZlIHRoZSB3YXRlcm1hcmsgZm9yIGEgY29ycmVzcG9uZGluZyBCb3ggZm9sZGVyLlxuICpcbiAqIEFQSSBFbmRwb2ludDogJy9mb2xkZXJzLzpmb2xkZXJJRC93YXRlcm1hcmsnXG4gKiBNZXRob2Q6IERFTEVURVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBmb2xkZXJJRCAtIFRoZSBCb3ggSUQgb2YgdGhlIGZvbGRlciB0byByZW1vdmUgd2F0ZXJtYXJrIGZyb21cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gLSBFbXB0eSByZXNwb25zZSBib2R5IHBhc3NlZCBpZiBzdWNjZXNzZnVsLCBlcnJvciBvdGhlcndpc2VcbiAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fSBBIHByb21pc2UgcmVzb2x2aW5nIHRvIG5vdGhpbmdcbiAqL1xuRm9sZGVycy5wcm90b3R5cGUucmVtb3ZlV2F0ZXJtYXJrID0gZnVuY3Rpb24oZm9sZGVySUQsIGNhbGxiYWNrKSB7XG5cblx0dmFyIGFwaVBhdGggPSB1cmxQYXRoKEJBU0VfUEFUSCwgZm9sZGVySUQsIFdBVEVSTUFSS19TVUJSRVNPVVJDRSk7XG5cblx0cmV0dXJuIHRoaXMuY2xpZW50LndyYXBXaXRoRGVmYXVsdEhhbmRsZXIodGhpcy5jbGllbnQuZGVsKShhcGlQYXRoLCBudWxsLCBjYWxsYmFjayk7XG59O1xuXG4vKipcbiAqIFVzZWQgdG8gbG9jayBhIEJveCBmb2xkZXIuXG4gKlxuICogQVBJIEVuZHBvaW50OiAnL2ZvbGRlcl9sb2NrcydcbiAqIE1ldGhvZDogUE9TVFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBmb2xkZXJJRCAtIFRoZSBCb3ggSUQgb2YgdGhlIGZvbGRlciB0byBsb2NrXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gUGFzc2VkIHRoZSBmb2xkZXIgbG9jayBvYmplY3QgaWYgc3VjY2Vzc2Z1bCwgZXJyb3Igb3RoZXJ3aXNlXG4gKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn0gQSBwcm9taXNlIHJlc29sdmluZyB0byBhIGZvbGRlciBsb2NrIG9iamVjdFxuICovXG5Gb2xkZXJzLnByb3RvdHlwZS5sb2NrID0gZnVuY3Rpb24oZm9sZGVySUQsIGNhbGxiYWNrKSB7XG5cdHZhciBwYXJhbXMgPSB7XG5cdFx0Ym9keToge1xuXHRcdFx0Zm9sZGVyOiB7XG5cdFx0XHRcdHR5cGU6ICdmb2xkZXInLFxuXHRcdFx0XHRpZDogZm9sZGVySURcblx0XHRcdH0sXG5cdFx0XHRsb2NrZWRfb3BlcmF0aW9uczoge1xuXHRcdFx0XHRtb3ZlOiB0cnVlLFxuXHRcdFx0XHRkZWxldGU6IHRydWVcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdHJldHVybiB0aGlzLmNsaWVudC53cmFwV2l0aERlZmF1bHRIYW5kbGVyKHRoaXMuY2xpZW50LnBvc3QpKEZPTERFUl9MT0NLLCBwYXJhbXMsIGNhbGxiYWNrKTtcbn07XG5cbi8qKlxuICogVXNlZCB0byBnZXQgYWxsIGxvY2tzIG9uIGEgZm9sZGVyLlxuICpcbiAqIEFQSSBFbmRwb2ludDogJy9mb2xkZXJfbG9ja3MnXG4gKiBNZXRob2Q6IEdFVFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBmb2xkZXJJRCAtIFRoZSBCb3ggSUQgb2YgdGhlIGZvbGRlciB0byBsb2NrXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gUGFzc2VkIGEgY29sbGVjdGlvbiBvZiBmb2xkZXIgbG9jayBvYmplY3RzIGlmIHN1Y2Nlc3NmdWwsIGVycm9yIG90aGVyd2lzZVxuICogQHJldHVybnMge1Byb21pc2U8dm9pZD59IEEgcHJvbWlzZSByZXNvbHZpbmcgdG8gYSBjb2xsZWN0aW9uIG9mIGZvbGRlciBsb2NrIG9iamVjdHNcbiAqL1xuRm9sZGVycy5wcm90b3R5cGUuZ2V0TG9ja3MgPSBmdW5jdGlvbihmb2xkZXJJRCwgY2FsbGJhY2spIHtcblx0dmFyIHBhcmFtcyA9IHtcblx0XHRxczoge1xuXHRcdFx0Zm9sZGVyX2lkOiBmb2xkZXJJRFxuXHRcdH1cblx0fTtcblx0cmV0dXJuIHRoaXMuY2xpZW50LndyYXBXaXRoRGVmYXVsdEhhbmRsZXIodGhpcy5jbGllbnQuZ2V0KShGT0xERVJfTE9DSywgcGFyYW1zLCBjYWxsYmFjayk7XG59O1xuXG4vKipcbiAqIFVzZWQgdG8gZGVsZXRlIGEgbG9jayBvbiBhIGZvbGRlci5cbiAqXG4gKiBBUEkgRW5kcG9pbnQ6ICcvZm9sZGVyX2xvY2tzLzpmb2xkZXJMb2NrSUQnXG4gKiBNZXRob2Q6IERFTEVURVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBmb2xkZXJMb2NrSUQgLSBUaGUgQm94IElEIG9mIHRoZSBmb2xkZXIgbG9ja1xuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSAtIEVtcHR5IHJlc3BvbnNlIGJvZHkgcGFzc2VkIGlmIHN1Y2Nlc3NmdWwsIGVycm9yIG90aGVyd2lzZVxuICogQHJldHVybnMge1Byb21pc2U8dm9pZD59IEEgcHJvbWlzZSByZXNvbHZpbmcgdG8gbm90aGluZ1xuICovXG5Gb2xkZXJzLnByb3RvdHlwZS5kZWxldGVMb2NrID0gZnVuY3Rpb24oZm9sZGVyTG9ja0lELCBjYWxsYmFjaykge1xuXG5cdHZhciBhcGlQYXRoID0gdXJsUGF0aChGT0xERVJfTE9DSywgZm9sZGVyTG9ja0lEKTtcblxuXHRyZXR1cm4gdGhpcy5jbGllbnQud3JhcFdpdGhEZWZhdWx0SGFuZGxlcih0aGlzLmNsaWVudC5kZWwpKGFwaVBhdGgsIG51bGwsIGNhbGxiYWNrKTtcbn07XG4vKipcbiAqIEBtb2R1bGUgYm94LW5vZGUtc2RrL2xpYi9tYW5hZ2Vycy9mb2xkZXJzXG4gKiBAc2VlIHtATGluayBGb2xkZXJzfVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IEZvbGRlcnM7XG4iXSwibmFtZXMiOlsidXJsUGF0aCIsInJlcXVpcmUiLCJlcnJvcnMiLCJCQVNFX1BBVEgiLCJGT0xERVJfTE9DSyIsIldBVEVSTUFSS19TVUJSRVNPVVJDRSIsIkZvbGRlcnMiLCJjbGllbnQiLCJwcm90b3R5cGUiLCJnZXQiLCJmb2xkZXJJRCIsIm9wdGlvbnMiLCJjYWxsYmFjayIsInBhcmFtcyIsInFzIiwiYXBpUGF0aCIsIndyYXBXaXRoRGVmYXVsdEhhbmRsZXIiLCJnZXRJdGVtcyIsImdldENvbGxhYm9yYXRpb25zIiwiY3JlYXRlIiwicGFyZW50Rm9sZGVySUQiLCJuYW1lIiwiYm9keSIsInBhcmVudCIsImlkIiwicG9zdCIsImNvcHkiLCJuZXdQYXJlbnRJRCIsInVwZGF0ZSIsInVwZGF0ZXMiLCJldGFnIiwiaGVhZGVycyIsInB1dCIsImFkZFRvQ29sbGVjdGlvbiIsImNvbGxlY3Rpb25JRCIsImZpZWxkcyIsInRoZW4iLCJkYXRhIiwiY29sbGVjdGlvbnMiLCJtYXAiLCJjIiwiZmluZCIsInB1c2giLCJhc0NhbGxiYWNrIiwicmVtb3ZlRnJvbUNvbGxlY3Rpb24iLCJmaWx0ZXIiLCJtb3ZlIiwiZGVsZXRlIiwiZGVsIiwiZ2V0QWxsTWV0YWRhdGEiLCJnZXRNZXRhZGF0YSIsInNjb3BlIiwidGVtcGxhdGUiLCJhZGRNZXRhZGF0YSIsInVwZGF0ZU1ldGFkYXRhIiwicGF0Y2giLCJzZXRNZXRhZGF0YSIsIm1ldGFkYXRhIiwiY2F0Y2giLCJlcnIiLCJzdGF0dXNDb2RlIiwiT2JqZWN0Iiwia2V5cyIsImtleSIsIm9wIiwicGF0aCIsInZhbHVlIiwiZGVsZXRlTWV0YWRhdGEiLCJnZXRUcmFzaGVkRm9sZGVyIiwicmVzdG9yZUZyb21UcmFzaCIsInBhcmVudF9pZCIsImRlbGV0ZVBlcm1hbmVudGx5IiwiZ2V0V2F0ZXJtYXJrIiwicmVzcG9uc2UiLCJidWlsZFVuZXhwZWN0ZWRSZXNwb25zZUVycm9yIiwid2F0ZXJtYXJrIiwiYXBwbHlXYXRlcm1hcmsiLCJpbXByaW50IiwiYXNzaWduIiwicmVtb3ZlV2F0ZXJtYXJrIiwibG9jayIsImZvbGRlciIsInR5cGUiLCJsb2NrZWRfb3BlcmF0aW9ucyIsImdldExvY2tzIiwiZm9sZGVyX2lkIiwiZGVsZXRlTG9jayIsImZvbGRlckxvY2tJRCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/box-node-sdk/lib/managers/folders.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/box-node-sdk/lib/managers/groups.js":
/*!**********************************************************!*\
  !*** ./node_modules/box-node-sdk/lib/managers/groups.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * @fileoverview Manager for the Groups resource\n * @author mwiller\n */ \n// -----------------------------------------------------------------------------\n// Typedefs\n// -----------------------------------------------------------------------------\n/**\n * Describes what types of users can perform certain actions on a group\n * @typedef {string} GroupAccessLevel\n */ /**\n * Role of the user in the group\n * @typedef {string} GroupUserRole\n */ // -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\nvar urlPath = __webpack_require__(/*! ../util/url-path */ \"(rsc)/./node_modules/box-node-sdk/lib/util/url-path.js\");\n// -----------------------------------------------------------------------------\n// Private\n// -----------------------------------------------------------------------------\nvar BASE_PATH = \"/groups\", MEMBERSHIPS_PATH = \"/group_memberships\", MEMBERSHIPS_SUBRESOURCE = \"memberships\", COLLABORATIONS_SUBRESOURCE = \"collaborations\";\n// -----------------------------------------------------------------------------\n// Public\n// -----------------------------------------------------------------------------\n/**\n * Simple manager for interacting with all 'Groups' endpoints and actions.\n *\n * @constructor\n * @param {BoxClient} client - The Box API Client that is responsible for making calls to the API\n * @returns {void}\n */ function Groups(client) {\n    this.client = client;\n}\n/**\n * Enum of valid access levels for groups, which are used to specify who can\n * perform certain actions on the group.\n * @enum {GroupAccessLevel}\n */ Groups.prototype.accessLevels = Object.freeze({\n    ADMINS: \"admins_only\",\n    MEMBERS: \"admins_and_members\",\n    ALL_USERS: \"all_managed_users\"\n});\n/**\n * Enum of valid user roles within a group\n * @enum {GroupUserRole}\n */ Groups.prototype.userRoles = Object.freeze({\n    MEMBER: \"member\",\n    ADMIN: \"admin\"\n});\n/**\n * Used to create a new group\n *\n * API Endpoint: '/groups'\n * Method: POST\n *\n * @param {string} name - The name for the new group\n * @param {Object} [options] - Additional parameters\n * @param {string} [options.provenance] - Used to track the external source where the group is coming from\n * @param {string} [options.external_sync_identifier] - Used as a group identifier for groups coming from an external source\n * @param {string} [options.description] - Description of the group\n * @param {GroupAccessLevel} [options.invitability_level] - Specifies who can invite this group to collaborate on folders\n * @param {GroupAccessLevel} [options.member_viewability_level] - Specifies who can view the members of this group\n * @param {Function} [callback] - Passed the new group object if it was created successfully, error otherwise\n * @returns {Promise<Object>} A promise resolving to the new group object\n */ Groups.prototype.create = function(name, options, callback) {\n    var apiPath = urlPath(BASE_PATH), params = {\n        body: options || {}\n    };\n    params.body.name = name;\n    return this.client.wrapWithDefaultHandler(this.client.post)(apiPath, params, callback);\n};\n/**\n * Used to fetch information about a group\n *\n * API Endpoint: '/groups/:groupID'\n * Method: GET\n *\n * @param {string} groupID - The ID of the group to retrieve\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {Function} [callback] - Passed the group object if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the group object\n */ Groups.prototype.get = function(groupID, options, callback) {\n    var apiPath = urlPath(BASE_PATH, groupID), params = {\n        qs: options\n    };\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Used to update or modify a group object\n *\n * API Endpoint: '/groups/:groupID'\n * Method: PUT\n *\n * @param {string} groupID - The ID of the group to update\n * @param {Object} updates - Group fields to update\n * @param {Function} [callback] - Passed the updated group object if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the updated group object\n */ Groups.prototype.update = function(groupID, updates, callback) {\n    var apiPath = urlPath(BASE_PATH, groupID), params = {\n        body: updates\n    };\n    return this.client.wrapWithDefaultHandler(this.client.put)(apiPath, params, callback);\n};\n/**\n * Delete a group\n *\n * API Endpoint: '/groups/:groupID'\n * Method: DELETE\n *\n * @param {string} groupID - The ID of the group to delete\n * @param {Function} [callback] - Passed nothing if successful, error otherwise\n * @returns {Promise<void>} A promise resolving to nothing\n */ Groups.prototype.delete = function(groupID, callback) {\n    var apiPath = urlPath(BASE_PATH, groupID);\n    return this.client.wrapWithDefaultHandler(this.client.del)(apiPath, null, callback);\n};\n/**\n * Add a user to a group, which creates a membership record for the user\n *\n * API Endpoint: '/group_memberships'\n * Method: POST\n *\n * @param {string} groupID - The ID of the group to add the user to\n * @param {string} userID - The ID of the user to add the the group\n * @param {Object} [options] - Optional parameters for adding the user, can be left null in most cases\n * @param {GroupUserRole} [options.role] - The role of the user in the group\n * @param {Function} [callback] - Passed the membership record if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the new membership object\n */ Groups.prototype.addUser = function(groupID, userID, options, callback) {\n    var apiPath = urlPath(MEMBERSHIPS_PATH), params = {\n        body: {\n            user: {\n                id: userID\n            },\n            group: {\n                id: groupID\n            }\n        }\n    };\n    Object.assign(params.body, options);\n    return this.client.wrapWithDefaultHandler(this.client.post)(apiPath, params, callback);\n};\n/**\n * Fetch a specific membership record, which shows that a given user is a member\n * of some group.\n *\n * API Endpoint: '/group_memberships/:membershipID'\n * Method: GET\n *\n * @param {string} membershipID - The ID of the membership to fetch\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {Function} [callback] - Passed the membership record if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the membership object\n */ Groups.prototype.getMembership = function(membershipID, options, callback) {\n    var apiPath = urlPath(MEMBERSHIPS_PATH, membershipID), params = {\n        qs: options\n    };\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Used to update or modify a group object\n *\n * API Endpoint: '/group_memberships/:membershipID'\n * Method: PUT\n *\n * @param {string} membershipID - The ID of the membership to update\n * @param {Object} options - Membership record fields to update\n * @param {Function} [callback] - Passed the updated membership object if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the updated membership object\n */ Groups.prototype.updateMembership = function(membershipID, options, callback) {\n    var apiPath = urlPath(MEMBERSHIPS_PATH, membershipID), params = {\n        body: options\n    };\n    return this.client.wrapWithDefaultHandler(this.client.put)(apiPath, params, callback);\n};\n/**\n * Used to remove a group membership\n *\n * API Endpoint: '/group_memberships/:membershipID'\n * Method: DELETE\n *\n * @param {string} membershipID - The ID of the membership to be removed\n * @param {Function} [callback] - Passed nothing if successful, error otherwise\n * @returns {Promise<void>} A promise resolving to nothing\n */ Groups.prototype.removeMembership = function(membershipID, callback) {\n    var apiPath = urlPath(MEMBERSHIPS_PATH, membershipID);\n    return this.client.wrapWithDefaultHandler(this.client.del)(apiPath, null, callback);\n};\n/**\n * Retreieve a list of memberships for the group, which show which users\n * belong to the group\n *\n * API Endpoint: '/groups/:groupID/memberships'\n * Method: GET\n *\n * @param {string} groupID - The ID of the group to get memberships for\n * @param {Object} [options] - Optional parameters, can be left null in most cases\n * @param {int} [options.limit] - The number of memberships to retrieve\n * @param {int} [options.offset] - Paging marker, retrieve records starting at this position in the list\n * @param {Function} [callback] - Passed a list of memberships if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the collection of memberships\n */ Groups.prototype.getMemberships = function(groupID, options, callback) {\n    var apiPath = urlPath(BASE_PATH, groupID, MEMBERSHIPS_SUBRESOURCE), params = {\n        qs: options\n    };\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Retreieve a list of groups in the caller's enterprise.  This ability is\n * restricted to certain users with permission to view groups.\n *\n * API Endpoint: '/groups'\n * Method: GET\n *\n * @param {Object} [options] - Optional parameters, can be left null in most cases\n * @param {string} [options.filter_term] - Limits the results to only groups whose name starts with the search term\n * @param {int} [options.limit] - The number of memberships to retrieve\n * @param {int} [options.offset] - Paging marker, retrieve records starting at this position in the list\n * @param {Function} [callback] - Passed a list of groups if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the collection of groups\n */ Groups.prototype.getAll = function(options, callback) {\n    var apiPath = urlPath(BASE_PATH), params = {\n        qs: options\n    };\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Retreieve a list of collaborations for the group, which show which items the\n * group has access to.\n *\n * API Endpoint: '/groups/:groupID/collaborations'\n * Method: GET\n *\n * @param {string} groupID - The ID of the group to get collaborations for\n * @param {Object} [options] - Optional parameters, can be left null in most cases\n * @param {int} [options.limit] - The number of memberships to retrieve\n * @param {int} [options.offset] - Paging marker, retrieve records starting at this position in the list\n * @param {Function} [callback] - Passed a list of collaborations if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the collection of collaborations for the group\n */ Groups.prototype.getCollaborations = function(groupID, options, callback) {\n    var apiPath = urlPath(BASE_PATH, groupID, COLLABORATIONS_SUBRESOURCE), params = {\n        qs: options\n    };\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\nmodule.exports = Groups;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/box-node-sdk/lib/managers/groups.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/box-node-sdk/lib/managers/legal-hold-policies.js":
/*!***********************************************************************!*\
  !*** ./node_modules/box-node-sdk/lib/managers/legal-hold-policies.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * @fileoverview Manager for the Legal Hold Policies Resource\n */ \n// -----------------------------------------------------------------------------\n// Typedefs\n// -----------------------------------------------------------------------------\n/**\n * Policy assignment types, which specify what type of object the hold applies to\n * @typedef {string} LegalHoldPolicyAssignmentType\n */ // -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\nvar urlPath = __webpack_require__(/*! ../util/url-path */ \"(rsc)/./node_modules/box-node-sdk/lib/util/url-path.js\");\n// -----------------------------------------------------------------------------\n// Private\n// -----------------------------------------------------------------------------\nvar BASE_PATH = \"/legal_hold_policies\", ASSIGNMENTS_PATH = \"/legal_hold_policy_assignments\", FILE_VERSION_LEGAL_HOLDS_PATH = \"/file_version_legal_holds\";\n// -----------------------------------------------------------------------------\n// Public\n// -----------------------------------------------------------------------------\n/**\n * Simple manager for interacting with all Legal Holds endpoints and actions.\n *\n * @constructor\n * @param {BoxClient} client - The Box API Client that is responsible for making calls to the API\n * @returns {void}\n */ function LegalHoldPolicies(client) {\n    this.client = client;\n}\n/**\n * Enum of valid policy assignment types, which specify what object the policy applies to\n * @readonly\n * @enum {LegalHoldPolicyAssignmentType}\n */ LegalHoldPolicies.prototype.assignmentTypes = Object.freeze({\n    FOLDER: \"folder\",\n    USER: \"user\",\n    FILE: \"file\",\n    FILE_VERSION: \"file_version\"\n});\n/**\n * Used to create a single legal hold policy for an enterprise\n *\n * API Endpoint: '/legal_hold_policies'\n * Method: POST\n *\n * @param {string} name - The name of the legal hold policy to be created\n * @param {Object} [options] - Additional parameters\n * @param {string} [options.description] - Description of the legal hold policy\n * @param {string} [options.filter_started_at] - Date filter, any Custodian assignments will apply only to file versions created or uploaded inside of the date range\n * @param {string} [options.filter_ended_at] - Date filter, any Custodian assignments will apply only to file versions created or uploaded inside of the date range\n * @param {boolean} [options.is_ongoing] - After initialization, Assignments under this Policy will continue applying to files based on events, indefinitely\n * @param {Function} [callback] - Passed the new policy information if it was acquired successfully, error otherwise\n * @returns {Promise<Object>} A promise resolving to the created policy\n */ LegalHoldPolicies.prototype.create = function(name, options, callback) {\n    var apiPath = urlPath(BASE_PATH), params = {\n        body: options || {}\n    };\n    params.body.policy_name = name;\n    return this.client.wrapWithDefaultHandler(this.client.post)(apiPath, params, callback);\n};\n/**\n * Fetches details about a specific legal hold policy\n *\n * API Endpoint: '/legal_hold_policies/:policyID'\n * Method: GET\n *\n * @param {string} policyID - The Box ID of the legal hold policy being requested\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {Function} [callback] - Passed the policy information if it was acquired successfully, error otherwise\n * @returns {Promise<Object>} A promise resolving to the policy object\n */ LegalHoldPolicies.prototype.get = function(policyID, options, callback) {\n    var apiPath = urlPath(BASE_PATH, policyID), params = {\n        qs: options\n    };\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Update or modify a legal hold policy.\n *\n * API Endpoint: '/legal_hold_policies/:policyID'\n * Method: PUT\n *\n * @param {string} policyID - The Box ID of the legal hold policy to update\n * @param {Object} updates - The information to be updated\n * @param {string} [updates.policy_name] - Name of Legal Hold Policy\n * @param {string} [updates.description] - Description of Legal Hold Policy\n * @param {string} [updates.release_notes] - Notes around why the policy was released\n * @param {Function} [callback] - Passed the updated policy information if it was acquired successfully, error otherwise\n * @returns {Promise<Object>} A promise resolving to the updated policy\n */ LegalHoldPolicies.prototype.update = function(policyID, updates, callback) {\n    var apiPath = urlPath(BASE_PATH, policyID), params = {\n        body: updates\n    };\n    return this.client.wrapWithDefaultHandler(this.client.put)(apiPath, params, callback);\n};\n/**\n * Fetches a list of legal hold policies for the enterprise\n *\n * API Endpoint: '/legal_hold_policies'\n * Method: GET\n *\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {string} [options.policy_name] - A full or partial name to filter the legal hold policies by\n * @param {int} [options.limit] - Limit result size to this number\n * @param {string} [options.marker] - Paging marker, leave blank to start at the first page\n * @param {Function} [callback] - Passed the policy objects if they were acquired successfully, error otherwise\n * @returns {Promise<Object>} A promise resolving to the collection of policies\n */ LegalHoldPolicies.prototype.getAll = function(options, callback) {\n    var apiPath = urlPath(BASE_PATH), params = {\n        qs: options\n    };\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Sends request to delete an existing legal hold policy. Note that this is an\n * asynchronous process - the policy will not be fully deleted yet when the\n * response comes back.\n *\n * API Endpoint: '/legal_hold_policies/:policyID'\n * Method: DELETE\n *\n * @param {string} policyID - The legal hold policy to delete\n * @param {Function} [callback] - Passed nothing if successful, error otherwise\n * @returns {Promise<void>} A promise resolving to nothing\n */ LegalHoldPolicies.prototype.delete = function(policyID, callback) {\n    var apiPath = urlPath(BASE_PATH, policyID);\n    return this.client.wrapWithDefaultHandler(this.client.del)(apiPath, null, callback);\n};\n/**\n * Fetch a list of assignments for a given legal hold policy\n *\n * API Endpoint: '/legal_hold_policies/:policyID/assignments'\n * Method: GET\n *\n * @param {string} policyID - The Box ID of the legal hold policy to get assignments for\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {LegalHoldPolicyAssignmentType} [options.assign_to_type] - Filter assignments of this type only\n * @param {string} [options.assign_to_id] - Filter assignments to this ID only. Note that this will only show assignments applied directly to this entity.\n * @param {Function} [callback] - Passed the assignment objects if they were acquired successfully, error otherwise\n * @returns {Promise<Object>} A promise resolving to the collection of policy assignments\n */ LegalHoldPolicies.prototype.getAssignments = function(policyID, options, callback) {\n    var apiPath = urlPath(ASSIGNMENTS_PATH), params = {\n        qs: Object.assign({\n            policy_id: policyID\n        }, options)\n    };\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Assign a lehal hold policy to an object\n *\n * API Endpoint: '/legal_hold_policy_assignments\n * Method: POST\n *\n * @param {string} policyID - The ID of the policy to assign\n * @param {LegalHoldPolicyAssignmentType} assignType - The type of object the policy will be assigned to\n * @param {string} assignID - The Box ID of the object to assign the legal hold policy to\n * @param {Function} [callback] - Passed the new assignment object if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the created assignment object\n */ LegalHoldPolicies.prototype.assign = function(policyID, assignType, assignID, callback) {\n    var apiPath = urlPath(ASSIGNMENTS_PATH), params = {\n        body: {\n            policy_id: policyID,\n            assign_to: {\n                type: assignType,\n                id: assignID\n            }\n        }\n    };\n    return this.client.wrapWithDefaultHandler(this.client.post)(apiPath, params, callback);\n};\n/**\n * Fetch a specific policy assignment\n *\n * API Endpoint: '/legal_hold_policy_assignments/:assignmentID'\n * Method: GET\n *\n * @param {string} assignmentID - The Box ID of the policy assignment object to fetch\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {Function} [callback] - Passed the assignment object if it was acquired successfully, error otherwise\n * @returns {Promise<Object>} A promise resolving to the assignment object\n */ LegalHoldPolicies.prototype.getAssignment = function(assignmentID, options, callback) {\n    var apiPath = urlPath(ASSIGNMENTS_PATH, assignmentID), params = {\n        qs: options\n    };\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Sends request to delete an existing legal hold policy. Note that this is an\n * asynchronous process - the policy will not be fully deleted yet when the\n * response comes back.\n *\n * API Endpoint: '/legal_hold_policy_assignments/:assignmentID'\n * Method: DELETE\n *\n * @param {string} assignmentID - The legal hold policy assignment to delete\n * @param {Function} [callback] - Passed nothing if successful, error otherwise\n * @returns {Promise<void>} A promise resolving to nothing\n */ LegalHoldPolicies.prototype.deleteAssignment = function(assignmentID, callback) {\n    var apiPath = urlPath(ASSIGNMENTS_PATH, assignmentID);\n    return this.client.wrapWithDefaultHandler(this.client.del)(apiPath, null, callback);\n};\n/**\n * Get the specific legal hold record for a held file version.\n *\n * API Endpoint: '/file_version_legal_holds/:legalHoldID'\n * Method: GET\n *\n * @param {string} legalHoldID - The ID for the file legal hold record to retrieve\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {Function} [callback] - Pass the file version legal hold record if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the legal hold record\n */ LegalHoldPolicies.prototype.getFileVersionLegalHold = function(legalHoldID, options, callback) {\n    var apiPath = urlPath(FILE_VERSION_LEGAL_HOLDS_PATH, legalHoldID), params = {\n        qs: options\n    };\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Get a list of legal hold records for held file versions in an enterprise.\n *\n * API Endpoint: '/file_version_legal_holds'\n * Method: GET\n *\n * @param {string} policyID - ID of Legal Hold Policy to get File Version Legal Holds for\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {Function} [callback] - Pass the file version legal holds records if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the collection of all file version legal holds\n */ LegalHoldPolicies.prototype.getAllFileVersionLegalHolds = function(policyID, options, callback) {\n    var apiPath = urlPath(FILE_VERSION_LEGAL_HOLDS_PATH), params = {\n        qs: Object.assign({\n            policy_id: policyID\n        }, options)\n    };\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\nmodule.exports = LegalHoldPolicies;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/box-node-sdk/lib/managers/legal-hold-policies.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/box-node-sdk/lib/managers/metadata.js":
/*!************************************************************!*\
  !*** ./node_modules/box-node-sdk/lib/managers/metadata.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * @fileoverview Manager for the Box Metadata Resource\n */ \n// -----------------------------------------------------------------------------\n// Typedefs\n// -----------------------------------------------------------------------------\n/** @typedef {string} MetadataFieldType */ /**\n * Metadata enum option\n * @typedef {Object} MetadataEnumOption\n * @property {string} key The option value\n */ /**\n * Field definition for a metadata template\n * @typedef {Object} MetadataTemplateField\n * @property {MetadataFieldType} type The type of the field\n * @property {string} key The programmatic name of the field\n * @property {string} displayName The display name of the field\n * @property {MetadataEnumOption[]} [options] For enum fields, the options\n */ // -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\nvar urlPath = __webpack_require__(/*! ../util/url-path */ \"(rsc)/./node_modules/box-node-sdk/lib/util/url-path.js\"), merge = __webpack_require__(/*! merge-options */ \"(rsc)/./node_modules/merge-options/index.js\");\n// -----------------------------------------------------------------------------\n// Private\n// -----------------------------------------------------------------------------\nvar PROPERTIES_TEMPLATE = \"properties\", BASE_PATH = \"/metadata_templates\", SCHEMA_SUBRESOURCE = \"schema\", ENTERPRISE_SCOPE = \"enterprise\", GLOBAL_SCOPE = \"global\", CASCADE_POLICIES_PATH = \"/metadata_cascade_policies\", QUERY_PATH = \"/metadata_queries/execute_read\";\n// -----------------------------------------------------------------------------\n// Public\n// -----------------------------------------------------------------------------\n/**\n * Simple manager for interacting with all metadata endpoints and actions.\n *\n * @constructor\n * @param {BoxClient} client - The Box API Client that is responsible for making calls to the API\n * @returns {void}\n */ function Metadata(client) {\n    this.client = client;\n}\nMetadata.prototype = {\n    templates: {\n        PROPERTIES: PROPERTIES_TEMPLATE\n    },\n    scopes: {\n        ENTERPRISE: ENTERPRISE_SCOPE,\n        GLOBAL: GLOBAL_SCOPE\n    },\n    cascadeResolution: Object.freeze({\n        PRESERVE_EXISTING: \"none\",\n        OVERWRITE: \"overwrite\"\n    }),\n    /**\n\t * Valid metadata field types\n\t * @readonly\n\t * @enum {MetadataFieldType}\n\t */ fieldTypes: Object.freeze({\n        STRING: \"string\",\n        ENUM: \"enum\",\n        NUMBER: \"float\",\n        DATE: \"date\",\n        MULTI_SELECT: \"multiSelect\"\n    }),\n    /**\n\t * Retrieve the schema definition for a metadata template\n\t *\n\t * API Endpoint: '/metadata_templates/:scope/:template'\n\t * Method: GET\n\t *\n\t * @param {string} scope - The scope of the template, e.g. \"enterprise\"\n\t * @param {string} template - The template to retrieve\n\t * @param {Function} [callback] - Called with the template schema if successful\n\t * @returns {Promise<Object>} A promise resolving to the template schema\n\t */ getTemplateSchema (scope, template, callback) {\n        var apiPath = urlPath(BASE_PATH, scope, template, SCHEMA_SUBRESOURCE);\n        return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, null, callback);\n    },\n    /**\n\t * Retrieve the schema definition for a metadata template by ID\n\t *\n\t * API Endpoint: '/metadata_templates/:id'\n\t * Method: GET\n\t *\n\t * @param {string} templateID - The ID of the template to retrieve\n\t * @param {Function} [callback] - Called with the template schema if successful\n\t * @returns {Promise<Object>} A promise resolving to the template schema\n\t */ getTemplateByID (templateID, callback) {\n        var apiPath = urlPath(BASE_PATH, templateID);\n        return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, null, callback);\n    },\n    /**\n\t * Get all templates in a given scope\n\t *\n\t * API Endpoint: '/metadata_templates/:scope'\n\t * Method: GET\n\t *\n\t * @param {string} scope - The scope to retrieve templates for\n\t * @param {Function} [callback] - Called with an array of templates when successful\n\t * @returns {Promise<Object>} A promise resolving to the collection of templates\n\t */ getTemplates (scope, callback) {\n        var apiPath = urlPath(BASE_PATH, scope);\n        return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, null, callback);\n    },\n    /**\n\t * Create a new metadata template\n\t *\n\t * API Endpoint: '/metadata_templates/schema',\n\t * Method: POST\n\t *\n\t * @param {string} templateName - The name of the metadata template\n\t * @param {MetadataTemplateField[]} fields - A list of fields for the template\n\t * @param {Object} [options] - Optional parameters, can be left null in many cases\n\t * @param {string} [options.templateKey] - The programmatic key for the template\n\t * @param {boolean} [options.hidden] - Whether the template should be hidden in the UI\n\t * @param {string} [options.scope=enterprise] - The scope for the template, only 'enterprise' is supported for now\n\t * @param {boolean} [options.copyInstanceOnItemCopy] - Whether to include the metadata when a file or folder is copied\n\t * @param {Function} [callback] - Passed the template if successful, error otherwise\n\t * @returns {Promise<Object>} A promise resolving to the created template\n\t */ createTemplate (templateName, fields, options, callback) {\n        var apiPath = urlPath(BASE_PATH, SCHEMA_SUBRESOURCE), params = {\n            body: {\n                scope: ENTERPRISE_SCOPE,\n                displayName: templateName,\n                fields\n            }\n        };\n        Object.assign(params.body, options);\n        return this.client.wrapWithDefaultHandler(this.client.post)(apiPath, params, callback);\n    },\n    /**\n\t * Update a metadata template via one or more non-breaking operations.  Each\n\t * operation is a an object descrbing one change to the template or its\n\t * fields.\n\t *\n\t * API Endpoint: '/metadata_templates/:scope/:template/schema'\n\t * Method: PUT\n\t *\n\t * @param {string} scope - The scope of the template to modify\n\t * @param {string} template - The template to modify\n\t * @param {Object[]} operations - The operations to perform\n\t * @param {Function} [callback] - Passed the updated template if successful, error otherwise\n\t * @returns {Promise<Object>} A promise resolving to the updated template\n\t * @see {@link https://developer.box.com/en/reference/put-metadata-templates-id-id-schema/}\n\t */ updateTemplate (scope, template, operations, callback) {\n        var apiPath = urlPath(BASE_PATH, scope, template, SCHEMA_SUBRESOURCE), params = {\n            body: operations\n        };\n        return this.client.wrapWithDefaultHandler(this.client.put)(apiPath, params, callback);\n    },\n    /**\n\t * Delete a metadata template from an enterprise.\n\t *\n\t * API Endpoint: '/metadata_templates/:scope/:template/schema'\n\t * Method: DELETE\n\t *\n\t * @param {string} scope - The scope of the template to delete\n\t * @param {string} template - The template to delete\n\t * @param {Function} [callback] - Passed empty response body if successful, err otherwise\n\t * @returns {Promise<void>} A promise resolving to nothing\n\t * @see {@link https://developer.box.com/en/reference/delete-metadata-templates-id-id-schema/}\n\t */ deleteTemplate (scope, template, callback) {\n        var apiPath = urlPath(BASE_PATH, scope, template, SCHEMA_SUBRESOURCE);\n        return this.client.wrapWithDefaultHandler(this.client.del)(apiPath, null, callback);\n    },\n    /**\n\t * Get the cascade policies associated with a given folder.\n\t *\n\t * API Endpoint: '/metadata_cascade_policies'\n\t * Method: GET\n\t *\n\t * @param {string} folderID The ID of the folder to get cascade policies for\n\t * @param {Object} [options] Optional parameters\n\t * @param {string} [options.owner_enterprise_id] ID of the enterprise to get policies for\n\t * @param {Function} [callback] Passed the collection of policies if successful\n\t * @returns {Promise<Object>} Promise resolving to the collection of policies\n\t */ getCascadePolicies (folderID, options, callback) {\n        var apiPath = urlPath(CASCADE_POLICIES_PATH), params = {\n            qs: Object.assign({\n                folder_id: folderID\n            }, options)\n        };\n        return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n    },\n    /**\n\t * Get a metadata cascade policy object by ID\n\t *\n\t * API Endpoint: '/metadata_cascade_policies/:policyID'\n\t * Method: GET\n\t *\n\t * @param {string} policyID The ID of the policy to retrieve\n\t * @param {Function} [callback] Passed the cascade policy if successful\n\t * @returns {Promise<Object>} Promise resolving to the cascade policy\n\t */ getCascadePolicy (policyID, callback) {\n        var apiPath = urlPath(CASCADE_POLICIES_PATH, policyID);\n        return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, null, callback);\n    },\n    /**\n\t * Add a new cascade policy to a folder/metadata template, causing the\n\t * metadata template to be applied to all items and subfolders inside the\n\t * folder.\n\t *\n\t * API Endpoint: '/metadata_cascade_policies'\n\t * Method: POST\n\t *\n\t * @param {string} scope Metadata template scope for the template to cascade\n\t * @param {string} templateKey Metadata template key for the template to cascade\n\t * @param {string} folderID The ID of the folder to cascade over\n\t * @param {Function} [callback] Passed the cascade policy if successful\n\t * @returns {Promise<Object>} Promise resolving to the cascade policy\n\t */ createCascadePolicy (scope, templateKey, folderID, callback) {\n        var apiPath = urlPath(CASCADE_POLICIES_PATH), params = {\n            body: {\n                folder_id: folderID,\n                scope,\n                templateKey\n            }\n        };\n        return this.client.wrapWithDefaultHandler(this.client.post)(apiPath, params, callback);\n    },\n    /**\n\t * Delete the metadata cascade policy with the given ID\n\t *\n\t * API Endpoint: '/metadata_cascade_policies/:policyID'\n\t * Method: DELETE\n\t *\n\t * @param {string} policyID The ID of the policy to delete\n\t * @param {Function} [callback] Passed nothing if successful\n\t * @returns {Promise<void>} Promise resolving to nothing\n\t */ deleteCascadePolicy (policyID, callback) {\n        var apiPath = urlPath(CASCADE_POLICIES_PATH, policyID);\n        return this.client.wrapWithDefaultHandler(this.client.del)(apiPath, null, callback);\n    },\n    /**\n\t * If a policy already exists on a folder, this will apply that policy to all existing files and\n\t * sub-folders within the target folder.\n\t *\n\t * API Endpoint: '/metadata_cascade_policies/:policyID/apply'\n\t * Method: POST\n\t *\n\t * @param {string} policyID The ID of the policy to delete\n\t * @param {string} resolutionMethod How to resolve conflicts, either \"none\" or \"overwrite\"\n\t * @param {Function} [callback] Passed nothing if successful\n\t * @returns {Promise<void>} Promise resolving to nothing\n\t */ forceApplyCascadePolicy (policyID, resolutionMethod, callback) {\n        var apiPath = urlPath(CASCADE_POLICIES_PATH, policyID, \"apply\"), params = {\n            body: {\n                conflict_resolution: resolutionMethod\n            }\n        };\n        return this.client.wrapWithDefaultHandler(this.client.post)(apiPath, params, callback);\n    },\n    /**\n\t * Query Box items by their metadata\n\t *\n\t * API Endpoint: '/metadata_queries/execute_read'\n\t * Method: POST\n\t *\n\t * @param {string} from - The template used in the query. Must be in the form scope.templateKey\n\t * @param {string} ancestorFolderId - The folder_id to which to restrain the query\n\t * @param {Object} options - Optional parameters\n\t * @param {string} [options.query] - The logical expression of the query\n\t * @param {Object} [options.query_parameters] - Required if query present. The arguments for the query\n\t * @param {string} [options.index_name] - The name of the Index to use\n\t * @param {Object} [options.order_by] - The field_key(s) to order on and the corresponding direction(s)\n\t * @param {Array} [options.fields] - An array of fields to return\n\t * @param {Function} [callback] - Passed a collection of items and their associated metadata\n\t * @returns {Promise<void>} Promise resolving to a collection of items and their associated metadata\n\t */ query (from, ancestorFolderId, options, callback) {\n        var body = {\n            from,\n            ancestor_folder_id: ancestorFolderId\n        };\n        var params = {\n            body: merge(body, options)\n        };\n        return this.client.wrapWithDefaultHandler(this.client.post)(QUERY_PATH, params, callback);\n    }\n};\nmodule.exports = Metadata;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/box-node-sdk/lib/managers/metadata.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/box-node-sdk/lib/managers/recent-items.js":
/*!****************************************************************!*\
  !*** ./node_modules/box-node-sdk/lib/managers/recent-items.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * @fileoverview Manager for the Box RecentItem Resource\n */ \n// ------------------------------------------------------------------------------\n// Requirements\n// ------------------------------------------------------------------------------\nvar urlPath = __webpack_require__(/*! ../util/url-path */ \"(rsc)/./node_modules/box-node-sdk/lib/util/url-path.js\");\n// ------------------------------------------------------------------------------\n// Private\n// ------------------------------------------------------------------------------\nvar BASE_PATH = \"/recent_items\";\n// ------------------------------------------------------------------------------\n// Public\n// ------------------------------------------------------------------------------\n/**\n * Simple manager for interacting with all 'RecentItem' endpoints and actions.\n *\n * @constructor\n * @param {BoxClient} client - The Box API Client that is responsible for making calls to the API\n * @returns {void}\n */ function RecentItems(client) {\n    this.client = client;\n}\n/**\n * Requests all items that have been accessed by a user in the last 90 days or the last 1000 items accessed.\n *\n * API Endpoint: '/recent_items'\n * Method: GET\n *\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {int} [options.limit] Maximum number of items to return\n * @param {string} [options.marker] The position marker for marker-based paging\n * @param {string} [options.fields] Comma-separated list of fields to include in the response\n * @param {Function} [callback] - Passed the items information if they were acquired successfully\n * @returns {Promise<Object>} A promise resolving to the collection of items in the collection\n */ RecentItems.prototype.get = function(options, callback) {\n    var params = {\n        qs: options\n    };\n    var apiPath = urlPath(BASE_PATH);\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * @module box-node-sdk/lib/managers/recent-items\n * @see {@Link RecentItems}\n */ module.exports = RecentItems;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYm94LW5vZGUtc2RrL2xpYi9tYW5hZ2Vycy9yZWNlbnQtaXRlbXMuanMiLCJtYXBwaW5ncyI6IkFBQUE7O0NBRUMsR0FFRDtBQUVBLGlGQUFpRjtBQUNqRixlQUFlO0FBQ2YsaUZBQWlGO0FBQ2pGLElBQUlBLFVBQVVDLG1CQUFPQSxDQUFDO0FBRXRCLGlGQUFpRjtBQUNqRixVQUFVO0FBQ1YsaUZBQWlGO0FBQ2pGLElBQUlDLFlBQVk7QUFFaEIsaUZBQWlGO0FBQ2pGLFNBQVM7QUFDVCxpRkFBaUY7QUFFakY7Ozs7OztDQU1DLEdBQ0QsU0FBU0MsWUFBWUMsTUFBTTtJQUMxQixJQUFJLENBQUNBLE1BQU0sR0FBR0E7QUFDZjtBQUVBOzs7Ozs7Ozs7Ozs7Q0FZQyxHQUNERCxZQUFZRSxTQUFTLENBQUNDLEdBQUcsR0FBRyxTQUFTQyxPQUFPLEVBQUVDLFFBQVE7SUFDckQsSUFBSUMsU0FBUztRQUNaQyxJQUFJSDtJQUNMO0lBQ0EsSUFBSUksVUFBVVgsUUFBUUU7SUFDdEIsT0FBTyxJQUFJLENBQUNFLE1BQU0sQ0FBQ1Esc0JBQXNCLENBQUMsSUFBSSxDQUFDUixNQUFNLENBQUNFLEdBQUcsRUFBRUssU0FBU0YsUUFBUUQ7QUFDN0U7QUFFQTs7O0NBR0MsR0FDREssT0FBT0MsT0FBTyxHQUFHWCIsInNvdXJjZXMiOlsid2VicGFjazovL2NpdmlsLWVuZ2luZWVyaW5nLXBsYXRmb3JtLy4vbm9kZV9tb2R1bGVzL2JveC1ub2RlLXNkay9saWIvbWFuYWdlcnMvcmVjZW50LWl0ZW1zLmpzP2RmZDMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IE1hbmFnZXIgZm9yIHRoZSBCb3ggUmVjZW50SXRlbSBSZXNvdXJjZVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBSZXF1aXJlbWVudHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxudmFyIHVybFBhdGggPSByZXF1aXJlKCcuLi91dGlsL3VybC1wYXRoJyk7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUHJpdmF0ZVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG52YXIgQkFTRV9QQVRIID0gJy9yZWNlbnRfaXRlbXMnO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFB1YmxpY1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8qKlxuICogU2ltcGxlIG1hbmFnZXIgZm9yIGludGVyYWN0aW5nIHdpdGggYWxsICdSZWNlbnRJdGVtJyBlbmRwb2ludHMgYW5kIGFjdGlvbnMuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0JveENsaWVudH0gY2xpZW50IC0gVGhlIEJveCBBUEkgQ2xpZW50IHRoYXQgaXMgcmVzcG9uc2libGUgZm9yIG1ha2luZyBjYWxscyB0byB0aGUgQVBJXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gUmVjZW50SXRlbXMoY2xpZW50KSB7XG5cdHRoaXMuY2xpZW50ID0gY2xpZW50O1xufVxuXG4vKipcbiAqIFJlcXVlc3RzIGFsbCBpdGVtcyB0aGF0IGhhdmUgYmVlbiBhY2Nlc3NlZCBieSBhIHVzZXIgaW4gdGhlIGxhc3QgOTAgZGF5cyBvciB0aGUgbGFzdCAxMDAwIGl0ZW1zIGFjY2Vzc2VkLlxuICpcbiAqIEFQSSBFbmRwb2ludDogJy9yZWNlbnRfaXRlbXMnXG4gKiBNZXRob2Q6IEdFVFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBBZGRpdGlvbmFsIG9wdGlvbnMgZm9yIHRoZSByZXF1ZXN0LiBDYW4gYmUgbGVmdCBudWxsIGluIG1vc3QgY2FzZXMuXG4gKiBAcGFyYW0ge2ludH0gW29wdGlvbnMubGltaXRdIE1heGltdW0gbnVtYmVyIG9mIGl0ZW1zIHRvIHJldHVyblxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLm1hcmtlcl0gVGhlIHBvc2l0aW9uIG1hcmtlciBmb3IgbWFya2VyLWJhc2VkIHBhZ2luZ1xuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmZpZWxkc10gQ29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgZmllbGRzIHRvIGluY2x1ZGUgaW4gdGhlIHJlc3BvbnNlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gUGFzc2VkIHRoZSBpdGVtcyBpbmZvcm1hdGlvbiBpZiB0aGV5IHdlcmUgYWNxdWlyZWQgc3VjY2Vzc2Z1bGx5XG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fSBBIHByb21pc2UgcmVzb2x2aW5nIHRvIHRoZSBjb2xsZWN0aW9uIG9mIGl0ZW1zIGluIHRoZSBjb2xsZWN0aW9uXG4gKi9cblJlY2VudEl0ZW1zLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihvcHRpb25zLCBjYWxsYmFjaykge1xuXHR2YXIgcGFyYW1zID0ge1xuXHRcdHFzOiBvcHRpb25zXG5cdH07XG5cdHZhciBhcGlQYXRoID0gdXJsUGF0aChCQVNFX1BBVEgpO1xuXHRyZXR1cm4gdGhpcy5jbGllbnQud3JhcFdpdGhEZWZhdWx0SGFuZGxlcih0aGlzLmNsaWVudC5nZXQpKGFwaVBhdGgsIHBhcmFtcywgY2FsbGJhY2spO1xufTtcblxuLyoqXG4gKiBAbW9kdWxlIGJveC1ub2RlLXNkay9saWIvbWFuYWdlcnMvcmVjZW50LWl0ZW1zXG4gKiBAc2VlIHtATGluayBSZWNlbnRJdGVtc31cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBSZWNlbnRJdGVtcztcbiJdLCJuYW1lcyI6WyJ1cmxQYXRoIiwicmVxdWlyZSIsIkJBU0VfUEFUSCIsIlJlY2VudEl0ZW1zIiwiY2xpZW50IiwicHJvdG90eXBlIiwiZ2V0Iiwib3B0aW9ucyIsImNhbGxiYWNrIiwicGFyYW1zIiwicXMiLCJhcGlQYXRoIiwid3JhcFdpdGhEZWZhdWx0SGFuZGxlciIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/box-node-sdk/lib/managers/recent-items.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/box-node-sdk/lib/managers/retention-policies.js":
/*!**********************************************************************!*\
  !*** ./node_modules/box-node-sdk/lib/managers/retention-policies.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * @fileoverview Manager for the Retention Policies Resource\n */ \n// -----------------------------------------------------------------------------\n// Typedefs\n// -----------------------------------------------------------------------------\n/**\n * Retention policy type, which specifies how long the policy should\n * remain in effect\n * @typedef {string} RetentionPolicyType\n */ /**\n * Retention policy disposition action, which specifies what should\n * be done when the retention period is over\n * @typedef {string} RetentionPolicyDispositionAction\n */ /**\n * Policy assignment types, which specify what type of object the policy applies to\n * @typedef {string} RetentionPolicyAssignmentType\n */ /**\n * Metadata template fields to filter on for assigning a retention policy\n * @typedef {Object} MetadataFilterField\n * @property {string} field The field to filter on\n * @property {string|int} value The value to filter against\n */ // -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\nvar urlPath = __webpack_require__(/*! ../util/url-path */ \"(rsc)/./node_modules/box-node-sdk/lib/util/url-path.js\");\n// -----------------------------------------------------------------------------\n// Private\n// -----------------------------------------------------------------------------\nvar BASE_PATH = \"/retention_policies\", ASSIGNMENTS_PATH = \"/retention_policy_assignments\", FILE_VERSION_RETENTIONS_PATH = \"/file_version_retentions\", ASSIGNMENTS_SUBRESOURCE = \"assignments\";\n// -----------------------------------------------------------------------------\n// Public\n// -----------------------------------------------------------------------------\n/**\n * Simple manager for interacting with all Retention Policies endpoints and actions.\n *\n * @constructor\n * @param {BoxClient} client - The Box API Client that is responsible for making calls to the API\n * @returns {void}\n */ function RetentionPolicies(client) {\n    this.client = client;\n}\n/**\n * Enum of valid retention policy types, which specify how long the policy should\n * remain in effect.\n * @readonly\n * @enum {RetentionPolicyType}\n */ RetentionPolicies.prototype.policyTypes = Object.freeze({\n    FINITE: \"finite\",\n    INDEFINITE: \"indefinite\"\n});\n/**\n * Enum of valid retention policy disposition actions, which specify what should\n * be done when the retention period is over\n * @readonly\n * @enum {RetentionPolicyDispositionAction}\n */ RetentionPolicies.prototype.dispositionActions = Object.freeze({\n    PERMANENTLY_DELETE: \"permanently_delete\",\n    REMOVE_RETENTION: \"remove_retention\"\n});\n/**\n * Enum of valid policy assignment types, which specify what object the policy applies to\n * @readonly\n * @enum {RetentionPolicyAssignmentType}\n */ RetentionPolicies.prototype.assignmentTypes = Object.freeze({\n    FOLDER: \"folder\",\n    ENTERPRISE: \"enterprise\",\n    METADATA: \"metadata_template\"\n});\n/**\n * Used to create a single retention policy for an enterprise\n *\n * API Endpoint: '/retention_policies'\n * Method: POST\n *\n * @param {string} name - The name of the retention policy to be created\n * @param {RetentionPolicyType} type - The type of policy to create\n * @param {RetentionPolicyDispositionAction} action - The disposition action for the new policy\n * @param {Object} [options] - Additional parameters\n * @param {int} [options.retention_length] - For finite policies, the number of days to retain the content\n * @param {Function} [callback] - Passed the new policy information if it was acquired successfully, error otherwise\n * @returns {Promise<Object>} A promise resolving to the new policy object\n */ RetentionPolicies.prototype.create = function(name, type, action, options, callback) {\n    var apiPath = urlPath(BASE_PATH), params = {\n        body: {\n            policy_name: name,\n            policy_type: type,\n            disposition_action: action\n        }\n    };\n    Object.assign(params.body, options);\n    return this.client.wrapWithDefaultHandler(this.client.post)(apiPath, params, callback);\n};\n/**\n * Fetches details about a specific retention policy\n *\n * API Endpoint: '/retention_policies/:policyID'\n * Method: GET\n *\n * @param {string} policyID - The Box ID of the retention policy being requested\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {Function} [callback] - Passed the policy information if it was acquired successfully, error otherwise\n * @returns {Promise<Object>} A promise resolving to the policy object\n */ RetentionPolicies.prototype.get = function(policyID, options, callback) {\n    var apiPath = urlPath(BASE_PATH, policyID), params = {\n        qs: options\n    };\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Update or modify a retention policy.\n *\n * API Endpoint: '/retention_policies/:policyID'\n * Method: PUT\n *\n * @param {string} policyID - The Box ID of the retention policy to update\n * @param {Object} updates - The information to be updated\n * @param {string} [updates.policy_name] - The name of the retention policy\n * @param {RetentionPolicyDispositionAction} [updates.disposition_action] - The disposition action for the updated policy\n * @param {string} [updates.status] - Used to retire a retention policy if status is set to retired\n * @param {Function} [callback] - Passed the updated policy information if it was acquired successfully, error otherwise\n * @returns {Promise<Object>} A promise resolving to the updated policy object\n */ RetentionPolicies.prototype.update = function(policyID, updates, callback) {\n    var apiPath = urlPath(BASE_PATH, policyID), params = {\n        body: updates\n    };\n    return this.client.wrapWithDefaultHandler(this.client.put)(apiPath, params, callback);\n};\n/**\n * Fetches a list of retention policies for the enterprise\n *\n * API Endpoint: '/retention_policies\n * Method: GET\n *\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {string} [options.policy_name] - A full or partial name to filter the retention policies by\n * @param {RetentionPolicyType} [options.policy_type] - A policy type to filter the retention policies by\n * @param {string} [options.created_by_user_id] - A user id to filter the retention policies by\n * @param {Function} [callback] - Passed the policy objects if they were acquired successfully, error otherwise\n * @returns {Promise<Object>} A promise resolving to the collection of policies\n */ RetentionPolicies.prototype.getAll = function(options, callback) {\n    var apiPath = urlPath(BASE_PATH), params = {\n        qs: options\n    };\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Fetch a list of assignments for a given retention policy\n *\n * API Endpoint: '/retention_policies/:policyID/assignments'\n * Method: GET\n *\n * @param {string} policyID - The Box ID of the retention policy to get assignments for\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {RetentionPolicyAssignmentType} [options.type] - The type of the retention policy assignment to retrieve\n * @param {Function} [callback] - Passed the assignment objects if they were acquired successfully, error otherwise\n * @returns {Promise<Object>} A promise resolving to the collection of policy assignments\n */ RetentionPolicies.prototype.getAssignments = function(policyID, options, callback) {\n    var apiPath = urlPath(BASE_PATH, policyID, ASSIGNMENTS_SUBRESOURCE), params = {\n        qs: options\n    };\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Assign a retention policy to a folder or the entire enterprise.\n *\n * API Endpoint: '/retention_policy_assignments\n * Method: POST\n *\n * @param {string} policyID - The ID of the policy to assign\n * @param {RetentionPolicyAssignmentType} assignType - The type of object the policy will be assigned to\n * @param {string} assignID - The Box ID of the object to assign the retention policy to\n * @param {Object} [options] - Optional parameters for the request\n * @param {MetadataFilterField[]} [options.filter_fields] - Metadata fields to filter against, if assigning to a metadata template\n * @param {Function} [callback] - Passed the new assignment object if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the created assignment object\n */ RetentionPolicies.prototype.assign = function(policyID, assignType, assignID, options, callback) {\n    // Shuffle optional arguments\n    if (typeof options === \"function\") {\n        callback = options;\n        options = null;\n    }\n    var apiPath = urlPath(ASSIGNMENTS_PATH), params = {\n        body: {\n            policy_id: policyID,\n            assign_to: {\n                type: assignType,\n                id: assignID\n            }\n        }\n    };\n    Object.assign(params.body, options);\n    return this.client.wrapWithDefaultHandler(this.client.post)(apiPath, params, callback);\n};\n/**\n * Fetch a specific policy assignment\n *\n * API Endpoint: '/retention_policy_assignments/:assignmentID'\n * Method: GET\n *\n * @param {string} assignmentID - The Box ID of the policy assignment object to fetch\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {Function} [callback] - Passed the assignment object if it was acquired successfully, error otherwise\n * @returns {Promise<Object>} A promise resolving to the assignment object\n */ RetentionPolicies.prototype.getAssignment = function(assignmentID, options, callback) {\n    var apiPath = urlPath(ASSIGNMENTS_PATH, assignmentID), params = {\n        qs: options\n    };\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Get the specific retention record for a retained file version. To use this feature,\n * you must have the manage retention policies scope enabled for your API key\n * via your application management console.\n *\n * API Endpoint: '/file_version_retentions/:retentionID'\n * Method: GET\n *\n * @param {string} retentionID - The ID for the file retention record to retrieve\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {Function} [callback] - Pass the file version retention record if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the retention record\n */ RetentionPolicies.prototype.getFileVersionRetention = function(retentionID, options, callback) {\n    var apiPath = urlPath(FILE_VERSION_RETENTIONS_PATH, retentionID), params = {\n        qs: options\n    };\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Get a list of retention records for a retained file versions in an enterprise.\n * To use this feature, you must have the manage retention policies scope enabled\n * for your API key via your application management console.\n *\n * API Endpoint: '/file_version_retentions'\n * Method: GET\n *\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {string} [options.file_id] - A file id to filter the file version retentions by\n * @param {string} [options.file_version_id] - A file version id to filter the file version retentions by\n * @param {string} [options.policy_id] - A policy id to filter the file version retentions by\n * @param {RetentionPolicyDispositionAction} [options.disposition_action] - The disposition action of the retention policy to filter by\n * @param {string} [options.disposition_before] - Filter by retention policies which will complete before a certain time\n * @param {string} [options.disposition_after] - Filter by retention policies which will complete after a certain time\n * @param {int} [options.limit] - The maximum number of items to return in a page\n * @param {string} [options.marker] - Paging marker, left blank to begin paging from the beginning\n * @param {Function} [callback] - Pass the file version retention record if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the collection of retention records\n */ RetentionPolicies.prototype.getAllFileVersionRetentions = function(options, callback) {\n    var apiPath = urlPath(FILE_VERSION_RETENTIONS_PATH), params = {\n        qs: options\n    };\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\nmodule.exports = RetentionPolicies;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/box-node-sdk/lib/managers/retention-policies.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/box-node-sdk/lib/managers/search.js":
/*!**********************************************************!*\
  !*** ./node_modules/box-node-sdk/lib/managers/search.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * @fileoverview Manager for the Box Search Resource\n */ \n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\nvar urlPath = __webpack_require__(/*! ../util/url-path */ \"(rsc)/./node_modules/box-node-sdk/lib/util/url-path.js\"), Promise = __webpack_require__(/*! bluebird */ \"(rsc)/./node_modules/bluebird/js/release/bluebird.js\");\n// -----------------------------------------------------------------------------\n// Typedefs\n// -----------------------------------------------------------------------------\n/**\n * Search metadata filter\n * @typedef {Object} SearchMetadataFilter\n * @property {string} templateKey The template to filter against\n * @property {string} scope The scope of the template, e.g. 'global' or 'enterprise'\n * @property {Object} filters Key/value filters against individual metadata template properties\n */ /** @typedef {string} SearchScope */ /** @typedef {string} SearchTrashContent */ // -----------------------------------------------------------------------------\n// Private\n// -----------------------------------------------------------------------------\nvar API_PATHS_SEARCH = \"/search\";\n// -----------------------------------------------------------------------------\n// Public\n// -----------------------------------------------------------------------------\n/**\n * Simple manager for interacting with the search endpoints and actions.\n *\n * @constructor\n * @param {BoxClient} client - The Box API Client that is responsible for making calls to the API\n * @returns {void}\n */ function Search(client) {\n    this.client = client;\n}\nSearch.prototype = {\n    /**\n\t * Valid search scopes\n\t * @readonly\n\t * @enum {SearchScope}\n\t */ scopes: Object.freeze({\n        USER: \"user_content\",\n        ENTERPRISE: \"enterprise_content\"\n    }),\n    /**\n\t * Searches Box for the given query.\n\t *\n\t * @param {string} searchString - The query string to use for search\n\t * @param {Object} [options] - Additional search filters. Can be left null in most cases.\n\t * @param {SearchScope} [options.scope] - The scope on which you want search. Can be user_content for a search limited to the current user or enterprise_content to search an entire enterprise\n\t * @param {string} [options.file_extensions] - Single or comma-delimited list of file extensions to filter against\n\t * @param {string} [options.created_at_range] - Date range for filtering on item creation time, e.g. '2014-05-15T13:35:01-07:00,2014-05-17T13:35:01-07:00'\n\t * @param {string} [options.updated_at_range] - Date range for filtering on item update time, e.g. '2014-05-15T13:35:01-07:00,2014-05-17T13:35:01-07:00'\n\t * @param {string} [options.size_range] - Range of item sizes (in bytes) to filter on, as lower_bound,upper_bound.  Either bound can be ommitted, e.g. ',100000' for <= 100KB\n\t * @param {string} [options.owner_user_ids] - Comma-delimited list of user IDs to filter item owner against\n\t * @param {string} [options.ancestor_folder_ids] - Comma-delimited list of folder IDs, search results will contain only items in these folders (and folders within them)\n\t * @param {string} [options.content_types] - Query within specified comma-delimited fields. The types can be name, description, file_content, comments, or tags\n\t * @param {string} [options.type] - The type of objects you want to include in the search results. The type can be file, folder, or web_link\n\t * @param {string} [options.trash_content=non_trashed_only] - Controls whether to search in the trash. The value can be trashed_only or non_trashed_only\n\t * @param {SearchMetadataFilter[]} [options.mdfilters] - Searches for objects with a specific metadata object association.  Searches with the this parameter do not require a query string\n\t * @param {boolean} [options.include_recent_shared_links] - Determines whether to include items accessible only via shared link in the response.\n\t * @param {string} [options.fields] - Comma-delimited list of fields to be included in the response\n\t * @param {int} [options.limit=30] - The number of search results to return, max 200\n\t * @param {int} [options.offset=0] - The search result at which to start the response, must be a multiple of limit\n\t * @param {string} [options.sort] - The field on which the results should be sorted, e.g. \"modified_at\"\n\t * @param {string} [options.direction] - The sort direction: \"ASC\" for ascending and \"DESC\" for descending\n\t * @param {APIRequest~Callback} [callback] - passed the new comment data if it was posted successfully\n\t * @returns {Promise<Object>} A promise resolving to the collection of search results\n\t */ query (searchString, options, callback) {\n        var apiPath = urlPath(API_PATHS_SEARCH), qs = options || {};\n        qs.query = searchString;\n        if (qs.mdfilters) {\n            if (Array.isArray(qs.mdfilters)) {\n                qs.mdfilters = JSON.stringify(qs.mdfilters);\n            } else {\n                return Promise.reject(new Error(\"Invalid mdfilters parameter: must be a valid array\")).asCallback(callback);\n            }\n        }\n        var params = {\n            qs\n        };\n        return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n    }\n};\nmodule.exports = Search;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/box-node-sdk/lib/managers/search.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/box-node-sdk/lib/managers/shared-items.js":
/*!****************************************************************!*\
  !*** ./node_modules/box-node-sdk/lib/managers/shared-items.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * @fileoverview Manager for the Shared Items\n */ \n// ------------------------------------------------------------------------------\n// Requirements\n// ------------------------------------------------------------------------------\nvar errors = __webpack_require__(/*! ../util/errors */ \"(rsc)/./node_modules/box-node-sdk/lib/util/errors.js\"), httpStatusCodes = __webpack_require__(/*! http-status */ \"(rsc)/./node_modules/http-status/lib/index.js\");\n// ------------------------------------------------------------------------------\n// Private\n// ------------------------------------------------------------------------------\nvar BASE_PATH = \"/shared_items\";\n// ------------------------------------------------------------------------------\n// Public\n// ------------------------------------------------------------------------------\n/**\n * Simple manager for interacting with all 'Shared Item' endpoints and actions.\n *\n * @constructor\n * @param {BoxClient} client - The Box API Client that is responsible for making calls to the API\n * @returns {void}\n */ function SharedItems(client) {\n    this.client = client;\n}\n/**\n * Requests a Box item associated with a shared link.\n *\n * API Endpoint: '/shared_items'\n * Method: GET\n *\n * @param {string} url - Shared Link URL\n * @param {string} [password] - Shared Link Password (null if no password)\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {Function} [callback] - passed the shared item if it was successfully acquired\n * @returns {Promise<Object>} A promise resolving to the shared item object\n */ SharedItems.prototype.get = function(url, password, options, callback) {\n    var params = {\n        qs: options,\n        headers: {\n            BoxApi: this.client.buildSharedItemAuthHeader(url, password)\n        }\n    };\n    // Handle the Special API Response\n    return this.client.get(BASE_PATH, params).then((response)=>{\n        switch(response.statusCode){\n            // 200 - Shared Item Recieved\n            case httpStatusCodes.OK:\n                return response.body;\n            // 403 - Incorrect or missing password\n            // Propagate an error explaining that the password is either missing or incorrect\n            case httpStatusCodes.FORBIDDEN:\n                var errMessage = password ? \"Incorrect shared link password\" : \"Shared link password missing\";\n                throw errors.buildResponseError(response, errMessage);\n            // Unexpected Response\n            default:\n                throw errors.buildUnexpectedResponseError(response);\n        }\n    }).asCallback(callback);\n};\n/**\n * @module box-node-sdk/lib/managers/shared-items\n * @see {@Link SharedItems}\n */ module.exports = SharedItems;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYm94LW5vZGUtc2RrL2xpYi9tYW5hZ2Vycy9zaGFyZWQtaXRlbXMuanMiLCJtYXBwaW5ncyI6IkFBQUE7O0NBRUMsR0FFRDtBQUVBLGlGQUFpRjtBQUNqRixlQUFlO0FBQ2YsaUZBQWlGO0FBQ2pGLElBQUlBLFNBQVNDLG1CQUFPQSxDQUFDLCtFQUNwQkMsa0JBQWtCRCxtQkFBT0EsQ0FBQztBQUczQixpRkFBaUY7QUFDakYsVUFBVTtBQUNWLGlGQUFpRjtBQUNqRixJQUFJRSxZQUFZO0FBR2hCLGlGQUFpRjtBQUNqRixTQUFTO0FBQ1QsaUZBQWlGO0FBRWpGOzs7Ozs7Q0FNQyxHQUNELFNBQVNDLFlBQVlDLE1BQU07SUFDMUIsSUFBSSxDQUFDQSxNQUFNLEdBQUdBO0FBQ2Y7QUFFQTs7Ozs7Ozs7Ozs7Q0FXQyxHQUNERCxZQUFZRSxTQUFTLENBQUNDLEdBQUcsR0FBRyxTQUFTQyxHQUFHLEVBQUVDLFFBQVEsRUFBRUMsT0FBTyxFQUFFQyxRQUFRO0lBQ3BFLElBQUlDLFNBQVM7UUFDWkMsSUFBSUg7UUFDSkksU0FBUztZQUNSQyxRQUFRLElBQUksQ0FBQ1YsTUFBTSxDQUFDVyx5QkFBeUIsQ0FBQ1IsS0FBS0M7UUFDcEQ7SUFDRDtJQUVBLGtDQUFrQztJQUNsQyxPQUFPLElBQUksQ0FBQ0osTUFBTSxDQUFDRSxHQUFHLENBQUNKLFdBQVdTLFFBQ2hDSyxJQUFJLENBQUNDLENBQUFBO1FBRUwsT0FBUUEsU0FBU0MsVUFBVTtZQUUzQiw2QkFBNkI7WUFDN0IsS0FBS2pCLGdCQUFnQmtCLEVBQUU7Z0JBQ3RCLE9BQU9GLFNBQVNHLElBQUk7WUFFckIsc0NBQXNDO1lBQ3RDLGlGQUFpRjtZQUNqRixLQUFLbkIsZ0JBQWdCb0IsU0FBUztnQkFDN0IsSUFBSUMsYUFBYSxXQUFhLG1DQUFtQztnQkFDakUsTUFBTXZCLE9BQU93QixrQkFBa0IsQ0FBQ04sVUFBVUs7WUFFMUMsc0JBQXNCO1lBQ3ZCO2dCQUNDLE1BQU12QixPQUFPeUIsNEJBQTRCLENBQUNQO1FBQzNDO0lBQ0QsR0FDQ1EsVUFBVSxDQUFDZjtBQUNkO0FBRUE7OztDQUdDLEdBQ0RnQixPQUFPQyxPQUFPLEdBQUd4QiIsInNvdXJjZXMiOlsid2VicGFjazovL2NpdmlsLWVuZ2luZWVyaW5nLXBsYXRmb3JtLy4vbm9kZV9tb2R1bGVzL2JveC1ub2RlLXNkay9saWIvbWFuYWdlcnMvc2hhcmVkLWl0ZW1zLmpzPzMzMzEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IE1hbmFnZXIgZm9yIHRoZSBTaGFyZWQgSXRlbXNcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUmVxdWlyZW1lbnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbnZhciBlcnJvcnMgPSByZXF1aXJlKCcuLi91dGlsL2Vycm9ycycpLFxuXHRodHRwU3RhdHVzQ29kZXMgPSByZXF1aXJlKCdodHRwLXN0YXR1cycpO1xuXG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUHJpdmF0ZVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG52YXIgQkFTRV9QQVRIID0gJy9zaGFyZWRfaXRlbXMnO1xuXG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUHVibGljXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLyoqXG4gKiBTaW1wbGUgbWFuYWdlciBmb3IgaW50ZXJhY3Rpbmcgd2l0aCBhbGwgJ1NoYXJlZCBJdGVtJyBlbmRwb2ludHMgYW5kIGFjdGlvbnMuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0JveENsaWVudH0gY2xpZW50IC0gVGhlIEJveCBBUEkgQ2xpZW50IHRoYXQgaXMgcmVzcG9uc2libGUgZm9yIG1ha2luZyBjYWxscyB0byB0aGUgQVBJXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gU2hhcmVkSXRlbXMoY2xpZW50KSB7XG5cdHRoaXMuY2xpZW50ID0gY2xpZW50O1xufVxuXG4vKipcbiAqIFJlcXVlc3RzIGEgQm94IGl0ZW0gYXNzb2NpYXRlZCB3aXRoIGEgc2hhcmVkIGxpbmsuXG4gKlxuICogQVBJIEVuZHBvaW50OiAnL3NoYXJlZF9pdGVtcydcbiAqIE1ldGhvZDogR0VUXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIFNoYXJlZCBMaW5rIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IFtwYXNzd29yZF0gLSBTaGFyZWQgTGluayBQYXNzd29yZCAobnVsbCBpZiBubyBwYXNzd29yZClcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBBZGRpdGlvbmFsIG9wdGlvbnMgZm9yIHRoZSByZXF1ZXN0LiBDYW4gYmUgbGVmdCBudWxsIGluIG1vc3QgY2FzZXMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gcGFzc2VkIHRoZSBzaGFyZWQgaXRlbSBpZiBpdCB3YXMgc3VjY2Vzc2Z1bGx5IGFjcXVpcmVkXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fSBBIHByb21pc2UgcmVzb2x2aW5nIHRvIHRoZSBzaGFyZWQgaXRlbSBvYmplY3RcbiAqL1xuU2hhcmVkSXRlbXMucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKHVybCwgcGFzc3dvcmQsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG5cdHZhciBwYXJhbXMgPSB7XG5cdFx0cXM6IG9wdGlvbnMsXG5cdFx0aGVhZGVyczoge1xuXHRcdFx0Qm94QXBpOiB0aGlzLmNsaWVudC5idWlsZFNoYXJlZEl0ZW1BdXRoSGVhZGVyKHVybCwgcGFzc3dvcmQpXG5cdFx0fVxuXHR9O1xuXG5cdC8vIEhhbmRsZSB0aGUgU3BlY2lhbCBBUEkgUmVzcG9uc2Vcblx0cmV0dXJuIHRoaXMuY2xpZW50LmdldChCQVNFX1BBVEgsIHBhcmFtcylcblx0XHQudGhlbihyZXNwb25zZSA9PiB7XG5cblx0XHRcdHN3aXRjaCAocmVzcG9uc2Uuc3RhdHVzQ29kZSkge1xuXG5cdFx0XHQvLyAyMDAgLSBTaGFyZWQgSXRlbSBSZWNpZXZlZFxuXHRcdFx0Y2FzZSBodHRwU3RhdHVzQ29kZXMuT0s6XG5cdFx0XHRcdHJldHVybiByZXNwb25zZS5ib2R5O1xuXG5cdFx0XHQvLyA0MDMgLSBJbmNvcnJlY3Qgb3IgbWlzc2luZyBwYXNzd29yZFxuXHRcdFx0Ly8gUHJvcGFnYXRlIGFuIGVycm9yIGV4cGxhaW5pbmcgdGhhdCB0aGUgcGFzc3dvcmQgaXMgZWl0aGVyIG1pc3Npbmcgb3IgaW5jb3JyZWN0XG5cdFx0XHRjYXNlIGh0dHBTdGF0dXNDb2Rlcy5GT1JCSURERU46XG5cdFx0XHRcdHZhciBlcnJNZXNzYWdlID0gKHBhc3N3b3JkKSA/ICdJbmNvcnJlY3Qgc2hhcmVkIGxpbmsgcGFzc3dvcmQnIDogJ1NoYXJlZCBsaW5rIHBhc3N3b3JkIG1pc3NpbmcnO1xuXHRcdFx0XHR0aHJvdyBlcnJvcnMuYnVpbGRSZXNwb25zZUVycm9yKHJlc3BvbnNlLCBlcnJNZXNzYWdlKTtcblxuXHRcdFx0XHQvLyBVbmV4cGVjdGVkIFJlc3BvbnNlXG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHR0aHJvdyBlcnJvcnMuYnVpbGRVbmV4cGVjdGVkUmVzcG9uc2VFcnJvcihyZXNwb25zZSk7XG5cdFx0XHR9XG5cdFx0fSlcblx0XHQuYXNDYWxsYmFjayhjYWxsYmFjayk7XG59O1xuXG4vKipcbiAqIEBtb2R1bGUgYm94LW5vZGUtc2RrL2xpYi9tYW5hZ2Vycy9zaGFyZWQtaXRlbXNcbiAqIEBzZWUge0BMaW5rIFNoYXJlZEl0ZW1zfVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IFNoYXJlZEl0ZW1zO1xuIl0sIm5hbWVzIjpbImVycm9ycyIsInJlcXVpcmUiLCJodHRwU3RhdHVzQ29kZXMiLCJCQVNFX1BBVEgiLCJTaGFyZWRJdGVtcyIsImNsaWVudCIsInByb3RvdHlwZSIsImdldCIsInVybCIsInBhc3N3b3JkIiwib3B0aW9ucyIsImNhbGxiYWNrIiwicGFyYW1zIiwicXMiLCJoZWFkZXJzIiwiQm94QXBpIiwiYnVpbGRTaGFyZWRJdGVtQXV0aEhlYWRlciIsInRoZW4iLCJyZXNwb25zZSIsInN0YXR1c0NvZGUiLCJPSyIsImJvZHkiLCJGT1JCSURERU4iLCJlcnJNZXNzYWdlIiwiYnVpbGRSZXNwb25zZUVycm9yIiwiYnVpbGRVbmV4cGVjdGVkUmVzcG9uc2VFcnJvciIsImFzQ2FsbGJhY2siLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/box-node-sdk/lib/managers/shared-items.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/box-node-sdk/lib/managers/storage-policies.js":
/*!********************************************************************!*\
  !*** ./node_modules/box-node-sdk/lib/managers/storage-policies.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * @fileoverview Manager for the Storage Policies resource\n */ \n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\nvar urlPath = __webpack_require__(/*! ../util/url-path */ \"(rsc)/./node_modules/box-node-sdk/lib/util/url-path.js\"), httpStatus = __webpack_require__(/*! http-status */ \"(rsc)/./node_modules/http-status/lib/index.js\"), errors = __webpack_require__(/*! ../util/errors */ \"(rsc)/./node_modules/box-node-sdk/lib/util/errors.js\");\n// -----------------------------------------------------------------------------\n// Private\n// -----------------------------------------------------------------------------\nvar BASE_PATH = \"/storage_policies\", ASSIGNMENTS_PATH = \"/storage_policy_assignments\";\n// -----------------------------------------------------------------------------\n// Public\n// -----------------------------------------------------------------------------\n/**\n * Simple manager for interacting with all Retention Policies endpoints and actions.\n *\n * @constructor\n * @param {BoxClient} client - The Box API Client that is responsible for making calls to the API\n * @returns {void}\n */ function StoragePolicies(client) {\n    this.client = client;\n}\nStoragePolicies.prototype = {\n    /**\n     * Get information about a specific storage policy\n     * @param {string} storagePolicyID The ID of the storage policy\n     * @param {Object} [options] Optional parameters\n     * @param {string} [options.fields] Comma-separated list of fields of the storage policy to retrieve\n     * @param {Function} [callback] Passed the storage policy object if successful\n     * @returns {Promise<Object>} Promise resolving to the storage policy object\n     */ get (storagePolicyID, options, callback) {\n        var apiPath = urlPath(BASE_PATH, storagePolicyID), params = {\n            qs: options\n        };\n        return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n    },\n    /**\n     * Get all available storage policies for the enterprise\n     * @param {Object} [options] Optional parameters\n     * @param {string} [options.fields] Comma-separated list of fields of the storage policy to retrieve\n     * @param {Function} [callback] Passed a collection of storage policies if successful\n     * @returns {Promise<Object>} Promise resolving to the collection of storage policies\n     */ getAll (options, callback) {\n        var apiPath = urlPath(BASE_PATH), params = {\n            qs: options\n        };\n        return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n    },\n    /**\n     * Assign a storage policy to a user\n     * @param {string} storagePolicyID The ID of the storage policy to assign\n     * @param {string} userID The ID of the user to assign the storage policy to\n     * @param {Function} [callback] Passed the assignment object if successful\n     * @returns {Promise<Object>} Promise resolving to the assignment object\n     */ assign (storagePolicyID, userID, callback) {\n        return this.getAssignmentForTarget(userID).then((assignment)=>{\n            // Check if the assignment is already correct\n            if (assignment.storage_policy.id === storagePolicyID) {\n                return assignment;\n            }\n            // If the assignment is to an enterprise, we need to create a new\n            // assignment for the user\n            if (assignment.assigned_to.type === \"enterprise\") {\n                return this.createAssignment(storagePolicyID, userID);\n            }\n            // Update the user's existing assignment\n            var update = {\n                storage_policy: {\n                    type: \"storage_policy\",\n                    id: storagePolicyID\n                }\n            };\n            return this.updateAssignment(assignment.id, update);\n        }).asCallback(callback);\n    },\n    /**\n     * Get information about a specific storage policy asisgnment by ID\n     * @param {string} assignmentID The ID of the assignment\n     * @param {Function} [callback] Passed the assignment object if successful\n     * @returns {Promise<Object>} Promise resolving to the assignment object\n     */ getAssignment (assignmentID, callback) {\n        var apiPath = urlPath(ASSIGNMENTS_PATH, assignmentID);\n        return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, null, callback);\n    },\n    /**\n     * Gets the storage policy assignment for a specific user\n     * @param {string} targetID The ID of the target\n     * @param {Object} [options] Optional parameters\n     * @param {string} [options.targetType=user] The type of the assignment target to resolve for\n     * @param {Function} [callback] Passed the assignment object if successful\n     * @returns {Promise<Object>} Promise resolving to the assignment object\n     */ getAssignmentForTarget (targetID, options, callback) {\n        options = Object.assign({\n            targetType: \"user\"\n        }, options);\n        var apiPath = urlPath(ASSIGNMENTS_PATH), params = {\n            qs: {\n                resolved_for_type: options.targetType,\n                resolved_for_id: targetID\n            }\n        };\n        return this.client.get(apiPath, params).then((response)=>{\n            if (response.statusCode !== httpStatus.OK) {\n                // Unexpected status code, throw an error\n                throw errors.buildUnexpectedResponseError(response);\n            }\n            // Unwrap the collection and give back just the assignment object\n            return response.body.entries[0];\n        }).asCallback(callback);\n    },\n    /**\n     * Create a new storage policy assignment to a user\n     * @param {string} storagePolicyID The ID of the storage policy to assign\n     * @param {string} userID The ID of the user to assign the storage policy to\n     * @param {Function} [callback] Passed the assignment object if successful\n     * @returns {Promise<Object>} Promise resolving to the assignment object\n     */ createAssignment (storagePolicyID, userID, callback) {\n        var apiPath = urlPath(ASSIGNMENTS_PATH), params = {\n            body: {\n                storage_policy: {\n                    type: \"storage_policy\",\n                    id: storagePolicyID\n                },\n                assigned_to: {\n                    type: \"user\",\n                    id: userID\n                }\n            }\n        };\n        return this.client.wrapWithDefaultHandler(this.client.post)(apiPath, params, callback);\n    },\n    /**\n     * Update a storage policy assignment\n     * @param {string} assignmentID The ID of the storage policy assignment to update\n     * @param {Object} updates The updates fields to apply\n     * @param {Function} [callback] Passed the updated assignment object if successful\n     * @returns {Promise<Object>} Promise resolving to the updated assignment object\n     */ updateAssignment (assignmentID, updates, callback) {\n        var apiPath = urlPath(ASSIGNMENTS_PATH, assignmentID), params = {\n            body: updates\n        };\n        return this.client.wrapWithDefaultHandler(this.client.put)(apiPath, params, callback);\n    },\n    /**\n     * Remove a storage policy assignment, returning the user to the default policy\n     * @param {string} assignmentID The ID of the assignment to remove\n     * @param {Function} [callback] Passed nothing if successful\n     * @returns {Promise<void>} Promise resolving if the removal succeeds\n     */ removeAssignment (assignmentID, callback) {\n        var apiPath = urlPath(ASSIGNMENTS_PATH, assignmentID);\n        return this.client.wrapWithDefaultHandler(this.client.del)(apiPath, null, callback);\n    }\n};\nmodule.exports = StoragePolicies;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/box-node-sdk/lib/managers/storage-policies.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/box-node-sdk/lib/managers/tasks.js":
/*!*********************************************************!*\
  !*** ./node_modules/box-node-sdk/lib/managers/tasks.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * @fileoverview Manager for the Tasks Resource\n */ \n// -----------------------------------------------------------------------------\n// Typedefs\n// -----------------------------------------------------------------------------\n/** @typedef {string} TaskResolutionState */ // -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\nvar urlPath = __webpack_require__(/*! ../util/url-path */ \"(rsc)/./node_modules/box-node-sdk/lib/util/url-path.js\");\n// -----------------------------------------------------------------------------\n// Private\n// -----------------------------------------------------------------------------\nvar BASE_PATH = \"/tasks\", ASSIGNMENTS_SUBRESOURCE = \"assignments\", ASSIGNMENTS_PATH = \"/task_assignments\", REVIEW_ACTION = \"review\";\n// -----------------------------------------------------------------------------\n// Public\n// -----------------------------------------------------------------------------\n/**\n * Simple manager for interacting with all 'Tasks' endpoints and actions.\n *\n * @constructor\n * @param {BoxClient} client - The Box API Client that is responsible for making calls to the API\n * @returns {void}\n */ function Tasks(client) {\n    this.client = client;\n}\n/**\n * Enum of valid task resolution states\n * @readonly\n * @enum {TaskResolutionState}\n */ Tasks.prototype.resolutionStates = Object.freeze({\n    COMPLETE: \"completed\",\n    INCOMPLETE: \"incomplete\",\n    APPROVED: \"approved\",\n    REJECTED: \"rejected\"\n});\n/**\n * Used to create a single task for single user on a single file.\n *\n * API Endpoint: '/tasks'\n * Method: POST\n *\n * @param {string} fileID - The ID of the item this task is for\n * @param {Object} [options] - Additional parameters\n * @param {string} [options.message] - An optional message to include with the task\n * @param {string} [options.due_at] - The day at which this task is due\n * @param {Function} [callback] - Passed the new task information if it was acquired successfully, error otherwise\n * @returns {Promise<Object>} A promise resolving to the created task object\n */ Tasks.prototype.create = function(fileID, options, callback) {\n    var apiPath = urlPath(BASE_PATH), params = {\n        body: {\n            item: {\n                type: \"file\",\n                id: fileID\n            },\n            action: REVIEW_ACTION\n        }\n    };\n    Object.assign(params.body, options);\n    return this.client.wrapWithDefaultHandler(this.client.post)(apiPath, params, callback);\n};\n/**\n * Fetches a specific task.\n *\n * API Endpoint: '/tasks/:taskID'\n * Method: GET\n *\n * @param {string} taskID - The Box ID of the task being requested\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {Function} [callback] - Passed the task information if it was acquired successfully, error otherwise\n * @returns {Promise<Object>} A promise resolving to the task object\n */ Tasks.prototype.get = function(taskID, options, callback) {\n    var apiPath = urlPath(BASE_PATH, taskID), params = {\n        qs: options\n    };\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Updates a specific task.\n *\n * API Endpoint: '/tasks/:taskID'\n * Method: PUT\n *\n * @param {string} taskID - The Box ID of the task being updated\n * @param {Object} updates - Fields of the task object to update\n * @param {string} [updates.message] - An optional message to include with the task\n * @param {string} [updates.due_at] - The day at which this task is due\n * @param {Function} [callback] - Passed the updated task information if it was acquired successfully, error otherwise\n * @returns {Promise<Object>} A promise resolving to the updated task object\n */ Tasks.prototype.update = function(taskID, updates, callback) {\n    var apiPath = urlPath(BASE_PATH, taskID), params = {\n        body: updates\n    };\n    return this.client.wrapWithDefaultHandler(this.client.put)(apiPath, params, callback);\n};\n/**\n * Permanently deletes a specific task.\n *\n * API Endpoint: '/tasks/:taskID'\n * Method: DELETE\n *\n * @param {string} taskID - The Box ID of the task being deleted\n * @param {Function} [callback] - Empty body passed if successful, error otherwise\n * @returns {Promise<void>} A promise resolving to nothing\n */ Tasks.prototype.delete = function(taskID, callback) {\n    var apiPath = urlPath(BASE_PATH, taskID);\n    return this.client.wrapWithDefaultHandler(this.client.del)(apiPath, null, callback);\n};\n/**\n * Get a list of assignments for a given task\n *\n * API Endpoint: '/tasks/:taskID/assignments'\n * Method: GET\n *\n * @param {string} taskID - The Box ID of the task to get assignments for\n * @param {Object} [options] - Additional parameters, can be left null in most cases\n * @param {Function} [callback] - Passed the list of assignments if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the collection of assignment objects\n */ Tasks.prototype.getAssignments = function(taskID, options, callback) {\n    var apiPath = urlPath(BASE_PATH, taskID, ASSIGNMENTS_SUBRESOURCE), params = {\n        qs: options\n    };\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Get a specific task assignment\n *\n * API Endpoint: '/task_assignments/:assignmentID'\n * Method: GET\n *\n * @param {string} assignmentID - The Box ID of the task assignment to retrieve\n * @param {Object} [options] - Additional parameters, can be left null in most cases\n * @param {Function} [callback] - Passed the task assignment if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the assignment object\n */ Tasks.prototype.getAssignment = function(assignmentID, options, callback) {\n    var apiPath = urlPath(ASSIGNMENTS_PATH, assignmentID), params = {\n        qs: options\n    };\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Assign a task to a specific user by ID\n *\n * API Endpoint: '/task_assignments'\n * Method: POST\n *\n * @param {string} taskID - The Box ID of the task to assign\n * @param {string} userID - The ID of the user to assign the task to\n * @param {Function} [callback] - Passed the task assignment if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the new assignment object\n */ Tasks.prototype.assignByUserID = function(taskID, userID, callback) {\n    var apiPath = urlPath(ASSIGNMENTS_PATH), params = {\n        body: {\n            task: {\n                type: \"task\",\n                id: taskID\n            },\n            assign_to: {\n                id: userID\n            }\n        }\n    };\n    return this.client.wrapWithDefaultHandler(this.client.post)(apiPath, params, callback);\n};\n/**\n * Assign a task to a specific user by email address\n *\n * API Endpoint: '/task_assignments'\n * Method: POST\n *\n * @param {string} taskID - The Box ID of the task to assign\n * @param {string} email - The email address of the user to assign the task to\n * @param {Function} [callback] - Passed the task assignment if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the new assignment object\n */ Tasks.prototype.assignByEmail = function(taskID, email, callback) {\n    var apiPath = urlPath(ASSIGNMENTS_PATH), params = {\n        body: {\n            task: {\n                type: \"task\",\n                id: taskID\n            },\n            assign_to: {\n                login: email\n            }\n        }\n    };\n    return this.client.wrapWithDefaultHandler(this.client.post)(apiPath, params, callback);\n};\n/**\n * Update a task assignment.  This is used to resolve or complete a task.\n *\n * API Endpoint: '/task_assignments/:assignmentID'\n * Method: PUT\n *\n * @param {string} assignmentID - The Box ID of the task assignment to update\n * @param {Object} options - The fields of the assignment to update\n * @param {string} [options.message] - A message from the assignee about this task\n * @param {TaskResolutionState} [options.resolution_state] - Resolution of the task\n * @param {Function} [callback] - Passed the updated task assignment if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the updated assignment object\n */ Tasks.prototype.updateAssignment = function(assignmentID, options, callback) {\n    var apiPath = urlPath(ASSIGNMENTS_PATH, assignmentID), params = {\n        body: options\n    };\n    return this.client.wrapWithDefaultHandler(this.client.put)(apiPath, params, callback);\n};\n/**\n * Delete a task assignment.  This unassigns a user from the related task.\n *\n * API Endpoint: '/task_assignments/:assignmentID'\n * Method: DELETE\n *\n * @param {string} assignmentID - The Box ID of the task assignment to delete\n * @param {Function} [callback] - Passed nothing if successful, error otherwise\n * @returns {Promise<void>} A promise resolving to nothing\n */ Tasks.prototype.deleteAssignment = function(assignmentID, callback) {\n    var apiPath = urlPath(ASSIGNMENTS_PATH, assignmentID);\n    return this.client.wrapWithDefaultHandler(this.client.del)(apiPath, null, callback);\n};\nmodule.exports = Tasks;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/box-node-sdk/lib/managers/tasks.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/box-node-sdk/lib/managers/terms-of-service.js":
/*!********************************************************************!*\
  !*** ./node_modules/box-node-sdk/lib/managers/terms-of-service.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * @fileoverview Manager for the  Box Terms of Service Resource\n */ \n// -----------------------------------------------------------------------------\n// Typedefs\n// -----------------------------------------------------------------------------\n/**\n * Terms of service parameter constant\n * @typedef {string} TermsOfServicesStatus Determines whether the terms of service created is currently enabled or disabled\n * @typedef {string} TermsOfServicesType Determines whether the terms of service is for internal users or users outside of the enterprise\n */ // -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\nvar urlPath = __webpack_require__(/*! ../util/url-path */ \"(rsc)/./node_modules/box-node-sdk/lib/util/url-path.js\"), /* eslint-disable no-unused-vars*/ Promise = __webpack_require__(/*! bluebird */ \"(rsc)/./node_modules/bluebird/js/release/bluebird.js\"), /* eslint-enable no-unused-vars*/ errors = __webpack_require__(/*! ../util/errors */ \"(rsc)/./node_modules/box-node-sdk/lib/util/errors.js\"), httpStatusCodes = __webpack_require__(/*! http-status */ \"(rsc)/./node_modules/http-status/lib/index.js\");\n// -----------------------------------------------------------------------------\n// Private\n// -----------------------------------------------------------------------------\n// Base path for all terms of service endpoints\nvar BASE_PATH = \"/terms_of_services\", USER_STATUSES_PATH = \"/terms_of_service_user_statuses\";\n// ------------------------------------------------------------------------------\n// Public\n// ------------------------------------------------------------------------------\n/**\n * Simple manager for interacting with all 'Terms of Services' and 'Terms of Service User Statuses' endpoints and actions.\n *\n * @param {BoxClient} client The Box API Client that is responsible for making calls to the API\n * @constructor\n */ function TermsOfService(client) {\n    // Attach the client, for making API calls\n    this.client = client;\n}\n/**\n * Enum value of scope of the custom terms of services set to either managed by an enterprise or enternal to an enterprise\n *\n * @readonly\n * @enum {TermsOfServicesType}\n */ TermsOfService.prototype.type = {\n    MANAGED: \"managed\",\n    EXTERNAL: \"external\"\n};\n/**\n * Enum value of status of the custom terms of services, either currently enabled or currently disabled\n *\n * @readonly\n * @enum {TermsOfServicesStatus}\n */ TermsOfService.prototype.status = {\n    ENABLED: \"enabled\",\n    DISABLED: \"disabled\"\n};\n/**\n * Creates a custom terms of services with user specified values\n *\n * API Endpoint: '/terms_of_services'\n * Method: POST\n *\n * @param {TermsOfServicesType} termsOfServicesType - Determine if the custom terms of service is scoped internall or externally to an enterprise\n * @param {TermsOfServicesStatus} termsOfServicesStatus - Determine if the custom terms of service is enabled or disabled\n * @param {string} termsOfServicesText - Text field for message associated with custom terms of services\n * @param {Function} [callback] - Passed the terms of services information if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the terms of services object\n */ TermsOfService.prototype.create = function(termsOfServicesType, termsOfServicesStatus, termsOfServicesText, callback) {\n    var params = {\n        body: {\n            status: termsOfServicesStatus,\n            tos_type: termsOfServicesType,\n            text: termsOfServicesText\n        }\n    };\n    var apiPath = urlPath(BASE_PATH);\n    return this.client.wrapWithDefaultHandler(this.client.post)(apiPath, params, callback);\n};\n/**\n * Updates a custom terms of services with new specified values\n *\n * API Endpoint: '/terms_of_services/:termsOfServicesID'\n * Method: PUT\n *\n * @param {string} termsOfServicesID - The id of the custom terms of services to update\n * @param {Object} updates - Fields ot the Terms of Service to update\n * @param {TermsOfServicesStatus} [updates.status] - Determine if the custom terms of service is scoped internall or externally to an enterprise\n * @param {string} [updates.text] - Text field for message associated with custom terms of services\n * @param {Function} [callback] - Passed the terms of services updated information if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the terms of services object\n */ TermsOfService.prototype.update = function(termsOfServicesID, updates, callback) {\n    var params = {\n        body: updates\n    };\n    var apiPath = urlPath(BASE_PATH, termsOfServicesID);\n    return this.client.wrapWithDefaultHandler(this.client.put)(apiPath, params, callback);\n};\n/**\n * Gets a specific custom terms of services with specified ID\n *\n * API Endpoint: '/terms_of_services/:termsOfServicesID'\n * Method: GET\n *\n * @param {string} termsOfServicesID - The id of the custom terms of services to retrieve\n * @param {Object} [options] - Additional options. Can be left null in most cases.\n * @param {string} [options.fields] - Comma-separated list of fields to return on the collaboration objects\n * @param {Function} [callback] - Passed the terms of services information with specified ID if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the terms of services object\n */ TermsOfService.prototype.get = function(termsOfServicesID, options, callback) {\n    var params = {\n        qs: options\n    };\n    var apiPath = urlPath(BASE_PATH, termsOfServicesID);\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Gets custom terms of services for the user's enterprise\n *\n * API Endpoint: '/terms_of_services'\n * Method: GET\n *\n * @param {Object} [options] - Additional options. Can be left null in most cases.\n * @param {TermsOfServiceType} [options.tos_type] - Optional, indicates whether the terms of service is set for external or managed under enterprise\n * @param {string} [options.fields] - Comma-separated list of fields to return on the collaboration objects\n * @param {Function} [callback] - Passed the terms of services information if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the terms of services object\n */ TermsOfService.prototype.getAll = function(options, callback) {\n    var params = {\n        qs: options\n    };\n    var apiPath = urlPath(BASE_PATH);\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Accepts/rejects custom terms of services for the user\n *\n * API Endpoint: '/terms_of_service_user_statuses'\n * Method: POST\n *\n * @param {string} termsOfServicesID - Terms of services ID to retrieve user statuses on\n * @param {boolean} isAccepted - Determines wehether the terms of services has been accepted or rejected\n * @param {Object} [options] - Additional options. Can be left null in most cases.\n * @param {string} [options.user_id] - Optional, user id to retrieve terms of service status on, default is current user\n * @param {Function} [callback] - Passed the terms of service user status information if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the terms of service user status\n */ TermsOfService.prototype.createUserStatus = function(termsOfServicesID, isAccepted, options, callback) {\n    var params = {\n        body: {\n            tos: {\n                id: termsOfServicesID,\n                type: \"terms_of_service\"\n            },\n            is_accepted: isAccepted\n        }\n    };\n    if (options && options.user_id) {\n        params.body.user = {\n            id: options.user_id,\n            type: \"user\"\n        };\n    }\n    var apiPath = urlPath(USER_STATUSES_PATH);\n    return this.client.wrapWithDefaultHandler(this.client.post)(apiPath, params, callback);\n};\n/**\n * Gets a terms os service status given the terms of services id\n *\n * API Endpoint: '/terms_of_service_user_statuses'\n * Method: GET\n *\n * @param {string} termsOfServicesID - The ID of the terms of services to retrieve status on\n * @param {Object} [options] - Additional options. Can be left null in most cases\n * @param {string} [options.user_id] - Optional, the id of the user to retrieve status of custom terms and service on\n * @param {Function} [callback] - Passed the terms of service user status information if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the terms of service user status\n */ TermsOfService.prototype.getUserStatus = function(termsOfServicesID, options, callback) {\n    var params = {\n        qs: {\n            tos_id: termsOfServicesID\n        }\n    };\n    if (options) {\n        Object.assign(params.qs, options);\n    }\n    var apiPath = urlPath(USER_STATUSES_PATH);\n    return this.client.get(apiPath, params).then((response)=>{\n        if (response.statusCode !== 200) {\n            throw errors.buildUnexpectedResponseError(response);\n        }\n        return response.body.entries[0];\n    }).asCallback(callback);\n};\n/**\n * Accepts/rejects custom terms of services for the user\n *\n * API Endpoint: '/terms_of_service_user_statuses'\n * Method: PUT\n *\n * @param {string} termsOfServiceUserStatusID - Terms of service user status object ID\n * @param {boolean} isAccepted - Determines wehether the terms of services has been accepted or rejected\n * @param {Function} [callback] - Passed the terms of service user status updated information if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the updated terms of service user status\n */ TermsOfService.prototype.updateUserStatus = function(termsOfServiceUserStatusID, isAccepted, callback) {\n    var params = {\n        body: {\n            is_accepted: isAccepted\n        }\n    };\n    var apiPath = urlPath(USER_STATUSES_PATH, termsOfServiceUserStatusID);\n    return this.client.wrapWithDefaultHandler(this.client.put)(apiPath, params, callback);\n};\n/**\n * Creates a user status for terms of service, if already exists then update existing user status for terms of service\n *\n * API Endpoint: '/terms_of_service_user_statuses'\n * Method: POST/PUT\n *\n * @param {string} termsOfServicesID - Terms of services ID to retrieve user statuses on\n * @param {boolean} isAccepted - Determines wehether the terms of services has been accepted or rejected\n * @param {Object} [options] - Additional options. Can be left null in most cases.\n * @param {string} [options.user_id] - Optional, user id to retrieve terms of service status on, default is current user\n * @param {Function} [callback] - Passed the terms of service user status information if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the terms of service user status\n */ TermsOfService.prototype.setUserStatus = function(termsOfServicesID, isAccepted, options, callback) {\n    var params = {\n        body: {\n            tos: {\n                id: termsOfServicesID,\n                type: \"terms_of_service\"\n            },\n            is_accepted: isAccepted\n        }\n    };\n    if (options && options.user_id) {\n        params.body.user = {\n            id: options.user_id,\n            type: \"user\"\n        };\n    }\n    var apiPath = urlPath(USER_STATUSES_PATH);\n    return this.client.post(apiPath, params).then((response)=>{\n        switch(response.statusCode){\n            // 200 - A user status has been successfully created on terms of service\n            // return the terms of service user status object\n            case httpStatusCodes.OK:\n                return response.body;\n            // 409 - Conflict\n            // Terms of Service already exists. Update the existing terms of service object\n            case httpStatusCodes.CONFLICT:\n                var getOptions = Object.assign({\n                    fields: \"id\"\n                }, options);\n                return this.getUserStatus(termsOfServicesID, getOptions).then((userStatus)=>this.updateUserStatus(userStatus.id, isAccepted));\n            default:\n                throw errors.buildUnexpectedResponseError(response);\n        }\n    }).asCallback(callback);\n};\n/**\n * @module box-node-sdk/lib/managers/terms-of-service\n * @see {@Link TermsOfService}\n */ module.exports = TermsOfService;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/box-node-sdk/lib/managers/terms-of-service.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/box-node-sdk/lib/managers/trash.js":
/*!*********************************************************!*\
  !*** ./node_modules/box-node-sdk/lib/managers/trash.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * @fileoverview Manager for the Trash Resource\n */ \n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\nvar urlPath = __webpack_require__(/*! ../util/url-path */ \"(rsc)/./node_modules/box-node-sdk/lib/util/url-path.js\");\n// -----------------------------------------------------------------------------\n// Private\n// -----------------------------------------------------------------------------\n// Trash is technically a folder, so it uses the folders endpoint\nvar BASE_PATH = \"/folders\", TRASH_ID = \"trash\", ITEMS_SUBRESOURCE = \"items\";\n// -----------------------------------------------------------------------------\n// Public\n// -----------------------------------------------------------------------------\n/**\n * Simple manager for interacting with all Trash endpoints and actions.\n *\n * @constructor\n * @param {BoxClient} client - The Box API Client that is responsible for making calls to the API\n * @returns {void}\n */ function Trash(client) {\n    this.client = client;\n}\n/**\n * Get items in the user's trash\n *\n * API Endpoint: '/folders/trash/items'\n * Method: GET\n *\n * @param {Object} [options] - Optional parameters, can be left null in most cases\n * @param {string} [options.fields] - Comma-delimited list of item fields to return\n * @param {Function} [callback] - Passed the list of trashed items if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the collection of trashed items\n */ Trash.prototype.get = function(options, callback) {\n    var apiPath = urlPath(BASE_PATH, TRASH_ID, ITEMS_SUBRESOURCE), params = {\n        qs: options\n    };\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\nmodule.exports = Trash;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYm94LW5vZGUtc2RrL2xpYi9tYW5hZ2Vycy90cmFzaC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Q0FFQyxHQUVEO0FBRUEsZ0ZBQWdGO0FBQ2hGLGVBQWU7QUFDZixnRkFBZ0Y7QUFFaEYsSUFBSUEsVUFBVUMsbUJBQU9BLENBQUM7QUFFdEIsZ0ZBQWdGO0FBQ2hGLFVBQVU7QUFDVixnRkFBZ0Y7QUFFaEYsaUVBQWlFO0FBQ2pFLElBQUlDLFlBQVksWUFDZkMsV0FBVyxTQUNYQyxvQkFBb0I7QUFHckIsZ0ZBQWdGO0FBQ2hGLFNBQVM7QUFDVCxnRkFBZ0Y7QUFFaEY7Ozs7OztDQU1DLEdBQ0QsU0FBU0MsTUFBTUMsTUFBTTtJQUNwQixJQUFJLENBQUNBLE1BQU0sR0FBR0E7QUFDZjtBQUVBOzs7Ozs7Ozs7O0NBVUMsR0FDREQsTUFBTUUsU0FBUyxDQUFDQyxHQUFHLEdBQUcsU0FBU0MsT0FBTyxFQUFFQyxRQUFRO0lBRS9DLElBQUlDLFVBQVVYLFFBQVFFLFdBQVdDLFVBQVVDLG9CQUMxQ1EsU0FBUztRQUNSQyxJQUFJSjtJQUNMO0lBRUQsT0FBTyxJQUFJLENBQUNILE1BQU0sQ0FBQ1Esc0JBQXNCLENBQUMsSUFBSSxDQUFDUixNQUFNLENBQUNFLEdBQUcsRUFBRUcsU0FBU0MsUUFBUUY7QUFDN0U7QUFFQUssT0FBT0MsT0FBTyxHQUFHWCIsInNvdXJjZXMiOlsid2VicGFjazovL2NpdmlsLWVuZ2luZWVyaW5nLXBsYXRmb3JtLy4vbm9kZV9tb2R1bGVzL2JveC1ub2RlLXNkay9saWIvbWFuYWdlcnMvdHJhc2guanM/MzlkMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgTWFuYWdlciBmb3IgdGhlIFRyYXNoIFJlc291cmNlXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUmVxdWlyZW1lbnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgdXJsUGF0aCA9IHJlcXVpcmUoJy4uL3V0aWwvdXJsLXBhdGgnKTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFByaXZhdGVcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vIFRyYXNoIGlzIHRlY2huaWNhbGx5IGEgZm9sZGVyLCBzbyBpdCB1c2VzIHRoZSBmb2xkZXJzIGVuZHBvaW50XG52YXIgQkFTRV9QQVRIID0gJy9mb2xkZXJzJyxcblx0VFJBU0hfSUQgPSAndHJhc2gnLFxuXHRJVEVNU19TVUJSRVNPVVJDRSA9ICdpdGVtcyc7XG5cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFB1YmxpY1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLyoqXG4gKiBTaW1wbGUgbWFuYWdlciBmb3IgaW50ZXJhY3Rpbmcgd2l0aCBhbGwgVHJhc2ggZW5kcG9pbnRzIGFuZCBhY3Rpb25zLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtCb3hDbGllbnR9IGNsaWVudCAtIFRoZSBCb3ggQVBJIENsaWVudCB0aGF0IGlzIHJlc3BvbnNpYmxlIGZvciBtYWtpbmcgY2FsbHMgdG8gdGhlIEFQSVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIFRyYXNoKGNsaWVudCkge1xuXHR0aGlzLmNsaWVudCA9IGNsaWVudDtcbn1cblxuLyoqXG4gKiBHZXQgaXRlbXMgaW4gdGhlIHVzZXIncyB0cmFzaFxuICpcbiAqIEFQSSBFbmRwb2ludDogJy9mb2xkZXJzL3RyYXNoL2l0ZW1zJ1xuICogTWV0aG9kOiBHRVRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gT3B0aW9uYWwgcGFyYW1ldGVycywgY2FuIGJlIGxlZnQgbnVsbCBpbiBtb3N0IGNhc2VzXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuZmllbGRzXSAtIENvbW1hLWRlbGltaXRlZCBsaXN0IG9mIGl0ZW0gZmllbGRzIHRvIHJldHVyblxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSAtIFBhc3NlZCB0aGUgbGlzdCBvZiB0cmFzaGVkIGl0ZW1zIGlmIHN1Y2Nlc3NmdWwsIGVycm9yIG90aGVyd2lzZVxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0gQSBwcm9taXNlIHJlc29sdmluZyB0byB0aGUgY29sbGVjdGlvbiBvZiB0cmFzaGVkIGl0ZW1zXG4gKi9cblRyYXNoLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihvcHRpb25zLCBjYWxsYmFjaykge1xuXG5cdHZhciBhcGlQYXRoID0gdXJsUGF0aChCQVNFX1BBVEgsIFRSQVNIX0lELCBJVEVNU19TVUJSRVNPVVJDRSksXG5cdFx0cGFyYW1zID0ge1xuXHRcdFx0cXM6IG9wdGlvbnNcblx0XHR9O1xuXG5cdHJldHVybiB0aGlzLmNsaWVudC53cmFwV2l0aERlZmF1bHRIYW5kbGVyKHRoaXMuY2xpZW50LmdldCkoYXBpUGF0aCwgcGFyYW1zLCBjYWxsYmFjayk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRyYXNoO1xuIl0sIm5hbWVzIjpbInVybFBhdGgiLCJyZXF1aXJlIiwiQkFTRV9QQVRIIiwiVFJBU0hfSUQiLCJJVEVNU19TVUJSRVNPVVJDRSIsIlRyYXNoIiwiY2xpZW50IiwicHJvdG90eXBlIiwiZ2V0Iiwib3B0aW9ucyIsImNhbGxiYWNrIiwiYXBpUGF0aCIsInBhcmFtcyIsInFzIiwid3JhcFdpdGhEZWZhdWx0SGFuZGxlciIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/box-node-sdk/lib/managers/trash.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/box-node-sdk/lib/managers/users.js":
/*!*********************************************************!*\
  !*** ./node_modules/box-node-sdk/lib/managers/users.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * @fileoverview Manager for the Box User Resource\n */ \n// ------------------------------------------------------------------------------\n// Requirements\n// ------------------------------------------------------------------------------\nvar urlPath = __webpack_require__(/*! ../util/url-path */ \"(rsc)/./node_modules/box-node-sdk/lib/util/url-path.js\");\n// ------------------------------------------------------------------------------\n// Private\n// ------------------------------------------------------------------------------\nvar BASE_PATH = \"/users\", EMAIL_ALIASES_SUBRESOURCE = \"email_aliases\", GROUP_MEMBERSHIPS_SUBRESOURCE = \"memberships\", CURRENT_USER_ID = \"me\";\n// ------------------------------------------------------------------------------\n// Public\n// ------------------------------------------------------------------------------\n/**\n * Simple manager for interacting with all 'User' endpoints and actions.\n *\n * @constructor\n * @param {BoxClient} client - The Box API Client that is responsible for making calls to the API\n * @returns {void}\n */ function Users(client) {\n    this.client = client;\n}\n/** @const {string} */ Users.prototype.CURRENT_USER_ID = CURRENT_USER_ID;\n/**\n * Requests information for the Box user info associated with a given ID\n *\n * API Endpoint: '/users/:id'\n * Method: GET\n *\n * @param {string} userID - The ID of the user to retrieve\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {Function} [callback] - passed the user info if it was acquired successfully\n * @returns {Promise<Object>} A promise resolving to the user object\n */ Users.prototype.get = function(userID, options, callback) {\n    var apiPath = urlPath(BASE_PATH, userID), params = {\n        qs: options\n    };\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Update some information about a user.\n *\n * API Endpoint: '/users/:id'\n * Method: PUT\n *\n * @param {string} userID - The ID of the user to update\n * @param {Object} updates - User fields to update\n * @param {Function} [callback] - Passed the updated user information if it was acquired successfully\n * @returns {Promise<Object>} A promise resolving to the updated user object\n */ Users.prototype.update = function(userID, updates, callback) {\n    var apiPath = urlPath(BASE_PATH, userID), params = {\n        body: updates\n    };\n    return this.client.wrapWithDefaultHandler(this.client.put)(apiPath, params, callback);\n};\n/**\n * Deletes a user in an enterprise account.\n *\n * API Endpoint: '/users/:userID'\n * Method: DELETE\n *\n * @param {string} userID - The ID of the user to delete\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {boolean} [options.notify] - Determines if the destination user should receive email notification of the transfer.\n * @param {boolean} [options.force] - Whether or not the user should be deleted even if this user still own files.\n * @param {Function} [callback] - Empty response body passed if successful, error otherwise\n * @returns {Promise<void>} A promise resolving to nothing\n */ Users.prototype.delete = function(userID, options, callback) {\n    var apiPath = urlPath(BASE_PATH, userID), params = {\n        qs: options\n    };\n    return this.client.wrapWithDefaultHandler(this.client.del)(apiPath, params, callback);\n};\n/**\n * Get all linked email addresses for a user.\n * @NOTE(mwiller) 2014-06-10: This does not include their primary email address!\n *\n * API Endpoint: '/users/:id/email_aliases'\n * Method: GET\n *\n * @param {string} userID - The ID of the user to retrieve email alises for\n * @param {Function} [callback] - Passed the email aliases if successful\n * @returns {Promise<Object>} A promise resolving to the collection of email aliases\n */ Users.prototype.getEmailAliases = function(userID, callback) {\n    var apiPath = urlPath(BASE_PATH, userID, EMAIL_ALIASES_SUBRESOURCE);\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, null, callback);\n};\n/**\n * Add a linked email address to a user's account.\n *\n * API Endpoint: '/users/:id/email_aliases'\n * Method: POST\n *\n * @param {string} userID - The ID of the user to add an email alias to\n * @param {string} email - The email address to add\n * @param {Object} [options] - Optional parameters\n * @param {boolean} [options.is_confirmed=false] Whether or not to attempt to auto-confirm the alias (for admins)\n * @param {Function} [callback] - Passed the new alias if successful\n * @returns {Promise<Object>} A promise resolving to the new email alias\n */ Users.prototype.addEmailAlias = function(userID, email, options, callback) {\n    options = options || {};\n    if (typeof options === \"function\") {\n        callback = options;\n        options = {};\n    }\n    var apiPath = urlPath(BASE_PATH, userID, EMAIL_ALIASES_SUBRESOURCE), params = {\n        body: {\n            email,\n            is_confirmed: false // don't attempt to autoconfirm aliases for admins by default\n        }\n    };\n    Object.assign(params.body, options);\n    return this.client.wrapWithDefaultHandler(this.client.post)(apiPath, params, callback);\n};\n/**\n * Remove a linked email address from the current user by alias ID.\n *\n * API Endpoint: '/users/:id/email_aliases/:aliasID'\n * Method: DELETE\n *\n * @param {string} userID - The ID of the user to remove the email alias from\n * @param {string} aliasID - The ID of the linked email alias to remove\n * @param {Function} [callback] - Passed nothing on success\n * @returns {Promise<void>} A promise resolving to nothing\n */ Users.prototype.removeEmailAlias = function(userID, aliasID, callback) {\n    var apiPath = urlPath(BASE_PATH, userID, EMAIL_ALIASES_SUBRESOURCE, aliasID);\n    return this.client.wrapWithDefaultHandler(this.client.del)(apiPath, null, callback);\n};\n/**\n * Retrieve a list of group memberships for the user, which show which groups\n * the user belongs to.  This ability is restricted to group admins.\n *\n * API Endpoint: '/users/:userID/memberships'\n * Method: GET\n *\n * @param {string} userID - The ID of the user to get group memberships for\n * @param {Object} [options] - Optional parameters, can be left null in most cases\n * @param {int} [options.limit] - The number of memberships to retrieve\n * @param {int} [options.offset] - Paging marker, retrieve records starting at this position in the list\n * @param {Function} [callback] - Passed a list of memberships if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the collection of group memberships\n */ Users.prototype.getGroupMemberships = function(userID, options, callback) {\n    var apiPath = urlPath(BASE_PATH, userID, GROUP_MEMBERSHIPS_SUBRESOURCE), params = {\n        qs: options\n    };\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Retrieve the user's avatar image.\n *\n * API Endpoint: '/users/:userID/avatar'\n * Method: GET\n *\n * @param {string} userID The ID of the user whose avatar should be retrieved\n * @param {Function} [callback] Passed a stream over the bytes of the avatar image if successful\n * @returns {Promise<Readable>} A promise resolving to the image stream\n */ Users.prototype.getAvatar = function(userID, callback) {\n    var apiPath = urlPath(BASE_PATH, userID, \"avatar\"), params = {\n        streaming: true\n    };\n    return this.client.get(apiPath, params).asCallback(callback);\n};\n// @NOTE(fschott) 2014-05-06: Still need to implement get, edit, create, etc.\n//  The problem is that they are only available to enterprise admins, so we'll\n//  first need to figure out how we want to handle access to those methods.\n//  Remove this comment once we have.\n/**\n * @module box-node-sdk/lib/managers/users\n * @see {@Link Users}\n */ module.exports = Users;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/box-node-sdk/lib/managers/users.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/box-node-sdk/lib/managers/web-links.js":
/*!*************************************************************!*\
  !*** ./node_modules/box-node-sdk/lib/managers/web-links.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * @fileoverview Manager for the Web Links Resource\n */ \n// ------------------------------------------------------------------------------\n// Requirements\n// ------------------------------------------------------------------------------\nvar urlPath = __webpack_require__(/*! ../util/url-path */ \"(rsc)/./node_modules/box-node-sdk/lib/util/url-path.js\");\n// ------------------------------------------------------------------------------\n// Private\n// ------------------------------------------------------------------------------\nvar BASE_PATH = \"/web_links\";\n// ------------------------------------------------------------------------------\n// Public\n// ------------------------------------------------------------------------------\n/**\n * Simple manager for interacting with all 'Weblinks' endpoints and actions.\n *\n * @constructor\n * @param {BoxClient} client - The Box API Client that is responsible for making calls to the API\n * @returns {void}\n */ function WebLinks(client) {\n    this.client = client;\n}\n/**\n * Creates a web link object within a given folder.\n *\n * API Endpoint: '/web_links'\n * Method: POST\n *\n * @param {string} url - URL you want the web link to point to. Must include http:// or https://\n * @param {string} parentID - The ID of the parent folder where you're creating the web link\n * @param {Object} [options] - Additional parameters\n * @param {string} [options.name] - Name for the web link. Will default to the URL if empty.\n * @param {string} [options.description] - Description of the web link. Will provide more context to users about the web link.\n * @param {Function} [callback] - Passed the new web link information if it was acquired successfully, error otherwise\n * @returns {Promise<Object>} A promise resolving to the created weblink object\n */ WebLinks.prototype.create = function(url, parentID, options, callback) {\n    var apiPath = urlPath(BASE_PATH), params = {\n        body: {\n            url,\n            parent: {\n                id: parentID\n            }\n        }\n    };\n    Object.assign(params.body, options);\n    return this.client.wrapWithDefaultHandler(this.client.post)(apiPath, params, callback);\n};\n/**\n * Use to get information about the web link.\n *\n * API Endpoint: '/web_links/:weblinkID'\n * Method: GET\n *\n * @param {string} weblinkID - The Box ID of web link being requested\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {Function} [callback] - Passed the web-link information if it was acquired successfully, error otherwise\n * @returns {Promise<Object>} A promise resolving to the weblink object\n */ WebLinks.prototype.get = function(weblinkID, options, callback) {\n    var apiPath = urlPath(BASE_PATH, weblinkID), params = {\n        qs: options\n    };\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Updates information for a web link.\n *\n * API Endpoint: '/web_links/:weblinkID'\n * Method: PUT\n *\n * @param {string} weblinkID - The Box ID of the web link being updated\n * @param {Object} updates - Fields of the weblink to update\n * @param {string} [updates.name] - Name for the web link. Will default to the URL if empty.\n * @param {string} [updates.description] - Description of the web link. Will provide more context to users about the web link.\n * @param {Function} [callback] - Passed the updated web link information if it was acquired successfully, error otherwise\n * @returns {Promise<Object>} A promise resolving to the updated web link object\n */ WebLinks.prototype.update = function(weblinkID, updates, callback) {\n    var apiPath = urlPath(BASE_PATH, weblinkID), params = {\n        body: updates\n    };\n    return this.client.wrapWithDefaultHandler(this.client.put)(apiPath, params, callback);\n};\n/**\n * Deletes a web link and moves it to the trash\n *\n * API Endpoint: '/web_links/:weblinkID'\n * Method: DELETE\n *\n * @param {string} weblinkID - The Box ID of the web link being moved to the trash\n * @param {Function} [callback] - Empty body passed if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to nothing\n */ WebLinks.prototype.delete = function(weblinkID, callback) {\n    var apiPath = urlPath(BASE_PATH, weblinkID);\n    return this.client.wrapWithDefaultHandler(this.client.del)(apiPath, null, callback);\n};\n/**\n * Move a web link into a new parent folder.\n *\n * API Endpoint: '/web_links/:webLinkID'\n * Method: PUT\n *\n * @param {string} webLinkID - The Box ID of the web link being requested\n * @param {string} newParentID - The Box ID for the new parent folder. '0' to move to All Files.\n * @param {Function} [callback] - Passed the updated web link information if it was acquired successfully\n * @returns {Promise<Object>} A promise resolving to the updated web link object\n */ WebLinks.prototype.move = function(webLinkID, newParentID, callback) {\n    var params = {\n        body: {\n            parent: {\n                id: newParentID\n            }\n        }\n    };\n    var apiPath = urlPath(BASE_PATH, webLinkID);\n    return this.client.wrapWithDefaultHandler(this.client.put)(apiPath, params, callback);\n};\n/**\n * Copy a web link into a new, different folder\n *\n * API Endpoint: '/web_links/:webLinkID/copy\n * Method: POST\n *\n * @param {string} webLinkID - The Box ID of the web link being requested\n * @param {string} newParentID - The Box ID for the new parent folder. '0' to copy to All Files.\n * @param {Object} [options] - Optional parameters for the copy operation, can be left null in most cases\n * @param {string} [options.name] - A new name to use if there is an identically-named item in the new parent folder\n * @param {Function} [callback] - passed the new web link info if call was successful\n * @returns {Promise<Object>} A promise resolving to the new web link object\n */ WebLinks.prototype.copy = function(webLinkID, newParentID, options, callback) {\n    options = options || {};\n    options.parent = {\n        id: newParentID\n    };\n    var params = {\n        body: options\n    };\n    var apiPath = urlPath(BASE_PATH, webLinkID, \"/copy\");\n    return this.client.wrapWithDefaultHandler(this.client.post)(apiPath, params, callback);\n};\n/**\n * Add a web link to a given collection\n *\n * API Endpoint: '/web_links/:webLinkID'\n * Method: PUT\n *\n * @param {string} webLinkID - The web link to add to the collection\n * @param {string} collectionID - The collection to add the web link to\n * @param {Function} [callback] - Passed the updated web link if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the updated web link object\n */ WebLinks.prototype.addToCollection = function(webLinkID, collectionID, callback) {\n    return this.get(webLinkID, {\n        fields: \"collections\"\n    }).then((data)=>{\n        var collections = data.collections || [];\n        // Convert to correct format\n        collections = collections.map((c)=>({\n                id: c.id\n            }));\n        if (!collections.find((c)=>c.id === collectionID)) {\n            collections.push({\n                id: collectionID\n            });\n        }\n        return this.update(webLinkID, {\n            collections\n        });\n    }).asCallback(callback);\n};\n/**\n * Remove a web link from a given collection\n *\n * API Endpoint: '/web_links/:webLinkID'\n * Method: PUT\n *\n * @param {string} webLinkID - The web link to remove from the collection\n * @param {string} collectionID - The collection to remove the web link from\n * @param {Function} [callback] - Passed the updated web link if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the updated web link object\n */ WebLinks.prototype.removeFromCollection = function(webLinkID, collectionID, callback) {\n    return this.get(webLinkID, {\n        fields: \"collections\"\n    }).then((data)=>{\n        var collections = data.collections || [];\n        // Convert to correct object format and remove the specified collection\n        collections = collections.map((c)=>({\n                id: c.id\n            })).filter((c)=>c.id !== collectionID);\n        return this.update(webLinkID, {\n            collections\n        });\n    }).asCallback(callback);\n};\nmodule.exports = WebLinks;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/box-node-sdk/lib/managers/web-links.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/box-node-sdk/lib/managers/webhooks.js":
/*!************************************************************!*\
  !*** ./node_modules/box-node-sdk/lib/managers/webhooks.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * @fileoverview Manager for the Box Webhooks resource\n */ \n// -----------------------------------------------------------------------------\n// Typedefs\n// -----------------------------------------------------------------------------\n/**\n * A webhook trigger type constant\n * @typedef {string} WebhookTriggerType\n */ // -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\nvar urlPath = __webpack_require__(/*! ../util/url-path */ \"(rsc)/./node_modules/box-node-sdk/lib/util/url-path.js\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\n// -----------------------------------------------------------------------------\n// Private\n// -----------------------------------------------------------------------------\n// Base path for all webhooks endpoints\nvar BASE_PATH = \"/webhooks\";\n// This prevents replay attacks\nconst MAX_MESSAGE_AGE = 10 * 60; // 10 minutes\n/**\n * Compute the message signature\n * @see {@Link https://developer.box.com/en/guides/webhooks/handle/setup-signatures/}\n *\n * @param {string} body - The request body of the webhook message\n * @param {Object} headers - The request headers of the webhook message\n * @param {?string} signatureKey - The signature to verify the message with\n * @returns {?string} - The message signature (or null, if it can't be computed)\n * @private\n */ function computeSignature(body, headers, signatureKey) {\n    if (!signatureKey) {\n        return null;\n    }\n    if (headers[\"box-signature-version\"] !== \"1\") {\n        return null;\n    }\n    if (headers[\"box-signature-algorithm\"] !== \"HmacSHA256\") {\n        return null;\n    }\n    let hmac = crypto.createHmac(\"sha256\", signatureKey);\n    hmac.update(body);\n    hmac.update(headers[\"box-delivery-timestamp\"]);\n    const signature = hmac.digest(\"base64\");\n    return signature;\n}\n/**\n * Validate the message signature\n * @see {@Link https://developer.box.com/en/guides/webhooks/handle/verify-signatures/}\n *\n * @param {string} body - The request body of the webhook message\n * @param {Object} headers - The request headers of the webhook message\n * @param {string} primarySignatureKey - The primary signature to verify the message with\n * @param {string} [secondarySignatureKey] - The secondary signature to verify the message with\n * @returns {boolean} - True or false\n * @private\n */ function validateSignature(body, headers, primarySignatureKey, secondarySignatureKey) {\n    // Either the primary or secondary signature must match the corresponding signature from Box\n    // (The use of two signatures allows the signing keys to be rotated one at a time)\n    const primarySignature = computeSignature(body, headers, primarySignatureKey);\n    if (primarySignature && primarySignature === headers[\"box-signature-primary\"]) {\n        return true;\n    }\n    const secondarySignature = computeSignature(body, headers, secondarySignatureKey);\n    if (secondarySignature && secondarySignature === headers[\"box-signature-secondary\"]) {\n        return true;\n    }\n    return false;\n}\n/**\n * Validate that the delivery timestamp is not too far in the past (to prevent replay attacks)\n *\n * @param {Object} headers - The request headers of the webhook message\n * @param {int} maxMessageAge - The maximum message age (in seconds)\n * @returns {boolean} - True or false\n * @private\n */ function validateDeliveryTimestamp(headers, maxMessageAge) {\n    const deliveryTime = Date.parse(headers[\"box-delivery-timestamp\"]);\n    const currentTime = Date.now();\n    const messageAge = (currentTime - deliveryTime) / 1000;\n    if (messageAge > maxMessageAge) {\n        return false;\n    }\n    return true;\n}\n/**\n * Stringify JSON with escaped multibyte Unicode characters to ensure computed signatures match PHP's default behavior\n *\n * @param {Object} body - The parsed JSON object\n * @returns {string} - Stringified JSON with escaped multibyte Unicode characters\n * @private\n */ function jsonStringifyWithEscapedUnicode(body) {\n    return JSON.stringify(body).replace(/[\\u007f-\\uffff]/g, (char)=>`\\\\u${`0000${char.charCodeAt(0).toString(16)}`.slice(-4)}`);\n}\n// -----------------------------------------------------------------------------\n// Public\n// -----------------------------------------------------------------------------\n/**\n * Simple manager for interacting with all 'Webhooks' endpoints and actions.\n *\n * @param {BoxClient} client The Box API Client that is responsible for making calls to the API\n * @constructor\n */ function Webhooks(client) {\n    // Attach the client, for making API calls\n    this.client = client;\n}\n/**\n * Primary signature key to protect webhooks against attacks.\n * @static\n * @type {?string}\n */ Webhooks.primarySignatureKey = null;\n/**\n * Secondary signature key to protect webhooks against attacks.\n * @static\n * @type {?string}\n */ Webhooks.secondarySignatureKey = null;\n/**\n * Enum of valid webhooks event triggers\n *\n * @readonly\n * @enum {WebhookTriggerType}\n */ Webhooks.prototype.triggerTypes = {\n    FILE: {\n        UPLOADED: \"FILE.UPLOADED\",\n        PREVIEWED: \"FILE.PREVIEWED\",\n        DOWNLOADED: \"FILE.DOWNLOADED\",\n        TRASHED: \"FILE.TRASHED\",\n        DELETED: \"FILE.DELETED\",\n        RESTORED: \"FILE.RESTORED\",\n        COPIED: \"FILE.COPIED\",\n        MOVED: \"FILE.MOVED\",\n        LOCKED: \"FILE.LOCKED\",\n        UNLOCKED: \"FILE.UNLOCKED\",\n        RENAMED: \"FILE.RENAMED\"\n    },\n    COMMENT: {\n        CREATED: \"COMMENT.CREATED\",\n        UPDATED: \"COMMENT.UPDATED\",\n        DELETED: \"COMMENT.DELETED\"\n    },\n    TASK_ASSIGNMENT: {\n        CREATED: \"TASK_ASSIGNMENT.CREATED\",\n        UPDATED: \"TASK_ASSIGNMENT.UPDATED\"\n    },\n    METADATA_INSTANCE: {\n        CREATED: \"METADATA_INSTANCE.CREATED\",\n        UPDATED: \"METADATA_INSTANCE.UPDATED\",\n        DELETED: \"METADATA_INSTANCE.DELETED\"\n    },\n    FOLDER: {\n        CREATED: \"FOLDER.CREATED\",\n        DOWNLOADED: \"FOLDER.DOWNLOADED\",\n        RESTORED: \"FOLDER.RESTORED\",\n        DELETED: \"FOLDER.DELETED\",\n        COPIED: \"FOLDER.COPIED\",\n        MOVED: \"FOLDER.MOVED\",\n        TRASHED: \"FOLDER.TRASHED\",\n        RENAMED: \"FOLDER.RENAMED\"\n    },\n    WEBHOOK: {\n        DELETED: \"WEBHOOK.DELETED\"\n    },\n    COLLABORATION: {\n        CREATED: \"COLLABORATION.CREATED\",\n        ACCEPTED: \"COLLABORATION.ACCEPTED\",\n        REJECTED: \"COLLABORATION.REJECTED\",\n        REMOVED: \"COLLABORATION.REMOVED\",\n        UPDATED: \"COLLABORATION.UPDATED\"\n    },\n    SHARED_LINK: {\n        DELETED: \"SHARED_LINK.DELETED\",\n        CREATED: \"SHARED_LINK.CREATED\",\n        UPDATED: \"SHARED_LINK.UPDATED\"\n    }\n};\n/**\n * Create a new webhook on a given Box object, specified by type and ID.\n *\n * API Endpoint: '/webhooks'\n * Method: POST\n *\n * @param {string} targetID - Box ID  of the item to create webhook on\n * @param {ItemType} targetType - Type of item the webhook will be created on\n * @param {string} notificationURL - The URL of your application where Box will notify you of events triggers\n * @param {WebhookTriggerType[]} triggerTypes - Array of event types that trigger notification for the target\n * @param {Function} [callback] - Passed the new webhook information if it was acquired successfully\n * @returns {Promise<Object>} A promise resolving to the new webhook object\n */ Webhooks.prototype.create = function(targetID, targetType, notificationURL, triggerTypes, callback) {\n    var params = {\n        body: {\n            target: {\n                id: targetID,\n                type: targetType\n            },\n            address: notificationURL,\n            triggers: triggerTypes\n        }\n    };\n    var apiPath = urlPath(BASE_PATH);\n    return this.client.wrapWithDefaultHandler(this.client.post)(apiPath, params, callback);\n};\n/**\n * Returns a webhook object with the specified Webhook ID\n *\n * API Endpoint: '/webhooks/:webhookID'\n * Method: GET\n *\n * @param {string} webhookID - ID of the webhook to retrieve\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {Function} [callback] - Passed the webhook information if it was acquired successfully\n * @returns {Promise<Object>} A promise resolving to the webhook object\n */ Webhooks.prototype.get = function(webhookID, options, callback) {\n    var params = {\n        qs: options\n    };\n    var apiPath = urlPath(BASE_PATH, webhookID);\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Get a list of webhooks that are active for the current application and user.\n *\n * API Endpoint: '/webhooks'\n * Method: GET\n *\n * @param {Object} [options] - Additional options for the request. Can be left null in most cases.\n * @param {int} [options.limit=100] - The number of webhooks to return\n * @param {string} [options.marker] - Pagination marker\n * @param {Function} [callback] - Passed the list of webhooks if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the collection of webhooks\n */ Webhooks.prototype.getAll = function(options, callback) {\n    var params = {\n        qs: options\n    };\n    var apiPath = urlPath(BASE_PATH);\n    return this.client.wrapWithDefaultHandler(this.client.get)(apiPath, params, callback);\n};\n/**\n * Update a webhook\n *\n * API Endpoint: '/webhooks/:webhookID'\n * Method: PUT\n *\n * @param {string} webhookID - The ID of the webhook to be updated\n * @param {Object} updates - Webhook fields to update\n * @param {string} [updates.address] - The new URL used by Box to send a notification when webhook is triggered\n * @param {WebhookTriggerType[]} [updates.triggers] - The new events that triggers a notification\n * @param {Function} [callback] - Passed the updated webhook information if successful, error otherwise\n * @returns {Promise<Object>} A promise resolving to the updated webhook object\n */ Webhooks.prototype.update = function(webhookID, updates, callback) {\n    var apiPath = urlPath(BASE_PATH, webhookID), params = {\n        body: updates\n    };\n    return this.client.wrapWithDefaultHandler(this.client.put)(apiPath, params, callback);\n};\n/**\n * Delete a specified webhook by ID\n *\n * API Endpoint: '/webhooks/:webhookID'\n * Method: DELETE\n *\n * @param {string} webhookID - ID of webhook to be deleted\n * @param {Function} [callback] - Empty response body passed if successful.\n * @returns {Promise<void>} A promise resolving to nothing\n */ Webhooks.prototype.delete = function(webhookID, callback) {\n    var apiPath = urlPath(BASE_PATH, webhookID);\n    return this.client.wrapWithDefaultHandler(this.client.del)(apiPath, null, callback);\n};\n/**\n * Sets primary and secondary signatures that are used to verify the Webhooks messages\n *\n * @param {string} primaryKey - The primary signature to verify the message with\n * @param {string} [secondaryKey] - The secondary signature to verify the message with\n * @returns {void}\n */ Webhooks.setSignatureKeys = function(primaryKey, secondaryKey) {\n    Webhooks.primarySignatureKey = primaryKey;\n    if (typeof secondaryKey === \"string\") {\n        Webhooks.secondarySignatureKey = secondaryKey;\n    }\n};\n/**\n * Validate a webhook message by verifying the signature and the delivery timestamp\n *\n * @param {string|Object} body - The request body of the webhook message\n * @param {Object} headers - The request headers of the webhook message\n * @param {string} [primaryKey] - The primary signature to verify the message with. If it is sent as a parameter,\n     it overrides the static variable primarySignatureKey\n * @param {string} [secondaryKey] - The secondary signature to verify the message with. If it is sent as a parameter,\n     it overrides the static variable primarySignatureKey\n * @param {int} [maxMessageAge] - The maximum message age (in seconds).  Defaults to 10 minutes\n * @returns {boolean} - True or false\n */ Webhooks.validateMessage = function(body, headers, primaryKey, secondaryKey, maxMessageAge) {\n    if (!primaryKey && Webhooks.primarySignatureKey) {\n        primaryKey = Webhooks.primarySignatureKey;\n    }\n    if (!secondaryKey && Webhooks.secondarySignatureKey) {\n        secondaryKey = Webhooks.secondarySignatureKey;\n    }\n    if (typeof maxMessageAge !== \"number\") {\n        maxMessageAge = MAX_MESSAGE_AGE;\n    }\n    // For frameworks like Express that automatically parse JSON\n    // bodies into Objects, re-stringify for signature testing\n    if (typeof body === \"object\") {\n        // Escape forward slashes to ensure a matching signature\n        body = jsonStringifyWithEscapedUnicode(body).replace(/\\//g, \"\\\\/\");\n    }\n    if (!validateSignature(body, headers, primaryKey, secondaryKey)) {\n        return false;\n    }\n    if (!validateDeliveryTimestamp(headers, maxMessageAge)) {\n        return false;\n    }\n    return true;\n};\nWebhooks.prototype.validateMessage = Webhooks.validateMessage;\n/**\n * @module box-node-sdk/lib/managers/webhooks\n * @see {@Link Webhooks}\n */ module.exports = Webhooks;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/box-node-sdk/lib/managers/webhooks.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/box-node-sdk/lib/sessions/anonymous-session.js":
/*!*********************************************************************!*\
  !*** ./node_modules/box-node-sdk/lib/sessions/anonymous-session.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * @fileoverview An Anonymous Box API Session.\n */ \n// ------------------------------------------------------------------------------\n// Requirements\n// ------------------------------------------------------------------------------\nconst Promise = __webpack_require__(/*! bluebird */ \"(rsc)/./node_modules/bluebird/js/release/bluebird.js\");\n// ------------------------------------------------------------------------------\n// Private\n// ------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------\n// Public\n// ------------------------------------------------------------------------------\n/**\n * An Anonymous Box API Session.\n *\n * The Anonymous API Session holds a Client Credentials accessToken, which it\n * returns to the client so that it may make calls on behalf of anonymous users.\n *\n * Anonymous tokens will be refreshed in the background if a request is made within the\n * \"stale buffer\" (defaults to 10 minutes before the token is set to expire).\n * If the token is also expired, all incoming requests will be held until a fresh token\n * is retrieved.\n *\n * @param {Config} config The SDK configuration options\n * @param {TokenManager} tokenManager The TokenManager\n * @constructor\n */ function AnonymousSession(config, tokenManager) {\n    this._config = config;\n    this._tokenManager = tokenManager;\n    // The TokenInfo object for this anonymous session\n    this._tokenInfo = null;\n    this._refreshPromise = null;\n}\n/**\n * Initiate a refresh of the anonymous access tokens. New tokens should be passed to the\n * caller, and then cached for later use.\n *\n * @param {?TokenRequestOptions} [options] - Sets optional behavior for the token grant\n * @returns {Promise<string>} Promise resolving to the access token\n * @private\n */ AnonymousSession.prototype._refreshAnonymousAccessToken = function(options) {\n    // If tokens aren't already being refreshed, start the refresh\n    if (!this._refreshPromise) {\n        // Initiate a refresh\n        this._refreshPromise = this._tokenManager.getTokensClientCredentialsGrant(options).then((tokenInfo)=>{\n            // Set new token info and propagate the new access token\n            this._tokenInfo = tokenInfo;\n            return tokenInfo.accessToken;\n        }).finally(()=>{\n            // Refresh complete, clear promise\n            this._refreshPromise = null;\n        });\n    }\n    return this._refreshPromise;\n};\n/**\n * Produces a valid, anonymous access token.\n * Performs a refresh before returning if the current token is expired. If the current\n * token is considered stale but still valid, return the current token but initiate a\n * new refresh in the background.\n *\n * @param {TokenRequestOptions} [options] - Sets optional behavior for the token grant\n * @returns {Promise<string>} Promise resolving to the access token\n */ AnonymousSession.prototype.getAccessToken = function(options) {\n    // If the current token is no longer fresh, get a new token. All incoming\n    // requests will be held until a fresh token is retrieved.\n    var expirationBuffer = Math.max(this._config.expiredBufferMS, this._config.staleBufferMS);\n    if (!this._tokenInfo || !this._tokenManager.isAccessTokenValid(this._tokenInfo, expirationBuffer)) {\n        return this._refreshAnonymousAccessToken(options);\n    }\n    // Your token is not currently stale! Return the current access token.\n    return Promise.resolve(this._tokenInfo.accessToken);\n};\n/**\n * Revokes the anonymous token used by this anonymous session, and clears the saved tokenInfo.\n *\n * @param {TokenRequestOptions} options] - Sets optional behavior for the token grant\n * @returns {Promise} Promise resolving if the revoke succeeds\n */ AnonymousSession.prototype.revokeTokens = function(options) {\n    // The current anonymous token is revoked (but a new one will be created automatically as needed).\n    var tokenInfo = this._tokenInfo || {}, accessToken = tokenInfo.accessToken;\n    this._tokenInfo = null;\n    return this._tokenManager.revokeTokens(accessToken, options);\n};\n/**\n * Return the anonymous session token, since there is no need to downscope a\n * token that does not have any associated user credentials.\n * @param {string|string[]} scopes The scope(s) requested for the new token\n * @param {string} [resource] The absolute URL of an API resource to scope the new token to\n * @param {TokenRequestOptions} [options] - Sets optional behavior for the token grant\n * @returns {Promise<TokenInfo>} Promise resolving to the new token info\n */ AnonymousSession.prototype.exchangeToken = function(scopes, resource, options) {\n    // We need to get the access token, in case it hasn't been generated yet\n    return this.getAccessToken(options)// Pass back the entire token info object, not just the acces token,\n    // to maintain parity with the other session classes\n    .then(()=>this._tokenInfo);\n};\n/**\n * @module box-node-sdk/lib/sessions/anonymous-session\n * @see {@Link AnonymousSession}\n */ module.exports = AnonymousSession;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/box-node-sdk/lib/sessions/anonymous-session.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/box-node-sdk/lib/sessions/app-auth-session.js":
/*!********************************************************************!*\
  !*** ./node_modules/box-node-sdk/lib/sessions/app-auth-session.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * @fileoverview App Auth Box API Session.\n */ \n// ------------------------------------------------------------------------------\n// Requirements\n// ------------------------------------------------------------------------------\nconst Promise = __webpack_require__(/*! bluebird */ \"(rsc)/./node_modules/bluebird/js/release/bluebird.js\");\nconst assert = __webpack_require__(/*! assert */ \"assert\");\nconst errors = __webpack_require__(/*! ../util/errors */ \"(rsc)/./node_modules/box-node-sdk/lib/util/errors.js\");\n// ------------------------------------------------------------------------------\n// Private\n// ------------------------------------------------------------------------------\n/**\n * Validate that an object is a valid TokenStore object\n *\n * @param {Object} obj the object to validate\n * @returns {boolean} returns true if the passed in object is a valid TokenStore object that\n * has all the expected properties. false otherwise.\n * @private\n */ function isObjectValidTokenStore(obj) {\n    return Boolean(obj && obj.read && obj.write && obj.clear);\n}\n// ------------------------------------------------------------------------------\n// Public\n// ------------------------------------------------------------------------------\n/**\n * App Auth Box API Session.\n *\n * The App Auth API Session holds an accessToken for an app user or enterprise,\n * which it returns to the client so that it may make calls on behalf of\n * these entities.\n *\n * These access tokens will be refreshed in the background if a request is made within the\n * \"stale buffer\" (defaults to 10 minutes before the token is set to expire).\n * If the token is also expired, all incoming requests will be held until a fresh token\n * is retrieved.\n *\n * @param {string} type The type of the entity to authenticate the app auth session as, \"user\" or \"enterprise\"\n * @param {string} id The Box ID of the entity to authenticate as\n * @param {Config} config The SDK configuration options\n * @param {TokenManager} tokenManager The TokenManager\n * @param {TokenStore} [tokenStore] The token store instance to use for caching token info\n * @constructor\n */ function AppAuthSession(type, id, config, tokenManager, tokenStore) {\n    this._type = type;\n    this._id = id;\n    this._config = config;\n    this._tokenManager = tokenManager;\n    // If tokenStore was provided, set the persistent data & current store operations\n    if (tokenStore) {\n        assert(isObjectValidTokenStore(tokenStore), \"Token store provided is improperly formatted. Methods required: read(), write(), clear().\");\n        this._tokenStore = Promise.promisifyAll(tokenStore);\n    }\n    // The TokenInfo object for this app auth session\n    this._tokenInfo = null;\n    // Indicates if tokens are currently being refreshed\n    this._refreshPromise = null;\n}\n/**\n * Initiate a refresh of the app auth access tokens. New tokens should be passed\n * to the caller, and then cached for later use.\n *\n * @param {TokenRequestOptions} [options] - Sets optional behavior for the token grant\n * @returns {Promise<string>} Promise resolving to the access token\n * @private\n */ AppAuthSession.prototype._refreshAppAuthAccessToken = function(options) {\n    // If tokens aren't already being refreshed, start the refresh\n    if (!this._refreshPromise) {\n        this._refreshPromise = this._tokenManager.getTokensJWTGrant(this._type, this._id, options).then((tokenInfo)=>{\n            // Set new token info and propagate the new access token\n            this._tokenInfo = tokenInfo;\n            if (this._tokenStore) {\n                return this._tokenStore.writeAsync(tokenInfo).then(()=>tokenInfo.accessToken);\n            }\n            return tokenInfo.accessToken;\n        }).finally(()=>{\n            // Refresh complete, clear promise\n            this._refreshPromise = null;\n        });\n    }\n    return this._refreshPromise;\n};\n/**\n * Produces a valid, app auth access token.\n * Performs a refresh before returning if the current token is expired. If the current\n * token is considered stale but still valid, return the current token but initiate a\n * new refresh in the background.\n *\n * @param {TokenRequestOptions} [options] - Sets optional behavior for the token grant\n * @returns {Promise<string>} Promise resolving to the access token\n */ AppAuthSession.prototype.getAccessToken = function(options) {\n    var expirationBuffer = Math.max(this._config.expiredBufferMS, this._config.staleBufferMS);\n    // If we're initializing the client and have a token store, try reading from it\n    if (!this._tokenInfo && this._tokenStore) {\n        return this._tokenStore.readAsync().then((tokenInfo)=>{\n            if (!this._tokenManager.isAccessTokenValid(tokenInfo, expirationBuffer)) {\n                // Token store contains expired tokens, refresh\n                return this._refreshAppAuthAccessToken(options);\n            }\n            this._tokenInfo = tokenInfo;\n            return tokenInfo.accessToken;\n        });\n    }\n    // If the current token is not fresh, get a new token. All incoming\n    // requests will be held until a fresh token is retrieved.\n    if (!this._tokenInfo || !this._tokenManager.isAccessTokenValid(this._tokenInfo, expirationBuffer)) {\n        return this._refreshAppAuthAccessToken(options);\n    }\n    // Your token is not currently stale! Return the current access token.\n    return Promise.resolve(this._tokenInfo.accessToken);\n};\n/**\n * Revokes the app auth token used by this session, and clears the saved tokenInfo.\n *\n * @param {TokenRequestOptions} [options]- Sets optional behavior for the token grant\n * @returns {Promise} Promise resolving if the revoke succeeds\n */ AppAuthSession.prototype.revokeTokens = function(options) {\n    // The current app auth token is revoked (but a new one will be created automatically as needed).\n    var tokenInfo = this._tokenInfo || {}, accessToken = tokenInfo.accessToken;\n    this._tokenInfo = null;\n    return this._tokenManager.revokeTokens(accessToken, options);\n};\n/**\n * Exchange the client access token for one with lower scope\n * @param {string|string[]} scopes The scope(s) requested for the new token\n * @param {string} [resource] The absolute URL of an API resource to scope the new token to\n * @param {Object} [options] - Optional parameters\n * @param {TokenRequestOptions} [options.tokenRequestOptions] - Sets optional behavior for the token grant\n * @param {ActorParams} [options.actor] - Optional actor parameters for creating annotator tokens\n * @returns {Promise<TokenInfo>} Promise resolving to the new token info\n */ AppAuthSession.prototype.exchangeToken = function(scopes, resource, options) {\n    return this.getAccessToken(options).then((accessToken)=>this._tokenManager.exchangeToken(accessToken, scopes, resource, options));\n};\n/**\n * Handle an an \"Expired Tokens\" Error. If our tokens are expired, we need to clear the token\n * store (if present) before continuing.\n *\n * @param {Errors~ExpiredTokensError} err An \"expired tokens\" error including information\n *  about the request/response.\n * @returns {Promise<Error>} Promise resolving to an error.  This will\n *  usually be the original response error, but could an error from trying to access the\n *  token store as well.\n */ AppAuthSession.prototype.handleExpiredTokensError = function(err) {\n    if (!this._tokenStore) {\n        return Promise.resolve(err);\n    }\n    // If a token store is available, clear the store and throw either error\n    // eslint-disable-next-line promise/no-promise-in-callback\n    return this._tokenStore.clearAsync().catch((e)=>errors.unwrapAndThrow(e)).then(()=>{\n        throw err;\n    });\n};\n/**\n * @module box-node-sdk/lib/sessions/app-auth-session\n * @see {@Link AppAuthSession}\n */ module.exports = AppAuthSession;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/box-node-sdk/lib/sessions/app-auth-session.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/box-node-sdk/lib/sessions/basic-session.js":
/*!*****************************************************************!*\
  !*** ./node_modules/box-node-sdk/lib/sessions/basic-session.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * @fileoverview A Basic Box API Session.\n */ \n// ------------------------------------------------------------------------------\n// Requirements\n// ------------------------------------------------------------------------------\nconst Promise = __webpack_require__(/*! bluebird */ \"(rsc)/./node_modules/bluebird/js/release/bluebird.js\");\n// ------------------------------------------------------------------------------\n// Public\n// ------------------------------------------------------------------------------\n/**\n * A BasicSession holds only a single accessToken. It has no idea how to authenticate,\n * refresh, or persist its token information. When that token expires, the session\n * and any clients using it will become useless.\n *\n * Basic API Session is the most simple API Session to use, which makes it a good choice\n * for simple applications, developers who are just getting started, and applications\n * that wish to manage tokens themselves.\n *\n * @param {string} accessToken The existing access token for a user\n * @param {TokenManager} tokenManager The token manager\n * @constructor\n */ function BasicSession(accessToken, tokenManager) {\n    this._accessToken = accessToken;\n    this._tokenManager = tokenManager;\n}\n/**\n * Returns the clients access token. BasicSession never returns an error, since it doesn't\n * know the status of its own token.\n *\n * @returns {Promise<string>} Promise resolving to the access token\n */ BasicSession.prototype.getAccessToken = function() {\n    return Promise.resolve(this._accessToken);\n};\n/**\n * Revokes the session's access token.\n *\n * @param {TokenRequestOptions} [options] - Sets optional behavior for the token grant\n * @returns {Promise} Promise resolving if the revoke succeeds\n */ BasicSession.prototype.revokeTokens = function(options) {\n    return this._tokenManager.revokeTokens(this._accessToken, options);\n};\n/**\n * Exchange the client access token for one with lower scope\n * @param {string|string[]} scopes The scope(s) requested for the new token\n * @param {string} [resource] The absolute URL of an API resource to scope the new token to\n * @param {Object} [options] - Optional parameters\n * @param {TokenRequestOptions} [options.tokenRequestOptions] - Sets optional behavior for the token grant\n * @param {ActorParams} [options.actor] - Optional actor parameters for creating annotator tokens\n * @returns {Promise<TokenInfo>} Promise resolving to the new token info\n */ BasicSession.prototype.exchangeToken = function(scopes, resource, options) {\n    return this._tokenManager.exchangeToken(this._accessToken, scopes, resource, options);\n};\n/**\n * @module box-node-sdk/lib/sessions/basic-session\n * @see {@Link BasicSession}\n */ module.exports = BasicSession;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYm94LW5vZGUtc2RrL2xpYi9zZXNzaW9ucy9iYXNpYy1zZXNzaW9uLmpzIiwibWFwcGluZ3MiOiJBQUFBOztDQUVDLEdBRUQ7QUFHQSxpRkFBaUY7QUFDakYsZUFBZTtBQUNmLGlGQUFpRjtBQUVqRixNQUFNQSxVQUFVQyxtQkFBT0EsQ0FBQztBQUV4QixpRkFBaUY7QUFDakYsU0FBUztBQUNULGlGQUFpRjtBQUVqRjs7Ozs7Ozs7Ozs7O0NBWUMsR0FDRCxTQUFTQyxhQUFhQyxXQUFXLEVBQUVDLFlBQVk7SUFDOUMsSUFBSSxDQUFDQyxZQUFZLEdBQUdGO0lBQ3BCLElBQUksQ0FBQ0csYUFBYSxHQUFHRjtBQUN0QjtBQUVBOzs7OztDQUtDLEdBQ0RGLGFBQWFLLFNBQVMsQ0FBQ0MsY0FBYyxHQUFHO0lBQ3ZDLE9BQU9SLFFBQVFTLE9BQU8sQ0FBQyxJQUFJLENBQUNKLFlBQVk7QUFDekM7QUFFQTs7Ozs7Q0FLQyxHQUNESCxhQUFhSyxTQUFTLENBQUNHLFlBQVksR0FBRyxTQUFTQyxPQUFPO0lBQ3JELE9BQU8sSUFBSSxDQUFDTCxhQUFhLENBQUNJLFlBQVksQ0FBQyxJQUFJLENBQUNMLFlBQVksRUFBRU07QUFDM0Q7QUFFQTs7Ozs7Ozs7Q0FRQyxHQUNEVCxhQUFhSyxTQUFTLENBQUNLLGFBQWEsR0FBRyxTQUFTQyxNQUFNLEVBQUVDLFFBQVEsRUFBRUgsT0FBTztJQUN4RSxPQUFPLElBQUksQ0FBQ0wsYUFBYSxDQUFDTSxhQUFhLENBQUMsSUFBSSxDQUFDUCxZQUFZLEVBQUVRLFFBQVFDLFVBQVVIO0FBQzlFO0FBRUE7OztDQUdDLEdBQ0RJLE9BQU9DLE9BQU8sR0FBR2QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaXZpbC1lbmdpbmVlcmluZy1wbGF0Zm9ybS8uL25vZGVfbW9kdWxlcy9ib3gtbm9kZS1zZGsvbGliL3Nlc3Npb25zL2Jhc2ljLXNlc3Npb24uanM/MzIwZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgQSBCYXNpYyBCb3ggQVBJIFNlc3Npb24uXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUmVxdWlyZW1lbnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY29uc3QgUHJvbWlzZSA9IHJlcXVpcmUoJ2JsdWViaXJkJyk7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUHVibGljXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLyoqXG4gKiBBIEJhc2ljU2Vzc2lvbiBob2xkcyBvbmx5IGEgc2luZ2xlIGFjY2Vzc1Rva2VuLiBJdCBoYXMgbm8gaWRlYSBob3cgdG8gYXV0aGVudGljYXRlLFxuICogcmVmcmVzaCwgb3IgcGVyc2lzdCBpdHMgdG9rZW4gaW5mb3JtYXRpb24uIFdoZW4gdGhhdCB0b2tlbiBleHBpcmVzLCB0aGUgc2Vzc2lvblxuICogYW5kIGFueSBjbGllbnRzIHVzaW5nIGl0IHdpbGwgYmVjb21lIHVzZWxlc3MuXG4gKlxuICogQmFzaWMgQVBJIFNlc3Npb24gaXMgdGhlIG1vc3Qgc2ltcGxlIEFQSSBTZXNzaW9uIHRvIHVzZSwgd2hpY2ggbWFrZXMgaXQgYSBnb29kIGNob2ljZVxuICogZm9yIHNpbXBsZSBhcHBsaWNhdGlvbnMsIGRldmVsb3BlcnMgd2hvIGFyZSBqdXN0IGdldHRpbmcgc3RhcnRlZCwgYW5kIGFwcGxpY2F0aW9uc1xuICogdGhhdCB3aXNoIHRvIG1hbmFnZSB0b2tlbnMgdGhlbXNlbHZlcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYWNjZXNzVG9rZW4gVGhlIGV4aXN0aW5nIGFjY2VzcyB0b2tlbiBmb3IgYSB1c2VyXG4gKiBAcGFyYW0ge1Rva2VuTWFuYWdlcn0gdG9rZW5NYW5hZ2VyIFRoZSB0b2tlbiBtYW5hZ2VyXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gQmFzaWNTZXNzaW9uKGFjY2Vzc1Rva2VuLCB0b2tlbk1hbmFnZXIpIHtcblx0dGhpcy5fYWNjZXNzVG9rZW4gPSBhY2Nlc3NUb2tlbjtcblx0dGhpcy5fdG9rZW5NYW5hZ2VyID0gdG9rZW5NYW5hZ2VyO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGNsaWVudHMgYWNjZXNzIHRva2VuLiBCYXNpY1Nlc3Npb24gbmV2ZXIgcmV0dXJucyBhbiBlcnJvciwgc2luY2UgaXQgZG9lc24ndFxuICoga25vdyB0aGUgc3RhdHVzIG9mIGl0cyBvd24gdG9rZW4uXG4gKlxuICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn0gUHJvbWlzZSByZXNvbHZpbmcgdG8gdGhlIGFjY2VzcyB0b2tlblxuICovXG5CYXNpY1Nlc3Npb24ucHJvdG90eXBlLmdldEFjY2Vzc1Rva2VuID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYWNjZXNzVG9rZW4pO1xufTtcblxuLyoqXG4gKiBSZXZva2VzIHRoZSBzZXNzaW9uJ3MgYWNjZXNzIHRva2VuLlxuICpcbiAqIEBwYXJhbSB7VG9rZW5SZXF1ZXN0T3B0aW9uc30gW29wdGlvbnNdIC0gU2V0cyBvcHRpb25hbCBiZWhhdmlvciBmb3IgdGhlIHRva2VuIGdyYW50XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSByZXNvbHZpbmcgaWYgdGhlIHJldm9rZSBzdWNjZWVkc1xuICovXG5CYXNpY1Nlc3Npb24ucHJvdG90eXBlLnJldm9rZVRva2VucyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcblx0cmV0dXJuIHRoaXMuX3Rva2VuTWFuYWdlci5yZXZva2VUb2tlbnModGhpcy5fYWNjZXNzVG9rZW4sIG9wdGlvbnMpO1xufTtcblxuLyoqXG4gKiBFeGNoYW5nZSB0aGUgY2xpZW50IGFjY2VzcyB0b2tlbiBmb3Igb25lIHdpdGggbG93ZXIgc2NvcGVcbiAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBzY29wZXMgVGhlIHNjb3BlKHMpIHJlcXVlc3RlZCBmb3IgdGhlIG5ldyB0b2tlblxuICogQHBhcmFtIHtzdHJpbmd9IFtyZXNvdXJjZV0gVGhlIGFic29sdXRlIFVSTCBvZiBhbiBBUEkgcmVzb3VyY2UgdG8gc2NvcGUgdGhlIG5ldyB0b2tlbiB0b1xuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIE9wdGlvbmFsIHBhcmFtZXRlcnNcbiAqIEBwYXJhbSB7VG9rZW5SZXF1ZXN0T3B0aW9uc30gW29wdGlvbnMudG9rZW5SZXF1ZXN0T3B0aW9uc10gLSBTZXRzIG9wdGlvbmFsIGJlaGF2aW9yIGZvciB0aGUgdG9rZW4gZ3JhbnRcbiAqIEBwYXJhbSB7QWN0b3JQYXJhbXN9IFtvcHRpb25zLmFjdG9yXSAtIE9wdGlvbmFsIGFjdG9yIHBhcmFtZXRlcnMgZm9yIGNyZWF0aW5nIGFubm90YXRvciB0b2tlbnNcbiAqIEByZXR1cm5zIHtQcm9taXNlPFRva2VuSW5mbz59IFByb21pc2UgcmVzb2x2aW5nIHRvIHRoZSBuZXcgdG9rZW4gaW5mb1xuICovXG5CYXNpY1Nlc3Npb24ucHJvdG90eXBlLmV4Y2hhbmdlVG9rZW4gPSBmdW5jdGlvbihzY29wZXMsIHJlc291cmNlLCBvcHRpb25zKSB7XG5cdHJldHVybiB0aGlzLl90b2tlbk1hbmFnZXIuZXhjaGFuZ2VUb2tlbih0aGlzLl9hY2Nlc3NUb2tlbiwgc2NvcGVzLCByZXNvdXJjZSwgb3B0aW9ucyk7XG59O1xuXG4vKipcbiAqIEBtb2R1bGUgYm94LW5vZGUtc2RrL2xpYi9zZXNzaW9ucy9iYXNpYy1zZXNzaW9uXG4gKiBAc2VlIHtATGluayBCYXNpY1Nlc3Npb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gQmFzaWNTZXNzaW9uO1xuIl0sIm5hbWVzIjpbIlByb21pc2UiLCJyZXF1aXJlIiwiQmFzaWNTZXNzaW9uIiwiYWNjZXNzVG9rZW4iLCJ0b2tlbk1hbmFnZXIiLCJfYWNjZXNzVG9rZW4iLCJfdG9rZW5NYW5hZ2VyIiwicHJvdG90eXBlIiwiZ2V0QWNjZXNzVG9rZW4iLCJyZXNvbHZlIiwicmV2b2tlVG9rZW5zIiwib3B0aW9ucyIsImV4Y2hhbmdlVG9rZW4iLCJzY29wZXMiLCJyZXNvdXJjZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/box-node-sdk/lib/sessions/basic-session.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/box-node-sdk/lib/sessions/persistent-session.js":
/*!**********************************************************************!*\
  !*** ./node_modules/box-node-sdk/lib/sessions/persistent-session.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * @fileoverview A Persistent Box API Session.\n */ \n// ------------------------------------------------------------------------------\n// Requirements\n// ------------------------------------------------------------------------------\nconst assert = __webpack_require__(/*! assert */ \"assert\"), Promise = __webpack_require__(/*! bluebird */ \"(rsc)/./node_modules/bluebird/js/release/bluebird.js\"), errors = __webpack_require__(/*! ../util/errors */ \"(rsc)/./node_modules/box-node-sdk/lib/util/errors.js\"), httpStatusCodes = __webpack_require__(/*! http-status */ \"(rsc)/./node_modules/http-status/lib/index.js\");\n// ------------------------------------------------------------------------------\n// Private\n// ------------------------------------------------------------------------------\n/**\n * Validate that an object is a valid TokenInfo object\n *\n * @param {Object} obj The object to validate\n * @returns {boolean} True if the passed in object is a valid TokenInfo object that\n *  has all the expected properties, false otherwise\n * @private\n */ function isObjectValidTokenInfo(obj) {\n    return Boolean(obj && obj.accessToken && obj.refreshToken && obj.accessTokenTTLMS && obj.acquiredAtMS);\n}\n/**\n * Validate that an object is a valid TokenStore object\n *\n * @param {Object} obj the object to validate\n * @returns {boolean} returns true if the passed in object is a valid TokenStore object that\n * has all the expected properties. false otherwise.\n * @private\n */ function isObjectValidTokenStore(obj) {\n    return Boolean(obj && obj.read && obj.write && obj.clear);\n}\n// ------------------------------------------------------------------------------\n// Public\n// ------------------------------------------------------------------------------\n/**\n * A Persistent API Session has the ability to refresh its access token once it becomes expired.\n * It takes in a full tokenInfo object for authentication. It can detect when its tokens have\n * expired and will request new, valid tokens if needed. It can also interface with a token\n * data-store if one is provided.\n *\n * Persistent API Session a good choice for long-running applications or web servers that\n * must remember users across sessions.\n *\n * @param {TokenInfo} tokenInfo A valid TokenInfo object. Will throw if improperly formatted.\n * @param {TokenStore} [tokenStore] A valid TokenStore object. Will throw if improperly formatted.\n * @param {Config} config The SDK configuration options\n * @param {TokenManager} tokenManager The token manager\n * @constructor\n */ function PersistentSession(tokenInfo, tokenStore, config, tokenManager) {\n    this._config = config;\n    this._tokenManager = tokenManager;\n    // Keeps track of if tokens are currently being refreshed\n    this._refreshPromise = null;\n    // Set valid PersistentSession credentials. Throw if expected credentials are invalid or not given.\n    assert(isObjectValidTokenInfo(tokenInfo), \"tokenInfo is improperly formatted. Properties required: accessToken, refreshToken, accessTokenTTLMS and acquiredAtMS.\");\n    this._setTokenInfo(tokenInfo);\n    // If tokenStore was provided, set the persistent data & current store operations\n    if (tokenStore) {\n        assert(isObjectValidTokenStore(tokenStore), \"Token store provided but is improperly formatted. Methods required: read(), write(), clear().\");\n        this._tokenStore = Promise.promisifyAll(tokenStore);\n    }\n}\n/**\n * Sets all relevant token info for this client.\n *\n * @param {TokenInfo} tokenInfo A valid TokenInfo object.\n * @returns {void}\n * @private\n */ PersistentSession.prototype._setTokenInfo = function(tokenInfo) {\n    this._tokenInfo = {\n        accessToken: tokenInfo.accessToken,\n        refreshToken: tokenInfo.refreshToken,\n        accessTokenTTLMS: tokenInfo.accessTokenTTLMS,\n        acquiredAtMS: tokenInfo.acquiredAtMS\n    };\n};\n/**\n * Attempts to refresh tokens for the client.\n * Will use the Box refresh token grant to complete the refresh. On refresh failure, we'll\n * check the token store for more recently updated tokens and load them if found. Otherwise\n * an error will be propagated.\n *\n * @param {TokenRequestOptions} [options] - Sets optional behavior for the token grant\n * @returns {Promise<string>} Promise resolving to the access token\n * @private\n */ PersistentSession.prototype._refreshTokens = function(options) {\n    // If not already refreshing, kick off a token refresh request and set a lock so that additional\n    // client requests don't try as well\n    if (!this._refreshPromise) {\n        this._refreshPromise = this._tokenManager.getTokensRefreshGrant(this._tokenInfo.refreshToken, options).catch((err)=>{\n            // If we got an error response from Box API, but it was 400 invalid_grant, it indicates we may have just\n            // made the request with an invalidated refresh token. Since only a max of 2 refresh tokens can be valid\n            // at any point in time, and a horizontally scaled app could have multiple Node instances running in parallel,\n            // it is possible to hit cases where too many servers all refresh a user's tokens at once\n            // and cause this server's token to become invalidated. However, the user should still be alive, but\n            // we'll need to check the central data store for the latest valid tokens that some other server in the app\n            // cluster would have received. So, instead pull tokens from the central store and attempt to use them.\n            if (err.statusCode === httpStatusCodes.BAD_REQUEST && this._tokenStore) {\n                var invalidGrantError = err;\n                // Check the tokenStore to see if tokens have been updated recently. If they have, then another\n                // instance of the session may have already refreshed the user tokens, which would explain why\n                // we couldn't refresh.\n                return this._tokenStore.readAsync().catch((e)=>errors.unwrapAndThrow(e)).then((storeTokenInfo)=>{\n                    // if the tokens we got from the central store are the same as the tokens we made the failed request with\n                    // already, then we can be sure that no other servers have valid tokens for this server either.\n                    // Thus, this user truly has an expired refresh token. So, propagate an \"Expired Tokens\" error.\n                    if (!storeTokenInfo || storeTokenInfo.refreshToken === this._tokenInfo.refreshToken) {\n                        throw errors.buildAuthError(invalidGrantError.response);\n                    }\n                    // Propagate the fresh tokens that we found in the session\n                    return storeTokenInfo;\n                });\n            }\n            // Box API returned a permanent error that is not retryable and we can't recover.\n            // We have no usable tokens for the user and no way to refresh them - propagate a permanent error.\n            throw err;\n        }).then((tokenInfo)=>{\n            // Success! We got back a TokenInfo object from the API.\n            // If we have a token store, we'll write it there now before finishing up the request.\n            if (this._tokenStore) {\n                return this._tokenStore.writeAsync(tokenInfo).catch((e)=>errors.unwrapAndThrow(e)).then(()=>tokenInfo);\n            }\n            // If no token store, Set and propagate the access token immediately\n            return tokenInfo;\n        }).then((tokenInfo)=>{\n            // Set and propagate the new access token\n            this._setTokenInfo(tokenInfo);\n            return tokenInfo.accessToken;\n        }).catch((err)=>this.handleExpiredTokensError(err)).finally(()=>{\n            // Refresh complete, clear promise\n            this._refreshPromise = null;\n        });\n    }\n    return this._refreshPromise;\n};\n// ------------------------------------------------------------------------------\n// Public Instance\n// ------------------------------------------------------------------------------\n/**\n * Returns the clients access token.\n *\n * If tokens don't yet exist, first attempt to retrieve them.\n * If tokens are expired, first attempt to refresh them.\n *\n * @param {TokenRequestOptions} [options] - Sets optional behavior for the token grant\n * @returns {Promise<string>} Promise resolving to the access token\n */ PersistentSession.prototype.getAccessToken = function(options) {\n    // If our tokens are not fresh, we need to refresh them\n    var expirationBuffer = Math.max(this._config.expiredBufferMS, this._config.staleBufferMS);\n    if (!this._tokenManager.isAccessTokenValid(this._tokenInfo, expirationBuffer)) {\n        return this._refreshTokens(options);\n    }\n    // Current access token is still valid. Return it.\n    return Promise.resolve(this._tokenInfo.accessToken);\n};\n/**\n * Revokes the session's tokens. If the session has a refresh token we'll use that,\n * since it is more likely to be up to date. Otherwise, we'll revoke the accessToken.\n * Revoking either one will disable the other as well.\n *\n * @param {TokenRequestOptions} [options] - Sets optional behavior for the token grant\n * @returns {Promise} Promise that resolves when the revoke succeeds\n */ PersistentSession.prototype.revokeTokens = function(options) {\n    return this._tokenManager.revokeTokens(this._tokenInfo.refreshToken, options);\n};\n/**\n * Exchange the client access token for one with lower scope\n * @param {string|string[]} scopes The scope(s) requested for the new token\n * @param {string} [resource] The absolute URL of an API resource to scope the new token to\n * @param {Object} [options] - Optional parameters\n * @param {TokenRequestOptions} [options.tokenRequestOptions] - Sets optional behavior for the token grant\n * @returns {void}\n */ PersistentSession.prototype.exchangeToken = function(scopes, resource, options) {\n    return this.getAccessToken(options).then((accessToken)=>this._tokenManager.exchangeToken(accessToken, scopes, resource, options));\n};\n/**\n * Handle an an \"Expired Tokens\" Error. If our tokens are expired, we need to clear the token\n * store (if present) before continuing.\n *\n * @param {Errors~ExpiredTokensError} err An \"expired tokens\" error including information\n *  about the request/response.\n * @returns {Promise<Error>} Promise resolving to an error.  This will\n *  usually be the original response error, but could an error from trying to access the\n *  token store as well.\n */ PersistentSession.prototype.handleExpiredTokensError = function(err) {\n    if (!this._tokenStore) {\n        return Promise.resolve(err);\n    }\n    // If a token store is available, clear the store and throw either error\n    // eslint-disable-next-line promise/no-promise-in-callback\n    return this._tokenStore.clearAsync().catch((e)=>errors.unwrapAndThrow(e)).then(()=>{\n        throw err;\n    });\n};\n/**\n * @module box-node-sdk/lib/sessions/persistent-session\n * @see {@Link PersistentSession}\n */ module.exports = PersistentSession;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/box-node-sdk/lib/sessions/persistent-session.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/box-node-sdk/lib/token-manager.js":
/*!********************************************************!*\
  !*** ./node_modules/box-node-sdk/lib/token-manager.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * @fileoverview Token Manager\n */ \n// ------------------------------------------------------------------------------\n// Typedefs and Callbacks\n// ------------------------------------------------------------------------------\n/**\n * Token request options. Set by the consumer to add/modify the params sent to the\n * request.\n *\n * @typedef {Object} TokenRequestOptions\n * @property {string} [ip] The IP Address of the requesting user. This IP will be reflected in authentication\n *                         notification emails sent to your users on login. Defaults to the IP address of the\n *                         server requesting the tokens.\n */ /**\n * Parameters for creating a token using a Box shared link via token exchange\n * @typedef {Object} SharedLinkParams\n * @property {string} url Shared link URL\n */ /**\n * Parameters for creating an actor token via token exchange\n * @typedef {Object} ActorParams\n * @property {string} id The external identifier for the actor\n * @property {string} name The display name of the actor\n */ /**\n * An object representing all token information for a single Box user.\n *\n * @typedef {Object} TokenInfo\n * @property {string} accessToken    The API access token. Used to authenticate API requests to a certain\n *                                   user and/or application.\n * @property {int} acquiredAtMS      The time that the tokens were acquired.\n * @property {int} accessTokenTTLMS  The TTL of the access token. Can be used with acquiredAtMS to\n *                                   calculate if the current access token has expired.\n * @property {string} [refreshToken] The API refresh token is a Longer-lasting than an access token, and can\n *                                   be used to gain a new access token if the current access token becomes\n *                                   expired. Grants like the 'client credentials' grant don't return a\n *                                   refresh token, and have no refresh capabilities.\n */ /**\n  *\tDetermines whether a JWT auth error can be retried\n  * @param {Error} err The JWT auth error\n  * @returns {boolean} True if the error is retryable\n  */ function isJWTAuthErrorRetryable(err) {\n    if (err.authExpired && err.response.headers.date && (err.response.body.error_description.indexOf(\"exp\") > -1 || err.response.body.error_description.indexOf(\"jti\") > -1)) {\n        return true;\n    } else if (err.statusCode === 429 || err.statusCode >= 500) {\n        return true;\n    }\n    return false;\n}\n// ------------------------------------------------------------------------------\n// Requirements\n// ------------------------------------------------------------------------------\nvar errors = __webpack_require__(/*! ./util/errors */ \"(rsc)/./node_modules/box-node-sdk/lib/util/errors.js\"), jwt = __webpack_require__(/*! jsonwebtoken */ \"(rsc)/./node_modules/jsonwebtoken/index.js\"), uuid = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/index.js\"), httpStatusCodes = __webpack_require__(/*! http-status */ \"(rsc)/./node_modules/http-status/lib/index.js\"), Promise = __webpack_require__(/*! bluebird */ \"(rsc)/./node_modules/bluebird/js/release/bluebird.js\"), getRetryTimeout = __webpack_require__(/*! ./util/exponential-backoff */ \"(rsc)/./node_modules/box-node-sdk/lib/util/exponential-backoff.js\");\n// ------------------------------------------------------------------------------\n// Constants\n// ------------------------------------------------------------------------------\n/**\n * Collection of grant types that can be used to acquire tokens via OAuth2\n *\n * @readonly\n * @enum {string}\n */ var grantTypes = {\n    AUTHORIZATION_CODE: \"authorization_code\",\n    REFRESH_TOKEN: \"refresh_token\",\n    CLIENT_CREDENTIALS: \"client_credentials\",\n    JWT: \"urn:ietf:params:oauth:grant-type:jwt-bearer\",\n    TOKEN_EXCHANGE: \"urn:ietf:params:oauth:grant-type:token-exchange\"\n};\n/**\n * Collection of paths to interact with Box OAuth2 tokening system\n *\n * @readonly\n * @enum {string}\n */ var tokenPaths = {\n    ROOT: \"/oauth2\",\n    GET: \"/token\",\n    REVOKE: \"/revoke\"\n};\n// Timer used to track elapsed time starting with executing an async request and ending with emitting the response.\nvar asyncRequestTimer;\n// The XFF header label - Used to give the API better information for uploads, rate-limiting, etc.\nconst HEADER_XFF = \"X-Forwarded-For\";\nconst ACCESS_TOKEN_TYPE = \"urn:ietf:params:oauth:token-type:access_token\";\nconst ACTOR_TOKEN_TYPE = \"urn:ietf:params:oauth:token-type:id_token\";\nconst BOX_JWT_AUDIENCE = \"https://api.box.com/oauth2/token\";\n// ------------------------------------------------------------------------------\n// Private\n// ------------------------------------------------------------------------------\n/**\n * Parse the response body to create a new TokenInfo object.\n *\n * @param {Object} grantResponseBody - (Request lib) response body containing granted token info from API\n * @returns {TokenInfo} A TokenInfo object.\n * @private\n */ function getTokensFromGrantResponse(grantResponseBody) {\n    return {\n        // Set the access token & refresh token (if passed)\n        accessToken: grantResponseBody.access_token,\n        refreshToken: grantResponseBody.refresh_token,\n        // Box API sends back expires_in in seconds, we convert to ms for consistency of keeping all time in ms\n        accessTokenTTLMS: parseInt(grantResponseBody.expires_in, 10) * 1000,\n        acquiredAtMS: Date.now()\n    };\n}\n/**\n * Determines if a given string could represent an authorization code or token.\n *\n * @param {string} codeOrToken The code or token to check.\n * @returns {boolean} True if codeOrToken is valid, false if not.\n * @private\n */ function isValidCodeOrToken(codeOrToken) {\n    return typeof codeOrToken === \"string\" && codeOrToken.length > 0;\n}\n/**\n * Determines if a token grant response is valid\n *\n * @param {string} grantType the type of token grant\n * @param {Object} responseBody the body of the response to check\n * @returns {boolean} True if response body has expected fields, false if not.\n * @private\n */ function isValidTokenResponse(grantType, responseBody) {\n    if (!isValidCodeOrToken(responseBody.access_token)) {\n        return false;\n    }\n    if (typeof responseBody.expires_in !== \"number\") {\n        return false;\n    }\n    // Check the refresh_token for certain types of grants\n    if (grantType === \"authorization_code\" || grantType === \"refresh_token\") {\n        if (!isValidCodeOrToken(responseBody.refresh_token)) {\n            return false;\n        }\n    }\n    return true;\n}\n// ------------------------------------------------------------------------------\n// Public\n// ------------------------------------------------------------------------------\n/**\n * Manager for API access abd refresh tokens\n *\n * @param {Config} config The config object\n * @param {APIRequestManager} requestManager The API Request Manager\n * @constructor\n */ function TokenManager(config, requestManager) {\n    this.config = config;\n    this.oauthBaseURL = config.apiRootURL + tokenPaths.ROOT;\n    this.requestManager = requestManager;\n}\nTokenManager.prototype = {\n    /**\n\t * Given a TokenInfo object, returns whether its access token is expired. An access token is considered\n\t * expired once its TTL surpasses the current time outside of the given buffer. This is a public method so\n\t * that other modules may check the validity of their tokens.\n\t *\n\t * @param {TokenInfo} tokenInfo the token info to be written\n\t * @param {int} [bufferMS] An optional buffer we'd like to test against. The greater this buffer, the more aggressively\n\t * we'll call a token invalid.\n\t * @returns {boolean} True if token is valid outside of buffer, otherwise false\n\t */ isAccessTokenValid (tokenInfo, bufferMS) {\n        if (typeof tokenInfo.acquiredAtMS === \"undefined\" || typeof tokenInfo.accessTokenTTLMS === \"undefined\") {\n            return false;\n        }\n        bufferMS = bufferMS || 0;\n        var expireTime = tokenInfo.acquiredAtMS + tokenInfo.accessTokenTTLMS - bufferMS;\n        return expireTime > Date.now();\n    },\n    /**\n\t * Acquires OAuth2 tokens using a grant type (authorization_code, password, refresh_token)\n\t *\n\t * @param {Object} formParams - should contain all params expected by Box OAuth2 token endpoint\n\t * @param {TokenRequestOptions} [options] - Sets optional behavior for the token grant, null for default behavior\n\t * @returns {Promise<TokenInfo>} Promise resolving to the token info\n\t * @private\n\t */ getTokens (formParams, options) {\n        var params = {\n            method: \"POST\",\n            url: this.oauthBaseURL + tokenPaths.GET,\n            headers: {},\n            form: formParams\n        };\n        options = options || {};\n        // add in app-specific id and secret to auth with Box\n        params.form.client_id = this.config.clientID;\n        params.form.client_secret = this.config.clientSecret;\n        if (options.ip) {\n            params.headers[HEADER_XFF] = options.ip;\n        }\n        return this.requestManager.makeRequest(params).then((response)=>{\n            // Response Error: The API is telling us that we attempted an invalid token grant. This\n            // means that our refresh token or auth code has exipred, so propagate an \"Expired Tokens\"\n            // error.\n            if (response.body && response.body.error && response.body.error === \"invalid_grant\") {\n                var errDescription = response.body.error_description;\n                var message = errDescription ? `Auth Error: ${errDescription}` : undefined;\n                throw errors.buildAuthError(response, message);\n            }\n            // Unexpected Response: If the token request couldn't get a valid response, then we're\n            // out of options. Build an \"Unexpected Response\" error and propagate it out for the\n            // consumer to handle.\n            if (response.statusCode !== httpStatusCodes.OK || response.body instanceof Buffer) {\n                throw errors.buildUnexpectedResponseError(response);\n            }\n            // Check to see if token response is valid in case the API returns us a 200 with a malformed token\n            if (!isValidTokenResponse(formParams.grant_type, response.body)) {\n                throw errors.buildResponseError(response, \"Token format from response invalid\");\n            }\n            // Got valid token response. Parse out the TokenInfo and propagate it back.\n            return getTokensFromGrantResponse(response.body);\n        });\n    },\n    /**\n\t * Acquires token info using an authorization code\n\t *\n\t * @param {string} authorizationCode - authorization code issued by Box\n\t * @param {TokenRequestOptions} [options] - Sets optional behavior for the token grant\n\t * @returns {Promise<TokenInfo>} Promise resolving to the token info\n\t */ getTokensAuthorizationCodeGrant (authorizationCode, options) {\n        if (!isValidCodeOrToken(authorizationCode)) {\n            return Promise.reject(new Error(\"Invalid authorization code.\"));\n        }\n        var params = {\n            grant_type: grantTypes.AUTHORIZATION_CODE,\n            code: authorizationCode\n        };\n        return this.getTokens(params, options);\n    },\n    /**\n\t * Acquires token info using the client credentials grant.\n\t *\n\t * @param {TokenRequestOptions} [options] - Sets optional behavior for the token grant\n\t * @returns {Promise<TokenInfo>} Promise resolving to the token info\n\t */ getTokensClientCredentialsGrant (options) {\n        var params = {\n            grant_type: grantTypes.CLIENT_CREDENTIALS\n        };\n        return this.getTokens(params, options);\n    },\n    /**\n\t * Refreshes the access and refresh tokens for a given refresh token.\n\t *\n\t * @param {string} refreshToken - A valid OAuth refresh token\n\t * @param {TokenRequestOptions} [options] - Sets optional behavior for the token grant\n\t * @returns {Promise<TokenInfo>} Promise resolving to the token info\n\t */ getTokensRefreshGrant (refreshToken, options) {\n        if (!isValidCodeOrToken(refreshToken)) {\n            return Promise.reject(new Error(\"Invalid refresh token.\"));\n        }\n        var params = {\n            grant_type: grantTypes.REFRESH_TOKEN,\n            refresh_token: refreshToken\n        };\n        return this.getTokens(params, options);\n    },\n    /**\n\t * Gets tokens for enterprise administration of app users\n\t * @param {string} type The type of token to create, \"user\" or \"enterprise\"\n\t * @param {string} id The ID of the enterprise to generate a token for\n\t * @param {TokenRequestOptions} [options] - Sets optional behavior for the token grant\n\t * @returns {Promise<TokenInfo>} Promise resolving to the token info\n\t */ getTokensJWTGrant (type, id, options) {\n        if (!this.config.appAuth.keyID) {\n            return Promise.reject(new Error(\"Must provide app auth configuration to use JWT Grant\"));\n        }\n        var claims = {\n            exp: Math.floor(Date.now() / 1000) + this.config.appAuth.expirationTime,\n            box_sub_type: type\n        };\n        var jwtOptions = {\n            algorithm: this.config.appAuth.algorithm,\n            audience: BOX_JWT_AUDIENCE,\n            subject: id,\n            issuer: this.config.clientID,\n            jwtid: uuid.v4(),\n            noTimestamp: !this.config.appAuth.verifyTimestamp,\n            keyid: this.config.appAuth.keyID\n        };\n        var keyParams = {\n            key: this.config.appAuth.privateKey,\n            passphrase: this.config.appAuth.passphrase\n        };\n        var assertion;\n        try {\n            assertion = jwt.sign(claims, keyParams, jwtOptions);\n        } catch (jwtErr) {\n            return Promise.reject(jwtErr);\n        }\n        var params = {\n            grant_type: grantTypes.JWT,\n            assertion\n        };\n        // Start the request timer immediately before executing the async request\n        asyncRequestTimer = process.hrtime();\n        return this.getTokens(params, options).catch((err)=>this.retryJWTGrant(claims, jwtOptions, keyParams, params, options, err, 0));\n    },\n    /**\n\t * Attempt a retry if possible and create a new JTI claim. If the request hasn't exceeded it's maximum number of retries,\n\t * re-execute the request (after the retry interval). Otherwise, propagate a new error.\n\t *\n\t * @param {Object} claims - JTI claims object\n\t * @param {Object} [jwtOptions] - JWT options for the signature\n\t * @param {Object} keyParams - Key JWT parameters object that contains the private key and the passphrase\n\t * @param {Object} params - Should contain all params expected by Box OAuth2 token endpoint\n\t * @param {TokenRequestOptions} [options] - Sets optional behavior for the token grant\n\t * @param {Error} error - Error from the previous JWT request\n\t * @param {int} numRetries - Number of retries attempted\n\t * @returns {Promise<TokenInfo>} Promise resolving to the token info\n\t */ // eslint-disable-next-line max-params\n    retryJWTGrant (claims, jwtOptions, keyParams, params, options, error, numRetries) {\n        if (numRetries < this.config.numMaxRetries && isJWTAuthErrorRetryable(error)) {\n            var retryTimeout;\n            numRetries += 1;\n            // If the retry strategy is defined, then use it to determine the time (in ms) until the next retry or to\n            // propagate an error to the user.\n            if (this.config.retryStrategy) {\n                // Get the total elapsed time so far since the request was executed\n                var totalElapsedTime = process.hrtime(asyncRequestTimer);\n                var totalElapsedTimeMS = totalElapsedTime[0] * 1000 + totalElapsedTime[1] / 1000000;\n                var retryOptions = {\n                    error,\n                    numRetryAttempts: numRetries,\n                    numMaxRetries: this.config.numMaxRetries,\n                    retryIntervalMS: this.config.retryIntervalMS,\n                    totalElapsedTimeMS\n                };\n                retryTimeout = this.config.retryStrategy(retryOptions);\n                // If the retry strategy doesn't return a number/time in ms, then propagate the response error to the user.\n                // However, if the retry strategy returns its own error, this will be propagated to the user instead.\n                if (typeof retryTimeout !== \"number\") {\n                    if (retryTimeout instanceof Error) {\n                        error = retryTimeout;\n                    }\n                    throw error;\n                }\n            } else if (error.hasOwnProperty(\"response\") && error.response.hasOwnProperty(\"headers\") && error.response.headers.hasOwnProperty(\"retry-after\")) {\n                retryTimeout = error.response.headers[\"retry-after\"] * 1000;\n            } else {\n                retryTimeout = getRetryTimeout(numRetries, this.config.retryIntervalMS);\n            }\n            var time = Math.floor(Date.now() / 1000);\n            if (error.response.headers.date) {\n                time = Math.floor(Date.parse(error.response.headers.date) / 1000);\n            }\n            // Add length of retry timeout to current expiration time to calculate the expiration time for the JTI claim.\n            claims.exp = time + this.config.appAuth.expirationTime + retryTimeout / 1000;\n            jwtOptions.jwtid = uuid.v4();\n            try {\n                params.assertion = jwt.sign(claims, keyParams, jwtOptions);\n            } catch (jwtErr) {\n                throw jwtErr;\n            }\n            return Promise.delay(retryTimeout).then(()=>{\n                // Start the request timer immediately before executing the async request\n                asyncRequestTimer = process.hrtime();\n                return this.getTokens(params, options).catch((err)=>this.retryJWTGrant(claims, jwtOptions, keyParams, params, options, err, numRetries));\n            });\n        } else if (numRetries >= this.config.numMaxRetries) {\n            error.maxRetriesExceeded = true;\n        }\n        throw error;\n    },\n    /**\n\t * Exchange a valid access token for one with a lower scope, or delegated to\n\t * an external user identifier.\n\t *\n\t * @param {string} accessToken - The valid access token to exchange\n\t * @param {string|string[]} scopes - The scope(s) of the new access token\n\t * @param {string} [resource] - The absolute URL of an API resource to restrict the new token to\n\t * @param {Object} [options] - Optional parameters\n\t * @param {TokenRequestOptions} [options.tokenRequestOptions] - Sets optional behavior for the token grant\n\t * @param {ActorParams} [options.actor] - Optional actor parameters for creating annotator tokens\n\t * @param {SharedLinkParams} [options.sharedLink] - Optional shared link parameters for creating tokens using shared links\n\t * @returns {Promise<TokenInfo>} Promise resolving to the new token info\n\t */ exchangeToken (accessToken, scopes, resource, options) {\n        var params = {\n            grant_type: grantTypes.TOKEN_EXCHANGE,\n            subject_token_type: ACCESS_TOKEN_TYPE,\n            subject_token: accessToken,\n            scope: typeof scopes === \"string\" ? scopes : scopes.join(\" \")\n        };\n        if (resource) {\n            params.resource = resource;\n        }\n        if (options && options.sharedLink) {\n            params.box_shared_link = options.sharedLink.url;\n        }\n        if (options && options.actor) {\n            var payload = {\n                iss: this.config.clientID,\n                sub: options.actor.id,\n                aud: BOX_JWT_AUDIENCE,\n                box_sub_type: \"external\",\n                name: options.actor.name\n            };\n            var jwtOptions = {\n                algorithm: \"none\",\n                expiresIn: \"1m\",\n                noTimestamp: true,\n                jwtid: uuid.v4()\n            };\n            var token;\n            try {\n                token = jwt.sign(payload, \"UNUSED\", jwtOptions);\n            } catch (jwtError) {\n                return Promise.reject(jwtError);\n            }\n            params.actor_token = token;\n            params.actor_token_type = ACTOR_TOKEN_TYPE;\n        }\n        return this.getTokens(params, options && options.tokenRequestOptions ? options.tokenRequestOptions : null);\n    },\n    /**\n\t * Revokes a token pair associated with a given access or refresh token.\n\t *\n\t * @param {string} token - A valid access or refresh token to revoke\n\t * @param {TokenRequestOptions} [options] - Sets optional behavior for the token grant\n\t * @returns {Promise} Promise resolving if the revoke succeeds\n\t */ revokeTokens (token, options) {\n        var params = {\n            method: \"POST\",\n            url: this.oauthBaseURL + tokenPaths.REVOKE,\n            form: {\n                token,\n                client_id: this.config.clientID,\n                client_secret: this.config.clientSecret\n            }\n        };\n        if (options && options.ip) {\n            params.headers = {};\n            params.headers[HEADER_XFF] = options.ip;\n        }\n        return this.requestManager.makeRequest(params);\n    }\n};\n/**\n * Provides interactions with Box OAuth2 tokening system.\n *\n * @module box-node-sdk/lib/token-manager\n */ module.exports = TokenManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/box-node-sdk/lib/token-manager.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/box-node-sdk/lib/util/config.js":
/*!******************************************************!*\
  !*** ./node_modules/box-node-sdk/lib/util/config.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * @fileoverview Configuration Object\n */ \n// ------------------------------------------------------------------------------\n// Requirements\n// ------------------------------------------------------------------------------\nvar assert = __webpack_require__(/*! assert */ \"assert\"), https = __webpack_require__(/*! https */ \"https\"), merge = __webpack_require__(/*! merge-options */ \"(rsc)/./node_modules/merge-options/index.js\"), sdkVersion = (__webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/box-node-sdk/package.json\").version), ProxyAgent = __webpack_require__(/*! proxy-agent */ \"(rsc)/./node_modules/proxy-agent/index.js\"), url = __webpack_require__(/*! url */ \"url\");\n// ------------------------------------------------------------------------------\n// Private\n// ------------------------------------------------------------------------------\nvar nodeVersion = process.version;\n/**\n * Configuration for App Auth\n * @typedef {Object} AppAuthConfig\n * @property {string} keyID The ID of the public key used for app auth\n * @property {string|Buffer} privateKey The private key used for app auth\n * @property {string} passphrase The passphrase associated with the private key\n * @property {string} [algorithm=RS256] The signing algorithm to use, \"RS256\", \"RS384\", or \"RS512\"\n * @property {int} [expirationTime=30] Number of seconds the JWT should live for\n * @property {boolean} [verifyTimestamp=false] Whether the timestamp when the auth token is created should be validated\n */ /**\n * Configuration settings used to initialize and customize the SDK\n *\n * @typedef {Object} UserConfigurationOptions\n * @property {string} clientID Client ID of your Box Application\n * @property {string} clientSecret Client secret of your Box Application\n * @property {string} [apiRootURL] The root URL to Box [Default: 'https://api.box.com']\n * @property {string} [uploadAPIRootURL] The root URL to Box for uploads [Default: 'https://upload.box.com/api']\n * @property {string} [authorizeRootURL] The root URL for the authorization screen [Default: 'https://account.box.com/api']\n * @property {int} [uploadRequestTimeoutMS] Timeout after which an upload request is aborted [Default: 60000]\n * @property {int} [retryIntervalMS] Time between auto-retries of the API call on a temp failure [Default: 2000]\n * @property {int} [numMaxRetries] Max # of times a temporarily-failed request should be retried before propagating a permanent failure [Default: 5]\n * @property {int} [expiredBufferMS] Time before expiration, in milliseconds, when we begin to treat tokens as expired [Default: 3 min.]\n * @property {Object} [request] Request options\n * @property {boolean} [request.strictSSL] Set to false to disable strict SSL checking, which allows using Dev APIs [Default: true]\n * @property {?AppAuthConfig} appAuth Optional configuration for App Auth\n */ var defaults = {\n    clientID: null,\n    clientSecret: null,\n    apiRootURL: \"https://api.box.com\",\n    uploadAPIRootURL: \"https://upload.box.com/api\",\n    authorizeRootURL: \"https://account.box.com/api\",\n    apiVersion: \"2.0\",\n    uploadRequestTimeoutMS: 60000,\n    retryIntervalMS: 2000,\n    numMaxRetries: 5,\n    retryStrategy: null,\n    expiredBufferMS: 180000,\n    staleBufferMS: 0,\n    appAuth: undefined,\n    iterators: false,\n    enterpriseID: undefined,\n    analyticsClient: null,\n    proxy: {\n        url: null,\n        username: null,\n        password: null\n    },\n    request: {\n        // By default, require API SSL cert to be valid\n        strictSSL: true,\n        // Use an agent with keep-alive enabled to avoid performing SSL handshake per connection\n        agentClass: https.Agent,\n        agentOptions: {\n            keepAlive: true\n        },\n        // Encode requests as JSON. Encode the response as well if JSON is returned.\n        json: true,\n        // Do not encode the response as a string, since the response could be a file. return Buffers instead.\n        encoding: null,\n        // A redirect is usually information we want to handle, so don't automatically follow\n        followRedirect: false,\n        // By default, we attach a version-specific user-agent string to SDK requests\n        headers: {\n            \"User-Agent\": `Box Node.js SDK v${sdkVersion} (Node ${nodeVersion})`\n        }\n    }\n};\nvar appAuthDefaults = {\n    algorithm: \"RS256\",\n    expirationTime: 30,\n    verifyTimestamp: false\n};\n/**\n * Validate the basic Config values needed for the SDK to function\n * @param {UserConfigurationOptions} params The user-supplied config values\n * @returns {void}\n * @throws {AssertionError}\n * @private\n */ function validateBasicParams(params) {\n    // Assert that the given params valid, and that required values are present\n    assert(typeof params.clientID === \"string\", '\"clientID\" must be set via init() before using the SDK.');\n    assert(typeof params.clientSecret === \"string\", '\"clientSecret\" must be set via init() before using the SDK.');\n}\n/**\n * Validate app auth-specific Config values\n * @param {Object} appAuth The user-supplied app auth values\n * @returns {void}\n * @throws {AssertionError}\n * @private\n */ function validateAppAuthParams(appAuth) {\n    assert(typeof appAuth.keyID === \"string\", \"Key ID must be provided in app auth params\");\n    assert(typeof appAuth.privateKey === \"string\" || appAuth.privateKey instanceof Buffer, \"Private key must be provided in app auth params\");\n    assert(typeof appAuth.passphrase === \"string\" && appAuth.passphrase.length > 0, \"Passphrase must be provided in app auth params\");\n    var validAlgorithms = [\n        \"RS256\",\n        \"RS384\",\n        \"RS512\"\n    ];\n    if (typeof appAuth.algorithm !== \"undefined\") {\n        assert(validAlgorithms.indexOf(appAuth.algorithm) > -1, `Algorithm in app auth params must be one of: ${validAlgorithms.join(\", \")}`);\n    }\n    if (typeof appAuth.expirationTime !== \"undefined\") {\n        assert(Number.isInteger(appAuth.expirationTime) && appAuth.expirationTime > 0 && appAuth.expirationTime <= 60, \"Valid token expiration time (0 - 60) must be provided in app auth params\");\n    }\n}\n/**\n * Update the agentClass based on the proxy config values passed in by the user\n * @param {UserConfigurationOptions} params The current Config values\n * @returns {void}\n * @private\n */ function updateRequestAgent(params) {\n    if (params.proxy.url) {\n        params.request.agentClass = ProxyAgent;\n        params.request.agentOptions = Object.assign({}, params.request.agentOptions, url.parse(params.proxy.url));\n        if (params.proxy.username && params.proxy.password) {\n            Object.assign(params.request.agentOptions, {\n                auth: `${params.proxy.username}:${params.proxy.password}`\n            });\n        }\n    }\n}\n// ------------------------------------------------------------------------------\n// Public\n// ------------------------------------------------------------------------------\n/**\n * A Config Object holds the configuration options of the current setup. These are all\n * customizable by the user, and will default if no value is specified in the given params\n * object. The object is frozen on initialization, so that no values can be changed after\n * setup.\n *\n * @param {UserConfigurationOptions} params - The config options set by the user\n * @constructor\n */ function Config(params) {\n    validateBasicParams(params);\n    if (typeof params.appAuth === \"object\") {\n        validateAppAuthParams(params.appAuth);\n        params.appAuth = merge({}, appAuthDefaults, params.appAuth);\n    }\n    // Ensure that we don't accidentally assign over Config methods\n    assert(!params.hasOwnProperty(\"extend\"), \"Config params may not override Config methods\");\n    assert(!params.hasOwnProperty(\"_params\"), \"Config params may not override Config methods\");\n    // Set the given params or default value if params property is missing\n    this._params = merge(defaults, params);\n    updateRequestAgent(this._params);\n    Object.assign(this, this._params);\n    // Freeze the object so that configuration options cannot be modified\n    Object.freeze(this);\n}\n/**\n * Extend the current config into a new config with new params overriding old ones\n * @param {UserConfigurationOptions} params The override options\n * @returns {Config} The extended configuration\n */ Config.prototype.extend = function(params) {\n    var newParams = merge({}, this._params, params);\n    delete newParams.extend;\n    delete newParams._params;\n    return new Config(newParams);\n};\n/**\n * @module box-node-sdk/lib/util/config\n * @see {@Link Config}\n */ module.exports = Config;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/box-node-sdk/lib/util/config.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/box-node-sdk/lib/util/errors.js":
/*!******************************************************!*\
  !*** ./node_modules/box-node-sdk/lib/util/errors.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * @fileoverview Errors Helper\n */ \n// ------------------------------------------------------------------------------\n// Requirements\n// ------------------------------------------------------------------------------\nvar qs = __webpack_require__(/*! querystring */ \"querystring\"), httpStatusCodes = __webpack_require__(/*! http-status */ \"(rsc)/./node_modules/http-status/lib/index.js\");\nconst TRACE_ID_HEADER_NAME = \"box-request-id\";\n// ------------------------------------------------------------------------------\n// Typedefs and Callbacks\n// ------------------------------------------------------------------------------\n/**\n * An generic error propagated when the response has caused an error.\n * @typedef {Error} Errors~ResponseError\n * @property {APIRequest~ResponseObject} response The response object that generated the error\n * @property {int} statusCode A shortcut to the status code of the response\n */ /**\n * Error propagated whenever the SDK is unable to successfully complete an action\n * due to an expired access token (and refresh token, if one was provided).\n * @typedef {Errors~ResponseError} Errors~AuthError\n * @property {boolean} authExpired - always true\n */ /**\n * Request structure for error objects\n * @param {Object} req The request object\n * @constructor\n * @private\n */ function Request(req) {\n    this.method = req.method;\n    if (req.uri) {\n        this.url = {\n            protocol: req.uri.protocol,\n            host: req.uri.host,\n            path: req.uri.pathname,\n            query: qs.parse(req.uri.query),\n            fragment: req.uri.hash\n        };\n    } else {\n        this.url = null;\n    }\n    this.httpVersion = req.response ? req.response.httpVersion : null;\n    this.headers = req.headers;\n    this.body = req.body;\n}\n// ------------------------------------------------------------------------------\n// Public\n// ------------------------------------------------------------------------------\n/**\n * A Helper for building errors across the SDK. Makes sure that easily-forgotten\n * fields aren't missed, and that everything is formatted properly to return to the\n * consumer.\n *\n * @name Errors\n * @module box-node-sdk/lib/util/errors\n */ module.exports = {\n    /**\n\t * Build a response error with the given message, and attaching meta data from the\n\t * response data.\n\t *\n\t * @param {?APIRequest~ResponseObject} response - The response returned by an APIRequestManager request\n\t * @param {string} message - the response error message\n\t * @returns {Errors~ResponseError} an error describing the response error\n\t */ buildResponseError (response, message) {\n        response = response || {};\n        message = message || \"API Response Error\";\n        var statusCode = response.statusCode;\n        var statusMessage = httpStatusCodes[statusCode];\n        var debugID = \"\"; // Of the form <requestID>.<traceID>, both parts optional\n        var errorCode;\n        var errorDescription;\n        if (response.headers && response.headers[TRACE_ID_HEADER_NAME]) {\n            // Append trace ID with dot separator — if not present, the dot should be omitted\n            debugID += `.${response.headers[TRACE_ID_HEADER_NAME]}`;\n        }\n        if (response.body) {\n            if (response.body.request_id) {\n                // Prepend request ID\n                debugID = response.body.request_id + debugID;\n            }\n            errorCode = response.body.code || response.body.error;\n            errorDescription = response.body.message || response.body.error_description;\n        }\n        var errorMessage;\n        if (debugID) {\n            errorMessage = `${message} [${statusCode} ${statusMessage} | ${debugID}]`;\n        } else {\n            errorMessage = `${message} [${statusCode} ${statusMessage}]`;\n        }\n        if (errorCode) {\n            errorMessage += ` ${errorCode}`;\n        }\n        if (errorDescription) {\n            errorMessage += ` - ${errorDescription}`;\n        }\n        var responseError = new Error(errorMessage);\n        responseError.statusCode = response.statusCode;\n        responseError.response = response;\n        responseError.request = response.request ? new Request(response.request) : {};\n        return responseError;\n    },\n    /**\n\t * Build an authentication error. {@see Errors~AuthError}\n\t *\n\t * @param {?APIRequest~ResponseObject} response - The response returned by an APIRequestManager request\n\t * @param {string} [message] - Optional message for the error\n\t * @returns {Errors~AuthError} A properly formatted authentication error\n\t */ buildAuthError (response, message) {\n        message = message || \"Expired Auth: Auth code or refresh token has expired\";\n        var responseError = this.buildResponseError(response, message);\n        responseError.authExpired = true;\n        return responseError;\n    },\n    /**\n\t * Build the error for an \"Unexpected Response\" from the API. This is a shortcut for\n\t * responseError built specifically for the 401 UNEXPECTED response case. It\n\t * should be called and the error should be propogated to the consumer\n\t * whenever an unexpected response was recieved from the API.\n\t *\n\t * @param {?APIRequest~ResponseObject} response - The response returned by an APIRequestManager request\n\t * @returns {Errors~ResponseError} an error describing the response error\n\t */ buildUnexpectedResponseError (response) {\n        return this.buildResponseError(response, \"Unexpected API Response\");\n    },\n    /**\n\t * Unwrap a Bluebird error and throw it, or just re-throw if the error\n\t * is not a Bluebird error.  This is necessary to preserve errors when\n\t * a function is promisified.\n\t * @param {Error} error The error to unwrap\n\t * @returns {void}\n\t * @throws {Error} The unwrapped error\n\t */ unwrapAndThrow (error) {\n        if (error.cause) {\n            throw error.cause;\n        }\n        throw error;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/box-node-sdk/lib/util/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/box-node-sdk/lib/util/exponential-backoff.js":
/*!*******************************************************************!*\
  !*** ./node_modules/box-node-sdk/lib/util/exponential-backoff.js ***!
  \*******************************************************************/
/***/ ((module) => {

eval("/**\n * @fileoverview Calculate exponential backoff time\n */ \n// ------------------------------------------------------------------------------\n// Private\n// ------------------------------------------------------------------------------\n// Retry intervals are between 50% and 150% of the exponentially increasing base amount\nconst RETRY_RANDOMIZATION_FACTOR = 0.5;\n/**\n * Calculate the exponential backoff time with randomized jitter\n * @param {int} numRetries Which retry number this one will be\n * @param {int} baseInterval The base retry interval set in config\n * @returns {int} The number of milliseconds after which to retry\n */ function getRetryTimeout(numRetries, baseInterval) {\n    var minRandomization = 1 - RETRY_RANDOMIZATION_FACTOR;\n    var maxRandomization = 1 + RETRY_RANDOMIZATION_FACTOR;\n    var randomization = Math.random() * (maxRandomization - minRandomization) + minRandomization;\n    var exponential = Math.pow(2, numRetries - 1);\n    return Math.ceil(exponential * baseInterval * randomization);\n}\nmodule.exports = getRetryTimeout;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYm94LW5vZGUtc2RrL2xpYi91dGlsL2V4cG9uZW50aWFsLWJhY2tvZmYuanMiLCJtYXBwaW5ncyI6IkFBQUE7O0NBRUMsR0FFRDtBQUVBLGlGQUFpRjtBQUNqRixVQUFVO0FBQ1YsaUZBQWlGO0FBRWpGLHVGQUF1RjtBQUN2RixNQUFNQSw2QkFBNkI7QUFFbkM7Ozs7O0NBS0MsR0FDRCxTQUFTQyxnQkFBZ0JDLFVBQVUsRUFBRUMsWUFBWTtJQUVoRCxJQUFJQyxtQkFBbUIsSUFBSUo7SUFDM0IsSUFBSUssbUJBQW1CLElBQUlMO0lBQzNCLElBQUlNLGdCQUFnQixLQUFNRSxNQUFNLEtBQU1ILENBQUFBLG1CQUFtQkQsZ0JBQWUsSUFBTUE7SUFDOUUsSUFBSUssY0FBY0YsS0FBS0csR0FBRyxDQUFDLEdBQUdSLGFBQWE7SUFDM0MsT0FBT0ssS0FBS0ksSUFBSSxDQUFDRixjQUFjTixlQUFlRztBQUMvQztBQUVBTSxPQUFPQyxPQUFPLEdBQUdaIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2l2aWwtZW5naW5lZXJpbmctcGxhdGZvcm0vLi9ub2RlX21vZHVsZXMvYm94LW5vZGUtc2RrL2xpYi91dGlsL2V4cG9uZW50aWFsLWJhY2tvZmYuanM/MzRiNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgQ2FsY3VsYXRlIGV4cG9uZW50aWFsIGJhY2tvZmYgdGltZVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBQcml2YXRlXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gUmV0cnkgaW50ZXJ2YWxzIGFyZSBiZXR3ZWVuIDUwJSBhbmQgMTUwJSBvZiB0aGUgZXhwb25lbnRpYWxseSBpbmNyZWFzaW5nIGJhc2UgYW1vdW50XG5jb25zdCBSRVRSWV9SQU5ET01JWkFUSU9OX0ZBQ1RPUiA9IDAuNTtcblxuLyoqXG4gKiBDYWxjdWxhdGUgdGhlIGV4cG9uZW50aWFsIGJhY2tvZmYgdGltZSB3aXRoIHJhbmRvbWl6ZWQgaml0dGVyXG4gKiBAcGFyYW0ge2ludH0gbnVtUmV0cmllcyBXaGljaCByZXRyeSBudW1iZXIgdGhpcyBvbmUgd2lsbCBiZVxuICogQHBhcmFtIHtpbnR9IGJhc2VJbnRlcnZhbCBUaGUgYmFzZSByZXRyeSBpbnRlcnZhbCBzZXQgaW4gY29uZmlnXG4gKiBAcmV0dXJucyB7aW50fSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBhZnRlciB3aGljaCB0byByZXRyeVxuICovXG5mdW5jdGlvbiBnZXRSZXRyeVRpbWVvdXQobnVtUmV0cmllcywgYmFzZUludGVydmFsKSB7XG5cblx0dmFyIG1pblJhbmRvbWl6YXRpb24gPSAxIC0gUkVUUllfUkFORE9NSVpBVElPTl9GQUNUT1I7XG5cdHZhciBtYXhSYW5kb21pemF0aW9uID0gMSArIFJFVFJZX1JBTkRPTUlaQVRJT05fRkFDVE9SO1xuXHR2YXIgcmFuZG9taXphdGlvbiA9IChNYXRoLnJhbmRvbSgpICogKG1heFJhbmRvbWl6YXRpb24gLSBtaW5SYW5kb21pemF0aW9uKSkgKyBtaW5SYW5kb21pemF0aW9uO1xuXHR2YXIgZXhwb25lbnRpYWwgPSBNYXRoLnBvdygyLCBudW1SZXRyaWVzIC0gMSk7XG5cdHJldHVybiBNYXRoLmNlaWwoZXhwb25lbnRpYWwgKiBiYXNlSW50ZXJ2YWwgKiByYW5kb21pemF0aW9uKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRSZXRyeVRpbWVvdXQ7XG4iXSwibmFtZXMiOlsiUkVUUllfUkFORE9NSVpBVElPTl9GQUNUT1IiLCJnZXRSZXRyeVRpbWVvdXQiLCJudW1SZXRyaWVzIiwiYmFzZUludGVydmFsIiwibWluUmFuZG9taXphdGlvbiIsIm1heFJhbmRvbWl6YXRpb24iLCJyYW5kb21pemF0aW9uIiwiTWF0aCIsInJhbmRvbSIsImV4cG9uZW50aWFsIiwicG93IiwiY2VpbCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/box-node-sdk/lib/util/exponential-backoff.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/box-node-sdk/lib/util/paging-iterator.js":
/*!***************************************************************!*\
  !*** ./node_modules/box-node-sdk/lib/util/paging-iterator.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * @fileoverview Iterator for paged responses\n */ \n// -----------------------------------------------------------------------------\n// Typedefs\n// -----------------------------------------------------------------------------\n/**\n * The iterator response object\n * @typedef {Object} IteratorData\n * @property {Array} [value] - The next set of values from the iterator\n * @property {boolean} done - Whether the iterator is completed\n */ /**\n * Iterator callback\n * @callback IteratorCallback\n * @param {?Error} err - An error if the iterator encountered one\n * @param {IteratorData} [data] - New data from the iterator\n * @returns {void}\n */ // -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\nvar querystring = __webpack_require__(/*! querystring */ \"querystring\"), Promise = __webpack_require__(/*! bluebird */ \"(rsc)/./node_modules/bluebird/js/release/bluebird.js\"), PromiseQueue = __webpack_require__(/*! promise-queue */ \"(rsc)/./node_modules/promise-queue/index.js\"), errors = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/box-node-sdk/lib/util/errors.js\");\nPromiseQueue.configure(Promise);\n// -----------------------------------------------------------------------------\n// Private\n// -----------------------------------------------------------------------------\nconst PAGING_MODES = Object.freeze({\n    MARKER: \"marker\",\n    OFFSET: \"offset\"\n});\n// -----------------------------------------------------------------------------\n// Public\n// -----------------------------------------------------------------------------\n/**\n * Asynchronous iterator for paged collections\n */ class PagingIterator {\n    /**\n\t * Determine if a response is iterable\n\t * @param {Object} response - The API response\n\t * @returns {boolean} Whether the response is iterable\n\t */ static isIterable(response) {\n        // POST responses for uploading a file are explicitly excluded here because, while the response is iterable,\n        // it always contains only a single entry and historically has not been handled as iterable in the SDK.\n        // This behavior is being preserved here to avoid a breaking change.\n        let UPLOAD_PATTERN = /.*upload\\.box\\.com.*\\/content/;\n        var isGetOrPostRequest = response.request && (response.request.method === \"GET\" || response.request.method === \"POST\" && !UPLOAD_PATTERN.test(response.request.uri.href)), hasEntries = response.body && Array.isArray(response.body.entries), notEventStream = response.body && !response.body.next_stream_position;\n        return Boolean(isGetOrPostRequest && hasEntries && notEventStream);\n    }\n    /**\n\t * @constructor\n\t * @param {Object} response - The original API response\n\t * @param {BoxClient} client - An API client to make further requests\n\t * @returns {void}\n\t * @throws {Error} Will throw when collection cannot be paged\n\t */ constructor(response, client){\n        if (!PagingIterator.isIterable(response)) {\n            throw new Error(\"Cannot create paging iterator for non-paged response!\");\n        }\n        var data = response.body;\n        if (Number.isSafeInteger(data.offset)) {\n            this.nextField = PAGING_MODES.OFFSET;\n            this.nextValue = data.offset;\n        } else if (typeof data.next_marker === \"undefined\") {\n            // Default to a finished marker collection when there's no field present,\n            // since some endpoints indicate completed paging this way\n            this.nextField = PAGING_MODES.MARKER;\n            this.nextValue = null;\n        } else {\n            this.nextField = PAGING_MODES.MARKER;\n            this.nextValue = data.next_marker;\n        }\n        this.limit = data.limit || data.entries.length;\n        this.done = false;\n        var href = response.request.href.split(\"?\")[0];\n        this.options = {\n            headers: response.request.headers,\n            qs: querystring.parse(response.request.uri.query)\n        };\n        if (response.request.body) {\n            if (Object.prototype.toString.call(response.request.body) === \"[object Object]\") {\n                this.options.body = response.request.body;\n            } else {\n                this.options.body = JSON.parse(response.request.body);\n            }\n        }\n        // querystring.parse() makes everything a string, ensure numeric params are the correct type\n        if (this.options.qs.limit) {\n            this.options.qs.limit = parseInt(this.options.qs.limit, 10);\n        }\n        if (this.options.qs.offset) {\n            this.options.qs.offset = parseInt(this.options.qs.offset, 10);\n        }\n        delete this.options.headers.Authorization;\n        if (response.request.method === \"GET\") {\n            this.fetch = client.get.bind(client, href);\n        }\n        if (response.request.method === \"POST\") {\n            this.fetch = client.post.bind(client, href);\n        }\n        this.buffer = response.body.entries;\n        this.queue = new PromiseQueue(1, Infinity);\n        this._updatePaging(response);\n    }\n    /**\n\t * Update the paging parameters for the iterator\n\t * @private\n\t * @param {Object} response - The latest API response\n\t * @returns {void}\n\t */ _updatePaging(response) {\n        var data = response.body;\n        if (this.nextField === PAGING_MODES.OFFSET) {\n            this.nextValue += this.limit;\n            if (Number.isSafeInteger(data.total_count)) {\n                this.done = data.offset + this.limit >= data.total_count;\n            } else {\n                this.done = data.entries.length === 0;\n            }\n        } else if (this.nextField === PAGING_MODES.MARKER) {\n            if (data.next_marker) {\n                this.nextValue = data.next_marker;\n            } else {\n                this.nextValue = null;\n                this.done = true;\n            }\n        }\n        if (response.request.method === \"GET\") {\n            this.options.qs[this.nextField] = this.nextValue;\n        } else if (response.request.method === \"POST\") {\n            if (!this.options.body) {\n                this.options.body = {};\n            }\n            this.options.body[this.nextField] = this.nextValue;\n            let bodyString = JSON.stringify(this.options.body);\n            this.options.headers[\"content-length\"] = bodyString.length;\n        }\n    }\n    /**\n\t * Fetch the next page of results\n\t * @returns {Promise} Promise resolving to iterator state\n\t */ _getData() {\n        return this.fetch(this.options).then((response)=>{\n            if (response.statusCode !== 200) {\n                throw errors.buildUnexpectedResponseError(response);\n            }\n            this._updatePaging(response);\n            this.buffer = this.buffer.concat(response.body.entries);\n            if (this.buffer.length === 0) {\n                if (this.done) {\n                    return {\n                        value: undefined,\n                        done: true\n                    };\n                }\n                // If we didn't get any data in this page, but the paging\n                // parameters indicate that there is more data, attempt\n                // to fetch more.  This occurs in multiple places in the API\n                return this._getData();\n            }\n            return {\n                value: this.buffer.shift(),\n                done: false\n            };\n        });\n    }\n    /**\n\t * Fetch the next page of the collection\n\t * @returns {Promise} Promise resolving to iterator state\n\t */ next() {\n        if (this.buffer.length > 0) {\n            return Promise.resolve({\n                value: this.buffer.shift(),\n                done: false\n            });\n        }\n        if (this.done) {\n            return Promise.resolve({\n                value: undefined,\n                done: true\n            });\n        }\n        return this.queue.add(this._getData.bind(this));\n    }\n    /**\n\t * Fetch the next marker\n\t * @returns {string|int} String that is the next marker or int that is the next offset\n\t */ getNextMarker() {\n        return this.nextValue;\n    }\n}\nmodule.exports = PagingIterator;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYm94LW5vZGUtc2RrL2xpYi91dGlsL3BhZ2luZy1pdGVyYXRvci5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Q0FFQyxHQUVEO0FBRUEsZ0ZBQWdGO0FBQ2hGLFdBQVc7QUFDWCxnRkFBZ0Y7QUFFaEY7Ozs7O0NBS0MsR0FFRDs7Ozs7O0NBTUMsR0FFRCxnRkFBZ0Y7QUFDaEYsZUFBZTtBQUNmLGdGQUFnRjtBQUVoRixJQUFJQSxjQUFjQyxtQkFBT0EsQ0FBQyxtQ0FDekJDLFVBQVVELG1CQUFPQSxDQUFDLHlFQUNsQkUsZUFBZUYsbUJBQU9BLENBQUMscUVBQ3ZCRyxTQUFTSCxtQkFBT0EsQ0FBQztBQUVsQkUsYUFBYUUsU0FBUyxDQUFDSDtBQUV2QixnRkFBZ0Y7QUFDaEYsVUFBVTtBQUNWLGdGQUFnRjtBQUVoRixNQUFNSSxlQUFlQyxPQUFPQyxNQUFNLENBQUM7SUFDbENDLFFBQVE7SUFDUkMsUUFBUTtBQUNUO0FBRUEsZ0ZBQWdGO0FBQ2hGLFNBQVM7QUFDVCxnRkFBZ0Y7QUFFaEY7O0NBRUMsR0FDRCxNQUFNQztJQUVMOzs7O0VBSUMsR0FDRCxPQUFPQyxXQUFXQyxRQUFRLEVBQUU7UUFDM0IsNEdBQTRHO1FBQzVHLHVHQUF1RztRQUN2RyxvRUFBb0U7UUFDcEUsSUFBSUMsaUJBQWlCO1FBQ3JCLElBQUlDLHFCQUFzQkYsU0FBU0csT0FBTyxJQUFLSCxDQUFBQSxTQUFTRyxPQUFPLENBQUNDLE1BQU0sS0FBSyxTQUFVSixTQUFTRyxPQUFPLENBQUNDLE1BQU0sS0FBSyxVQUFVLENBQUNILGVBQWVJLElBQUksQ0FBQ0wsU0FBU0csT0FBTyxDQUFDRyxHQUFHLENBQUNDLElBQUksQ0FBQyxHQUN6S0MsYUFBY1IsU0FBU1MsSUFBSSxJQUFJQyxNQUFNQyxPQUFPLENBQUNYLFNBQVNTLElBQUksQ0FBQ0csT0FBTyxHQUNsRUMsaUJBQWtCYixTQUFTUyxJQUFJLElBQUksQ0FBQ1QsU0FBU1MsSUFBSSxDQUFDSyxvQkFBb0I7UUFFdkUsT0FBT0MsUUFBUWIsc0JBQXNCTSxjQUFjSztJQUNwRDtJQUVBOzs7Ozs7RUFNQyxHQUNERyxZQUFZaEIsUUFBUSxFQUFFaUIsTUFBTSxDQUFFO1FBRTdCLElBQUksQ0FBQ25CLGVBQWVDLFVBQVUsQ0FBQ0MsV0FBVztZQUN6QyxNQUFNLElBQUlrQixNQUFNO1FBQ2pCO1FBR0EsSUFBSUMsT0FBT25CLFNBQVNTLElBQUk7UUFDeEIsSUFBSVcsT0FBT0MsYUFBYSxDQUFDRixLQUFLRyxNQUFNLEdBQUc7WUFDdEMsSUFBSSxDQUFDQyxTQUFTLEdBQUc5QixhQUFhSSxNQUFNO1lBQ3BDLElBQUksQ0FBQzJCLFNBQVMsR0FBR0wsS0FBS0csTUFBTTtRQUM3QixPQUFPLElBQUksT0FBT0gsS0FBS00sV0FBVyxLQUFLLGFBQWE7WUFDbkQseUVBQXlFO1lBQ3pFLDBEQUEwRDtZQUMxRCxJQUFJLENBQUNGLFNBQVMsR0FBRzlCLGFBQWFHLE1BQU07WUFDcEMsSUFBSSxDQUFDNEIsU0FBUyxHQUFHO1FBQ2xCLE9BQU87WUFDTixJQUFJLENBQUNELFNBQVMsR0FBRzlCLGFBQWFHLE1BQU07WUFDcEMsSUFBSSxDQUFDNEIsU0FBUyxHQUFHTCxLQUFLTSxXQUFXO1FBQ2xDO1FBRUEsSUFBSSxDQUFDQyxLQUFLLEdBQUdQLEtBQUtPLEtBQUssSUFBSVAsS0FBS1AsT0FBTyxDQUFDZSxNQUFNO1FBQzlDLElBQUksQ0FBQ0MsSUFBSSxHQUFHO1FBRVosSUFBSXJCLE9BQU9QLFNBQVNHLE9BQU8sQ0FBQ0ksSUFBSSxDQUFDc0IsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQzlDLElBQUksQ0FBQ0MsT0FBTyxHQUFHO1lBQ2RDLFNBQVMvQixTQUFTRyxPQUFPLENBQUM0QixPQUFPO1lBQ2pDQyxJQUFJN0MsWUFBWThDLEtBQUssQ0FBQ2pDLFNBQVNHLE9BQU8sQ0FBQ0csR0FBRyxDQUFDNEIsS0FBSztRQUNqRDtRQUNBLElBQUlsQyxTQUFTRyxPQUFPLENBQUNNLElBQUksRUFBRTtZQUMxQixJQUFJZixPQUFPeUMsU0FBUyxDQUFDQyxRQUFRLENBQUNDLElBQUksQ0FBQ3JDLFNBQVNHLE9BQU8sQ0FBQ00sSUFBSSxNQUFNLG1CQUFtQjtnQkFDaEYsSUFBSSxDQUFDcUIsT0FBTyxDQUFDckIsSUFBSSxHQUFHVCxTQUFTRyxPQUFPLENBQUNNLElBQUk7WUFDMUMsT0FBTztnQkFDTixJQUFJLENBQUNxQixPQUFPLENBQUNyQixJQUFJLEdBQUc2QixLQUFLTCxLQUFLLENBQUNqQyxTQUFTRyxPQUFPLENBQUNNLElBQUk7WUFDckQ7UUFDRDtRQUVBLDRGQUE0RjtRQUM1RixJQUFJLElBQUksQ0FBQ3FCLE9BQU8sQ0FBQ0UsRUFBRSxDQUFDTixLQUFLLEVBQUU7WUFDMUIsSUFBSSxDQUFDSSxPQUFPLENBQUNFLEVBQUUsQ0FBQ04sS0FBSyxHQUFHYSxTQUFTLElBQUksQ0FBQ1QsT0FBTyxDQUFDRSxFQUFFLENBQUNOLEtBQUssRUFBRTtRQUN6RDtRQUNBLElBQUksSUFBSSxDQUFDSSxPQUFPLENBQUNFLEVBQUUsQ0FBQ1YsTUFBTSxFQUFFO1lBQzNCLElBQUksQ0FBQ1EsT0FBTyxDQUFDRSxFQUFFLENBQUNWLE1BQU0sR0FBR2lCLFNBQVMsSUFBSSxDQUFDVCxPQUFPLENBQUNFLEVBQUUsQ0FBQ1YsTUFBTSxFQUFFO1FBQzNEO1FBRUEsT0FBTyxJQUFJLENBQUNRLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDUyxhQUFhO1FBQ3pDLElBQUl4QyxTQUFTRyxPQUFPLENBQUNDLE1BQU0sS0FBSyxPQUFPO1lBQ3RDLElBQUksQ0FBQ3FDLEtBQUssR0FBR3hCLE9BQU95QixHQUFHLENBQUNDLElBQUksQ0FBQzFCLFFBQVFWO1FBQ3RDO1FBQ0EsSUFBSVAsU0FBU0csT0FBTyxDQUFDQyxNQUFNLEtBQUssUUFBUTtZQUN2QyxJQUFJLENBQUNxQyxLQUFLLEdBQUd4QixPQUFPMkIsSUFBSSxDQUFDRCxJQUFJLENBQUMxQixRQUFRVjtRQUN2QztRQUNBLElBQUksQ0FBQ3NDLE1BQU0sR0FBRzdDLFNBQVNTLElBQUksQ0FBQ0csT0FBTztRQUNuQyxJQUFJLENBQUNrQyxLQUFLLEdBQUcsSUFBSXhELGFBQWEsR0FBR3lEO1FBQ2pDLElBQUksQ0FBQ0MsYUFBYSxDQUFDaEQ7SUFDcEI7SUFFQTs7Ozs7RUFLQyxHQUNEZ0QsY0FBY2hELFFBQVEsRUFBRTtRQUV2QixJQUFJbUIsT0FBT25CLFNBQVNTLElBQUk7UUFFeEIsSUFBSSxJQUFJLENBQUNjLFNBQVMsS0FBSzlCLGFBQWFJLE1BQU0sRUFBRTtZQUUzQyxJQUFJLENBQUMyQixTQUFTLElBQUksSUFBSSxDQUFDRSxLQUFLO1lBRTVCLElBQUlOLE9BQU9DLGFBQWEsQ0FBQ0YsS0FBSzhCLFdBQVcsR0FBRztnQkFDM0MsSUFBSSxDQUFDckIsSUFBSSxHQUFHVCxLQUFLRyxNQUFNLEdBQUcsSUFBSSxDQUFDSSxLQUFLLElBQUlQLEtBQUs4QixXQUFXO1lBQ3pELE9BQU87Z0JBQ04sSUFBSSxDQUFDckIsSUFBSSxHQUFHVCxLQUFLUCxPQUFPLENBQUNlLE1BQU0sS0FBSztZQUNyQztRQUNELE9BQU8sSUFBSSxJQUFJLENBQUNKLFNBQVMsS0FBSzlCLGFBQWFHLE1BQU0sRUFBRTtZQUVsRCxJQUFJdUIsS0FBS00sV0FBVyxFQUFFO2dCQUNyQixJQUFJLENBQUNELFNBQVMsR0FBR0wsS0FBS00sV0FBVztZQUNsQyxPQUFPO2dCQUNOLElBQUksQ0FBQ0QsU0FBUyxHQUFHO2dCQUNqQixJQUFJLENBQUNJLElBQUksR0FBRztZQUNiO1FBQ0Q7UUFDQSxJQUFJNUIsU0FBU0csT0FBTyxDQUFDQyxNQUFNLEtBQUssT0FBTztZQUN0QyxJQUFJLENBQUMwQixPQUFPLENBQUNFLEVBQUUsQ0FBQyxJQUFJLENBQUNULFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQ0MsU0FBUztRQUNqRCxPQUFPLElBQUl4QixTQUFTRyxPQUFPLENBQUNDLE1BQU0sS0FBSyxRQUFRO1lBQzlDLElBQUksQ0FBQyxJQUFJLENBQUMwQixPQUFPLENBQUNyQixJQUFJLEVBQUU7Z0JBQ3ZCLElBQUksQ0FBQ3FCLE9BQU8sQ0FBQ3JCLElBQUksR0FBRyxDQUFDO1lBQ3RCO1lBQ0EsSUFBSSxDQUFDcUIsT0FBTyxDQUFDckIsSUFBSSxDQUFDLElBQUksQ0FBQ2MsU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFDQyxTQUFTO1lBQ2xELElBQUkwQixhQUFhWixLQUFLYSxTQUFTLENBQUMsSUFBSSxDQUFDckIsT0FBTyxDQUFDckIsSUFBSTtZQUNqRCxJQUFJLENBQUNxQixPQUFPLENBQUNDLE9BQU8sQ0FBQyxpQkFBaUIsR0FBR21CLFdBQVd2QixNQUFNO1FBQzNEO0lBQ0Q7SUFFQTs7O0VBR0MsR0FDRHlCLFdBQVc7UUFFVixPQUFPLElBQUksQ0FBQ1gsS0FBSyxDQUFDLElBQUksQ0FBQ1gsT0FBTyxFQUM1QnVCLElBQUksQ0FBQ3JELENBQUFBO1lBRUwsSUFBSUEsU0FBU3NELFVBQVUsS0FBSyxLQUFLO2dCQUNoQyxNQUFNL0QsT0FBT2dFLDRCQUE0QixDQUFDdkQ7WUFDM0M7WUFFQSxJQUFJLENBQUNnRCxhQUFhLENBQUNoRDtZQUVuQixJQUFJLENBQUM2QyxNQUFNLEdBQUcsSUFBSSxDQUFDQSxNQUFNLENBQUNXLE1BQU0sQ0FBQ3hELFNBQVNTLElBQUksQ0FBQ0csT0FBTztZQUV0RCxJQUFJLElBQUksQ0FBQ2lDLE1BQU0sQ0FBQ2xCLE1BQU0sS0FBSyxHQUFHO2dCQUU3QixJQUFJLElBQUksQ0FBQ0MsSUFBSSxFQUFFO29CQUVkLE9BQU87d0JBQ042QixPQUFPQzt3QkFDUDlCLE1BQU07b0JBQ1A7Z0JBQ0Q7Z0JBRUEseURBQXlEO2dCQUN6RCx1REFBdUQ7Z0JBQ3ZELDREQUE0RDtnQkFDNUQsT0FBTyxJQUFJLENBQUN3QixRQUFRO1lBQ3JCO1lBR0EsT0FBTztnQkFDTkssT0FBTyxJQUFJLENBQUNaLE1BQU0sQ0FBQ2MsS0FBSztnQkFDeEIvQixNQUFNO1lBQ1A7UUFDRDtJQUNGO0lBRUE7OztFQUdDLEdBQ0RnQyxPQUFPO1FBRU4sSUFBSSxJQUFJLENBQUNmLE1BQU0sQ0FBQ2xCLE1BQU0sR0FBRyxHQUFHO1lBRTNCLE9BQU90QyxRQUFRd0UsT0FBTyxDQUFDO2dCQUN0QkosT0FBTyxJQUFJLENBQUNaLE1BQU0sQ0FBQ2MsS0FBSztnQkFDeEIvQixNQUFNO1lBQ1A7UUFDRDtRQUVBLElBQUksSUFBSSxDQUFDQSxJQUFJLEVBQUU7WUFFZCxPQUFPdkMsUUFBUXdFLE9BQU8sQ0FBQztnQkFDdEJKLE9BQU9DO2dCQUNQOUIsTUFBTTtZQUNQO1FBQ0Q7UUFFQSxPQUFPLElBQUksQ0FBQ2tCLEtBQUssQ0FBQ2dCLEdBQUcsQ0FBQyxJQUFJLENBQUNWLFFBQVEsQ0FBQ1QsSUFBSSxDQUFDLElBQUk7SUFDOUM7SUFFQTs7O0VBR0MsR0FDRG9CLGdCQUFnQjtRQUNmLE9BQU8sSUFBSSxDQUFDdkMsU0FBUztJQUN0QjtBQUNEO0FBRUF3QyxPQUFPQyxPQUFPLEdBQUduRSIsInNvdXJjZXMiOlsid2VicGFjazovL2NpdmlsLWVuZ2luZWVyaW5nLXBsYXRmb3JtLy4vbm9kZV9tb2R1bGVzL2JveC1ub2RlLXNkay9saWIvdXRpbC9wYWdpbmctaXRlcmF0b3IuanM/NTVlOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgSXRlcmF0b3IgZm9yIHBhZ2VkIHJlc3BvbnNlc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFR5cGVkZWZzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vKipcbiAqIFRoZSBpdGVyYXRvciByZXNwb25zZSBvYmplY3RcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEl0ZXJhdG9yRGF0YVxuICogQHByb3BlcnR5IHtBcnJheX0gW3ZhbHVlXSAtIFRoZSBuZXh0IHNldCBvZiB2YWx1ZXMgZnJvbSB0aGUgaXRlcmF0b3JcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gZG9uZSAtIFdoZXRoZXIgdGhlIGl0ZXJhdG9yIGlzIGNvbXBsZXRlZFxuICovXG5cbi8qKlxuICogSXRlcmF0b3IgY2FsbGJhY2tcbiAqIEBjYWxsYmFjayBJdGVyYXRvckNhbGxiYWNrXG4gKiBAcGFyYW0gez9FcnJvcn0gZXJyIC0gQW4gZXJyb3IgaWYgdGhlIGl0ZXJhdG9yIGVuY291bnRlcmVkIG9uZVxuICogQHBhcmFtIHtJdGVyYXRvckRhdGF9IFtkYXRhXSAtIE5ldyBkYXRhIGZyb20gdGhlIGl0ZXJhdG9yXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUmVxdWlyZW1lbnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgcXVlcnlzdHJpbmcgPSByZXF1aXJlKCdxdWVyeXN0cmluZycpLFxuXHRQcm9taXNlID0gcmVxdWlyZSgnYmx1ZWJpcmQnKSxcblx0UHJvbWlzZVF1ZXVlID0gcmVxdWlyZSgncHJvbWlzZS1xdWV1ZScpLFxuXHRlcnJvcnMgPSByZXF1aXJlKCcuL2Vycm9ycycpO1xuXG5Qcm9taXNlUXVldWUuY29uZmlndXJlKFByb21pc2UpO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUHJpdmF0ZVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY29uc3QgUEFHSU5HX01PREVTID0gT2JqZWN0LmZyZWV6ZSh7XG5cdE1BUktFUjogJ21hcmtlcicsXG5cdE9GRlNFVDogJ29mZnNldCdcbn0pO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUHVibGljXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vKipcbiAqIEFzeW5jaHJvbm91cyBpdGVyYXRvciBmb3IgcGFnZWQgY29sbGVjdGlvbnNcbiAqL1xuY2xhc3MgUGFnaW5nSXRlcmF0b3Ige1xuXG5cdC8qKlxuXHQgKiBEZXRlcm1pbmUgaWYgYSByZXNwb25zZSBpcyBpdGVyYWJsZVxuXHQgKiBAcGFyYW0ge09iamVjdH0gcmVzcG9uc2UgLSBUaGUgQVBJIHJlc3BvbnNlXG5cdCAqIEByZXR1cm5zIHtib29sZWFufSBXaGV0aGVyIHRoZSByZXNwb25zZSBpcyBpdGVyYWJsZVxuXHQgKi9cblx0c3RhdGljIGlzSXRlcmFibGUocmVzcG9uc2UpIHtcblx0XHQvLyBQT1NUIHJlc3BvbnNlcyBmb3IgdXBsb2FkaW5nIGEgZmlsZSBhcmUgZXhwbGljaXRseSBleGNsdWRlZCBoZXJlIGJlY2F1c2UsIHdoaWxlIHRoZSByZXNwb25zZSBpcyBpdGVyYWJsZSxcblx0XHQvLyBpdCBhbHdheXMgY29udGFpbnMgb25seSBhIHNpbmdsZSBlbnRyeSBhbmQgaGlzdG9yaWNhbGx5IGhhcyBub3QgYmVlbiBoYW5kbGVkIGFzIGl0ZXJhYmxlIGluIHRoZSBTREsuXG5cdFx0Ly8gVGhpcyBiZWhhdmlvciBpcyBiZWluZyBwcmVzZXJ2ZWQgaGVyZSB0byBhdm9pZCBhIGJyZWFraW5nIGNoYW5nZS5cblx0XHRsZXQgVVBMT0FEX1BBVFRFUk4gPSAvLip1cGxvYWRcXC5ib3hcXC5jb20uKlxcL2NvbnRlbnQvO1xuXHRcdHZhciBpc0dldE9yUG9zdFJlcXVlc3QgPSAocmVzcG9uc2UucmVxdWVzdCAmJiAocmVzcG9uc2UucmVxdWVzdC5tZXRob2QgPT09ICdHRVQnIHx8IChyZXNwb25zZS5yZXF1ZXN0Lm1ldGhvZCA9PT0gJ1BPU1QnICYmICFVUExPQURfUEFUVEVSTi50ZXN0KHJlc3BvbnNlLnJlcXVlc3QudXJpLmhyZWYpKSkpLFxuXHRcdFx0aGFzRW50cmllcyA9IChyZXNwb25zZS5ib2R5ICYmIEFycmF5LmlzQXJyYXkocmVzcG9uc2UuYm9keS5lbnRyaWVzKSksXG5cdFx0XHRub3RFdmVudFN0cmVhbSA9IChyZXNwb25zZS5ib2R5ICYmICFyZXNwb25zZS5ib2R5Lm5leHRfc3RyZWFtX3Bvc2l0aW9uKTtcblxuXHRcdHJldHVybiBCb29sZWFuKGlzR2V0T3JQb3N0UmVxdWVzdCAmJiBoYXNFbnRyaWVzICYmIG5vdEV2ZW50U3RyZWFtKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAY29uc3RydWN0b3Jcblx0ICogQHBhcmFtIHtPYmplY3R9IHJlc3BvbnNlIC0gVGhlIG9yaWdpbmFsIEFQSSByZXNwb25zZVxuXHQgKiBAcGFyYW0ge0JveENsaWVudH0gY2xpZW50IC0gQW4gQVBJIGNsaWVudCB0byBtYWtlIGZ1cnRoZXIgcmVxdWVzdHNcblx0ICogQHJldHVybnMge3ZvaWR9XG5cdCAqIEB0aHJvd3Mge0Vycm9yfSBXaWxsIHRocm93IHdoZW4gY29sbGVjdGlvbiBjYW5ub3QgYmUgcGFnZWRcblx0ICovXG5cdGNvbnN0cnVjdG9yKHJlc3BvbnNlLCBjbGllbnQpIHtcblxuXHRcdGlmICghUGFnaW5nSXRlcmF0b3IuaXNJdGVyYWJsZShyZXNwb25zZSkpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignQ2Fubm90IGNyZWF0ZSBwYWdpbmcgaXRlcmF0b3IgZm9yIG5vbi1wYWdlZCByZXNwb25zZSEnKTtcblx0XHR9XG5cblxuXHRcdHZhciBkYXRhID0gcmVzcG9uc2UuYm9keTtcblx0XHRpZiAoTnVtYmVyLmlzU2FmZUludGVnZXIoZGF0YS5vZmZzZXQpKSB7XG5cdFx0XHR0aGlzLm5leHRGaWVsZCA9IFBBR0lOR19NT0RFUy5PRkZTRVQ7XG5cdFx0XHR0aGlzLm5leHRWYWx1ZSA9IGRhdGEub2Zmc2V0O1xuXHRcdH0gZWxzZSBpZiAodHlwZW9mIGRhdGEubmV4dF9tYXJrZXIgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHQvLyBEZWZhdWx0IHRvIGEgZmluaXNoZWQgbWFya2VyIGNvbGxlY3Rpb24gd2hlbiB0aGVyZSdzIG5vIGZpZWxkIHByZXNlbnQsXG5cdFx0XHQvLyBzaW5jZSBzb21lIGVuZHBvaW50cyBpbmRpY2F0ZSBjb21wbGV0ZWQgcGFnaW5nIHRoaXMgd2F5XG5cdFx0XHR0aGlzLm5leHRGaWVsZCA9IFBBR0lOR19NT0RFUy5NQVJLRVI7XG5cdFx0XHR0aGlzLm5leHRWYWx1ZSA9IG51bGw7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMubmV4dEZpZWxkID0gUEFHSU5HX01PREVTLk1BUktFUjtcblx0XHRcdHRoaXMubmV4dFZhbHVlID0gZGF0YS5uZXh0X21hcmtlcjtcblx0XHR9XG5cblx0XHR0aGlzLmxpbWl0ID0gZGF0YS5saW1pdCB8fCBkYXRhLmVudHJpZXMubGVuZ3RoO1xuXHRcdHRoaXMuZG9uZSA9IGZhbHNlO1xuXG5cdFx0dmFyIGhyZWYgPSByZXNwb25zZS5yZXF1ZXN0LmhyZWYuc3BsaXQoJz8nKVswXTtcblx0XHR0aGlzLm9wdGlvbnMgPSB7XG5cdFx0XHRoZWFkZXJzOiByZXNwb25zZS5yZXF1ZXN0LmhlYWRlcnMsXG5cdFx0XHRxczogcXVlcnlzdHJpbmcucGFyc2UocmVzcG9uc2UucmVxdWVzdC51cmkucXVlcnkpXG5cdFx0fTtcblx0XHRpZiAocmVzcG9uc2UucmVxdWVzdC5ib2R5KSB7XG5cdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHJlc3BvbnNlLnJlcXVlc3QuYm9keSkgPT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG5cdFx0XHRcdHRoaXMub3B0aW9ucy5ib2R5ID0gcmVzcG9uc2UucmVxdWVzdC5ib2R5O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5vcHRpb25zLmJvZHkgPSBKU09OLnBhcnNlKHJlc3BvbnNlLnJlcXVlc3QuYm9keSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gcXVlcnlzdHJpbmcucGFyc2UoKSBtYWtlcyBldmVyeXRoaW5nIGEgc3RyaW5nLCBlbnN1cmUgbnVtZXJpYyBwYXJhbXMgYXJlIHRoZSBjb3JyZWN0IHR5cGVcblx0XHRpZiAodGhpcy5vcHRpb25zLnFzLmxpbWl0KSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMucXMubGltaXQgPSBwYXJzZUludCh0aGlzLm9wdGlvbnMucXMubGltaXQsIDEwKTtcblx0XHR9XG5cdFx0aWYgKHRoaXMub3B0aW9ucy5xcy5vZmZzZXQpIHtcblx0XHRcdHRoaXMub3B0aW9ucy5xcy5vZmZzZXQgPSBwYXJzZUludCh0aGlzLm9wdGlvbnMucXMub2Zmc2V0LCAxMCk7XG5cdFx0fVxuXG5cdFx0ZGVsZXRlIHRoaXMub3B0aW9ucy5oZWFkZXJzLkF1dGhvcml6YXRpb247XG5cdFx0aWYgKHJlc3BvbnNlLnJlcXVlc3QubWV0aG9kID09PSAnR0VUJykge1xuXHRcdFx0dGhpcy5mZXRjaCA9IGNsaWVudC5nZXQuYmluZChjbGllbnQsIGhyZWYpO1xuXHRcdH1cblx0XHRpZiAocmVzcG9uc2UucmVxdWVzdC5tZXRob2QgPT09ICdQT1NUJykge1xuXHRcdFx0dGhpcy5mZXRjaCA9IGNsaWVudC5wb3N0LmJpbmQoY2xpZW50LCBocmVmKTtcblx0XHR9XG5cdFx0dGhpcy5idWZmZXIgPSByZXNwb25zZS5ib2R5LmVudHJpZXM7XG5cdFx0dGhpcy5xdWV1ZSA9IG5ldyBQcm9taXNlUXVldWUoMSwgSW5maW5pdHkpO1xuXHRcdHRoaXMuX3VwZGF0ZVBhZ2luZyhyZXNwb25zZSk7XG5cdH1cblxuXHQvKipcblx0ICogVXBkYXRlIHRoZSBwYWdpbmcgcGFyYW1ldGVycyBmb3IgdGhlIGl0ZXJhdG9yXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSByZXNwb25zZSAtIFRoZSBsYXRlc3QgQVBJIHJlc3BvbnNlXG5cdCAqIEByZXR1cm5zIHt2b2lkfVxuXHQgKi9cblx0X3VwZGF0ZVBhZ2luZyhyZXNwb25zZSkge1xuXG5cdFx0dmFyIGRhdGEgPSByZXNwb25zZS5ib2R5O1xuXG5cdFx0aWYgKHRoaXMubmV4dEZpZWxkID09PSBQQUdJTkdfTU9ERVMuT0ZGU0VUKSB7XG5cblx0XHRcdHRoaXMubmV4dFZhbHVlICs9IHRoaXMubGltaXQ7XG5cblx0XHRcdGlmIChOdW1iZXIuaXNTYWZlSW50ZWdlcihkYXRhLnRvdGFsX2NvdW50KSkge1xuXHRcdFx0XHR0aGlzLmRvbmUgPSBkYXRhLm9mZnNldCArIHRoaXMubGltaXQgPj0gZGF0YS50b3RhbF9jb3VudDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuZG9uZSA9IGRhdGEuZW50cmllcy5sZW5ndGggPT09IDA7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmICh0aGlzLm5leHRGaWVsZCA9PT0gUEFHSU5HX01PREVTLk1BUktFUikge1xuXG5cdFx0XHRpZiAoZGF0YS5uZXh0X21hcmtlcikge1xuXHRcdFx0XHR0aGlzLm5leHRWYWx1ZSA9IGRhdGEubmV4dF9tYXJrZXI7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLm5leHRWYWx1ZSA9IG51bGw7XG5cdFx0XHRcdHRoaXMuZG9uZSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChyZXNwb25zZS5yZXF1ZXN0Lm1ldGhvZCA9PT0gJ0dFVCcpIHtcblx0XHRcdHRoaXMub3B0aW9ucy5xc1t0aGlzLm5leHRGaWVsZF0gPSB0aGlzLm5leHRWYWx1ZTtcblx0XHR9IGVsc2UgaWYgKHJlc3BvbnNlLnJlcXVlc3QubWV0aG9kID09PSAnUE9TVCcpIHtcblx0XHRcdGlmICghdGhpcy5vcHRpb25zLmJvZHkpIHtcblx0XHRcdFx0dGhpcy5vcHRpb25zLmJvZHkgPSB7fTtcblx0XHRcdH1cblx0XHRcdHRoaXMub3B0aW9ucy5ib2R5W3RoaXMubmV4dEZpZWxkXSA9IHRoaXMubmV4dFZhbHVlO1xuXHRcdFx0bGV0IGJvZHlTdHJpbmcgPSBKU09OLnN0cmluZ2lmeSh0aGlzLm9wdGlvbnMuYm9keSk7XG5cdFx0XHR0aGlzLm9wdGlvbnMuaGVhZGVyc1snY29udGVudC1sZW5ndGgnXSA9IGJvZHlTdHJpbmcubGVuZ3RoO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBGZXRjaCB0aGUgbmV4dCBwYWdlIG9mIHJlc3VsdHNcblx0ICogQHJldHVybnMge1Byb21pc2V9IFByb21pc2UgcmVzb2x2aW5nIHRvIGl0ZXJhdG9yIHN0YXRlXG5cdCAqL1xuXHRfZ2V0RGF0YSgpIHtcblxuXHRcdHJldHVybiB0aGlzLmZldGNoKHRoaXMub3B0aW9ucylcblx0XHRcdC50aGVuKHJlc3BvbnNlID0+IHtcblxuXHRcdFx0XHRpZiAocmVzcG9uc2Uuc3RhdHVzQ29kZSAhPT0gMjAwKSB7XG5cdFx0XHRcdFx0dGhyb3cgZXJyb3JzLmJ1aWxkVW5leHBlY3RlZFJlc3BvbnNlRXJyb3IocmVzcG9uc2UpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy5fdXBkYXRlUGFnaW5nKHJlc3BvbnNlKTtcblxuXHRcdFx0XHR0aGlzLmJ1ZmZlciA9IHRoaXMuYnVmZmVyLmNvbmNhdChyZXNwb25zZS5ib2R5LmVudHJpZXMpO1xuXG5cdFx0XHRcdGlmICh0aGlzLmJ1ZmZlci5sZW5ndGggPT09IDApIHtcblxuXHRcdFx0XHRcdGlmICh0aGlzLmRvbmUpIHtcblxuXHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0dmFsdWU6IHVuZGVmaW5lZCxcblx0XHRcdFx0XHRcdFx0ZG9uZTogdHJ1ZVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBkaWRuJ3QgZ2V0IGFueSBkYXRhIGluIHRoaXMgcGFnZSwgYnV0IHRoZSBwYWdpbmdcblx0XHRcdFx0XHQvLyBwYXJhbWV0ZXJzIGluZGljYXRlIHRoYXQgdGhlcmUgaXMgbW9yZSBkYXRhLCBhdHRlbXB0XG5cdFx0XHRcdFx0Ly8gdG8gZmV0Y2ggbW9yZS4gIFRoaXMgb2NjdXJzIGluIG11bHRpcGxlIHBsYWNlcyBpbiB0aGUgQVBJXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuX2dldERhdGEoKTtcblx0XHRcdFx0fVxuXG5cblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHR2YWx1ZTogdGhpcy5idWZmZXIuc2hpZnQoKSxcblx0XHRcdFx0XHRkb25lOiBmYWxzZVxuXHRcdFx0XHR9O1xuXHRcdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogRmV0Y2ggdGhlIG5leHQgcGFnZSBvZiB0aGUgY29sbGVjdGlvblxuXHQgKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSByZXNvbHZpbmcgdG8gaXRlcmF0b3Igc3RhdGVcblx0ICovXG5cdG5leHQoKSB7XG5cblx0XHRpZiAodGhpcy5idWZmZXIubGVuZ3RoID4gMCkge1xuXG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHtcblx0XHRcdFx0dmFsdWU6IHRoaXMuYnVmZmVyLnNoaWZ0KCksXG5cdFx0XHRcdGRvbmU6IGZhbHNlXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5kb25lKSB7XG5cblx0XHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoe1xuXHRcdFx0XHR2YWx1ZTogdW5kZWZpbmVkLFxuXHRcdFx0XHRkb25lOiB0cnVlXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5xdWV1ZS5hZGQodGhpcy5fZ2V0RGF0YS5iaW5kKHRoaXMpKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBGZXRjaCB0aGUgbmV4dCBtYXJrZXJcblx0ICogQHJldHVybnMge3N0cmluZ3xpbnR9IFN0cmluZyB0aGF0IGlzIHRoZSBuZXh0IG1hcmtlciBvciBpbnQgdGhhdCBpcyB0aGUgbmV4dCBvZmZzZXRcblx0ICovXG5cdGdldE5leHRNYXJrZXIoKSB7XG5cdFx0cmV0dXJuIHRoaXMubmV4dFZhbHVlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUGFnaW5nSXRlcmF0b3I7XG4iXSwibmFtZXMiOlsicXVlcnlzdHJpbmciLCJyZXF1aXJlIiwiUHJvbWlzZSIsIlByb21pc2VRdWV1ZSIsImVycm9ycyIsImNvbmZpZ3VyZSIsIlBBR0lOR19NT0RFUyIsIk9iamVjdCIsImZyZWV6ZSIsIk1BUktFUiIsIk9GRlNFVCIsIlBhZ2luZ0l0ZXJhdG9yIiwiaXNJdGVyYWJsZSIsInJlc3BvbnNlIiwiVVBMT0FEX1BBVFRFUk4iLCJpc0dldE9yUG9zdFJlcXVlc3QiLCJyZXF1ZXN0IiwibWV0aG9kIiwidGVzdCIsInVyaSIsImhyZWYiLCJoYXNFbnRyaWVzIiwiYm9keSIsIkFycmF5IiwiaXNBcnJheSIsImVudHJpZXMiLCJub3RFdmVudFN0cmVhbSIsIm5leHRfc3RyZWFtX3Bvc2l0aW9uIiwiQm9vbGVhbiIsImNvbnN0cnVjdG9yIiwiY2xpZW50IiwiRXJyb3IiLCJkYXRhIiwiTnVtYmVyIiwiaXNTYWZlSW50ZWdlciIsIm9mZnNldCIsIm5leHRGaWVsZCIsIm5leHRWYWx1ZSIsIm5leHRfbWFya2VyIiwibGltaXQiLCJsZW5ndGgiLCJkb25lIiwic3BsaXQiLCJvcHRpb25zIiwiaGVhZGVycyIsInFzIiwicGFyc2UiLCJxdWVyeSIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsIkpTT04iLCJwYXJzZUludCIsIkF1dGhvcml6YXRpb24iLCJmZXRjaCIsImdldCIsImJpbmQiLCJwb3N0IiwiYnVmZmVyIiwicXVldWUiLCJJbmZpbml0eSIsIl91cGRhdGVQYWdpbmciLCJ0b3RhbF9jb3VudCIsImJvZHlTdHJpbmciLCJzdHJpbmdpZnkiLCJfZ2V0RGF0YSIsInRoZW4iLCJzdGF0dXNDb2RlIiwiYnVpbGRVbmV4cGVjdGVkUmVzcG9uc2VFcnJvciIsImNvbmNhdCIsInZhbHVlIiwidW5kZWZpbmVkIiwic2hpZnQiLCJuZXh0IiwicmVzb2x2ZSIsImFkZCIsImdldE5leHRNYXJrZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/box-node-sdk/lib/util/paging-iterator.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/box-node-sdk/lib/util/url-path.js":
/*!********************************************************!*\
  !*** ./node_modules/box-node-sdk/lib/util/url-path.js ***!
  \********************************************************/
/***/ ((module) => {

eval("/**\n * @fileoverview URL Path Builder\n */ \n// ------------------------------------------------------------------------------\n// Private\n// ------------------------------------------------------------------------------\n// Pattern to check for relative paths\nvar PATTERN = /\\/\\.+/;\n/**\n * remove leading & trailing slashes from some string. This is useful for\n * removing slashes from the path segments that are actually a part of the\n * path itself. Without this step, these slashes would be uri-encoded.\n *\n * @param {string} segment The path segment (ex: '/users')\n * @returns {string} The path segment with slashes trimmed (ex: 'users')\n * @private\n */ function trimSlashes(segment) {\n    return segment.replace(/^\\/|\\/$/g, \"\");\n}\n// ------------------------------------------------------------------------------\n// Public\n// ------------------------------------------------------------------------------\n/**\n * URLPath will create a full URL path from the given array of segments.\n *\n * It also provides the following features:\n * - convert all segments to strings\n * - add/remove slashes between segments, where appropriate\n * - encode each path segment to prevent path manipulation\n *\n * @name URLPath\n * @returns {string} Return a valid URL path comprised of the given path segments\n */ module.exports = function urlPath() {\n    var args = Array.prototype.slice.call(arguments);\n    var path = args.map((x)=>String(x)).map((x)=>{\n        var trimmedX = trimSlashes(x);\n        if (PATTERN.test(trimmedX)) {\n            throw new Error(`An invalid path parameter exists in ${trimmedX}. Relative path parameters cannot be passed.`);\n        }\n        return trimmedX;\n    }).map((x)=>encodeURIComponent(x)).join(\"/\");\n    return `/${path}`;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYm94LW5vZGUtc2RrL2xpYi91dGlsL3VybC1wYXRoLmpzIiwibWFwcGluZ3MiOiJBQUFBOztDQUVDLEdBRUQ7QUFFQSxpRkFBaUY7QUFDakYsVUFBVTtBQUNWLGlGQUFpRjtBQUVqRixzQ0FBc0M7QUFDdEMsSUFBSUEsVUFBVTtBQUNkOzs7Ozs7OztDQVFDLEdBQ0QsU0FBU0MsWUFBWUMsT0FBTztJQUMzQixPQUFPQSxRQUFRQyxPQUFPLENBQUMsWUFBWTtBQUNwQztBQUdBLGlGQUFpRjtBQUNqRixTQUFTO0FBQ1QsaUZBQWlGO0FBRWpGOzs7Ozs7Ozs7O0NBVUMsR0FDREMsT0FBT0MsT0FBTyxHQUFHLFNBQVNDO0lBQ3pCLElBQUlDLE9BQU9DLE1BQU1DLFNBQVMsQ0FBQ0MsS0FBSyxDQUFDQyxJQUFJLENBQUNDO0lBQ3RDLElBQUlDLE9BQU9OLEtBQUtPLEdBQUcsQ0FBQ0MsQ0FBQUEsSUFBS0MsT0FBT0QsSUFDOUJELEdBQUcsQ0FBQ0MsQ0FBQUE7UUFDSixJQUFJRSxXQUFXaEIsWUFBWWM7UUFDM0IsSUFBSWYsUUFBUWtCLElBQUksQ0FBQ0QsV0FBVztZQUMzQixNQUFNLElBQUlFLE1BQU0sQ0FBQyxvQ0FBb0MsRUFBRUYsU0FBUyw0Q0FBNEMsQ0FBQztRQUM5RztRQUNBLE9BQU9BO0lBQ1IsR0FDQ0gsR0FBRyxDQUFDQyxDQUFBQSxJQUFLSyxtQkFBbUJMLElBQzVCTSxJQUFJLENBQUM7SUFDUCxPQUFPLENBQUMsQ0FBQyxFQUFFUixLQUFLLENBQUM7QUFDbEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaXZpbC1lbmdpbmVlcmluZy1wbGF0Zm9ybS8uL25vZGVfbW9kdWxlcy9ib3gtbm9kZS1zZGsvbGliL3V0aWwvdXJsLXBhdGguanM/OTZhNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgVVJMIFBhdGggQnVpbGRlclxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBQcml2YXRlXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gUGF0dGVybiB0byBjaGVjayBmb3IgcmVsYXRpdmUgcGF0aHNcbnZhciBQQVRURVJOID0gL1xcL1xcLisvO1xuLyoqXG4gKiByZW1vdmUgbGVhZGluZyAmIHRyYWlsaW5nIHNsYXNoZXMgZnJvbSBzb21lIHN0cmluZy4gVGhpcyBpcyB1c2VmdWwgZm9yXG4gKiByZW1vdmluZyBzbGFzaGVzIGZyb20gdGhlIHBhdGggc2VnbWVudHMgdGhhdCBhcmUgYWN0dWFsbHkgYSBwYXJ0IG9mIHRoZVxuICogcGF0aCBpdHNlbGYuIFdpdGhvdXQgdGhpcyBzdGVwLCB0aGVzZSBzbGFzaGVzIHdvdWxkIGJlIHVyaS1lbmNvZGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZWdtZW50IFRoZSBwYXRoIHNlZ21lbnQgKGV4OiAnL3VzZXJzJylcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBwYXRoIHNlZ21lbnQgd2l0aCBzbGFzaGVzIHRyaW1tZWQgKGV4OiAndXNlcnMnKVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gdHJpbVNsYXNoZXMoc2VnbWVudCkge1xuXHRyZXR1cm4gc2VnbWVudC5yZXBsYWNlKC9eXFwvfFxcLyQvZywgJycpO1xufVxuXG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUHVibGljXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLyoqXG4gKiBVUkxQYXRoIHdpbGwgY3JlYXRlIGEgZnVsbCBVUkwgcGF0aCBmcm9tIHRoZSBnaXZlbiBhcnJheSBvZiBzZWdtZW50cy5cbiAqXG4gKiBJdCBhbHNvIHByb3ZpZGVzIHRoZSBmb2xsb3dpbmcgZmVhdHVyZXM6XG4gKiAtIGNvbnZlcnQgYWxsIHNlZ21lbnRzIHRvIHN0cmluZ3NcbiAqIC0gYWRkL3JlbW92ZSBzbGFzaGVzIGJldHdlZW4gc2VnbWVudHMsIHdoZXJlIGFwcHJvcHJpYXRlXG4gKiAtIGVuY29kZSBlYWNoIHBhdGggc2VnbWVudCB0byBwcmV2ZW50IHBhdGggbWFuaXB1bGF0aW9uXG4gKlxuICogQG5hbWUgVVJMUGF0aFxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJuIGEgdmFsaWQgVVJMIHBhdGggY29tcHJpc2VkIG9mIHRoZSBnaXZlbiBwYXRoIHNlZ21lbnRzXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdXJsUGF0aCgvKiBhcmd1bWVudHMqLykge1xuXHR2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cdHZhciBwYXRoID0gYXJncy5tYXAoeCA9PiBTdHJpbmcoeCkpXG5cdFx0Lm1hcCh4ID0+IHtcblx0XHRcdHZhciB0cmltbWVkWCA9IHRyaW1TbGFzaGVzKHgpO1xuXHRcdFx0aWYgKFBBVFRFUk4udGVzdCh0cmltbWVkWCkpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBBbiBpbnZhbGlkIHBhdGggcGFyYW1ldGVyIGV4aXN0cyBpbiAke3RyaW1tZWRYfS4gUmVsYXRpdmUgcGF0aCBwYXJhbWV0ZXJzIGNhbm5vdCBiZSBwYXNzZWQuYCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJpbW1lZFg7XG5cdFx0fSlcblx0XHQubWFwKHggPT4gZW5jb2RlVVJJQ29tcG9uZW50KHgpKVxuXHRcdC5qb2luKCcvJyk7XG5cdHJldHVybiBgLyR7cGF0aH1gO1xufTtcbiJdLCJuYW1lcyI6WyJQQVRURVJOIiwidHJpbVNsYXNoZXMiLCJzZWdtZW50IiwicmVwbGFjZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ1cmxQYXRoIiwiYXJncyIsIkFycmF5IiwicHJvdG90eXBlIiwic2xpY2UiLCJjYWxsIiwiYXJndW1lbnRzIiwicGF0aCIsIm1hcCIsIngiLCJTdHJpbmciLCJ0cmltbWVkWCIsInRlc3QiLCJFcnJvciIsImVuY29kZVVSSUNvbXBvbmVudCIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/box-node-sdk/lib/util/url-path.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/box-node-sdk/package.json":
/*!************************************************!*\
  !*** ./node_modules/box-node-sdk/package.json ***!
  \************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"box-node-sdk","author":"Box <oss@box.com>","version":"1.37.0","description":"Official SDK for Box Plaform APIs","license":"Apache-2.0","repository":{"type":"git","url":"https://github.com/box/box-node-sdk.git"},"keywords":["box","platform","api","apis","upload","download","sdk"],"engines":{"node":">= 4.0.0"},"main":"./lib/box-node-sdk.js","scripts":{"test":"node Makefile.js","lint":"node Makefile.js lint","docs":"node Makefile.js docs","docs-dev":"node Makefile.js docsDev","deps":"npm prune && npm install","patch":"node Makefile.js patch","minor":"node Makefile.js minor","major":"node Makefile.js major"},"dependencies":{"ajv":"^6.12.3","bluebird":"^3.7.1","http-status":"^1.4.1","jsonwebtoken":"^8.5.1","merge-options":"^1.0.1","promise-queue":"^2.2.3","proxy-agent":"^4.0.0","request":"^2.88.0","url-template":"^2.0.8","uuid":"^3.3.3"},"devDependencies":{"chai":"^4.2.0","coveralls":"^3.1.0","eslint":"^4.19.1","eslint-plugin-node":"^6.0.1","eslint-plugin-promise":"^3.8.0","eslint-plugin-unicorn":"^4.0.3","istanbul":"^0.4.3","jsdoc":"^3.6.3","jsonlint2":"^1.7.1","leche":"^2.3.0","mocha":"^6.0.0","mockery":"^2.1.0","nock":"^9.6.1","np":"^7.2.0","npm-force-resolutions":"0.0.3","npm-upgrade":"^3.0.0","nyc":"^14.0.0","shelljs":"^0.8.3","shelljs-nodecli":"^0.1.1","sinon":"^7.5.0"},"files":["config","lib"],"resolutions":{"handlebars":"4.5.3","minimist":"1.2.5"}}');

/***/ })

};
;