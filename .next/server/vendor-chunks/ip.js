/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ip";
exports.ids = ["vendor-chunks/ip"];
exports.modules = {

/***/ "(rsc)/./node_modules/ip/lib/ip.js":
/*!***********************************!*\
  !*** ./node_modules/ip/lib/ip.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var ip = exports;\nvar { Buffer } = __webpack_require__(/*! buffer */ \"buffer\");\nvar os = __webpack_require__(/*! os */ \"os\");\nip.toBuffer = function(ip, buff, offset) {\n    offset = ~~offset;\n    var result;\n    if (this.isV4Format(ip)) {\n        result = buff || new Buffer(offset + 4);\n        ip.split(/\\./g).map((byte)=>{\n            result[offset++] = parseInt(byte, 10) & 0xff;\n        });\n    } else if (this.isV6Format(ip)) {\n        var sections = ip.split(\":\", 8);\n        var i;\n        for(i = 0; i < sections.length; i++){\n            var isv4 = this.isV4Format(sections[i]);\n            var v4Buffer;\n            if (isv4) {\n                v4Buffer = this.toBuffer(sections[i]);\n                sections[i] = v4Buffer.slice(0, 2).toString(\"hex\");\n            }\n            if (v4Buffer && ++i < 8) {\n                sections.splice(i, 0, v4Buffer.slice(2, 4).toString(\"hex\"));\n            }\n        }\n        if (sections[0] === \"\") {\n            while(sections.length < 8)sections.unshift(\"0\");\n        } else if (sections[sections.length - 1] === \"\") {\n            while(sections.length < 8)sections.push(\"0\");\n        } else if (sections.length < 8) {\n            for(i = 0; i < sections.length && sections[i] !== \"\"; i++);\n            var argv = [\n                i,\n                1\n            ];\n            for(i = 9 - sections.length; i > 0; i--){\n                argv.push(\"0\");\n            }\n            sections.splice.apply(sections, argv);\n        }\n        result = buff || new Buffer(offset + 16);\n        for(i = 0; i < sections.length; i++){\n            var word = parseInt(sections[i], 16);\n            result[offset++] = word >> 8 & 0xff;\n            result[offset++] = word & 0xff;\n        }\n    }\n    if (!result) {\n        throw Error(`Invalid ip address: ${ip}`);\n    }\n    return result;\n};\nip.toString = function(buff, offset, length) {\n    offset = ~~offset;\n    length = length || buff.length - offset;\n    var result = [];\n    var i;\n    if (length === 4) {\n        // IPv4\n        for(i = 0; i < length; i++){\n            result.push(buff[offset + i]);\n        }\n        result = result.join(\".\");\n    } else if (length === 16) {\n        // IPv6\n        for(i = 0; i < length; i += 2){\n            result.push(buff.readUInt16BE(offset + i).toString(16));\n        }\n        result = result.join(\":\");\n        result = result.replace(/(^|:)0(:0)*:0(:|$)/, \"$1::$3\");\n        result = result.replace(/:{3,4}/, \"::\");\n    }\n    return result;\n};\nvar ipv4Regex = /^(\\d{1,3}\\.){3,3}\\d{1,3}$/;\nvar ipv6Regex = /^(::)?(((\\d{1,3}\\.){3}(\\d{1,3}){1})?([0-9a-f]){0,4}:{0,2}){1,8}(::)?$/i;\nip.isV4Format = function(ip) {\n    return ipv4Regex.test(ip);\n};\nip.isV6Format = function(ip) {\n    return ipv6Regex.test(ip);\n};\nfunction _normalizeFamily(family) {\n    if (family === 4) {\n        return \"ipv4\";\n    }\n    if (family === 6) {\n        return \"ipv6\";\n    }\n    return family ? family.toLowerCase() : \"ipv4\";\n}\nip.fromPrefixLen = function(prefixlen, family) {\n    if (prefixlen > 32) {\n        family = \"ipv6\";\n    } else {\n        family = _normalizeFamily(family);\n    }\n    var len = 4;\n    if (family === \"ipv6\") {\n        len = 16;\n    }\n    var buff = new Buffer(len);\n    for(var i = 0, n = buff.length; i < n; ++i){\n        var bits = 8;\n        if (prefixlen < 8) {\n            bits = prefixlen;\n        }\n        prefixlen -= bits;\n        buff[i] = ~(0xff >> bits) & 0xff;\n    }\n    return ip.toString(buff);\n};\nip.mask = function(addr, mask) {\n    addr = ip.toBuffer(addr);\n    mask = ip.toBuffer(mask);\n    var result = new Buffer(Math.max(addr.length, mask.length));\n    // Same protocol - do bitwise and\n    var i;\n    if (addr.length === mask.length) {\n        for(i = 0; i < addr.length; i++){\n            result[i] = addr[i] & mask[i];\n        }\n    } else if (mask.length === 4) {\n        // IPv6 address and IPv4 mask\n        // (Mask low bits)\n        for(i = 0; i < mask.length; i++){\n            result[i] = addr[addr.length - 4 + i] & mask[i];\n        }\n    } else {\n        // IPv6 mask and IPv4 addr\n        for(i = 0; i < result.length - 6; i++){\n            result[i] = 0;\n        }\n        // ::ffff:ipv4\n        result[10] = 0xff;\n        result[11] = 0xff;\n        for(i = 0; i < addr.length; i++){\n            result[i + 12] = addr[i] & mask[i + 12];\n        }\n        i += 12;\n    }\n    for(; i < result.length; i++){\n        result[i] = 0;\n    }\n    return ip.toString(result);\n};\nip.cidr = function(cidrString) {\n    var cidrParts = cidrString.split(\"/\");\n    var addr = cidrParts[0];\n    if (cidrParts.length !== 2) {\n        throw new Error(`invalid CIDR subnet: ${addr}`);\n    }\n    var mask = ip.fromPrefixLen(parseInt(cidrParts[1], 10));\n    return ip.mask(addr, mask);\n};\nip.subnet = function(addr, mask) {\n    var networkAddress = ip.toLong(ip.mask(addr, mask));\n    // Calculate the mask's length.\n    var maskBuffer = ip.toBuffer(mask);\n    var maskLength = 0;\n    for(var i = 0; i < maskBuffer.length; i++){\n        if (maskBuffer[i] === 0xff) {\n            maskLength += 8;\n        } else {\n            var octet = maskBuffer[i] & 0xff;\n            while(octet){\n                octet = octet << 1 & 0xff;\n                maskLength++;\n            }\n        }\n    }\n    var numberOfAddresses = Math.pow(2, 32 - maskLength);\n    return {\n        networkAddress: ip.fromLong(networkAddress),\n        firstAddress: numberOfAddresses <= 2 ? ip.fromLong(networkAddress) : ip.fromLong(networkAddress + 1),\n        lastAddress: numberOfAddresses <= 2 ? ip.fromLong(networkAddress + numberOfAddresses - 1) : ip.fromLong(networkAddress + numberOfAddresses - 2),\n        broadcastAddress: ip.fromLong(networkAddress + numberOfAddresses - 1),\n        subnetMask: mask,\n        subnetMaskLength: maskLength,\n        numHosts: numberOfAddresses <= 2 ? numberOfAddresses : numberOfAddresses - 2,\n        length: numberOfAddresses,\n        contains (other) {\n            return networkAddress === ip.toLong(ip.mask(other, mask));\n        }\n    };\n};\nip.cidrSubnet = function(cidrString) {\n    var cidrParts = cidrString.split(\"/\");\n    var addr = cidrParts[0];\n    if (cidrParts.length !== 2) {\n        throw new Error(`invalid CIDR subnet: ${addr}`);\n    }\n    var mask = ip.fromPrefixLen(parseInt(cidrParts[1], 10));\n    return ip.subnet(addr, mask);\n};\nip.not = function(addr) {\n    var buff = ip.toBuffer(addr);\n    for(var i = 0; i < buff.length; i++){\n        buff[i] = 0xff ^ buff[i];\n    }\n    return ip.toString(buff);\n};\nip.or = function(a, b) {\n    var i;\n    a = ip.toBuffer(a);\n    b = ip.toBuffer(b);\n    // same protocol\n    if (a.length === b.length) {\n        for(i = 0; i < a.length; ++i){\n            a[i] |= b[i];\n        }\n        return ip.toString(a);\n    // mixed protocols\n    }\n    var buff = a;\n    var other = b;\n    if (b.length > a.length) {\n        buff = b;\n        other = a;\n    }\n    var offset = buff.length - other.length;\n    for(i = offset; i < buff.length; ++i){\n        buff[i] |= other[i - offset];\n    }\n    return ip.toString(buff);\n};\nip.isEqual = function(a, b) {\n    var i;\n    a = ip.toBuffer(a);\n    b = ip.toBuffer(b);\n    // Same protocol\n    if (a.length === b.length) {\n        for(i = 0; i < a.length; i++){\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n    // Swap\n    if (b.length === 4) {\n        var t = b;\n        b = a;\n        a = t;\n    }\n    // a - IPv4, b - IPv6\n    for(i = 0; i < 10; i++){\n        if (b[i] !== 0) return false;\n    }\n    var word = b.readUInt16BE(10);\n    if (word !== 0 && word !== 0xffff) return false;\n    for(i = 0; i < 4; i++){\n        if (a[i] !== b[i + 12]) return false;\n    }\n    return true;\n};\nip.isPrivate = function(addr) {\n    // check loopback addresses first\n    if (ip.isLoopback(addr)) {\n        return true;\n    }\n    // ensure the ipv4 address is valid\n    if (!ip.isV6Format(addr)) {\n        const ipl = ip.normalizeToLong(addr);\n        if (ipl < 0) {\n            throw new Error(\"invalid ipv4 address\");\n        }\n        // normalize the address for the private range checks that follow\n        addr = ip.fromLong(ipl);\n    }\n    // check private ranges\n    return /^(::f{4}:)?10\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr) || /^(::f{4}:)?192\\.168\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr) || /^(::f{4}:)?172\\.(1[6-9]|2\\d|30|31)\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr) || /^(::f{4}:)?169\\.254\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr) || /^f[cd][0-9a-f]{2}:/i.test(addr) || /^fe80:/i.test(addr) || /^::1$/.test(addr) || /^::$/.test(addr);\n};\nip.isPublic = function(addr) {\n    return !ip.isPrivate(addr);\n};\nip.isLoopback = function(addr) {\n    // If addr is an IPv4 address in long integer form (no dots and no colons), convert it\n    if (!/\\./.test(addr) && !/:/.test(addr)) {\n        addr = ip.fromLong(Number(addr));\n    }\n    return /^(::f{4}:)?127\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})/.test(addr) || /^0177\\./.test(addr) || /^0x7f\\./i.test(addr) || /^fe80::1$/i.test(addr) || /^::1$/.test(addr) || /^::$/.test(addr);\n};\nip.loopback = function(family) {\n    //\n    // Default to `ipv4`\n    //\n    family = _normalizeFamily(family);\n    if (family !== \"ipv4\" && family !== \"ipv6\") {\n        throw new Error(\"family must be ipv4 or ipv6\");\n    }\n    return family === \"ipv4\" ? \"127.0.0.1\" : \"fe80::1\";\n};\n//\n// ### function address (name, family)\n// #### @name {string|'public'|'private'} **Optional** Name or security\n//      of the network interface.\n// #### @family {ipv4|ipv6} **Optional** IP family of the address (defaults\n//      to ipv4).\n//\n// Returns the address for the network interface on the current system with\n// the specified `name`:\n//   * String: First `family` address of the interface.\n//             If not found see `undefined`.\n//   * 'public': the first public ip address of family.\n//   * 'private': the first private ip address of family.\n//   * undefined: First address with `ipv4` or loopback address `127.0.0.1`.\n//\nip.address = function(name, family) {\n    var interfaces = os.networkInterfaces();\n    //\n    // Default to `ipv4`\n    //\n    family = _normalizeFamily(family);\n    //\n    // If a specific network interface has been named,\n    // return the address.\n    //\n    if (name && name !== \"private\" && name !== \"public\") {\n        var res = interfaces[name].filter((details)=>{\n            var itemFamily = _normalizeFamily(details.family);\n            return itemFamily === family;\n        });\n        if (res.length === 0) {\n            return undefined;\n        }\n        return res[0].address;\n    }\n    var all = Object.keys(interfaces).map((nic)=>{\n        //\n        // Note: name will only be `public` or `private`\n        // when this is called.\n        //\n        var addresses = interfaces[nic].filter((details)=>{\n            details.family = _normalizeFamily(details.family);\n            if (details.family !== family || ip.isLoopback(details.address)) {\n                return false;\n            }\n            if (!name) {\n                return true;\n            }\n            return name === \"public\" ? ip.isPrivate(details.address) : ip.isPublic(details.address);\n        });\n        return addresses.length ? addresses[0].address : undefined;\n    }).filter(Boolean);\n    return !all.length ? ip.loopback(family) : all[0];\n};\nip.toLong = function(ip) {\n    var ipl = 0;\n    ip.split(\".\").forEach((octet)=>{\n        ipl <<= 8;\n        ipl += parseInt(octet);\n    });\n    return ipl >>> 0;\n};\nip.fromLong = function(ipl) {\n    return `${ipl >>> 24}.${ipl >> 16 & 255}.${ipl >> 8 & 255}.${ipl & 255}`;\n};\nip.normalizeToLong = function(addr) {\n    const parts = addr.split(\".\").map((part)=>{\n        // Handle hexadecimal format\n        if (part.startsWith(\"0x\") || part.startsWith(\"0X\")) {\n            return parseInt(part, 16);\n        } else if (part.startsWith(\"0\") && part !== \"0\" && /^[0-7]+$/.test(part)) {\n            return parseInt(part, 8);\n        } else if (/^[1-9]\\d*$/.test(part) || part === \"0\") {\n            return parseInt(part, 10);\n        } else {\n            return NaN;\n        }\n    });\n    if (parts.some(isNaN)) return -1; // Indicate error with -1\n    let val = 0;\n    const n = parts.length;\n    switch(n){\n        case 1:\n            val = parts[0];\n            break;\n        case 2:\n            if (parts[0] > 0xff || parts[1] > 0xffffff) return -1;\n            val = parts[0] << 24 | parts[1] & 0xffffff;\n            break;\n        case 3:\n            if (parts[0] > 0xff || parts[1] > 0xff || parts[2] > 0xffff) return -1;\n            val = parts[0] << 24 | parts[1] << 16 | parts[2] & 0xffff;\n            break;\n        case 4:\n            if (parts.some((part)=>part > 0xff)) return -1;\n            val = parts[0] << 24 | parts[1] << 16 | parts[2] << 8 | parts[3];\n            break;\n        default:\n            return -1; // Error case\n    }\n    return val >>> 0;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ip/lib/ip.js\n");

/***/ })

};
;