"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@pdf-lib";
exports.ids = ["vendor-chunks/@pdf-lib"];
exports.modules = {

/***/ "(rsc)/./node_modules/@pdf-lib/standard-fonts/es/Encoding.js":
/*!*************************************************************!*\
  !*** ./node_modules/@pdf-lib/standard-fonts/es/Encoding.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Encodings: () => (/* binding */ Encodings)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/es/utils.js\");\n/* harmony import */ var _all_encodings_compressed_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./all-encodings.compressed.json */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/es/all-encodings.compressed.json\");\n/* tslint:disable max-classes-per-file */ \n\nvar decompressedEncodings = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.decompressJson)(_all_encodings_compressed_json__WEBPACK_IMPORTED_MODULE_1__);\nvar allUnicodeMappings = JSON.parse(decompressedEncodings);\nvar Encoding = /** @class */ function() {\n    function Encoding(name, unicodeMappings) {\n        var _this = this;\n        this.canEncodeUnicodeCodePoint = function(codePoint) {\n            return codePoint in _this.unicodeMappings;\n        };\n        this.encodeUnicodeCodePoint = function(codePoint) {\n            var mapped = _this.unicodeMappings[codePoint];\n            if (!mapped) {\n                var str = String.fromCharCode(codePoint);\n                var hexCode = \"0x\" + (0,_utils__WEBPACK_IMPORTED_MODULE_0__.padStart)(codePoint.toString(16), 4, \"0\");\n                var msg = _this.name + ' cannot encode \"' + str + '\" (' + hexCode + \")\";\n                throw new Error(msg);\n            }\n            return {\n                code: mapped[0],\n                name: mapped[1]\n            };\n        };\n        this.name = name;\n        this.supportedCodePoints = Object.keys(unicodeMappings).map(Number).sort(function(a, b) {\n            return a - b;\n        });\n        this.unicodeMappings = unicodeMappings;\n    }\n    return Encoding;\n}();\nvar Encodings = {\n    Symbol: new Encoding(\"Symbol\", allUnicodeMappings.symbol),\n    ZapfDingbats: new Encoding(\"ZapfDingbats\", allUnicodeMappings.zapfdingbats),\n    WinAnsi: new Encoding(\"WinAnsi\", allUnicodeMappings.win1252)\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHBkZi1saWIvc3RhbmRhcmQtZm9udHMvZXMvRW5jb2RpbmcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsdUNBQXVDLEdBQ1k7QUFDa0I7QUFDckUsSUFBSUcsd0JBQXdCSCxzREFBY0EsQ0FBQ0UsMkRBQXNCQTtBQUNqRSxJQUFJRSxxQkFBcUJDLEtBQUtDLEtBQUssQ0FBQ0g7QUFDcEMsSUFBSUksV0FBVyxXQUFXLEdBQUk7SUFDMUIsU0FBU0EsU0FBU0MsSUFBSSxFQUFFQyxlQUFlO1FBQ25DLElBQUlDLFFBQVEsSUFBSTtRQUNoQixJQUFJLENBQUNDLHlCQUF5QixHQUFHLFNBQVVDLFNBQVM7WUFDaEQsT0FBT0EsYUFBYUYsTUFBTUQsZUFBZTtRQUM3QztRQUNBLElBQUksQ0FBQ0ksc0JBQXNCLEdBQUcsU0FBVUQsU0FBUztZQUM3QyxJQUFJRSxTQUFTSixNQUFNRCxlQUFlLENBQUNHLFVBQVU7WUFDN0MsSUFBSSxDQUFDRSxRQUFRO2dCQUNULElBQUlDLE1BQU1DLE9BQU9DLFlBQVksQ0FBQ0w7Z0JBQzlCLElBQUlNLFVBQVUsT0FBT2pCLGdEQUFRQSxDQUFDVyxVQUFVTyxRQUFRLENBQUMsS0FBSyxHQUFHO2dCQUN6RCxJQUFJQyxNQUFNVixNQUFNRixJQUFJLEdBQUcscUJBQXNCTyxNQUFNLFFBQVNHLFVBQVU7Z0JBQ3RFLE1BQU0sSUFBSUcsTUFBTUQ7WUFDcEI7WUFDQSxPQUFPO2dCQUFFRSxNQUFNUixNQUFNLENBQUMsRUFBRTtnQkFBRU4sTUFBTU0sTUFBTSxDQUFDLEVBQUU7WUFBQztRQUM5QztRQUNBLElBQUksQ0FBQ04sSUFBSSxHQUFHQTtRQUNaLElBQUksQ0FBQ2UsbUJBQW1CLEdBQUdDLE9BQU9DLElBQUksQ0FBQ2hCLGlCQUNsQ2lCLEdBQUcsQ0FBQ0MsUUFDSkMsSUFBSSxDQUFDLFNBQVVDLENBQUMsRUFBRUMsQ0FBQztZQUFJLE9BQU9ELElBQUlDO1FBQUc7UUFDMUMsSUFBSSxDQUFDckIsZUFBZSxHQUFHQTtJQUMzQjtJQUNBLE9BQU9GO0FBQ1g7QUFDTyxJQUFJd0IsWUFBWTtJQUNuQkMsUUFBUSxJQUFJekIsU0FBUyxVQUFVSCxtQkFBbUI2QixNQUFNO0lBQ3hEQyxjQUFjLElBQUkzQixTQUFTLGdCQUFnQkgsbUJBQW1CK0IsWUFBWTtJQUMxRUMsU0FBUyxJQUFJN0IsU0FBUyxXQUFXSCxtQkFBbUJpQyxPQUFPO0FBQy9ELEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaXZpbC1lbmdpbmVlcmluZy1wbGF0Zm9ybS8uL25vZGVfbW9kdWxlcy9AcGRmLWxpYi9zdGFuZGFyZC1mb250cy9lcy9FbmNvZGluZy5qcz9mNWNlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIHRzbGludDpkaXNhYmxlIG1heC1jbGFzc2VzLXBlci1maWxlICovXG5pbXBvcnQgeyBkZWNvbXByZXNzSnNvbiwgcGFkU3RhcnQgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCBBbGxFbmNvZGluZ3NDb21wcmVzc2VkIGZyb20gJy4vYWxsLWVuY29kaW5ncy5jb21wcmVzc2VkLmpzb24nO1xudmFyIGRlY29tcHJlc3NlZEVuY29kaW5ncyA9IGRlY29tcHJlc3NKc29uKEFsbEVuY29kaW5nc0NvbXByZXNzZWQpO1xudmFyIGFsbFVuaWNvZGVNYXBwaW5ncyA9IEpTT04ucGFyc2UoZGVjb21wcmVzc2VkRW5jb2RpbmdzKTtcbnZhciBFbmNvZGluZyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBFbmNvZGluZyhuYW1lLCB1bmljb2RlTWFwcGluZ3MpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5jYW5FbmNvZGVVbmljb2RlQ29kZVBvaW50ID0gZnVuY3Rpb24gKGNvZGVQb2ludCkge1xuICAgICAgICAgICAgcmV0dXJuIGNvZGVQb2ludCBpbiBfdGhpcy51bmljb2RlTWFwcGluZ3M7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZW5jb2RlVW5pY29kZUNvZGVQb2ludCA9IGZ1bmN0aW9uIChjb2RlUG9pbnQpIHtcbiAgICAgICAgICAgIHZhciBtYXBwZWQgPSBfdGhpcy51bmljb2RlTWFwcGluZ3NbY29kZVBvaW50XTtcbiAgICAgICAgICAgIGlmICghbWFwcGVkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0ciA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZVBvaW50KTtcbiAgICAgICAgICAgICAgICB2YXIgaGV4Q29kZSA9IFwiMHhcIiArIHBhZFN0YXJ0KGNvZGVQb2ludC50b1N0cmluZygxNiksIDQsICcwJyk7XG4gICAgICAgICAgICAgICAgdmFyIG1zZyA9IF90aGlzLm5hbWUgKyBcIiBjYW5ub3QgZW5jb2RlIFxcXCJcIiArIHN0ciArIFwiXFxcIiAoXCIgKyBoZXhDb2RlICsgXCIpXCI7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geyBjb2RlOiBtYXBwZWRbMF0sIG5hbWU6IG1hcHBlZFsxXSB9O1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnN1cHBvcnRlZENvZGVQb2ludHMgPSBPYmplY3Qua2V5cyh1bmljb2RlTWFwcGluZ3MpXG4gICAgICAgICAgICAubWFwKE51bWJlcilcbiAgICAgICAgICAgIC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhIC0gYjsgfSk7XG4gICAgICAgIHRoaXMudW5pY29kZU1hcHBpbmdzID0gdW5pY29kZU1hcHBpbmdzO1xuICAgIH1cbiAgICByZXR1cm4gRW5jb2Rpbmc7XG59KCkpO1xuZXhwb3J0IHZhciBFbmNvZGluZ3MgPSB7XG4gICAgU3ltYm9sOiBuZXcgRW5jb2RpbmcoJ1N5bWJvbCcsIGFsbFVuaWNvZGVNYXBwaW5ncy5zeW1ib2wpLFxuICAgIFphcGZEaW5nYmF0czogbmV3IEVuY29kaW5nKCdaYXBmRGluZ2JhdHMnLCBhbGxVbmljb2RlTWFwcGluZ3MuemFwZmRpbmdiYXRzKSxcbiAgICBXaW5BbnNpOiBuZXcgRW5jb2RpbmcoJ1dpbkFuc2knLCBhbGxVbmljb2RlTWFwcGluZ3Mud2luMTI1MiksXG59O1xuIl0sIm5hbWVzIjpbImRlY29tcHJlc3NKc29uIiwicGFkU3RhcnQiLCJBbGxFbmNvZGluZ3NDb21wcmVzc2VkIiwiZGVjb21wcmVzc2VkRW5jb2RpbmdzIiwiYWxsVW5pY29kZU1hcHBpbmdzIiwiSlNPTiIsInBhcnNlIiwiRW5jb2RpbmciLCJuYW1lIiwidW5pY29kZU1hcHBpbmdzIiwiX3RoaXMiLCJjYW5FbmNvZGVVbmljb2RlQ29kZVBvaW50IiwiY29kZVBvaW50IiwiZW5jb2RlVW5pY29kZUNvZGVQb2ludCIsIm1hcHBlZCIsInN0ciIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImhleENvZGUiLCJ0b1N0cmluZyIsIm1zZyIsIkVycm9yIiwiY29kZSIsInN1cHBvcnRlZENvZGVQb2ludHMiLCJPYmplY3QiLCJrZXlzIiwibWFwIiwiTnVtYmVyIiwic29ydCIsImEiLCJiIiwiRW5jb2RpbmdzIiwiU3ltYm9sIiwic3ltYm9sIiwiWmFwZkRpbmdiYXRzIiwiemFwZmRpbmdiYXRzIiwiV2luQW5zaSIsIndpbjEyNTIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@pdf-lib/standard-fonts/es/Encoding.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/standard-fonts/es/Font.js":
/*!*********************************************************!*\
  !*** ./node_modules/@pdf-lib/standard-fonts/es/Font.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Font: () => (/* binding */ Font),\n/* harmony export */   FontNames: () => (/* binding */ FontNames)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/es/utils.js\");\n/* harmony import */ var _Courier_Bold_compressed_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Courier-Bold.compressed.json */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/es/Courier-Bold.compressed.json\");\n/* harmony import */ var _Courier_BoldOblique_compressed_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Courier-BoldOblique.compressed.json */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/es/Courier-BoldOblique.compressed.json\");\n/* harmony import */ var _Courier_Oblique_compressed_json__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Courier-Oblique.compressed.json */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/es/Courier-Oblique.compressed.json\");\n/* harmony import */ var _Courier_compressed_json__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Courier.compressed.json */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/es/Courier.compressed.json\");\n/* harmony import */ var _Helvetica_Bold_compressed_json__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Helvetica-Bold.compressed.json */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/es/Helvetica-Bold.compressed.json\");\n/* harmony import */ var _Helvetica_BoldOblique_compressed_json__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Helvetica-BoldOblique.compressed.json */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/es/Helvetica-BoldOblique.compressed.json\");\n/* harmony import */ var _Helvetica_Oblique_compressed_json__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Helvetica-Oblique.compressed.json */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/es/Helvetica-Oblique.compressed.json\");\n/* harmony import */ var _Helvetica_compressed_json__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Helvetica.compressed.json */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/es/Helvetica.compressed.json\");\n/* harmony import */ var _Times_Bold_compressed_json__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Times-Bold.compressed.json */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/es/Times-Bold.compressed.json\");\n/* harmony import */ var _Times_BoldItalic_compressed_json__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Times-BoldItalic.compressed.json */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/es/Times-BoldItalic.compressed.json\");\n/* harmony import */ var _Times_Italic_compressed_json__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Times-Italic.compressed.json */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/es/Times-Italic.compressed.json\");\n/* harmony import */ var _Times_Roman_compressed_json__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./Times-Roman.compressed.json */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/es/Times-Roman.compressed.json\");\n/* harmony import */ var _Symbol_compressed_json__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./Symbol.compressed.json */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/es/Symbol.compressed.json\");\n/* harmony import */ var _ZapfDingbats_compressed_json__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./ZapfDingbats.compressed.json */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/es/ZapfDingbats.compressed.json\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// prettier-ignore\nvar compressedJsonForFontName = {\n    \"Courier\": _Courier_compressed_json__WEBPACK_IMPORTED_MODULE_4__,\n    \"Courier-Bold\": _Courier_Bold_compressed_json__WEBPACK_IMPORTED_MODULE_1__,\n    \"Courier-Oblique\": _Courier_Oblique_compressed_json__WEBPACK_IMPORTED_MODULE_3__,\n    \"Courier-BoldOblique\": _Courier_BoldOblique_compressed_json__WEBPACK_IMPORTED_MODULE_2__,\n    \"Helvetica\": _Helvetica_compressed_json__WEBPACK_IMPORTED_MODULE_8__,\n    \"Helvetica-Bold\": _Helvetica_Bold_compressed_json__WEBPACK_IMPORTED_MODULE_5__,\n    \"Helvetica-Oblique\": _Helvetica_Oblique_compressed_json__WEBPACK_IMPORTED_MODULE_7__,\n    \"Helvetica-BoldOblique\": _Helvetica_BoldOblique_compressed_json__WEBPACK_IMPORTED_MODULE_6__,\n    \"Times-Roman\": _Times_Roman_compressed_json__WEBPACK_IMPORTED_MODULE_12__,\n    \"Times-Bold\": _Times_Bold_compressed_json__WEBPACK_IMPORTED_MODULE_9__,\n    \"Times-Italic\": _Times_Italic_compressed_json__WEBPACK_IMPORTED_MODULE_11__,\n    \"Times-BoldItalic\": _Times_BoldItalic_compressed_json__WEBPACK_IMPORTED_MODULE_10__,\n    \"Symbol\": _Symbol_compressed_json__WEBPACK_IMPORTED_MODULE_13__,\n    \"ZapfDingbats\": _ZapfDingbats_compressed_json__WEBPACK_IMPORTED_MODULE_14__\n};\nvar FontNames;\n(function(FontNames) {\n    FontNames[\"Courier\"] = \"Courier\";\n    FontNames[\"CourierBold\"] = \"Courier-Bold\";\n    FontNames[\"CourierOblique\"] = \"Courier-Oblique\";\n    FontNames[\"CourierBoldOblique\"] = \"Courier-BoldOblique\";\n    FontNames[\"Helvetica\"] = \"Helvetica\";\n    FontNames[\"HelveticaBold\"] = \"Helvetica-Bold\";\n    FontNames[\"HelveticaOblique\"] = \"Helvetica-Oblique\";\n    FontNames[\"HelveticaBoldOblique\"] = \"Helvetica-BoldOblique\";\n    FontNames[\"TimesRoman\"] = \"Times-Roman\";\n    FontNames[\"TimesRomanBold\"] = \"Times-Bold\";\n    FontNames[\"TimesRomanItalic\"] = \"Times-Italic\";\n    FontNames[\"TimesRomanBoldItalic\"] = \"Times-BoldItalic\";\n    FontNames[\"Symbol\"] = \"Symbol\";\n    FontNames[\"ZapfDingbats\"] = \"ZapfDingbats\";\n})(FontNames || (FontNames = {}));\nvar fontCache = {};\nvar Font = /** @class */ function() {\n    function Font() {\n        var _this = this;\n        this.getWidthOfGlyph = function(glyphName) {\n            return _this.CharWidths[glyphName];\n        };\n        this.getXAxisKerningForPair = function(leftGlyphName, rightGlyphName) {\n            return (_this.KernPairXAmounts[leftGlyphName] || {})[rightGlyphName];\n        };\n    }\n    Font.load = function(fontName) {\n        var cachedFont = fontCache[fontName];\n        if (cachedFont) return cachedFont;\n        var json = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.decompressJson)(compressedJsonForFontName[fontName]);\n        var font = Object.assign(new Font(), JSON.parse(json));\n        font.CharWidths = font.CharMetrics.reduce(function(acc, metric) {\n            acc[metric.N] = metric.WX;\n            return acc;\n        }, {});\n        font.KernPairXAmounts = font.KernPairs.reduce(function(acc, _a) {\n            var name1 = _a[0], name2 = _a[1], width = _a[2];\n            if (!acc[name1]) acc[name1] = {};\n            acc[name1][name2] = width;\n            return acc;\n        }, {});\n        fontCache[fontName] = font;\n        return font;\n    };\n    return Font;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@pdf-lib/standard-fonts/es/Font.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/standard-fonts/es/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@pdf-lib/standard-fonts/es/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Encodings: () => (/* reexport safe */ _Encoding__WEBPACK_IMPORTED_MODULE_1__.Encodings),\n/* harmony export */   Font: () => (/* reexport safe */ _Font__WEBPACK_IMPORTED_MODULE_0__.Font),\n/* harmony export */   FontNames: () => (/* reexport safe */ _Font__WEBPACK_IMPORTED_MODULE_0__.FontNames)\n/* harmony export */ });\n/* harmony import */ var _Font__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Font */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/es/Font.js\");\n/* harmony import */ var _Encoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Encoding */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/es/Encoding.js\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHBkZi1saWIvc3RhbmRhcmQtZm9udHMvZXMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBdUI7QUFDSSIsInNvdXJjZXMiOlsid2VicGFjazovL2NpdmlsLWVuZ2luZWVyaW5nLXBsYXRmb3JtLy4vbm9kZV9tb2R1bGVzL0BwZGYtbGliL3N0YW5kYXJkLWZvbnRzL2VzL2luZGV4LmpzP2E3ZjgiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9Gb250JztcbmV4cG9ydCAqIGZyb20gJy4vRW5jb2RpbmcnO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@pdf-lib/standard-fonts/es/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/standard-fonts/es/utils.js":
/*!**********************************************************!*\
  !*** ./node_modules/@pdf-lib/standard-fonts/es/utils.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeFromBase64: () => (/* binding */ decodeFromBase64),\n/* harmony export */   decompressJson: () => (/* binding */ decompressJson),\n/* harmony export */   padStart: () => (/* binding */ padStart)\n/* harmony export */ });\n/* harmony import */ var pako__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pako */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/index.js\");\n/* harmony import */ var pako__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pako__WEBPACK_IMPORTED_MODULE_0__);\n/*\n * The `chars`, `lookup`, and `decodeFromBase64` members of this file are\n * licensed under the following:\n *\n *     base64-arraybuffer\n *     https://github.com/niklasvh/base64-arraybuffer\n *\n *     Copyright (c) 2012 Niklas von Hertzen\n *     Licensed under the MIT license.\n *\n */ \nvar chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n// Use a lookup table to find the index.\nvar lookup = new Uint8Array(256);\nfor(var i = 0; i < chars.length; i++){\n    lookup[chars.charCodeAt(i)] = i;\n}\nvar decodeFromBase64 = function(base64) {\n    var bufferLength = base64.length * 0.75;\n    var len = base64.length;\n    var i;\n    var p = 0;\n    var encoded1;\n    var encoded2;\n    var encoded3;\n    var encoded4;\n    if (base64[base64.length - 1] === \"=\") {\n        bufferLength--;\n        if (base64[base64.length - 2] === \"=\") {\n            bufferLength--;\n        }\n    }\n    var bytes = new Uint8Array(bufferLength);\n    for(i = 0; i < len; i += 4){\n        encoded1 = lookup[base64.charCodeAt(i)];\n        encoded2 = lookup[base64.charCodeAt(i + 1)];\n        encoded3 = lookup[base64.charCodeAt(i + 2)];\n        encoded4 = lookup[base64.charCodeAt(i + 3)];\n        bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n    }\n    return bytes;\n};\nvar arrayToString = function(array) {\n    var str = \"\";\n    for(var i = 0; i < array.length; i++){\n        str += String.fromCharCode(array[i]);\n    }\n    return str;\n};\nvar decompressJson = function(compressedJson) {\n    return arrayToString(pako__WEBPACK_IMPORTED_MODULE_0___default().inflate(decodeFromBase64(compressedJson)));\n};\nvar padStart = function(value, length, padChar) {\n    var padding = \"\";\n    for(var idx = 0, len = length - value.length; idx < len; idx++){\n        padding += padChar;\n    }\n    return padding + value;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHBkZi1saWIvc3RhbmRhcmQtZm9udHMvZXMvdXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7OztDQVVDLEdBQ3VCO0FBQ3hCLElBQUlDLFFBQVE7QUFDWix3Q0FBd0M7QUFDeEMsSUFBSUMsU0FBUyxJQUFJQyxXQUFXO0FBQzVCLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJSCxNQUFNSSxNQUFNLEVBQUVELElBQUs7SUFDbkNGLE1BQU0sQ0FBQ0QsTUFBTUssVUFBVSxDQUFDRixHQUFHLEdBQUdBO0FBQ2xDO0FBQ08sSUFBSUcsbUJBQW1CLFNBQVVDLE1BQU07SUFDMUMsSUFBSUMsZUFBZUQsT0FBT0gsTUFBTSxHQUFHO0lBQ25DLElBQUlLLE1BQU1GLE9BQU9ILE1BQU07SUFDdkIsSUFBSUQ7SUFDSixJQUFJTyxJQUFJO0lBQ1IsSUFBSUM7SUFDSixJQUFJQztJQUNKLElBQUlDO0lBQ0osSUFBSUM7SUFDSixJQUFJUCxNQUFNLENBQUNBLE9BQU9ILE1BQU0sR0FBRyxFQUFFLEtBQUssS0FBSztRQUNuQ0k7UUFDQSxJQUFJRCxNQUFNLENBQUNBLE9BQU9ILE1BQU0sR0FBRyxFQUFFLEtBQUssS0FBSztZQUNuQ0k7UUFDSjtJQUNKO0lBQ0EsSUFBSU8sUUFBUSxJQUFJYixXQUFXTTtJQUMzQixJQUFLTCxJQUFJLEdBQUdBLElBQUlNLEtBQUtOLEtBQUssRUFBRztRQUN6QlEsV0FBV1YsTUFBTSxDQUFDTSxPQUFPRixVQUFVLENBQUNGLEdBQUc7UUFDdkNTLFdBQVdYLE1BQU0sQ0FBQ00sT0FBT0YsVUFBVSxDQUFDRixJQUFJLEdBQUc7UUFDM0NVLFdBQVdaLE1BQU0sQ0FBQ00sT0FBT0YsVUFBVSxDQUFDRixJQUFJLEdBQUc7UUFDM0NXLFdBQVdiLE1BQU0sQ0FBQ00sT0FBT0YsVUFBVSxDQUFDRixJQUFJLEdBQUc7UUFDM0NZLEtBQUssQ0FBQ0wsSUFBSSxHQUFHLFlBQWEsSUFBTUUsWUFBWTtRQUM1Q0csS0FBSyxDQUFDTCxJQUFJLEdBQUcsQ0FBRUUsV0FBVyxFQUFDLEtBQU0sSUFBTUMsWUFBWTtRQUNuREUsS0FBSyxDQUFDTCxJQUFJLEdBQUcsQ0FBRUcsV0FBVyxNQUFNLElBQU1DLFdBQVc7SUFDckQ7SUFDQSxPQUFPQztBQUNYLEVBQUU7QUFDRixJQUFJQyxnQkFBZ0IsU0FBVUMsS0FBSztJQUMvQixJQUFJQyxNQUFNO0lBQ1YsSUFBSyxJQUFJZixJQUFJLEdBQUdBLElBQUljLE1BQU1iLE1BQU0sRUFBRUQsSUFBSztRQUNuQ2UsT0FBT0MsT0FBT0MsWUFBWSxDQUFDSCxLQUFLLENBQUNkLEVBQUU7SUFDdkM7SUFDQSxPQUFPZTtBQUNYO0FBQ08sSUFBSUcsaUJBQWlCLFNBQVVDLGNBQWM7SUFDaEQsT0FBT04sY0FBY2pCLG1EQUFZLENBQUNPLGlCQUFpQmdCO0FBQ3ZELEVBQUU7QUFDSyxJQUFJRSxXQUFXLFNBQVVDLEtBQUssRUFBRXJCLE1BQU0sRUFBRXNCLE9BQU87SUFDbEQsSUFBSUMsVUFBVTtJQUNkLElBQUssSUFBSUMsTUFBTSxHQUFHbkIsTUFBTUwsU0FBU3FCLE1BQU1yQixNQUFNLEVBQUV3QixNQUFNbkIsS0FBS21CLE1BQU87UUFDN0RELFdBQVdEO0lBQ2Y7SUFDQSxPQUFPQyxVQUFVRjtBQUNyQixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2l2aWwtZW5naW5lZXJpbmctcGxhdGZvcm0vLi9ub2RlX21vZHVsZXMvQHBkZi1saWIvc3RhbmRhcmQtZm9udHMvZXMvdXRpbHMuanM/MDdmMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogVGhlIGBjaGFyc2AsIGBsb29rdXBgLCBhbmQgYGRlY29kZUZyb21CYXNlNjRgIG1lbWJlcnMgb2YgdGhpcyBmaWxlIGFyZVxuICogbGljZW5zZWQgdW5kZXIgdGhlIGZvbGxvd2luZzpcbiAqXG4gKiAgICAgYmFzZTY0LWFycmF5YnVmZmVyXG4gKiAgICAgaHR0cHM6Ly9naXRodWIuY29tL25pa2xhc3ZoL2Jhc2U2NC1hcnJheWJ1ZmZlclxuICpcbiAqICAgICBDb3B5cmlnaHQgKGMpIDIwMTIgTmlrbGFzIHZvbiBIZXJ0emVuXG4gKiAgICAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICpcbiAqL1xuaW1wb3J0IHBha28gZnJvbSAncGFrbyc7XG52YXIgY2hhcnMgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLyc7XG4vLyBVc2UgYSBsb29rdXAgdGFibGUgdG8gZmluZCB0aGUgaW5kZXguXG52YXIgbG9va3VwID0gbmV3IFVpbnQ4QXJyYXkoMjU2KTtcbmZvciAodmFyIGkgPSAwOyBpIDwgY2hhcnMubGVuZ3RoOyBpKyspIHtcbiAgICBsb29rdXBbY2hhcnMuY2hhckNvZGVBdChpKV0gPSBpO1xufVxuZXhwb3J0IHZhciBkZWNvZGVGcm9tQmFzZTY0ID0gZnVuY3Rpb24gKGJhc2U2NCkge1xuICAgIHZhciBidWZmZXJMZW5ndGggPSBiYXNlNjQubGVuZ3RoICogMC43NTtcbiAgICB2YXIgbGVuID0gYmFzZTY0Lmxlbmd0aDtcbiAgICB2YXIgaTtcbiAgICB2YXIgcCA9IDA7XG4gICAgdmFyIGVuY29kZWQxO1xuICAgIHZhciBlbmNvZGVkMjtcbiAgICB2YXIgZW5jb2RlZDM7XG4gICAgdmFyIGVuY29kZWQ0O1xuICAgIGlmIChiYXNlNjRbYmFzZTY0Lmxlbmd0aCAtIDFdID09PSAnPScpIHtcbiAgICAgICAgYnVmZmVyTGVuZ3RoLS07XG4gICAgICAgIGlmIChiYXNlNjRbYmFzZTY0Lmxlbmd0aCAtIDJdID09PSAnPScpIHtcbiAgICAgICAgICAgIGJ1ZmZlckxlbmd0aC0tO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhciBieXRlcyA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlckxlbmd0aCk7XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgICAgIGVuY29kZWQxID0gbG9va3VwW2Jhc2U2NC5jaGFyQ29kZUF0KGkpXTtcbiAgICAgICAgZW5jb2RlZDIgPSBsb29rdXBbYmFzZTY0LmNoYXJDb2RlQXQoaSArIDEpXTtcbiAgICAgICAgZW5jb2RlZDMgPSBsb29rdXBbYmFzZTY0LmNoYXJDb2RlQXQoaSArIDIpXTtcbiAgICAgICAgZW5jb2RlZDQgPSBsb29rdXBbYmFzZTY0LmNoYXJDb2RlQXQoaSArIDMpXTtcbiAgICAgICAgYnl0ZXNbcCsrXSA9IChlbmNvZGVkMSA8PCAyKSB8IChlbmNvZGVkMiA+PiA0KTtcbiAgICAgICAgYnl0ZXNbcCsrXSA9ICgoZW5jb2RlZDIgJiAxNSkgPDwgNCkgfCAoZW5jb2RlZDMgPj4gMik7XG4gICAgICAgIGJ5dGVzW3ArK10gPSAoKGVuY29kZWQzICYgMykgPDwgNikgfCAoZW5jb2RlZDQgJiA2Myk7XG4gICAgfVxuICAgIHJldHVybiBieXRlcztcbn07XG52YXIgYXJyYXlUb1N0cmluZyA9IGZ1bmN0aW9uIChhcnJheSkge1xuICAgIHZhciBzdHIgPSAnJztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGFycmF5W2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbn07XG5leHBvcnQgdmFyIGRlY29tcHJlc3NKc29uID0gZnVuY3Rpb24gKGNvbXByZXNzZWRKc29uKSB7XG4gICAgcmV0dXJuIGFycmF5VG9TdHJpbmcocGFrby5pbmZsYXRlKGRlY29kZUZyb21CYXNlNjQoY29tcHJlc3NlZEpzb24pKSk7XG59O1xuZXhwb3J0IHZhciBwYWRTdGFydCA9IGZ1bmN0aW9uICh2YWx1ZSwgbGVuZ3RoLCBwYWRDaGFyKSB7XG4gICAgdmFyIHBhZGRpbmcgPSAnJztcbiAgICBmb3IgKHZhciBpZHggPSAwLCBsZW4gPSBsZW5ndGggLSB2YWx1ZS5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgcGFkZGluZyArPSBwYWRDaGFyO1xuICAgIH1cbiAgICByZXR1cm4gcGFkZGluZyArIHZhbHVlO1xufTtcbiJdLCJuYW1lcyI6WyJwYWtvIiwiY2hhcnMiLCJsb29rdXAiLCJVaW50OEFycmF5IiwiaSIsImxlbmd0aCIsImNoYXJDb2RlQXQiLCJkZWNvZGVGcm9tQmFzZTY0IiwiYmFzZTY0IiwiYnVmZmVyTGVuZ3RoIiwibGVuIiwicCIsImVuY29kZWQxIiwiZW5jb2RlZDIiLCJlbmNvZGVkMyIsImVuY29kZWQ0IiwiYnl0ZXMiLCJhcnJheVRvU3RyaW5nIiwiYXJyYXkiLCJzdHIiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJkZWNvbXByZXNzSnNvbiIsImNvbXByZXNzZWRKc29uIiwiaW5mbGF0ZSIsInBhZFN0YXJ0IiwidmFsdWUiLCJwYWRDaGFyIiwicGFkZGluZyIsImlkeCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@pdf-lib/standard-fonts/es/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@pdf-lib/standard-fonts/node_modules/pako/index.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Top level file is just a mixin of submodules & constants\n\nvar assign = (__webpack_require__(/*! ./lib/utils/common */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/utils/common.js\").assign);\nvar deflate = __webpack_require__(/*! ./lib/deflate */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/deflate.js\");\nvar inflate = __webpack_require__(/*! ./lib/inflate */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/inflate.js\");\nvar constants = __webpack_require__(/*! ./lib/zlib/constants */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/constants.js\");\nvar pako = {};\nassign(pako, deflate, inflate, constants);\nmodule.exports = pako;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHBkZi1saWIvc3RhbmRhcmQtZm9udHMvbm9kZV9tb2R1bGVzL3Bha28vaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsMkRBQTJEO0FBQzNEO0FBRUEsSUFBSUEsU0FBWUMsNElBQW9DO0FBRXBELElBQUlDLFVBQVlELG1CQUFPQSxDQUFDO0FBQ3hCLElBQUlFLFVBQVlGLG1CQUFPQSxDQUFDO0FBQ3hCLElBQUlHLFlBQVlILG1CQUFPQSxDQUFDO0FBRXhCLElBQUlJLE9BQU8sQ0FBQztBQUVaTCxPQUFPSyxNQUFNSCxTQUFTQyxTQUFTQztBQUUvQkUsT0FBT0MsT0FBTyxHQUFHRiIsInNvdXJjZXMiOlsid2VicGFjazovL2NpdmlsLWVuZ2luZWVyaW5nLXBsYXRmb3JtLy4vbm9kZV9tb2R1bGVzL0BwZGYtbGliL3N0YW5kYXJkLWZvbnRzL25vZGVfbW9kdWxlcy9wYWtvL2luZGV4LmpzPzZiZGEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVG9wIGxldmVsIGZpbGUgaXMganVzdCBhIG1peGluIG9mIHN1Ym1vZHVsZXMgJiBjb25zdGFudHNcbid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2lnbiAgICA9IHJlcXVpcmUoJy4vbGliL3V0aWxzL2NvbW1vbicpLmFzc2lnbjtcblxudmFyIGRlZmxhdGUgICA9IHJlcXVpcmUoJy4vbGliL2RlZmxhdGUnKTtcbnZhciBpbmZsYXRlICAgPSByZXF1aXJlKCcuL2xpYi9pbmZsYXRlJyk7XG52YXIgY29uc3RhbnRzID0gcmVxdWlyZSgnLi9saWIvemxpYi9jb25zdGFudHMnKTtcblxudmFyIHBha28gPSB7fTtcblxuYXNzaWduKHBha28sIGRlZmxhdGUsIGluZmxhdGUsIGNvbnN0YW50cyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcGFrbztcbiJdLCJuYW1lcyI6WyJhc3NpZ24iLCJyZXF1aXJlIiwiZGVmbGF0ZSIsImluZmxhdGUiLCJjb25zdGFudHMiLCJwYWtvIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/deflate.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/deflate.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar zlib_deflate = __webpack_require__(/*! ./zlib/deflate */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/deflate.js\");\nvar utils = __webpack_require__(/*! ./utils/common */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/utils/common.js\");\nvar strings = __webpack_require__(/*! ./utils/strings */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/utils/strings.js\");\nvar msg = __webpack_require__(/*! ./zlib/messages */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/messages.js\");\nvar ZStream = __webpack_require__(/*! ./zlib/zstream */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/zstream.js\");\nvar toString = Object.prototype.toString;\n/* Public constants ==========================================================*/ /* ===========================================================================*/ var Z_NO_FLUSH = 0;\nvar Z_FINISH = 4;\nvar Z_OK = 0;\nvar Z_STREAM_END = 1;\nvar Z_SYNC_FLUSH = 2;\nvar Z_DEFAULT_COMPRESSION = -1;\nvar Z_DEFAULT_STRATEGY = 0;\nvar Z_DEFLATED = 8;\n/* ===========================================================================*/ /**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/ /* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/ /**\n * Deflate.result -> Uint8Array|Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you\n * push a chunk with explicit flush (call [[Deflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/ /**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/ /**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/ /**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/ function Deflate(options) {\n    if (!(this instanceof Deflate)) return new Deflate(options);\n    this.options = utils.assign({\n        level: Z_DEFAULT_COMPRESSION,\n        method: Z_DEFLATED,\n        chunkSize: 16384,\n        windowBits: 15,\n        memLevel: 8,\n        strategy: Z_DEFAULT_STRATEGY,\n        to: \"\"\n    }, options || {});\n    var opt = this.options;\n    if (opt.raw && opt.windowBits > 0) {\n        opt.windowBits = -opt.windowBits;\n    } else if (opt.gzip && opt.windowBits > 0 && opt.windowBits < 16) {\n        opt.windowBits += 16;\n    }\n    this.err = 0; // error code, if happens (0 = Z_OK)\n    this.msg = \"\"; // error message\n    this.ended = false; // used to avoid multiple onEnd() calls\n    this.chunks = []; // chunks of compressed data\n    this.strm = new ZStream();\n    this.strm.avail_out = 0;\n    var status = zlib_deflate.deflateInit2(this.strm, opt.level, opt.method, opt.windowBits, opt.memLevel, opt.strategy);\n    if (status !== Z_OK) {\n        throw new Error(msg[status]);\n    }\n    if (opt.header) {\n        zlib_deflate.deflateSetHeader(this.strm, opt.header);\n    }\n    if (opt.dictionary) {\n        var dict;\n        // Convert data if needed\n        if (typeof opt.dictionary === \"string\") {\n            // If we need to compress text, change encoding to utf8.\n            dict = strings.string2buf(opt.dictionary);\n        } else if (toString.call(opt.dictionary) === \"[object ArrayBuffer]\") {\n            dict = new Uint8Array(opt.dictionary);\n        } else {\n            dict = opt.dictionary;\n        }\n        status = zlib_deflate.deflateSetDictionary(this.strm, dict);\n        if (status !== Z_OK) {\n            throw new Error(msg[status]);\n        }\n        this._dict_set = true;\n    }\n}\n/**\n * Deflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the compression context.\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * array format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/ Deflate.prototype.push = function(data, mode) {\n    var strm = this.strm;\n    var chunkSize = this.options.chunkSize;\n    var status, _mode;\n    if (this.ended) {\n        return false;\n    }\n    _mode = mode === ~~mode ? mode : mode === true ? Z_FINISH : Z_NO_FLUSH;\n    // Convert data if needed\n    if (typeof data === \"string\") {\n        // If we need to compress text, change encoding to utf8.\n        strm.input = strings.string2buf(data);\n    } else if (toString.call(data) === \"[object ArrayBuffer]\") {\n        strm.input = new Uint8Array(data);\n    } else {\n        strm.input = data;\n    }\n    strm.next_in = 0;\n    strm.avail_in = strm.input.length;\n    do {\n        if (strm.avail_out === 0) {\n            strm.output = new utils.Buf8(chunkSize);\n            strm.next_out = 0;\n            strm.avail_out = chunkSize;\n        }\n        status = zlib_deflate.deflate(strm, _mode); /* no bad return value */ \n        if (status !== Z_STREAM_END && status !== Z_OK) {\n            this.onEnd(status);\n            this.ended = true;\n            return false;\n        }\n        if (strm.avail_out === 0 || strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH)) {\n            if (this.options.to === \"string\") {\n                this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));\n            } else {\n                this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n            }\n        }\n    }while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);\n    // Finalize on the last chunk.\n    if (_mode === Z_FINISH) {\n        status = zlib_deflate.deflateEnd(this.strm);\n        this.onEnd(status);\n        this.ended = true;\n        return status === Z_OK;\n    }\n    // callback interim results if Z_SYNC_FLUSH.\n    if (_mode === Z_SYNC_FLUSH) {\n        this.onEnd(Z_OK);\n        strm.avail_out = 0;\n        return true;\n    }\n    return true;\n};\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): output data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/ Deflate.prototype.onData = function(chunk) {\n    this.chunks.push(chunk);\n};\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/ Deflate.prototype.onEnd = function(status) {\n    // On success - join\n    if (status === Z_OK) {\n        if (this.options.to === \"string\") {\n            this.result = this.chunks.join(\"\");\n        } else {\n            this.result = utils.flattenChunks(this.chunks);\n        }\n    }\n    this.chunks = [];\n    this.err = status;\n    this.msg = this.strm.msg;\n};\n/**\n * deflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/ function deflate(input, options) {\n    var deflator = new Deflate(options);\n    deflator.push(input, true);\n    // That will never happens, if you don't cheat with options :)\n    if (deflator.err) {\n        throw deflator.msg || msg[deflator.err];\n    }\n    return deflator.result;\n}\n/**\n * deflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/ function deflateRaw(input, options) {\n    options = options || {};\n    options.raw = true;\n    return deflate(input, options);\n}\n/**\n * gzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/ function gzip(input, options) {\n    options = options || {};\n    options.gzip = true;\n    return deflate(input, options);\n}\nexports.Deflate = Deflate;\nexports.deflate = deflate;\nexports.deflateRaw = deflateRaw;\nexports.gzip = gzip;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHBkZi1saWIvc3RhbmRhcmQtZm9udHMvbm9kZV9tb2R1bGVzL3Bha28vbGliL2RlZmxhdGUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFHQSxJQUFJQSxlQUFlQyxtQkFBT0EsQ0FBQztBQUMzQixJQUFJQyxRQUFlRCxtQkFBT0EsQ0FBQztBQUMzQixJQUFJRSxVQUFlRixtQkFBT0EsQ0FBQztBQUMzQixJQUFJRyxNQUFlSCxtQkFBT0EsQ0FBQztBQUMzQixJQUFJSSxVQUFlSixtQkFBT0EsQ0FBQztBQUUzQixJQUFJSyxXQUFXQyxPQUFPQyxTQUFTLENBQUNGLFFBQVE7QUFFeEMsOEVBQThFLEdBQzlFLDhFQUE4RSxHQUU5RSxJQUFJRyxhQUFrQjtBQUN0QixJQUFJQyxXQUFrQjtBQUV0QixJQUFJQyxPQUFrQjtBQUN0QixJQUFJQyxlQUFrQjtBQUN0QixJQUFJQyxlQUFrQjtBQUV0QixJQUFJQyx3QkFBd0IsQ0FBQztBQUU3QixJQUFJQyxxQkFBd0I7QUFFNUIsSUFBSUMsYUFBYztBQUVsQiw4RUFBOEUsR0FHOUU7Ozs7OztFQU1FLEdBRUY7Ozs7RUFJRSxHQUVGOzs7Ozs7OztFQVFFLEdBRUY7Ozs7Ozs7RUFPRSxHQUVGOzs7O0VBSUUsR0FHRjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBZ0RFLEdBQ0YsU0FBU0MsUUFBUUMsT0FBTztJQUN0QixJQUFJLENBQUUsS0FBSSxZQUFZRCxPQUFNLEdBQUksT0FBTyxJQUFJQSxRQUFRQztJQUVuRCxJQUFJLENBQUNBLE9BQU8sR0FBR2hCLE1BQU1pQixNQUFNLENBQUM7UUFDMUJDLE9BQU9OO1FBQ1BPLFFBQVFMO1FBQ1JNLFdBQVc7UUFDWEMsWUFBWTtRQUNaQyxVQUFVO1FBQ1ZDLFVBQVVWO1FBQ1ZXLElBQUk7SUFDTixHQUFHUixXQUFXLENBQUM7SUFFZixJQUFJUyxNQUFNLElBQUksQ0FBQ1QsT0FBTztJQUV0QixJQUFJUyxJQUFJQyxHQUFHLElBQUtELElBQUlKLFVBQVUsR0FBRyxHQUFJO1FBQ25DSSxJQUFJSixVQUFVLEdBQUcsQ0FBQ0ksSUFBSUosVUFBVTtJQUNsQyxPQUVLLElBQUlJLElBQUlFLElBQUksSUFBS0YsSUFBSUosVUFBVSxHQUFHLEtBQU9JLElBQUlKLFVBQVUsR0FBRyxJQUFLO1FBQ2xFSSxJQUFJSixVQUFVLElBQUk7SUFDcEI7SUFFQSxJQUFJLENBQUNPLEdBQUcsR0FBTSxHQUFRLG9DQUFvQztJQUMxRCxJQUFJLENBQUMxQixHQUFHLEdBQU0sSUFBUSxnQkFBZ0I7SUFDdEMsSUFBSSxDQUFDMkIsS0FBSyxHQUFJLE9BQVEsdUNBQXVDO0lBQzdELElBQUksQ0FBQ0MsTUFBTSxHQUFHLEVBQUUsRUFBTSw0QkFBNEI7SUFFbEQsSUFBSSxDQUFDQyxJQUFJLEdBQUcsSUFBSTVCO0lBQ2hCLElBQUksQ0FBQzRCLElBQUksQ0FBQ0MsU0FBUyxHQUFHO0lBRXRCLElBQUlDLFNBQVNuQyxhQUFhb0MsWUFBWSxDQUNwQyxJQUFJLENBQUNILElBQUksRUFDVE4sSUFBSVAsS0FBSyxFQUNUTyxJQUFJTixNQUFNLEVBQ1ZNLElBQUlKLFVBQVUsRUFDZEksSUFBSUgsUUFBUSxFQUNaRyxJQUFJRixRQUFRO0lBR2QsSUFBSVUsV0FBV3hCLE1BQU07UUFDbkIsTUFBTSxJQUFJMEIsTUFBTWpDLEdBQUcsQ0FBQytCLE9BQU87SUFDN0I7SUFFQSxJQUFJUixJQUFJVyxNQUFNLEVBQUU7UUFDZHRDLGFBQWF1QyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUNOLElBQUksRUFBRU4sSUFBSVcsTUFBTTtJQUNyRDtJQUVBLElBQUlYLElBQUlhLFVBQVUsRUFBRTtRQUNsQixJQUFJQztRQUNKLHlCQUF5QjtRQUN6QixJQUFJLE9BQU9kLElBQUlhLFVBQVUsS0FBSyxVQUFVO1lBQ3RDLHdEQUF3RDtZQUN4REMsT0FBT3RDLFFBQVF1QyxVQUFVLENBQUNmLElBQUlhLFVBQVU7UUFDMUMsT0FBTyxJQUFJbEMsU0FBU3FDLElBQUksQ0FBQ2hCLElBQUlhLFVBQVUsTUFBTSx3QkFBd0I7WUFDbkVDLE9BQU8sSUFBSUcsV0FBV2pCLElBQUlhLFVBQVU7UUFDdEMsT0FBTztZQUNMQyxPQUFPZCxJQUFJYSxVQUFVO1FBQ3ZCO1FBRUFMLFNBQVNuQyxhQUFhNkMsb0JBQW9CLENBQUMsSUFBSSxDQUFDWixJQUFJLEVBQUVRO1FBRXRELElBQUlOLFdBQVd4QixNQUFNO1lBQ25CLE1BQU0sSUFBSTBCLE1BQU1qQyxHQUFHLENBQUMrQixPQUFPO1FBQzdCO1FBRUEsSUFBSSxDQUFDVyxTQUFTLEdBQUc7SUFDbkI7QUFDRjtBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBNEJFLEdBQ0Y3QixRQUFRVCxTQUFTLENBQUN1QyxJQUFJLEdBQUcsU0FBVUMsSUFBSSxFQUFFQyxJQUFJO0lBQzNDLElBQUloQixPQUFPLElBQUksQ0FBQ0EsSUFBSTtJQUNwQixJQUFJWCxZQUFZLElBQUksQ0FBQ0osT0FBTyxDQUFDSSxTQUFTO0lBQ3RDLElBQUlhLFFBQVFlO0lBRVosSUFBSSxJQUFJLENBQUNuQixLQUFLLEVBQUU7UUFBRSxPQUFPO0lBQU87SUFFaENtQixRQUFRLFNBQVUsQ0FBQyxDQUFDRCxPQUFRQSxPQUFRLFNBQVUsT0FBUXZDLFdBQVdEO0lBRWpFLHlCQUF5QjtJQUN6QixJQUFJLE9BQU91QyxTQUFTLFVBQVU7UUFDNUIsd0RBQXdEO1FBQ3hEZixLQUFLa0IsS0FBSyxHQUFHaEQsUUFBUXVDLFVBQVUsQ0FBQ007SUFDbEMsT0FBTyxJQUFJMUMsU0FBU3FDLElBQUksQ0FBQ0ssVUFBVSx3QkFBd0I7UUFDekRmLEtBQUtrQixLQUFLLEdBQUcsSUFBSVAsV0FBV0k7SUFDOUIsT0FBTztRQUNMZixLQUFLa0IsS0FBSyxHQUFHSDtJQUNmO0lBRUFmLEtBQUttQixPQUFPLEdBQUc7SUFDZm5CLEtBQUtvQixRQUFRLEdBQUdwQixLQUFLa0IsS0FBSyxDQUFDRyxNQUFNO0lBRWpDLEdBQUc7UUFDRCxJQUFJckIsS0FBS0MsU0FBUyxLQUFLLEdBQUc7WUFDeEJELEtBQUtzQixNQUFNLEdBQUcsSUFBSXJELE1BQU1zRCxJQUFJLENBQUNsQztZQUM3QlcsS0FBS3dCLFFBQVEsR0FBRztZQUNoQnhCLEtBQUtDLFNBQVMsR0FBR1o7UUFDbkI7UUFDQWEsU0FBU25DLGFBQWEwRCxPQUFPLENBQUN6QixNQUFNaUIsUUFBVyx1QkFBdUI7UUFFdEUsSUFBSWYsV0FBV3ZCLGdCQUFnQnVCLFdBQVd4QixNQUFNO1lBQzlDLElBQUksQ0FBQ2dELEtBQUssQ0FBQ3hCO1lBQ1gsSUFBSSxDQUFDSixLQUFLLEdBQUc7WUFDYixPQUFPO1FBQ1Q7UUFDQSxJQUFJRSxLQUFLQyxTQUFTLEtBQUssS0FBTUQsS0FBS29CLFFBQVEsS0FBSyxLQUFNSCxDQUFBQSxVQUFVeEMsWUFBWXdDLFVBQVVyQyxZQUFXLEdBQUs7WUFDbkcsSUFBSSxJQUFJLENBQUNLLE9BQU8sQ0FBQ1EsRUFBRSxLQUFLLFVBQVU7Z0JBQ2hDLElBQUksQ0FBQ2tDLE1BQU0sQ0FBQ3pELFFBQVEwRCxhQUFhLENBQUMzRCxNQUFNNEQsU0FBUyxDQUFDN0IsS0FBS3NCLE1BQU0sRUFBRXRCLEtBQUt3QixRQUFRO1lBQzlFLE9BQU87Z0JBQ0wsSUFBSSxDQUFDRyxNQUFNLENBQUMxRCxNQUFNNEQsU0FBUyxDQUFDN0IsS0FBS3NCLE1BQU0sRUFBRXRCLEtBQUt3QixRQUFRO1lBQ3hEO1FBQ0Y7SUFDRixRQUFTLENBQUN4QixLQUFLb0IsUUFBUSxHQUFHLEtBQUtwQixLQUFLQyxTQUFTLEtBQUssTUFBTUMsV0FBV3ZCLGNBQWM7SUFFakYsOEJBQThCO0lBQzlCLElBQUlzQyxVQUFVeEMsVUFBVTtRQUN0QnlCLFNBQVNuQyxhQUFhK0QsVUFBVSxDQUFDLElBQUksQ0FBQzlCLElBQUk7UUFDMUMsSUFBSSxDQUFDMEIsS0FBSyxDQUFDeEI7UUFDWCxJQUFJLENBQUNKLEtBQUssR0FBRztRQUNiLE9BQU9JLFdBQVd4QjtJQUNwQjtJQUVBLDRDQUE0QztJQUM1QyxJQUFJdUMsVUFBVXJDLGNBQWM7UUFDMUIsSUFBSSxDQUFDOEMsS0FBSyxDQUFDaEQ7UUFDWHNCLEtBQUtDLFNBQVMsR0FBRztRQUNqQixPQUFPO0lBQ1Q7SUFFQSxPQUFPO0FBQ1Q7QUFHQTs7Ozs7Ozs7RUFRRSxHQUNGakIsUUFBUVQsU0FBUyxDQUFDb0QsTUFBTSxHQUFHLFNBQVVJLEtBQUs7SUFDeEMsSUFBSSxDQUFDaEMsTUFBTSxDQUFDZSxJQUFJLENBQUNpQjtBQUNuQjtBQUdBOzs7Ozs7Ozs7RUFTRSxHQUNGL0MsUUFBUVQsU0FBUyxDQUFDbUQsS0FBSyxHQUFHLFNBQVV4QixNQUFNO0lBQ3hDLG9CQUFvQjtJQUNwQixJQUFJQSxXQUFXeEIsTUFBTTtRQUNuQixJQUFJLElBQUksQ0FBQ08sT0FBTyxDQUFDUSxFQUFFLEtBQUssVUFBVTtZQUNoQyxJQUFJLENBQUN1QyxNQUFNLEdBQUcsSUFBSSxDQUFDakMsTUFBTSxDQUFDa0MsSUFBSSxDQUFDO1FBQ2pDLE9BQU87WUFDTCxJQUFJLENBQUNELE1BQU0sR0FBRy9ELE1BQU1pRSxhQUFhLENBQUMsSUFBSSxDQUFDbkMsTUFBTTtRQUMvQztJQUNGO0lBQ0EsSUFBSSxDQUFDQSxNQUFNLEdBQUcsRUFBRTtJQUNoQixJQUFJLENBQUNGLEdBQUcsR0FBR0s7SUFDWCxJQUFJLENBQUMvQixHQUFHLEdBQUcsSUFBSSxDQUFDNkIsSUFBSSxDQUFDN0IsR0FBRztBQUMxQjtBQUdBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUFpQ0UsR0FDRixTQUFTc0QsUUFBUVAsS0FBSyxFQUFFakMsT0FBTztJQUM3QixJQUFJa0QsV0FBVyxJQUFJbkQsUUFBUUM7SUFFM0JrRCxTQUFTckIsSUFBSSxDQUFDSSxPQUFPO0lBRXJCLDhEQUE4RDtJQUM5RCxJQUFJaUIsU0FBU3RDLEdBQUcsRUFBRTtRQUFFLE1BQU1zQyxTQUFTaEUsR0FBRyxJQUFJQSxHQUFHLENBQUNnRSxTQUFTdEMsR0FBRyxDQUFDO0lBQUU7SUFFN0QsT0FBT3NDLFNBQVNILE1BQU07QUFDeEI7QUFHQTs7Ozs7OztFQU9FLEdBQ0YsU0FBU0ksV0FBV2xCLEtBQUssRUFBRWpDLE9BQU87SUFDaENBLFVBQVVBLFdBQVcsQ0FBQztJQUN0QkEsUUFBUVUsR0FBRyxHQUFHO0lBQ2QsT0FBTzhCLFFBQVFQLE9BQU9qQztBQUN4QjtBQUdBOzs7Ozs7O0VBT0UsR0FDRixTQUFTVyxLQUFLc0IsS0FBSyxFQUFFakMsT0FBTztJQUMxQkEsVUFBVUEsV0FBVyxDQUFDO0lBQ3RCQSxRQUFRVyxJQUFJLEdBQUc7SUFDZixPQUFPNkIsUUFBUVAsT0FBT2pDO0FBQ3hCO0FBR0FvRCxlQUFlLEdBQUdyRDtBQUNsQnFELGVBQWUsR0FBR1o7QUFDbEJZLGtCQUFrQixHQUFHRDtBQUNyQkMsWUFBWSxHQUFHekMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaXZpbC1lbmdpbmVlcmluZy1wbGF0Zm9ybS8uL25vZGVfbW9kdWxlcy9AcGRmLWxpYi9zdGFuZGFyZC1mb250cy9ub2RlX21vZHVsZXMvcGFrby9saWIvZGVmbGF0ZS5qcz85YWU3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuXG52YXIgemxpYl9kZWZsYXRlID0gcmVxdWlyZSgnLi96bGliL2RlZmxhdGUnKTtcbnZhciB1dGlscyAgICAgICAgPSByZXF1aXJlKCcuL3V0aWxzL2NvbW1vbicpO1xudmFyIHN0cmluZ3MgICAgICA9IHJlcXVpcmUoJy4vdXRpbHMvc3RyaW5ncycpO1xudmFyIG1zZyAgICAgICAgICA9IHJlcXVpcmUoJy4vemxpYi9tZXNzYWdlcycpO1xudmFyIFpTdHJlYW0gICAgICA9IHJlcXVpcmUoJy4vemxpYi96c3RyZWFtJyk7XG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qIFB1YmxpYyBjb25zdGFudHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG52YXIgWl9OT19GTFVTSCAgICAgID0gMDtcbnZhciBaX0ZJTklTSCAgICAgICAgPSA0O1xuXG52YXIgWl9PSyAgICAgICAgICAgID0gMDtcbnZhciBaX1NUUkVBTV9FTkQgICAgPSAxO1xudmFyIFpfU1lOQ19GTFVTSCAgICA9IDI7XG5cbnZhciBaX0RFRkFVTFRfQ09NUFJFU1NJT04gPSAtMTtcblxudmFyIFpfREVGQVVMVF9TVFJBVEVHWSAgICA9IDA7XG5cbnZhciBaX0RFRkxBVEVEICA9IDg7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cblxuLyoqXG4gKiBjbGFzcyBEZWZsYXRlXG4gKlxuICogR2VuZXJpYyBKUy1zdHlsZSB3cmFwcGVyIGZvciB6bGliIGNhbGxzLiBJZiB5b3UgZG9uJ3QgbmVlZFxuICogc3RyZWFtaW5nIGJlaGF2aW91ciAtIHVzZSBtb3JlIHNpbXBsZSBmdW5jdGlvbnM6IFtbZGVmbGF0ZV1dLFxuICogW1tkZWZsYXRlUmF3XV0gYW5kIFtbZ3ppcF1dLlxuICoqL1xuXG4vKiBpbnRlcm5hbFxuICogRGVmbGF0ZS5jaHVua3MgLT4gQXJyYXlcbiAqXG4gKiBDaHVua3Mgb2Ygb3V0cHV0IGRhdGEsIGlmIFtbRGVmbGF0ZSNvbkRhdGFdXSBub3Qgb3ZlcnJpZGRlbi5cbiAqKi9cblxuLyoqXG4gKiBEZWZsYXRlLnJlc3VsdCAtPiBVaW50OEFycmF5fEFycmF5XG4gKlxuICogQ29tcHJlc3NlZCByZXN1bHQsIGdlbmVyYXRlZCBieSBkZWZhdWx0IFtbRGVmbGF0ZSNvbkRhdGFdXVxuICogYW5kIFtbRGVmbGF0ZSNvbkVuZF1dIGhhbmRsZXJzLiBGaWxsZWQgYWZ0ZXIgeW91IHB1c2ggbGFzdCBjaHVua1xuICogKGNhbGwgW1tEZWZsYXRlI3B1c2hdXSB3aXRoIGBaX0ZJTklTSGAgLyBgdHJ1ZWAgcGFyYW0pICBvciBpZiB5b3VcbiAqIHB1c2ggYSBjaHVuayB3aXRoIGV4cGxpY2l0IGZsdXNoIChjYWxsIFtbRGVmbGF0ZSNwdXNoXV0gd2l0aFxuICogYFpfU1lOQ19GTFVTSGAgcGFyYW0pLlxuICoqL1xuXG4vKipcbiAqIERlZmxhdGUuZXJyIC0+IE51bWJlclxuICpcbiAqIEVycm9yIGNvZGUgYWZ0ZXIgZGVmbGF0ZSBmaW5pc2hlZC4gMCAoWl9PSykgb24gc3VjY2Vzcy5cbiAqIFlvdSB3aWxsIG5vdCBuZWVkIGl0IGluIHJlYWwgbGlmZSwgYmVjYXVzZSBkZWZsYXRlIGVycm9yc1xuICogYXJlIHBvc3NpYmxlIG9ubHkgb24gd3Jvbmcgb3B0aW9ucyBvciBiYWQgYG9uRGF0YWAgLyBgb25FbmRgXG4gKiBjdXN0b20gaGFuZGxlcnMuXG4gKiovXG5cbi8qKlxuICogRGVmbGF0ZS5tc2cgLT4gU3RyaW5nXG4gKlxuICogRXJyb3IgbWVzc2FnZSwgaWYgW1tEZWZsYXRlLmVycl1dICE9IDBcbiAqKi9cblxuXG4vKipcbiAqIG5ldyBEZWZsYXRlKG9wdGlvbnMpXG4gKiAtIG9wdGlvbnMgKE9iamVjdCk6IHpsaWIgZGVmbGF0ZSBvcHRpb25zLlxuICpcbiAqIENyZWF0ZXMgbmV3IGRlZmxhdG9yIGluc3RhbmNlIHdpdGggc3BlY2lmaWVkIHBhcmFtcy4gVGhyb3dzIGV4Y2VwdGlvblxuICogb24gYmFkIHBhcmFtcy4gU3VwcG9ydGVkIG9wdGlvbnM6XG4gKlxuICogLSBgbGV2ZWxgXG4gKiAtIGB3aW5kb3dCaXRzYFxuICogLSBgbWVtTGV2ZWxgXG4gKiAtIGBzdHJhdGVneWBcbiAqIC0gYGRpY3Rpb25hcnlgXG4gKlxuICogW2h0dHA6Ly96bGliLm5ldC9tYW51YWwuaHRtbCNBZHZhbmNlZF0oaHR0cDovL3psaWIubmV0L21hbnVhbC5odG1sI0FkdmFuY2VkKVxuICogZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gdGhlc2UuXG4gKlxuICogQWRkaXRpb25hbCBvcHRpb25zLCBmb3IgaW50ZXJuYWwgbmVlZHM6XG4gKlxuICogLSBgY2h1bmtTaXplYCAtIHNpemUgb2YgZ2VuZXJhdGVkIGRhdGEgY2h1bmtzICgxNksgYnkgZGVmYXVsdClcbiAqIC0gYHJhd2AgKEJvb2xlYW4pIC0gZG8gcmF3IGRlZmxhdGVcbiAqIC0gYGd6aXBgIChCb29sZWFuKSAtIGNyZWF0ZSBnemlwIHdyYXBwZXJcbiAqIC0gYHRvYCAoU3RyaW5nKSAtIGlmIGVxdWFsIHRvICdzdHJpbmcnLCB0aGVuIHJlc3VsdCB3aWxsIGJlIFwiYmluYXJ5IHN0cmluZ1wiXG4gKiAgICAoZWFjaCBjaGFyIGNvZGUgWzAuLjI1NV0pXG4gKiAtIGBoZWFkZXJgIChPYmplY3QpIC0gY3VzdG9tIGhlYWRlciBmb3IgZ3ppcFxuICogICAtIGB0ZXh0YCAoQm9vbGVhbikgLSB0cnVlIGlmIGNvbXByZXNzZWQgZGF0YSBiZWxpZXZlZCB0byBiZSB0ZXh0XG4gKiAgIC0gYHRpbWVgIChOdW1iZXIpIC0gbW9kaWZpY2F0aW9uIHRpbWUsIHVuaXggdGltZXN0YW1wXG4gKiAgIC0gYG9zYCAoTnVtYmVyKSAtIG9wZXJhdGlvbiBzeXN0ZW0gY29kZVxuICogICAtIGBleHRyYWAgKEFycmF5KSAtIGFycmF5IG9mIGJ5dGVzIHdpdGggZXh0cmEgZGF0YSAobWF4IDY1NTM2KVxuICogICAtIGBuYW1lYCAoU3RyaW5nKSAtIGZpbGUgbmFtZSAoYmluYXJ5IHN0cmluZylcbiAqICAgLSBgY29tbWVudGAgKFN0cmluZykgLSBjb21tZW50IChiaW5hcnkgc3RyaW5nKVxuICogICAtIGBoY3JjYCAoQm9vbGVhbikgLSB0cnVlIGlmIGhlYWRlciBjcmMgc2hvdWxkIGJlIGFkZGVkXG4gKlxuICogIyMjIyMgRXhhbXBsZTpcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiB2YXIgcGFrbyA9IHJlcXVpcmUoJ3Bha28nKVxuICogICAsIGNodW5rMSA9IFVpbnQ4QXJyYXkoWzEsMiwzLDQsNSw2LDcsOCw5XSlcbiAqICAgLCBjaHVuazIgPSBVaW50OEFycmF5KFsxMCwxMSwxMiwxMywxNCwxNSwxNiwxNywxOCwxOV0pO1xuICpcbiAqIHZhciBkZWZsYXRlID0gbmV3IHBha28uRGVmbGF0ZSh7IGxldmVsOiAzfSk7XG4gKlxuICogZGVmbGF0ZS5wdXNoKGNodW5rMSwgZmFsc2UpO1xuICogZGVmbGF0ZS5wdXNoKGNodW5rMiwgdHJ1ZSk7ICAvLyB0cnVlIC0+IGxhc3QgY2h1bmtcbiAqXG4gKiBpZiAoZGVmbGF0ZS5lcnIpIHsgdGhyb3cgbmV3IEVycm9yKGRlZmxhdGUuZXJyKTsgfVxuICpcbiAqIGNvbnNvbGUubG9nKGRlZmxhdGUucmVzdWx0KTtcbiAqIGBgYFxuICoqL1xuZnVuY3Rpb24gRGVmbGF0ZShvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBEZWZsYXRlKSkgcmV0dXJuIG5ldyBEZWZsYXRlKG9wdGlvbnMpO1xuXG4gIHRoaXMub3B0aW9ucyA9IHV0aWxzLmFzc2lnbih7XG4gICAgbGV2ZWw6IFpfREVGQVVMVF9DT01QUkVTU0lPTixcbiAgICBtZXRob2Q6IFpfREVGTEFURUQsXG4gICAgY2h1bmtTaXplOiAxNjM4NCxcbiAgICB3aW5kb3dCaXRzOiAxNSxcbiAgICBtZW1MZXZlbDogOCxcbiAgICBzdHJhdGVneTogWl9ERUZBVUxUX1NUUkFURUdZLFxuICAgIHRvOiAnJ1xuICB9LCBvcHRpb25zIHx8IHt9KTtcblxuICB2YXIgb3B0ID0gdGhpcy5vcHRpb25zO1xuXG4gIGlmIChvcHQucmF3ICYmIChvcHQud2luZG93Qml0cyA+IDApKSB7XG4gICAgb3B0LndpbmRvd0JpdHMgPSAtb3B0LndpbmRvd0JpdHM7XG4gIH1cblxuICBlbHNlIGlmIChvcHQuZ3ppcCAmJiAob3B0LndpbmRvd0JpdHMgPiAwKSAmJiAob3B0LndpbmRvd0JpdHMgPCAxNikpIHtcbiAgICBvcHQud2luZG93Qml0cyArPSAxNjtcbiAgfVxuXG4gIHRoaXMuZXJyICAgID0gMDsgICAgICAvLyBlcnJvciBjb2RlLCBpZiBoYXBwZW5zICgwID0gWl9PSylcbiAgdGhpcy5tc2cgICAgPSAnJzsgICAgIC8vIGVycm9yIG1lc3NhZ2VcbiAgdGhpcy5lbmRlZCAgPSBmYWxzZTsgIC8vIHVzZWQgdG8gYXZvaWQgbXVsdGlwbGUgb25FbmQoKSBjYWxsc1xuICB0aGlzLmNodW5rcyA9IFtdOyAgICAgLy8gY2h1bmtzIG9mIGNvbXByZXNzZWQgZGF0YVxuXG4gIHRoaXMuc3RybSA9IG5ldyBaU3RyZWFtKCk7XG4gIHRoaXMuc3RybS5hdmFpbF9vdXQgPSAwO1xuXG4gIHZhciBzdGF0dXMgPSB6bGliX2RlZmxhdGUuZGVmbGF0ZUluaXQyKFxuICAgIHRoaXMuc3RybSxcbiAgICBvcHQubGV2ZWwsXG4gICAgb3B0Lm1ldGhvZCxcbiAgICBvcHQud2luZG93Qml0cyxcbiAgICBvcHQubWVtTGV2ZWwsXG4gICAgb3B0LnN0cmF0ZWd5XG4gICk7XG5cbiAgaWYgKHN0YXR1cyAhPT0gWl9PSykge1xuICAgIHRocm93IG5ldyBFcnJvcihtc2dbc3RhdHVzXSk7XG4gIH1cblxuICBpZiAob3B0LmhlYWRlcikge1xuICAgIHpsaWJfZGVmbGF0ZS5kZWZsYXRlU2V0SGVhZGVyKHRoaXMuc3RybSwgb3B0LmhlYWRlcik7XG4gIH1cblxuICBpZiAob3B0LmRpY3Rpb25hcnkpIHtcbiAgICB2YXIgZGljdDtcbiAgICAvLyBDb252ZXJ0IGRhdGEgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBvcHQuZGljdGlvbmFyeSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIElmIHdlIG5lZWQgdG8gY29tcHJlc3MgdGV4dCwgY2hhbmdlIGVuY29kaW5nIHRvIHV0ZjguXG4gICAgICBkaWN0ID0gc3RyaW5ncy5zdHJpbmcyYnVmKG9wdC5kaWN0aW9uYXJ5KTtcbiAgICB9IGVsc2UgaWYgKHRvU3RyaW5nLmNhbGwob3B0LmRpY3Rpb25hcnkpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nKSB7XG4gICAgICBkaWN0ID0gbmV3IFVpbnQ4QXJyYXkob3B0LmRpY3Rpb25hcnkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkaWN0ID0gb3B0LmRpY3Rpb25hcnk7XG4gICAgfVxuXG4gICAgc3RhdHVzID0gemxpYl9kZWZsYXRlLmRlZmxhdGVTZXREaWN0aW9uYXJ5KHRoaXMuc3RybSwgZGljdCk7XG5cbiAgICBpZiAoc3RhdHVzICE9PSBaX09LKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IobXNnW3N0YXR1c10pO1xuICAgIH1cblxuICAgIHRoaXMuX2RpY3Rfc2V0ID0gdHJ1ZTtcbiAgfVxufVxuXG4vKipcbiAqIERlZmxhdGUjcHVzaChkYXRhWywgbW9kZV0pIC0+IEJvb2xlYW5cbiAqIC0gZGF0YSAoVWludDhBcnJheXxBcnJheXxBcnJheUJ1ZmZlcnxTdHJpbmcpOiBpbnB1dCBkYXRhLiBTdHJpbmdzIHdpbGwgYmVcbiAqICAgY29udmVydGVkIHRvIHV0ZjggYnl0ZSBzZXF1ZW5jZS5cbiAqIC0gbW9kZSAoTnVtYmVyfEJvb2xlYW4pOiAwLi42IGZvciBjb3JyZXNwb25kaW5nIFpfTk9fRkxVU0guLlpfVFJFRSBtb2Rlcy5cbiAqICAgU2VlIGNvbnN0YW50cy4gU2tpcHBlZCBvciBgZmFsc2VgIG1lYW5zIFpfTk9fRkxVU0gsIGB0cnVlYCBtZWFucyBaX0ZJTklTSC5cbiAqXG4gKiBTZW5kcyBpbnB1dCBkYXRhIHRvIGRlZmxhdGUgcGlwZSwgZ2VuZXJhdGluZyBbW0RlZmxhdGUjb25EYXRhXV0gY2FsbHMgd2l0aFxuICogbmV3IGNvbXByZXNzZWQgY2h1bmtzLiBSZXR1cm5zIGB0cnVlYCBvbiBzdWNjZXNzLiBUaGUgbGFzdCBkYXRhIGJsb2NrIG11c3QgaGF2ZVxuICogbW9kZSBaX0ZJTklTSCAob3IgYHRydWVgKS4gVGhhdCB3aWxsIGZsdXNoIGludGVybmFsIHBlbmRpbmcgYnVmZmVycyBhbmQgY2FsbFxuICogW1tEZWZsYXRlI29uRW5kXV0uIEZvciBpbnRlcmltIGV4cGxpY2l0IGZsdXNoZXMgKHdpdGhvdXQgZW5kaW5nIHRoZSBzdHJlYW0pIHlvdVxuICogY2FuIHVzZSBtb2RlIFpfU1lOQ19GTFVTSCwga2VlcGluZyB0aGUgY29tcHJlc3Npb24gY29udGV4dC5cbiAqXG4gKiBPbiBmYWlsIGNhbGwgW1tEZWZsYXRlI29uRW5kXV0gd2l0aCBlcnJvciBjb2RlIGFuZCByZXR1cm4gZmFsc2UuXG4gKlxuICogV2Ugc3Ryb25nbHkgcmVjb21tZW5kIHRvIHVzZSBgVWludDhBcnJheWAgb24gaW5wdXQgZm9yIGJlc3Qgc3BlZWQgKG91dHB1dFxuICogYXJyYXkgZm9ybWF0IGlzIGRldGVjdGVkIGF1dG9tYXRpY2FsbHkpLiBBbHNvLCBkb24ndCBza2lwIGxhc3QgcGFyYW0gYW5kIGFsd2F5c1xuICogdXNlIHRoZSBzYW1lIHR5cGUgaW4geW91ciBjb2RlIChib29sZWFuIG9yIG51bWJlcikuIFRoYXQgd2lsbCBpbXByb3ZlIEpTIHNwZWVkLlxuICpcbiAqIEZvciByZWd1bGFyIGBBcnJheWAtcyBtYWtlIHN1cmUgYWxsIGVsZW1lbnRzIGFyZSBbMC4uMjU1XS5cbiAqXG4gKiAjIyMjIyBFeGFtcGxlXG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogcHVzaChjaHVuaywgZmFsc2UpOyAvLyBwdXNoIG9uZSBvZiBkYXRhIGNodW5rc1xuICogLi4uXG4gKiBwdXNoKGNodW5rLCB0cnVlKTsgIC8vIHB1c2ggbGFzdCBjaHVua1xuICogYGBgXG4gKiovXG5EZWZsYXRlLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGRhdGEsIG1vZGUpIHtcbiAgdmFyIHN0cm0gPSB0aGlzLnN0cm07XG4gIHZhciBjaHVua1NpemUgPSB0aGlzLm9wdGlvbnMuY2h1bmtTaXplO1xuICB2YXIgc3RhdHVzLCBfbW9kZTtcblxuICBpZiAodGhpcy5lbmRlZCkgeyByZXR1cm4gZmFsc2U7IH1cblxuICBfbW9kZSA9IChtb2RlID09PSB+fm1vZGUpID8gbW9kZSA6ICgobW9kZSA9PT0gdHJ1ZSkgPyBaX0ZJTklTSCA6IFpfTk9fRkxVU0gpO1xuXG4gIC8vIENvbnZlcnQgZGF0YSBpZiBuZWVkZWRcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgIC8vIElmIHdlIG5lZWQgdG8gY29tcHJlc3MgdGV4dCwgY2hhbmdlIGVuY29kaW5nIHRvIHV0ZjguXG4gICAgc3RybS5pbnB1dCA9IHN0cmluZ3Muc3RyaW5nMmJ1ZihkYXRhKTtcbiAgfSBlbHNlIGlmICh0b1N0cmluZy5jYWxsKGRhdGEpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nKSB7XG4gICAgc3RybS5pbnB1dCA9IG5ldyBVaW50OEFycmF5KGRhdGEpO1xuICB9IGVsc2Uge1xuICAgIHN0cm0uaW5wdXQgPSBkYXRhO1xuICB9XG5cbiAgc3RybS5uZXh0X2luID0gMDtcbiAgc3RybS5hdmFpbF9pbiA9IHN0cm0uaW5wdXQubGVuZ3RoO1xuXG4gIGRvIHtcbiAgICBpZiAoc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgIHN0cm0ub3V0cHV0ID0gbmV3IHV0aWxzLkJ1ZjgoY2h1bmtTaXplKTtcbiAgICAgIHN0cm0ubmV4dF9vdXQgPSAwO1xuICAgICAgc3RybS5hdmFpbF9vdXQgPSBjaHVua1NpemU7XG4gICAgfVxuICAgIHN0YXR1cyA9IHpsaWJfZGVmbGF0ZS5kZWZsYXRlKHN0cm0sIF9tb2RlKTsgICAgLyogbm8gYmFkIHJldHVybiB2YWx1ZSAqL1xuXG4gICAgaWYgKHN0YXR1cyAhPT0gWl9TVFJFQU1fRU5EICYmIHN0YXR1cyAhPT0gWl9PSykge1xuICAgICAgdGhpcy5vbkVuZChzdGF0dXMpO1xuICAgICAgdGhpcy5lbmRlZCA9IHRydWU7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChzdHJtLmF2YWlsX291dCA9PT0gMCB8fCAoc3RybS5hdmFpbF9pbiA9PT0gMCAmJiAoX21vZGUgPT09IFpfRklOSVNIIHx8IF9tb2RlID09PSBaX1NZTkNfRkxVU0gpKSkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy50byA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5vbkRhdGEoc3RyaW5ncy5idWYyYmluc3RyaW5nKHV0aWxzLnNocmlua0J1ZihzdHJtLm91dHB1dCwgc3RybS5uZXh0X291dCkpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMub25EYXRhKHV0aWxzLnNocmlua0J1ZihzdHJtLm91dHB1dCwgc3RybS5uZXh0X291dCkpO1xuICAgICAgfVxuICAgIH1cbiAgfSB3aGlsZSAoKHN0cm0uYXZhaWxfaW4gPiAwIHx8IHN0cm0uYXZhaWxfb3V0ID09PSAwKSAmJiBzdGF0dXMgIT09IFpfU1RSRUFNX0VORCk7XG5cbiAgLy8gRmluYWxpemUgb24gdGhlIGxhc3QgY2h1bmsuXG4gIGlmIChfbW9kZSA9PT0gWl9GSU5JU0gpIHtcbiAgICBzdGF0dXMgPSB6bGliX2RlZmxhdGUuZGVmbGF0ZUVuZCh0aGlzLnN0cm0pO1xuICAgIHRoaXMub25FbmQoc3RhdHVzKTtcbiAgICB0aGlzLmVuZGVkID0gdHJ1ZTtcbiAgICByZXR1cm4gc3RhdHVzID09PSBaX09LO1xuICB9XG5cbiAgLy8gY2FsbGJhY2sgaW50ZXJpbSByZXN1bHRzIGlmIFpfU1lOQ19GTFVTSC5cbiAgaWYgKF9tb2RlID09PSBaX1NZTkNfRkxVU0gpIHtcbiAgICB0aGlzLm9uRW5kKFpfT0spO1xuICAgIHN0cm0uYXZhaWxfb3V0ID0gMDtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuXG4vKipcbiAqIERlZmxhdGUjb25EYXRhKGNodW5rKSAtPiBWb2lkXG4gKiAtIGNodW5rIChVaW50OEFycmF5fEFycmF5fFN0cmluZyk6IG91dHB1dCBkYXRhLiBUeXBlIG9mIGFycmF5IGRlcGVuZHNcbiAqICAgb24ganMgZW5naW5lIHN1cHBvcnQuIFdoZW4gc3RyaW5nIG91dHB1dCByZXF1ZXN0ZWQsIGVhY2ggY2h1bmtcbiAqICAgd2lsbCBiZSBzdHJpbmcuXG4gKlxuICogQnkgZGVmYXVsdCwgc3RvcmVzIGRhdGEgYmxvY2tzIGluIGBjaHVua3NbXWAgcHJvcGVydHkgYW5kIGdsdWVcbiAqIHRob3NlIGluIGBvbkVuZGAuIE92ZXJyaWRlIHRoaXMgaGFuZGxlciwgaWYgeW91IG5lZWQgYW5vdGhlciBiZWhhdmlvdXIuXG4gKiovXG5EZWZsYXRlLnByb3RvdHlwZS5vbkRhdGEgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgdGhpcy5jaHVua3MucHVzaChjaHVuayk7XG59O1xuXG5cbi8qKlxuICogRGVmbGF0ZSNvbkVuZChzdGF0dXMpIC0+IFZvaWRcbiAqIC0gc3RhdHVzIChOdW1iZXIpOiBkZWZsYXRlIHN0YXR1cy4gMCAoWl9PSykgb24gc3VjY2VzcyxcbiAqICAgb3RoZXIgaWYgbm90LlxuICpcbiAqIENhbGxlZCBvbmNlIGFmdGVyIHlvdSB0ZWxsIGRlZmxhdGUgdGhhdCB0aGUgaW5wdXQgc3RyZWFtIGlzXG4gKiBjb21wbGV0ZSAoWl9GSU5JU0gpIG9yIHNob3VsZCBiZSBmbHVzaGVkIChaX1NZTkNfRkxVU0gpXG4gKiBvciBpZiBhbiBlcnJvciBoYXBwZW5lZC4gQnkgZGVmYXVsdCAtIGpvaW4gY29sbGVjdGVkIGNodW5rcyxcbiAqIGZyZWUgbWVtb3J5IGFuZCBmaWxsIGByZXN1bHRzYCAvIGBlcnJgIHByb3BlcnRpZXMuXG4gKiovXG5EZWZsYXRlLnByb3RvdHlwZS5vbkVuZCA9IGZ1bmN0aW9uIChzdGF0dXMpIHtcbiAgLy8gT24gc3VjY2VzcyAtIGpvaW5cbiAgaWYgKHN0YXR1cyA9PT0gWl9PSykge1xuICAgIGlmICh0aGlzLm9wdGlvbnMudG8gPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLnJlc3VsdCA9IHRoaXMuY2h1bmtzLmpvaW4oJycpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlc3VsdCA9IHV0aWxzLmZsYXR0ZW5DaHVua3ModGhpcy5jaHVua3MpO1xuICAgIH1cbiAgfVxuICB0aGlzLmNodW5rcyA9IFtdO1xuICB0aGlzLmVyciA9IHN0YXR1cztcbiAgdGhpcy5tc2cgPSB0aGlzLnN0cm0ubXNnO1xufTtcblxuXG4vKipcbiAqIGRlZmxhdGUoZGF0YVssIG9wdGlvbnNdKSAtPiBVaW50OEFycmF5fEFycmF5fFN0cmluZ1xuICogLSBkYXRhIChVaW50OEFycmF5fEFycmF5fFN0cmluZyk6IGlucHV0IGRhdGEgdG8gY29tcHJlc3MuXG4gKiAtIG9wdGlvbnMgKE9iamVjdCk6IHpsaWIgZGVmbGF0ZSBvcHRpb25zLlxuICpcbiAqIENvbXByZXNzIGBkYXRhYCB3aXRoIGRlZmxhdGUgYWxnb3JpdGhtIGFuZCBgb3B0aW9uc2AuXG4gKlxuICogU3VwcG9ydGVkIG9wdGlvbnMgYXJlOlxuICpcbiAqIC0gbGV2ZWxcbiAqIC0gd2luZG93Qml0c1xuICogLSBtZW1MZXZlbFxuICogLSBzdHJhdGVneVxuICogLSBkaWN0aW9uYXJ5XG4gKlxuICogW2h0dHA6Ly96bGliLm5ldC9tYW51YWwuaHRtbCNBZHZhbmNlZF0oaHR0cDovL3psaWIubmV0L21hbnVhbC5odG1sI0FkdmFuY2VkKVxuICogZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gdGhlc2UuXG4gKlxuICogU3VnYXIgKG9wdGlvbnMpOlxuICpcbiAqIC0gYHJhd2AgKEJvb2xlYW4pIC0gc2F5IHRoYXQgd2Ugd29yayB3aXRoIHJhdyBzdHJlYW0sIGlmIHlvdSBkb24ndCB3aXNoIHRvIHNwZWNpZnlcbiAqICAgbmVnYXRpdmUgd2luZG93Qml0cyBpbXBsaWNpdGx5LlxuICogLSBgdG9gIChTdHJpbmcpIC0gaWYgZXF1YWwgdG8gJ3N0cmluZycsIHRoZW4gcmVzdWx0IHdpbGwgYmUgXCJiaW5hcnkgc3RyaW5nXCJcbiAqICAgIChlYWNoIGNoYXIgY29kZSBbMC4uMjU1XSlcbiAqXG4gKiAjIyMjIyBFeGFtcGxlOlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIHZhciBwYWtvID0gcmVxdWlyZSgncGFrbycpXG4gKiAgICwgZGF0YSA9IFVpbnQ4QXJyYXkoWzEsMiwzLDQsNSw2LDcsOCw5XSk7XG4gKlxuICogY29uc29sZS5sb2cocGFrby5kZWZsYXRlKGRhdGEpKTtcbiAqIGBgYFxuICoqL1xuZnVuY3Rpb24gZGVmbGF0ZShpbnB1dCwgb3B0aW9ucykge1xuICB2YXIgZGVmbGF0b3IgPSBuZXcgRGVmbGF0ZShvcHRpb25zKTtcblxuICBkZWZsYXRvci5wdXNoKGlucHV0LCB0cnVlKTtcblxuICAvLyBUaGF0IHdpbGwgbmV2ZXIgaGFwcGVucywgaWYgeW91IGRvbid0IGNoZWF0IHdpdGggb3B0aW9ucyA6KVxuICBpZiAoZGVmbGF0b3IuZXJyKSB7IHRocm93IGRlZmxhdG9yLm1zZyB8fCBtc2dbZGVmbGF0b3IuZXJyXTsgfVxuXG4gIHJldHVybiBkZWZsYXRvci5yZXN1bHQ7XG59XG5cblxuLyoqXG4gKiBkZWZsYXRlUmF3KGRhdGFbLCBvcHRpb25zXSkgLT4gVWludDhBcnJheXxBcnJheXxTdHJpbmdcbiAqIC0gZGF0YSAoVWludDhBcnJheXxBcnJheXxTdHJpbmcpOiBpbnB1dCBkYXRhIHRvIGNvbXByZXNzLlxuICogLSBvcHRpb25zIChPYmplY3QpOiB6bGliIGRlZmxhdGUgb3B0aW9ucy5cbiAqXG4gKiBUaGUgc2FtZSBhcyBbW2RlZmxhdGVdXSwgYnV0IGNyZWF0ZXMgcmF3IGRhdGEsIHdpdGhvdXQgd3JhcHBlclxuICogKGhlYWRlciBhbmQgYWRsZXIzMiBjcmMpLlxuICoqL1xuZnVuY3Rpb24gZGVmbGF0ZVJhdyhpbnB1dCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgb3B0aW9ucy5yYXcgPSB0cnVlO1xuICByZXR1cm4gZGVmbGF0ZShpbnB1dCwgb3B0aW9ucyk7XG59XG5cblxuLyoqXG4gKiBnemlwKGRhdGFbLCBvcHRpb25zXSkgLT4gVWludDhBcnJheXxBcnJheXxTdHJpbmdcbiAqIC0gZGF0YSAoVWludDhBcnJheXxBcnJheXxTdHJpbmcpOiBpbnB1dCBkYXRhIHRvIGNvbXByZXNzLlxuICogLSBvcHRpb25zIChPYmplY3QpOiB6bGliIGRlZmxhdGUgb3B0aW9ucy5cbiAqXG4gKiBUaGUgc2FtZSBhcyBbW2RlZmxhdGVdXSwgYnV0IGNyZWF0ZSBnemlwIHdyYXBwZXIgaW5zdGVhZCBvZlxuICogZGVmbGF0ZSBvbmUuXG4gKiovXG5mdW5jdGlvbiBnemlwKGlucHV0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBvcHRpb25zLmd6aXAgPSB0cnVlO1xuICByZXR1cm4gZGVmbGF0ZShpbnB1dCwgb3B0aW9ucyk7XG59XG5cblxuZXhwb3J0cy5EZWZsYXRlID0gRGVmbGF0ZTtcbmV4cG9ydHMuZGVmbGF0ZSA9IGRlZmxhdGU7XG5leHBvcnRzLmRlZmxhdGVSYXcgPSBkZWZsYXRlUmF3O1xuZXhwb3J0cy5nemlwID0gZ3ppcDtcbiJdLCJuYW1lcyI6WyJ6bGliX2RlZmxhdGUiLCJyZXF1aXJlIiwidXRpbHMiLCJzdHJpbmdzIiwibXNnIiwiWlN0cmVhbSIsInRvU3RyaW5nIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiWl9OT19GTFVTSCIsIlpfRklOSVNIIiwiWl9PSyIsIlpfU1RSRUFNX0VORCIsIlpfU1lOQ19GTFVTSCIsIlpfREVGQVVMVF9DT01QUkVTU0lPTiIsIlpfREVGQVVMVF9TVFJBVEVHWSIsIlpfREVGTEFURUQiLCJEZWZsYXRlIiwib3B0aW9ucyIsImFzc2lnbiIsImxldmVsIiwibWV0aG9kIiwiY2h1bmtTaXplIiwid2luZG93Qml0cyIsIm1lbUxldmVsIiwic3RyYXRlZ3kiLCJ0byIsIm9wdCIsInJhdyIsImd6aXAiLCJlcnIiLCJlbmRlZCIsImNodW5rcyIsInN0cm0iLCJhdmFpbF9vdXQiLCJzdGF0dXMiLCJkZWZsYXRlSW5pdDIiLCJFcnJvciIsImhlYWRlciIsImRlZmxhdGVTZXRIZWFkZXIiLCJkaWN0aW9uYXJ5IiwiZGljdCIsInN0cmluZzJidWYiLCJjYWxsIiwiVWludDhBcnJheSIsImRlZmxhdGVTZXREaWN0aW9uYXJ5IiwiX2RpY3Rfc2V0IiwicHVzaCIsImRhdGEiLCJtb2RlIiwiX21vZGUiLCJpbnB1dCIsIm5leHRfaW4iLCJhdmFpbF9pbiIsImxlbmd0aCIsIm91dHB1dCIsIkJ1ZjgiLCJuZXh0X291dCIsImRlZmxhdGUiLCJvbkVuZCIsIm9uRGF0YSIsImJ1ZjJiaW5zdHJpbmciLCJzaHJpbmtCdWYiLCJkZWZsYXRlRW5kIiwiY2h1bmsiLCJyZXN1bHQiLCJqb2luIiwiZmxhdHRlbkNodW5rcyIsImRlZmxhdG9yIiwiZGVmbGF0ZVJhdyIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/deflate.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/inflate.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/inflate.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar zlib_inflate = __webpack_require__(/*! ./zlib/inflate */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/inflate.js\");\nvar utils = __webpack_require__(/*! ./utils/common */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/utils/common.js\");\nvar strings = __webpack_require__(/*! ./utils/strings */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/utils/strings.js\");\nvar c = __webpack_require__(/*! ./zlib/constants */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/constants.js\");\nvar msg = __webpack_require__(/*! ./zlib/messages */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/messages.js\");\nvar ZStream = __webpack_require__(/*! ./zlib/zstream */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/zstream.js\");\nvar GZheader = __webpack_require__(/*! ./zlib/gzheader */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/gzheader.js\");\nvar toString = Object.prototype.toString;\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/ /* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/ /**\n * Inflate.result -> Uint8Array|Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you\n * push a chunk with explicit flush (call [[Inflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/ /**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/ /**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/ /**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/ function Inflate(options) {\n    if (!(this instanceof Inflate)) return new Inflate(options);\n    this.options = utils.assign({\n        chunkSize: 16384,\n        windowBits: 0,\n        to: \"\"\n    }, options || {});\n    var opt = this.options;\n    // Force window size for `raw` data, if not set directly,\n    // because we have no header for autodetect.\n    if (opt.raw && opt.windowBits >= 0 && opt.windowBits < 16) {\n        opt.windowBits = -opt.windowBits;\n        if (opt.windowBits === 0) {\n            opt.windowBits = -15;\n        }\n    }\n    // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n    if (opt.windowBits >= 0 && opt.windowBits < 16 && !(options && options.windowBits)) {\n        opt.windowBits += 32;\n    }\n    // Gzip header has no info about windows size, we can do autodetect only\n    // for deflate. So, if window size not set, force it to max when gzip possible\n    if (opt.windowBits > 15 && opt.windowBits < 48) {\n        // bit 3 (16) -> gzipped data\n        // bit 4 (32) -> autodetect gzip/deflate\n        if ((opt.windowBits & 15) === 0) {\n            opt.windowBits |= 15;\n        }\n    }\n    this.err = 0; // error code, if happens (0 = Z_OK)\n    this.msg = \"\"; // error message\n    this.ended = false; // used to avoid multiple onEnd() calls\n    this.chunks = []; // chunks of compressed data\n    this.strm = new ZStream();\n    this.strm.avail_out = 0;\n    var status = zlib_inflate.inflateInit2(this.strm, opt.windowBits);\n    if (status !== c.Z_OK) {\n        throw new Error(msg[status]);\n    }\n    this.header = new GZheader();\n    zlib_inflate.inflateGetHeader(this.strm, this.header);\n    // Setup dictionary\n    if (opt.dictionary) {\n        // Convert data if needed\n        if (typeof opt.dictionary === \"string\") {\n            opt.dictionary = strings.string2buf(opt.dictionary);\n        } else if (toString.call(opt.dictionary) === \"[object ArrayBuffer]\") {\n            opt.dictionary = new Uint8Array(opt.dictionary);\n        }\n        if (opt.raw) {\n            status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);\n            if (status !== c.Z_OK) {\n                throw new Error(msg[status]);\n            }\n        }\n    }\n}\n/**\n * Inflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the decompression context.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/ Inflate.prototype.push = function(data, mode) {\n    var strm = this.strm;\n    var chunkSize = this.options.chunkSize;\n    var dictionary = this.options.dictionary;\n    var status, _mode;\n    var next_out_utf8, tail, utf8str;\n    // Flag to properly process Z_BUF_ERROR on testing inflate call\n    // when we check that all output data was flushed.\n    var allowBufError = false;\n    if (this.ended) {\n        return false;\n    }\n    _mode = mode === ~~mode ? mode : mode === true ? c.Z_FINISH : c.Z_NO_FLUSH;\n    // Convert data if needed\n    if (typeof data === \"string\") {\n        // Only binary strings can be decompressed on practice\n        strm.input = strings.binstring2buf(data);\n    } else if (toString.call(data) === \"[object ArrayBuffer]\") {\n        strm.input = new Uint8Array(data);\n    } else {\n        strm.input = data;\n    }\n    strm.next_in = 0;\n    strm.avail_in = strm.input.length;\n    do {\n        if (strm.avail_out === 0) {\n            strm.output = new utils.Buf8(chunkSize);\n            strm.next_out = 0;\n            strm.avail_out = chunkSize;\n        }\n        status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH); /* no bad return value */ \n        if (status === c.Z_NEED_DICT && dictionary) {\n            status = zlib_inflate.inflateSetDictionary(this.strm, dictionary);\n        }\n        if (status === c.Z_BUF_ERROR && allowBufError === true) {\n            status = c.Z_OK;\n            allowBufError = false;\n        }\n        if (status !== c.Z_STREAM_END && status !== c.Z_OK) {\n            this.onEnd(status);\n            this.ended = true;\n            return false;\n        }\n        if (strm.next_out) {\n            if (strm.avail_out === 0 || status === c.Z_STREAM_END || strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH)) {\n                if (this.options.to === \"string\") {\n                    next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n                    tail = strm.next_out - next_out_utf8;\n                    utf8str = strings.buf2string(strm.output, next_out_utf8);\n                    // move tail\n                    strm.next_out = tail;\n                    strm.avail_out = chunkSize - tail;\n                    if (tail) {\n                        utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0);\n                    }\n                    this.onData(utf8str);\n                } else {\n                    this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n                }\n            }\n        }\n        // When no more input data, we should check that internal inflate buffers\n        // are flushed. The only way to do it when avail_out = 0 - run one more\n        // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.\n        // Here we set flag to process this error properly.\n        //\n        // NOTE. Deflate does not return error in this case and does not needs such\n        // logic.\n        if (strm.avail_in === 0 && strm.avail_out === 0) {\n            allowBufError = true;\n        }\n    }while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);\n    if (status === c.Z_STREAM_END) {\n        _mode = c.Z_FINISH;\n    }\n    // Finalize on the last chunk.\n    if (_mode === c.Z_FINISH) {\n        status = zlib_inflate.inflateEnd(this.strm);\n        this.onEnd(status);\n        this.ended = true;\n        return status === c.Z_OK;\n    }\n    // callback interim results if Z_SYNC_FLUSH.\n    if (_mode === c.Z_SYNC_FLUSH) {\n        this.onEnd(c.Z_OK);\n        strm.avail_out = 0;\n        return true;\n    }\n    return true;\n};\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): output data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/ Inflate.prototype.onData = function(chunk) {\n    this.chunks.push(chunk);\n};\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/ Inflate.prototype.onEnd = function(status) {\n    // On success - join\n    if (status === c.Z_OK) {\n        if (this.options.to === \"string\") {\n            // Glue & convert here, until we teach pako to send\n            // utf8 aligned strings to onData\n            this.result = this.chunks.join(\"\");\n        } else {\n            this.result = utils.flattenChunks(this.chunks);\n        }\n    }\n    this.chunks = [];\n    this.err = status;\n    this.msg = this.strm.msg;\n};\n/**\n * inflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])\n *   , output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err)\n *   console.log(err);\n * }\n * ```\n **/ function inflate(input, options) {\n    var inflator = new Inflate(options);\n    inflator.push(input, true);\n    // That will never happens, if you don't cheat with options :)\n    if (inflator.err) {\n        throw inflator.msg || msg[inflator.err];\n    }\n    return inflator.result;\n}\n/**\n * inflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/ function inflateRaw(input, options) {\n    options = options || {};\n    options.raw = true;\n    return inflate(input, options);\n}\n/**\n * ungzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/ exports.Inflate = Inflate;\nexports.inflate = inflate;\nexports.inflateRaw = inflateRaw;\nexports.ungzip = inflate;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHBkZi1saWIvc3RhbmRhcmQtZm9udHMvbm9kZV9tb2R1bGVzL3Bha28vbGliL2luZmxhdGUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFHQSxJQUFJQSxlQUFlQyxtQkFBT0EsQ0FBQztBQUMzQixJQUFJQyxRQUFlRCxtQkFBT0EsQ0FBQztBQUMzQixJQUFJRSxVQUFlRixtQkFBT0EsQ0FBQztBQUMzQixJQUFJRyxJQUFlSCxtQkFBT0EsQ0FBQztBQUMzQixJQUFJSSxNQUFlSixtQkFBT0EsQ0FBQztBQUMzQixJQUFJSyxVQUFlTCxtQkFBT0EsQ0FBQztBQUMzQixJQUFJTSxXQUFlTixtQkFBT0EsQ0FBQztBQUUzQixJQUFJTyxXQUFXQyxPQUFPQyxTQUFTLENBQUNGLFFBQVE7QUFFeEM7Ozs7OztFQU1FLEdBRUY7Ozs7RUFJRSxHQUVGOzs7Ozs7OztFQVFFLEdBRUY7Ozs7O0VBS0UsR0FFRjs7OztFQUlFLEdBR0Y7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUF3Q0UsR0FDRixTQUFTRyxRQUFRQyxPQUFPO0lBQ3RCLElBQUksQ0FBRSxLQUFJLFlBQVlELE9BQU0sR0FBSSxPQUFPLElBQUlBLFFBQVFDO0lBRW5ELElBQUksQ0FBQ0EsT0FBTyxHQUFHVixNQUFNVyxNQUFNLENBQUM7UUFDMUJDLFdBQVc7UUFDWEMsWUFBWTtRQUNaQyxJQUFJO0lBQ04sR0FBR0osV0FBVyxDQUFDO0lBRWYsSUFBSUssTUFBTSxJQUFJLENBQUNMLE9BQU87SUFFdEIseURBQXlEO0lBQ3pELDRDQUE0QztJQUM1QyxJQUFJSyxJQUFJQyxHQUFHLElBQUtELElBQUlGLFVBQVUsSUFBSSxLQUFPRSxJQUFJRixVQUFVLEdBQUcsSUFBSztRQUM3REUsSUFBSUYsVUFBVSxHQUFHLENBQUNFLElBQUlGLFVBQVU7UUFDaEMsSUFBSUUsSUFBSUYsVUFBVSxLQUFLLEdBQUc7WUFBRUUsSUFBSUYsVUFBVSxHQUFHLENBQUM7UUFBSTtJ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QU87SUFDN0IsSUFBSXlELFdBQVcsSUFBSTFELFFBQVFDO0lBRTNCeUQsU0FBU2xDLElBQUksQ0FBQ1UsT0FBTztJQUVyQiw4REFBOEQ7SUFDOUQsSUFBSXdCLFNBQVNsRCxHQUFHLEVBQUU7UUFBRSxNQUFNa0QsU0FBU2hFLEdBQUcsSUFBSUEsR0FBRyxDQUFDZ0UsU0FBU2xELEdBQUcsQ0FBQztJQUFFO0lBRTdELE9BQU9rRCxTQUFTSCxNQUFNO0FBQ3hCO0FBR0E7Ozs7Ozs7RUFPRSxHQUNGLFNBQVNJLFdBQVd6QixLQUFLLEVBQUVqQyxPQUFPO0lBQ2hDQSxVQUFVQSxXQUFXLENBQUM7SUFDdEJBLFFBQVFNLEdBQUcsR0FBRztJQUNkLE9BQU9tQyxRQUFRUixPQUFPakM7QUFDeEI7QUFHQTs7Ozs7OztFQU9FLEdBR0YyRCxlQUFlLEdBQUc1RDtBQUNsQjRELGVBQWUsR0FBR2xCO0FBQ2xCa0Isa0JBQWtCLEdBQUdEO0FBQ3JCQyxjQUFjLEdBQUlsQiIsInNvdXJjZXMiOlsid2VicGFjazovL2NpdmlsLWVuZ2luZWVyaW5nLXBsYXRmb3JtLy4vbm9kZV9tb2R1bGVzL0BwZGYtbGliL3N0YW5kYXJkLWZvbnRzL25vZGVfbW9kdWxlcy9wYWtvL2xpYi9pbmZsYXRlLmpzP2MyNTMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciB6bGliX2luZmxhdGUgPSByZXF1aXJlKCcuL3psaWIvaW5mbGF0ZScpO1xudmFyIHV0aWxzICAgICAgICA9IHJlcXVpcmUoJy4vdXRpbHMvY29tbW9uJyk7XG52YXIgc3RyaW5ncyAgICAgID0gcmVxdWlyZSgnLi91dGlscy9zdHJpbmdzJyk7XG52YXIgYyAgICAgICAgICAgID0gcmVxdWlyZSgnLi96bGliL2NvbnN0YW50cycpO1xudmFyIG1zZyAgICAgICAgICA9IHJlcXVpcmUoJy4vemxpYi9tZXNzYWdlcycpO1xudmFyIFpTdHJlYW0gICAgICA9IHJlcXVpcmUoJy4vemxpYi96c3RyZWFtJyk7XG52YXIgR1poZWFkZXIgICAgID0gcmVxdWlyZSgnLi96bGliL2d6aGVhZGVyJyk7XG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogY2xhc3MgSW5mbGF0ZVxuICpcbiAqIEdlbmVyaWMgSlMtc3R5bGUgd3JhcHBlciBmb3IgemxpYiBjYWxscy4gSWYgeW91IGRvbid0IG5lZWRcbiAqIHN0cmVhbWluZyBiZWhhdmlvdXIgLSB1c2UgbW9yZSBzaW1wbGUgZnVuY3Rpb25zOiBbW2luZmxhdGVdXVxuICogYW5kIFtbaW5mbGF0ZVJhd11dLlxuICoqL1xuXG4vKiBpbnRlcm5hbFxuICogaW5mbGF0ZS5jaHVua3MgLT4gQXJyYXlcbiAqXG4gKiBDaHVua3Mgb2Ygb3V0cHV0IGRhdGEsIGlmIFtbSW5mbGF0ZSNvbkRhdGFdXSBub3Qgb3ZlcnJpZGRlbi5cbiAqKi9cblxuLyoqXG4gKiBJbmZsYXRlLnJlc3VsdCAtPiBVaW50OEFycmF5fEFycmF5fFN0cmluZ1xuICpcbiAqIFVuY29tcHJlc3NlZCByZXN1bHQsIGdlbmVyYXRlZCBieSBkZWZhdWx0IFtbSW5mbGF0ZSNvbkRhdGFdXVxuICogYW5kIFtbSW5mbGF0ZSNvbkVuZF1dIGhhbmRsZXJzLiBGaWxsZWQgYWZ0ZXIgeW91IHB1c2ggbGFzdCBjaHVua1xuICogKGNhbGwgW1tJbmZsYXRlI3B1c2hdXSB3aXRoIGBaX0ZJTklTSGAgLyBgdHJ1ZWAgcGFyYW0pIG9yIGlmIHlvdVxuICogcHVzaCBhIGNodW5rIHdpdGggZXhwbGljaXQgZmx1c2ggKGNhbGwgW1tJbmZsYXRlI3B1c2hdXSB3aXRoXG4gKiBgWl9TWU5DX0ZMVVNIYCBwYXJhbSkuXG4gKiovXG5cbi8qKlxuICogSW5mbGF0ZS5lcnIgLT4gTnVtYmVyXG4gKlxuICogRXJyb3IgY29kZSBhZnRlciBpbmZsYXRlIGZpbmlzaGVkLiAwIChaX09LKSBvbiBzdWNjZXNzLlxuICogU2hvdWxkIGJlIGNoZWNrZWQgaWYgYnJva2VuIGRhdGEgcG9zc2libGUuXG4gKiovXG5cbi8qKlxuICogSW5mbGF0ZS5tc2cgLT4gU3RyaW5nXG4gKlxuICogRXJyb3IgbWVzc2FnZSwgaWYgW1tJbmZsYXRlLmVycl1dICE9IDBcbiAqKi9cblxuXG4vKipcbiAqIG5ldyBJbmZsYXRlKG9wdGlvbnMpXG4gKiAtIG9wdGlvbnMgKE9iamVjdCk6IHpsaWIgaW5mbGF0ZSBvcHRpb25zLlxuICpcbiAqIENyZWF0ZXMgbmV3IGluZmxhdG9yIGluc3RhbmNlIHdpdGggc3BlY2lmaWVkIHBhcmFtcy4gVGhyb3dzIGV4Y2VwdGlvblxuICogb24gYmFkIHBhcmFtcy4gU3VwcG9ydGVkIG9wdGlvbnM6XG4gKlxuICogLSBgd2luZG93Qml0c2BcbiAqIC0gYGRpY3Rpb25hcnlgXG4gKlxuICogW2h0dHA6Ly96bGliLm5ldC9tYW51YWwuaHRtbCNBZHZhbmNlZF0oaHR0cDovL3psaWIubmV0L21hbnVhbC5odG1sI0FkdmFuY2VkKVxuICogZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gdGhlc2UuXG4gKlxuICogQWRkaXRpb25hbCBvcHRpb25zLCBmb3IgaW50ZXJuYWwgbmVlZHM6XG4gKlxuICogLSBgY2h1bmtTaXplYCAtIHNpemUgb2YgZ2VuZXJhdGVkIGRhdGEgY2h1bmtzICgxNksgYnkgZGVmYXVsdClcbiAqIC0gYHJhd2AgKEJvb2xlYW4pIC0gZG8gcmF3IGluZmxhdGVcbiAqIC0gYHRvYCAoU3RyaW5nKSAtIGlmIGVxdWFsIHRvICdzdHJpbmcnLCB0aGVuIHJlc3VsdCB3aWxsIGJlIGNvbnZlcnRlZFxuICogICBmcm9tIHV0ZjggdG8gdXRmMTYgKGphdmFzY3JpcHQpIHN0cmluZy4gV2hlbiBzdHJpbmcgb3V0cHV0IHJlcXVlc3RlZCxcbiAqICAgY2h1bmsgbGVuZ3RoIGNhbiBkaWZmZXIgZnJvbSBgY2h1bmtTaXplYCwgZGVwZW5kaW5nIG9uIGNvbnRlbnQuXG4gKlxuICogQnkgZGVmYXVsdCwgd2hlbiBubyBvcHRpb25zIHNldCwgYXV0b2RldGVjdCBkZWZsYXRlL2d6aXAgZGF0YSBmb3JtYXQgdmlhXG4gKiB3cmFwcGVyIGhlYWRlci5cbiAqXG4gKiAjIyMjIyBFeGFtcGxlOlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIHZhciBwYWtvID0gcmVxdWlyZSgncGFrbycpXG4gKiAgICwgY2h1bmsxID0gVWludDhBcnJheShbMSwyLDMsNCw1LDYsNyw4LDldKVxuICogICAsIGNodW5rMiA9IFVpbnQ4QXJyYXkoWzEwLDExLDEyLDEzLDE0LDE1LDE2LDE3LDE4LDE5XSk7XG4gKlxuICogdmFyIGluZmxhdGUgPSBuZXcgcGFrby5JbmZsYXRlKHsgbGV2ZWw6IDN9KTtcbiAqXG4gKiBpbmZsYXRlLnB1c2goY2h1bmsxLCBmYWxzZSk7XG4gKiBpbmZsYXRlLnB1c2goY2h1bmsyLCB0cnVlKTsgIC8vIHRydWUgLT4gbGFzdCBjaHVua1xuICpcbiAqIGlmIChpbmZsYXRlLmVycikgeyB0aHJvdyBuZXcgRXJyb3IoaW5mbGF0ZS5lcnIpOyB9XG4gKlxuICogY29uc29sZS5sb2coaW5mbGF0ZS5yZXN1bHQpO1xuICogYGBgXG4gKiovXG5mdW5jdGlvbiBJbmZsYXRlKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEluZmxhdGUpKSByZXR1cm4gbmV3IEluZmxhdGUob3B0aW9ucyk7XG5cbiAgdGhpcy5vcHRpb25zID0gdXRpbHMuYXNzaWduKHtcbiAgICBjaHVua1NpemU6IDE2Mzg0LFxuICAgIHdpbmRvd0JpdHM6IDAsXG4gICAgdG86ICcnXG4gIH0sIG9wdGlvbnMgfHwge30pO1xuXG4gIHZhciBvcHQgPSB0aGlzLm9wdGlvbnM7XG5cbiAgLy8gRm9yY2Ugd2luZG93IHNpemUgZm9yIGByYXdgIGRhdGEsIGlmIG5vdCBzZXQgZGlyZWN0bHksXG4gIC8vIGJlY2F1c2Ugd2UgaGF2ZSBubyBoZWFkZXIgZm9yIGF1dG9kZXRlY3QuXG4gIGlmIChvcHQucmF3ICYmIChvcHQud2luZG93Qml0cyA+PSAwKSAmJiAob3B0LndpbmRvd0JpdHMgPCAxNikpIHtcbiAgICBvcHQud2luZG93Qml0cyA9IC1vcHQud2luZG93Qml0cztcbiAgICBpZiAob3B0LndpbmRvd0JpdHMgPT09IDApIHsgb3B0LndpbmRvd0JpdHMgPSAtMTU7IH1cbiAgfVxuXG4gIC8vIElmIGB3aW5kb3dCaXRzYCBub3QgZGVmaW5lZCAoYW5kIG1vZGUgbm90IHJhdykgLSBzZXQgYXV0b2RldGVjdCBmbGFnIGZvciBnemlwL2RlZmxhdGVcbiAgaWYgKChvcHQud2luZG93Qml0cyA+PSAwKSAmJiAob3B0LndpbmRvd0JpdHMgPCAxNikgJiZcbiAgICAgICEob3B0aW9ucyAmJiBvcHRpb25zLndpbmRvd0JpdHMpKSB7XG4gICAgb3B0LndpbmRvd0JpdHMgKz0gMzI7XG4gIH1cblxuICAvLyBHemlwIGhlYWRlciBoYXMgbm8gaW5mbyBhYm91dCB3aW5kb3dzIHNpemUsIHdlIGNhbiBkbyBhdXRvZGV0ZWN0IG9ubHlcbiAgLy8gZm9yIGRlZmxhdGUuIFNvLCBpZiB3aW5kb3cgc2l6ZSBub3Qgc2V0LCBmb3JjZSBpdCB0byBtYXggd2hlbiBnemlwIHBvc3NpYmxlXG4gIGlmICgob3B0LndpbmRvd0JpdHMgPiAxNSkgJiYgKG9wdC53aW5kb3dCaXRzIDwgNDgpKSB7XG4gICAgLy8gYml0IDMgKDE2KSAtPiBnemlwcGVkIGRhdGFcbiAgICAvLyBiaXQgNCAoMzIpIC0+IGF1dG9kZXRlY3QgZ3ppcC9kZWZsYXRlXG4gICAgaWYgKChvcHQud2luZG93Qml0cyAmIDE1KSA9PT0gMCkge1xuICAgICAgb3B0LndpbmRvd0JpdHMgfD0gMTU7XG4gICAgfVxuICB9XG5cbiAgdGhpcy5lcnIgICAgPSAwOyAgICAgIC8vIGVycm9yIGNvZGUsIGlmIGhhcHBlbnMgKDAgPSBaX09LKVxuICB0aGlzLm1zZyAgICA9ICcnOyAgICAgLy8gZXJyb3IgbWVzc2FnZVxuICB0aGlzLmVuZGVkICA9IGZhbHNlOyAgLy8gdXNlZCB0byBhdm9pZCBtdWx0aXBsZSBvbkVuZCgpIGNhbGxzXG4gIHRoaXMuY2h1bmtzID0gW107ICAgICAvLyBjaHVua3Mgb2YgY29tcHJlc3NlZCBkYXRhXG5cbiAgdGhpcy5zdHJtICAgPSBuZXcgWlN0cmVhbSgpO1xuICB0aGlzLnN0cm0uYXZhaWxfb3V0ID0gMDtcblxuICB2YXIgc3RhdHVzICA9IHpsaWJfaW5mbGF0ZS5pbmZsYXRlSW5pdDIoXG4gICAgdGhpcy5zdHJtLFxuICAgIG9wdC53aW5kb3dCaXRzXG4gICk7XG5cbiAgaWYgKHN0YXR1cyAhPT0gYy5aX09LKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1zZ1tzdGF0dXNdKTtcbiAgfVxuXG4gIHRoaXMuaGVhZGVyID0gbmV3IEdaaGVhZGVyKCk7XG5cbiAgemxpYl9pbmZsYXRlLmluZmxhdGVHZXRIZWFkZXIodGhpcy5zdHJtLCB0aGlzLmhlYWRlcik7XG5cbiAgLy8gU2V0dXAgZGljdGlvbmFyeVxuICBpZiAob3B0LmRpY3Rpb25hcnkpIHtcbiAgICAvLyBDb252ZXJ0IGRhdGEgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBvcHQuZGljdGlvbmFyeSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG9wdC5kaWN0aW9uYXJ5ID0gc3RyaW5ncy5zdHJpbmcyYnVmKG9wdC5kaWN0aW9uYXJ5KTtcbiAgICB9IGVsc2UgaWYgKHRvU3RyaW5nLmNhbGwob3B0LmRpY3Rpb25hcnkpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nKSB7XG4gICAgICBvcHQuZGljdGlvbmFyeSA9IG5ldyBVaW50OEFycmF5KG9wdC5kaWN0aW9uYXJ5KTtcbiAgICB9XG4gICAgaWYgKG9wdC5yYXcpIHsgLy9JbiByYXcgbW9kZSB3ZSBuZWVkIHRvIHNldCB0aGUgZGljdGlvbmFyeSBlYXJseVxuICAgICAgc3RhdHVzID0gemxpYl9pbmZsYXRlLmluZmxhdGVTZXREaWN0aW9uYXJ5KHRoaXMuc3RybSwgb3B0LmRpY3Rpb25hcnkpO1xuICAgICAgaWYgKHN0YXR1cyAhPT0gYy5aX09LKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2dbc3RhdHVzXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogSW5mbGF0ZSNwdXNoKGRhdGFbLCBtb2RlXSkgLT4gQm9vbGVhblxuICogLSBkYXRhIChVaW50OEFycmF5fEFycmF5fEFycmF5QnVmZmVyfFN0cmluZyk6IGlucHV0IGRhdGFcbiAqIC0gbW9kZSAoTnVtYmVyfEJvb2xlYW4pOiAwLi42IGZvciBjb3JyZXNwb25kaW5nIFpfTk9fRkxVU0guLlpfVFJFRSBtb2Rlcy5cbiAqICAgU2VlIGNvbnN0YW50cy4gU2tpcHBlZCBvciBgZmFsc2VgIG1lYW5zIFpfTk9fRkxVU0gsIGB0cnVlYCBtZWFucyBaX0ZJTklTSC5cbiAqXG4gKiBTZW5kcyBpbnB1dCBkYXRhIHRvIGluZmxhdGUgcGlwZSwgZ2VuZXJhdGluZyBbW0luZmxhdGUjb25EYXRhXV0gY2FsbHMgd2l0aFxuICogbmV3IG91dHB1dCBjaHVua3MuIFJldHVybnMgYHRydWVgIG9uIHN1Y2Nlc3MuIFRoZSBsYXN0IGRhdGEgYmxvY2sgbXVzdCBoYXZlXG4gKiBtb2RlIFpfRklOSVNIIChvciBgdHJ1ZWApLiBUaGF0IHdpbGwgZmx1c2ggaW50ZXJuYWwgcGVuZGluZyBidWZmZXJzIGFuZCBjYWxsXG4gKiBbW0luZmxhdGUjb25FbmRdXS4gRm9yIGludGVyaW0gZXhwbGljaXQgZmx1c2hlcyAod2l0aG91dCBlbmRpbmcgdGhlIHN0cmVhbSkgeW91XG4gKiBjYW4gdXNlIG1vZGUgWl9TWU5DX0ZMVVNILCBrZWVwaW5nIHRoZSBkZWNvbXByZXNzaW9uIGNvbnRleHQuXG4gKlxuICogT24gZmFpbCBjYWxsIFtbSW5mbGF0ZSNvbkVuZF1dIHdpdGggZXJyb3IgY29kZSBhbmQgcmV0dXJuIGZhbHNlLlxuICpcbiAqIFdlIHN0cm9uZ2x5IHJlY29tbWVuZCB0byB1c2UgYFVpbnQ4QXJyYXlgIG9uIGlucHV0IGZvciBiZXN0IHNwZWVkIChvdXRwdXRcbiAqIGZvcm1hdCBpcyBkZXRlY3RlZCBhdXRvbWF0aWNhbGx5KS4gQWxzbywgZG9uJ3Qgc2tpcCBsYXN0IHBhcmFtIGFuZCBhbHdheXNcbiAqIHVzZSB0aGUgc2FtZSB0eXBlIGluIHlvdXIgY29kZSAoYm9vbGVhbiBvciBudW1iZXIpLiBUaGF0IHdpbGwgaW1wcm92ZSBKUyBzcGVlZC5cbiAqXG4gKiBGb3IgcmVndWxhciBgQXJyYXlgLXMgbWFrZSBzdXJlIGFsbCBlbGVtZW50cyBhcmUgWzAuLjI1NV0uXG4gKlxuICogIyMjIyMgRXhhbXBsZVxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIHB1c2goY2h1bmssIGZhbHNlKTsgLy8gcHVzaCBvbmUgb2YgZGF0YSBjaHVua3NcbiAqIC4uLlxuICogcHVzaChjaHVuaywgdHJ1ZSk7ICAvLyBwdXNoIGxhc3QgY2h1bmtcbiAqIGBgYFxuICoqL1xuSW5mbGF0ZS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChkYXRhLCBtb2RlKSB7XG4gIHZhciBzdHJtID0gdGhpcy5zdHJtO1xuICB2YXIgY2h1bmtTaXplID0gdGhpcy5vcHRpb25zLmNodW5rU2l6ZTtcbiAgdmFyIGRpY3Rpb25hcnkgPSB0aGlzLm9wdGlvbnMuZGljdGlvbmFyeTtcbiAgdmFyIHN0YXR1cywgX21vZGU7XG4gIHZhciBuZXh0X291dF91dGY4LCB0YWlsLCB1dGY4c3RyO1xuXG4gIC8vIEZsYWcgdG8gcHJvcGVybHkgcHJvY2VzcyBaX0JVRl9FUlJPUiBvbiB0ZXN0aW5nIGluZmxhdGUgY2FsbFxuICAvLyB3aGVuIHdlIGNoZWNrIHRoYXQgYWxsIG91dHB1dCBkYXRhIHdhcyBmbHVzaGVkLlxuICB2YXIgYWxsb3dCdWZFcnJvciA9IGZhbHNlO1xuXG4gIGlmICh0aGlzLmVuZGVkKSB7IHJldHVybiBmYWxzZTsgfVxuICBfbW9kZSA9IChtb2RlID09PSB+fm1vZGUpID8gbW9kZSA6ICgobW9kZSA9PT0gdHJ1ZSkgPyBjLlpfRklOSVNIIDogYy5aX05PX0ZMVVNIKTtcblxuICAvLyBDb252ZXJ0IGRhdGEgaWYgbmVlZGVkXG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBPbmx5IGJpbmFyeSBzdHJpbmdzIGNhbiBiZSBkZWNvbXByZXNzZWQgb24gcHJhY3RpY2VcbiAgICBzdHJtLmlucHV0ID0gc3RyaW5ncy5iaW5zdHJpbmcyYnVmKGRhdGEpO1xuICB9IGVsc2UgaWYgKHRvU3RyaW5nLmNhbGwoZGF0YSkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXScpIHtcbiAgICBzdHJtLmlucHV0ID0gbmV3IFVpbnQ4QXJyYXkoZGF0YSk7XG4gIH0gZWxzZSB7XG4gICAgc3RybS5pbnB1dCA9IGRhdGE7XG4gIH1cblxuICBzdHJtLm5leHRfaW4gPSAwO1xuICBzdHJtLmF2YWlsX2luID0gc3RybS5pbnB1dC5sZW5ndGg7XG5cbiAgZG8ge1xuICAgIGlmIChzdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgc3RybS5vdXRwdXQgPSBuZXcgdXRpbHMuQnVmOChjaHVua1NpemUpO1xuICAgICAgc3RybS5uZXh0X291dCA9IDA7XG4gICAgICBzdHJtLmF2YWlsX291dCA9IGNodW5rU2l6ZTtcbiAgICB9XG5cbiAgICBzdGF0dXMgPSB6bGliX2luZmxhdGUuaW5mbGF0ZShzdHJtLCBjLlpfTk9fRkxVU0gpOyAgICAvKiBubyBiYWQgcmV0dXJuIHZhbHVlICovXG5cbiAgICBpZiAoc3RhdHVzID09PSBjLlpfTkVFRF9ESUNUICYmIGRpY3Rpb25hcnkpIHtcbiAgICAgIHN0YXR1cyA9IHpsaWJfaW5mbGF0ZS5pbmZsYXRlU2V0RGljdGlvbmFyeSh0aGlzLnN0cm0sIGRpY3Rpb25hcnkpO1xuICAgIH1cblxuICAgIGlmIChzdGF0dXMgPT09IGMuWl9CVUZfRVJST1IgJiYgYWxsb3dCdWZFcnJvciA9PT0gdHJ1ZSkge1xuICAgICAgc3RhdHVzID0gYy5aX09LO1xuICAgICAgYWxsb3dCdWZFcnJvciA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChzdGF0dXMgIT09IGMuWl9TVFJFQU1fRU5EICYmIHN0YXR1cyAhPT0gYy5aX09LKSB7XG4gICAgICB0aGlzLm9uRW5kKHN0YXR1cyk7XG4gICAgICB0aGlzLmVuZGVkID0gdHJ1ZTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoc3RybS5uZXh0X291dCkge1xuICAgICAgaWYgKHN0cm0uYXZhaWxfb3V0ID09PSAwIHx8IHN0YXR1cyA9PT0gYy5aX1NUUkVBTV9FTkQgfHwgKHN0cm0uYXZhaWxfaW4gPT09IDAgJiYgKF9tb2RlID09PSBjLlpfRklOSVNIIHx8IF9tb2RlID09PSBjLlpfU1lOQ19GTFVTSCkpKSB7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy50byA9PT0gJ3N0cmluZycpIHtcblxuICAgICAgICAgIG5leHRfb3V0X3V0ZjggPSBzdHJpbmdzLnV0Zjhib3JkZXIoc3RybS5vdXRwdXQsIHN0cm0ubmV4dF9vdXQpO1xuXG4gICAgICAgICAgdGFpbCA9IHN0cm0ubmV4dF9vdXQgLSBuZXh0X291dF91dGY4O1xuICAgICAgICAgIHV0ZjhzdHIgPSBzdHJpbmdzLmJ1ZjJzdHJpbmcoc3RybS5vdXRwdXQsIG5leHRfb3V0X3V0ZjgpO1xuXG4gICAgICAgICAgLy8gbW92ZSB0YWlsXG4gICAgICAgICAgc3RybS5uZXh0X291dCA9IHRhaWw7XG4gICAgICAgICAgc3RybS5hdmFpbF9vdXQgPSBjaHVua1NpemUgLSB0YWlsO1xuICAgICAgICAgIGlmICh0YWlsKSB7IHV0aWxzLmFycmF5U2V0KHN0cm0ub3V0cHV0LCBzdHJtLm91dHB1dCwgbmV4dF9vdXRfdXRmOCwgdGFpbCwgMCk7IH1cblxuICAgICAgICAgIHRoaXMub25EYXRhKHV0ZjhzdHIpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5vbkRhdGEodXRpbHMuc2hyaW5rQnVmKHN0cm0ub3V0cHV0LCBzdHJtLm5leHRfb3V0KSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBXaGVuIG5vIG1vcmUgaW5wdXQgZGF0YSwgd2Ugc2hvdWxkIGNoZWNrIHRoYXQgaW50ZXJuYWwgaW5mbGF0ZSBidWZmZXJzXG4gICAgLy8gYXJlIGZsdXNoZWQuIFRoZSBvbmx5IHdheSB0byBkbyBpdCB3aGVuIGF2YWlsX291dCA9IDAgLSBydW4gb25lIG1vcmVcbiAgICAvLyBpbmZsYXRlIHBhc3MuIEJ1dCBpZiBvdXRwdXQgZGF0YSBub3QgZXhpc3RzLCBpbmZsYXRlIHJldHVybiBaX0JVRl9FUlJPUi5cbiAgICAvLyBIZXJlIHdlIHNldCBmbGFnIHRvIHByb2Nlc3MgdGhpcyBlcnJvciBwcm9wZXJseS5cbiAgICAvL1xuICAgIC8vIE5PVEUuIERlZmxhdGUgZG9lcyBub3QgcmV0dXJuIGVycm9yIGluIHRoaXMgY2FzZSBhbmQgZG9lcyBub3QgbmVlZHMgc3VjaFxuICAgIC8vIGxvZ2ljLlxuICAgIGlmIChzdHJtLmF2YWlsX2luID09PSAwICYmIHN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICBhbGxvd0J1ZkVycm9yID0gdHJ1ZTtcbiAgICB9XG5cbiAgfSB3aGlsZSAoKHN0cm0uYXZhaWxfaW4gPiAwIHx8IHN0cm0uYXZhaWxfb3V0ID09PSAwKSAmJiBzdGF0dXMgIT09IGMuWl9TVFJFQU1fRU5EKTtcblxuICBpZiAoc3RhdHVzID09PSBjLlpfU1RSRUFNX0VORCkge1xuICAgIF9tb2RlID0gYy5aX0ZJTklTSDtcbiAgfVxuXG4gIC8vIEZpbmFsaXplIG9uIHRoZSBsYXN0IGNodW5rLlxuICBpZiAoX21vZGUgPT09IGMuWl9GSU5JU0gpIHtcbiAgICBzdGF0dXMgPSB6bGliX2luZmxhdGUuaW5mbGF0ZUVuZCh0aGlzLnN0cm0pO1xuICAgIHRoaXMub25FbmQoc3RhdHVzKTtcbiAgICB0aGlzLmVuZGVkID0gdHJ1ZTtcbiAgICByZXR1cm4gc3RhdHVzID09PSBjLlpfT0s7XG4gIH1cblxuICAvLyBjYWxsYmFjayBpbnRlcmltIHJlc3VsdHMgaWYgWl9TWU5DX0ZMVVNILlxuICBpZiAoX21vZGUgPT09IGMuWl9TWU5DX0ZMVVNIKSB7XG4gICAgdGhpcy5vbkVuZChjLlpfT0spO1xuICAgIHN0cm0uYXZhaWxfb3V0ID0gMDtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuXG4vKipcbiAqIEluZmxhdGUjb25EYXRhKGNodW5rKSAtPiBWb2lkXG4gKiAtIGNodW5rIChVaW50OEFycmF5fEFycmF5fFN0cmluZyk6IG91dHB1dCBkYXRhLiBUeXBlIG9mIGFycmF5IGRlcGVuZHNcbiAqICAgb24ganMgZW5naW5lIHN1cHBvcnQuIFdoZW4gc3RyaW5nIG91dHB1dCByZXF1ZXN0ZWQsIGVhY2ggY2h1bmtcbiAqICAgd2lsbCBiZSBzdHJpbmcuXG4gKlxuICogQnkgZGVmYXVsdCwgc3RvcmVzIGRhdGEgYmxvY2tzIGluIGBjaHVua3NbXWAgcHJvcGVydHkgYW5kIGdsdWVcbiAqIHRob3NlIGluIGBvbkVuZGAuIE92ZXJyaWRlIHRoaXMgaGFuZGxlciwgaWYgeW91IG5lZWQgYW5vdGhlciBiZWhhdmlvdXIuXG4gKiovXG5JbmZsYXRlLnByb3RvdHlwZS5vbkRhdGEgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgdGhpcy5jaHVua3MucHVzaChjaHVuayk7XG59O1xuXG5cbi8qKlxuICogSW5mbGF0ZSNvbkVuZChzdGF0dXMpIC0+IFZvaWRcbiAqIC0gc3RhdHVzIChOdW1iZXIpOiBpbmZsYXRlIHN0YXR1cy4gMCAoWl9PSykgb24gc3VjY2VzcyxcbiAqICAgb3RoZXIgaWYgbm90LlxuICpcbiAqIENhbGxlZCBlaXRoZXIgYWZ0ZXIgeW91IHRlbGwgaW5mbGF0ZSB0aGF0IHRoZSBpbnB1dCBzdHJlYW0gaXNcbiAqIGNvbXBsZXRlIChaX0ZJTklTSCkgb3Igc2hvdWxkIGJlIGZsdXNoZWQgKFpfU1lOQ19GTFVTSClcbiAqIG9yIGlmIGFuIGVycm9yIGhhcHBlbmVkLiBCeSBkZWZhdWx0IC0gam9pbiBjb2xsZWN0ZWQgY2h1bmtzLFxuICogZnJlZSBtZW1vcnkgYW5kIGZpbGwgYHJlc3VsdHNgIC8gYGVycmAgcHJvcGVydGllcy5cbiAqKi9cbkluZmxhdGUucHJvdG90eXBlLm9uRW5kID0gZnVuY3Rpb24gKHN0YXR1cykge1xuICAvLyBPbiBzdWNjZXNzIC0gam9pblxuICBpZiAoc3RhdHVzID09PSBjLlpfT0spIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLnRvID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gR2x1ZSAmIGNvbnZlcnQgaGVyZSwgdW50aWwgd2UgdGVhY2ggcGFrbyB0byBzZW5kXG4gICAgICAvLyB1dGY4IGFsaWduZWQgc3RyaW5ncyB0byBvbkRhdGFcbiAgICAgIHRoaXMucmVzdWx0ID0gdGhpcy5jaHVua3Muam9pbignJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVzdWx0ID0gdXRpbHMuZmxhdHRlbkNodW5rcyh0aGlzLmNodW5rcyk7XG4gICAgfVxuICB9XG4gIHRoaXMuY2h1bmtzID0gW107XG4gIHRoaXMuZXJyID0gc3RhdHVzO1xuICB0aGlzLm1zZyA9IHRoaXMuc3RybS5tc2c7XG59O1xuXG5cbi8qKlxuICogaW5mbGF0ZShkYXRhWywgb3B0aW9uc10pIC0+IFVpbnQ4QXJyYXl8QXJyYXl8U3RyaW5nXG4gKiAtIGRhdGEgKFVpbnQ4QXJyYXl8QXJyYXl8U3RyaW5nKTogaW5wdXQgZGF0YSB0byBkZWNvbXByZXNzLlxuICogLSBvcHRpb25zIChPYmplY3QpOiB6bGliIGluZmxhdGUgb3B0aW9ucy5cbiAqXG4gKiBEZWNvbXByZXNzIGBkYXRhYCB3aXRoIGluZmxhdGUvdW5nemlwIGFuZCBgb3B0aW9uc2AuIEF1dG9kZXRlY3RcbiAqIGZvcm1hdCB2aWEgd3JhcHBlciBoZWFkZXIgYnkgZGVmYXVsdC4gVGhhdCdzIHdoeSB3ZSBkb24ndCBwcm92aWRlXG4gKiBzZXBhcmF0ZSBgdW5nemlwYCBtZXRob2QuXG4gKlxuICogU3VwcG9ydGVkIG9wdGlvbnMgYXJlOlxuICpcbiAqIC0gd2luZG93Qml0c1xuICpcbiAqIFtodHRwOi8vemxpYi5uZXQvbWFudWFsLmh0bWwjQWR2YW5jZWRdKGh0dHA6Ly96bGliLm5ldC9tYW51YWwuaHRtbCNBZHZhbmNlZClcbiAqIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICpcbiAqIFN1Z2FyIChvcHRpb25zKTpcbiAqXG4gKiAtIGByYXdgIChCb29sZWFuKSAtIHNheSB0aGF0IHdlIHdvcmsgd2l0aCByYXcgc3RyZWFtLCBpZiB5b3UgZG9uJ3Qgd2lzaCB0byBzcGVjaWZ5XG4gKiAgIG5lZ2F0aXZlIHdpbmRvd0JpdHMgaW1wbGljaXRseS5cbiAqIC0gYHRvYCAoU3RyaW5nKSAtIGlmIGVxdWFsIHRvICdzdHJpbmcnLCB0aGVuIHJlc3VsdCB3aWxsIGJlIGNvbnZlcnRlZFxuICogICBmcm9tIHV0ZjggdG8gdXRmMTYgKGphdmFzY3JpcHQpIHN0cmluZy4gV2hlbiBzdHJpbmcgb3V0cHV0IHJlcXVlc3RlZCxcbiAqICAgY2h1bmsgbGVuZ3RoIGNhbiBkaWZmZXIgZnJvbSBgY2h1bmtTaXplYCwgZGVwZW5kaW5nIG9uIGNvbnRlbnQuXG4gKlxuICpcbiAqICMjIyMjIEV4YW1wbGU6XG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogdmFyIHBha28gPSByZXF1aXJlKCdwYWtvJylcbiAqICAgLCBpbnB1dCA9IHBha28uZGVmbGF0ZShbMSwyLDMsNCw1LDYsNyw4LDldKVxuICogICAsIG91dHB1dDtcbiAqXG4gKiB0cnkge1xuICogICBvdXRwdXQgPSBwYWtvLmluZmxhdGUoaW5wdXQpO1xuICogfSBjYXRjaCAoZXJyKVxuICogICBjb25zb2xlLmxvZyhlcnIpO1xuICogfVxuICogYGBgXG4gKiovXG5mdW5jdGlvbiBpbmZsYXRlKGlucHV0LCBvcHRpb25zKSB7XG4gIHZhciBpbmZsYXRvciA9IG5ldyBJbmZsYXRlKG9wdGlvbnMpO1xuXG4gIGluZmxhdG9yLnB1c2goaW5wdXQsIHRydWUpO1xuXG4gIC8vIFRoYXQgd2lsbCBuZXZlciBoYXBwZW5zLCBpZiB5b3UgZG9uJ3QgY2hlYXQgd2l0aCBvcHRpb25zIDopXG4gIGlmIChpbmZsYXRvci5lcnIpIHsgdGhyb3cgaW5mbGF0b3IubXNnIHx8IG1zZ1tpbmZsYXRvci5lcnJdOyB9XG5cbiAgcmV0dXJuIGluZmxhdG9yLnJlc3VsdDtcbn1cblxuXG4vKipcbiAqIGluZmxhdGVSYXcoZGF0YVssIG9wdGlvbnNdKSAtPiBVaW50OEFycmF5fEFycmF5fFN0cmluZ1xuICogLSBkYXRhIChVaW50OEFycmF5fEFycmF5fFN0cmluZyk6IGlucHV0IGRhdGEgdG8gZGVjb21wcmVzcy5cbiAqIC0gb3B0aW9ucyAoT2JqZWN0KTogemxpYiBpbmZsYXRlIG9wdGlvbnMuXG4gKlxuICogVGhlIHNhbWUgYXMgW1tpbmZsYXRlXV0sIGJ1dCBjcmVhdGVzIHJhdyBkYXRhLCB3aXRob3V0IHdyYXBwZXJcbiAqIChoZWFkZXIgYW5kIGFkbGVyMzIgY3JjKS5cbiAqKi9cbmZ1bmN0aW9uIGluZmxhdGVSYXcoaW5wdXQsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIG9wdGlvbnMucmF3ID0gdHJ1ZTtcbiAgcmV0dXJuIGluZmxhdGUoaW5wdXQsIG9wdGlvbnMpO1xufVxuXG5cbi8qKlxuICogdW5nemlwKGRhdGFbLCBvcHRpb25zXSkgLT4gVWludDhBcnJheXxBcnJheXxTdHJpbmdcbiAqIC0gZGF0YSAoVWludDhBcnJheXxBcnJheXxTdHJpbmcpOiBpbnB1dCBkYXRhIHRvIGRlY29tcHJlc3MuXG4gKiAtIG9wdGlvbnMgKE9iamVjdCk6IHpsaWIgaW5mbGF0ZSBvcHRpb25zLlxuICpcbiAqIEp1c3Qgc2hvcnRjdXQgdG8gW1tpbmZsYXRlXV0sIGJlY2F1c2UgaXQgYXV0b2RldGVjdHMgZm9ybWF0XG4gKiBieSBoZWFkZXIuY29udGVudC4gRG9uZSBmb3IgY29udmVuaWVuY2UuXG4gKiovXG5cblxuZXhwb3J0cy5JbmZsYXRlID0gSW5mbGF0ZTtcbmV4cG9ydHMuaW5mbGF0ZSA9IGluZmxhdGU7XG5leHBvcnRzLmluZmxhdGVSYXcgPSBpbmZsYXRlUmF3O1xuZXhwb3J0cy51bmd6aXAgID0gaW5mbGF0ZTtcbiJdLCJuYW1lcyI6WyJ6bGliX2luZmxhdGUiLCJyZXF1aXJlIiwidXRpbHMiLCJzdHJpbmdzIiwiYyIsIm1zZyIsIlpTdHJlYW0iLCJHWmhlYWRlciIsInRvU3RyaW5nIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiSW5mbGF0ZSIsIm9wdGlvbnMiLCJhc3NpZ24iLCJjaHVua1NpemUiLCJ3aW5kb3dCaXRzIiwidG8iLCJvcHQiLCJyYXciLCJlcnIiLCJlbmRlZCIsImNodW5rcyIsInN0cm0iLCJhdmFpbF9vdXQiLCJzdGF0dXMiLCJpbmZsYXRlSW5pdDIiLCJaX09LIiwiRXJyb3IiLCJoZWFkZXIiLCJpbmZsYXRlR2V0SGVhZGVyIiwiZGljdGlvbmFyeSIsInN0cmluZzJidWYiLCJjYWxsIiwiVWludDhBcnJheSIsImluZmxhdGVTZXREaWN0aW9uYXJ5IiwicHVzaCIsImRhdGEiLCJtb2RlIiwiX21vZGUiLCJuZXh0X291dF91dGY4IiwidGFpbCIsInV0ZjhzdHIiLCJhbGxvd0J1ZkVycm9yIiwiWl9GSU5JU0giLCJaX05PX0ZMVVNIIiwiaW5wdXQiLCJiaW5zdHJpbmcyYnVmIiwibmV4dF9pbiIsImF2YWlsX2luIiwibGVuZ3RoIiwib3V0cHV0IiwiQnVmOCIsIm5leHRfb3V0IiwiaW5mbGF0ZSIsIlpfTkVFRF9ESUNUIiwiWl9CVUZfRVJST1IiLCJaX1NUUkVBTV9FTkQiLCJvbkVuZCIsIlpfU1lOQ19GTFVTSCIsInV0Zjhib3JkZXIiLCJidWYyc3RyaW5nIiwiYXJyYXlTZXQiLCJvbkRhdGEiLCJzaHJpbmtCdWYiLCJpbmZsYXRlRW5kIiwiY2h1bmsiLCJyZXN1bHQiLCJqb2luIiwiZmxhdHRlbkNodW5rcyIsImluZmxhdG9yIiwiaW5mbGF0ZVJhdyIsImV4cG9ydHMiLCJ1bmd6aXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/inflate.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/utils/common.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/utils/common.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nvar TYPED_OK = typeof Uint8Array !== \"undefined\" && typeof Uint16Array !== \"undefined\" && typeof Int32Array !== \"undefined\";\nfunction _has(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\nexports.assign = function(obj /*from1, from2, from3, ...*/ ) {\n    var sources = Array.prototype.slice.call(arguments, 1);\n    while(sources.length){\n        var source = sources.shift();\n        if (!source) {\n            continue;\n        }\n        if (typeof source !== \"object\") {\n            throw new TypeError(source + \"must be non-object\");\n        }\n        for(var p in source){\n            if (_has(source, p)) {\n                obj[p] = source[p];\n            }\n        }\n    }\n    return obj;\n};\n// reduce buffer size, avoiding mem copy\nexports.shrinkBuf = function(buf, size) {\n    if (buf.length === size) {\n        return buf;\n    }\n    if (buf.subarray) {\n        return buf.subarray(0, size);\n    }\n    buf.length = size;\n    return buf;\n};\nvar fnTyped = {\n    arraySet: function(dest, src, src_offs, len, dest_offs) {\n        if (src.subarray && dest.subarray) {\n            dest.set(src.subarray(src_offs, src_offs + len), dest_offs);\n            return;\n        }\n        // Fallback to ordinary array\n        for(var i = 0; i < len; i++){\n            dest[dest_offs + i] = src[src_offs + i];\n        }\n    },\n    // Join array of chunks to single array.\n    flattenChunks: function(chunks) {\n        var i, l, len, pos, chunk, result;\n        // calculate data length\n        len = 0;\n        for(i = 0, l = chunks.length; i < l; i++){\n            len += chunks[i].length;\n        }\n        // join chunks\n        result = new Uint8Array(len);\n        pos = 0;\n        for(i = 0, l = chunks.length; i < l; i++){\n            chunk = chunks[i];\n            result.set(chunk, pos);\n            pos += chunk.length;\n        }\n        return result;\n    }\n};\nvar fnUntyped = {\n    arraySet: function(dest, src, src_offs, len, dest_offs) {\n        for(var i = 0; i < len; i++){\n            dest[dest_offs + i] = src[src_offs + i];\n        }\n    },\n    // Join array of chunks to single array.\n    flattenChunks: function(chunks) {\n        return [].concat.apply([], chunks);\n    }\n};\n// Enable/Disable typed arrays use, for testing\n//\nexports.setTyped = function(on) {\n    if (on) {\n        exports.Buf8 = Uint8Array;\n        exports.Buf16 = Uint16Array;\n        exports.Buf32 = Int32Array;\n        exports.assign(exports, fnTyped);\n    } else {\n        exports.Buf8 = Array;\n        exports.Buf16 = Array;\n        exports.Buf32 = Array;\n        exports.assign(exports, fnUntyped);\n    }\n};\nexports.setTyped(TYPED_OK);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHBkZi1saWIvc3RhbmRhcmQtZm9udHMvbm9kZV9tb2R1bGVzL3Bha28vbGliL3V0aWxzL2NvbW1vbi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUdBLElBQUlBLFdBQVksT0FBUUMsZUFBZSxlQUN0QixPQUFPQyxnQkFBZ0IsZUFDdkIsT0FBT0MsZUFBZTtBQUV2QyxTQUFTQyxLQUFLQyxHQUFHLEVBQUVDLEdBQUc7SUFDcEIsT0FBT0MsT0FBT0MsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ0wsS0FBS0M7QUFDbkQ7QUFFQUssY0FBYyxHQUFHLFNBQVVOLElBQUksMEJBQTBCLEdBQTNCO0lBQzVCLElBQUlRLFVBQVVDLE1BQU1OLFNBQVMsQ0FBQ08sS0FBSyxDQUFDTCxJQUFJLENBQUNNLFdBQVc7SUFDcEQsTUFBT0gsUUFBUUksTUFBTSxDQUFFO1FBQ3JCLElBQUlDLFNBQVNMLFFBQVFNLEtBQUs7UUFDMUIsSUFBSSxDQUFDRCxRQUFRO1lBQUU7UUFBVTtRQUV6QixJQUFJLE9BQU9BLFdBQVcsVUFBVTtZQUM5QixNQUFNLElBQUlFLFVBQVVGLFNBQVM7UUFDL0I7UUFFQSxJQUFLLElBQUlHLEtBQUtILE9BQVE7WUFDcEIsSUFBSWQsS0FBS2MsUUFBUUcsSUFBSTtnQkFDbkJoQixHQUFHLENBQUNnQixFQUFFLEdBQUdILE1BQU0sQ0FBQ0csRUFBRTtZQUNwQjtRQUNGO0lBQ0Y7SUFFQSxPQUFPaEI7QUFDVDtBQUdBLHdDQUF3QztBQUN4Q00saUJBQWlCLEdBQUcsU0FBVVksR0FBRyxFQUFFQyxJQUFJO0lBQ3JDLElBQUlELElBQUlOLE1BQU0sS0FBS08sTUFBTTtRQUFFLE9BQU9EO0lBQUs7SUFDdkMsSUFBSUEsSUFBSUUsUUFBUSxFQUFFO1FBQUUsT0FBT0YsSUFBSUUsUUFBUSxDQUFDLEdBQUdEO0lBQU87SUFDbERELElBQUlOLE1BQU0sR0FBR087SUFDYixPQUFPRDtBQUNUO0FBR0EsSUFBSUcsVUFBVTtJQUNaQyxVQUFVLFNBQVVDLElBQUksRUFBRUMsR0FBRyxFQUFFQyxRQUFRLEVBQUVDLEdBQUcsRUFBRUMsU0FBUztRQUNyRCxJQUFJSCxJQUFJSixRQUFRLElBQUlHLEtBQUtILFFBQVEsRUFBRTtZQUNqQ0csS0FBS0ssR0FBRyxDQUFDSixJQUFJSixRQUFRLENBQUNLLFVBQVVBLFdBQVdDLE1BQU1DO1lBQ2pEO1FBQ0Y7UUFDQSw2QkFBNkI7UUFDN0IsSUFBSyxJQUFJRSxJQUFJLEdBQUdBLElBQUlILEtBQUtHLElBQUs7WUFDNUJOLElBQUksQ0FBQ0ksWUFBWUUsRUFBRSxHQUFHTCxHQUFHLENBQUNDLFdBQVdJLEVBQUU7UUFDekM7SUFDRjtJQUNBLHdDQUF3QztJQUN4Q0MsZUFBZSxTQUFVQyxNQUFNO1FBQzdCLElBQUlGLEdBQUdHLEdBQUdOLEtBQUtPLEtBQUtDLE9BQU9DO1FBRTNCLHdCQUF3QjtRQUN4QlQsTUFBTTtRQUNOLElBQUtHLElBQUksR0FBR0csSUFBSUQsT0FBT25CLE1BQU0sRUFBRWlCLElBQUlHLEdBQUdILElBQUs7WUFDekNILE9BQU9LLE1BQU0sQ0FBQ0YsRUFBRSxDQUFDakIsTUFBTTtRQUN6QjtRQUVBLGNBQWM7UUFDZHVCLFNBQVMsSUFBSXZDLFdBQVc4QjtRQUN4Qk8sTUFBTTtRQUNOLElBQUtKLElBQUksR0FBR0csSUFBSUQsT0FBT25CLE1BQU0sRUFBRWlCLElBQUlHLEdBQUdILElBQUs7WUFDekNLLFFBQVFILE1BQU0sQ0FBQ0YsRUFBRTtZQUNqQk0sT0FBT1AsR0FBRyxDQUFDTSxPQUFPRDtZQUNsQkEsT0FBT0MsTUFBTXRCLE1BQU07UUFDckI7UUFFQSxPQUFPdUI7SUFDVDtBQUNGO0FBRUEsSUFBSUMsWUFBWTtJQUNkZCxVQUFVLFNBQVVDLElBQUksRUFBRUMsR0FBRyxFQUFFQyxRQUFRLEVBQUVDLEdBQUcsRUFBRUMsU0FBUztRQUNyRCxJQUFLLElBQUlFLElBQUksR0FBR0EsSUFBSUgsS0FBS0csSUFBSztZQUM1Qk4sSUFBSSxDQUFDSSxZQUFZRSxFQUFFLEdBQUdMLEdBQUcsQ0FBQ0MsV0FBV0ksRUFBRTtRQUN6QztJQUNGO0lBQ0Esd0NBQXdDO0lBQ3hDQyxlQUFlLFNBQVVDLE1BQU07UUFDN0IsT0FBTyxFQUFFLENBQUNNLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDLEVBQUUsRUFBRVA7SUFDN0I7QUFDRjtBQUdBLCtDQUErQztBQUMvQyxFQUFFO0FBQ0Z6QixnQkFBZ0IsR0FBRyxTQUFVa0MsRUFBRTtJQUM3QixJQUFJQSxJQUFJO1FBQ05sQyxZQUFZLEdBQUlWO1FBQ2hCVSxhQUFhLEdBQUdUO1FBQ2hCUyxhQUFhLEdBQUdSO1FBQ2hCUSxRQUFRQyxNQUFNLENBQUNELFNBQVNlO0lBQzFCLE9BQU87UUFDTGYsWUFBWSxHQUFJRztRQUNoQkgsYUFBYSxHQUFHRztRQUNoQkgsYUFBYSxHQUFHRztRQUNoQkgsUUFBUUMsTUFBTSxDQUFDRCxTQUFTOEI7SUFDMUI7QUFDRjtBQUVBOUIsUUFBUWlDLFFBQVEsQ0FBQzVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2l2aWwtZW5naW5lZXJpbmctcGxhdGZvcm0vLi9ub2RlX21vZHVsZXMvQHBkZi1saWIvc3RhbmRhcmQtZm9udHMvbm9kZV9tb2R1bGVzL3Bha28vbGliL3V0aWxzL2NvbW1vbi5qcz80MjhlIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuXG52YXIgVFlQRURfT0sgPSAgKHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJykgJiZcbiAgICAgICAgICAgICAgICAodHlwZW9mIFVpbnQxNkFycmF5ICE9PSAndW5kZWZpbmVkJykgJiZcbiAgICAgICAgICAgICAgICAodHlwZW9mIEludDMyQXJyYXkgIT09ICd1bmRlZmluZWQnKTtcblxuZnVuY3Rpb24gX2hhcyhvYmosIGtleSkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTtcbn1cblxuZXhwb3J0cy5hc3NpZ24gPSBmdW5jdGlvbiAob2JqIC8qZnJvbTEsIGZyb20yLCBmcm9tMywgLi4uKi8pIHtcbiAgdmFyIHNvdXJjZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICB3aGlsZSAoc291cmNlcy5sZW5ndGgpIHtcbiAgICB2YXIgc291cmNlID0gc291cmNlcy5zaGlmdCgpO1xuICAgIGlmICghc291cmNlKSB7IGNvbnRpbnVlOyB9XG5cbiAgICBpZiAodHlwZW9mIHNvdXJjZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3Ioc291cmNlICsgJ211c3QgYmUgbm9uLW9iamVjdCcpO1xuICAgIH1cblxuICAgIGZvciAodmFyIHAgaW4gc291cmNlKSB7XG4gICAgICBpZiAoX2hhcyhzb3VyY2UsIHApKSB7XG4gICAgICAgIG9ialtwXSA9IHNvdXJjZVtwXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufTtcblxuXG4vLyByZWR1Y2UgYnVmZmVyIHNpemUsIGF2b2lkaW5nIG1lbSBjb3B5XG5leHBvcnRzLnNocmlua0J1ZiA9IGZ1bmN0aW9uIChidWYsIHNpemUpIHtcbiAgaWYgKGJ1Zi5sZW5ndGggPT09IHNpemUpIHsgcmV0dXJuIGJ1ZjsgfVxuICBpZiAoYnVmLnN1YmFycmF5KSB7IHJldHVybiBidWYuc3ViYXJyYXkoMCwgc2l6ZSk7IH1cbiAgYnVmLmxlbmd0aCA9IHNpemU7XG4gIHJldHVybiBidWY7XG59O1xuXG5cbnZhciBmblR5cGVkID0ge1xuICBhcnJheVNldDogZnVuY3Rpb24gKGRlc3QsIHNyYywgc3JjX29mZnMsIGxlbiwgZGVzdF9vZmZzKSB7XG4gICAgaWYgKHNyYy5zdWJhcnJheSAmJiBkZXN0LnN1YmFycmF5KSB7XG4gICAgICBkZXN0LnNldChzcmMuc3ViYXJyYXkoc3JjX29mZnMsIHNyY19vZmZzICsgbGVuKSwgZGVzdF9vZmZzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gRmFsbGJhY2sgdG8gb3JkaW5hcnkgYXJyYXlcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBkZXN0W2Rlc3Rfb2ZmcyArIGldID0gc3JjW3NyY19vZmZzICsgaV07XG4gICAgfVxuICB9LFxuICAvLyBKb2luIGFycmF5IG9mIGNodW5rcyB0byBzaW5nbGUgYXJyYXkuXG4gIGZsYXR0ZW5DaHVua3M6IGZ1bmN0aW9uIChjaHVua3MpIHtcbiAgICB2YXIgaSwgbCwgbGVuLCBwb3MsIGNodW5rLCByZXN1bHQ7XG5cbiAgICAvLyBjYWxjdWxhdGUgZGF0YSBsZW5ndGhcbiAgICBsZW4gPSAwO1xuICAgIGZvciAoaSA9IDAsIGwgPSBjaHVua3MubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBsZW4gKz0gY2h1bmtzW2ldLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvLyBqb2luIGNodW5rc1xuICAgIHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KGxlbik7XG4gICAgcG9zID0gMDtcbiAgICBmb3IgKGkgPSAwLCBsID0gY2h1bmtzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgY2h1bmsgPSBjaHVua3NbaV07XG4gICAgICByZXN1bHQuc2V0KGNodW5rLCBwb3MpO1xuICAgICAgcG9zICs9IGNodW5rLmxlbmd0aDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuXG52YXIgZm5VbnR5cGVkID0ge1xuICBhcnJheVNldDogZnVuY3Rpb24gKGRlc3QsIHNyYywgc3JjX29mZnMsIGxlbiwgZGVzdF9vZmZzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgZGVzdFtkZXN0X29mZnMgKyBpXSA9IHNyY1tzcmNfb2ZmcyArIGldO1xuICAgIH1cbiAgfSxcbiAgLy8gSm9pbiBhcnJheSBvZiBjaHVua3MgdG8gc2luZ2xlIGFycmF5LlxuICBmbGF0dGVuQ2h1bmtzOiBmdW5jdGlvbiAoY2h1bmtzKSB7XG4gICAgcmV0dXJuIFtdLmNvbmNhdC5hcHBseShbXSwgY2h1bmtzKTtcbiAgfVxufTtcblxuXG4vLyBFbmFibGUvRGlzYWJsZSB0eXBlZCBhcnJheXMgdXNlLCBmb3IgdGVzdGluZ1xuLy9cbmV4cG9ydHMuc2V0VHlwZWQgPSBmdW5jdGlvbiAob24pIHtcbiAgaWYgKG9uKSB7XG4gICAgZXhwb3J0cy5CdWY4ICA9IFVpbnQ4QXJyYXk7XG4gICAgZXhwb3J0cy5CdWYxNiA9IFVpbnQxNkFycmF5O1xuICAgIGV4cG9ydHMuQnVmMzIgPSBJbnQzMkFycmF5O1xuICAgIGV4cG9ydHMuYXNzaWduKGV4cG9ydHMsIGZuVHlwZWQpO1xuICB9IGVsc2Uge1xuICAgIGV4cG9ydHMuQnVmOCAgPSBBcnJheTtcbiAgICBleHBvcnRzLkJ1ZjE2ID0gQXJyYXk7XG4gICAgZXhwb3J0cy5CdWYzMiA9IEFycmF5O1xuICAgIGV4cG9ydHMuYXNzaWduKGV4cG9ydHMsIGZuVW50eXBlZCk7XG4gIH1cbn07XG5cbmV4cG9ydHMuc2V0VHlwZWQoVFlQRURfT0spO1xuIl0sIm5hbWVzIjpbIlRZUEVEX09LIiwiVWludDhBcnJheSIsIlVpbnQxNkFycmF5IiwiSW50MzJBcnJheSIsIl9oYXMiLCJvYmoiLCJrZXkiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJleHBvcnRzIiwiYXNzaWduIiwic291cmNlcyIsIkFycmF5Iiwic2xpY2UiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJzaGlmdCIsIlR5cGVFcnJvciIsInAiLCJzaHJpbmtCdWYiLCJidWYiLCJzaXplIiwic3ViYXJyYXkiLCJmblR5cGVkIiwiYXJyYXlTZXQiLCJkZXN0Iiwic3JjIiwic3JjX29mZnMiLCJsZW4iLCJkZXN0X29mZnMiLCJzZXQiLCJpIiwiZmxhdHRlbkNodW5rcyIsImNodW5rcyIsImwiLCJwb3MiLCJjaHVuayIsInJlc3VsdCIsImZuVW50eXBlZCIsImNvbmNhdCIsImFwcGx5Iiwic2V0VHlwZWQiLCJvbiIsIkJ1ZjgiLCJCdWYxNiIsIkJ1ZjMyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/utils/common.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/utils/strings.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/utils/strings.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("// String encode/decode helpers\n\nvar utils = __webpack_require__(/*! ./common */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/utils/common.js\");\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nvar STR_APPLY_OK = true;\nvar STR_APPLY_UIA_OK = true;\ntry {\n    String.fromCharCode.apply(null, [\n        0\n    ]);\n} catch (__) {\n    STR_APPLY_OK = false;\n}\ntry {\n    String.fromCharCode.apply(null, new Uint8Array(1));\n} catch (__) {\n    STR_APPLY_UIA_OK = false;\n}\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nvar _utf8len = new utils.Buf8(256);\nfor(var q = 0; q < 256; q++){\n    _utf8len[q] = q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1;\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n// convert string to array (typed, when possible)\nexports.string2buf = function(str) {\n    var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n    // count binary size\n    for(m_pos = 0; m_pos < str_len; m_pos++){\n        c = str.charCodeAt(m_pos);\n        if ((c & 0xfc00) === 0xd800 && m_pos + 1 < str_len) {\n            c2 = str.charCodeAt(m_pos + 1);\n            if ((c2 & 0xfc00) === 0xdc00) {\n                c = 0x10000 + (c - 0xd800 << 10) + (c2 - 0xdc00);\n                m_pos++;\n            }\n        }\n        buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n    }\n    // allocate buffer\n    buf = new utils.Buf8(buf_len);\n    // convert\n    for(i = 0, m_pos = 0; i < buf_len; m_pos++){\n        c = str.charCodeAt(m_pos);\n        if ((c & 0xfc00) === 0xd800 && m_pos + 1 < str_len) {\n            c2 = str.charCodeAt(m_pos + 1);\n            if ((c2 & 0xfc00) === 0xdc00) {\n                c = 0x10000 + (c - 0xd800 << 10) + (c2 - 0xdc00);\n                m_pos++;\n            }\n        }\n        if (c < 0x80) {\n            /* one byte */ buf[i++] = c;\n        } else if (c < 0x800) {\n            /* two bytes */ buf[i++] = 0xC0 | c >>> 6;\n            buf[i++] = 0x80 | c & 0x3f;\n        } else if (c < 0x10000) {\n            /* three bytes */ buf[i++] = 0xE0 | c >>> 12;\n            buf[i++] = 0x80 | c >>> 6 & 0x3f;\n            buf[i++] = 0x80 | c & 0x3f;\n        } else {\n            /* four bytes */ buf[i++] = 0xf0 | c >>> 18;\n            buf[i++] = 0x80 | c >>> 12 & 0x3f;\n            buf[i++] = 0x80 | c >>> 6 & 0x3f;\n            buf[i++] = 0x80 | c & 0x3f;\n        }\n    }\n    return buf;\n};\n// Helper (used in 2 places)\nfunction buf2binstring(buf, len) {\n    // On Chrome, the arguments in a function call that are allowed is `65534`.\n    // If the length of the buffer is smaller than that, we can use this optimization,\n    // otherwise we will take a slower path.\n    if (len < 65534) {\n        if (buf.subarray && STR_APPLY_UIA_OK || !buf.subarray && STR_APPLY_OK) {\n            return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));\n        }\n    }\n    var result = \"\";\n    for(var i = 0; i < len; i++){\n        result += String.fromCharCode(buf[i]);\n    }\n    return result;\n}\n// Convert byte array to binary string\nexports.buf2binstring = function(buf) {\n    return buf2binstring(buf, buf.length);\n};\n// Convert binary string (typed, when possible)\nexports.binstring2buf = function(str) {\n    var buf = new utils.Buf8(str.length);\n    for(var i = 0, len = buf.length; i < len; i++){\n        buf[i] = str.charCodeAt(i);\n    }\n    return buf;\n};\n// convert array to string\nexports.buf2string = function(buf, max) {\n    var i, out, c, c_len;\n    var len = max || buf.length;\n    // Reserve max possible length (2 words per char)\n    // NB: by unknown reasons, Array is significantly faster for\n    //     String.fromCharCode.apply than Uint16Array.\n    var utf16buf = new Array(len * 2);\n    for(out = 0, i = 0; i < len;){\n        c = buf[i++];\n        // quick process ascii\n        if (c < 0x80) {\n            utf16buf[out++] = c;\n            continue;\n        }\n        c_len = _utf8len[c];\n        // skip 5 & 6 byte codes\n        if (c_len > 4) {\n            utf16buf[out++] = 0xfffd;\n            i += c_len - 1;\n            continue;\n        }\n        // apply mask on first byte\n        c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n        // join the rest\n        while(c_len > 1 && i < len){\n            c = c << 6 | buf[i++] & 0x3f;\n            c_len--;\n        }\n        // terminated by end of string?\n        if (c_len > 1) {\n            utf16buf[out++] = 0xfffd;\n            continue;\n        }\n        if (c < 0x10000) {\n            utf16buf[out++] = c;\n        } else {\n            c -= 0x10000;\n            utf16buf[out++] = 0xd800 | c >> 10 & 0x3ff;\n            utf16buf[out++] = 0xdc00 | c & 0x3ff;\n        }\n    }\n    return buf2binstring(utf16buf, out);\n};\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nexports.utf8border = function(buf, max) {\n    var pos;\n    max = max || buf.length;\n    if (max > buf.length) {\n        max = buf.length;\n    }\n    // go back from last position, until start of sequence found\n    pos = max - 1;\n    while(pos >= 0 && (buf[pos] & 0xC0) === 0x80){\n        pos--;\n    }\n    // Very small and broken sequence,\n    // return max, because we should return something anyway.\n    if (pos < 0) {\n        return max;\n    }\n    // If we came to start of buffer - that means buffer is too small,\n    // return max too.\n    if (pos === 0) {\n        return max;\n    }\n    return pos + _utf8len[buf[pos]] > max ? pos : max;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/utils/strings.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/adler32.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/adler32.js ***!
  \************************************************************************************/
/***/ ((module) => {

eval("\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nfunction adler32(adler, buf, len, pos) {\n    var s1 = adler & 0xffff | 0, s2 = adler >>> 16 & 0xffff | 0, n = 0;\n    while(len !== 0){\n        // Set limit ~ twice less than 5552, to keep\n        // s2 in 31-bits, because we force signed ints.\n        // in other case %= will fail.\n        n = len > 2000 ? 2000 : len;\n        len -= n;\n        do {\n            s1 = s1 + buf[pos++] | 0;\n            s2 = s2 + s1 | 0;\n        }while (--n);\n        s1 %= 65521;\n        s2 %= 65521;\n    }\n    return s1 | s2 << 16 | 0;\n}\nmodule.exports = adler32;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHBkZi1saWIvc3RhbmRhcmQtZm9udHMvbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvYWRsZXIzMi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLDBEQUEwRDtBQUMxRCxxRUFBcUU7QUFDckUsNEJBQTRCO0FBRTVCLGdEQUFnRDtBQUNoRCxrREFBa0Q7QUFDbEQsRUFBRTtBQUNGLG9FQUFvRTtBQUNwRSx3RUFBd0U7QUFDeEUseUNBQXlDO0FBQ3pDLEVBQUU7QUFDRix3RUFBd0U7QUFDeEUseUVBQXlFO0FBQ3pFLGlEQUFpRDtBQUNqRCxFQUFFO0FBQ0YsMEVBQTBFO0FBQzFFLHlFQUF5RTtBQUN6RSwwRUFBMEU7QUFDMUUscUNBQXFDO0FBQ3JDLDZFQUE2RTtBQUM3RSxtREFBbUQ7QUFDbkQsNkVBQTZFO0FBRTdFLFNBQVNBLFFBQVFDLEtBQUssRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLEdBQUc7SUFDbkMsSUFBSUMsS0FBSyxRQUFTLFNBQVMsR0FDdkJDLEtBQUssVUFBWSxLQUFNLFNBQVMsR0FDaENDLElBQUk7SUFFUixNQUFPSixRQUFRLEVBQUc7UUFDaEIsNENBQTRDO1FBQzVDLCtDQUErQztRQUMvQyw4QkFBOEI7UUFDOUJJLElBQUlKLE1BQU0sT0FBTyxPQUFPQTtRQUN4QkEsT0FBT0k7UUFFUCxHQUFHO1lBQ0RGLEtBQUssS0FBTUgsR0FBRyxDQUFDRSxNQUFNLEdBQUc7WUFDeEJFLEtBQUssS0FBTUQsS0FBSztRQUNsQixRQUFTLEVBQUVFLEdBQUc7UUFFZEYsTUFBTTtRQUNOQyxNQUFNO0lBQ1I7SUFFQSxPQUFPLEtBQU9BLE1BQU0sS0FBTTtBQUM1QjtBQUdBRSxPQUFPQyxPQUFPLEdBQUdUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2l2aWwtZW5naW5lZXJpbmctcGxhdGZvcm0vLi9ub2RlX21vZHVsZXMvQHBkZi1saWIvc3RhbmRhcmQtZm9udHMvbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvYWRsZXIzMi5qcz82N2E0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLy8gTm90ZTogYWRsZXIzMiB0YWtlcyAxMiUgZm9yIGxldmVsIDAgYW5kIDIlIGZvciBsZXZlbCA2LlxuLy8gSXQgaXNuJ3Qgd29ydGggaXQgdG8gbWFrZSBhZGRpdGlvbmFsIG9wdGltaXphdGlvbnMgYXMgaW4gb3JpZ2luYWwuXG4vLyBTbWFsbCBzaXplIGlzIHByZWZlcmFibGUuXG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxuZnVuY3Rpb24gYWRsZXIzMihhZGxlciwgYnVmLCBsZW4sIHBvcykge1xuICB2YXIgczEgPSAoYWRsZXIgJiAweGZmZmYpIHwwLFxuICAgICAgczIgPSAoKGFkbGVyID4+PiAxNikgJiAweGZmZmYpIHwwLFxuICAgICAgbiA9IDA7XG5cbiAgd2hpbGUgKGxlbiAhPT0gMCkge1xuICAgIC8vIFNldCBsaW1pdCB+IHR3aWNlIGxlc3MgdGhhbiA1NTUyLCB0byBrZWVwXG4gICAgLy8gczIgaW4gMzEtYml0cywgYmVjYXVzZSB3ZSBmb3JjZSBzaWduZWQgaW50cy5cbiAgICAvLyBpbiBvdGhlciBjYXNlICU9IHdpbGwgZmFpbC5cbiAgICBuID0gbGVuID4gMjAwMCA/IDIwMDAgOiBsZW47XG4gICAgbGVuIC09IG47XG5cbiAgICBkbyB7XG4gICAgICBzMSA9IChzMSArIGJ1Zltwb3MrK10pIHwwO1xuICAgICAgczIgPSAoczIgKyBzMSkgfDA7XG4gICAgfSB3aGlsZSAoLS1uKTtcblxuICAgIHMxICU9IDY1NTIxO1xuICAgIHMyICU9IDY1NTIxO1xuICB9XG5cbiAgcmV0dXJuIChzMSB8IChzMiA8PCAxNikpIHwwO1xufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gYWRsZXIzMjtcbiJdLCJuYW1lcyI6WyJhZGxlcjMyIiwiYWRsZXIiLCJidWYiLCJsZW4iLCJwb3MiLCJzMSIsInMyIiwibiIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/adler32.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/constants.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/constants.js ***!
  \**************************************************************************************/
/***/ ((module) => {

eval("\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nmodule.exports = {\n    /* Allowed flush values; see deflate() and inflate() below for details */ Z_NO_FLUSH: 0,\n    Z_PARTIAL_FLUSH: 1,\n    Z_SYNC_FLUSH: 2,\n    Z_FULL_FLUSH: 3,\n    Z_FINISH: 4,\n    Z_BLOCK: 5,\n    Z_TREES: 6,\n    /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */ Z_OK: 0,\n    Z_STREAM_END: 1,\n    Z_NEED_DICT: 2,\n    Z_ERRNO: -1,\n    Z_STREAM_ERROR: -2,\n    Z_DATA_ERROR: -3,\n    //Z_MEM_ERROR:     -4,\n    Z_BUF_ERROR: -5,\n    //Z_VERSION_ERROR: -6,\n    /* compression levels */ Z_NO_COMPRESSION: 0,\n    Z_BEST_SPEED: 1,\n    Z_BEST_COMPRESSION: 9,\n    Z_DEFAULT_COMPRESSION: -1,\n    Z_FILTERED: 1,\n    Z_HUFFMAN_ONLY: 2,\n    Z_RLE: 3,\n    Z_FIXED: 4,\n    Z_DEFAULT_STRATEGY: 0,\n    /* Possible values of the data_type field (though see inflate()) */ Z_BINARY: 0,\n    Z_TEXT: 1,\n    //Z_ASCII:                1, // = Z_TEXT (deprecated)\n    Z_UNKNOWN: 2,\n    /* The deflate compression method */ Z_DEFLATED: 8\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHBkZi1saWIvc3RhbmRhcmQtZm9udHMvbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsZ0RBQWdEO0FBQ2hELGtEQUFrRDtBQUNsRCxFQUFFO0FBQ0Ysb0VBQW9FO0FBQ3BFLHdFQUF3RTtBQUN4RSx5Q0FBeUM7QUFDekMsRUFBRTtBQUNGLHdFQUF3RTtBQUN4RSx5RUFBeUU7QUFDekUsaURBQWlEO0FBQ2pELEVBQUU7QUFDRiwwRUFBMEU7QUFDMUUseUVBQXlFO0FBQ3pFLDBFQUEwRTtBQUMxRSxxQ0FBcUM7QUFDckMsNkVBQTZFO0FBQzdFLG1EQUFtRDtBQUNuRCw2RUFBNkU7QUFFN0VBLE9BQU9DLE9BQU8sR0FBRztJQUVmLHVFQUF1RSxHQUN2RUMsWUFBb0I7SUFDcEJDLGlCQUFvQjtJQUNwQkMsY0FBb0I7SUFDcEJDLGNBQW9CO0lBQ3BCQyxVQUFvQjtJQUNwQkMsU0FBb0I7SUFDcEJDLFNBQW9CO0lBRXBCOztFQUVBLEdBQ0FDLE1BQW9CO0lBQ3BCQyxjQUFvQjtJQUNwQkMsYUFBb0I7SUFDcEJDLFNBQW1CLENBQUM7SUFDcEJDLGdCQUFtQixDQUFDO0lBQ3BCQyxjQUFtQixDQUFDO0lBQ3BCLHNCQUFzQjtJQUN0QkMsYUFBbUIsQ0FBQztJQUNwQixzQkFBc0I7SUFFdEIsc0JBQXNCLEdBQ3RCQyxrQkFBMEI7SUFDMUJDLGNBQTBCO0lBQzFCQyxvQkFBMEI7SUFDMUJDLHVCQUF5QixDQUFDO0lBRzFCQyxZQUEwQjtJQUMxQkMsZ0JBQTBCO0lBQzFCQyxPQUEwQjtJQUMxQkMsU0FBMEI7SUFDMUJDLG9CQUEwQjtJQUUxQixpRUFBaUUsR0FDakVDLFVBQTBCO0lBQzFCQyxRQUEwQjtJQUMxQixxREFBcUQ7SUFDckRDLFdBQTBCO0lBRTFCLGtDQUFrQyxHQUNsQ0MsWUFBMEI7QUFFNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaXZpbC1lbmdpbmVlcmluZy1wbGF0Zm9ybS8uL25vZGVfbW9kdWxlcy9AcGRmLWxpYi9zdGFuZGFyZC1mb250cy9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9jb25zdGFudHMuanM/YjYyNCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgLyogQWxsb3dlZCBmbHVzaCB2YWx1ZXM7IHNlZSBkZWZsYXRlKCkgYW5kIGluZmxhdGUoKSBiZWxvdyBmb3IgZGV0YWlscyAqL1xuICBaX05PX0ZMVVNIOiAgICAgICAgIDAsXG4gIFpfUEFSVElBTF9GTFVTSDogICAgMSxcbiAgWl9TWU5DX0ZMVVNIOiAgICAgICAyLFxuICBaX0ZVTExfRkxVU0g6ICAgICAgIDMsXG4gIFpfRklOSVNIOiAgICAgICAgICAgNCxcbiAgWl9CTE9DSzogICAgICAgICAgICA1LFxuICBaX1RSRUVTOiAgICAgICAgICAgIDYsXG5cbiAgLyogUmV0dXJuIGNvZGVzIGZvciB0aGUgY29tcHJlc3Npb24vZGVjb21wcmVzc2lvbiBmdW5jdGlvbnMuIE5lZ2F0aXZlIHZhbHVlc1xuICAqIGFyZSBlcnJvcnMsIHBvc2l0aXZlIHZhbHVlcyBhcmUgdXNlZCBmb3Igc3BlY2lhbCBidXQgbm9ybWFsIGV2ZW50cy5cbiAgKi9cbiAgWl9PSzogICAgICAgICAgICAgICAwLFxuICBaX1NUUkVBTV9FTkQ6ICAgICAgIDEsXG4gIFpfTkVFRF9ESUNUOiAgICAgICAgMixcbiAgWl9FUlJOTzogICAgICAgICAgIC0xLFxuICBaX1NUUkVBTV9FUlJPUjogICAgLTIsXG4gIFpfREFUQV9FUlJPUjogICAgICAtMyxcbiAgLy9aX01FTV9FUlJPUjogICAgIC00LFxuICBaX0JVRl9FUlJPUjogICAgICAgLTUsXG4gIC8vWl9WRVJTSU9OX0VSUk9SOiAtNixcblxuICAvKiBjb21wcmVzc2lvbiBsZXZlbHMgKi9cbiAgWl9OT19DT01QUkVTU0lPTjogICAgICAgICAwLFxuICBaX0JFU1RfU1BFRUQ6ICAgICAgICAgICAgIDEsXG4gIFpfQkVTVF9DT01QUkVTU0lPTjogICAgICAgOSxcbiAgWl9ERUZBVUxUX0NPTVBSRVNTSU9OOiAgIC0xLFxuXG5cbiAgWl9GSUxURVJFRDogICAgICAgICAgICAgICAxLFxuICBaX0hVRkZNQU5fT05MWTogICAgICAgICAgIDIsXG4gIFpfUkxFOiAgICAgICAgICAgICAgICAgICAgMyxcbiAgWl9GSVhFRDogICAgICAgICAgICAgICAgICA0LFxuICBaX0RFRkFVTFRfU1RSQVRFR1k6ICAgICAgIDAsXG5cbiAgLyogUG9zc2libGUgdmFsdWVzIG9mIHRoZSBkYXRhX3R5cGUgZmllbGQgKHRob3VnaCBzZWUgaW5mbGF0ZSgpKSAqL1xuICBaX0JJTkFSWTogICAgICAgICAgICAgICAgIDAsXG4gIFpfVEVYVDogICAgICAgICAgICAgICAgICAgMSxcbiAgLy9aX0FTQ0lJOiAgICAgICAgICAgICAgICAxLCAvLyA9IFpfVEVYVCAoZGVwcmVjYXRlZClcbiAgWl9VTktOT1dOOiAgICAgICAgICAgICAgICAyLFxuXG4gIC8qIFRoZSBkZWZsYXRlIGNvbXByZXNzaW9uIG1ldGhvZCAqL1xuICBaX0RFRkxBVEVEOiAgICAgICAgICAgICAgIDhcbiAgLy9aX05VTEw6ICAgICAgICAgICAgICAgICBudWxsIC8vIFVzZSAtMSBvciBudWxsIGlubGluZSwgZGVwZW5kaW5nIG9uIHZhciB0eXBlXG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJaX05PX0ZMVVNIIiwiWl9QQVJUSUFMX0ZMVVNIIiwiWl9TWU5DX0ZMVVNIIiwiWl9GVUxMX0ZMVVNIIiwiWl9GSU5JU0giLCJaX0JMT0NLIiwiWl9UUkVFUyIsIlpfT0siLCJaX1NUUkVBTV9FTkQiLCJaX05FRURfRElDVCIsIlpfRVJSTk8iLCJaX1NUUkVBTV9FUlJPUiIsIlpfREFUQV9FUlJPUiIsIlpfQlVGX0VSUk9SIiwiWl9OT19DT01QUkVTU0lPTiIsIlpfQkVTVF9TUEVFRCIsIlpfQkVTVF9DT01QUkVTU0lPTiIsIlpfREVGQVVMVF9DT01QUkVTU0lPTiIsIlpfRklMVEVSRUQiLCJaX0hVRkZNQU5fT05MWSIsIlpfUkxFIiwiWl9GSVhFRCIsIlpfREVGQVVMVF9TVFJBVEVHWSIsIlpfQklOQVJZIiwiWl9URVhUIiwiWl9VTktOT1dOIiwiWl9ERUZMQVRFRCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/crc32.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/crc32.js ***!
  \**********************************************************************************/
/***/ ((module) => {

eval("\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n// Use ordinary array, since untyped makes no boost here\nfunction makeTable() {\n    var c, table = [];\n    for(var n = 0; n < 256; n++){\n        c = n;\n        for(var k = 0; k < 8; k++){\n            c = c & 1 ? 0xEDB88320 ^ c >>> 1 : c >>> 1;\n        }\n        table[n] = c;\n    }\n    return table;\n}\n// Create table on load. Just 255 signed longs. Not a problem.\nvar crcTable = makeTable();\nfunction crc32(crc, buf, len, pos) {\n    var t = crcTable, end = pos + len;\n    crc ^= -1;\n    for(var i = pos; i < end; i++){\n        crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 0xFF];\n    }\n    return crc ^ -1; // >>> 0;\n}\nmodule.exports = crc32;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHBkZi1saWIvc3RhbmRhcmQtZm9udHMvbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvY3JjMzIuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxtREFBbUQ7QUFDbkQsMERBQTBEO0FBQzFELGdDQUFnQztBQUVoQyxnREFBZ0Q7QUFDaEQsa0RBQWtEO0FBQ2xELEVBQUU7QUFDRixvRUFBb0U7QUFDcEUsd0VBQXdFO0FBQ3hFLHlDQUF5QztBQUN6QyxFQUFFO0FBQ0Ysd0VBQXdFO0FBQ3hFLHlFQUF5RTtBQUN6RSxpREFBaUQ7QUFDakQsRUFBRTtBQUNGLDBFQUEwRTtBQUMxRSx5RUFBeUU7QUFDekUsMEVBQTBFO0FBQzFFLHFDQUFxQztBQUNyQyw2RUFBNkU7QUFDN0UsbURBQW1EO0FBQ25ELDZFQUE2RTtBQUU3RSx3REFBd0Q7QUFDeEQsU0FBU0E7SUFDUCxJQUFJQyxHQUFHQyxRQUFRLEVBQUU7SUFFakIsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUksS0FBS0EsSUFBSztRQUM1QkYsSUFBSUU7UUFDSixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSSxHQUFHQSxJQUFLO1lBQzFCSCxJQUFLLElBQUssSUFBTSxhQUFjQSxNQUFNLElBQU9BLE1BQU07UUFDbkQ7UUFDQUMsS0FBSyxDQUFDQyxFQUFFLEdBQUdGO0lBQ2I7SUFFQSxPQUFPQztBQUNUO0FBRUEsOERBQThEO0FBQzlELElBQUlHLFdBQVdMO0FBR2YsU0FBU00sTUFBTUMsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsR0FBRztJQUMvQixJQUFJQyxJQUFJTixVQUNKTyxNQUFNRixNQUFNRDtJQUVoQkYsT0FBTyxDQUFDO0lBRVIsSUFBSyxJQUFJTSxJQUFJSCxLQUFLRyxJQUFJRCxLQUFLQyxJQUFLO1FBQzlCTixNQUFNLFFBQVMsSUFBS0ksQ0FBQyxDQUFDLENBQUNKLE1BQU1DLEdBQUcsQ0FBQ0ssRUFBRSxJQUFJLEtBQUs7SUFDOUM7SUFFQSxPQUFRTixNQUFPLENBQUMsR0FBSyxTQUFTO0FBQ2hDO0FBR0FPLE9BQU9DLE9BQU8sR0FBR1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaXZpbC1lbmdpbmVlcmluZy1wbGF0Zm9ybS8uL25vZGVfbW9kdWxlcy9AcGRmLWxpYi9zdGFuZGFyZC1mb250cy9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9jcmMzMi5qcz9iMTNlIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLy8gTm90ZTogd2UgY2FuJ3QgZ2V0IHNpZ25pZmljYW50IHNwZWVkIGJvb3N0IGhlcmUuXG4vLyBTbyB3cml0ZSBjb2RlIHRvIG1pbmltaXplIHNpemUgLSBubyBwcmVnZW5lcmF0ZWQgdGFibGVzXG4vLyBhbmQgYXJyYXkgdG9vbHMgZGVwZW5kZW5jaWVzLlxuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbi8vIFVzZSBvcmRpbmFyeSBhcnJheSwgc2luY2UgdW50eXBlZCBtYWtlcyBubyBib29zdCBoZXJlXG5mdW5jdGlvbiBtYWtlVGFibGUoKSB7XG4gIHZhciBjLCB0YWJsZSA9IFtdO1xuXG4gIGZvciAodmFyIG4gPSAwOyBuIDwgMjU2OyBuKyspIHtcbiAgICBjID0gbjtcbiAgICBmb3IgKHZhciBrID0gMDsgayA8IDg7IGsrKykge1xuICAgICAgYyA9ICgoYyAmIDEpID8gKDB4RURCODgzMjAgXiAoYyA+Pj4gMSkpIDogKGMgPj4+IDEpKTtcbiAgICB9XG4gICAgdGFibGVbbl0gPSBjO1xuICB9XG5cbiAgcmV0dXJuIHRhYmxlO1xufVxuXG4vLyBDcmVhdGUgdGFibGUgb24gbG9hZC4gSnVzdCAyNTUgc2lnbmVkIGxvbmdzLiBOb3QgYSBwcm9ibGVtLlxudmFyIGNyY1RhYmxlID0gbWFrZVRhYmxlKCk7XG5cblxuZnVuY3Rpb24gY3JjMzIoY3JjLCBidWYsIGxlbiwgcG9zKSB7XG4gIHZhciB0ID0gY3JjVGFibGUsXG4gICAgICBlbmQgPSBwb3MgKyBsZW47XG5cbiAgY3JjIF49IC0xO1xuXG4gIGZvciAodmFyIGkgPSBwb3M7IGkgPCBlbmQ7IGkrKykge1xuICAgIGNyYyA9IChjcmMgPj4+IDgpIF4gdFsoY3JjIF4gYnVmW2ldKSAmIDB4RkZdO1xuICB9XG5cbiAgcmV0dXJuIChjcmMgXiAoLTEpKTsgLy8gPj4+IDA7XG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSBjcmMzMjtcbiJdLCJuYW1lcyI6WyJtYWtlVGFibGUiLCJjIiwidGFibGUiLCJuIiwiayIsImNyY1RhYmxlIiwiY3JjMzIiLCJjcmMiLCJidWYiLCJsZW4iLCJwb3MiLCJ0IiwiZW5kIiwiaSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/crc32.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/deflate.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/deflate.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nvar utils = __webpack_require__(/*! ../utils/common */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/utils/common.js\");\nvar trees = __webpack_require__(/*! ./trees */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/trees.js\");\nvar adler32 = __webpack_require__(/*! ./adler32 */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/adler32.js\");\nvar crc32 = __webpack_require__(/*! ./crc32 */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/crc32.js\");\nvar msg = __webpack_require__(/*! ./messages */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/messages.js\");\n/* Public constants ==========================================================*/ /* ===========================================================================*/ /* Allowed flush values; see deflate() and inflate() below for details */ var Z_NO_FLUSH = 0;\nvar Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\nvar Z_FULL_FLUSH = 3;\nvar Z_FINISH = 4;\nvar Z_BLOCK = 5;\n//var Z_TREES         = 6;\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */ var Z_OK = 0;\nvar Z_STREAM_END = 1;\n//var Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR = -2;\nvar Z_DATA_ERROR = -3;\n//var Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR = -5;\n//var Z_VERSION_ERROR = -6;\n/* compression levels */ //var Z_NO_COMPRESSION      = 0;\n//var Z_BEST_SPEED          = 1;\n//var Z_BEST_COMPRESSION    = 9;\nvar Z_DEFAULT_COMPRESSION = -1;\nvar Z_FILTERED = 1;\nvar Z_HUFFMAN_ONLY = 2;\nvar Z_RLE = 3;\nvar Z_FIXED = 4;\nvar Z_DEFAULT_STRATEGY = 0;\n/* Possible values of the data_type field (though see inflate()) */ //var Z_BINARY              = 0;\n//var Z_TEXT                = 1;\n//var Z_ASCII               = 1; // = Z_TEXT\nvar Z_UNKNOWN = 2;\n/* The deflate compression method */ var Z_DEFLATED = 8;\n/*============================================================================*/ var MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */ var MAX_WBITS = 15;\n/* 32K LZ77 window */ var DEF_MEM_LEVEL = 8;\nvar LENGTH_CODES = 29;\n/* number of length codes, not counting the special END_BLOCK code */ var LITERALS = 256;\n/* number of literal bytes 0..255 */ var L_CODES = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */ var D_CODES = 30;\n/* number of distance codes */ var BL_CODES = 19;\n/* number of codes used to transfer the bit lengths */ var HEAP_SIZE = 2 * L_CODES + 1;\n/* maximum heap size */ var MAX_BITS = 15;\n/* All codes must not exceed MAX_BITS bits */ var MIN_MATCH = 3;\nvar MAX_MATCH = 258;\nvar MIN_LOOKAHEAD = MAX_MATCH + MIN_MATCH + 1;\nvar PRESET_DICT = 0x20;\nvar INIT_STATE = 42;\nvar EXTRA_STATE = 69;\nvar NAME_STATE = 73;\nvar COMMENT_STATE = 91;\nvar HCRC_STATE = 103;\nvar BUSY_STATE = 113;\nvar FINISH_STATE = 666;\nvar BS_NEED_MORE = 1; /* block not completed, need more input or more output */ \nvar BS_BLOCK_DONE = 2; /* block flush performed */ \nvar BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */ \nvar BS_FINISH_DONE = 4; /* finish done, accept no more input or output */ \nvar OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\nfunction err(strm, errorCode) {\n    strm.msg = msg[errorCode];\n    return errorCode;\n}\nfunction rank(f) {\n    return (f << 1) - (f > 4 ? 9 : 0);\n}\nfunction zero(buf) {\n    var len = buf.length;\n    while(--len >= 0){\n        buf[len] = 0;\n    }\n}\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output goes\n * through this function so some applications may wish to modify it\n * to avoid allocating a large strm->output buffer and copying into it.\n * (See also read_buf()).\n */ function flush_pending(strm) {\n    var s = strm.state;\n    //_tr_flush_bits(s);\n    var len = s.pending;\n    if (len > strm.avail_out) {\n        len = strm.avail_out;\n    }\n    if (len === 0) {\n        return;\n    }\n    utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);\n    strm.next_out += len;\n    s.pending_out += len;\n    strm.total_out += len;\n    strm.avail_out -= len;\n    s.pending -= len;\n    if (s.pending === 0) {\n        s.pending_out = 0;\n    }\n}\nfunction flush_block_only(s, last) {\n    trees._tr_flush_block(s, s.block_start >= 0 ? s.block_start : -1, s.strstart - s.block_start, last);\n    s.block_start = s.strstart;\n    flush_pending(s.strm);\n}\nfunction put_byte(s, b) {\n    s.pending_buf[s.pending++] = b;\n}\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */ function putShortMSB(s, b) {\n    //  put_byte(s, (Byte)(b >> 8));\n    //  put_byte(s, (Byte)(b & 0xff));\n    s.pending_buf[s.pending++] = b >>> 8 & 0xff;\n    s.pending_buf[s.pending++] = b & 0xff;\n}\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */ function read_buf(strm, buf, start, size) {\n    var len = strm.avail_in;\n    if (len > size) {\n        len = size;\n    }\n    if (len === 0) {\n        return 0;\n    }\n    strm.avail_in -= len;\n    // zmemcpy(buf, strm->next_in, len);\n    utils.arraySet(buf, strm.input, strm.next_in, len, start);\n    if (strm.state.wrap === 1) {\n        strm.adler = adler32(strm.adler, buf, len, start);\n    } else if (strm.state.wrap === 2) {\n        strm.adler = crc32(strm.adler, buf, len, start);\n    }\n    strm.next_in += len;\n    strm.total_in += len;\n    return len;\n}\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */ function longest_match(s, cur_match) {\n    var chain_length = s.max_chain_length; /* max hash chain length */ \n    var scan = s.strstart; /* current string */ \n    var match; /* matched string */ \n    var len; /* length of current match */ \n    var best_len = s.prev_length; /* best match length so far */ \n    var nice_match = s.nice_match; /* stop if match long enough */ \n    var limit = s.strstart > s.w_size - MIN_LOOKAHEAD ? s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0 /*NIL*/ ;\n    var _win = s.window; // shortcut\n    var wmask = s.w_mask;\n    var prev = s.prev;\n    /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */ var strend = s.strstart + MAX_MATCH;\n    var scan_end1 = _win[scan + best_len - 1];\n    var scan_end = _win[scan + best_len];\n    /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */ // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n    /* Do not waste too much time if we already have a good match: */ if (s.prev_length >= s.good_match) {\n        chain_length >>= 2;\n    }\n    /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */ if (nice_match > s.lookahead) {\n        nice_match = s.lookahead;\n    }\n    // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n    do {\n        // Assert(cur_match < s->strstart, \"no future\");\n        match = cur_match;\n        /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */ if (_win[match + best_len] !== scan_end || _win[match + best_len - 1] !== scan_end1 || _win[match] !== _win[scan] || _win[++match] !== _win[scan + 1]) {\n            continue;\n        }\n        /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */ scan += 2;\n        match++;\n        // Assert(*scan == *match, \"match[2]?\");\n        /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */ do {\n        /*jshint noempty:false*/ }while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && scan < strend);\n        // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n        len = MAX_MATCH - (strend - scan);\n        scan = strend - MAX_MATCH;\n        if (len > best_len) {\n            s.match_start = cur_match;\n            best_len = len;\n            if (len >= nice_match) {\n                break;\n            }\n            scan_end1 = _win[scan + best_len - 1];\n            scan_end = _win[scan + best_len];\n        }\n    }while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n    if (best_len <= s.lookahead) {\n        return best_len;\n    }\n    return s.lookahead;\n}\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */ function fill_window(s) {\n    var _w_size = s.w_size;\n    var p, n, m, more, str;\n    //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n    do {\n        more = s.window_size - s.lookahead - s.strstart;\n        // JS ints have 32 bit, block below not needed\n        /* Deal with !@#$% 64K limit: */ //if (sizeof(int) <= 2) {\n        //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n        //        more = wsize;\n        //\n        //  } else if (more == (unsigned)(-1)) {\n        //        /* Very unlikely, but possible on 16 bit machine if\n        //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n        //         */\n        //        more--;\n        //    }\n        //}\n        /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */ if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n            utils.arraySet(s.window, s.window, _w_size, _w_size, 0);\n            s.match_start -= _w_size;\n            s.strstart -= _w_size;\n            /* we now have strstart >= MAX_DIST */ s.block_start -= _w_size;\n            /* Slide the hash table (could be avoided with 32 bit values\n       at the expense of memory usage). We slide even when level == 0\n       to keep the hash table consistent if we switch back to level > 0\n       later. (Using level 0 permanently is not an optimal usage of\n       zlib, so we don't care about this pathological case.)\n       */ n = s.hash_size;\n            p = n;\n            do {\n                m = s.head[--p];\n                s.head[p] = m >= _w_size ? m - _w_size : 0;\n            }while (--n);\n            n = _w_size;\n            p = n;\n            do {\n                m = s.prev[--p];\n                s.prev[p] = m >= _w_size ? m - _w_size : 0;\n            /* If n is not on any hash chain, prev[n] is garbage but\n         * its value will never be used.\n         */ }while (--n);\n            more += _w_size;\n        }\n        if (s.strm.avail_in === 0) {\n            break;\n        }\n        /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */ //Assert(more >= 2, \"more < 2\");\n        n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n        s.lookahead += n;\n        /* Initialize the hash value now that we have some input: */ if (s.lookahead + s.insert >= MIN_MATCH) {\n            str = s.strstart - s.insert;\n            s.ins_h = s.window[str];\n            /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */ s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + 1]) & s.hash_mask;\n            //#if MIN_MATCH != 3\n            //        Call update_hash() MIN_MATCH-3 more times\n            //#endif\n            while(s.insert){\n                /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */ s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n                s.prev[str & s.w_mask] = s.head[s.ins_h];\n                s.head[s.ins_h] = str;\n                str++;\n                s.insert--;\n                if (s.lookahead + s.insert < MIN_MATCH) {\n                    break;\n                }\n            }\n        }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */ }while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n/* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */ //  if (s.high_water < s.window_size) {\n//    var curr = s.strstart + s.lookahead;\n//    var init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n}\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n * This function does not insert new strings in the dictionary since\n * uncompressible data is probably not useful. This function is used\n * only for the level=0 compression option.\n * NOTE: this function should be optimized to avoid extra copying from\n * window to pending_buf.\n */ function deflate_stored(s, flush) {\n    /* Stored blocks are limited to 0xffff bytes, pending_buf is limited\n   * to pending_buf_size, and each stored block has a 5 byte header:\n   */ var max_block_size = 0xffff;\n    if (max_block_size > s.pending_buf_size - 5) {\n        max_block_size = s.pending_buf_size - 5;\n    }\n    /* Copy as much as possible from input to output: */ for(;;){\n        /* Fill the window as much as possible: */ if (s.lookahead <= 1) {\n            //Assert(s->strstart < s->w_size+MAX_DIST(s) ||\n            //  s->block_start >= (long)s->w_size, \"slide too late\");\n            //      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||\n            //        s.block_start >= s.w_size)) {\n            //        throw  new Error(\"slide too late\");\n            //      }\n            fill_window(s);\n            if (s.lookahead === 0 && flush === Z_NO_FLUSH) {\n                return BS_NEED_MORE;\n            }\n            if (s.lookahead === 0) {\n                break;\n            }\n        /* flush the current block */ }\n        //Assert(s->block_start >= 0L, \"block gone\");\n        //    if (s.block_start < 0) throw new Error(\"block gone\");\n        s.strstart += s.lookahead;\n        s.lookahead = 0;\n        /* Emit a stored block if pending_buf will be full: */ var max_start = s.block_start + max_block_size;\n        if (s.strstart === 0 || s.strstart >= max_start) {\n            /* strstart == 0 is possible when wraparound on 16-bit machine */ s.lookahead = s.strstart - max_start;\n            s.strstart = max_start;\n            /*** FLUSH_BLOCK(s, 0); ***/ flush_block_only(s, false);\n            if (s.strm.avail_out === 0) {\n                return BS_NEED_MORE;\n            }\n        /***/ }\n        /* Flush if we may have to slide, otherwise block_start may become\n     * negative and the data will be gone:\n     */ if (s.strstart - s.block_start >= s.w_size - MIN_LOOKAHEAD) {\n            /*** FLUSH_BLOCK(s, 0); ***/ flush_block_only(s, false);\n            if (s.strm.avail_out === 0) {\n                return BS_NEED_MORE;\n            }\n        /***/ }\n    }\n    s.insert = 0;\n    if (flush === Z_FINISH) {\n        /*** FLUSH_BLOCK(s, 1); ***/ flush_block_only(s, true);\n        if (s.strm.avail_out === 0) {\n            return BS_FINISH_STARTED;\n        }\n        /***/ return BS_FINISH_DONE;\n    }\n    if (s.strstart > s.block_start) {\n        /*** FLUSH_BLOCK(s, 0); ***/ flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n            return BS_NEED_MORE;\n        }\n    /***/ }\n    return BS_NEED_MORE;\n}\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */ function deflate_fast(s, flush) {\n    var hash_head; /* head of the hash chain */ \n    var bflush; /* set if current block must be flushed */ \n    for(;;){\n        /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */ if (s.lookahead < MIN_LOOKAHEAD) {\n            fill_window(s);\n            if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n                return BS_NEED_MORE;\n            }\n            if (s.lookahead === 0) {\n                break; /* flush the current block */ \n            }\n        }\n        /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */ hash_head = 0 /*NIL*/ ;\n        if (s.lookahead >= MIN_MATCH) {\n            /*** INSERT_STRING(s, s.strstart, hash_head); ***/ s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n            s.head[s.ins_h] = s.strstart;\n        /***/ }\n        /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */ if (hash_head !== 0 /*NIL*/  && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {\n            /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */ s.match_length = longest_match(s, hash_head);\n        /* longest_match() sets match_start */ }\n        if (s.match_length >= MIN_MATCH) {\n            // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n            /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/ bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n            s.lookahead -= s.match_length;\n            /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */ if (s.match_length <= s.max_lazy_match /*max_insert_length*/  && s.lookahead >= MIN_MATCH) {\n                s.match_length--; /* string at strstart already in table */ \n                do {\n                    s.strstart++;\n                    /*** INSERT_STRING(s, s.strstart, hash_head); ***/ s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n                    hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n                    s.head[s.ins_h] = s.strstart;\n                /***/ /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */ }while (--s.match_length !== 0);\n                s.strstart++;\n            } else {\n                s.strstart += s.match_length;\n                s.match_length = 0;\n                s.ins_h = s.window[s.strstart];\n                /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */ s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + 1]) & s.hash_mask;\n            //#if MIN_MATCH != 3\n            //                Call UPDATE_HASH() MIN_MATCH-3 more times\n            //#endif\n            /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */ }\n        } else {\n            /* No match, output a literal byte */ //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n            /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/ bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n            s.lookahead--;\n            s.strstart++;\n        }\n        if (bflush) {\n            /*** FLUSH_BLOCK(s, 0); ***/ flush_block_only(s, false);\n            if (s.strm.avail_out === 0) {\n                return BS_NEED_MORE;\n            }\n        /***/ }\n    }\n    s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n    if (flush === Z_FINISH) {\n        /*** FLUSH_BLOCK(s, 1); ***/ flush_block_only(s, true);\n        if (s.strm.avail_out === 0) {\n            return BS_FINISH_STARTED;\n        }\n        /***/ return BS_FINISH_DONE;\n    }\n    if (s.last_lit) {\n        /*** FLUSH_BLOCK(s, 0); ***/ flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n            return BS_NEED_MORE;\n        }\n    /***/ }\n    return BS_BLOCK_DONE;\n}\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */ function deflate_slow(s, flush) {\n    var hash_head; /* head of hash chain */ \n    var bflush; /* set if current block must be flushed */ \n    var max_insert;\n    /* Process the input block. */ for(;;){\n        /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */ if (s.lookahead < MIN_LOOKAHEAD) {\n            fill_window(s);\n            if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n                return BS_NEED_MORE;\n            }\n            if (s.lookahead === 0) {\n                break;\n            } /* flush the current block */ \n        }\n        /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */ hash_head = 0 /*NIL*/ ;\n        if (s.lookahead >= MIN_MATCH) {\n            /*** INSERT_STRING(s, s.strstart, hash_head); ***/ s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n            s.head[s.ins_h] = s.strstart;\n        /***/ }\n        /* Find the longest match, discarding those <= prev_length.\n     */ s.prev_length = s.match_length;\n        s.prev_match = s.match_start;\n        s.match_length = MIN_MATCH - 1;\n        if (hash_head !== 0 /*NIL*/  && s.prev_length < s.max_lazy_match && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {\n            /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */ s.match_length = longest_match(s, hash_head);\n            /* longest_match() sets match_start */ if (s.match_length <= 5 && (s.strategy === Z_FILTERED || s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096 /*TOO_FAR*/ )) {\n                /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */ s.match_length = MIN_MATCH - 1;\n            }\n        }\n        /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */ if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n            max_insert = s.strstart + s.lookahead - MIN_MATCH;\n            /* Do not insert strings in hash table beyond this. */ //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n            /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/ bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n            /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */ s.lookahead -= s.prev_length - 1;\n            s.prev_length -= 2;\n            do {\n                if (++s.strstart <= max_insert) {\n                    /*** INSERT_STRING(s, s.strstart, hash_head); ***/ s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n                    hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n                    s.head[s.ins_h] = s.strstart;\n                /***/ }\n            }while (--s.prev_length !== 0);\n            s.match_available = 0;\n            s.match_length = MIN_MATCH - 1;\n            s.strstart++;\n            if (bflush) {\n                /*** FLUSH_BLOCK(s, 0); ***/ flush_block_only(s, false);\n                if (s.strm.avail_out === 0) {\n                    return BS_NEED_MORE;\n                }\n            /***/ }\n        } else if (s.match_available) {\n            /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */ //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n            /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/ bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n            if (bflush) {\n                /*** FLUSH_BLOCK_ONLY(s, 0) ***/ flush_block_only(s, false);\n            /***/ }\n            s.strstart++;\n            s.lookahead--;\n            if (s.strm.avail_out === 0) {\n                return BS_NEED_MORE;\n            }\n        } else {\n            /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */ s.match_available = 1;\n            s.strstart++;\n            s.lookahead--;\n        }\n    }\n    //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n    if (s.match_available) {\n        //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n        /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/ bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n        s.match_available = 0;\n    }\n    s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n    if (flush === Z_FINISH) {\n        /*** FLUSH_BLOCK(s, 1); ***/ flush_block_only(s, true);\n        if (s.strm.avail_out === 0) {\n            return BS_FINISH_STARTED;\n        }\n        /***/ return BS_FINISH_DONE;\n    }\n    if (s.last_lit) {\n        /*** FLUSH_BLOCK(s, 0); ***/ flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n            return BS_NEED_MORE;\n        }\n    /***/ }\n    return BS_BLOCK_DONE;\n}\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */ function deflate_rle(s, flush) {\n    var bflush; /* set if current block must be flushed */ \n    var prev; /* byte at distance one to match */ \n    var scan, strend; /* scan goes up to strend for length of run */ \n    var _win = s.window;\n    for(;;){\n        /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */ if (s.lookahead <= MAX_MATCH) {\n            fill_window(s);\n            if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {\n                return BS_NEED_MORE;\n            }\n            if (s.lookahead === 0) {\n                break;\n            } /* flush the current block */ \n        }\n        /* See how many times the previous byte repeats */ s.match_length = 0;\n        if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n            scan = s.strstart - 1;\n            prev = _win[scan];\n            if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n                strend = s.strstart + MAX_MATCH;\n                do {\n                /*jshint noempty:false*/ }while (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && scan < strend);\n                s.match_length = MAX_MATCH - (strend - scan);\n                if (s.match_length > s.lookahead) {\n                    s.match_length = s.lookahead;\n                }\n            }\n        //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n        }\n        /* Emit match if have run of MIN_MATCH or longer, else emit literal */ if (s.match_length >= MIN_MATCH) {\n            //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n            /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/ bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);\n            s.lookahead -= s.match_length;\n            s.strstart += s.match_length;\n            s.match_length = 0;\n        } else {\n            /* No match, output a literal byte */ //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n            /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/ bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n            s.lookahead--;\n            s.strstart++;\n        }\n        if (bflush) {\n            /*** FLUSH_BLOCK(s, 0); ***/ flush_block_only(s, false);\n            if (s.strm.avail_out === 0) {\n                return BS_NEED_MORE;\n            }\n        /***/ }\n    }\n    s.insert = 0;\n    if (flush === Z_FINISH) {\n        /*** FLUSH_BLOCK(s, 1); ***/ flush_block_only(s, true);\n        if (s.strm.avail_out === 0) {\n            return BS_FINISH_STARTED;\n        }\n        /***/ return BS_FINISH_DONE;\n    }\n    if (s.last_lit) {\n        /*** FLUSH_BLOCK(s, 0); ***/ flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n            return BS_NEED_MORE;\n        }\n    /***/ }\n    return BS_BLOCK_DONE;\n}\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */ function deflate_huff(s, flush) {\n    var bflush; /* set if current block must be flushed */ \n    for(;;){\n        /* Make sure that we have a literal to write. */ if (s.lookahead === 0) {\n            fill_window(s);\n            if (s.lookahead === 0) {\n                if (flush === Z_NO_FLUSH) {\n                    return BS_NEED_MORE;\n                }\n                break; /* flush the current block */ \n            }\n        }\n        /* Output a literal byte */ s.match_length = 0;\n        //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n        /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/ bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n        s.lookahead--;\n        s.strstart++;\n        if (bflush) {\n            /*** FLUSH_BLOCK(s, 0); ***/ flush_block_only(s, false);\n            if (s.strm.avail_out === 0) {\n                return BS_NEED_MORE;\n            }\n        /***/ }\n    }\n    s.insert = 0;\n    if (flush === Z_FINISH) {\n        /*** FLUSH_BLOCK(s, 1); ***/ flush_block_only(s, true);\n        if (s.strm.avail_out === 0) {\n            return BS_FINISH_STARTED;\n        }\n        /***/ return BS_FINISH_DONE;\n    }\n    if (s.last_lit) {\n        /*** FLUSH_BLOCK(s, 0); ***/ flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n            return BS_NEED_MORE;\n        }\n    /***/ }\n    return BS_BLOCK_DONE;\n}\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */ function Config(good_length, max_lazy, nice_length, max_chain, func) {\n    this.good_length = good_length;\n    this.max_lazy = max_lazy;\n    this.nice_length = nice_length;\n    this.max_chain = max_chain;\n    this.func = func;\n}\nvar configuration_table;\nconfiguration_table = [\n    /*      good lazy nice chain */ new Config(0, 0, 0, 0, deflate_stored),\n    /* 0 store only */ new Config(4, 4, 8, 4, deflate_fast),\n    /* 1 max speed, no lazy matches */ new Config(4, 5, 16, 8, deflate_fast),\n    /* 2 */ new Config(4, 6, 32, 32, deflate_fast),\n    /* 3 */ new Config(4, 4, 16, 16, deflate_slow),\n    /* 4 lazy matches */ new Config(8, 16, 32, 32, deflate_slow),\n    /* 5 */ new Config(8, 16, 128, 128, deflate_slow),\n    /* 6 */ new Config(8, 32, 128, 256, deflate_slow),\n    /* 7 */ new Config(32, 128, 258, 1024, deflate_slow),\n    /* 8 */ new Config(32, 258, 258, 4096, deflate_slow)\n];\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */ function lm_init(s) {\n    s.window_size = 2 * s.w_size;\n    /*** CLEAR_HASH(s); ***/ zero(s.head); // Fill with NIL (= 0);\n    /* Set the default configuration parameters:\n   */ s.max_lazy_match = configuration_table[s.level].max_lazy;\n    s.good_match = configuration_table[s.level].good_length;\n    s.nice_match = configuration_table[s.level].nice_length;\n    s.max_chain_length = configuration_table[s.level].max_chain;\n    s.strstart = 0;\n    s.block_start = 0;\n    s.lookahead = 0;\n    s.insert = 0;\n    s.match_length = s.prev_length = MIN_MATCH - 1;\n    s.match_available = 0;\n    s.ins_h = 0;\n}\nfunction DeflateState() {\n    this.strm = null; /* pointer back to this zlib stream */ \n    this.status = 0; /* as the name implies */ \n    this.pending_buf = null; /* output still pending */ \n    this.pending_buf_size = 0; /* size of pending_buf */ \n    this.pending_out = 0; /* next pending byte to output to the stream */ \n    this.pending = 0; /* nb of bytes in the pending buffer */ \n    this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip */ \n    this.gzhead = null; /* gzip header information to write */ \n    this.gzindex = 0; /* where in extra, name, or comment */ \n    this.method = Z_DEFLATED; /* can only be DEFLATED */ \n    this.last_flush = -1; /* value of flush param for previous deflate call */ \n    this.w_size = 0; /* LZ77 window size (32K by default) */ \n    this.w_bits = 0; /* log2(w_size)  (8..16) */ \n    this.w_mask = 0; /* w_size - 1 */ \n    this.window = null;\n    /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */ this.window_size = 0;\n    /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */ this.prev = null;\n    /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */ this.head = null; /* Heads of the hash chains or NIL. */ \n    this.ins_h = 0; /* hash index of string to be inserted */ \n    this.hash_size = 0; /* number of elements in hash table */ \n    this.hash_bits = 0; /* log2(hash_size) */ \n    this.hash_mask = 0; /* hash_size-1 */ \n    this.hash_shift = 0;\n    /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */ this.block_start = 0;\n    /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */ this.match_length = 0; /* length of best match */ \n    this.prev_match = 0; /* previous match */ \n    this.match_available = 0; /* set if previous match exists */ \n    this.strstart = 0; /* start of string to insert */ \n    this.match_start = 0; /* start of matching string */ \n    this.lookahead = 0; /* number of valid bytes ahead in window */ \n    this.prev_length = 0;\n    /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */ this.max_chain_length = 0;\n    /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */ this.max_lazy_match = 0;\n    /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */ // That's alias to max_lazy_match, don't use directly\n    //this.max_insert_length = 0;\n    /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */ this.level = 0; /* compression level (1..9) */ \n    this.strategy = 0; /* favor or force Huffman coding*/ \n    this.good_match = 0;\n    /* Use a faster search when the previous match is longer than this */ this.nice_match = 0; /* Stop searching when current match exceeds this */ \n    /* used by trees.c: */ /* Didn't use ct_data typedef below to suppress compiler warning */ // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n    // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n    // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n    // Use flat array of DOUBLE size, with interleaved fata,\n    // because JS does not support effective\n    this.dyn_ltree = new utils.Buf16(HEAP_SIZE * 2);\n    this.dyn_dtree = new utils.Buf16((2 * D_CODES + 1) * 2);\n    this.bl_tree = new utils.Buf16((2 * BL_CODES + 1) * 2);\n    zero(this.dyn_ltree);\n    zero(this.dyn_dtree);\n    zero(this.bl_tree);\n    this.l_desc = null; /* desc. for literal tree */ \n    this.d_desc = null; /* desc. for distance tree */ \n    this.bl_desc = null; /* desc. for bit length tree */ \n    //ush bl_count[MAX_BITS+1];\n    this.bl_count = new utils.Buf16(MAX_BITS + 1);\n    /* number of codes at each bit length for an optimal tree */ //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n    this.heap = new utils.Buf16(2 * L_CODES + 1); /* heap used to build the Huffman trees */ \n    zero(this.heap);\n    this.heap_len = 0; /* number of elements in the heap */ \n    this.heap_max = 0; /* element of largest frequency */ \n    /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */ this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n    zero(this.depth);\n    /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */ this.l_buf = 0; /* buffer index for literals or lengths */ \n    this.lit_bufsize = 0;\n    /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */ this.last_lit = 0; /* running index in l_buf */ \n    this.d_buf = 0;\n    /* Buffer index for distances. To simplify the code, d_buf and l_buf have\n   * the same number of elements. To use different lengths, an extra flag\n   * array would be necessary.\n   */ this.opt_len = 0; /* bit length of current block with optimal trees */ \n    this.static_len = 0; /* bit length of current block with static trees */ \n    this.matches = 0; /* number of string matches in current block */ \n    this.insert = 0; /* bytes at end of window left to insert */ \n    this.bi_buf = 0;\n    /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */ this.bi_valid = 0;\n/* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */ // Used for window memory init. We safely ignore it for JS. That makes\n// sense only for pointers and memory check tools.\n//this.high_water = 0;\n/* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */ }\nfunction deflateResetKeep(strm) {\n    var s;\n    if (!strm || !strm.state) {\n        return err(strm, Z_STREAM_ERROR);\n    }\n    strm.total_in = strm.total_out = 0;\n    strm.data_type = Z_UNKNOWN;\n    s = strm.state;\n    s.pending = 0;\n    s.pending_out = 0;\n    if (s.wrap < 0) {\n        s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */ }\n    s.status = s.wrap ? INIT_STATE : BUSY_STATE;\n    strm.adler = s.wrap === 2 ? 0 // crc32(0, Z_NULL, 0)\n     : 1; // adler32(0, Z_NULL, 0)\n    s.last_flush = Z_NO_FLUSH;\n    trees._tr_init(s);\n    return Z_OK;\n}\nfunction deflateReset(strm) {\n    var ret = deflateResetKeep(strm);\n    if (ret === Z_OK) {\n        lm_init(strm.state);\n    }\n    return ret;\n}\nfunction deflateSetHeader(strm, head) {\n    if (!strm || !strm.state) {\n        return Z_STREAM_ERROR;\n    }\n    if (strm.state.wrap !== 2) {\n        return Z_STREAM_ERROR;\n    }\n    strm.state.gzhead = head;\n    return Z_OK;\n}\nfunction deflateInit2(strm, level, method, windowBits, memLevel, strategy) {\n    if (!strm) {\n        return Z_STREAM_ERROR;\n    }\n    var wrap = 1;\n    if (level === Z_DEFAULT_COMPRESSION) {\n        level = 6;\n    }\n    if (windowBits < 0) {\n        wrap = 0;\n        windowBits = -windowBits;\n    } else if (windowBits > 15) {\n        wrap = 2; /* write gzip wrapper instead */ \n        windowBits -= 16;\n    }\n    if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED || windowBits < 8 || windowBits > 15 || level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {\n        return err(strm, Z_STREAM_ERROR);\n    }\n    if (windowBits === 8) {\n        windowBits = 9;\n    }\n    /* until 256-byte window bug fixed */ var s = new DeflateState();\n    strm.state = s;\n    s.strm = strm;\n    s.wrap = wrap;\n    s.gzhead = null;\n    s.w_bits = windowBits;\n    s.w_size = 1 << s.w_bits;\n    s.w_mask = s.w_size - 1;\n    s.hash_bits = memLevel + 7;\n    s.hash_size = 1 << s.hash_bits;\n    s.hash_mask = s.hash_size - 1;\n    s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n    s.window = new utils.Buf8(s.w_size * 2);\n    s.head = new utils.Buf16(s.hash_size);\n    s.prev = new utils.Buf16(s.w_size);\n    // Don't need mem init magic for JS.\n    //s.high_water = 0;  /* nothing written to s->window yet */\n    s.lit_bufsize = 1 << memLevel + 6; /* 16K elements by default */ \n    s.pending_buf_size = s.lit_bufsize * 4;\n    //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);\n    //s->pending_buf = (uchf *) overlay;\n    s.pending_buf = new utils.Buf8(s.pending_buf_size);\n    // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n    //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);\n    s.d_buf = 1 * s.lit_bufsize;\n    //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;\n    s.l_buf = (1 + 2) * s.lit_bufsize;\n    s.level = level;\n    s.strategy = strategy;\n    s.method = method;\n    return deflateReset(strm);\n}\nfunction deflateInit(strm, level) {\n    return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\n}\nfunction deflate(strm, flush) {\n    var old_flush, s;\n    var beg, val; // for gzip header write only\n    if (!strm || !strm.state || flush > Z_BLOCK || flush < 0) {\n        return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\n    }\n    s = strm.state;\n    if (!strm.output || !strm.input && strm.avail_in !== 0 || s.status === FINISH_STATE && flush !== Z_FINISH) {\n        return err(strm, strm.avail_out === 0 ? Z_BUF_ERROR : Z_STREAM_ERROR);\n    }\n    s.strm = strm; /* just in case */ \n    old_flush = s.last_flush;\n    s.last_flush = flush;\n    /* Write the header */ if (s.status === INIT_STATE) {\n        if (s.wrap === 2) {\n            strm.adler = 0; //crc32(0L, Z_NULL, 0);\n            put_byte(s, 31);\n            put_byte(s, 139);\n            put_byte(s, 8);\n            if (!s.gzhead) {\n                put_byte(s, 0);\n                put_byte(s, 0);\n                put_byte(s, 0);\n                put_byte(s, 0);\n                put_byte(s, 0);\n                put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);\n                put_byte(s, OS_CODE);\n                s.status = BUSY_STATE;\n            } else {\n                put_byte(s, (s.gzhead.text ? 1 : 0) + (s.gzhead.hcrc ? 2 : 0) + (!s.gzhead.extra ? 0 : 4) + (!s.gzhead.name ? 0 : 8) + (!s.gzhead.comment ? 0 : 16));\n                put_byte(s, s.gzhead.time & 0xff);\n                put_byte(s, s.gzhead.time >> 8 & 0xff);\n                put_byte(s, s.gzhead.time >> 16 & 0xff);\n                put_byte(s, s.gzhead.time >> 24 & 0xff);\n                put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);\n                put_byte(s, s.gzhead.os & 0xff);\n                if (s.gzhead.extra && s.gzhead.extra.length) {\n                    put_byte(s, s.gzhead.extra.length & 0xff);\n                    put_byte(s, s.gzhead.extra.length >> 8 & 0xff);\n                }\n                if (s.gzhead.hcrc) {\n                    strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);\n                }\n                s.gzindex = 0;\n                s.status = EXTRA_STATE;\n            }\n        } else {\n            var header = Z_DEFLATED + (s.w_bits - 8 << 4) << 8;\n            var level_flags = -1;\n            if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n                level_flags = 0;\n            } else if (s.level < 6) {\n                level_flags = 1;\n            } else if (s.level === 6) {\n                level_flags = 2;\n            } else {\n                level_flags = 3;\n            }\n            header |= level_flags << 6;\n            if (s.strstart !== 0) {\n                header |= PRESET_DICT;\n            }\n            header += 31 - header % 31;\n            s.status = BUSY_STATE;\n            putShortMSB(s, header);\n            /* Save the adler32 of the preset dictionary: */ if (s.strstart !== 0) {\n                putShortMSB(s, strm.adler >>> 16);\n                putShortMSB(s, strm.adler & 0xffff);\n            }\n            strm.adler = 1; // adler32(0L, Z_NULL, 0);\n        }\n    }\n    //#ifdef GZIP\n    if (s.status === EXTRA_STATE) {\n        if (s.gzhead.extra /* != Z_NULL*/ ) {\n            beg = s.pending; /* start of bytes to update crc */ \n            while(s.gzindex < (s.gzhead.extra.length & 0xffff)){\n                if (s.pending === s.pending_buf_size) {\n                    if (s.gzhead.hcrc && s.pending > beg) {\n                        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n                    }\n                    flush_pending(strm);\n                    beg = s.pending;\n                    if (s.pending === s.pending_buf_size) {\n                        break;\n                    }\n                }\n                put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);\n                s.gzindex++;\n            }\n            if (s.gzhead.hcrc && s.pending > beg) {\n                strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n            }\n            if (s.gzindex === s.gzhead.extra.length) {\n                s.gzindex = 0;\n                s.status = NAME_STATE;\n            }\n        } else {\n            s.status = NAME_STATE;\n        }\n    }\n    if (s.status === NAME_STATE) {\n        if (s.gzhead.name /* != Z_NULL*/ ) {\n            beg = s.pending; /* start of bytes to update crc */ \n            //int val;\n            do {\n                if (s.pending === s.pending_buf_size) {\n                    if (s.gzhead.hcrc && s.pending > beg) {\n                        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n                    }\n                    flush_pending(strm);\n                    beg = s.pending;\n                    if (s.pending === s.pending_buf_size) {\n                        val = 1;\n                        break;\n                    }\n                }\n                // JS specific: little magic to add zero terminator to end of string\n                if (s.gzindex < s.gzhead.name.length) {\n                    val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n                } else {\n                    val = 0;\n                }\n                put_byte(s, val);\n            }while (val !== 0);\n            if (s.gzhead.hcrc && s.pending > beg) {\n                strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n            }\n            if (val === 0) {\n                s.gzindex = 0;\n                s.status = COMMENT_STATE;\n            }\n        } else {\n            s.status = COMMENT_STATE;\n        }\n    }\n    if (s.status === COMMENT_STATE) {\n        if (s.gzhead.comment /* != Z_NULL*/ ) {\n            beg = s.pending; /* start of bytes to update crc */ \n            //int val;\n            do {\n                if (s.pending === s.pending_buf_size) {\n                    if (s.gzhead.hcrc && s.pending > beg) {\n                        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n                    }\n                    flush_pending(strm);\n                    beg = s.pending;\n                    if (s.pending === s.pending_buf_size) {\n                        val = 1;\n                        break;\n                    }\n                }\n                // JS specific: little magic to add zero terminator to end of string\n                if (s.gzindex < s.gzhead.comment.length) {\n                    val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n                } else {\n                    val = 0;\n                }\n                put_byte(s, val);\n            }while (val !== 0);\n            if (s.gzhead.hcrc && s.pending > beg) {\n                strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n            }\n            if (val === 0) {\n                s.status = HCRC_STATE;\n            }\n        } else {\n            s.status = HCRC_STATE;\n        }\n    }\n    if (s.status === HCRC_STATE) {\n        if (s.gzhead.hcrc) {\n            if (s.pending + 2 > s.pending_buf_size) {\n                flush_pending(strm);\n            }\n            if (s.pending + 2 <= s.pending_buf_size) {\n                put_byte(s, strm.adler & 0xff);\n                put_byte(s, strm.adler >> 8 & 0xff);\n                strm.adler = 0; //crc32(0L, Z_NULL, 0);\n                s.status = BUSY_STATE;\n            }\n        } else {\n            s.status = BUSY_STATE;\n        }\n    }\n    //#endif\n    /* Flush as much pending output as possible */ if (s.pending !== 0) {\n        flush_pending(strm);\n        if (strm.avail_out === 0) {\n            /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */ s.last_flush = -1;\n            return Z_OK;\n        }\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */ } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) && flush !== Z_FINISH) {\n        return err(strm, Z_BUF_ERROR);\n    }\n    /* User must not provide more input after the first FINISH: */ if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n        return err(strm, Z_BUF_ERROR);\n    }\n    /* Start a new block or continue the current one.\n   */ if (strm.avail_in !== 0 || s.lookahead !== 0 || flush !== Z_NO_FLUSH && s.status !== FINISH_STATE) {\n        var bstate = s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) : s.strategy === Z_RLE ? deflate_rle(s, flush) : configuration_table[s.level].func(s, flush);\n        if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n            s.status = FINISH_STATE;\n        }\n        if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n            if (strm.avail_out === 0) {\n                s.last_flush = -1;\n            /* avoid BUF_ERROR next call, see above */ }\n            return Z_OK;\n        /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */ }\n        if (bstate === BS_BLOCK_DONE) {\n            if (flush === Z_PARTIAL_FLUSH) {\n                trees._tr_align(s);\n            } else if (flush !== Z_BLOCK) {\n                trees._tr_stored_block(s, 0, 0, false);\n                /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */ if (flush === Z_FULL_FLUSH) {\n                    /*** CLEAR_HASH(s); ***/ /* forget history */ zero(s.head); // Fill with NIL (= 0);\n                    if (s.lookahead === 0) {\n                        s.strstart = 0;\n                        s.block_start = 0;\n                        s.insert = 0;\n                    }\n                }\n            }\n            flush_pending(strm);\n            if (strm.avail_out === 0) {\n                s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */ \n                return Z_OK;\n            }\n        }\n    }\n    //Assert(strm->avail_out > 0, \"bug2\");\n    //if (strm.avail_out <= 0) { throw new Error(\"bug2\");}\n    if (flush !== Z_FINISH) {\n        return Z_OK;\n    }\n    if (s.wrap <= 0) {\n        return Z_STREAM_END;\n    }\n    /* Write the trailer */ if (s.wrap === 2) {\n        put_byte(s, strm.adler & 0xff);\n        put_byte(s, strm.adler >> 8 & 0xff);\n        put_byte(s, strm.adler >> 16 & 0xff);\n        put_byte(s, strm.adler >> 24 & 0xff);\n        put_byte(s, strm.total_in & 0xff);\n        put_byte(s, strm.total_in >> 8 & 0xff);\n        put_byte(s, strm.total_in >> 16 & 0xff);\n        put_byte(s, strm.total_in >> 24 & 0xff);\n    } else {\n        putShortMSB(s, strm.adler >>> 16);\n        putShortMSB(s, strm.adler & 0xffff);\n    }\n    flush_pending(strm);\n    /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */ if (s.wrap > 0) {\n        s.wrap = -s.wrap;\n    }\n    /* write the trailer only once! */ return s.pending !== 0 ? Z_OK : Z_STREAM_END;\n}\nfunction deflateEnd(strm) {\n    var status;\n    if (!strm /*== Z_NULL*/  || !strm.state /*== Z_NULL*/ ) {\n        return Z_STREAM_ERROR;\n    }\n    status = strm.state.status;\n    if (status !== INIT_STATE && status !== EXTRA_STATE && status !== NAME_STATE && status !== COMMENT_STATE && status !== HCRC_STATE && status !== BUSY_STATE && status !== FINISH_STATE) {\n        return err(strm, Z_STREAM_ERROR);\n    }\n    strm.state = null;\n    return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\n}\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */ function deflateSetDictionary(strm, dictionary) {\n    var dictLength = dictionary.length;\n    var s;\n    var str, n;\n    var wrap;\n    var avail;\n    var next;\n    var input;\n    var tmpDict;\n    if (!strm /*== Z_NULL*/  || !strm.state /*== Z_NULL*/ ) {\n        return Z_STREAM_ERROR;\n    }\n    s = strm.state;\n    wrap = s.wrap;\n    if (wrap === 2 || wrap === 1 && s.status !== INIT_STATE || s.lookahead) {\n        return Z_STREAM_ERROR;\n    }\n    /* when using zlib wrappers, compute Adler-32 for provided dictionary */ if (wrap === 1) {\n        /* adler32(strm->adler, dictionary, dictLength); */ strm.adler = adler32(strm.adler, dictionary, dictLength, 0);\n    }\n    s.wrap = 0; /* avoid computing Adler-32 in read_buf */ \n    /* if dictionary would fill window, just replace the history */ if (dictLength >= s.w_size) {\n        if (wrap === 0) {\n            /*** CLEAR_HASH(s); ***/ zero(s.head); // Fill with NIL (= 0);\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n        }\n        /* use the tail */ // dictionary = dictionary.slice(dictLength - s.w_size);\n        tmpDict = new utils.Buf8(s.w_size);\n        utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);\n        dictionary = tmpDict;\n        dictLength = s.w_size;\n    }\n    /* insert dictionary into window and hash */ avail = strm.avail_in;\n    next = strm.next_in;\n    input = strm.input;\n    strm.avail_in = dictLength;\n    strm.next_in = 0;\n    strm.input = dictionary;\n    fill_window(s);\n    while(s.lookahead >= MIN_MATCH){\n        str = s.strstart;\n        n = s.lookahead - (MIN_MATCH - 1);\n        do {\n            /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */ s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n            s.prev[str & s.w_mask] = s.head[s.ins_h];\n            s.head[s.ins_h] = str;\n            str++;\n        }while (--n);\n        s.strstart = str;\n        s.lookahead = MIN_MATCH - 1;\n        fill_window(s);\n    }\n    s.strstart += s.lookahead;\n    s.block_start = s.strstart;\n    s.insert = s.lookahead;\n    s.lookahead = 0;\n    s.match_length = s.prev_length = MIN_MATCH - 1;\n    s.match_available = 0;\n    strm.next_in = next;\n    strm.input = input;\n    strm.avail_in = avail;\n    s.wrap = wrap;\n    return Z_OK;\n}\nexports.deflateInit = deflateInit;\nexports.deflateInit2 = deflateInit2;\nexports.deflateReset = deflateReset;\nexports.deflateResetKeep = deflateResetKeep;\nexports.deflateSetHeader = deflateSetHeader;\nexports.deflate = deflate;\nexports.deflateEnd = deflateEnd;\nexports.deflateSetDictionary = deflateSetDictionary;\nexports.deflateInfo = \"pako deflate (from Nodeca project)\"; /* Not implemented\nexports.deflateBound = deflateBound;\nexports.deflateCopy = deflateCopy;\nexports.deflateParams = deflateParams;\nexports.deflatePending = deflatePending;\nexports.deflatePrime = deflatePrime;\nexports.deflateTune = deflateTune;\n*/ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/deflate.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/gzheader.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/gzheader.js ***!
  \*************************************************************************************/
/***/ ((module) => {

eval("\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nfunction GZheader() {\n    /* true if compressed data believed to be text */ this.text = 0;\n    /* modification time */ this.time = 0;\n    /* extra flags (not used when writing a gzip file) */ this.xflags = 0;\n    /* operating system */ this.os = 0;\n    /* pointer to extra field or Z_NULL if none */ this.extra = null;\n    /* extra field length (valid if extra != Z_NULL) */ this.extra_len = 0; // Actually, we don't need it in JS,\n    // but leave for few code modifications\n    //\n    // Setup limits is not necessary because in js we should not preallocate memory\n    // for inflate use constant limit in 65536 bytes\n    //\n    /* space at extra (only when reading header) */ // this.extra_max  = 0;\n    /* pointer to zero-terminated file name or Z_NULL */ this.name = \"\";\n    /* space at name (only when reading header) */ // this.name_max   = 0;\n    /* pointer to zero-terminated comment or Z_NULL */ this.comment = \"\";\n    /* space at comment (only when reading header) */ // this.comm_max   = 0;\n    /* true if there was or will be a header crc */ this.hcrc = 0;\n    /* true when done reading gzip header (not used when writing a gzip file) */ this.done = false;\n}\nmodule.exports = GZheader;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHBkZi1saWIvc3RhbmRhcmQtZm9udHMvbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvZ3poZWFkZXIuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxnREFBZ0Q7QUFDaEQsa0RBQWtEO0FBQ2xELEVBQUU7QUFDRixvRUFBb0U7QUFDcEUsd0VBQXdFO0FBQ3hFLHlDQUF5QztBQUN6QyxFQUFFO0FBQ0Ysd0VBQXdFO0FBQ3hFLHlFQUF5RTtBQUN6RSxpREFBaUQ7QUFDakQsRUFBRTtBQUNGLDBFQUEwRTtBQUMxRSx5RUFBeUU7QUFDekUsMEVBQTBFO0FBQzFFLHFDQUFxQztBQUNyQyw2RUFBNkU7QUFDN0UsbURBQW1EO0FBQ25ELDZFQUE2RTtBQUU3RSxTQUFTQTtJQUNQLCtDQUErQyxHQUMvQyxJQUFJLENBQUNDLElBQUksR0FBUztJQUNsQixxQkFBcUIsR0FDckIsSUFBSSxDQUFDQyxJQUFJLEdBQVM7SUFDbEIsbURBQW1ELEdBQ25ELElBQUksQ0FBQ0MsTUFBTSxHQUFPO0lBQ2xCLG9CQUFvQixHQUNwQixJQUFJLENBQUNDLEVBQUUsR0FBVztJQUNsQiw0Q0FBNEMsR0FDNUMsSUFBSSxDQUFDQyxLQUFLLEdBQVE7SUFDbEIsaURBQWlELEdBQ2pELElBQUksQ0FBQ0MsU0FBUyxHQUFJLEdBQUcsb0NBQW9DO0lBQ3BDLHVDQUF1QztJQUU1RCxFQUFFO0lBQ0YsK0VBQStFO0lBQy9FLGdEQUFnRDtJQUNoRCxFQUFFO0lBRUYsNkNBQTZDLEdBQzdDLHVCQUF1QjtJQUN2QixrREFBa0QsR0FDbEQsSUFBSSxDQUFDQyxJQUFJLEdBQVM7SUFDbEIsNENBQTRDLEdBQzVDLHVCQUF1QjtJQUN2QixnREFBZ0QsR0FDaEQsSUFBSSxDQUFDQyxPQUFPLEdBQU07SUFDbEIsK0NBQStDLEdBQy9DLHVCQUF1QjtJQUN2Qiw2Q0FBNkMsR0FDN0MsSUFBSSxDQUFDQyxJQUFJLEdBQVM7SUFDbEIsMEVBQTBFLEdBQzFFLElBQUksQ0FBQ0MsSUFBSSxHQUFTO0FBQ3BCO0FBRUFDLE9BQU9DLE9BQU8sR0FBR1oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaXZpbC1lbmdpbmVlcmluZy1wbGF0Zm9ybS8uL25vZGVfbW9kdWxlcy9AcGRmLWxpYi9zdGFuZGFyZC1mb250cy9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9nemhlYWRlci5qcz82MzE5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG5mdW5jdGlvbiBHWmhlYWRlcigpIHtcbiAgLyogdHJ1ZSBpZiBjb21wcmVzc2VkIGRhdGEgYmVsaWV2ZWQgdG8gYmUgdGV4dCAqL1xuICB0aGlzLnRleHQgICAgICAgPSAwO1xuICAvKiBtb2RpZmljYXRpb24gdGltZSAqL1xuICB0aGlzLnRpbWUgICAgICAgPSAwO1xuICAvKiBleHRyYSBmbGFncyAobm90IHVzZWQgd2hlbiB3cml0aW5nIGEgZ3ppcCBmaWxlKSAqL1xuICB0aGlzLnhmbGFncyAgICAgPSAwO1xuICAvKiBvcGVyYXRpbmcgc3lzdGVtICovXG4gIHRoaXMub3MgICAgICAgICA9IDA7XG4gIC8qIHBvaW50ZXIgdG8gZXh0cmEgZmllbGQgb3IgWl9OVUxMIGlmIG5vbmUgKi9cbiAgdGhpcy5leHRyYSAgICAgID0gbnVsbDtcbiAgLyogZXh0cmEgZmllbGQgbGVuZ3RoICh2YWxpZCBpZiBleHRyYSAhPSBaX05VTEwpICovXG4gIHRoaXMuZXh0cmFfbGVuICA9IDA7IC8vIEFjdHVhbGx5LCB3ZSBkb24ndCBuZWVkIGl0IGluIEpTLFxuICAgICAgICAgICAgICAgICAgICAgICAvLyBidXQgbGVhdmUgZm9yIGZldyBjb2RlIG1vZGlmaWNhdGlvbnNcblxuICAvL1xuICAvLyBTZXR1cCBsaW1pdHMgaXMgbm90IG5lY2Vzc2FyeSBiZWNhdXNlIGluIGpzIHdlIHNob3VsZCBub3QgcHJlYWxsb2NhdGUgbWVtb3J5XG4gIC8vIGZvciBpbmZsYXRlIHVzZSBjb25zdGFudCBsaW1pdCBpbiA2NTUzNiBieXRlc1xuICAvL1xuXG4gIC8qIHNwYWNlIGF0IGV4dHJhIChvbmx5IHdoZW4gcmVhZGluZyBoZWFkZXIpICovXG4gIC8vIHRoaXMuZXh0cmFfbWF4ICA9IDA7XG4gIC8qIHBvaW50ZXIgdG8gemVyby10ZXJtaW5hdGVkIGZpbGUgbmFtZSBvciBaX05VTEwgKi9cbiAgdGhpcy5uYW1lICAgICAgID0gJyc7XG4gIC8qIHNwYWNlIGF0IG5hbWUgKG9ubHkgd2hlbiByZWFkaW5nIGhlYWRlcikgKi9cbiAgLy8gdGhpcy5uYW1lX21heCAgID0gMDtcbiAgLyogcG9pbnRlciB0byB6ZXJvLXRlcm1pbmF0ZWQgY29tbWVudCBvciBaX05VTEwgKi9cbiAgdGhpcy5jb21tZW50ICAgID0gJyc7XG4gIC8qIHNwYWNlIGF0IGNvbW1lbnQgKG9ubHkgd2hlbiByZWFkaW5nIGhlYWRlcikgKi9cbiAgLy8gdGhpcy5jb21tX21heCAgID0gMDtcbiAgLyogdHJ1ZSBpZiB0aGVyZSB3YXMgb3Igd2lsbCBiZSBhIGhlYWRlciBjcmMgKi9cbiAgdGhpcy5oY3JjICAgICAgID0gMDtcbiAgLyogdHJ1ZSB3aGVuIGRvbmUgcmVhZGluZyBnemlwIGhlYWRlciAobm90IHVzZWQgd2hlbiB3cml0aW5nIGEgZ3ppcCBmaWxlKSAqL1xuICB0aGlzLmRvbmUgICAgICAgPSBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBHWmhlYWRlcjtcbiJdLCJuYW1lcyI6WyJHWmhlYWRlciIsInRleHQiLCJ0aW1lIiwieGZsYWdzIiwib3MiLCJleHRyYSIsImV4dHJhX2xlbiIsIm5hbWUiLCJjb21tZW50IiwiaGNyYyIsImRvbmUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/gzheader.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/inffast.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/inffast.js ***!
  \************************************************************************************/
/***/ ((module) => {

eval("\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n// See state defs from inflate.js\nvar BAD = 30; /* got a data error -- remain here until reset */ \nvar TYPE = 12; /* i: waiting for type bits, including last-flag bit */ \n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */ module.exports = function inflate_fast(strm, start) {\n    var state;\n    var _in; /* local strm.input */ \n    var last; /* have enough input while in < last */ \n    var _out; /* local strm.output */ \n    var beg; /* inflate()'s initial strm.output */ \n    var end; /* while out < end, enough space available */ \n    //#ifdef INFLATE_STRICT\n    var dmax; /* maximum distance from zlib header */ \n    //#endif\n    var wsize; /* window size or zero if not using window */ \n    var whave; /* valid bytes in the window */ \n    var wnext; /* window write index */ \n    // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n    var s_window; /* allocated sliding window, if wsize != 0 */ \n    var hold; /* local strm.hold */ \n    var bits; /* local strm.bits */ \n    var lcode; /* local strm.lencode */ \n    var dcode; /* local strm.distcode */ \n    var lmask; /* mask for first level of length codes */ \n    var dmask; /* mask for first level of distance codes */ \n    var here; /* retrieved table entry */ \n    var op; /* code bits, operation, extra bits, or */ \n    /*  window position, window bytes to copy */ var len; /* match length, unused bytes */ \n    var dist; /* match distance */ \n    var from; /* where to copy match from */ \n    var from_source;\n    var input, output; // JS specific, because we have no pointers\n    /* copy state to local variables */ state = strm.state;\n    //here = state.here;\n    _in = strm.next_in;\n    input = strm.input;\n    last = _in + (strm.avail_in - 5);\n    _out = strm.next_out;\n    output = strm.output;\n    beg = _out - (start - strm.avail_out);\n    end = _out + (strm.avail_out - 257);\n    //#ifdef INFLATE_STRICT\n    dmax = state.dmax;\n    //#endif\n    wsize = state.wsize;\n    whave = state.whave;\n    wnext = state.wnext;\n    s_window = state.window;\n    hold = state.hold;\n    bits = state.bits;\n    lcode = state.lencode;\n    dcode = state.distcode;\n    lmask = (1 << state.lenbits) - 1;\n    dmask = (1 << state.distbits) - 1;\n    /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */ top: do {\n        if (bits < 15) {\n            hold += input[_in++] << bits;\n            bits += 8;\n            hold += input[_in++] << bits;\n            bits += 8;\n        }\n        here = lcode[hold & lmask];\n        dolen: for(;;){\n            op = here >>> 24 /*here.bits*/ ;\n            hold >>>= op;\n            bits -= op;\n            op = here >>> 16 & 0xff /*here.op*/ ;\n            if (op === 0) {\n                //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n                //        \"inflate:         literal '%c'\\n\" :\n                //        \"inflate:         literal 0x%02x\\n\", here.val));\n                output[_out++] = here & 0xffff /*here.val*/ ;\n            } else if (op & 16) {\n                len = here & 0xffff /*here.val*/ ;\n                op &= 15; /* number of extra bits */ \n                if (op) {\n                    if (bits < op) {\n                        hold += input[_in++] << bits;\n                        bits += 8;\n                    }\n                    len += hold & (1 << op) - 1;\n                    hold >>>= op;\n                    bits -= op;\n                }\n                //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n                if (bits < 15) {\n                    hold += input[_in++] << bits;\n                    bits += 8;\n                    hold += input[_in++] << bits;\n                    bits += 8;\n                }\n                here = dcode[hold & dmask];\n                dodist: for(;;){\n                    op = here >>> 24 /*here.bits*/ ;\n                    hold >>>= op;\n                    bits -= op;\n                    op = here >>> 16 & 0xff /*here.op*/ ;\n                    if (op & 16) {\n                        dist = here & 0xffff /*here.val*/ ;\n                        op &= 15; /* number of extra bits */ \n                        if (bits < op) {\n                            hold += input[_in++] << bits;\n                            bits += 8;\n                            if (bits < op) {\n                                hold += input[_in++] << bits;\n                                bits += 8;\n                            }\n                        }\n                        dist += hold & (1 << op) - 1;\n                        //#ifdef INFLATE_STRICT\n                        if (dist > dmax) {\n                            strm.msg = \"invalid distance too far back\";\n                            state.mode = BAD;\n                            break top;\n                        }\n                        //#endif\n                        hold >>>= op;\n                        bits -= op;\n                        //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n                        op = _out - beg; /* max distance in output */ \n                        if (dist > op) {\n                            op = dist - op; /* distance back in window */ \n                            if (op > whave) {\n                                if (state.sane) {\n                                    strm.msg = \"invalid distance too far back\";\n                                    state.mode = BAD;\n                                    break top;\n                                }\n                            // (!) This block is disabled in zlib defaults,\n                            // don't enable it for binary compatibility\n                            //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n                            //                if (len <= op - whave) {\n                            //                  do {\n                            //                    output[_out++] = 0;\n                            //                  } while (--len);\n                            //                  continue top;\n                            //                }\n                            //                len -= op - whave;\n                            //                do {\n                            //                  output[_out++] = 0;\n                            //                } while (--op > whave);\n                            //                if (op === 0) {\n                            //                  from = _out - dist;\n                            //                  do {\n                            //                    output[_out++] = output[from++];\n                            //                  } while (--len);\n                            //                  continue top;\n                            //                }\n                            //#endif\n                            }\n                            from = 0; // window index\n                            from_source = s_window;\n                            if (wnext === 0) {\n                                from += wsize - op;\n                                if (op < len) {\n                                    len -= op;\n                                    do {\n                                        output[_out++] = s_window[from++];\n                                    }while (--op);\n                                    from = _out - dist; /* rest from output */ \n                                    from_source = output;\n                                }\n                            } else if (wnext < op) {\n                                from += wsize + wnext - op;\n                                op -= wnext;\n                                if (op < len) {\n                                    len -= op;\n                                    do {\n                                        output[_out++] = s_window[from++];\n                                    }while (--op);\n                                    from = 0;\n                                    if (wnext < len) {\n                                        op = wnext;\n                                        len -= op;\n                                        do {\n                                            output[_out++] = s_window[from++];\n                                        }while (--op);\n                                        from = _out - dist; /* rest from output */ \n                                        from_source = output;\n                                    }\n                                }\n                            } else {\n                                from += wnext - op;\n                                if (op < len) {\n                                    len -= op;\n                                    do {\n                                        output[_out++] = s_window[from++];\n                                    }while (--op);\n                                    from = _out - dist; /* rest from output */ \n                                    from_source = output;\n                                }\n                            }\n                            while(len > 2){\n                                output[_out++] = from_source[from++];\n                                output[_out++] = from_source[from++];\n                                output[_out++] = from_source[from++];\n                                len -= 3;\n                            }\n                            if (len) {\n                                output[_out++] = from_source[from++];\n                                if (len > 1) {\n                                    output[_out++] = from_source[from++];\n                                }\n                            }\n                        } else {\n                            from = _out - dist; /* copy direct from output */ \n                            do {\n                                output[_out++] = output[from++];\n                                output[_out++] = output[from++];\n                                output[_out++] = output[from++];\n                                len -= 3;\n                            }while (len > 2);\n                            if (len) {\n                                output[_out++] = output[from++];\n                                if (len > 1) {\n                                    output[_out++] = output[from++];\n                                }\n                            }\n                        }\n                    } else if ((op & 64) === 0) {\n                        here = dcode[(here & 0xffff) + (hold & (1 << op) - 1)];\n                        continue dodist;\n                    } else {\n                        strm.msg = \"invalid distance code\";\n                        state.mode = BAD;\n                        break top;\n                    }\n                    break; // need to emulate goto via \"continue\"\n                }\n            } else if ((op & 64) === 0) {\n                here = lcode[(here & 0xffff) + (hold & (1 << op) - 1)];\n                continue dolen;\n            } else if (op & 32) {\n                //Tracevv((stderr, \"inflate:         end of block\\n\"));\n                state.mode = TYPE;\n                break top;\n            } else {\n                strm.msg = \"invalid literal/length code\";\n                state.mode = BAD;\n                break top;\n            }\n            break; // need to emulate goto via \"continue\"\n        }\n    }while (_in < last && _out < end);\n    /* return unused bytes (on entry, bits < 8, so in won't go too far back) */ len = bits >> 3;\n    _in -= len;\n    bits -= len << 3;\n    hold &= (1 << bits) - 1;\n    /* update state and return */ strm.next_in = _in;\n    strm.next_out = _out;\n    strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);\n    strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);\n    state.hold = hold;\n    state.bits = bits;\n    return;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/inffast.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/inflate.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/inflate.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nvar utils = __webpack_require__(/*! ../utils/common */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/utils/common.js\");\nvar adler32 = __webpack_require__(/*! ./adler32 */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/adler32.js\");\nvar crc32 = __webpack_require__(/*! ./crc32 */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/crc32.js\");\nvar inflate_fast = __webpack_require__(/*! ./inffast */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/inffast.js\");\nvar inflate_table = __webpack_require__(/*! ./inftrees */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/inftrees.js\");\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n/* Public constants ==========================================================*/ /* ===========================================================================*/ /* Allowed flush values; see deflate() and inflate() below for details */ //var Z_NO_FLUSH      = 0;\n//var Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\n//var Z_FULL_FLUSH    = 3;\nvar Z_FINISH = 4;\nvar Z_BLOCK = 5;\nvar Z_TREES = 6;\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */ var Z_OK = 0;\nvar Z_STREAM_END = 1;\nvar Z_NEED_DICT = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR = -2;\nvar Z_DATA_ERROR = -3;\nvar Z_MEM_ERROR = -4;\nvar Z_BUF_ERROR = -5;\n//var Z_VERSION_ERROR = -6;\n/* The deflate compression method */ var Z_DEFLATED = 8;\n/* STATES ====================================================================*/ /* ===========================================================================*/ var HEAD = 1; /* i: waiting for magic header */ \nvar FLAGS = 2; /* i: waiting for method and flags (gzip) */ \nvar TIME = 3; /* i: waiting for modification time (gzip) */ \nvar OS = 4; /* i: waiting for extra flags and operating system (gzip) */ \nvar EXLEN = 5; /* i: waiting for extra length (gzip) */ \nvar EXTRA = 6; /* i: waiting for extra bytes (gzip) */ \nvar NAME = 7; /* i: waiting for end of file name (gzip) */ \nvar COMMENT = 8; /* i: waiting for end of comment (gzip) */ \nvar HCRC = 9; /* i: waiting for header crc (gzip) */ \nvar DICTID = 10; /* i: waiting for dictionary check value */ \nvar DICT = 11; /* waiting for inflateSetDictionary() call */ \nvar TYPE = 12; /* i: waiting for type bits, including last-flag bit */ \nvar TYPEDO = 13; /* i: same, but skip check to exit inflate on new block */ \nvar STORED = 14; /* i: waiting for stored size (length and complement) */ \nvar COPY_ = 15; /* i/o: same as COPY below, but only first time in */ \nvar COPY = 16; /* i/o: waiting for input or output to copy stored block */ \nvar TABLE = 17; /* i: waiting for dynamic block table lengths */ \nvar LENLENS = 18; /* i: waiting for code length code lengths */ \nvar CODELENS = 19; /* i: waiting for length/lit and distance code lengths */ \nvar LEN_ = 20; /* i: same as LEN below, but only first time in */ \nvar LEN = 21; /* i: waiting for length/lit/eob code */ \nvar LENEXT = 22; /* i: waiting for length extra bits */ \nvar DIST = 23; /* i: waiting for distance code */ \nvar DISTEXT = 24; /* i: waiting for distance extra bits */ \nvar MATCH = 25; /* o: waiting for output space to copy string */ \nvar LIT = 26; /* o: waiting for output space to write literal */ \nvar CHECK = 27; /* i: waiting for 32-bit check value */ \nvar LENGTH = 28; /* i: waiting for 32-bit length (gzip) */ \nvar DONE = 29; /* finished check, done -- remain here until reset */ \nvar BAD = 30; /* got a data error -- remain here until reset */ \nvar MEM = 31; /* got an inflate() memory error -- remain here until reset */ \nvar SYNC = 32; /* looking for synchronization bytes to restart inflate() */ \n/* ===========================================================================*/ var ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */ var DEF_WBITS = MAX_WBITS;\nfunction zswap32(q) {\n    return (q >>> 24 & 0xff) + (q >>> 8 & 0xff00) + ((q & 0xff00) << 8) + ((q & 0xff) << 24);\n}\nfunction InflateState() {\n    this.mode = 0; /* current inflate mode */ \n    this.last = false; /* true if processing last block */ \n    this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip */ \n    this.havedict = false; /* true if dictionary provided */ \n    this.flags = 0; /* gzip header method and flags (0 if zlib) */ \n    this.dmax = 0; /* zlib header max distance (INFLATE_STRICT) */ \n    this.check = 0; /* protected copy of check value */ \n    this.total = 0; /* protected copy of output count */ \n    // TODO: may be {}\n    this.head = null; /* where to save gzip header information */ \n    /* sliding window */ this.wbits = 0; /* log base 2 of requested window size */ \n    this.wsize = 0; /* window size or zero if not using window */ \n    this.whave = 0; /* valid bytes in the window */ \n    this.wnext = 0; /* window write index */ \n    this.window = null; /* allocated sliding window, if needed */ \n    /* bit accumulator */ this.hold = 0; /* input bit accumulator */ \n    this.bits = 0; /* number of bits in \"in\" */ \n    /* for string and stored block copying */ this.length = 0; /* literal or length of data to copy */ \n    this.offset = 0; /* distance back to copy string from */ \n    /* for table and code decoding */ this.extra = 0; /* extra bits needed */ \n    /* fixed and dynamic code tables */ this.lencode = null; /* starting table for length/literal codes */ \n    this.distcode = null; /* starting table for distance codes */ \n    this.lenbits = 0; /* index bits for lencode */ \n    this.distbits = 0; /* index bits for distcode */ \n    /* dynamic table building */ this.ncode = 0; /* number of code length code lengths */ \n    this.nlen = 0; /* number of length code lengths */ \n    this.ndist = 0; /* number of distance code lengths */ \n    this.have = 0; /* number of code lengths in lens[] */ \n    this.next = null; /* next available space in codes[] */ \n    this.lens = new utils.Buf16(320); /* temporary storage for code lengths */ \n    this.work = new utils.Buf16(288); /* work area for code table building */ \n    /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */ //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */\n    this.lendyn = null; /* dynamic table for length/literal codes (JS specific) */ \n    this.distdyn = null; /* dynamic table for distance codes (JS specific) */ \n    this.sane = 0; /* if false, allow invalid distance too far */ \n    this.back = 0; /* bits back of last unprocessed length/lit */ \n    this.was = 0; /* initial length of match */ \n}\nfunction inflateResetKeep(strm) {\n    var state;\n    if (!strm || !strm.state) {\n        return Z_STREAM_ERROR;\n    }\n    state = strm.state;\n    strm.total_in = strm.total_out = state.total = 0;\n    strm.msg = \"\"; /*Z_NULL*/ \n    if (state.wrap) {\n        strm.adler = state.wrap & 1;\n    }\n    state.mode = HEAD;\n    state.last = 0;\n    state.havedict = 0;\n    state.dmax = 32768;\n    state.head = null /*Z_NULL*/ ;\n    state.hold = 0;\n    state.bits = 0;\n    //state.lencode = state.distcode = state.next = state.codes;\n    state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);\n    state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);\n    state.sane = 1;\n    state.back = -1;\n    //Tracev((stderr, \"inflate: reset\\n\"));\n    return Z_OK;\n}\nfunction inflateReset(strm) {\n    var state;\n    if (!strm || !strm.state) {\n        return Z_STREAM_ERROR;\n    }\n    state = strm.state;\n    state.wsize = 0;\n    state.whave = 0;\n    state.wnext = 0;\n    return inflateResetKeep(strm);\n}\nfunction inflateReset2(strm, windowBits) {\n    var wrap;\n    var state;\n    /* get the state */ if (!strm || !strm.state) {\n        return Z_STREAM_ERROR;\n    }\n    state = strm.state;\n    /* extract wrap request from windowBits parameter */ if (windowBits < 0) {\n        wrap = 0;\n        windowBits = -windowBits;\n    } else {\n        wrap = (windowBits >> 4) + 1;\n        if (windowBits < 48) {\n            windowBits &= 15;\n        }\n    }\n    /* set number of window bits, free window if different */ if (windowBits && (windowBits < 8 || windowBits > 15)) {\n        return Z_STREAM_ERROR;\n    }\n    if (state.window !== null && state.wbits !== windowBits) {\n        state.window = null;\n    }\n    /* update state and reset the rest of it */ state.wrap = wrap;\n    state.wbits = windowBits;\n    return inflateReset(strm);\n}\nfunction inflateInit2(strm, windowBits) {\n    var ret;\n    var state;\n    if (!strm) {\n        return Z_STREAM_ERROR;\n    }\n    //strm.msg = Z_NULL;                 /* in case we return an error */\n    state = new InflateState();\n    //if (state === Z_NULL) return Z_MEM_ERROR;\n    //Tracev((stderr, \"inflate: allocated\\n\"));\n    strm.state = state;\n    state.window = null /*Z_NULL*/ ;\n    ret = inflateReset2(strm, windowBits);\n    if (ret !== Z_OK) {\n        strm.state = null /*Z_NULL*/ ;\n    }\n    return ret;\n}\nfunction inflateInit(strm) {\n    return inflateInit2(strm, DEF_WBITS);\n}\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */ var virgin = true;\nvar lenfix, distfix; // We have no pointers in JS, so keep tables separate\nfunction fixedtables(state) {\n    /* build fixed huffman tables if first call (may not be thread safe) */ if (virgin) {\n        var sym;\n        lenfix = new utils.Buf32(512);\n        distfix = new utils.Buf32(32);\n        /* literal/length table */ sym = 0;\n        while(sym < 144){\n            state.lens[sym++] = 8;\n        }\n        while(sym < 256){\n            state.lens[sym++] = 9;\n        }\n        while(sym < 280){\n            state.lens[sym++] = 7;\n        }\n        while(sym < 288){\n            state.lens[sym++] = 8;\n        }\n        inflate_table(LENS, state.lens, 0, 288, lenfix, 0, state.work, {\n            bits: 9\n        });\n        /* distance table */ sym = 0;\n        while(sym < 32){\n            state.lens[sym++] = 5;\n        }\n        inflate_table(DISTS, state.lens, 0, 32, distfix, 0, state.work, {\n            bits: 5\n        });\n        /* do this just once */ virgin = false;\n    }\n    state.lencode = lenfix;\n    state.lenbits = 9;\n    state.distcode = distfix;\n    state.distbits = 5;\n}\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */ function updatewindow(strm, src, end, copy) {\n    var dist;\n    var state = strm.state;\n    /* if it hasn't been done already, allocate space for the window */ if (state.window === null) {\n        state.wsize = 1 << state.wbits;\n        state.wnext = 0;\n        state.whave = 0;\n        state.window = new utils.Buf8(state.wsize);\n    }\n    /* copy state->wsize or less output bytes into the circular window */ if (copy >= state.wsize) {\n        utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);\n        state.wnext = 0;\n        state.whave = state.wsize;\n    } else {\n        dist = state.wsize - state.wnext;\n        if (dist > copy) {\n            dist = copy;\n        }\n        //zmemcpy(state->window + state->wnext, end - copy, dist);\n        utils.arraySet(state.window, src, end - copy, dist, state.wnext);\n        copy -= dist;\n        if (copy) {\n            //zmemcpy(state->window, end - copy, copy);\n            utils.arraySet(state.window, src, end - copy, copy, 0);\n            state.wnext = copy;\n            state.whave = state.wsize;\n        } else {\n            state.wnext += dist;\n            if (state.wnext === state.wsize) {\n                state.wnext = 0;\n            }\n            if (state.whave < state.wsize) {\n                state.whave += dist;\n            }\n        }\n    }\n    return 0;\n}\nfunction inflate(strm, flush) {\n    var state;\n    var input, output; // input/output buffers\n    var next; /* next input INDEX */ \n    var put; /* next output INDEX */ \n    var have, left; /* available input and output */ \n    var hold; /* bit buffer */ \n    var bits; /* bits in bit buffer */ \n    var _in, _out; /* save starting available input and output */ \n    var copy; /* number of stored or match bytes to copy */ \n    var from; /* where to copy match bytes from */ \n    var from_source;\n    var here = 0; /* current decoding table entry */ \n    var here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n    //var last;                   /* parent table entry */\n    var last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n    var len; /* length to copy for repeats, bits to drop */ \n    var ret; /* return code */ \n    var hbuf = new utils.Buf8(4); /* buffer for gzip header crc calculation */ \n    var opts;\n    var n; // temporary var for NEED_BITS\n    var order = /* permutation of code lengths */ [\n        16,\n        17,\n        18,\n        0,\n        8,\n        7,\n        9,\n        6,\n        10,\n        5,\n        11,\n        4,\n        12,\n        3,\n        13,\n        2,\n        14,\n        1,\n        15\n    ];\n    if (!strm || !strm.state || !strm.output || !strm.input && strm.avail_in !== 0) {\n        return Z_STREAM_ERROR;\n    }\n    state = strm.state;\n    if (state.mode === TYPE) {\n        state.mode = TYPEDO;\n    } /* skip check */ \n    //--- LOAD() ---\n    put = strm.next_out;\n    output = strm.output;\n    left = strm.avail_out;\n    next = strm.next_in;\n    input = strm.input;\n    have = strm.avail_in;\n    hold = state.hold;\n    bits = state.bits;\n    //---\n    _in = have;\n    _out = left;\n    ret = Z_OK;\n    inf_leave: for(;;){\n        switch(state.mode){\n            case HEAD:\n                if (state.wrap === 0) {\n                    state.mode = TYPEDO;\n                    break;\n                }\n                //=== NEEDBITS(16);\n                while(bits < 16){\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                }\n                //===//\n                if (state.wrap & 2 && hold === 0x8b1f) {\n                    state.check = 0 /*crc32(0L, Z_NULL, 0)*/ ;\n                    //=== CRC2(state.check, hold);\n                    hbuf[0] = hold & 0xff;\n                    hbuf[1] = hold >>> 8 & 0xff;\n                    state.check = crc32(state.check, hbuf, 2, 0);\n                    //===//\n                    //=== INITBITS();\n                    hold = 0;\n                    bits = 0;\n                    //===//\n                    state.mode = FLAGS;\n                    break;\n                }\n                state.flags = 0; /* expect zlib header */ \n                if (state.head) {\n                    state.head.done = false;\n                }\n                if (!(state.wrap & 1) || /* check if zlib header allowed */ (((hold & 0xff) << 8) + (hold >> 8)) % 31) {\n                    strm.msg = \"incorrect header check\";\n                    state.mode = BAD;\n                    break;\n                }\n                if ((hold & 0x0f) !== Z_DEFLATED) {\n                    strm.msg = \"unknown compression method\";\n                    state.mode = BAD;\n                    break;\n                }\n                //--- DROPBITS(4) ---//\n                hold >>>= 4;\n                bits -= 4;\n                //---//\n                len = (hold & 0x0f) + 8;\n                if (state.wbits === 0) {\n                    state.wbits = len;\n                } else if (len > state.wbits) {\n                    strm.msg = \"invalid window size\";\n                    state.mode = BAD;\n                    break;\n                }\n                state.dmax = 1 << len;\n                //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n                strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/ ;\n                state.mode = hold & 0x200 ? DICTID : TYPE;\n                //=== INITBITS();\n                hold = 0;\n                bits = 0;\n                break;\n            case FLAGS:\n                //=== NEEDBITS(16); */\n                while(bits < 16){\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                }\n                //===//\n                state.flags = hold;\n                if ((state.flags & 0xff) !== Z_DEFLATED) {\n                    strm.msg = \"unknown compression method\";\n                    state.mode = BAD;\n                    break;\n                }\n                if (state.flags & 0xe000) {\n                    strm.msg = \"unknown header flags set\";\n                    state.mode = BAD;\n                    break;\n                }\n                if (state.head) {\n                    state.head.text = hold >> 8 & 1;\n                }\n                if (state.flags & 0x0200) {\n                    //=== CRC2(state.check, hold);\n                    hbuf[0] = hold & 0xff;\n                    hbuf[1] = hold >>> 8 & 0xff;\n                    state.check = crc32(state.check, hbuf, 2, 0);\n                //===//\n                }\n                //=== INITBITS();\n                hold = 0;\n                bits = 0;\n                //===//\n                state.mode = TIME;\n            /* falls through */ case TIME:\n                //=== NEEDBITS(32); */\n                while(bits < 32){\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                }\n                //===//\n                if (state.head) {\n                    state.head.time = hold;\n                }\n                if (state.flags & 0x0200) {\n                    //=== CRC4(state.check, hold)\n                    hbuf[0] = hold & 0xff;\n                    hbuf[1] = hold >>> 8 & 0xff;\n                    hbuf[2] = hold >>> 16 & 0xff;\n                    hbuf[3] = hold >>> 24 & 0xff;\n                    state.check = crc32(state.check, hbuf, 4, 0);\n                //===\n                }\n                //=== INITBITS();\n                hold = 0;\n                bits = 0;\n                //===//\n                state.mode = OS;\n            /* falls through */ case OS:\n                //=== NEEDBITS(16); */\n                while(bits < 16){\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                }\n                //===//\n                if (state.head) {\n                    state.head.xflags = hold & 0xff;\n                    state.head.os = hold >> 8;\n                }\n                if (state.flags & 0x0200) {\n                    //=== CRC2(state.check, hold);\n                    hbuf[0] = hold & 0xff;\n                    hbuf[1] = hold >>> 8 & 0xff;\n                    state.check = crc32(state.check, hbuf, 2, 0);\n                //===//\n                }\n                //=== INITBITS();\n                hold = 0;\n                bits = 0;\n                //===//\n                state.mode = EXLEN;\n            /* falls through */ case EXLEN:\n                if (state.flags & 0x0400) {\n                    //=== NEEDBITS(16); */\n                    while(bits < 16){\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    }\n                    //===//\n                    state.length = hold;\n                    if (state.head) {\n                        state.head.extra_len = hold;\n                    }\n                    if (state.flags & 0x0200) {\n                        //=== CRC2(state.check, hold);\n                        hbuf[0] = hold & 0xff;\n                        hbuf[1] = hold >>> 8 & 0xff;\n                        state.check = crc32(state.check, hbuf, 2, 0);\n                    //===//\n                    }\n                    //=== INITBITS();\n                    hold = 0;\n                    bits = 0;\n                //===//\n                } else if (state.head) {\n                    state.head.extra = null /*Z_NULL*/ ;\n                }\n                state.mode = EXTRA;\n            /* falls through */ case EXTRA:\n                if (state.flags & 0x0400) {\n                    copy = state.length;\n                    if (copy > have) {\n                        copy = have;\n                    }\n                    if (copy) {\n                        if (state.head) {\n                            len = state.head.extra_len - state.length;\n                            if (!state.head.extra) {\n                                // Use untyped array for more convenient processing later\n                                state.head.extra = new Array(state.head.extra_len);\n                            }\n                            utils.arraySet(state.head.extra, input, next, // extra field is limited to 65536 bytes\n                            // - no need for additional size check\n                            copy, /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/ len);\n                        //zmemcpy(state.head.extra + len, next,\n                        //        len + copy > state.head.extra_max ?\n                        //        state.head.extra_max - len : copy);\n                        }\n                        if (state.flags & 0x0200) {\n                            state.check = crc32(state.check, input, copy, next);\n                        }\n                        have -= copy;\n                        next += copy;\n                        state.length -= copy;\n                    }\n                    if (state.length) {\n                        break inf_leave;\n                    }\n                }\n                state.length = 0;\n                state.mode = NAME;\n            /* falls through */ case NAME:\n                if (state.flags & 0x0800) {\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    copy = 0;\n                    do {\n                        // TODO: 2 or 1 bytes?\n                        len = input[next + copy++];\n                        /* use constant limit because in js we should not preallocate memory */ if (state.head && len && state.length < 65536 /*state.head.name_max*/ ) {\n                            state.head.name += String.fromCharCode(len);\n                        }\n                    }while (len && copy < have);\n                    if (state.flags & 0x0200) {\n                        state.check = crc32(state.check, input, copy, next);\n                    }\n                    have -= copy;\n                    next += copy;\n                    if (len) {\n                        break inf_leave;\n                    }\n                } else if (state.head) {\n                    state.head.name = null;\n                }\n                state.length = 0;\n                state.mode = COMMENT;\n            /* falls through */ case COMMENT:\n                if (state.flags & 0x1000) {\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    copy = 0;\n                    do {\n                        len = input[next + copy++];\n                        /* use constant limit because in js we should not preallocate memory */ if (state.head && len && state.length < 65536 /*state.head.comm_max*/ ) {\n                            state.head.comment += String.fromCharCode(len);\n                        }\n                    }while (len && copy < have);\n                    if (state.flags & 0x0200) {\n                        state.check = crc32(state.check, input, copy, next);\n                    }\n                    have -= copy;\n                    next += copy;\n                    if (len) {\n                        break inf_leave;\n                    }\n                } else if (state.head) {\n                    state.head.comment = null;\n                }\n                state.mode = HCRC;\n            /* falls through */ case HCRC:\n                if (state.flags & 0x0200) {\n                    //=== NEEDBITS(16); */\n                    while(bits < 16){\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    }\n                    //===//\n                    if (hold !== (state.check & 0xffff)) {\n                        strm.msg = \"header crc mismatch\";\n                        state.mode = BAD;\n                        break;\n                    }\n                    //=== INITBITS();\n                    hold = 0;\n                    bits = 0;\n                //===//\n                }\n                if (state.head) {\n                    state.head.hcrc = state.flags >> 9 & 1;\n                    state.head.done = true;\n                }\n                strm.adler = state.check = 0;\n                state.mode = TYPE;\n                break;\n            case DICTID:\n                //=== NEEDBITS(32); */\n                while(bits < 32){\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                }\n                //===//\n                strm.adler = state.check = zswap32(hold);\n                //=== INITBITS();\n                hold = 0;\n                bits = 0;\n                //===//\n                state.mode = DICT;\n            /* falls through */ case DICT:\n                if (state.havedict === 0) {\n                    //--- RESTORE() ---\n                    strm.next_out = put;\n                    strm.avail_out = left;\n                    strm.next_in = next;\n                    strm.avail_in = have;\n                    state.hold = hold;\n                    state.bits = bits;\n                    //---\n                    return Z_NEED_DICT;\n                }\n                strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/ ;\n                state.mode = TYPE;\n            /* falls through */ case TYPE:\n                if (flush === Z_BLOCK || flush === Z_TREES) {\n                    break inf_leave;\n                }\n            /* falls through */ case TYPEDO:\n                if (state.last) {\n                    //--- BYTEBITS() ---//\n                    hold >>>= bits & 7;\n                    bits -= bits & 7;\n                    //---//\n                    state.mode = CHECK;\n                    break;\n                }\n                //=== NEEDBITS(3); */\n                while(bits < 3){\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                }\n                //===//\n                state.last = hold & 0x01 /*BITS(1)*/ ;\n                //--- DROPBITS(1) ---//\n                hold >>>= 1;\n                bits -= 1;\n                //---//\n                switch(hold & 0x03){\n                    case 0:\n                        /* stored block */ //Tracev((stderr, \"inflate:     stored block%s\\n\",\n                        //        state.last ? \" (last)\" : \"\"));\n                        state.mode = STORED;\n                        break;\n                    case 1:\n                        /* fixed block */ fixedtables(state);\n                        //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n                        //        state.last ? \" (last)\" : \"\"));\n                        state.mode = LEN_; /* decode codes */ \n                        if (flush === Z_TREES) {\n                            //--- DROPBITS(2) ---//\n                            hold >>>= 2;\n                            bits -= 2;\n                            break inf_leave;\n                        }\n                        break;\n                    case 2:\n                        /* dynamic block */ //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n                        //        state.last ? \" (last)\" : \"\"));\n                        state.mode = TABLE;\n                        break;\n                    case 3:\n                        strm.msg = \"invalid block type\";\n                        state.mode = BAD;\n                }\n                //--- DROPBITS(2) ---//\n                hold >>>= 2;\n                bits -= 2;\n                break;\n            case STORED:\n                //--- BYTEBITS() ---// /* go to byte boundary */\n                hold >>>= bits & 7;\n                bits -= bits & 7;\n                //---//\n                //=== NEEDBITS(32); */\n                while(bits < 32){\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                }\n                //===//\n                if ((hold & 0xffff) !== (hold >>> 16 ^ 0xffff)) {\n                    strm.msg = \"invalid stored block lengths\";\n                    state.mode = BAD;\n                    break;\n                }\n                state.length = hold & 0xffff;\n                //Tracev((stderr, \"inflate:       stored length %u\\n\",\n                //        state.length));\n                //=== INITBITS();\n                hold = 0;\n                bits = 0;\n                //===//\n                state.mode = COPY_;\n                if (flush === Z_TREES) {\n                    break inf_leave;\n                }\n            /* falls through */ case COPY_:\n                state.mode = COPY;\n            /* falls through */ case COPY:\n                copy = state.length;\n                if (copy) {\n                    if (copy > have) {\n                        copy = have;\n                    }\n                    if (copy > left) {\n                        copy = left;\n                    }\n                    if (copy === 0) {\n                        break inf_leave;\n                    }\n                    //--- zmemcpy(put, next, copy); ---\n                    utils.arraySet(output, input, next, copy, put);\n                    //---//\n                    have -= copy;\n                    next += copy;\n                    left -= copy;\n                    put += copy;\n                    state.length -= copy;\n                    break;\n                }\n                //Tracev((stderr, \"inflate:       stored end\\n\"));\n                state.mode = TYPE;\n                break;\n            case TABLE:\n                //=== NEEDBITS(14); */\n                while(bits < 14){\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                }\n                //===//\n                state.nlen = (hold & 0x1f) + 257;\n                //--- DROPBITS(5) ---//\n                hold >>>= 5;\n                bits -= 5;\n                //---//\n                state.ndist = (hold & 0x1f) + 1;\n                //--- DROPBITS(5) ---//\n                hold >>>= 5;\n                bits -= 5;\n                //---//\n                state.ncode = (hold & 0x0f) + 4;\n                //--- DROPBITS(4) ---//\n                hold >>>= 4;\n                bits -= 4;\n                //---//\n                //#ifndef PKZIP_BUG_WORKAROUND\n                if (state.nlen > 286 || state.ndist > 30) {\n                    strm.msg = \"too many length or distance symbols\";\n                    state.mode = BAD;\n                    break;\n                }\n                //#endif\n                //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n                state.have = 0;\n                state.mode = LENLENS;\n            /* falls through */ case LENLENS:\n                while(state.have < state.ncode){\n                    //=== NEEDBITS(3);\n                    while(bits < 3){\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    }\n                    //===//\n                    state.lens[order[state.have++]] = hold & 0x07; //BITS(3);\n                    //--- DROPBITS(3) ---//\n                    hold >>>= 3;\n                    bits -= 3;\n                //---//\n                }\n                while(state.have < 19){\n                    state.lens[order[state.have++]] = 0;\n                }\n                // We have separate tables & no pointers. 2 commented lines below not needed.\n                //state.next = state.codes;\n                //state.lencode = state.next;\n                // Switch to use dynamic table\n                state.lencode = state.lendyn;\n                state.lenbits = 7;\n                opts = {\n                    bits: state.lenbits\n                };\n                ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n                state.lenbits = opts.bits;\n                if (ret) {\n                    strm.msg = \"invalid code lengths set\";\n                    state.mode = BAD;\n                    break;\n                }\n                //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n                state.have = 0;\n                state.mode = CODELENS;\n            /* falls through */ case CODELENS:\n                while(state.have < state.nlen + state.ndist){\n                    for(;;){\n                        here = state.lencode[hold & (1 << state.lenbits) - 1]; /*BITS(state.lenbits)*/ \n                        here_bits = here >>> 24;\n                        here_op = here >>> 16 & 0xff;\n                        here_val = here & 0xffff;\n                        if (here_bits <= bits) {\n                            break;\n                        }\n                        //--- PULLBYTE() ---//\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    //---//\n                    }\n                    if (here_val < 16) {\n                        //--- DROPBITS(here.bits) ---//\n                        hold >>>= here_bits;\n                        bits -= here_bits;\n                        //---//\n                        state.lens[state.have++] = here_val;\n                    } else {\n                        if (here_val === 16) {\n                            //=== NEEDBITS(here.bits + 2);\n                            n = here_bits + 2;\n                            while(bits < n){\n                                if (have === 0) {\n                                    break inf_leave;\n                                }\n                                have--;\n                                hold += input[next++] << bits;\n                                bits += 8;\n                            }\n                            //===//\n                            //--- DROPBITS(here.bits) ---//\n                            hold >>>= here_bits;\n                            bits -= here_bits;\n                            //---//\n                            if (state.have === 0) {\n                                strm.msg = \"invalid bit length repeat\";\n                                state.mode = BAD;\n                                break;\n                            }\n                            len = state.lens[state.have - 1];\n                            copy = 3 + (hold & 0x03); //BITS(2);\n                            //--- DROPBITS(2) ---//\n                            hold >>>= 2;\n                            bits -= 2;\n                        //---//\n                        } else if (here_val === 17) {\n                            //=== NEEDBITS(here.bits + 3);\n                            n = here_bits + 3;\n                            while(bits < n){\n                                if (have === 0) {\n                                    break inf_leave;\n                                }\n                                have--;\n                                hold += input[next++] << bits;\n                                bits += 8;\n                            }\n                            //===//\n                            //--- DROPBITS(here.bits) ---//\n                            hold >>>= here_bits;\n                            bits -= here_bits;\n                            //---//\n                            len = 0;\n                            copy = 3 + (hold & 0x07); //BITS(3);\n                            //--- DROPBITS(3) ---//\n                            hold >>>= 3;\n                            bits -= 3;\n                        //---//\n                        } else {\n                            //=== NEEDBITS(here.bits + 7);\n                            n = here_bits + 7;\n                            while(bits < n){\n                                if (have === 0) {\n                                    break inf_leave;\n                                }\n                                have--;\n                                hold += input[next++] << bits;\n                                bits += 8;\n                            }\n                            //===//\n                            //--- DROPBITS(here.bits) ---//\n                            hold >>>= here_bits;\n                            bits -= here_bits;\n                            //---//\n                            len = 0;\n                            copy = 11 + (hold & 0x7f); //BITS(7);\n                            //--- DROPBITS(7) ---//\n                            hold >>>= 7;\n                            bits -= 7;\n                        //---//\n                        }\n                        if (state.have + copy > state.nlen + state.ndist) {\n                            strm.msg = \"invalid bit length repeat\";\n                            state.mode = BAD;\n                            break;\n                        }\n                        while(copy--){\n                            state.lens[state.have++] = len;\n                        }\n                    }\n                }\n                /* handle error breaks in while */ if (state.mode === BAD) {\n                    break;\n                }\n                /* check for end-of-block code (better have one) */ if (state.lens[256] === 0) {\n                    strm.msg = \"invalid code -- missing end-of-block\";\n                    state.mode = BAD;\n                    break;\n                }\n                /* build code tables -- note: do not change the lenbits or distbits\n           values here (9 and 6) without reading the comments in inftrees.h\n           concerning the ENOUGH constants, which depend on those values */ state.lenbits = 9;\n                opts = {\n                    bits: state.lenbits\n                };\n                ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n                // We have separate tables & no pointers. 2 commented lines below not needed.\n                // state.next_index = opts.table_index;\n                state.lenbits = opts.bits;\n                // state.lencode = state.next;\n                if (ret) {\n                    strm.msg = \"invalid literal/lengths set\";\n                    state.mode = BAD;\n                    break;\n                }\n                state.distbits = 6;\n                //state.distcode.copy(state.codes);\n                // Switch to use dynamic table\n                state.distcode = state.distdyn;\n                opts = {\n                    bits: state.distbits\n                };\n                ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n                // We have separate tables & no pointers. 2 commented lines below not needed.\n                // state.next_index = opts.table_index;\n                state.distbits = opts.bits;\n                // state.distcode = state.next;\n                if (ret) {\n                    strm.msg = \"invalid distances set\";\n                    state.mode = BAD;\n                    break;\n                }\n                //Tracev((stderr, 'inflate:       codes ok\\n'));\n                state.mode = LEN_;\n                if (flush === Z_TREES) {\n                    break inf_leave;\n                }\n            /* falls through */ case LEN_:\n                state.mode = LEN;\n            /* falls through */ case LEN:\n                if (have >= 6 && left >= 258) {\n                    //--- RESTORE() ---\n                    strm.next_out = put;\n                    strm.avail_out = left;\n                    strm.next_in = next;\n                    strm.avail_in = have;\n                    state.hold = hold;\n                    state.bits = bits;\n                    //---\n                    inflate_fast(strm, _out);\n                    //--- LOAD() ---\n                    put = strm.next_out;\n                    output = strm.output;\n                    left = strm.avail_out;\n                    next = strm.next_in;\n                    input = strm.input;\n                    have = strm.avail_in;\n                    hold = state.hold;\n                    bits = state.bits;\n                    //---\n                    if (state.mode === TYPE) {\n                        state.back = -1;\n                    }\n                    break;\n                }\n                state.back = 0;\n                for(;;){\n                    here = state.lencode[hold & (1 << state.lenbits) - 1]; /*BITS(state.lenbits)*/ \n                    here_bits = here >>> 24;\n                    here_op = here >>> 16 & 0xff;\n                    here_val = here & 0xffff;\n                    if (here_bits <= bits) {\n                        break;\n                    }\n                    //--- PULLBYTE() ---//\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                //---//\n                }\n                if (here_op && (here_op & 0xf0) === 0) {\n                    last_bits = here_bits;\n                    last_op = here_op;\n                    last_val = here_val;\n                    for(;;){\n                        here = state.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];\n                        here_bits = here >>> 24;\n                        here_op = here >>> 16 & 0xff;\n                        here_val = here & 0xffff;\n                        if (last_bits + here_bits <= bits) {\n                            break;\n                        }\n                        //--- PULLBYTE() ---//\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    //---//\n                    }\n                    //--- DROPBITS(last.bits) ---//\n                    hold >>>= last_bits;\n                    bits -= last_bits;\n                    //---//\n                    state.back += last_bits;\n                }\n                //--- DROPBITS(here.bits) ---//\n                hold >>>= here_bits;\n                bits -= here_bits;\n                //---//\n                state.back += here_bits;\n                state.length = here_val;\n                if (here_op === 0) {\n                    //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n                    //        \"inflate:         literal '%c'\\n\" :\n                    //        \"inflate:         literal 0x%02x\\n\", here.val));\n                    state.mode = LIT;\n                    break;\n                }\n                if (here_op & 32) {\n                    //Tracevv((stderr, \"inflate:         end of block\\n\"));\n                    state.back = -1;\n                    state.mode = TYPE;\n                    break;\n                }\n                if (here_op & 64) {\n                    strm.msg = \"invalid literal/length code\";\n                    state.mode = BAD;\n                    break;\n                }\n                state.extra = here_op & 15;\n                state.mode = LENEXT;\n            /* falls through */ case LENEXT:\n                if (state.extra) {\n                    //=== NEEDBITS(state.extra);\n                    n = state.extra;\n                    while(bits < n){\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    }\n                    //===//\n                    state.length += hold & (1 << state.extra) - 1 /*BITS(state.extra)*/ ;\n                    //--- DROPBITS(state.extra) ---//\n                    hold >>>= state.extra;\n                    bits -= state.extra;\n                    //---//\n                    state.back += state.extra;\n                }\n                //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n                state.was = state.length;\n                state.mode = DIST;\n            /* falls through */ case DIST:\n                for(;;){\n                    here = state.distcode[hold & (1 << state.distbits) - 1]; /*BITS(state.distbits)*/ \n                    here_bits = here >>> 24;\n                    here_op = here >>> 16 & 0xff;\n                    here_val = here & 0xffff;\n                    if (here_bits <= bits) {\n                        break;\n                    }\n                    //--- PULLBYTE() ---//\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                //---//\n                }\n                if ((here_op & 0xf0) === 0) {\n                    last_bits = here_bits;\n                    last_op = here_op;\n                    last_val = here_val;\n                    for(;;){\n                        here = state.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];\n                        here_bits = here >>> 24;\n                        here_op = here >>> 16 & 0xff;\n                        here_val = here & 0xffff;\n                        if (last_bits + here_bits <= bits) {\n                            break;\n                        }\n                        //--- PULLBYTE() ---//\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    //---//\n                    }\n                    //--- DROPBITS(last.bits) ---//\n                    hold >>>= last_bits;\n                    bits -= last_bits;\n                    //---//\n                    state.back += last_bits;\n                }\n                //--- DROPBITS(here.bits) ---//\n                hold >>>= here_bits;\n                bits -= here_bits;\n                //---//\n                state.back += here_bits;\n                if (here_op & 64) {\n                    strm.msg = \"invalid distance code\";\n                    state.mode = BAD;\n                    break;\n                }\n                state.offset = here_val;\n                state.extra = here_op & 15;\n                state.mode = DISTEXT;\n            /* falls through */ case DISTEXT:\n                if (state.extra) {\n                    //=== NEEDBITS(state.extra);\n                    n = state.extra;\n                    while(bits < n){\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    }\n                    //===//\n                    state.offset += hold & (1 << state.extra) - 1 /*BITS(state.extra)*/ ;\n                    //--- DROPBITS(state.extra) ---//\n                    hold >>>= state.extra;\n                    bits -= state.extra;\n                    //---//\n                    state.back += state.extra;\n                }\n                //#ifdef INFLATE_STRICT\n                if (state.offset > state.dmax) {\n                    strm.msg = \"invalid distance too far back\";\n                    state.mode = BAD;\n                    break;\n                }\n                //#endif\n                //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n                state.mode = MATCH;\n            /* falls through */ case MATCH:\n                if (left === 0) {\n                    break inf_leave;\n                }\n                copy = _out - left;\n                if (state.offset > copy) {\n                    copy = state.offset - copy;\n                    if (copy > state.whave) {\n                        if (state.sane) {\n                            strm.msg = \"invalid distance too far back\";\n                            state.mode = BAD;\n                            break;\n                        }\n                    // (!) This block is disabled in zlib defaults,\n                    // don't enable it for binary compatibility\n                    //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n                    //          Trace((stderr, \"inflate.c too far\\n\"));\n                    //          copy -= state.whave;\n                    //          if (copy > state.length) { copy = state.length; }\n                    //          if (copy > left) { copy = left; }\n                    //          left -= copy;\n                    //          state.length -= copy;\n                    //          do {\n                    //            output[put++] = 0;\n                    //          } while (--copy);\n                    //          if (state.length === 0) { state.mode = LEN; }\n                    //          break;\n                    //#endif\n                    }\n                    if (copy > state.wnext) {\n                        copy -= state.wnext;\n                        from = state.wsize - copy;\n                    } else {\n                        from = state.wnext - copy;\n                    }\n                    if (copy > state.length) {\n                        copy = state.length;\n                    }\n                    from_source = state.window;\n                } else {\n                    from_source = output;\n                    from = put - state.offset;\n                    copy = state.length;\n                }\n                if (copy > left) {\n                    copy = left;\n                }\n                left -= copy;\n                state.length -= copy;\n                do {\n                    output[put++] = from_source[from++];\n                }while (--copy);\n                if (state.length === 0) {\n                    state.mode = LEN;\n                }\n                break;\n            case LIT:\n                if (left === 0) {\n                    break inf_leave;\n                }\n                output[put++] = state.length;\n                left--;\n                state.mode = LEN;\n                break;\n            case CHECK:\n                if (state.wrap) {\n                    //=== NEEDBITS(32);\n                    while(bits < 32){\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        // Use '|' instead of '+' to make sure that result is signed\n                        hold |= input[next++] << bits;\n                        bits += 8;\n                    }\n                    //===//\n                    _out -= left;\n                    strm.total_out += _out;\n                    state.total += _out;\n                    if (_out) {\n                        strm.adler = state.check = /*UPDATE(state.check, put - _out, _out);*/ state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out);\n                    }\n                    _out = left;\n                    // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n                    if ((state.flags ? hold : zswap32(hold)) !== state.check) {\n                        strm.msg = \"incorrect data check\";\n                        state.mode = BAD;\n                        break;\n                    }\n                    //=== INITBITS();\n                    hold = 0;\n                    bits = 0;\n                //===//\n                //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n                }\n                state.mode = LENGTH;\n            /* falls through */ case LENGTH:\n                if (state.wrap && state.flags) {\n                    //=== NEEDBITS(32);\n                    while(bits < 32){\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    }\n                    //===//\n                    if (hold !== (state.total & 0xffffffff)) {\n                        strm.msg = \"incorrect length check\";\n                        state.mode = BAD;\n                        break;\n                    }\n                    //=== INITBITS();\n                    hold = 0;\n                    bits = 0;\n                //===//\n                //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n                }\n                state.mode = DONE;\n            /* falls through */ case DONE:\n                ret = Z_STREAM_END;\n                break inf_leave;\n            case BAD:\n                ret = Z_DATA_ERROR;\n                break inf_leave;\n            case MEM:\n                return Z_MEM_ERROR;\n            case SYNC:\n            /* falls through */ default:\n                return Z_STREAM_ERROR;\n        }\n    }\n    // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n    /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */ //--- RESTORE() ---\n    strm.next_out = put;\n    strm.avail_out = left;\n    strm.next_in = next;\n    strm.avail_in = have;\n    state.hold = hold;\n    state.bits = bits;\n    //---\n    if (state.wsize || _out !== strm.avail_out && state.mode < BAD && (state.mode < CHECK || flush !== Z_FINISH)) {\n        if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {\n            state.mode = MEM;\n            return Z_MEM_ERROR;\n        }\n    }\n    _in -= strm.avail_in;\n    _out -= strm.avail_out;\n    strm.total_in += _in;\n    strm.total_out += _out;\n    state.total += _out;\n    if (state.wrap && _out) {\n        strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/ state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out);\n    }\n    strm.data_type = state.bits + (state.last ? 64 : 0) + (state.mode === TYPE ? 128 : 0) + (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n    if ((_in === 0 && _out === 0 || flush === Z_FINISH) && ret === Z_OK) {\n        ret = Z_BUF_ERROR;\n    }\n    return ret;\n}\nfunction inflateEnd(strm) {\n    if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/ ) {\n        return Z_STREAM_ERROR;\n    }\n    var state = strm.state;\n    if (state.window) {\n        state.window = null;\n    }\n    strm.state = null;\n    return Z_OK;\n}\nfunction inflateGetHeader(strm, head) {\n    var state;\n    /* check state */ if (!strm || !strm.state) {\n        return Z_STREAM_ERROR;\n    }\n    state = strm.state;\n    if ((state.wrap & 2) === 0) {\n        return Z_STREAM_ERROR;\n    }\n    /* save header structure */ state.head = head;\n    head.done = false;\n    return Z_OK;\n}\nfunction inflateSetDictionary(strm, dictionary) {\n    var dictLength = dictionary.length;\n    var state;\n    var dictid;\n    var ret;\n    /* check state */ if (!strm /* == Z_NULL */  || !strm.state /* == Z_NULL */ ) {\n        return Z_STREAM_ERROR;\n    }\n    state = strm.state;\n    if (state.wrap !== 0 && state.mode !== DICT) {\n        return Z_STREAM_ERROR;\n    }\n    /* check for correct dictionary identifier */ if (state.mode === DICT) {\n        dictid = 1; /* adler32(0, null, 0)*/ \n        /* dictid = adler32(dictid, dictionary, dictLength); */ dictid = adler32(dictid, dictionary, dictLength, 0);\n        if (dictid !== state.check) {\n            return Z_DATA_ERROR;\n        }\n    }\n    /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */ ret = updatewindow(strm, dictionary, dictLength, dictLength);\n    if (ret) {\n        state.mode = MEM;\n        return Z_MEM_ERROR;\n    }\n    state.havedict = 1;\n    // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n    return Z_OK;\n}\nexports.inflateReset = inflateReset;\nexports.inflateReset2 = inflateReset2;\nexports.inflateResetKeep = inflateResetKeep;\nexports.inflateInit = inflateInit;\nexports.inflateInit2 = inflateInit2;\nexports.inflate = inflate;\nexports.inflateEnd = inflateEnd;\nexports.inflateGetHeader = inflateGetHeader;\nexports.inflateSetDictionary = inflateSetDictionary;\nexports.inflateInfo = \"pako inflate (from Nodeca project)\"; /* Not implemented\nexports.inflateCopy = inflateCopy;\nexports.inflateGetDictionary = inflateGetDictionary;\nexports.inflateMark = inflateMark;\nexports.inflatePrime = inflatePrime;\nexports.inflateSync = inflateSync;\nexports.inflateSyncPoint = inflateSyncPoint;\nexports.inflateUndermine = inflateUndermine;\n*/ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/inflate.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/inftrees.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/inftrees.js ***!
  \*************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nvar utils = __webpack_require__(/*! ../utils/common */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/utils/common.js\");\nvar MAXBITS = 15;\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\nvar lbase = [\n    /* Length codes 257..285 base */ 3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    13,\n    15,\n    17,\n    19,\n    23,\n    27,\n    31,\n    35,\n    43,\n    51,\n    59,\n    67,\n    83,\n    99,\n    115,\n    131,\n    163,\n    195,\n    227,\n    258,\n    0,\n    0\n];\nvar lext = [\n    /* Length codes 257..285 extra */ 16,\n    16,\n    16,\n    16,\n    16,\n    16,\n    16,\n    16,\n    17,\n    17,\n    17,\n    17,\n    18,\n    18,\n    18,\n    18,\n    19,\n    19,\n    19,\n    19,\n    20,\n    20,\n    20,\n    20,\n    21,\n    21,\n    21,\n    21,\n    16,\n    72,\n    78\n];\nvar dbase = [\n    /* Distance codes 0..29 base */ 1,\n    2,\n    3,\n    4,\n    5,\n    7,\n    9,\n    13,\n    17,\n    25,\n    33,\n    49,\n    65,\n    97,\n    129,\n    193,\n    257,\n    385,\n    513,\n    769,\n    1025,\n    1537,\n    2049,\n    3073,\n    4097,\n    6145,\n    8193,\n    12289,\n    16385,\n    24577,\n    0,\n    0\n];\nvar dext = [\n    /* Distance codes 0..29 extra */ 16,\n    16,\n    16,\n    16,\n    17,\n    17,\n    18,\n    18,\n    19,\n    19,\n    20,\n    20,\n    21,\n    21,\n    22,\n    22,\n    23,\n    23,\n    24,\n    24,\n    25,\n    25,\n    26,\n    26,\n    27,\n    27,\n    28,\n    28,\n    29,\n    29,\n    64,\n    64\n];\nmodule.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts) {\n    var bits = opts.bits;\n    //here = opts.here; /* table entry for duplication */\n    var len = 0; /* a code's length in bits */ \n    var sym = 0; /* index of code symbols */ \n    var min = 0, max = 0; /* minimum and maximum code lengths */ \n    var root = 0; /* number of index bits for root table */ \n    var curr = 0; /* number of index bits for current table */ \n    var drop = 0; /* code bits to drop for sub-table */ \n    var left = 0; /* number of prefix codes available */ \n    var used = 0; /* code entries in table used */ \n    var huff = 0; /* Huffman code */ \n    var incr; /* for incrementing code, index */ \n    var fill; /* index for replicating entries */ \n    var low; /* low bits for current root entry */ \n    var mask; /* mask for low root bits */ \n    var next; /* next available space in table */ \n    var base = null; /* base value table to use */ \n    var base_index = 0;\n    //  var shoextra;    /* extra bits table to use */\n    var end; /* use base and extra for symbol > end */ \n    var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n    var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n    var extra = null;\n    var extra_index = 0;\n    var here_bits, here_op, here_val;\n    /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */ /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */ for(len = 0; len <= MAXBITS; len++){\n        count[len] = 0;\n    }\n    for(sym = 0; sym < codes; sym++){\n        count[lens[lens_index + sym]]++;\n    }\n    /* bound code lengths, force root to be within code lengths */ root = bits;\n    for(max = MAXBITS; max >= 1; max--){\n        if (count[max] !== 0) {\n            break;\n        }\n    }\n    if (root > max) {\n        root = max;\n    }\n    if (max === 0) {\n        //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n        //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n        //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n        table[table_index++] = 1 << 24 | 64 << 16 | 0;\n        //table.op[opts.table_index] = 64;\n        //table.bits[opts.table_index] = 1;\n        //table.val[opts.table_index++] = 0;\n        table[table_index++] = 1 << 24 | 64 << 16 | 0;\n        opts.bits = 1;\n        return 0; /* no symbols, but wait for decoding to report error */ \n    }\n    for(min = 1; min < max; min++){\n        if (count[min] !== 0) {\n            break;\n        }\n    }\n    if (root < min) {\n        root = min;\n    }\n    /* check for an over-subscribed or incomplete set of lengths */ left = 1;\n    for(len = 1; len <= MAXBITS; len++){\n        left <<= 1;\n        left -= count[len];\n        if (left < 0) {\n            return -1;\n        } /* over-subscribed */ \n    }\n    if (left > 0 && (type === CODES || max !== 1)) {\n        return -1; /* incomplete set */ \n    }\n    /* generate offsets into symbol table for each length for sorting */ offs[1] = 0;\n    for(len = 1; len < MAXBITS; len++){\n        offs[len + 1] = offs[len] + count[len];\n    }\n    /* sort symbols by length, by symbol order within each length */ for(sym = 0; sym < codes; sym++){\n        if (lens[lens_index + sym] !== 0) {\n            work[offs[lens[lens_index + sym]]++] = sym;\n        }\n    }\n    /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */ /* set up for code type */ // poor man optimization - use if-else instead of switch,\n    // to avoid deopts in old v8\n    if (type === CODES) {\n        base = extra = work; /* dummy value--not used */ \n        end = 19;\n    } else if (type === LENS) {\n        base = lbase;\n        base_index -= 257;\n        extra = lext;\n        extra_index -= 257;\n        end = 256;\n    } else {\n        base = dbase;\n        extra = dext;\n        end = -1;\n    }\n    /* initialize opts for loop */ huff = 0; /* starting code */ \n    sym = 0; /* starting code symbol */ \n    len = min; /* starting code length */ \n    next = table_index; /* current table to fill in */ \n    curr = root; /* current table index bits */ \n    drop = 0; /* current bits to drop from code for index */ \n    low = -1; /* trigger new sub-table when len > root */ \n    used = 1 << root; /* use root table entries */ \n    mask = used - 1; /* mask for comparing low */ \n    /* check available table space */ if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {\n        return 1;\n    }\n    /* process all codes and make table entries */ for(;;){\n        /* create table entry */ here_bits = len - drop;\n        if (work[sym] < end) {\n            here_op = 0;\n            here_val = work[sym];\n        } else if (work[sym] > end) {\n            here_op = extra[extra_index + work[sym]];\n            here_val = base[base_index + work[sym]];\n        } else {\n            here_op = 32 + 64; /* end of block */ \n            here_val = 0;\n        }\n        /* replicate for those indices with low len bits equal to huff */ incr = 1 << len - drop;\n        fill = 1 << curr;\n        min = fill; /* save offset to next table */ \n        do {\n            fill -= incr;\n            table[next + (huff >> drop) + fill] = here_bits << 24 | here_op << 16 | here_val | 0;\n        }while (fill !== 0);\n        /* backwards increment the len-bit code huff */ incr = 1 << len - 1;\n        while(huff & incr){\n            incr >>= 1;\n        }\n        if (incr !== 0) {\n            huff &= incr - 1;\n            huff += incr;\n        } else {\n            huff = 0;\n        }\n        /* go to next symbol, update count, len */ sym++;\n        if (--count[len] === 0) {\n            if (len === max) {\n                break;\n            }\n            len = lens[lens_index + work[sym]];\n        }\n        /* create new sub-table if needed */ if (len > root && (huff & mask) !== low) {\n            /* if first time, transition to sub-tables */ if (drop === 0) {\n                drop = root;\n            }\n            /* increment past last table */ next += min; /* here min is 1 << curr */ \n            /* determine length of next table */ curr = len - drop;\n            left = 1 << curr;\n            while(curr + drop < max){\n                left -= count[curr + drop];\n                if (left <= 0) {\n                    break;\n                }\n                curr++;\n                left <<= 1;\n            }\n            /* check for enough space */ used += 1 << curr;\n            if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {\n                return 1;\n            }\n            /* point entry in root table to sub-table */ low = huff & mask;\n            /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/ table[low] = root << 24 | curr << 16 | next - table_index | 0;\n        }\n    }\n    /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */ if (huff !== 0) {\n        //table.op[next + huff] = 64;            /* invalid code marker */\n        //table.bits[next + huff] = len - drop;\n        //table.val[next + huff] = 0;\n        table[next + huff] = len - drop << 24 | 64 << 16 | 0;\n    }\n    /* set return parameters */ //opts.table_index += used;\n    opts.bits = root;\n    return 0;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/inftrees.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/messages.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/messages.js ***!
  \*************************************************************************************/
/***/ ((module) => {

eval("\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nmodule.exports = {\n    2: \"need dictionary\",\n    /* Z_NEED_DICT       2  */ 1: \"stream end\",\n    /* Z_STREAM_END      1  */ 0: \"\",\n    /* Z_OK              0  */ \"-1\": \"file error\",\n    /* Z_ERRNO         (-1) */ \"-2\": \"stream error\",\n    /* Z_STREAM_ERROR  (-2) */ \"-3\": \"data error\",\n    /* Z_DATA_ERROR    (-3) */ \"-4\": \"insufficient memory\",\n    /* Z_MEM_ERROR     (-4) */ \"-5\": \"buffer error\",\n    /* Z_BUF_ERROR     (-5) */ \"-6\": \"incompatible version\" /* Z_VERSION_ERROR (-6) */ \n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHBkZi1saWIvc3RhbmRhcmQtZm9udHMvbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvbWVzc2FnZXMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxnREFBZ0Q7QUFDaEQsa0RBQWtEO0FBQ2xELEVBQUU7QUFDRixvRUFBb0U7QUFDcEUsd0VBQXdFO0FBQ3hFLHlDQUF5QztBQUN6QyxFQUFFO0FBQ0Ysd0VBQXdFO0FBQ3hFLHlFQUF5RTtBQUN6RSxpREFBaUQ7QUFDakQsRUFBRTtBQUNGLDBFQUEwRTtBQUMxRSx5RUFBeUU7QUFDekUsMEVBQTBFO0FBQzFFLHFDQUFxQztBQUNyQyw2RUFBNkU7QUFDN0UsbURBQW1EO0FBQ25ELDZFQUE2RTtBQUU3RUEsT0FBT0MsT0FBTyxHQUFHO0lBQ2YsR0FBUTtJQUF1Qix3QkFBd0IsR0FDdkQsR0FBUTtJQUF1Qix3QkFBd0IsR0FDdkQsR0FBUTtJQUF1Qix3QkFBd0IsR0FDdkQsTUFBUTtJQUF1Qix3QkFBd0IsR0FDdkQsTUFBUTtJQUF1Qix3QkFBd0IsR0FDdkQsTUFBUTtJQUF1Qix3QkFBd0IsR0FDdkQsTUFBUTtJQUF1Qix3QkFBd0IsR0FDdkQsTUFBUTtJQUF1Qix3QkFBd0IsR0FDdkQsTUFBUSx1QkFBdUIsd0JBQXdCO0FBQ3pEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2l2aWwtZW5naW5lZXJpbmctcGxhdGZvcm0vLi9ub2RlX21vZHVsZXMvQHBkZi1saWIvc3RhbmRhcmQtZm9udHMvbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvbWVzc2FnZXMuanM/YWFhNSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIDI6ICAgICAgJ25lZWQgZGljdGlvbmFyeScsICAgICAvKiBaX05FRURfRElDVCAgICAgICAyICAqL1xuICAxOiAgICAgICdzdHJlYW0gZW5kJywgICAgICAgICAgLyogWl9TVFJFQU1fRU5EICAgICAgMSAgKi9cbiAgMDogICAgICAnJywgICAgICAgICAgICAgICAgICAgIC8qIFpfT0sgICAgICAgICAgICAgIDAgICovXG4gICctMSc6ICAgJ2ZpbGUgZXJyb3InLCAgICAgICAgICAvKiBaX0VSUk5PICAgICAgICAgKC0xKSAqL1xuICAnLTInOiAgICdzdHJlYW0gZXJyb3InLCAgICAgICAgLyogWl9TVFJFQU1fRVJST1IgICgtMikgKi9cbiAgJy0zJzogICAnZGF0YSBlcnJvcicsICAgICAgICAgIC8qIFpfREFUQV9FUlJPUiAgICAoLTMpICovXG4gICctNCc6ICAgJ2luc3VmZmljaWVudCBtZW1vcnknLCAvKiBaX01FTV9FUlJPUiAgICAgKC00KSAqL1xuICAnLTUnOiAgICdidWZmZXIgZXJyb3InLCAgICAgICAgLyogWl9CVUZfRVJST1IgICAgICgtNSkgKi9cbiAgJy02JzogICAnaW5jb21wYXRpYmxlIHZlcnNpb24nIC8qIFpfVkVSU0lPTl9FUlJPUiAoLTYpICovXG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/messages.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/trees.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/trees.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n/* eslint-disable space-unary-ops */ var utils = __webpack_require__(/*! ../utils/common */ \"(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/utils/common.js\");\n/* Public constants ==========================================================*/ /* ===========================================================================*/ //var Z_FILTERED          = 1;\n//var Z_HUFFMAN_ONLY      = 2;\n//var Z_RLE               = 3;\nvar Z_FIXED = 4;\n//var Z_DEFAULT_STRATEGY  = 0;\n/* Possible values of the data_type field (though see inflate()) */ var Z_BINARY = 0;\nvar Z_TEXT = 1;\n//var Z_ASCII             = 1; // = Z_TEXT\nvar Z_UNKNOWN = 2;\n/*============================================================================*/ function zero(buf) {\n    var len = buf.length;\n    while(--len >= 0){\n        buf[len] = 0;\n    }\n}\n// From zutil.h\nvar STORED_BLOCK = 0;\nvar STATIC_TREES = 1;\nvar DYN_TREES = 2;\n/* The three kinds of block type */ var MIN_MATCH = 3;\nvar MAX_MATCH = 258;\n/* The minimum and maximum match lengths */ // From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */ var LENGTH_CODES = 29;\n/* number of length codes, not counting the special END_BLOCK code */ var LITERALS = 256;\n/* number of literal bytes 0..255 */ var L_CODES = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */ var D_CODES = 30;\n/* number of distance codes */ var BL_CODES = 19;\n/* number of codes used to transfer the bit lengths */ var HEAP_SIZE = 2 * L_CODES + 1;\n/* maximum heap size */ var MAX_BITS = 15;\n/* All codes must not exceed MAX_BITS bits */ var Buf_size = 16;\n/* size of bit buffer in bi_buf */ /* ===========================================================================\n * Constants\n */ var MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */ var END_BLOCK = 256;\n/* end of block literal code */ var REP_3_6 = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */ var REPZ_3_10 = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */ var REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */ /* eslint-disable comma-spacing,array-bracket-spacing */ var extra_lbits = /* extra bits for each length code */ [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    1,\n    1,\n    1,\n    1,\n    2,\n    2,\n    2,\n    2,\n    3,\n    3,\n    3,\n    3,\n    4,\n    4,\n    4,\n    4,\n    5,\n    5,\n    5,\n    5,\n    0\n];\nvar extra_dbits = /* extra bits for each distance code */ [\n    0,\n    0,\n    0,\n    0,\n    1,\n    1,\n    2,\n    2,\n    3,\n    3,\n    4,\n    4,\n    5,\n    5,\n    6,\n    6,\n    7,\n    7,\n    8,\n    8,\n    9,\n    9,\n    10,\n    10,\n    11,\n    11,\n    12,\n    12,\n    13,\n    13\n];\nvar extra_blbits = /* extra bits for each bit length code */ [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    2,\n    3,\n    7\n];\nvar bl_order = [\n    16,\n    17,\n    18,\n    0,\n    8,\n    7,\n    9,\n    6,\n    10,\n    5,\n    11,\n    4,\n    12,\n    3,\n    13,\n    2,\n    14,\n    1,\n    15\n];\n/* eslint-enable comma-spacing,array-bracket-spacing */ /* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */ /* ===========================================================================\n * Local data. These are initialized only once.\n */ // We pre-fill arrays with 0 to avoid uninitialized gaps\nvar DIST_CODE_LEN = 512; /* see definition of array dist_code below */ \n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nvar static_ltree = new Array((L_CODES + 2) * 2);\nzero(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */ var static_dtree = new Array(D_CODES * 2);\nzero(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */ var _dist_code = new Array(DIST_CODE_LEN);\nzero(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */ var _length_code = new Array(MAX_MATCH - MIN_MATCH + 1);\nzero(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */ var base_length = new Array(LENGTH_CODES);\nzero(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */ var base_dist = new Array(D_CODES);\nzero(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */ function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n    this.static_tree = static_tree; /* static tree or NULL */ \n    this.extra_bits = extra_bits; /* extra bits for each code or NULL */ \n    this.extra_base = extra_base; /* base index for extra_bits */ \n    this.elems = elems; /* max number of elements in the tree */ \n    this.max_length = max_length; /* max bit length for the codes */ \n    // show if `static_tree` has data or dummy - needed for monomorphic objects\n    this.has_stree = static_tree && static_tree.length;\n}\nvar static_l_desc;\nvar static_d_desc;\nvar static_bl_desc;\nfunction TreeDesc(dyn_tree, stat_desc) {\n    this.dyn_tree = dyn_tree; /* the dynamic tree */ \n    this.max_code = 0; /* largest code with non zero frequency */ \n    this.stat_desc = stat_desc; /* the corresponding static tree */ \n}\nfunction d_code(dist) {\n    return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n}\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */ function put_short(s, w) {\n    //    put_byte(s, (uch)((w) & 0xff));\n    //    put_byte(s, (uch)((ush)(w) >> 8));\n    s.pending_buf[s.pending++] = w & 0xff;\n    s.pending_buf[s.pending++] = w >>> 8 & 0xff;\n}\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */ function send_bits(s, value, length) {\n    if (s.bi_valid > Buf_size - length) {\n        s.bi_buf |= value << s.bi_valid & 0xffff;\n        put_short(s, s.bi_buf);\n        s.bi_buf = value >> Buf_size - s.bi_valid;\n        s.bi_valid += length - Buf_size;\n    } else {\n        s.bi_buf |= value << s.bi_valid & 0xffff;\n        s.bi_valid += length;\n    }\n}\nfunction send_code(s, c, tree) {\n    send_bits(s, tree[c * 2], tree[c * 2 + 1]);\n}\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */ function bi_reverse(code, len) {\n    var res = 0;\n    do {\n        res |= code & 1;\n        code >>>= 1;\n        res <<= 1;\n    }while (--len > 0);\n    return res >>> 1;\n}\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */ function bi_flush(s) {\n    if (s.bi_valid === 16) {\n        put_short(s, s.bi_buf);\n        s.bi_buf = 0;\n        s.bi_valid = 0;\n    } else if (s.bi_valid >= 8) {\n        s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n        s.bi_buf >>= 8;\n        s.bi_valid -= 8;\n    }\n}\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */ function gen_bitlen(s, desc) //    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n{\n    var tree = desc.dyn_tree;\n    var max_code = desc.max_code;\n    var stree = desc.stat_desc.static_tree;\n    var has_stree = desc.stat_desc.has_stree;\n    var extra = desc.stat_desc.extra_bits;\n    var base = desc.stat_desc.extra_base;\n    var max_length = desc.stat_desc.max_length;\n    var h; /* heap index */ \n    var n, m; /* iterate over the tree elements */ \n    var bits; /* bit length */ \n    var xbits; /* extra bits */ \n    var f; /* frequency */ \n    var overflow = 0; /* number of elements with bit length too large */ \n    for(bits = 0; bits <= MAX_BITS; bits++){\n        s.bl_count[bits] = 0;\n    }\n    /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */ tree[s.heap[s.heap_max] * 2 + 1] = 0; /* root of the heap */ \n    for(h = s.heap_max + 1; h < HEAP_SIZE; h++){\n        n = s.heap[h];\n        bits = tree[tree[n * 2 + 1] * 2 + 1] + 1;\n        if (bits > max_length) {\n            bits = max_length;\n            overflow++;\n        }\n        tree[n * 2 + 1] = bits;\n        /* We overwrite tree[n].Dad which is no longer needed */ if (n > max_code) {\n            continue;\n        } /* not a leaf node */ \n        s.bl_count[bits]++;\n        xbits = 0;\n        if (n >= base) {\n            xbits = extra[n - base];\n        }\n        f = tree[n * 2] /*.Freq*/ ;\n        s.opt_len += f * (bits + xbits);\n        if (has_stree) {\n            s.static_len += f * (stree[n * 2 + 1] + xbits);\n        }\n    }\n    if (overflow === 0) {\n        return;\n    }\n    // Trace((stderr,\"\\nbit length overflow\\n\"));\n    /* This happens for example on obj2 and pic of the Calgary corpus */ /* Find the first bit length which could increase: */ do {\n        bits = max_length - 1;\n        while(s.bl_count[bits] === 0){\n            bits--;\n        }\n        s.bl_count[bits]--; /* move one leaf down the tree */ \n        s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */ \n        s.bl_count[max_length]--;\n        /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */ overflow -= 2;\n    }while (overflow > 0);\n    /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */ for(bits = max_length; bits !== 0; bits--){\n        n = s.bl_count[bits];\n        while(n !== 0){\n            m = s.heap[--h];\n            if (m > max_code) {\n                continue;\n            }\n            if (tree[m * 2 + 1] !== bits) {\n                // Trace((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n                s.opt_len += (bits - tree[m * 2 + 1]) * tree[m * 2] /*.Freq*/ ;\n                tree[m * 2 + 1] = bits;\n            }\n            n--;\n        }\n    }\n}\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */ function gen_codes(tree, max_code, bl_count) //    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n{\n    var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */ \n    var code = 0; /* running code value */ \n    var bits; /* bit index */ \n    var n; /* code index */ \n    /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */ for(bits = 1; bits <= MAX_BITS; bits++){\n        next_code[bits] = code = code + bl_count[bits - 1] << 1;\n    }\n    /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */ //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n    //        \"inconsistent bit counts\");\n    //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n    for(n = 0; n <= max_code; n++){\n        var len = tree[n * 2 + 1] /*.Len*/ ;\n        if (len === 0) {\n            continue;\n        }\n        /* Now reverse the bits */ tree[n * 2] = bi_reverse(next_code[len]++, len);\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n    }\n}\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */ function tr_static_init() {\n    var n; /* iterates over tree elements */ \n    var bits; /* bit counter */ \n    var length; /* length value */ \n    var code; /* code value */ \n    var dist; /* distance index */ \n    var bl_count = new Array(MAX_BITS + 1);\n    /* number of codes at each bit length for an optimal tree */ // do check in _tr_init()\n    //if (static_init_done) return;\n    /* For some embedded targets, global variables are not initialized: */ /*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/ /* Initialize the mapping length (0..255) -> length code (0..28) */ length = 0;\n    for(code = 0; code < LENGTH_CODES - 1; code++){\n        base_length[code] = length;\n        for(n = 0; n < 1 << extra_lbits[code]; n++){\n            _length_code[length++] = code;\n        }\n    }\n    //Assert (length == 256, \"tr_static_init: length != 256\");\n    /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */ _length_code[length - 1] = code;\n    /* Initialize the mapping dist (0..32K) -> dist code (0..29) */ dist = 0;\n    for(code = 0; code < 16; code++){\n        base_dist[code] = dist;\n        for(n = 0; n < 1 << extra_dbits[code]; n++){\n            _dist_code[dist++] = code;\n        }\n    }\n    //Assert (dist == 256, \"tr_static_init: dist != 256\");\n    dist >>= 7; /* from now on, all distances are divided by 128 */ \n    for(; code < D_CODES; code++){\n        base_dist[code] = dist << 7;\n        for(n = 0; n < 1 << extra_dbits[code] - 7; n++){\n            _dist_code[256 + dist++] = code;\n        }\n    }\n    //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n    /* Construct the codes of the static literal tree */ for(bits = 0; bits <= MAX_BITS; bits++){\n        bl_count[bits] = 0;\n    }\n    n = 0;\n    while(n <= 143){\n        static_ltree[n * 2 + 1] = 8;\n        n++;\n        bl_count[8]++;\n    }\n    while(n <= 255){\n        static_ltree[n * 2 + 1] = 9;\n        n++;\n        bl_count[9]++;\n    }\n    while(n <= 279){\n        static_ltree[n * 2 + 1] = 7;\n        n++;\n        bl_count[7]++;\n    }\n    while(n <= 287){\n        static_ltree[n * 2 + 1] = 8;\n        n++;\n        bl_count[8]++;\n    }\n    /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */ gen_codes(static_ltree, L_CODES + 1, bl_count);\n    /* The static distance tree is trivial: */ for(n = 0; n < D_CODES; n++){\n        static_dtree[n * 2 + 1] = 5;\n        static_dtree[n * 2] = bi_reverse(n, 5);\n    }\n    // Now data ready and we can init static trees\n    static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n    static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES, MAX_BITS);\n    static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES, MAX_BL_BITS);\n//static_init_done = true;\n}\n/* ===========================================================================\n * Initialize a new block.\n */ function init_block(s) {\n    var n; /* iterates over tree elements */ \n    /* Initialize the trees. */ for(n = 0; n < L_CODES; n++){\n        s.dyn_ltree[n * 2] = 0;\n    }\n    for(n = 0; n < D_CODES; n++){\n        s.dyn_dtree[n * 2] = 0;\n    }\n    for(n = 0; n < BL_CODES; n++){\n        s.bl_tree[n * 2] = 0;\n    }\n    s.dyn_ltree[END_BLOCK * 2] = 1;\n    s.opt_len = s.static_len = 0;\n    s.last_lit = s.matches = 0;\n}\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */ function bi_windup(s) {\n    if (s.bi_valid > 8) {\n        put_short(s, s.bi_buf);\n    } else if (s.bi_valid > 0) {\n        //put_byte(s, (Byte)s->bi_buf);\n        s.pending_buf[s.pending++] = s.bi_buf;\n    }\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n}\n/* ===========================================================================\n * Copy a stored block, storing first the length and its\n * one's complement if requested.\n */ function copy_block(s, buf, len, header) //DeflateState *s;\n//charf    *buf;    /* the input data */\n//unsigned len;     /* its length */\n//int      header;  /* true if block header must be written */\n{\n    bi_windup(s); /* align on byte boundary */ \n    if (header) {\n        put_short(s, len);\n        put_short(s, ~len);\n    }\n    //  while (len--) {\n    //    put_byte(s, *buf++);\n    //  }\n    utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);\n    s.pending += len;\n}\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */ function smaller(tree, n, m, depth) {\n    var _n2 = n * 2;\n    var _m2 = m * 2;\n    return tree[_n2] < tree[_m2] || tree[_n2] === tree[_m2] && depth[n] <= depth[m];\n}\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */ function pqdownheap(s, tree, k) //    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n{\n    var v = s.heap[k];\n    var j = k << 1; /* left son of k */ \n    while(j <= s.heap_len){\n        /* Set j to the smallest of the two sons: */ if (j < s.heap_len && smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n            j++;\n        }\n        /* Exit if v is smaller than both sons */ if (smaller(tree, v, s.heap[j], s.depth)) {\n            break;\n        }\n        /* Exchange v with the smallest son */ s.heap[k] = s.heap[j];\n        k = j;\n        /* And continue down the tree, setting j to the left son of k */ j <<= 1;\n    }\n    s.heap[k] = v;\n}\n// inlined manually\n// var SMALLEST = 1;\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */ function compress_block(s, ltree, dtree) //    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n{\n    var dist; /* distance of matched string */ \n    var lc; /* match length or unmatched char (if dist == 0) */ \n    var lx = 0; /* running index in l_buf */ \n    var code; /* the code to send */ \n    var extra; /* number of extra bits to send */ \n    if (s.last_lit !== 0) {\n        do {\n            dist = s.pending_buf[s.d_buf + lx * 2] << 8 | s.pending_buf[s.d_buf + lx * 2 + 1];\n            lc = s.pending_buf[s.l_buf + lx];\n            lx++;\n            if (dist === 0) {\n                send_code(s, lc, ltree); /* send a literal byte */ \n            //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n            } else {\n                /* Here, lc is the match length - MIN_MATCH */ code = _length_code[lc];\n                send_code(s, code + LITERALS + 1, ltree); /* send the length code */ \n                extra = extra_lbits[code];\n                if (extra !== 0) {\n                    lc -= base_length[code];\n                    send_bits(s, lc, extra); /* send the extra length bits */ \n                }\n                dist--; /* dist is now the match distance - 1 */ \n                code = d_code(dist);\n                //Assert (code < D_CODES, \"bad d_code\");\n                send_code(s, code, dtree); /* send the distance code */ \n                extra = extra_dbits[code];\n                if (extra !== 0) {\n                    dist -= base_dist[code];\n                    send_bits(s, dist, extra); /* send the extra distance bits */ \n                }\n            } /* literal or match pair ? */ \n        /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */ //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,\n        //       \"pendingBuf overflow\");\n        }while (lx < s.last_lit);\n    }\n    send_code(s, END_BLOCK, ltree);\n}\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */ function build_tree(s, desc) //    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n{\n    var tree = desc.dyn_tree;\n    var stree = desc.stat_desc.static_tree;\n    var has_stree = desc.stat_desc.has_stree;\n    var elems = desc.stat_desc.elems;\n    var n, m; /* iterate over heap elements */ \n    var max_code = -1; /* largest code with non zero frequency */ \n    var node; /* new node being created */ \n    /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */ s.heap_len = 0;\n    s.heap_max = HEAP_SIZE;\n    for(n = 0; n < elems; n++){\n        if (tree[n * 2] !== 0) {\n            s.heap[++s.heap_len] = max_code = n;\n            s.depth[n] = 0;\n        } else {\n            tree[n * 2 + 1] = 0;\n        }\n    }\n    /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */ while(s.heap_len < 2){\n        node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;\n        tree[node * 2] = 1;\n        s.depth[node] = 0;\n        s.opt_len--;\n        if (has_stree) {\n            s.static_len -= stree[node * 2 + 1] /*.Len*/ ;\n        }\n    /* node is 0 or 1 so it does not have extra bits */ }\n    desc.max_code = max_code;\n    /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */ for(n = s.heap_len >> 1 /*int /2*/ ; n >= 1; n--){\n        pqdownheap(s, tree, n);\n    }\n    /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */ node = elems; /* next internal node of the tree */ \n    do {\n        //pqremove(s, tree, n);  /* n = node of least frequency */\n        /*** pqremove ***/ n = s.heap[1 /*SMALLEST*/ ];\n        s.heap[1 /*SMALLEST*/ ] = s.heap[s.heap_len--];\n        pqdownheap(s, tree, 1 /*SMALLEST*/ );\n        /***/ m = s.heap[1 /*SMALLEST*/ ]; /* m = node of next least frequency */ \n        s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */ \n        s.heap[--s.heap_max] = m;\n        /* Create a new node father of n and m */ tree[node * 2] = tree[n * 2] + tree[m * 2] /*.Freq*/ ;\n        s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n        tree[n * 2 + 1] = tree[m * 2 + 1] = node;\n        /* and insert the new node in the heap */ s.heap[1 /*SMALLEST*/ ] = node++;\n        pqdownheap(s, tree, 1 /*SMALLEST*/ );\n    }while (s.heap_len >= 2);\n    s.heap[--s.heap_max] = s.heap[1 /*SMALLEST*/ ];\n    /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */ gen_bitlen(s, desc);\n    /* The field len is now set, we can generate the bit codes */ gen_codes(tree, max_code, s.bl_count);\n}\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */ function scan_tree(s, tree, max_code) //    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n{\n    var n; /* iterates over all tree elements */ \n    var prevlen = -1; /* last emitted length */ \n    var curlen; /* length of current code */ \n    var nextlen = tree[0 * 2 + 1] /*.Len*/ ; /* length of next code */ \n    var count = 0; /* repeat count of the current code */ \n    var max_count = 7; /* max repeat count */ \n    var min_count = 4; /* min repeat count */ \n    if (nextlen === 0) {\n        max_count = 138;\n        min_count = 3;\n    }\n    tree[(max_code + 1) * 2 + 1] = 0xffff; /* guard */ \n    for(n = 0; n <= max_code; n++){\n        curlen = nextlen;\n        nextlen = tree[(n + 1) * 2 + 1] /*.Len*/ ;\n        if (++count < max_count && curlen === nextlen) {\n            continue;\n        } else if (count < min_count) {\n            s.bl_tree[curlen * 2] += count;\n        } else if (curlen !== 0) {\n            if (curlen !== prevlen) {\n                s.bl_tree[curlen * 2]++;\n            }\n            s.bl_tree[REP_3_6 * 2]++;\n        } else if (count <= 10) {\n            s.bl_tree[REPZ_3_10 * 2]++;\n        } else {\n            s.bl_tree[REPZ_11_138 * 2]++;\n        }\n        count = 0;\n        prevlen = curlen;\n        if (nextlen === 0) {\n            max_count = 138;\n            min_count = 3;\n        } else if (curlen === nextlen) {\n            max_count = 6;\n            min_count = 3;\n        } else {\n            max_count = 7;\n            min_count = 4;\n        }\n    }\n}\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */ function send_tree(s, tree, max_code) //    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n{\n    var n; /* iterates over all tree elements */ \n    var prevlen = -1; /* last emitted length */ \n    var curlen; /* length of current code */ \n    var nextlen = tree[0 * 2 + 1] /*.Len*/ ; /* length of next code */ \n    var count = 0; /* repeat count of the current code */ \n    var max_count = 7; /* max repeat count */ \n    var min_count = 4; /* min repeat count */ \n    /* tree[max_code+1].Len = -1; */ /* guard already set */ if (nextlen === 0) {\n        max_count = 138;\n        min_count = 3;\n    }\n    for(n = 0; n <= max_code; n++){\n        curlen = nextlen;\n        nextlen = tree[(n + 1) * 2 + 1] /*.Len*/ ;\n        if (++count < max_count && curlen === nextlen) {\n            continue;\n        } else if (count < min_count) {\n            do {\n                send_code(s, curlen, s.bl_tree);\n            }while (--count !== 0);\n        } else if (curlen !== 0) {\n            if (curlen !== prevlen) {\n                send_code(s, curlen, s.bl_tree);\n                count--;\n            }\n            //Assert(count >= 3 && count <= 6, \" 3_6?\");\n            send_code(s, REP_3_6, s.bl_tree);\n            send_bits(s, count - 3, 2);\n        } else if (count <= 10) {\n            send_code(s, REPZ_3_10, s.bl_tree);\n            send_bits(s, count - 3, 3);\n        } else {\n            send_code(s, REPZ_11_138, s.bl_tree);\n            send_bits(s, count - 11, 7);\n        }\n        count = 0;\n        prevlen = curlen;\n        if (nextlen === 0) {\n            max_count = 138;\n            min_count = 3;\n        } else if (curlen === nextlen) {\n            max_count = 6;\n            min_count = 3;\n        } else {\n            max_count = 7;\n            min_count = 4;\n        }\n    }\n}\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */ function build_bl_tree(s) {\n    var max_blindex; /* index of last bit length code of non zero freq */ \n    /* Determine the bit length frequencies for literal and distance trees */ scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n    scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n    /* Build the bit length tree: */ build_tree(s, s.bl_desc);\n    /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */ /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */ for(max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--){\n        if (s.bl_tree[bl_order[max_blindex] * 2 + 1] !== 0) {\n            break;\n        }\n    }\n    /* Update opt_len to include the bit length tree and counts */ s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n    //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n    //        s->opt_len, s->static_len));\n    return max_blindex;\n}\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */ function send_all_trees(s, lcodes, dcodes, blcodes) //    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n{\n    var rank; /* index in bl_order */ \n    //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n    //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n    //        \"too many codes\");\n    //Tracev((stderr, \"\\nbl counts: \"));\n    send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */ \n    send_bits(s, dcodes - 1, 5);\n    send_bits(s, blcodes - 4, 4); /* not -3 as stated in appnote.txt */ \n    for(rank = 0; rank < blcodes; rank++){\n        //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n        send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1], 3);\n    }\n    //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n    send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */ \n    //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n    send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */ \n//Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n}\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"black list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"white list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */ function detect_data_type(s) {\n    /* black_mask is the bit mask of black-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */ var black_mask = 0xf3ffc07f;\n    var n;\n    /* Check for non-textual (\"black-listed\") bytes. */ for(n = 0; n <= 31; n++, black_mask >>>= 1){\n        if (black_mask & 1 && s.dyn_ltree[n * 2] !== 0) {\n            return Z_BINARY;\n        }\n    }\n    /* Check for textual (\"white-listed\") bytes. */ if (s.dyn_ltree[9 * 2] !== 0 || s.dyn_ltree[10 * 2] !== 0 || s.dyn_ltree[13 * 2] !== 0) {\n        return Z_TEXT;\n    }\n    for(n = 32; n < LITERALS; n++){\n        if (s.dyn_ltree[n * 2] !== 0) {\n            return Z_TEXT;\n        }\n    }\n    /* There are no \"black-listed\" or \"white-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */ return Z_BINARY;\n}\nvar static_init_done = false;\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */ function _tr_init(s) {\n    if (!static_init_done) {\n        tr_static_init();\n        static_init_done = true;\n    }\n    s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);\n    s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);\n    s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n    /* Initialize the first block of the first file: */ init_block(s);\n}\n/* ===========================================================================\n * Send a stored block\n */ function _tr_stored_block(s, buf, stored_len, last) //DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n    send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3); /* send block type */ \n    copy_block(s, buf, stored_len, true); /* with header */ \n}\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */ function _tr_align(s) {\n    send_bits(s, STATIC_TREES << 1, 3);\n    send_code(s, END_BLOCK, static_ltree);\n    bi_flush(s);\n}\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and output the encoded block to the zip file.\n */ function _tr_flush_block(s, buf, stored_len, last) //DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n    var opt_lenb, static_lenb; /* opt_len and static_len in bytes */ \n    var max_blindex = 0; /* index of last bit length code of non zero freq */ \n    /* Build the Huffman trees unless a stored block is forced */ if (s.level > 0) {\n        /* Check if the file is binary or text */ if (s.strm.data_type === Z_UNKNOWN) {\n            s.strm.data_type = detect_data_type(s);\n        }\n        /* Construct the literal and distance trees */ build_tree(s, s.l_desc);\n        // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n        //        s->static_len));\n        build_tree(s, s.d_desc);\n        // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n        //        s->static_len));\n        /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */ /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */ max_blindex = build_bl_tree(s);\n        /* Determine the best encoding. Compute the block lengths in bytes. */ opt_lenb = s.opt_len + 3 + 7 >>> 3;\n        static_lenb = s.static_len + 3 + 7 >>> 3;\n        // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n        //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n        //        s->last_lit));\n        if (static_lenb <= opt_lenb) {\n            opt_lenb = static_lenb;\n        }\n    } else {\n        // Assert(buf != (char*)0, \"lost buf\");\n        opt_lenb = static_lenb = stored_len + 5; /* force a stored block */ \n    }\n    if (stored_len + 4 <= opt_lenb && buf !== -1) {\n        /* 4: two words for the lengths */ /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */ _tr_stored_block(s, buf, stored_len, last);\n    } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {\n        send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n        compress_block(s, static_ltree, static_dtree);\n    } else {\n        send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n        send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n        compress_block(s, s.dyn_ltree, s.dyn_dtree);\n    }\n    // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n    /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */ init_block(s);\n    if (last) {\n        bi_windup(s);\n    }\n// Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n//       s->compressed_len-7*last));\n}\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */ function _tr_tally(s, dist, lc) //    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n{\n    //var out_length, in_length, dcode;\n    s.pending_buf[s.d_buf + s.last_lit * 2] = dist >>> 8 & 0xff;\n    s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;\n    s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;\n    s.last_lit++;\n    if (dist === 0) {\n        /* lc is the unmatched char */ s.dyn_ltree[lc * 2]++;\n    } else {\n        s.matches++;\n        /* Here, lc is the match length - MIN_MATCH */ dist--; /* dist = match distance - 1 */ \n        //Assert((ush)dist < (ush)MAX_DIST(s) &&\n        //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n        //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n        s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]++;\n        s.dyn_dtree[d_code(dist) * 2]++;\n    }\n    // (!) This block is disabled in zlib defaults,\n    // don't enable it for binary compatibility\n    //#ifdef TRUNCATE_BLOCK\n    //  /* Try to guess if it is profitable to stop the current block here */\n    //  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {\n    //    /* Compute an upper bound for the compressed length */\n    //    out_length = s.last_lit*8;\n    //    in_length = s.strstart - s.block_start;\n    //\n    //    for (dcode = 0; dcode < D_CODES; dcode++) {\n    //      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);\n    //    }\n    //    out_length >>>= 3;\n    //    //Tracev((stderr,\"\\nlast_lit %u, in %ld, out ~%ld(%ld%%) \",\n    //    //       s->last_lit, in_length, out_length,\n    //    //       100L - out_length*100L/in_length));\n    //    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {\n    //      return true;\n    //    }\n    //  }\n    //#endif\n    return s.last_lit === s.lit_bufsize - 1;\n/* We avoid equality with lit_bufsize because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */ }\nexports._tr_init = _tr_init;\nexports._tr_stored_block = _tr_stored_block;\nexports._tr_flush_block = _tr_flush_block;\nexports._tr_tally = _tr_tally;\nexports._tr_align = _tr_align;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHBkZi1saWIvc3RhbmRhcmQtZm9udHMvbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvdHJlZXMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxnREFBZ0Q7QUFDaEQsa0RBQWtEO0FBQ2xELEVBQUU7QUFDRixvRUFBb0U7QUFDcEUsd0VBQXdFO0FBQ3hFLHlDQUF5QztBQUN6QyxFQUFFO0FBQ0Ysd0VBQXdFO0FBQ3hFLHlFQUF5RTtBQUN6RSxpREFBaUQ7QUFDakQsRUFBRTtBQUNGLDBFQUEwRTtBQUMxRSx5RUFBeUU7QUFDekUsMEVBQTBFO0FBQzFFLHFDQUFxQztBQUNyQyw2RUFBNkU7QUFDN0UsbURBQW1EO0FBQ25ELDZFQUE2RTtBQUU3RSxrQ0FBa0MsR0FFbEMsSUFBSUEsUUFBUUMsbUJBQU9BLENBQUM7QUFFcEIsOEVBQThFLEdBQzlFLDhFQUE4RSxHQUc5RSw4QkFBOEI7QUFDOUIsOEJBQThCO0FBQzlCLDhCQUE4QjtBQUM5QixJQUFJQyxVQUF3QjtBQUM1Qiw4QkFBOEI7QUFFOUIsaUVBQWlFLEdBQ2pFLElBQUlDLFdBQXdCO0FBQzVCLElBQUlDLFNBQXdCO0FBQzVCLDBDQUEwQztBQUMxQyxJQUFJQyxZQUF3QjtBQUU1Qiw4RUFBOEUsR0FHOUUsU0FBU0MsS0FBS0MsR0FBRztJQUFJLElBQUlDLE1BQU1ELElBQUlFLE1BQU07SUFBRSxNQUFPLEVBQUVELE9BQU8sRUFBRztRQUFFRCxHQUFHLENBQUNDLElBQUksR0FBRztJQUFHO0FBQUU7QUFFaEYsZUFBZTtBQUVmLElBQUlFLGVBQWU7QUFDbkIsSUFBSUMsZUFBZTtBQUNuQixJQUFJQyxZQUFlO0FBQ25CLGlDQUFpQyxHQUVqQyxJQUFJQyxZQUFlO0FBQ25CLElBQUlDLFlBQWU7QUFDbkIseUNBQXlDLEdBRXpDLGlCQUFpQjtBQUNqQjs7Q0FFQyxHQUVELElBQUlDLGVBQWdCO0FBQ3BCLG1FQUFtRSxHQUVuRSxJQUFJQyxXQUFnQjtBQUNwQixrQ0FBa0MsR0FF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T0FBTztJQUNQLHdCQUF3QjtJQUN4QixpRUFBaUU7SUFDakUsa0RBQWtEO0lBQ2xELGtEQUFrRDtJQUNsRCwyRkFBMkY7SUFDM0Ysb0JBQW9CO0lBQ3BCLE9BQU87SUFDUCxLQUFLO0lBQ0wsUUFBUTtJQUVOLE9BQVFFLEVBQUV1QyxRQUFRLEtBQUt2QyxFQUFFa0csV0FBVyxHQUFHO0FBQ3ZDOzs7R0FHQyxHQUNIO0FBRUFDLGdCQUFnQixHQUFJZDtBQUNwQmMsd0JBQXdCLEdBQUdiO0FBQzNCYSx1QkFBdUIsR0FBSVQ7QUFDM0JTLGlCQUFpQixHQUFHRjtBQUNwQkUsaUJBQWlCLEdBQUdWIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2l2aWwtZW5naW5lZXJpbmctcGxhdGZvcm0vLi9ub2RlX21vZHVsZXMvQHBkZi1saWIvc3RhbmRhcmQtZm9udHMvbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvdHJlZXMuanM/Zjg2MCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxuLyogZXNsaW50LWRpc2FibGUgc3BhY2UtdW5hcnktb3BzICovXG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL2NvbW1vbicpO1xuXG4vKiBQdWJsaWMgY29uc3RhbnRzID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuXG4vL3ZhciBaX0ZJTFRFUkVEICAgICAgICAgID0gMTtcbi8vdmFyIFpfSFVGRk1BTl9PTkxZICAgICAgPSAyO1xuLy92YXIgWl9STEUgICAgICAgICAgICAgICA9IDM7XG52YXIgWl9GSVhFRCAgICAgICAgICAgICAgID0gNDtcbi8vdmFyIFpfREVGQVVMVF9TVFJBVEVHWSAgPSAwO1xuXG4vKiBQb3NzaWJsZSB2YWx1ZXMgb2YgdGhlIGRhdGFfdHlwZSBmaWVsZCAodGhvdWdoIHNlZSBpbmZsYXRlKCkpICovXG52YXIgWl9CSU5BUlkgICAgICAgICAgICAgID0gMDtcbnZhciBaX1RFWFQgICAgICAgICAgICAgICAgPSAxO1xuLy92YXIgWl9BU0NJSSAgICAgICAgICAgICA9IDE7IC8vID0gWl9URVhUXG52YXIgWl9VTktOT1dOICAgICAgICAgICAgID0gMjtcblxuLyo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuXG5mdW5jdGlvbiB6ZXJvKGJ1ZikgeyB2YXIgbGVuID0gYnVmLmxlbmd0aDsgd2hpbGUgKC0tbGVuID49IDApIHsgYnVmW2xlbl0gPSAwOyB9IH1cblxuLy8gRnJvbSB6dXRpbC5oXG5cbnZhciBTVE9SRURfQkxPQ0sgPSAwO1xudmFyIFNUQVRJQ19UUkVFUyA9IDE7XG52YXIgRFlOX1RSRUVTICAgID0gMjtcbi8qIFRoZSB0aHJlZSBraW5kcyBvZiBibG9jayB0eXBlICovXG5cbnZhciBNSU5fTUFUQ0ggICAgPSAzO1xudmFyIE1BWF9NQVRDSCAgICA9IDI1ODtcbi8qIFRoZSBtaW5pbXVtIGFuZCBtYXhpbXVtIG1hdGNoIGxlbmd0aHMgKi9cblxuLy8gRnJvbSBkZWZsYXRlLmhcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogSW50ZXJuYWwgY29tcHJlc3Npb24gc3RhdGUuXG4gKi9cblxudmFyIExFTkdUSF9DT0RFUyAgPSAyOTtcbi8qIG51bWJlciBvZiBsZW5ndGggY29kZXMsIG5vdCBjb3VudGluZyB0aGUgc3BlY2lhbCBFTkRfQkxPQ0sgY29kZSAqL1xuXG52YXIgTElURVJBTFMgICAgICA9IDI1Njtcbi8qIG51bWJlciBvZiBsaXRlcmFsIGJ5dGVzIDAuLjI1NSAqL1xuXG52YXIgTF9DT0RFUyAgICAgICA9IExJVEVSQUxTICsgMSArIExFTkdUSF9DT0RFUztcbi8qIG51bWJlciBvZiBMaXRlcmFsIG9yIExlbmd0aCBjb2RlcywgaW5jbHVkaW5nIHRoZSBFTkRfQkxPQ0sgY29kZSAqL1xuXG52YXIgRF9DT0RFUyAgICAgICA9IDMwO1xuLyogbnVtYmVyIG9mIGRpc3RhbmNlIGNvZGVzICovXG5cbnZhciBCTF9DT0RFUyAgICAgID0gMTk7XG4vKiBudW1iZXIgb2YgY29kZXMgdXNlZCB0byB0cmFuc2ZlciB0aGUgYml0IGxlbmd0aHMgKi9cblxudmFyIEhFQVBfU0laRSAgICAgPSAyICogTF9DT0RFUyArIDE7XG4vKiBtYXhpbXVtIGhlYXAgc2l6ZSAqL1xuXG52YXIgTUFYX0JJVFMgICAgICA9IDE1O1xuLyogQWxsIGNvZGVzIG11c3Qgbm90IGV4Y2VlZCBNQVhfQklUUyBiaXRzICovXG5cbnZhciBCdWZfc2l6ZSAgICAgID0gMTY7XG4vKiBzaXplIG9mIGJpdCBidWZmZXIgaW4gYmlfYnVmICovXG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb25zdGFudHNcbiAqL1xuXG52YXIgTUFYX0JMX0JJVFMgPSA3O1xuLyogQml0IGxlbmd0aCBjb2RlcyBtdXN0IG5vdCBleGNlZWQgTUFYX0JMX0JJVFMgYml0cyAqL1xuXG52YXIgRU5EX0JMT0NLICAgPSAyNTY7XG4vKiBlbmQgb2YgYmxvY2sgbGl0ZXJhbCBjb2RlICovXG5cbnZhciBSRVBfM182ICAgICA9IDE2O1xuLyogcmVwZWF0IHByZXZpb3VzIGJpdCBsZW5ndGggMy02IHRpbWVzICgyIGJpdHMgb2YgcmVwZWF0IGNvdW50KSAqL1xuXG52YXIgUkVQWl8zXzEwICAgPSAxNztcbi8qIHJlcGVhdCBhIHplcm8gbGVuZ3RoIDMtMTAgdGltZXMgICgzIGJpdHMgb2YgcmVwZWF0IGNvdW50KSAqL1xuXG52YXIgUkVQWl8xMV8xMzggPSAxODtcbi8qIHJlcGVhdCBhIHplcm8gbGVuZ3RoIDExLTEzOCB0aW1lcyAgKDcgYml0cyBvZiByZXBlYXQgY291bnQpICovXG5cbi8qIGVzbGludC1kaXNhYmxlIGNvbW1hLXNwYWNpbmcsYXJyYXktYnJhY2tldC1zcGFjaW5nICovXG52YXIgZXh0cmFfbGJpdHMgPSAgIC8qIGV4dHJhIGJpdHMgZm9yIGVhY2ggbGVuZ3RoIGNvZGUgKi9cbiAgWzAsMCwwLDAsMCwwLDAsMCwxLDEsMSwxLDIsMiwyLDIsMywzLDMsMyw0LDQsNCw0LDUsNSw1LDUsMF07XG5cbnZhciBleHRyYV9kYml0cyA9ICAgLyogZXh0cmEgYml0cyBmb3IgZWFjaCBkaXN0YW5jZSBjb2RlICovXG4gIFswLDAsMCwwLDEsMSwyLDIsMywzLDQsNCw1LDUsNiw2LDcsNyw4LDgsOSw5LDEwLDEwLDExLDExLDEyLDEyLDEzLDEzXTtcblxudmFyIGV4dHJhX2JsYml0cyA9ICAvKiBleHRyYSBiaXRzIGZvciBlYWNoIGJpdCBsZW5ndGggY29kZSAqL1xuICBbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwyLDMsN107XG5cbnZhciBibF9vcmRlciA9XG4gIFsxNiwxNywxOCwwLDgsNyw5LDYsMTAsNSwxMSw0LDEyLDMsMTMsMiwxNCwxLDE1XTtcbi8qIGVzbGludC1lbmFibGUgY29tbWEtc3BhY2luZyxhcnJheS1icmFja2V0LXNwYWNpbmcgKi9cblxuLyogVGhlIGxlbmd0aHMgb2YgdGhlIGJpdCBsZW5ndGggY29kZXMgYXJlIHNlbnQgaW4gb3JkZXIgb2YgZGVjcmVhc2luZ1xuICogcHJvYmFiaWxpdHksIHRvIGF2b2lkIHRyYW5zbWl0dGluZyB0aGUgbGVuZ3RocyBmb3IgdW51c2VkIGJpdCBsZW5ndGggY29kZXMuXG4gKi9cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBMb2NhbCBkYXRhLiBUaGVzZSBhcmUgaW5pdGlhbGl6ZWQgb25seSBvbmNlLlxuICovXG5cbi8vIFdlIHByZS1maWxsIGFycmF5cyB3aXRoIDAgdG8gYXZvaWQgdW5pbml0aWFsaXplZCBnYXBzXG5cbnZhciBESVNUX0NPREVfTEVOID0gNTEyOyAvKiBzZWUgZGVmaW5pdGlvbiBvZiBhcnJheSBkaXN0X2NvZGUgYmVsb3cgKi9cblxuLy8gISEhISBVc2UgZmxhdCBhcnJheSBpbnN0ZWFkIG9mIHN0cnVjdHVyZSwgRnJlcSA9IGkqMiwgTGVuID0gaSoyKzFcbnZhciBzdGF0aWNfbHRyZWUgID0gbmV3IEFycmF5KChMX0NPREVTICsgMikgKiAyKTtcbnplcm8oc3RhdGljX2x0cmVlKTtcbi8qIFRoZSBzdGF0aWMgbGl0ZXJhbCB0cmVlLiBTaW5jZSB0aGUgYml0IGxlbmd0aHMgYXJlIGltcG9zZWQsIHRoZXJlIGlzIG5vXG4gKiBuZWVkIGZvciB0aGUgTF9DT0RFUyBleHRyYSBjb2RlcyB1c2VkIGR1cmluZyBoZWFwIGNvbnN0cnVjdGlvbi4gSG93ZXZlclxuICogVGhlIGNvZGVzIDI4NiBhbmQgMjg3IGFyZSBuZWVkZWQgdG8gYnVpbGQgYSBjYW5vbmljYWwgdHJlZSAoc2VlIF90cl9pbml0XG4gKiBiZWxvdykuXG4gKi9cblxudmFyIHN0YXRpY19kdHJlZSAgPSBuZXcgQXJyYXkoRF9DT0RFUyAqIDIpO1xuemVybyhzdGF0aWNfZHRyZWUpO1xuLyogVGhlIHN0YXRpYyBkaXN0YW5jZSB0cmVlLiAoQWN0dWFsbHkgYSB0cml2aWFsIHRyZWUgc2luY2UgYWxsIGNvZGVzIHVzZVxuICogNSBiaXRzLilcbiAqL1xuXG52YXIgX2Rpc3RfY29kZSAgICA9IG5ldyBBcnJheShESVNUX0NPREVfTEVOKTtcbnplcm8oX2Rpc3RfY29kZSk7XG4vKiBEaXN0YW5jZSBjb2Rlcy4gVGhlIGZpcnN0IDI1NiB2YWx1ZXMgY29ycmVzcG9uZCB0byB0aGUgZGlzdGFuY2VzXG4gKiAzIC4uIDI1OCwgdGhlIGxhc3QgMjU2IHZhbHVlcyBjb3JyZXNwb25kIHRvIHRoZSB0b3AgOCBiaXRzIG9mXG4gKiB0aGUgMTUgYml0IGRpc3RhbmNlcy5cbiAqL1xuXG52YXIgX2xlbmd0aF9jb2RlICA9IG5ldyBBcnJheShNQVhfTUFUQ0ggLSBNSU5fTUFUQ0ggKyAxKTtcbnplcm8oX2xlbmd0aF9jb2RlKTtcbi8qIGxlbmd0aCBjb2RlIGZvciBlYWNoIG5vcm1hbGl6ZWQgbWF0Y2ggbGVuZ3RoICgwID09IE1JTl9NQVRDSCkgKi9cblxudmFyIGJhc2VfbGVuZ3RoICAgPSBuZXcgQXJyYXkoTEVOR1RIX0NPREVTKTtcbnplcm8oYmFzZV9sZW5ndGgpO1xuLyogRmlyc3Qgbm9ybWFsaXplZCBsZW5ndGggZm9yIGVhY2ggY29kZSAoMCA9IE1JTl9NQVRDSCkgKi9cblxudmFyIGJhc2VfZGlzdCAgICAgPSBuZXcgQXJyYXkoRF9DT0RFUyk7XG56ZXJvKGJhc2VfZGlzdCk7XG4vKiBGaXJzdCBub3JtYWxpemVkIGRpc3RhbmNlIGZvciBlYWNoIGNvZGUgKDAgPSBkaXN0YW5jZSBvZiAxKSAqL1xuXG5cbmZ1bmN0aW9uIFN0YXRpY1RyZWVEZXNjKHN0YXRpY190cmVlLCBleHRyYV9iaXRzLCBleHRyYV9iYXNlLCBlbGVtcywgbWF4X2xlbmd0aCkge1xuXG4gIHRoaXMuc3RhdGljX3RyZWUgID0gc3RhdGljX3RyZWU7ICAvKiBzdGF0aWMgdHJlZSBvciBOVUxMICovXG4gIHRoaXMuZXh0cmFfYml0cyAgID0gZXh0cmFfYml0czsgICAvKiBleHRyYSBiaXRzIGZvciBlYWNoIGNvZGUgb3IgTlVMTCAqL1xuICB0aGlzLmV4dHJhX2Jhc2UgICA9IGV4dHJhX2Jhc2U7ICAgLyogYmFzZSBpbmRleCBmb3IgZXh0cmFfYml0cyAqL1xuICB0aGlzLmVsZW1zICAgICAgICA9IGVsZW1zOyAgICAgICAgLyogbWF4IG51bWJlciBvZiBlbGVtZW50cyBpbiB0aGUgdHJlZSAqL1xuICB0aGlzLm1heF9sZW5ndGggICA9IG1heF9sZW5ndGg7ICAgLyogbWF4IGJpdCBsZW5ndGggZm9yIHRoZSBjb2RlcyAqL1xuXG4gIC8vIHNob3cgaWYgYHN0YXRpY190cmVlYCBoYXMgZGF0YSBvciBkdW1teSAtIG5lZWRlZCBmb3IgbW9ub21vcnBoaWMgb2JqZWN0c1xuICB0aGlzLmhhc19zdHJlZSAgICA9IHN0YXRpY190cmVlICYmIHN0YXRpY190cmVlLmxlbmd0aDtcbn1cblxuXG52YXIgc3RhdGljX2xfZGVzYztcbnZhciBzdGF0aWNfZF9kZXNjO1xudmFyIHN0YXRpY19ibF9kZXNjO1xuXG5cbmZ1bmN0aW9uIFRyZWVEZXNjKGR5bl90cmVlLCBzdGF0X2Rlc2MpIHtcbiAgdGhpcy5keW5fdHJlZSA9IGR5bl90cmVlOyAgICAgLyogdGhlIGR5bmFtaWMgdHJlZSAqL1xuICB0aGlzLm1heF9jb2RlID0gMDsgICAgICAgICAgICAvKiBsYXJnZXN0IGNvZGUgd2l0aCBub24gemVybyBmcmVxdWVuY3kgKi9cbiAgdGhpcy5zdGF0X2Rlc2MgPSBzdGF0X2Rlc2M7ICAgLyogdGhlIGNvcnJlc3BvbmRpbmcgc3RhdGljIHRyZWUgKi9cbn1cblxuXG5cbmZ1bmN0aW9uIGRfY29kZShkaXN0KSB7XG4gIHJldHVybiBkaXN0IDwgMjU2ID8gX2Rpc3RfY29kZVtkaXN0XSA6IF9kaXN0X2NvZGVbMjU2ICsgKGRpc3QgPj4+IDcpXTtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIE91dHB1dCBhIHNob3J0IExTQiBmaXJzdCBvbiB0aGUgc3RyZWFtLlxuICogSU4gYXNzZXJ0aW9uOiB0aGVyZSBpcyBlbm91Z2ggcm9vbSBpbiBwZW5kaW5nQnVmLlxuICovXG5mdW5jdGlvbiBwdXRfc2hvcnQocywgdykge1xuLy8gICAgcHV0X2J5dGUocywgKHVjaCkoKHcpICYgMHhmZikpO1xuLy8gICAgcHV0X2J5dGUocywgKHVjaCkoKHVzaCkodykgPj4gOCkpO1xuICBzLnBlbmRpbmdfYnVmW3MucGVuZGluZysrXSA9ICh3KSAmIDB4ZmY7XG4gIHMucGVuZGluZ19idWZbcy5wZW5kaW5nKytdID0gKHcgPj4+IDgpICYgMHhmZjtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNlbmQgYSB2YWx1ZSBvbiBhIGdpdmVuIG51bWJlciBvZiBiaXRzLlxuICogSU4gYXNzZXJ0aW9uOiBsZW5ndGggPD0gMTYgYW5kIHZhbHVlIGZpdHMgaW4gbGVuZ3RoIGJpdHMuXG4gKi9cbmZ1bmN0aW9uIHNlbmRfYml0cyhzLCB2YWx1ZSwgbGVuZ3RoKSB7XG4gIGlmIChzLmJpX3ZhbGlkID4gKEJ1Zl9zaXplIC0gbGVuZ3RoKSkge1xuICAgIHMuYmlfYnVmIHw9ICh2YWx1ZSA8PCBzLmJpX3ZhbGlkKSAmIDB4ZmZmZjtcbiAgICBwdXRfc2hvcnQocywgcy5iaV9idWYpO1xuICAgIHMuYmlfYnVmID0gdmFsdWUgPj4gKEJ1Zl9zaXplIC0gcy5iaV92YWxpZCk7XG4gICAgcy5iaV92YWxpZCArPSBsZW5ndGggLSBCdWZfc2l6ZTtcbiAgfSBlbHNlIHtcbiAgICBzLmJpX2J1ZiB8PSAodmFsdWUgPDwgcy5iaV92YWxpZCkgJiAweGZmZmY7XG4gICAgcy5iaV92YWxpZCArPSBsZW5ndGg7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBzZW5kX2NvZGUocywgYywgdHJlZSkge1xuICBzZW5kX2JpdHMocywgdHJlZVtjICogMl0vKi5Db2RlKi8sIHRyZWVbYyAqIDIgKyAxXS8qLkxlbiovKTtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFJldmVyc2UgdGhlIGZpcnN0IGxlbiBiaXRzIG9mIGEgY29kZSwgdXNpbmcgc3RyYWlnaHRmb3J3YXJkIGNvZGUgKGEgZmFzdGVyXG4gKiBtZXRob2Qgd291bGQgdXNlIGEgdGFibGUpXG4gKiBJTiBhc3NlcnRpb246IDEgPD0gbGVuIDw9IDE1XG4gKi9cbmZ1bmN0aW9uIGJpX3JldmVyc2UoY29kZSwgbGVuKSB7XG4gIHZhciByZXMgPSAwO1xuICBkbyB7XG4gICAgcmVzIHw9IGNvZGUgJiAxO1xuICAgIGNvZGUgPj4+PSAxO1xuICAgIHJlcyA8PD0gMTtcbiAgfSB3aGlsZSAoLS1sZW4gPiAwKTtcbiAgcmV0dXJuIHJlcyA+Pj4gMTtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEZsdXNoIHRoZSBiaXQgYnVmZmVyLCBrZWVwaW5nIGF0IG1vc3QgNyBiaXRzIGluIGl0LlxuICovXG5mdW5jdGlvbiBiaV9mbHVzaChzKSB7XG4gIGlmIChzLmJpX3ZhbGlkID09PSAxNikge1xuICAgIHB1dF9zaG9ydChzLCBzLmJpX2J1Zik7XG4gICAgcy5iaV9idWYgPSAwO1xuICAgIHMuYmlfdmFsaWQgPSAwO1xuXG4gIH0gZWxzZSBpZiAocy5iaV92YWxpZCA+PSA4KSB7XG4gICAgcy5wZW5kaW5nX2J1ZltzLnBlbmRpbmcrK10gPSBzLmJpX2J1ZiAmIDB4ZmY7XG4gICAgcy5iaV9idWYgPj49IDg7XG4gICAgcy5iaV92YWxpZCAtPSA4O1xuICB9XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb21wdXRlIHRoZSBvcHRpbWFsIGJpdCBsZW5ndGhzIGZvciBhIHRyZWUgYW5kIHVwZGF0ZSB0aGUgdG90YWwgYml0IGxlbmd0aFxuICogZm9yIHRoZSBjdXJyZW50IGJsb2NrLlxuICogSU4gYXNzZXJ0aW9uOiB0aGUgZmllbGRzIGZyZXEgYW5kIGRhZCBhcmUgc2V0LCBoZWFwW2hlYXBfbWF4XSBhbmRcbiAqICAgIGFib3ZlIGFyZSB0aGUgdHJlZSBub2RlcyBzb3J0ZWQgYnkgaW5jcmVhc2luZyBmcmVxdWVuY3kuXG4gKiBPVVQgYXNzZXJ0aW9uczogdGhlIGZpZWxkIGxlbiBpcyBzZXQgdG8gdGhlIG9wdGltYWwgYml0IGxlbmd0aCwgdGhlXG4gKiAgICAgYXJyYXkgYmxfY291bnQgY29udGFpbnMgdGhlIGZyZXF1ZW5jaWVzIGZvciBlYWNoIGJpdCBsZW5ndGguXG4gKiAgICAgVGhlIGxlbmd0aCBvcHRfbGVuIGlzIHVwZGF0ZWQ7IHN0YXRpY19sZW4gaXMgYWxzbyB1cGRhdGVkIGlmIHN0cmVlIGlzXG4gKiAgICAgbm90IG51bGwuXG4gKi9cbmZ1bmN0aW9uIGdlbl9iaXRsZW4ocywgZGVzYylcbi8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XG4vLyAgICB0cmVlX2Rlc2MgKmRlc2M7ICAgIC8qIHRoZSB0cmVlIGRlc2NyaXB0b3IgKi9cbntcbiAgdmFyIHRyZWUgICAgICAgICAgICA9IGRlc2MuZHluX3RyZWU7XG4gIHZhciBtYXhfY29kZSAgICAgICAgPSBkZXNjLm1heF9jb2RlO1xuICB2YXIgc3RyZWUgICAgICAgICAgID0gZGVzYy5zdGF0X2Rlc2Muc3RhdGljX3RyZWU7XG4gIHZhciBoYXNfc3RyZWUgICAgICAgPSBkZXNjLnN0YXRfZGVzYy5oYXNfc3RyZWU7XG4gIHZhciBleHRyYSAgICAgICAgICAgPSBkZXNjLnN0YXRfZGVzYy5leHRyYV9iaXRzO1xuICB2YXIgYmFzZSAgICAgICAgICAgID0gZGVzYy5zdGF0X2Rlc2MuZXh0cmFfYmFzZTtcbiAgdmFyIG1heF9sZW5ndGggICAgICA9IGRlc2Muc3RhdF9kZXNjLm1heF9sZW5ndGg7XG4gIHZhciBoOyAgICAgICAgICAgICAgLyogaGVhcCBpbmRleCAqL1xuICB2YXIgbiwgbTsgICAgICAgICAgIC8qIGl0ZXJhdGUgb3ZlciB0aGUgdHJlZSBlbGVtZW50cyAqL1xuICB2YXIgYml0czsgICAgICAgICAgIC8qIGJpdCBsZW5ndGggKi9cbiAgdmFyIHhiaXRzOyAgICAgICAgICAvKiBleHRyYSBiaXRzICovXG4gIHZhciBmOyAgICAgICAgICAgICAgLyogZnJlcXVlbmN5ICovXG4gIHZhciBvdmVyZmxvdyA9IDA7ICAgLyogbnVtYmVyIG9mIGVsZW1lbnRzIHdpdGggYml0IGxlbmd0aCB0b28gbGFyZ2UgKi9cblxuICBmb3IgKGJpdHMgPSAwOyBiaXRzIDw9IE1BWF9CSVRTOyBiaXRzKyspIHtcbiAgICBzLmJsX2NvdW50W2JpdHNdID0gMDtcbiAgfVxuXG4gIC8qIEluIGEgZmlyc3QgcGFzcywgY29tcHV0ZSB0aGUgb3B0aW1hbCBiaXQgbGVuZ3RocyAod2hpY2ggbWF5XG4gICAqIG92ZXJmbG93IGluIHRoZSBjYXNlIG9mIHRoZSBiaXQgbGVuZ3RoIHRyZWUpLlxuICAgKi9cbiAgdHJlZVtzLmhlYXBbcy5oZWFwX21heF0gKiAyICsgMV0vKi5MZW4qLyA9IDA7IC8qIHJvb3Qgb2YgdGhlIGhlYXAgKi9cblxuICBmb3IgKGggPSBzLmhlYXBfbWF4ICsgMTsgaCA8IEhFQVBfU0laRTsgaCsrKSB7XG4gICAgbiA9IHMuaGVhcFtoXTtcbiAgICBiaXRzID0gdHJlZVt0cmVlW24gKiAyICsgMV0vKi5EYWQqLyAqIDIgKyAxXS8qLkxlbiovICsgMTtcbiAgICBpZiAoYml0cyA+IG1heF9sZW5ndGgpIHtcbiAgICAgIGJpdHMgPSBtYXhfbGVuZ3RoO1xuICAgICAgb3ZlcmZsb3crKztcbiAgICB9XG4gICAgdHJlZVtuICogMiArIDFdLyouTGVuKi8gPSBiaXRzO1xuICAgIC8qIFdlIG92ZXJ3cml0ZSB0cmVlW25dLkRhZCB3aGljaCBpcyBubyBsb25nZXIgbmVlZGVkICovXG5cbiAgICBpZiAobiA+IG1heF9jb2RlKSB7IGNvbnRpbnVlOyB9IC8qIG5vdCBhIGxlYWYgbm9kZSAqL1xuXG4gICAgcy5ibF9jb3VudFtiaXRzXSsrO1xuICAgIHhiaXRzID0gMDtcbiAgICBpZiAobiA+PSBiYXNlKSB7XG4gICAgICB4Yml0cyA9IGV4dHJhW24gLSBiYXNlXTtcbiAgICB9XG4gICAgZiA9IHRyZWVbbiAqIDJdLyouRnJlcSovO1xuICAgIHMub3B0X2xlbiArPSBmICogKGJpdHMgKyB4Yml0cyk7XG4gICAgaWYgKGhhc19zdHJlZSkge1xuICAgICAgcy5zdGF0aWNfbGVuICs9IGYgKiAoc3RyZWVbbiAqIDIgKyAxXS8qLkxlbiovICsgeGJpdHMpO1xuICAgIH1cbiAgfVxuICBpZiAob3ZlcmZsb3cgPT09IDApIHsgcmV0dXJuOyB9XG5cbiAgLy8gVHJhY2UoKHN0ZGVycixcIlxcbmJpdCBsZW5ndGggb3ZlcmZsb3dcXG5cIikpO1xuICAvKiBUaGlzIGhhcHBlbnMgZm9yIGV4YW1wbGUgb24gb2JqMiBhbmQgcGljIG9mIHRoZSBDYWxnYXJ5IGNvcnB1cyAqL1xuXG4gIC8qIEZpbmQgdGhlIGZpcnN0IGJpdCBsZW5ndGggd2hpY2ggY291bGQgaW5jcmVhc2U6ICovXG4gIGRvIHtcbiAgICBiaXRzID0gbWF4X2xlbmd0aCAtIDE7XG4gICAgd2hpbGUgKHMuYmxfY291bnRbYml0c10gPT09IDApIHsgYml0cy0tOyB9XG4gICAgcy5ibF9jb3VudFtiaXRzXS0tOyAgICAgIC8qIG1vdmUgb25lIGxlYWYgZG93biB0aGUgdHJlZSAqL1xuICAgIHMuYmxfY291bnRbYml0cyArIDFdICs9IDI7IC8qIG1vdmUgb25lIG92ZXJmbG93IGl0ZW0gYXMgaXRzIGJyb3RoZXIgKi9cbiAgICBzLmJsX2NvdW50W21heF9sZW5ndGhdLS07XG4gICAgLyogVGhlIGJyb3RoZXIgb2YgdGhlIG92ZXJmbG93IGl0ZW0gYWxzbyBtb3ZlcyBvbmUgc3RlcCB1cCxcbiAgICAgKiBidXQgdGhpcyBkb2VzIG5vdCBhZmZlY3QgYmxfY291bnRbbWF4X2xlbmd0aF1cbiAgICAgKi9cbiAgICBvdmVyZmxvdyAtPSAyO1xuICB9IHdoaWxlIChvdmVyZmxvdyA+IDApO1xuXG4gIC8qIE5vdyByZWNvbXB1dGUgYWxsIGJpdCBsZW5ndGhzLCBzY2FubmluZyBpbiBpbmNyZWFzaW5nIGZyZXF1ZW5jeS5cbiAgICogaCBpcyBzdGlsbCBlcXVhbCB0byBIRUFQX1NJWkUuIChJdCBpcyBzaW1wbGVyIHRvIHJlY29uc3RydWN0IGFsbFxuICAgKiBsZW5ndGhzIGluc3RlYWQgb2YgZml4aW5nIG9ubHkgdGhlIHdyb25nIG9uZXMuIFRoaXMgaWRlYSBpcyB0YWtlblxuICAgKiBmcm9tICdhcicgd3JpdHRlbiBieSBIYXJ1aGlrbyBPa3VtdXJhLilcbiAgICovXG4gIGZvciAoYml0cyA9IG1heF9sZW5ndGg7IGJpdHMgIT09IDA7IGJpdHMtLSkge1xuICAgIG4gPSBzLmJsX2NvdW50W2JpdHNdO1xuICAgIHdoaWxlIChuICE9PSAwKSB7XG4gICAgICBtID0gcy5oZWFwWy0taF07XG4gICAgICBpZiAobSA+IG1heF9jb2RlKSB7IGNvbnRpbnVlOyB9XG4gICAgICBpZiAodHJlZVttICogMiArIDFdLyouTGVuKi8gIT09IGJpdHMpIHtcbiAgICAgICAgLy8gVHJhY2UoKHN0ZGVycixcImNvZGUgJWQgYml0cyAlZC0+JWRcXG5cIiwgbSwgdHJlZVttXS5MZW4sIGJpdHMpKTtcbiAgICAgICAgcy5vcHRfbGVuICs9IChiaXRzIC0gdHJlZVttICogMiArIDFdLyouTGVuKi8pICogdHJlZVttICogMl0vKi5GcmVxKi87XG4gICAgICAgIHRyZWVbbSAqIDIgKyAxXS8qLkxlbiovID0gYml0cztcbiAgICAgIH1cbiAgICAgIG4tLTtcbiAgICB9XG4gIH1cbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEdlbmVyYXRlIHRoZSBjb2RlcyBmb3IgYSBnaXZlbiB0cmVlIGFuZCBiaXQgY291bnRzICh3aGljaCBuZWVkIG5vdCBiZVxuICogb3B0aW1hbCkuXG4gKiBJTiBhc3NlcnRpb246IHRoZSBhcnJheSBibF9jb3VudCBjb250YWlucyB0aGUgYml0IGxlbmd0aCBzdGF0aXN0aWNzIGZvclxuICogdGhlIGdpdmVuIHRyZWUgYW5kIHRoZSBmaWVsZCBsZW4gaXMgc2V0IGZvciBhbGwgdHJlZSBlbGVtZW50cy5cbiAqIE9VVCBhc3NlcnRpb246IHRoZSBmaWVsZCBjb2RlIGlzIHNldCBmb3IgYWxsIHRyZWUgZWxlbWVudHMgb2Ygbm9uXG4gKiAgICAgemVybyBjb2RlIGxlbmd0aC5cbiAqL1xuZnVuY3Rpb24gZ2VuX2NvZGVzKHRyZWUsIG1heF9jb2RlLCBibF9jb3VudClcbi8vICAgIGN0X2RhdGEgKnRyZWU7ICAgICAgICAgICAgIC8qIHRoZSB0cmVlIHRvIGRlY29yYXRlICovXG4vLyAgICBpbnQgbWF4X2NvZGU7ICAgICAgICAgICAgICAvKiBsYXJnZXN0IGNvZGUgd2l0aCBub24gemVybyBmcmVxdWVuY3kgKi9cbi8vICAgIHVzaGYgKmJsX2NvdW50OyAgICAgICAgICAgIC8qIG51bWJlciBvZiBjb2RlcyBhdCBlYWNoIGJpdCBsZW5ndGggKi9cbntcbiAgdmFyIG5leHRfY29kZSA9IG5ldyBBcnJheShNQVhfQklUUyArIDEpOyAvKiBuZXh0IGNvZGUgdmFsdWUgZm9yIGVhY2ggYml0IGxlbmd0aCAqL1xuICB2YXIgY29kZSA9IDA7ICAgICAgICAgICAgICAvKiBydW5uaW5nIGNvZGUgdmFsdWUgKi9cbiAgdmFyIGJpdHM7ICAgICAgICAgICAgICAgICAgLyogYml0IGluZGV4ICovXG4gIHZhciBuOyAgICAgICAgICAgICAgICAgICAgIC8qIGNvZGUgaW5kZXggKi9cblxuICAvKiBUaGUgZGlzdHJpYnV0aW9uIGNvdW50cyBhcmUgZmlyc3QgdXNlZCB0byBnZW5lcmF0ZSB0aGUgY29kZSB2YWx1ZXNcbiAgICogd2l0aG91dCBiaXQgcmV2ZXJzYWwuXG4gICAqL1xuICBmb3IgKGJpdHMgPSAxOyBiaXRzIDw9IE1BWF9CSVRTOyBiaXRzKyspIHtcbiAgICBuZXh0X2NvZGVbYml0c10gPSBjb2RlID0gKGNvZGUgKyBibF9jb3VudFtiaXRzIC0gMV0pIDw8IDE7XG4gIH1cbiAgLyogQ2hlY2sgdGhhdCB0aGUgYml0IGNvdW50cyBpbiBibF9jb3VudCBhcmUgY29uc2lzdGVudC4gVGhlIGxhc3QgY29kZVxuICAgKiBtdXN0IGJlIGFsbCBvbmVzLlxuICAgKi9cbiAgLy9Bc3NlcnQgKGNvZGUgKyBibF9jb3VudFtNQVhfQklUU10tMSA9PSAoMTw8TUFYX0JJVFMpLTEsXG4gIC8vICAgICAgICBcImluY29uc2lzdGVudCBiaXQgY291bnRzXCIpO1xuICAvL1RyYWNldigoc3RkZXJyLFwiXFxuZ2VuX2NvZGVzOiBtYXhfY29kZSAlZCBcIiwgbWF4X2NvZGUpKTtcblxuICBmb3IgKG4gPSAwOyAgbiA8PSBtYXhfY29kZTsgbisrKSB7XG4gICAgdmFyIGxlbiA9IHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovO1xuICAgIGlmIChsZW4gPT09IDApIHsgY29udGludWU7IH1cbiAgICAvKiBOb3cgcmV2ZXJzZSB0aGUgYml0cyAqL1xuICAgIHRyZWVbbiAqIDJdLyouQ29kZSovID0gYmlfcmV2ZXJzZShuZXh0X2NvZGVbbGVuXSsrLCBsZW4pO1xuXG4gICAgLy9UcmFjZWN2KHRyZWUgIT0gc3RhdGljX2x0cmVlLCAoc3RkZXJyLFwiXFxubiAlM2QgJWMgbCAlMmQgYyAlNHggKCV4KSBcIixcbiAgICAvLyAgICAgbiwgKGlzZ3JhcGgobikgPyBuIDogJyAnKSwgbGVuLCB0cmVlW25dLkNvZGUsIG5leHRfY29kZVtsZW5dLTEpKTtcbiAgfVxufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogSW5pdGlhbGl6ZSB0aGUgdmFyaW91cyAnY29uc3RhbnQnIHRhYmxlcy5cbiAqL1xuZnVuY3Rpb24gdHJfc3RhdGljX2luaXQoKSB7XG4gIHZhciBuOyAgICAgICAgLyogaXRlcmF0ZXMgb3ZlciB0cmVlIGVsZW1lbnRzICovXG4gIHZhciBiaXRzOyAgICAgLyogYml0IGNvdW50ZXIgKi9cbiAgdmFyIGxlbmd0aDsgICAvKiBsZW5ndGggdmFsdWUgKi9cbiAgdmFyIGNvZGU7ICAgICAvKiBjb2RlIHZhbHVlICovXG4gIHZhciBkaXN0OyAgICAgLyogZGlzdGFuY2UgaW5kZXggKi9cbiAgdmFyIGJsX2NvdW50ID0gbmV3IEFycmF5KE1BWF9CSVRTICsgMSk7XG4gIC8qIG51bWJlciBvZiBjb2RlcyBhdCBlYWNoIGJpdCBsZW5ndGggZm9yIGFuIG9wdGltYWwgdHJlZSAqL1xuXG4gIC8vIGRvIGNoZWNrIGluIF90cl9pbml0KClcbiAgLy9pZiAoc3RhdGljX2luaXRfZG9uZSkgcmV0dXJuO1xuXG4gIC8qIEZvciBzb21lIGVtYmVkZGVkIHRhcmdldHMsIGdsb2JhbCB2YXJpYWJsZXMgYXJlIG5vdCBpbml0aWFsaXplZDogKi9cbi8qI2lmZGVmIE5PX0lOSVRfR0xPQkFMX1BPSU5URVJTXG4gIHN0YXRpY19sX2Rlc2Muc3RhdGljX3RyZWUgPSBzdGF0aWNfbHRyZWU7XG4gIHN0YXRpY19sX2Rlc2MuZXh0cmFfYml0cyA9IGV4dHJhX2xiaXRzO1xuICBzdGF0aWNfZF9kZXNjLnN0YXRpY190cmVlID0gc3RhdGljX2R0cmVlO1xuICBzdGF0aWNfZF9kZXNjLmV4dHJhX2JpdHMgPSBleHRyYV9kYml0cztcbiAgc3RhdGljX2JsX2Rlc2MuZXh0cmFfYml0cyA9IGV4dHJhX2JsYml0cztcbiNlbmRpZiovXG5cbiAgLyogSW5pdGlhbGl6ZSB0aGUgbWFwcGluZyBsZW5ndGggKDAuLjI1NSkgLT4gbGVuZ3RoIGNvZGUgKDAuLjI4KSAqL1xuICBsZW5ndGggPSAwO1xuICBmb3IgKGNvZGUgPSAwOyBjb2RlIDwgTEVOR1RIX0NPREVTIC0gMTsgY29kZSsrKSB7XG4gICAgYmFzZV9sZW5ndGhbY29kZV0gPSBsZW5ndGg7XG4gICAgZm9yIChuID0gMDsgbiA8ICgxIDw8IGV4dHJhX2xiaXRzW2NvZGVdKTsgbisrKSB7XG4gICAgICBfbGVuZ3RoX2NvZGVbbGVuZ3RoKytdID0gY29kZTtcbiAgICB9XG4gIH1cbiAgLy9Bc3NlcnQgKGxlbmd0aCA9PSAyNTYsIFwidHJfc3RhdGljX2luaXQ6IGxlbmd0aCAhPSAyNTZcIik7XG4gIC8qIE5vdGUgdGhhdCB0aGUgbGVuZ3RoIDI1NSAobWF0Y2ggbGVuZ3RoIDI1OCkgY2FuIGJlIHJlcHJlc2VudGVkXG4gICAqIGluIHR3byBkaWZmZXJlbnQgd2F5czogY29kZSAyODQgKyA1IGJpdHMgb3IgY29kZSAyODUsIHNvIHdlXG4gICAqIG92ZXJ3cml0ZSBsZW5ndGhfY29kZVsyNTVdIHRvIHVzZSB0aGUgYmVzdCBlbmNvZGluZzpcbiAgICovXG4gIF9sZW5ndGhfY29kZVtsZW5ndGggLSAxXSA9IGNvZGU7XG5cbiAgLyogSW5pdGlhbGl6ZSB0aGUgbWFwcGluZyBkaXN0ICgwLi4zMkspIC0+IGRpc3QgY29kZSAoMC4uMjkpICovXG4gIGRpc3QgPSAwO1xuICBmb3IgKGNvZGUgPSAwOyBjb2RlIDwgMTY7IGNvZGUrKykge1xuICAgIGJhc2VfZGlzdFtjb2RlXSA9IGRpc3Q7XG4gICAgZm9yIChuID0gMDsgbiA8ICgxIDw8IGV4dHJhX2RiaXRzW2NvZGVdKTsgbisrKSB7XG4gICAgICBfZGlzdF9jb2RlW2Rpc3QrK10gPSBjb2RlO1xuICAgIH1cbiAgfVxuICAvL0Fzc2VydCAoZGlzdCA9PSAyNTYsIFwidHJfc3RhdGljX2luaXQ6IGRpc3QgIT0gMjU2XCIpO1xuICBkaXN0ID4+PSA3OyAvKiBmcm9tIG5vdyBvbiwgYWxsIGRpc3RhbmNlcyBhcmUgZGl2aWRlZCBieSAxMjggKi9cbiAgZm9yICg7IGNvZGUgPCBEX0NPREVTOyBjb2RlKyspIHtcbiAgICBiYXNlX2Rpc3RbY29kZV0gPSBkaXN0IDw8IDc7XG4gICAgZm9yIChuID0gMDsgbiA8ICgxIDw8IChleHRyYV9kYml0c1tjb2RlXSAtIDcpKTsgbisrKSB7XG4gICAgICBfZGlzdF9jb2RlWzI1NiArIGRpc3QrK10gPSBjb2RlO1xuICAgIH1cbiAgfVxuICAvL0Fzc2VydCAoZGlzdCA9PSAyNTYsIFwidHJfc3RhdGljX2luaXQ6IDI1NitkaXN0ICE9IDUxMlwiKTtcblxuICAvKiBDb25zdHJ1Y3QgdGhlIGNvZGVzIG9mIHRoZSBzdGF0aWMgbGl0ZXJhbCB0cmVlICovXG4gIGZvciAoYml0cyA9IDA7IGJpdHMgPD0gTUFYX0JJVFM7IGJpdHMrKykge1xuICAgIGJsX2NvdW50W2JpdHNdID0gMDtcbiAgfVxuXG4gIG4gPSAwO1xuICB3aGlsZSAobiA8PSAxNDMpIHtcbiAgICBzdGF0aWNfbHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovID0gODtcbiAgICBuKys7XG4gICAgYmxfY291bnRbOF0rKztcbiAgfVxuICB3aGlsZSAobiA8PSAyNTUpIHtcbiAgICBzdGF0aWNfbHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovID0gOTtcbiAgICBuKys7XG4gICAgYmxfY291bnRbOV0rKztcbiAgfVxuICB3aGlsZSAobiA8PSAyNzkpIHtcbiAgICBzdGF0aWNfbHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovID0gNztcbiAgICBuKys7XG4gICAgYmxfY291bnRbN10rKztcbiAgfVxuICB3aGlsZSAobiA8PSAyODcpIHtcbiAgICBzdGF0aWNfbHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovID0gODtcbiAgICBuKys7XG4gICAgYmxfY291bnRbOF0rKztcbiAgfVxuICAvKiBDb2RlcyAyODYgYW5kIDI4NyBkbyBub3QgZXhpc3QsIGJ1dCB3ZSBtdXN0IGluY2x1ZGUgdGhlbSBpbiB0aGVcbiAgICogdHJlZSBjb25zdHJ1Y3Rpb24gdG8gZ2V0IGEgY2Fub25pY2FsIEh1ZmZtYW4gdHJlZSAobG9uZ2VzdCBjb2RlXG4gICAqIGFsbCBvbmVzKVxuICAgKi9cbiAgZ2VuX2NvZGVzKHN0YXRpY19sdHJlZSwgTF9DT0RFUyArIDEsIGJsX2NvdW50KTtcblxuICAvKiBUaGUgc3RhdGljIGRpc3RhbmNlIHRyZWUgaXMgdHJpdmlhbDogKi9cbiAgZm9yIChuID0gMDsgbiA8IERfQ09ERVM7IG4rKykge1xuICAgIHN0YXRpY19kdHJlZVtuICogMiArIDFdLyouTGVuKi8gPSA1O1xuICAgIHN0YXRpY19kdHJlZVtuICogMl0vKi5Db2RlKi8gPSBiaV9yZXZlcnNlKG4sIDUpO1xuICB9XG5cbiAgLy8gTm93IGRhdGEgcmVhZHkgYW5kIHdlIGNhbiBpbml0IHN0YXRpYyB0cmVlc1xuICBzdGF0aWNfbF9kZXNjID0gbmV3IFN0YXRpY1RyZWVEZXNjKHN0YXRpY19sdHJlZSwgZXh0cmFfbGJpdHMsIExJVEVSQUxTICsgMSwgTF9DT0RFUywgTUFYX0JJVFMpO1xuICBzdGF0aWNfZF9kZXNjID0gbmV3IFN0YXRpY1RyZWVEZXNjKHN0YXRpY19kdHJlZSwgZXh0cmFfZGJpdHMsIDAsICAgICAgICAgIERfQ09ERVMsIE1BWF9CSVRTKTtcbiAgc3RhdGljX2JsX2Rlc2MgPSBuZXcgU3RhdGljVHJlZURlc2MobmV3IEFycmF5KDApLCBleHRyYV9ibGJpdHMsIDAsICAgICAgICAgQkxfQ09ERVMsIE1BWF9CTF9CSVRTKTtcblxuICAvL3N0YXRpY19pbml0X2RvbmUgPSB0cnVlO1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogSW5pdGlhbGl6ZSBhIG5ldyBibG9jay5cbiAqL1xuZnVuY3Rpb24gaW5pdF9ibG9jayhzKSB7XG4gIHZhciBuOyAvKiBpdGVyYXRlcyBvdmVyIHRyZWUgZWxlbWVudHMgKi9cblxuICAvKiBJbml0aWFsaXplIHRoZSB0cmVlcy4gKi9cbiAgZm9yIChuID0gMDsgbiA8IExfQ09ERVM7ICBuKyspIHsgcy5keW5fbHRyZWVbbiAqIDJdLyouRnJlcSovID0gMDsgfVxuICBmb3IgKG4gPSAwOyBuIDwgRF9DT0RFUzsgIG4rKykgeyBzLmR5bl9kdHJlZVtuICogMl0vKi5GcmVxKi8gPSAwOyB9XG4gIGZvciAobiA9IDA7IG4gPCBCTF9DT0RFUzsgbisrKSB7IHMuYmxfdHJlZVtuICogMl0vKi5GcmVxKi8gPSAwOyB9XG5cbiAgcy5keW5fbHRyZWVbRU5EX0JMT0NLICogMl0vKi5GcmVxKi8gPSAxO1xuICBzLm9wdF9sZW4gPSBzLnN0YXRpY19sZW4gPSAwO1xuICBzLmxhc3RfbGl0ID0gcy5tYXRjaGVzID0gMDtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEZsdXNoIHRoZSBiaXQgYnVmZmVyIGFuZCBhbGlnbiB0aGUgb3V0cHV0IG9uIGEgYnl0ZSBib3VuZGFyeVxuICovXG5mdW5jdGlvbiBiaV93aW5kdXAocylcbntcbiAgaWYgKHMuYmlfdmFsaWQgPiA4KSB7XG4gICAgcHV0X3Nob3J0KHMsIHMuYmlfYnVmKTtcbiAgfSBlbHNlIGlmIChzLmJpX3ZhbGlkID4gMCkge1xuICAgIC8vcHV0X2J5dGUocywgKEJ5dGUpcy0+YmlfYnVmKTtcbiAgICBzLnBlbmRpbmdfYnVmW3MucGVuZGluZysrXSA9IHMuYmlfYnVmO1xuICB9XG4gIHMuYmlfYnVmID0gMDtcbiAgcy5iaV92YWxpZCA9IDA7XG59XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weSBhIHN0b3JlZCBibG9jaywgc3RvcmluZyBmaXJzdCB0aGUgbGVuZ3RoIGFuZCBpdHNcbiAqIG9uZSdzIGNvbXBsZW1lbnQgaWYgcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiBjb3B5X2Jsb2NrKHMsIGJ1ZiwgbGVuLCBoZWFkZXIpXG4vL0RlZmxhdGVTdGF0ZSAqcztcbi8vY2hhcmYgICAgKmJ1ZjsgICAgLyogdGhlIGlucHV0IGRhdGEgKi9cbi8vdW5zaWduZWQgbGVuOyAgICAgLyogaXRzIGxlbmd0aCAqL1xuLy9pbnQgICAgICBoZWFkZXI7ICAvKiB0cnVlIGlmIGJsb2NrIGhlYWRlciBtdXN0IGJlIHdyaXR0ZW4gKi9cbntcbiAgYmlfd2luZHVwKHMpOyAgICAgICAgLyogYWxpZ24gb24gYnl0ZSBib3VuZGFyeSAqL1xuXG4gIGlmIChoZWFkZXIpIHtcbiAgICBwdXRfc2hvcnQocywgbGVuKTtcbiAgICBwdXRfc2hvcnQocywgfmxlbik7XG4gIH1cbi8vICB3aGlsZSAobGVuLS0pIHtcbi8vICAgIHB1dF9ieXRlKHMsICpidWYrKyk7XG4vLyAgfVxuICB1dGlscy5hcnJheVNldChzLnBlbmRpbmdfYnVmLCBzLndpbmRvdywgYnVmLCBsZW4sIHMucGVuZGluZyk7XG4gIHMucGVuZGluZyArPSBsZW47XG59XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29tcGFyZXMgdG8gc3VidHJlZXMsIHVzaW5nIHRoZSB0cmVlIGRlcHRoIGFzIHRpZSBicmVha2VyIHdoZW5cbiAqIHRoZSBzdWJ0cmVlcyBoYXZlIGVxdWFsIGZyZXF1ZW5jeS4gVGhpcyBtaW5pbWl6ZXMgdGhlIHdvcnN0IGNhc2UgbGVuZ3RoLlxuICovXG5mdW5jdGlvbiBzbWFsbGVyKHRyZWUsIG4sIG0sIGRlcHRoKSB7XG4gIHZhciBfbjIgPSBuICogMjtcbiAgdmFyIF9tMiA9IG0gKiAyO1xuICByZXR1cm4gKHRyZWVbX24yXS8qLkZyZXEqLyA8IHRyZWVbX20yXS8qLkZyZXEqLyB8fFxuICAgICAgICAgKHRyZWVbX24yXS8qLkZyZXEqLyA9PT0gdHJlZVtfbTJdLyouRnJlcSovICYmIGRlcHRoW25dIDw9IGRlcHRoW21dKSk7XG59XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogUmVzdG9yZSB0aGUgaGVhcCBwcm9wZXJ0eSBieSBtb3ZpbmcgZG93biB0aGUgdHJlZSBzdGFydGluZyBhdCBub2RlIGssXG4gKiBleGNoYW5naW5nIGEgbm9kZSB3aXRoIHRoZSBzbWFsbGVzdCBvZiBpdHMgdHdvIHNvbnMgaWYgbmVjZXNzYXJ5LCBzdG9wcGluZ1xuICogd2hlbiB0aGUgaGVhcCBwcm9wZXJ0eSBpcyByZS1lc3RhYmxpc2hlZCAoZWFjaCBmYXRoZXIgc21hbGxlciB0aGFuIGl0c1xuICogdHdvIHNvbnMpLlxuICovXG5mdW5jdGlvbiBwcWRvd25oZWFwKHMsIHRyZWUsIGspXG4vLyAgICBkZWZsYXRlX3N0YXRlICpzO1xuLy8gICAgY3RfZGF0YSAqdHJlZTsgIC8qIHRoZSB0cmVlIHRvIHJlc3RvcmUgKi9cbi8vICAgIGludCBrOyAgICAgICAgICAgICAgIC8qIG5vZGUgdG8gbW92ZSBkb3duICovXG57XG4gIHZhciB2ID0gcy5oZWFwW2tdO1xuICB2YXIgaiA9IGsgPDwgMTsgIC8qIGxlZnQgc29uIG9mIGsgKi9cbiAgd2hpbGUgKGogPD0gcy5oZWFwX2xlbikge1xuICAgIC8qIFNldCBqIHRvIHRoZSBzbWFsbGVzdCBvZiB0aGUgdHdvIHNvbnM6ICovXG4gICAgaWYgKGogPCBzLmhlYXBfbGVuICYmXG4gICAgICBzbWFsbGVyKHRyZWUsIHMuaGVhcFtqICsgMV0sIHMuaGVhcFtqXSwgcy5kZXB0aCkpIHtcbiAgICAgIGorKztcbiAgICB9XG4gICAgLyogRXhpdCBpZiB2IGlzIHNtYWxsZXIgdGhhbiBib3RoIHNvbnMgKi9cbiAgICBpZiAoc21hbGxlcih0cmVlLCB2LCBzLmhlYXBbal0sIHMuZGVwdGgpKSB7IGJyZWFrOyB9XG5cbiAgICAvKiBFeGNoYW5nZSB2IHdpdGggdGhlIHNtYWxsZXN0IHNvbiAqL1xuICAgIHMuaGVhcFtrXSA9IHMuaGVhcFtqXTtcbiAgICBrID0gajtcblxuICAgIC8qIEFuZCBjb250aW51ZSBkb3duIHRoZSB0cmVlLCBzZXR0aW5nIGogdG8gdGhlIGxlZnQgc29uIG9mIGsgKi9cbiAgICBqIDw8PSAxO1xuICB9XG4gIHMuaGVhcFtrXSA9IHY7XG59XG5cblxuLy8gaW5saW5lZCBtYW51YWxseVxuLy8gdmFyIFNNQUxMRVNUID0gMTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBTZW5kIHRoZSBibG9jayBkYXRhIGNvbXByZXNzZWQgdXNpbmcgdGhlIGdpdmVuIEh1ZmZtYW4gdHJlZXNcbiAqL1xuZnVuY3Rpb24gY29tcHJlc3NfYmxvY2socywgbHRyZWUsIGR0cmVlKVxuLy8gICAgZGVmbGF0ZV9zdGF0ZSAqcztcbi8vICAgIGNvbnN0IGN0X2RhdGEgKmx0cmVlOyAvKiBsaXRlcmFsIHRyZWUgKi9cbi8vICAgIGNvbnN0IGN0X2RhdGEgKmR0cmVlOyAvKiBkaXN0YW5jZSB0cmVlICovXG57XG4gIHZhciBkaXN0OyAgICAgICAgICAgLyogZGlzdGFuY2Ugb2YgbWF0Y2hlZCBzdHJpbmcgKi9cbiAgdmFyIGxjOyAgICAgICAgICAgICAvKiBtYXRjaCBsZW5ndGggb3IgdW5tYXRjaGVkIGNoYXIgKGlmIGRpc3QgPT0gMCkgKi9cbiAgdmFyIGx4ID0gMDsgICAgICAgICAvKiBydW5uaW5nIGluZGV4IGluIGxfYnVmICovXG4gIHZhciBjb2RlOyAgICAgICAgICAgLyogdGhlIGNvZGUgdG8gc2VuZCAqL1xuICB2YXIgZXh0cmE7ICAgICAgICAgIC8qIG51bWJlciBvZiBleHRyYSBiaXRzIHRvIHNlbmQgKi9cblxuICBpZiAocy5sYXN0X2xpdCAhPT0gMCkge1xuICAgIGRvIHtcbiAgICAgIGRpc3QgPSAocy5wZW5kaW5nX2J1ZltzLmRfYnVmICsgbHggKiAyXSA8PCA4KSB8IChzLnBlbmRpbmdfYnVmW3MuZF9idWYgKyBseCAqIDIgKyAxXSk7XG4gICAgICBsYyA9IHMucGVuZGluZ19idWZbcy5sX2J1ZiArIGx4XTtcbiAgICAgIGx4Kys7XG5cbiAgICAgIGlmIChkaXN0ID09PSAwKSB7XG4gICAgICAgIHNlbmRfY29kZShzLCBsYywgbHRyZWUpOyAvKiBzZW5kIGEgbGl0ZXJhbCBieXRlICovXG4gICAgICAgIC8vVHJhY2Vjdihpc2dyYXBoKGxjKSwgKHN0ZGVycixcIiAnJWMnIFwiLCBsYykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogSGVyZSwgbGMgaXMgdGhlIG1hdGNoIGxlbmd0aCAtIE1JTl9NQVRDSCAqL1xuICAgICAgICBjb2RlID0gX2xlbmd0aF9jb2RlW2xjXTtcbiAgICAgICAgc2VuZF9jb2RlKHMsIGNvZGUgKyBMSVRFUkFMUyArIDEsIGx0cmVlKTsgLyogc2VuZCB0aGUgbGVuZ3RoIGNvZGUgKi9cbiAgICAgICAgZXh0cmEgPSBleHRyYV9sYml0c1tjb2RlXTtcbiAgICAgICAgaWYgKGV4dHJhICE9PSAwKSB7XG4gICAgICAgICAgbGMgLT0gYmFzZV9sZW5ndGhbY29kZV07XG4gICAgICAgICAgc2VuZF9iaXRzKHMsIGxjLCBleHRyYSk7ICAgICAgIC8qIHNlbmQgdGhlIGV4dHJhIGxlbmd0aCBiaXRzICovXG4gICAgICAgIH1cbiAgICAgICAgZGlzdC0tOyAvKiBkaXN0IGlzIG5vdyB0aGUgbWF0Y2ggZGlzdGFuY2UgLSAxICovXG4gICAgICAgIGNvZGUgPSBkX2NvZGUoZGlzdCk7XG4gICAgICAgIC8vQXNzZXJ0IChjb2RlIDwgRF9DT0RFUywgXCJiYWQgZF9jb2RlXCIpO1xuXG4gICAgICAgIHNlbmRfY29kZShzLCBjb2RlLCBkdHJlZSk7ICAgICAgIC8qIHNlbmQgdGhlIGRpc3RhbmNlIGNvZGUgKi9cbiAgICAgICAgZXh0cmEgPSBleHRyYV9kYml0c1tjb2RlXTtcbiAgICAgICAgaWYgKGV4dHJhICE9PSAwKSB7XG4gICAgICAgICAgZGlzdCAtPSBiYXNlX2Rpc3RbY29kZV07XG4gICAgICAgICAgc2VuZF9iaXRzKHMsIGRpc3QsIGV4dHJhKTsgICAvKiBzZW5kIHRoZSBleHRyYSBkaXN0YW5jZSBiaXRzICovXG4gICAgICAgIH1cbiAgICAgIH0gLyogbGl0ZXJhbCBvciBtYXRjaCBwYWlyID8gKi9cblxuICAgICAgLyogQ2hlY2sgdGhhdCB0aGUgb3ZlcmxheSBiZXR3ZWVuIHBlbmRpbmdfYnVmIGFuZCBkX2J1ZitsX2J1ZiBpcyBvazogKi9cbiAgICAgIC8vQXNzZXJ0KCh1SW50KShzLT5wZW5kaW5nKSA8IHMtPmxpdF9idWZzaXplICsgMipseCxcbiAgICAgIC8vICAgICAgIFwicGVuZGluZ0J1ZiBvdmVyZmxvd1wiKTtcblxuICAgIH0gd2hpbGUgKGx4IDwgcy5sYXN0X2xpdCk7XG4gIH1cblxuICBzZW5kX2NvZGUocywgRU5EX0JMT0NLLCBsdHJlZSk7XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb25zdHJ1Y3Qgb25lIEh1ZmZtYW4gdHJlZSBhbmQgYXNzaWducyB0aGUgY29kZSBiaXQgc3RyaW5ncyBhbmQgbGVuZ3Rocy5cbiAqIFVwZGF0ZSB0aGUgdG90YWwgYml0IGxlbmd0aCBmb3IgdGhlIGN1cnJlbnQgYmxvY2suXG4gKiBJTiBhc3NlcnRpb246IHRoZSBmaWVsZCBmcmVxIGlzIHNldCBmb3IgYWxsIHRyZWUgZWxlbWVudHMuXG4gKiBPVVQgYXNzZXJ0aW9uczogdGhlIGZpZWxkcyBsZW4gYW5kIGNvZGUgYXJlIHNldCB0byB0aGUgb3B0aW1hbCBiaXQgbGVuZ3RoXG4gKiAgICAgYW5kIGNvcnJlc3BvbmRpbmcgY29kZS4gVGhlIGxlbmd0aCBvcHRfbGVuIGlzIHVwZGF0ZWQ7IHN0YXRpY19sZW4gaXNcbiAqICAgICBhbHNvIHVwZGF0ZWQgaWYgc3RyZWUgaXMgbm90IG51bGwuIFRoZSBmaWVsZCBtYXhfY29kZSBpcyBzZXQuXG4gKi9cbmZ1bmN0aW9uIGJ1aWxkX3RyZWUocywgZGVzYylcbi8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XG4vLyAgICB0cmVlX2Rlc2MgKmRlc2M7IC8qIHRoZSB0cmVlIGRlc2NyaXB0b3IgKi9cbntcbiAgdmFyIHRyZWUgICAgID0gZGVzYy5keW5fdHJlZTtcbiAgdmFyIHN0cmVlICAgID0gZGVzYy5zdGF0X2Rlc2Muc3RhdGljX3RyZWU7XG4gIHZhciBoYXNfc3RyZWUgPSBkZXNjLnN0YXRfZGVzYy5oYXNfc3RyZWU7XG4gIHZhciBlbGVtcyAgICA9IGRlc2Muc3RhdF9kZXNjLmVsZW1zO1xuICB2YXIgbiwgbTsgICAgICAgICAgLyogaXRlcmF0ZSBvdmVyIGhlYXAgZWxlbWVudHMgKi9cbiAgdmFyIG1heF9jb2RlID0gLTE7IC8qIGxhcmdlc3QgY29kZSB3aXRoIG5vbiB6ZXJvIGZyZXF1ZW5jeSAqL1xuICB2YXIgbm9kZTsgICAgICAgICAgLyogbmV3IG5vZGUgYmVpbmcgY3JlYXRlZCAqL1xuXG4gIC8qIENvbnN0cnVjdCB0aGUgaW5pdGlhbCBoZWFwLCB3aXRoIGxlYXN0IGZyZXF1ZW50IGVsZW1lbnQgaW5cbiAgICogaGVhcFtTTUFMTEVTVF0uIFRoZSBzb25zIG9mIGhlYXBbbl0gYXJlIGhlYXBbMipuXSBhbmQgaGVhcFsyKm4rMV0uXG4gICAqIGhlYXBbMF0gaXMgbm90IHVzZWQuXG4gICAqL1xuICBzLmhlYXBfbGVuID0gMDtcbiAgcy5oZWFwX21heCA9IEhFQVBfU0laRTtcblxuICBmb3IgKG4gPSAwOyBuIDwgZWxlbXM7IG4rKykge1xuICAgIGlmICh0cmVlW24gKiAyXS8qLkZyZXEqLyAhPT0gMCkge1xuICAgICAgcy5oZWFwWysrcy5oZWFwX2xlbl0gPSBtYXhfY29kZSA9IG47XG4gICAgICBzLmRlcHRoW25dID0gMDtcblxuICAgIH0gZWxzZSB7XG4gICAgICB0cmVlW24gKiAyICsgMV0vKi5MZW4qLyA9IDA7XG4gICAgfVxuICB9XG5cbiAgLyogVGhlIHBremlwIGZvcm1hdCByZXF1aXJlcyB0aGF0IGF0IGxlYXN0IG9uZSBkaXN0YW5jZSBjb2RlIGV4aXN0cyxcbiAgICogYW5kIHRoYXQgYXQgbGVhc3Qgb25lIGJpdCBzaG91bGQgYmUgc2VudCBldmVuIGlmIHRoZXJlIGlzIG9ubHkgb25lXG4gICAqIHBvc3NpYmxlIGNvZGUuIFNvIHRvIGF2b2lkIHNwZWNpYWwgY2hlY2tzIGxhdGVyIG9uIHdlIGZvcmNlIGF0IGxlYXN0XG4gICAqIHR3byBjb2RlcyBvZiBub24gemVybyBmcmVxdWVuY3kuXG4gICAqL1xuICB3aGlsZSAocy5oZWFwX2xlbiA8IDIpIHtcbiAgICBub2RlID0gcy5oZWFwWysrcy5oZWFwX2xlbl0gPSAobWF4X2NvZGUgPCAyID8gKyttYXhfY29kZSA6IDApO1xuICAgIHRyZWVbbm9kZSAqIDJdLyouRnJlcSovID0gMTtcbiAgICBzLmRlcHRoW25vZGVdID0gMDtcbiAgICBzLm9wdF9sZW4tLTtcblxuICAgIGlmIChoYXNfc3RyZWUpIHtcbiAgICAgIHMuc3RhdGljX2xlbiAtPSBzdHJlZVtub2RlICogMiArIDFdLyouTGVuKi87XG4gICAgfVxuICAgIC8qIG5vZGUgaXMgMCBvciAxIHNvIGl0IGRvZXMgbm90IGhhdmUgZXh0cmEgYml0cyAqL1xuICB9XG4gIGRlc2MubWF4X2NvZGUgPSBtYXhfY29kZTtcblxuICAvKiBUaGUgZWxlbWVudHMgaGVhcFtoZWFwX2xlbi8yKzEgLi4gaGVhcF9sZW5dIGFyZSBsZWF2ZXMgb2YgdGhlIHRyZWUsXG4gICAqIGVzdGFibGlzaCBzdWItaGVhcHMgb2YgaW5jcmVhc2luZyBsZW5ndGhzOlxuICAgKi9cbiAgZm9yIChuID0gKHMuaGVhcF9sZW4gPj4gMS8qaW50IC8yKi8pOyBuID49IDE7IG4tLSkgeyBwcWRvd25oZWFwKHMsIHRyZWUsIG4pOyB9XG5cbiAgLyogQ29uc3RydWN0IHRoZSBIdWZmbWFuIHRyZWUgYnkgcmVwZWF0ZWRseSBjb21iaW5pbmcgdGhlIGxlYXN0IHR3b1xuICAgKiBmcmVxdWVudCBub2Rlcy5cbiAgICovXG4gIG5vZGUgPSBlbGVtczsgICAgICAgICAgICAgIC8qIG5leHQgaW50ZXJuYWwgbm9kZSBvZiB0aGUgdHJlZSAqL1xuICBkbyB7XG4gICAgLy9wcXJlbW92ZShzLCB0cmVlLCBuKTsgIC8qIG4gPSBub2RlIG9mIGxlYXN0IGZyZXF1ZW5jeSAqL1xuICAgIC8qKiogcHFyZW1vdmUgKioqL1xuICAgIG4gPSBzLmhlYXBbMS8qU01BTExFU1QqL107XG4gICAgcy5oZWFwWzEvKlNNQUxMRVNUKi9dID0gcy5oZWFwW3MuaGVhcF9sZW4tLV07XG4gICAgcHFkb3duaGVhcChzLCB0cmVlLCAxLypTTUFMTEVTVCovKTtcbiAgICAvKioqL1xuXG4gICAgbSA9IHMuaGVhcFsxLypTTUFMTEVTVCovXTsgLyogbSA9IG5vZGUgb2YgbmV4dCBsZWFzdCBmcmVxdWVuY3kgKi9cblxuICAgIHMuaGVhcFstLXMuaGVhcF9tYXhdID0gbjsgLyoga2VlcCB0aGUgbm9kZXMgc29ydGVkIGJ5IGZyZXF1ZW5jeSAqL1xuICAgIHMuaGVhcFstLXMuaGVhcF9tYXhdID0gbTtcblxuICAgIC8qIENyZWF0ZSBhIG5ldyBub2RlIGZhdGhlciBvZiBuIGFuZCBtICovXG4gICAgdHJlZVtub2RlICogMl0vKi5GcmVxKi8gPSB0cmVlW24gKiAyXS8qLkZyZXEqLyArIHRyZWVbbSAqIDJdLyouRnJlcSovO1xuICAgIHMuZGVwdGhbbm9kZV0gPSAocy5kZXB0aFtuXSA+PSBzLmRlcHRoW21dID8gcy5kZXB0aFtuXSA6IHMuZGVwdGhbbV0pICsgMTtcbiAgICB0cmVlW24gKiAyICsgMV0vKi5EYWQqLyA9IHRyZWVbbSAqIDIgKyAxXS8qLkRhZCovID0gbm9kZTtcblxuICAgIC8qIGFuZCBpbnNlcnQgdGhlIG5ldyBub2RlIGluIHRoZSBoZWFwICovXG4gICAgcy5oZWFwWzEvKlNNQUxMRVNUKi9dID0gbm9kZSsrO1xuICAgIHBxZG93bmhlYXAocywgdHJlZSwgMS8qU01BTExFU1QqLyk7XG5cbiAgfSB3aGlsZSAocy5oZWFwX2xlbiA+PSAyKTtcblxuICBzLmhlYXBbLS1zLmhlYXBfbWF4XSA9IHMuaGVhcFsxLypTTUFMTEVTVCovXTtcblxuICAvKiBBdCB0aGlzIHBvaW50LCB0aGUgZmllbGRzIGZyZXEgYW5kIGRhZCBhcmUgc2V0LiBXZSBjYW4gbm93XG4gICAqIGdlbmVyYXRlIHRoZSBiaXQgbGVuZ3Rocy5cbiAgICovXG4gIGdlbl9iaXRsZW4ocywgZGVzYyk7XG5cbiAgLyogVGhlIGZpZWxkIGxlbiBpcyBub3cgc2V0LCB3ZSBjYW4gZ2VuZXJhdGUgdGhlIGJpdCBjb2RlcyAqL1xuICBnZW5fY29kZXModHJlZSwgbWF4X2NvZGUsIHMuYmxfY291bnQpO1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2NhbiBhIGxpdGVyYWwgb3IgZGlzdGFuY2UgdHJlZSB0byBkZXRlcm1pbmUgdGhlIGZyZXF1ZW5jaWVzIG9mIHRoZSBjb2Rlc1xuICogaW4gdGhlIGJpdCBsZW5ndGggdHJlZS5cbiAqL1xuZnVuY3Rpb24gc2Nhbl90cmVlKHMsIHRyZWUsIG1heF9jb2RlKVxuLy8gICAgZGVmbGF0ZV9zdGF0ZSAqcztcbi8vICAgIGN0X2RhdGEgKnRyZWU7ICAgLyogdGhlIHRyZWUgdG8gYmUgc2Nhbm5lZCAqL1xuLy8gICAgaW50IG1heF9jb2RlOyAgICAvKiBhbmQgaXRzIGxhcmdlc3QgY29kZSBvZiBub24gemVybyBmcmVxdWVuY3kgKi9cbntcbiAgdmFyIG47ICAgICAgICAgICAgICAgICAgICAgLyogaXRlcmF0ZXMgb3ZlciBhbGwgdHJlZSBlbGVtZW50cyAqL1xuICB2YXIgcHJldmxlbiA9IC0xOyAgICAgICAgICAvKiBsYXN0IGVtaXR0ZWQgbGVuZ3RoICovXG4gIHZhciBjdXJsZW47ICAgICAgICAgICAgICAgIC8qIGxlbmd0aCBvZiBjdXJyZW50IGNvZGUgKi9cblxuICB2YXIgbmV4dGxlbiA9IHRyZWVbMCAqIDIgKyAxXS8qLkxlbiovOyAvKiBsZW5ndGggb2YgbmV4dCBjb2RlICovXG5cbiAgdmFyIGNvdW50ID0gMDsgICAgICAgICAgICAgLyogcmVwZWF0IGNvdW50IG9mIHRoZSBjdXJyZW50IGNvZGUgKi9cbiAgdmFyIG1heF9jb3VudCA9IDc7ICAgICAgICAgLyogbWF4IHJlcGVhdCBjb3VudCAqL1xuICB2YXIgbWluX2NvdW50ID0gNDsgICAgICAgICAvKiBtaW4gcmVwZWF0IGNvdW50ICovXG5cbiAgaWYgKG5leHRsZW4gPT09IDApIHtcbiAgICBtYXhfY291bnQgPSAxMzg7XG4gICAgbWluX2NvdW50ID0gMztcbiAgfVxuICB0cmVlWyhtYXhfY29kZSArIDEpICogMiArIDFdLyouTGVuKi8gPSAweGZmZmY7IC8qIGd1YXJkICovXG5cbiAgZm9yIChuID0gMDsgbiA8PSBtYXhfY29kZTsgbisrKSB7XG4gICAgY3VybGVuID0gbmV4dGxlbjtcbiAgICBuZXh0bGVuID0gdHJlZVsobiArIDEpICogMiArIDFdLyouTGVuKi87XG5cbiAgICBpZiAoKytjb3VudCA8IG1heF9jb3VudCAmJiBjdXJsZW4gPT09IG5leHRsZW4pIHtcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgfSBlbHNlIGlmIChjb3VudCA8IG1pbl9jb3VudCkge1xuICAgICAgcy5ibF90cmVlW2N1cmxlbiAqIDJdLyouRnJlcSovICs9IGNvdW50O1xuXG4gICAgfSBlbHNlIGlmIChjdXJsZW4gIT09IDApIHtcblxuICAgICAgaWYgKGN1cmxlbiAhPT0gcHJldmxlbikgeyBzLmJsX3RyZWVbY3VybGVuICogMl0vKi5GcmVxKi8rKzsgfVxuICAgICAgcy5ibF90cmVlW1JFUF8zXzYgKiAyXS8qLkZyZXEqLysrO1xuXG4gICAgfSBlbHNlIGlmIChjb3VudCA8PSAxMCkge1xuICAgICAgcy5ibF90cmVlW1JFUFpfM18xMCAqIDJdLyouRnJlcSovKys7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgcy5ibF90cmVlW1JFUFpfMTFfMTM4ICogMl0vKi5GcmVxKi8rKztcbiAgICB9XG5cbiAgICBjb3VudCA9IDA7XG4gICAgcHJldmxlbiA9IGN1cmxlbjtcblxuICAgIGlmIChuZXh0bGVuID09PSAwKSB7XG4gICAgICBtYXhfY291bnQgPSAxMzg7XG4gICAgICBtaW5fY291bnQgPSAzO1xuXG4gICAgfSBlbHNlIGlmIChjdXJsZW4gPT09IG5leHRsZW4pIHtcbiAgICAgIG1heF9jb3VudCA9IDY7XG4gICAgICBtaW5fY291bnQgPSAzO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIG1heF9jb3VudCA9IDc7XG4gICAgICBtaW5fY291bnQgPSA0O1xuICAgIH1cbiAgfVxufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2VuZCBhIGxpdGVyYWwgb3IgZGlzdGFuY2UgdHJlZSBpbiBjb21wcmVzc2VkIGZvcm0sIHVzaW5nIHRoZSBjb2RlcyBpblxuICogYmxfdHJlZS5cbiAqL1xuZnVuY3Rpb24gc2VuZF90cmVlKHMsIHRyZWUsIG1heF9jb2RlKVxuLy8gICAgZGVmbGF0ZV9zdGF0ZSAqcztcbi8vICAgIGN0X2RhdGEgKnRyZWU7IC8qIHRoZSB0cmVlIHRvIGJlIHNjYW5uZWQgKi9cbi8vICAgIGludCBtYXhfY29kZTsgICAgICAgLyogYW5kIGl0cyBsYXJnZXN0IGNvZGUgb2Ygbm9uIHplcm8gZnJlcXVlbmN5ICovXG57XG4gIHZhciBuOyAgICAgICAgICAgICAgICAgICAgIC8qIGl0ZXJhdGVzIG92ZXIgYWxsIHRyZWUgZWxlbWVudHMgKi9cbiAgdmFyIHByZXZsZW4gPSAtMTsgICAgICAgICAgLyogbGFzdCBlbWl0dGVkIGxlbmd0aCAqL1xuICB2YXIgY3VybGVuOyAgICAgICAgICAgICAgICAvKiBsZW5ndGggb2YgY3VycmVudCBjb2RlICovXG5cbiAgdmFyIG5leHRsZW4gPSB0cmVlWzAgKiAyICsgMV0vKi5MZW4qLzsgLyogbGVuZ3RoIG9mIG5leHQgY29kZSAqL1xuXG4gIHZhciBjb3VudCA9IDA7ICAgICAgICAgICAgIC8qIHJlcGVhdCBjb3VudCBvZiB0aGUgY3VycmVudCBjb2RlICovXG4gIHZhciBtYXhfY291bnQgPSA3OyAgICAgICAgIC8qIG1heCByZXBlYXQgY291bnQgKi9cbiAgdmFyIG1pbl9jb3VudCA9IDQ7ICAgICAgICAgLyogbWluIHJlcGVhdCBjb3VudCAqL1xuXG4gIC8qIHRyZWVbbWF4X2NvZGUrMV0uTGVuID0gLTE7ICovICAvKiBndWFyZCBhbHJlYWR5IHNldCAqL1xuICBpZiAobmV4dGxlbiA9PT0gMCkge1xuICAgIG1heF9jb3VudCA9IDEzODtcbiAgICBtaW5fY291bnQgPSAzO1xuICB9XG5cbiAgZm9yIChuID0gMDsgbiA8PSBtYXhfY29kZTsgbisrKSB7XG4gICAgY3VybGVuID0gbmV4dGxlbjtcbiAgICBuZXh0bGVuID0gdHJlZVsobiArIDEpICogMiArIDFdLyouTGVuKi87XG5cbiAgICBpZiAoKytjb3VudCA8IG1heF9jb3VudCAmJiBjdXJsZW4gPT09IG5leHRsZW4pIHtcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgfSBlbHNlIGlmIChjb3VudCA8IG1pbl9jb3VudCkge1xuICAgICAgZG8geyBzZW5kX2NvZGUocywgY3VybGVuLCBzLmJsX3RyZWUpOyB9IHdoaWxlICgtLWNvdW50ICE9PSAwKTtcblxuICAgIH0gZWxzZSBpZiAoY3VybGVuICE9PSAwKSB7XG4gICAgICBpZiAoY3VybGVuICE9PSBwcmV2bGVuKSB7XG4gICAgICAgIHNlbmRfY29kZShzLCBjdXJsZW4sIHMuYmxfdHJlZSk7XG4gICAgICAgIGNvdW50LS07XG4gICAgICB9XG4gICAgICAvL0Fzc2VydChjb3VudCA+PSAzICYmIGNvdW50IDw9IDYsIFwiIDNfNj9cIik7XG4gICAgICBzZW5kX2NvZGUocywgUkVQXzNfNiwgcy5ibF90cmVlKTtcbiAgICAgIHNlbmRfYml0cyhzLCBjb3VudCAtIDMsIDIpO1xuXG4gICAgfSBlbHNlIGlmIChjb3VudCA8PSAxMCkge1xuICAgICAgc2VuZF9jb2RlKHMsIFJFUFpfM18xMCwgcy5ibF90cmVlKTtcbiAgICAgIHNlbmRfYml0cyhzLCBjb3VudCAtIDMsIDMpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbmRfY29kZShzLCBSRVBaXzExXzEzOCwgcy5ibF90cmVlKTtcbiAgICAgIHNlbmRfYml0cyhzLCBjb3VudCAtIDExLCA3KTtcbiAgICB9XG5cbiAgICBjb3VudCA9IDA7XG4gICAgcHJldmxlbiA9IGN1cmxlbjtcbiAgICBpZiAobmV4dGxlbiA9PT0gMCkge1xuICAgICAgbWF4X2NvdW50ID0gMTM4O1xuICAgICAgbWluX2NvdW50ID0gMztcblxuICAgIH0gZWxzZSBpZiAoY3VybGVuID09PSBuZXh0bGVuKSB7XG4gICAgICBtYXhfY291bnQgPSA2O1xuICAgICAgbWluX2NvdW50ID0gMztcblxuICAgIH0gZWxzZSB7XG4gICAgICBtYXhfY291bnQgPSA3O1xuICAgICAgbWluX2NvdW50ID0gNDtcbiAgICB9XG4gIH1cbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvbnN0cnVjdCB0aGUgSHVmZm1hbiB0cmVlIGZvciB0aGUgYml0IGxlbmd0aHMgYW5kIHJldHVybiB0aGUgaW5kZXggaW5cbiAqIGJsX29yZGVyIG9mIHRoZSBsYXN0IGJpdCBsZW5ndGggY29kZSB0byBzZW5kLlxuICovXG5mdW5jdGlvbiBidWlsZF9ibF90cmVlKHMpIHtcbiAgdmFyIG1heF9ibGluZGV4OyAgLyogaW5kZXggb2YgbGFzdCBiaXQgbGVuZ3RoIGNvZGUgb2Ygbm9uIHplcm8gZnJlcSAqL1xuXG4gIC8qIERldGVybWluZSB0aGUgYml0IGxlbmd0aCBmcmVxdWVuY2llcyBmb3IgbGl0ZXJhbCBhbmQgZGlzdGFuY2UgdHJlZXMgKi9cbiAgc2Nhbl90cmVlKHMsIHMuZHluX2x0cmVlLCBzLmxfZGVzYy5tYXhfY29kZSk7XG4gIHNjYW5fdHJlZShzLCBzLmR5bl9kdHJlZSwgcy5kX2Rlc2MubWF4X2NvZGUpO1xuXG4gIC8qIEJ1aWxkIHRoZSBiaXQgbGVuZ3RoIHRyZWU6ICovXG4gIGJ1aWxkX3RyZWUocywgcy5ibF9kZXNjKTtcbiAgLyogb3B0X2xlbiBub3cgaW5jbHVkZXMgdGhlIGxlbmd0aCBvZiB0aGUgdHJlZSByZXByZXNlbnRhdGlvbnMsIGV4Y2VwdFxuICAgKiB0aGUgbGVuZ3RocyBvZiB0aGUgYml0IGxlbmd0aHMgY29kZXMgYW5kIHRoZSA1KzUrNCBiaXRzIGZvciB0aGUgY291bnRzLlxuICAgKi9cblxuICAvKiBEZXRlcm1pbmUgdGhlIG51bWJlciBvZiBiaXQgbGVuZ3RoIGNvZGVzIHRvIHNlbmQuIFRoZSBwa3ppcCBmb3JtYXRcbiAgICogcmVxdWlyZXMgdGhhdCBhdCBsZWFzdCA0IGJpdCBsZW5ndGggY29kZXMgYmUgc2VudC4gKGFwcG5vdGUudHh0IHNheXNcbiAgICogMyBidXQgdGhlIGFjdHVhbCB2YWx1ZSB1c2VkIGlzIDQuKVxuICAgKi9cbiAgZm9yIChtYXhfYmxpbmRleCA9IEJMX0NPREVTIC0gMTsgbWF4X2JsaW5kZXggPj0gMzsgbWF4X2JsaW5kZXgtLSkge1xuICAgIGlmIChzLmJsX3RyZWVbYmxfb3JkZXJbbWF4X2JsaW5kZXhdICogMiArIDFdLyouTGVuKi8gIT09IDApIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICAvKiBVcGRhdGUgb3B0X2xlbiB0byBpbmNsdWRlIHRoZSBiaXQgbGVuZ3RoIHRyZWUgYW5kIGNvdW50cyAqL1xuICBzLm9wdF9sZW4gKz0gMyAqIChtYXhfYmxpbmRleCArIDEpICsgNSArIDUgKyA0O1xuICAvL1RyYWNldigoc3RkZXJyLCBcIlxcbmR5biB0cmVlczogZHluICVsZCwgc3RhdCAlbGRcIixcbiAgLy8gICAgICAgIHMtPm9wdF9sZW4sIHMtPnN0YXRpY19sZW4pKTtcblxuICByZXR1cm4gbWF4X2JsaW5kZXg7XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBTZW5kIHRoZSBoZWFkZXIgZm9yIGEgYmxvY2sgdXNpbmcgZHluYW1pYyBIdWZmbWFuIHRyZWVzOiB0aGUgY291bnRzLCB0aGVcbiAqIGxlbmd0aHMgb2YgdGhlIGJpdCBsZW5ndGggY29kZXMsIHRoZSBsaXRlcmFsIHRyZWUgYW5kIHRoZSBkaXN0YW5jZSB0cmVlLlxuICogSU4gYXNzZXJ0aW9uOiBsY29kZXMgPj0gMjU3LCBkY29kZXMgPj0gMSwgYmxjb2RlcyA+PSA0LlxuICovXG5mdW5jdGlvbiBzZW5kX2FsbF90cmVlcyhzLCBsY29kZXMsIGRjb2RlcywgYmxjb2Rlcylcbi8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XG4vLyAgICBpbnQgbGNvZGVzLCBkY29kZXMsIGJsY29kZXM7IC8qIG51bWJlciBvZiBjb2RlcyBmb3IgZWFjaCB0cmVlICovXG57XG4gIHZhciByYW5rOyAgICAgICAgICAgICAgICAgICAgLyogaW5kZXggaW4gYmxfb3JkZXIgKi9cblxuICAvL0Fzc2VydCAobGNvZGVzID49IDI1NyAmJiBkY29kZXMgPj0gMSAmJiBibGNvZGVzID49IDQsIFwibm90IGVub3VnaCBjb2Rlc1wiKTtcbiAgLy9Bc3NlcnQgKGxjb2RlcyA8PSBMX0NPREVTICYmIGRjb2RlcyA8PSBEX0NPREVTICYmIGJsY29kZXMgPD0gQkxfQ09ERVMsXG4gIC8vICAgICAgICBcInRvbyBtYW55IGNvZGVzXCIpO1xuICAvL1RyYWNldigoc3RkZXJyLCBcIlxcbmJsIGNvdW50czogXCIpKTtcbiAgc2VuZF9iaXRzKHMsIGxjb2RlcyAtIDI1NywgNSk7IC8qIG5vdCArMjU1IGFzIHN0YXRlZCBpbiBhcHBub3RlLnR4dCAqL1xuICBzZW5kX2JpdHMocywgZGNvZGVzIC0gMSwgICA1KTtcbiAgc2VuZF9iaXRzKHMsIGJsY29kZXMgLSA0LCAgNCk7IC8qIG5vdCAtMyBhcyBzdGF0ZWQgaW4gYXBwbm90ZS50eHQgKi9cbiAgZm9yIChyYW5rID0gMDsgcmFuayA8IGJsY29kZXM7IHJhbmsrKykge1xuICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiXFxuYmwgY29kZSAlMmQgXCIsIGJsX29yZGVyW3JhbmtdKSk7XG4gICAgc2VuZF9iaXRzKHMsIHMuYmxfdHJlZVtibF9vcmRlcltyYW5rXSAqIDIgKyAxXS8qLkxlbiovLCAzKTtcbiAgfVxuICAvL1RyYWNldigoc3RkZXJyLCBcIlxcbmJsIHRyZWU6IHNlbnQgJWxkXCIsIHMtPmJpdHNfc2VudCkpO1xuXG4gIHNlbmRfdHJlZShzLCBzLmR5bl9sdHJlZSwgbGNvZGVzIC0gMSk7IC8qIGxpdGVyYWwgdHJlZSAqL1xuICAvL1RyYWNldigoc3RkZXJyLCBcIlxcbmxpdCB0cmVlOiBzZW50ICVsZFwiLCBzLT5iaXRzX3NlbnQpKTtcblxuICBzZW5kX3RyZWUocywgcy5keW5fZHRyZWUsIGRjb2RlcyAtIDEpOyAvKiBkaXN0YW5jZSB0cmVlICovXG4gIC8vVHJhY2V2KChzdGRlcnIsIFwiXFxuZGlzdCB0cmVlOiBzZW50ICVsZFwiLCBzLT5iaXRzX3NlbnQpKTtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENoZWNrIGlmIHRoZSBkYXRhIHR5cGUgaXMgVEVYVCBvciBCSU5BUlksIHVzaW5nIHRoZSBmb2xsb3dpbmcgYWxnb3JpdGhtOlxuICogLSBURVhUIGlmIHRoZSB0d28gY29uZGl0aW9ucyBiZWxvdyBhcmUgc2F0aXNmaWVkOlxuICogICAgYSkgVGhlcmUgYXJlIG5vIG5vbi1wb3J0YWJsZSBjb250cm9sIGNoYXJhY3RlcnMgYmVsb25naW5nIHRvIHRoZVxuICogICAgICAgXCJibGFjayBsaXN0XCIgKDAuLjYsIDE0Li4yNSwgMjguLjMxKS5cbiAqICAgIGIpIFRoZXJlIGlzIGF0IGxlYXN0IG9uZSBwcmludGFibGUgY2hhcmFjdGVyIGJlbG9uZ2luZyB0byB0aGVcbiAqICAgICAgIFwid2hpdGUgbGlzdFwiICg5IHtUQUJ9LCAxMCB7TEZ9LCAxMyB7Q1J9LCAzMi4uMjU1KS5cbiAqIC0gQklOQVJZIG90aGVyd2lzZS5cbiAqIC0gVGhlIGZvbGxvd2luZyBwYXJ0aWFsbHktcG9ydGFibGUgY29udHJvbCBjaGFyYWN0ZXJzIGZvcm0gYVxuICogICBcImdyYXkgbGlzdFwiIHRoYXQgaXMgaWdub3JlZCBpbiB0aGlzIGRldGVjdGlvbiBhbGdvcml0aG06XG4gKiAgICg3IHtCRUx9LCA4IHtCU30sIDExIHtWVH0sIDEyIHtGRn0sIDI2IHtTVUJ9LCAyNyB7RVNDfSkuXG4gKiBJTiBhc3NlcnRpb246IHRoZSBmaWVsZHMgRnJlcSBvZiBkeW5fbHRyZWUgYXJlIHNldC5cbiAqL1xuZnVuY3Rpb24gZGV0ZWN0X2RhdGFfdHlwZShzKSB7XG4gIC8qIGJsYWNrX21hc2sgaXMgdGhlIGJpdCBtYXNrIG9mIGJsYWNrLWxpc3RlZCBieXRlc1xuICAgKiBzZXQgYml0cyAwLi42LCAxNC4uMjUsIGFuZCAyOC4uMzFcbiAgICogMHhmM2ZmYzA3ZiA9IGJpbmFyeSAxMTExMDAxMTExMTExMTExMTEwMDAwMDAwMTExMTExMVxuICAgKi9cbiAgdmFyIGJsYWNrX21hc2sgPSAweGYzZmZjMDdmO1xuICB2YXIgbjtcblxuICAvKiBDaGVjayBmb3Igbm9uLXRleHR1YWwgKFwiYmxhY2stbGlzdGVkXCIpIGJ5dGVzLiAqL1xuICBmb3IgKG4gPSAwOyBuIDw9IDMxOyBuKyssIGJsYWNrX21hc2sgPj4+PSAxKSB7XG4gICAgaWYgKChibGFja19tYXNrICYgMSkgJiYgKHMuZHluX2x0cmVlW24gKiAyXS8qLkZyZXEqLyAhPT0gMCkpIHtcbiAgICAgIHJldHVybiBaX0JJTkFSWTtcbiAgICB9XG4gIH1cblxuICAvKiBDaGVjayBmb3IgdGV4dHVhbCAoXCJ3aGl0ZS1saXN0ZWRcIikgYnl0ZXMuICovXG4gIGlmIChzLmR5bl9sdHJlZVs5ICogMl0vKi5GcmVxKi8gIT09IDAgfHwgcy5keW5fbHRyZWVbMTAgKiAyXS8qLkZyZXEqLyAhPT0gMCB8fFxuICAgICAgcy5keW5fbHRyZWVbMTMgKiAyXS8qLkZyZXEqLyAhPT0gMCkge1xuICAgIHJldHVybiBaX1RFWFQ7XG4gIH1cbiAgZm9yIChuID0gMzI7IG4gPCBMSVRFUkFMUzsgbisrKSB7XG4gICAgaWYgKHMuZHluX2x0cmVlW24gKiAyXS8qLkZyZXEqLyAhPT0gMCkge1xuICAgICAgcmV0dXJuIFpfVEVYVDtcbiAgICB9XG4gIH1cblxuICAvKiBUaGVyZSBhcmUgbm8gXCJibGFjay1saXN0ZWRcIiBvciBcIndoaXRlLWxpc3RlZFwiIGJ5dGVzOlxuICAgKiB0aGlzIHN0cmVhbSBlaXRoZXIgaXMgZW1wdHkgb3IgaGFzIHRvbGVyYXRlZCAoXCJncmF5LWxpc3RlZFwiKSBieXRlcyBvbmx5LlxuICAgKi9cbiAgcmV0dXJuIFpfQklOQVJZO1xufVxuXG5cbnZhciBzdGF0aWNfaW5pdF9kb25lID0gZmFsc2U7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogSW5pdGlhbGl6ZSB0aGUgdHJlZSBkYXRhIHN0cnVjdHVyZXMgZm9yIGEgbmV3IHpsaWIgc3RyZWFtLlxuICovXG5mdW5jdGlvbiBfdHJfaW5pdChzKVxue1xuXG4gIGlmICghc3RhdGljX2luaXRfZG9uZSkge1xuICAgIHRyX3N0YXRpY19pbml0KCk7XG4gICAgc3RhdGljX2luaXRfZG9uZSA9IHRydWU7XG4gIH1cblxuICBzLmxfZGVzYyAgPSBuZXcgVHJlZURlc2Mocy5keW5fbHRyZWUsIHN0YXRpY19sX2Rlc2MpO1xuICBzLmRfZGVzYyAgPSBuZXcgVHJlZURlc2Mocy5keW5fZHRyZWUsIHN0YXRpY19kX2Rlc2MpO1xuICBzLmJsX2Rlc2MgPSBuZXcgVHJlZURlc2Mocy5ibF90cmVlLCBzdGF0aWNfYmxfZGVzYyk7XG5cbiAgcy5iaV9idWYgPSAwO1xuICBzLmJpX3ZhbGlkID0gMDtcblxuICAvKiBJbml0aWFsaXplIHRoZSBmaXJzdCBibG9jayBvZiB0aGUgZmlyc3QgZmlsZTogKi9cbiAgaW5pdF9ibG9jayhzKTtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNlbmQgYSBzdG9yZWQgYmxvY2tcbiAqL1xuZnVuY3Rpb24gX3RyX3N0b3JlZF9ibG9jayhzLCBidWYsIHN0b3JlZF9sZW4sIGxhc3QpXG4vL0RlZmxhdGVTdGF0ZSAqcztcbi8vY2hhcmYgKmJ1ZjsgICAgICAgLyogaW5wdXQgYmxvY2sgKi9cbi8vdWxnIHN0b3JlZF9sZW47ICAgLyogbGVuZ3RoIG9mIGlucHV0IGJsb2NrICovXG4vL2ludCBsYXN0OyAgICAgICAgIC8qIG9uZSBpZiB0aGlzIGlzIHRoZSBsYXN0IGJsb2NrIGZvciBhIGZpbGUgKi9cbntcbiAgc2VuZF9iaXRzKHMsIChTVE9SRURfQkxPQ0sgPDwgMSkgKyAobGFzdCA/IDEgOiAwKSwgMyk7ICAgIC8qIHNlbmQgYmxvY2sgdHlwZSAqL1xuICBjb3B5X2Jsb2NrKHMsIGJ1Ziwgc3RvcmVkX2xlbiwgdHJ1ZSk7IC8qIHdpdGggaGVhZGVyICovXG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBTZW5kIG9uZSBlbXB0eSBzdGF0aWMgYmxvY2sgdG8gZ2l2ZSBlbm91Z2ggbG9va2FoZWFkIGZvciBpbmZsYXRlLlxuICogVGhpcyB0YWtlcyAxMCBiaXRzLCBvZiB3aGljaCA3IG1heSByZW1haW4gaW4gdGhlIGJpdCBidWZmZXIuXG4gKi9cbmZ1bmN0aW9uIF90cl9hbGlnbihzKSB7XG4gIHNlbmRfYml0cyhzLCBTVEFUSUNfVFJFRVMgPDwgMSwgMyk7XG4gIHNlbmRfY29kZShzLCBFTkRfQkxPQ0ssIHN0YXRpY19sdHJlZSk7XG4gIGJpX2ZsdXNoKHMpO1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogRGV0ZXJtaW5lIHRoZSBiZXN0IGVuY29kaW5nIGZvciB0aGUgY3VycmVudCBibG9jazogZHluYW1pYyB0cmVlcywgc3RhdGljXG4gKiB0cmVlcyBvciBzdG9yZSwgYW5kIG91dHB1dCB0aGUgZW5jb2RlZCBibG9jayB0byB0aGUgemlwIGZpbGUuXG4gKi9cbmZ1bmN0aW9uIF90cl9mbHVzaF9ibG9jayhzLCBidWYsIHN0b3JlZF9sZW4sIGxhc3QpXG4vL0RlZmxhdGVTdGF0ZSAqcztcbi8vY2hhcmYgKmJ1ZjsgICAgICAgLyogaW5wdXQgYmxvY2ssIG9yIE5VTEwgaWYgdG9vIG9sZCAqL1xuLy91bGcgc3RvcmVkX2xlbjsgICAvKiBsZW5ndGggb2YgaW5wdXQgYmxvY2sgKi9cbi8vaW50IGxhc3Q7ICAgICAgICAgLyogb25lIGlmIHRoaXMgaXMgdGhlIGxhc3QgYmxvY2sgZm9yIGEgZmlsZSAqL1xue1xuICB2YXIgb3B0X2xlbmIsIHN0YXRpY19sZW5iOyAgLyogb3B0X2xlbiBhbmQgc3RhdGljX2xlbiBpbiBieXRlcyAqL1xuICB2YXIgbWF4X2JsaW5kZXggPSAwOyAgICAgICAgLyogaW5kZXggb2YgbGFzdCBiaXQgbGVuZ3RoIGNvZGUgb2Ygbm9uIHplcm8gZnJlcSAqL1xuXG4gIC8qIEJ1aWxkIHRoZSBIdWZmbWFuIHRyZWVzIHVubGVzcyBhIHN0b3JlZCBibG9jayBpcyBmb3JjZWQgKi9cbiAgaWYgKHMubGV2ZWwgPiAwKSB7XG5cbiAgICAvKiBDaGVjayBpZiB0aGUgZmlsZSBpcyBiaW5hcnkgb3IgdGV4dCAqL1xuICAgIGlmIChzLnN0cm0uZGF0YV90eXBlID09PSBaX1VOS05PV04pIHtcbiAgICAgIHMuc3RybS5kYXRhX3R5cGUgPSBkZXRlY3RfZGF0YV90eXBlKHMpO1xuICAgIH1cblxuICAgIC8qIENvbnN0cnVjdCB0aGUgbGl0ZXJhbCBhbmQgZGlzdGFuY2UgdHJlZXMgKi9cbiAgICBidWlsZF90cmVlKHMsIHMubF9kZXNjKTtcbiAgICAvLyBUcmFjZXYoKHN0ZGVyciwgXCJcXG5saXQgZGF0YTogZHluICVsZCwgc3RhdCAlbGRcIiwgcy0+b3B0X2xlbixcbiAgICAvLyAgICAgICAgcy0+c3RhdGljX2xlbikpO1xuXG4gICAgYnVpbGRfdHJlZShzLCBzLmRfZGVzYyk7XG4gICAgLy8gVHJhY2V2KChzdGRlcnIsIFwiXFxuZGlzdCBkYXRhOiBkeW4gJWxkLCBzdGF0ICVsZFwiLCBzLT5vcHRfbGVuLFxuICAgIC8vICAgICAgICBzLT5zdGF0aWNfbGVuKSk7XG4gICAgLyogQXQgdGhpcyBwb2ludCwgb3B0X2xlbiBhbmQgc3RhdGljX2xlbiBhcmUgdGhlIHRvdGFsIGJpdCBsZW5ndGhzIG9mXG4gICAgICogdGhlIGNvbXByZXNzZWQgYmxvY2sgZGF0YSwgZXhjbHVkaW5nIHRoZSB0cmVlIHJlcHJlc2VudGF0aW9ucy5cbiAgICAgKi9cblxuICAgIC8qIEJ1aWxkIHRoZSBiaXQgbGVuZ3RoIHRyZWUgZm9yIHRoZSBhYm92ZSB0d28gdHJlZXMsIGFuZCBnZXQgdGhlIGluZGV4XG4gICAgICogaW4gYmxfb3JkZXIgb2YgdGhlIGxhc3QgYml0IGxlbmd0aCBjb2RlIHRvIHNlbmQuXG4gICAgICovXG4gICAgbWF4X2JsaW5kZXggPSBidWlsZF9ibF90cmVlKHMpO1xuXG4gICAgLyogRGV0ZXJtaW5lIHRoZSBiZXN0IGVuY29kaW5nLiBDb21wdXRlIHRoZSBibG9jayBsZW5ndGhzIGluIGJ5dGVzLiAqL1xuICAgIG9wdF9sZW5iID0gKHMub3B0X2xlbiArIDMgKyA3KSA+Pj4gMztcbiAgICBzdGF0aWNfbGVuYiA9IChzLnN0YXRpY19sZW4gKyAzICsgNykgPj4+IDM7XG5cbiAgICAvLyBUcmFjZXYoKHN0ZGVyciwgXCJcXG5vcHQgJWx1KCVsdSkgc3RhdCAlbHUoJWx1KSBzdG9yZWQgJWx1IGxpdCAldSBcIixcbiAgICAvLyAgICAgICAgb3B0X2xlbmIsIHMtPm9wdF9sZW4sIHN0YXRpY19sZW5iLCBzLT5zdGF0aWNfbGVuLCBzdG9yZWRfbGVuLFxuICAgIC8vICAgICAgICBzLT5sYXN0X2xpdCkpO1xuXG4gICAgaWYgKHN0YXRpY19sZW5iIDw9IG9wdF9sZW5iKSB7IG9wdF9sZW5iID0gc3RhdGljX2xlbmI7IH1cblxuICB9IGVsc2Uge1xuICAgIC8vIEFzc2VydChidWYgIT0gKGNoYXIqKTAsIFwibG9zdCBidWZcIik7XG4gICAgb3B0X2xlbmIgPSBzdGF0aWNfbGVuYiA9IHN0b3JlZF9sZW4gKyA1OyAvKiBmb3JjZSBhIHN0b3JlZCBibG9jayAqL1xuICB9XG5cbiAgaWYgKChzdG9yZWRfbGVuICsgNCA8PSBvcHRfbGVuYikgJiYgKGJ1ZiAhPT0gLTEpKSB7XG4gICAgLyogNDogdHdvIHdvcmRzIGZvciB0aGUgbGVuZ3RocyAqL1xuXG4gICAgLyogVGhlIHRlc3QgYnVmICE9IE5VTEwgaXMgb25seSBuZWNlc3NhcnkgaWYgTElUX0JVRlNJWkUgPiBXU0laRS5cbiAgICAgKiBPdGhlcndpc2Ugd2UgY2FuJ3QgaGF2ZSBwcm9jZXNzZWQgbW9yZSB0aGFuIFdTSVpFIGlucHV0IGJ5dGVzIHNpbmNlXG4gICAgICogdGhlIGxhc3QgYmxvY2sgZmx1c2gsIGJlY2F1c2UgY29tcHJlc3Npb24gd291bGQgaGF2ZSBiZWVuXG4gICAgICogc3VjY2Vzc2Z1bC4gSWYgTElUX0JVRlNJWkUgPD0gV1NJWkUsIGl0IGlzIG5ldmVyIHRvbyBsYXRlIHRvXG4gICAgICogdHJhbnNmb3JtIGEgYmxvY2sgaW50byBhIHN0b3JlZCBibG9jay5cbiAgICAgKi9cbiAgICBfdHJfc3RvcmVkX2Jsb2NrKHMsIGJ1Ziwgc3RvcmVkX2xlbiwgbGFzdCk7XG5cbiAgfSBlbHNlIGlmIChzLnN0cmF0ZWd5ID09PSBaX0ZJWEVEIHx8IHN0YXRpY19sZW5iID09PSBvcHRfbGVuYikge1xuXG4gICAgc2VuZF9iaXRzKHMsIChTVEFUSUNfVFJFRVMgPDwgMSkgKyAobGFzdCA/IDEgOiAwKSwgMyk7XG4gICAgY29tcHJlc3NfYmxvY2socywgc3RhdGljX2x0cmVlLCBzdGF0aWNfZHRyZWUpO1xuXG4gIH0gZWxzZSB7XG4gICAgc2VuZF9iaXRzKHMsIChEWU5fVFJFRVMgPDwgMSkgKyAobGFzdCA/IDEgOiAwKSwgMyk7XG4gICAgc2VuZF9hbGxfdHJlZXMocywgcy5sX2Rlc2MubWF4X2NvZGUgKyAxLCBzLmRfZGVzYy5tYXhfY29kZSArIDEsIG1heF9ibGluZGV4ICsgMSk7XG4gICAgY29tcHJlc3NfYmxvY2socywgcy5keW5fbHRyZWUsIHMuZHluX2R0cmVlKTtcbiAgfVxuICAvLyBBc3NlcnQgKHMtPmNvbXByZXNzZWRfbGVuID09IHMtPmJpdHNfc2VudCwgXCJiYWQgY29tcHJlc3NlZCBzaXplXCIpO1xuICAvKiBUaGUgYWJvdmUgY2hlY2sgaXMgbWFkZSBtb2QgMl4zMiwgZm9yIGZpbGVzIGxhcmdlciB0aGFuIDUxMiBNQlxuICAgKiBhbmQgdUxvbmcgaW1wbGVtZW50ZWQgb24gMzIgYml0cy5cbiAgICovXG4gIGluaXRfYmxvY2socyk7XG5cbiAgaWYgKGxhc3QpIHtcbiAgICBiaV93aW5kdXAocyk7XG4gIH1cbiAgLy8gVHJhY2V2KChzdGRlcnIsXCJcXG5jb21wcmxlbiAlbHUoJWx1KSBcIiwgcy0+Y29tcHJlc3NlZF9sZW4+PjMsXG4gIC8vICAgICAgIHMtPmNvbXByZXNzZWRfbGVuLTcqbGFzdCkpO1xufVxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNhdmUgdGhlIG1hdGNoIGluZm8gYW5kIHRhbGx5IHRoZSBmcmVxdWVuY3kgY291bnRzLiBSZXR1cm4gdHJ1ZSBpZlxuICogdGhlIGN1cnJlbnQgYmxvY2sgbXVzdCBiZSBmbHVzaGVkLlxuICovXG5mdW5jdGlvbiBfdHJfdGFsbHkocywgZGlzdCwgbGMpXG4vLyAgICBkZWZsYXRlX3N0YXRlICpzO1xuLy8gICAgdW5zaWduZWQgZGlzdDsgIC8qIGRpc3RhbmNlIG9mIG1hdGNoZWQgc3RyaW5nICovXG4vLyAgICB1bnNpZ25lZCBsYzsgICAgLyogbWF0Y2ggbGVuZ3RoLU1JTl9NQVRDSCBvciB1bm1hdGNoZWQgY2hhciAoaWYgZGlzdD09MCkgKi9cbntcbiAgLy92YXIgb3V0X2xlbmd0aCwgaW5fbGVuZ3RoLCBkY29kZTtcblxuICBzLnBlbmRpbmdfYnVmW3MuZF9idWYgKyBzLmxhc3RfbGl0ICogMl0gICAgID0gKGRpc3QgPj4+IDgpICYgMHhmZjtcbiAgcy5wZW5kaW5nX2J1ZltzLmRfYnVmICsgcy5sYXN0X2xpdCAqIDIgKyAxXSA9IGRpc3QgJiAweGZmO1xuXG4gIHMucGVuZGluZ19idWZbcy5sX2J1ZiArIHMubGFzdF9saXRdID0gbGMgJiAweGZmO1xuICBzLmxhc3RfbGl0Kys7XG5cbiAgaWYgKGRpc3QgPT09IDApIHtcbiAgICAvKiBsYyBpcyB0aGUgdW5tYXRjaGVkIGNoYXIgKi9cbiAgICBzLmR5bl9sdHJlZVtsYyAqIDJdLyouRnJlcSovKys7XG4gIH0gZWxzZSB7XG4gICAgcy5tYXRjaGVzKys7XG4gICAgLyogSGVyZSwgbGMgaXMgdGhlIG1hdGNoIGxlbmd0aCAtIE1JTl9NQVRDSCAqL1xuICAgIGRpc3QtLTsgICAgICAgICAgICAgLyogZGlzdCA9IG1hdGNoIGRpc3RhbmNlIC0gMSAqL1xuICAgIC8vQXNzZXJ0KCh1c2gpZGlzdCA8ICh1c2gpTUFYX0RJU1QocykgJiZcbiAgICAvLyAgICAgICAodXNoKWxjIDw9ICh1c2gpKE1BWF9NQVRDSC1NSU5fTUFUQ0gpICYmXG4gICAgLy8gICAgICAgKHVzaClkX2NvZGUoZGlzdCkgPCAodXNoKURfQ09ERVMsICBcIl90cl90YWxseTogYmFkIG1hdGNoXCIpO1xuXG4gICAgcy5keW5fbHRyZWVbKF9sZW5ndGhfY29kZVtsY10gKyBMSVRFUkFMUyArIDEpICogMl0vKi5GcmVxKi8rKztcbiAgICBzLmR5bl9kdHJlZVtkX2NvZGUoZGlzdCkgKiAyXS8qLkZyZXEqLysrO1xuICB9XG5cbi8vICghKSBUaGlzIGJsb2NrIGlzIGRpc2FibGVkIGluIHpsaWIgZGVmYXVsdHMsXG4vLyBkb24ndCBlbmFibGUgaXQgZm9yIGJpbmFyeSBjb21wYXRpYmlsaXR5XG5cbi8vI2lmZGVmIFRSVU5DQVRFX0JMT0NLXG4vLyAgLyogVHJ5IHRvIGd1ZXNzIGlmIGl0IGlzIHByb2ZpdGFibGUgdG8gc3RvcCB0aGUgY3VycmVudCBibG9jayBoZXJlICovXG4vLyAgaWYgKChzLmxhc3RfbGl0ICYgMHgxZmZmKSA9PT0gMCAmJiBzLmxldmVsID4gMikge1xuLy8gICAgLyogQ29tcHV0ZSBhbiB1cHBlciBib3VuZCBmb3IgdGhlIGNvbXByZXNzZWQgbGVuZ3RoICovXG4vLyAgICBvdXRfbGVuZ3RoID0gcy5sYXN0X2xpdCo4O1xuLy8gICAgaW5fbGVuZ3RoID0gcy5zdHJzdGFydCAtIHMuYmxvY2tfc3RhcnQ7XG4vL1xuLy8gICAgZm9yIChkY29kZSA9IDA7IGRjb2RlIDwgRF9DT0RFUzsgZGNvZGUrKykge1xuLy8gICAgICBvdXRfbGVuZ3RoICs9IHMuZHluX2R0cmVlW2Rjb2RlKjJdLyouRnJlcSovICogKDUgKyBleHRyYV9kYml0c1tkY29kZV0pO1xuLy8gICAgfVxuLy8gICAgb3V0X2xlbmd0aCA+Pj49IDM7XG4vLyAgICAvL1RyYWNldigoc3RkZXJyLFwiXFxubGFzdF9saXQgJXUsIGluICVsZCwgb3V0IH4lbGQoJWxkJSUpIFwiLFxuLy8gICAgLy8gICAgICAgcy0+bGFzdF9saXQsIGluX2xlbmd0aCwgb3V0X2xlbmd0aCxcbi8vICAgIC8vICAgICAgIDEwMEwgLSBvdXRfbGVuZ3RoKjEwMEwvaW5fbGVuZ3RoKSk7XG4vLyAgICBpZiAocy5tYXRjaGVzIDwgKHMubGFzdF9saXQ+PjEpLyppbnQgLzIqLyAmJiBvdXRfbGVuZ3RoIDwgKGluX2xlbmd0aD4+MSkvKmludCAvMiovKSB7XG4vLyAgICAgIHJldHVybiB0cnVlO1xuLy8gICAgfVxuLy8gIH1cbi8vI2VuZGlmXG5cbiAgcmV0dXJuIChzLmxhc3RfbGl0ID09PSBzLmxpdF9idWZzaXplIC0gMSk7XG4gIC8qIFdlIGF2b2lkIGVxdWFsaXR5IHdpdGggbGl0X2J1ZnNpemUgYmVjYXVzZSBvZiB3cmFwYXJvdW5kIGF0IDY0S1xuICAgKiBvbiAxNiBiaXQgbWFjaGluZXMgYW5kIGJlY2F1c2Ugc3RvcmVkIGJsb2NrcyBhcmUgcmVzdHJpY3RlZCB0b1xuICAgKiA2NEstMSBieXRlcy5cbiAgICovXG59XG5cbmV4cG9ydHMuX3RyX2luaXQgID0gX3RyX2luaXQ7XG5leHBvcnRzLl90cl9zdG9yZWRfYmxvY2sgPSBfdHJfc3RvcmVkX2Jsb2NrO1xuZXhwb3J0cy5fdHJfZmx1c2hfYmxvY2sgID0gX3RyX2ZsdXNoX2Jsb2NrO1xuZXhwb3J0cy5fdHJfdGFsbHkgPSBfdHJfdGFsbHk7XG5leHBvcnRzLl90cl9hbGlnbiA9IF90cl9hbGlnbjtcbiJdLCJuYW1lcyI6WyJ1dGlscyIsInJlcXVpcmUiLCJaX0ZJWEVEIiwiWl9CSU5BUlkiLCJaX1RFWFQiLCJaX1VOS05PV04iLCJ6ZXJvIiwiYnVmIiwibGVuIiwibGVuZ3RoIiwiU1RPUkVEX0JMT0NLIiwiU1RBVElDX1RSRUVTIiwiRFlOX1RSRUVTIiwiTUlOX01BVENIIiwiTUFYX01BVENIIiwiTEVOR1RIX0NPREVTIiwiTElURVJBTFMiLCJMX0NPREVTIiwiRF9DT0RFUyIsIkJMX0NPREVTIiwiSEVBUF9TSVpFIiwiTUFYX0JJVFMiLCJCdWZfc2l6ZSIsIk1BWF9CTF9CSVRTIiwiRU5EX0JMT0NLIiwiUkVQXzNfNiIsIlJFUFpfM18xMCIsIlJFUFpfMTFfMTM4IiwiZXh0cmFfbGJpdHMiLCJleHRyYV9kYml0cyIsImV4dHJhX2JsYml0cyIsImJsX29yZGVyIiwiRElTVF9DT0RFX0xFTiIsInN0YXRpY19sdHJlZSIsIkFycmF5Iiwic3RhdGljX2R0cmVlIiwiX2Rpc3RfY29kZSIsIl9sZW5ndGhfY29kZSIsImJhc2VfbGVuZ3RoIiwiYmFzZV9kaXN0IiwiU3RhdGljVHJlZURlc2MiLCJzdGF0aWNfdHJlZSIsImV4dHJhX2JpdHMiLCJleHRyYV9iYXNlIiwiZWxlbXMiLCJtYXhfbGVuZ3RoIiwiaGFzX3N0cmVlIiwic3RhdGljX2xfZGVzYyIsInN0YXRpY19kX2Rlc2MiLCJzdGF0aWNfYmxfZGVzYyIsIlRyZWVEZXNjIiwiZHluX3RyZWUiLCJzdGF0X2Rlc2MiLCJtYXhfY29kZSIsImRfY29kZSIsImRpc3QiLCJwdXRfc2hvcnQiLCJzIiwidyIsInBlbmRpbmdfYnVmIiwicGVuZGluZyIsInNlbmRfYml0cyIsInZhbHVlIiwiYmlfdmFsaWQiLCJiaV9idWYiLCJzZW5kX2NvZGUiLCJjIiwidHJlZSIsImJpX3JldmVyc2UiLCJjb2RlIiwicmVzIiwiYmlfZmx1c2giLCJnZW5fYml0bGVuIiwiZGVzYyIsInN0cmVlIiwiZXh0cmEiLCJiYXNlIiwiaCIsIm4iLCJtIiwiYml0cyIsInhiaXRzIiwiZiIsIm92ZXJmbG93IiwiYmxfY291bnQiLCJoZWFwIiwiaGVhcF9tYXgiLCJvcHRfbGVuIiwic3RhdGljX2xlbiIsImdlbl9jb2RlcyIsIm5leHRfY29kZSIsInRyX3N0YXRpY19pbml0IiwiaW5pdF9ibG9jayIsImR5bl9sdHJlZSIsImR5bl9kdHJlZSIsImJsX3RyZWUiLCJsYXN0X2xpdCIsIm1hdGNoZXMiLCJiaV93aW5kdXAiLCJjb3B5X2Jsb2NrIiwiaGVhZGVyIiwiYXJyYXlTZXQiLCJ3aW5kb3ciLCJzbWFsbGVyIiwiZGVwdGgiLCJfbjIiLCJfbTIiLCJwcWRvd25oZWFwIiwiayIsInYiLCJqIiwiaGVhcF9sZW4iLCJjb21wcmVzc19ibG9jayIsImx0cmVlIiwiZHRyZWUiLCJsYyIsImx4IiwiZF9idWYiLCJsX2J1ZiIsImJ1aWxkX3RyZWUiLCJub2RlIiwic2Nhbl90cmVlIiwicHJldmxlbiIsImN1cmxlbiIsIm5leHRsZW4iLCJjb3VudCIsIm1heF9jb3VudCIsIm1pbl9jb3VudCIsInNlbmRfdHJlZSIsImJ1aWxkX2JsX3RyZWUiLCJtYXhfYmxpbmRleCIsImxfZGVzYyIsImRfZGVzYyIsImJsX2Rlc2MiLCJzZW5kX2FsbF90cmVlcyIsImxjb2RlcyIsImRjb2RlcyIsImJsY29kZXMiLCJyYW5rIiwiZGV0ZWN0X2RhdGFfdHlwZSIsImJsYWNrX21hc2siLCJzdGF0aWNfaW5pdF9kb25lIiwiX3RyX2luaXQiLCJfdHJfc3RvcmVkX2Jsb2NrIiwic3RvcmVkX2xlbiIsImxhc3QiLCJfdHJfYWxpZ24iLCJfdHJfZmx1c2hfYmxvY2siLCJvcHRfbGVuYiIsInN0YXRpY19sZW5iIiwibGV2ZWwiLCJzdHJtIiwiZGF0YV90eXBlIiwic3RyYXRlZ3kiLCJfdHJfdGFsbHkiLCJsaXRfYnVmc2l6ZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/trees.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/zstream.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/zstream.js ***!
  \************************************************************************************/
/***/ ((module) => {

eval("\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nfunction ZStream() {\n    /* next input byte */ this.input = null; // JS specific, because we have no pointers\n    this.next_in = 0;\n    /* number of bytes available at input */ this.avail_in = 0;\n    /* total number of input bytes read so far */ this.total_in = 0;\n    /* next output byte should be put there */ this.output = null; // JS specific, because we have no pointers\n    this.next_out = 0;\n    /* remaining free space at output */ this.avail_out = 0;\n    /* total number of bytes output so far */ this.total_out = 0;\n    /* last error message, NULL if no error */ this.msg = \"\" /*Z_NULL*/ ;\n    /* not visible by applications */ this.state = null;\n    /* best guess about the data type: binary or text */ this.data_type = 2 /*Z_UNKNOWN*/ ;\n    /* adler32 value of the uncompressed data */ this.adler = 0;\n}\nmodule.exports = ZStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHBkZi1saWIvc3RhbmRhcmQtZm9udHMvbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvenN0cmVhbS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLGdEQUFnRDtBQUNoRCxrREFBa0Q7QUFDbEQsRUFBRTtBQUNGLG9FQUFvRTtBQUNwRSx3RUFBd0U7QUFDeEUseUNBQXlDO0FBQ3pDLEVBQUU7QUFDRix3RUFBd0U7QUFDeEUseUVBQXlFO0FBQ3pFLGlEQUFpRDtBQUNqRCxFQUFFO0FBQ0YsMEVBQTBFO0FBQzFFLHlFQUF5RTtBQUN6RSwwRUFBMEU7QUFDMUUscUNBQXFDO0FBQ3JDLDZFQUE2RTtBQUM3RSxtREFBbUQ7QUFDbkQsNkVBQTZFO0FBRTdFLFNBQVNBO0lBQ1AsbUJBQW1CLEdBQ25CLElBQUksQ0FBQ0MsS0FBSyxHQUFHLE1BQU0sMkNBQTJDO0lBQzlELElBQUksQ0FBQ0MsT0FBTyxHQUFHO0lBQ2Ysc0NBQXNDLEdBQ3RDLElBQUksQ0FBQ0MsUUFBUSxHQUFHO0lBQ2hCLDJDQUEyQyxHQUMzQyxJQUFJLENBQUNDLFFBQVEsR0FBRztJQUNoQix3Q0FBd0MsR0FDeEMsSUFBSSxDQUFDQyxNQUFNLEdBQUcsTUFBTSwyQ0FBMkM7SUFDL0QsSUFBSSxDQUFDQyxRQUFRLEdBQUc7SUFDaEIsa0NBQWtDLEdBQ2xDLElBQUksQ0FBQ0MsU0FBUyxHQUFHO0lBQ2pCLHVDQUF1QyxHQUN2QyxJQUFJLENBQUNDLFNBQVMsR0FBRztJQUNqQix3Q0FBd0MsR0FDeEMsSUFBSSxDQUFDQyxHQUFHLEdBQUcsR0FBRSxRQUFRO0lBQ3JCLCtCQUErQixHQUMvQixJQUFJLENBQUNDLEtBQUssR0FBRztJQUNiLGtEQUFrRCxHQUNsRCxJQUFJLENBQUNDLFNBQVMsR0FBRyxFQUFDLFdBQVc7SUFDN0IsMENBQTBDLEdBQzFDLElBQUksQ0FBQ0MsS0FBSyxHQUFHO0FBQ2Y7QUFFQUMsT0FBT0MsT0FBTyxHQUFHZCIsInNvdXJjZXMiOlsid2VicGFjazovL2NpdmlsLWVuZ2luZWVyaW5nLXBsYXRmb3JtLy4vbm9kZV9tb2R1bGVzL0BwZGYtbGliL3N0YW5kYXJkLWZvbnRzL25vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL3pzdHJlYW0uanM/YzU4MCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxuZnVuY3Rpb24gWlN0cmVhbSgpIHtcbiAgLyogbmV4dCBpbnB1dCBieXRlICovXG4gIHRoaXMuaW5wdXQgPSBudWxsOyAvLyBKUyBzcGVjaWZpYywgYmVjYXVzZSB3ZSBoYXZlIG5vIHBvaW50ZXJzXG4gIHRoaXMubmV4dF9pbiA9IDA7XG4gIC8qIG51bWJlciBvZiBieXRlcyBhdmFpbGFibGUgYXQgaW5wdXQgKi9cbiAgdGhpcy5hdmFpbF9pbiA9IDA7XG4gIC8qIHRvdGFsIG51bWJlciBvZiBpbnB1dCBieXRlcyByZWFkIHNvIGZhciAqL1xuICB0aGlzLnRvdGFsX2luID0gMDtcbiAgLyogbmV4dCBvdXRwdXQgYnl0ZSBzaG91bGQgYmUgcHV0IHRoZXJlICovXG4gIHRoaXMub3V0cHV0ID0gbnVsbDsgLy8gSlMgc3BlY2lmaWMsIGJlY2F1c2Ugd2UgaGF2ZSBubyBwb2ludGVyc1xuICB0aGlzLm5leHRfb3V0ID0gMDtcbiAgLyogcmVtYWluaW5nIGZyZWUgc3BhY2UgYXQgb3V0cHV0ICovXG4gIHRoaXMuYXZhaWxfb3V0ID0gMDtcbiAgLyogdG90YWwgbnVtYmVyIG9mIGJ5dGVzIG91dHB1dCBzbyBmYXIgKi9cbiAgdGhpcy50b3RhbF9vdXQgPSAwO1xuICAvKiBsYXN0IGVycm9yIG1lc3NhZ2UsIE5VTEwgaWYgbm8gZXJyb3IgKi9cbiAgdGhpcy5tc2cgPSAnJy8qWl9OVUxMKi87XG4gIC8qIG5vdCB2aXNpYmxlIGJ5IGFwcGxpY2F0aW9ucyAqL1xuICB0aGlzLnN0YXRlID0gbnVsbDtcbiAgLyogYmVzdCBndWVzcyBhYm91dCB0aGUgZGF0YSB0eXBlOiBiaW5hcnkgb3IgdGV4dCAqL1xuICB0aGlzLmRhdGFfdHlwZSA9IDIvKlpfVU5LTk9XTiovO1xuICAvKiBhZGxlcjMyIHZhbHVlIG9mIHRoZSB1bmNvbXByZXNzZWQgZGF0YSAqL1xuICB0aGlzLmFkbGVyID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBaU3RyZWFtO1xuIl0sIm5hbWVzIjpbIlpTdHJlYW0iLCJpbnB1dCIsIm5leHRfaW4iLCJhdmFpbF9pbiIsInRvdGFsX2luIiwib3V0cHV0IiwibmV4dF9vdXQiLCJhdmFpbF9vdXQiLCJ0b3RhbF9vdXQiLCJtc2ciLCJzdGF0ZSIsImRhdGFfdHlwZSIsImFkbGVyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@pdf-lib/standard-fonts/node_modules/pako/lib/zlib/zstream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/upng/UPNG.js":
/*!********************************************!*\
  !*** ./node_modules/@pdf-lib/upng/UPNG.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var pako__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pako */ \"(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/index.js\");\n/* harmony import */ var pako__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pako__WEBPACK_IMPORTED_MODULE_0__);\n\nvar UPNG = {};\nUPNG.toRGBA8 = function(out) {\n    var w = out.width, h = out.height;\n    if (out.tabs.acTL == null) return [\n        UPNG.toRGBA8.decodeImage(out.data, w, h, out).buffer\n    ];\n    var frms = [];\n    if (out.frames[0].data == null) out.frames[0].data = out.data;\n    var len = w * h * 4, img = new Uint8Array(len), empty = new Uint8Array(len), prev = new Uint8Array(len);\n    for(var i = 0; i < out.frames.length; i++){\n        var frm = out.frames[i];\n        var fx = frm.rect.x, fy = frm.rect.y, fw = frm.rect.width, fh = frm.rect.height;\n        var fdata = UPNG.toRGBA8.decodeImage(frm.data, fw, fh, out);\n        if (i != 0) for(var j = 0; j < len; j++)prev[j] = img[j];\n        if (frm.blend == 0) UPNG._copyTile(fdata, fw, fh, img, w, h, fx, fy, 0);\n        else if (frm.blend == 1) UPNG._copyTile(fdata, fw, fh, img, w, h, fx, fy, 1);\n        frms.push(img.buffer.slice(0));\n        if (frm.dispose == 0) {} else if (frm.dispose == 1) UPNG._copyTile(empty, fw, fh, img, w, h, fx, fy, 0);\n        else if (frm.dispose == 2) for(var j = 0; j < len; j++)img[j] = prev[j];\n    }\n    return frms;\n};\nUPNG.toRGBA8.decodeImage = function(data, w, h, out) {\n    var area = w * h, bpp = UPNG.decode._getBPP(out);\n    var bpl = Math.ceil(w * bpp / 8); // bytes per line\n    var bf = new Uint8Array(area * 4), bf32 = new Uint32Array(bf.buffer);\n    var ctype = out.ctype, depth = out.depth;\n    var rs = UPNG._bin.readUshort;\n    //console.log(ctype, depth);\n    var time = Date.now();\n    if (ctype == 6) {\n        var qarea = area << 2;\n        if (depth == 8) for(var i = 0; i < qarea; i += 4){\n            bf[i] = data[i];\n            bf[i + 1] = data[i + 1];\n            bf[i + 2] = data[i + 2];\n            bf[i + 3] = data[i + 3];\n        }\n        if (depth == 16) for(var i = 0; i < qarea; i++){\n            bf[i] = data[i << 1];\n        }\n    } else if (ctype == 2) {\n        var ts = out.tabs[\"tRNS\"];\n        if (ts == null) {\n            if (depth == 8) for(var i = 0; i < area; i++){\n                var ti = i * 3;\n                bf32[i] = 255 << 24 | data[ti + 2] << 16 | data[ti + 1] << 8 | data[ti];\n            }\n            if (depth == 16) for(var i = 0; i < area; i++){\n                var ti = i * 6;\n                bf32[i] = 255 << 24 | data[ti + 4] << 16 | data[ti + 2] << 8 | data[ti];\n            }\n        } else {\n            var tr = ts[0], tg = ts[1], tb = ts[2];\n            if (depth == 8) for(var i = 0; i < area; i++){\n                var qi = i << 2, ti = i * 3;\n                bf32[i] = 255 << 24 | data[ti + 2] << 16 | data[ti + 1] << 8 | data[ti];\n                if (data[ti] == tr && data[ti + 1] == tg && data[ti + 2] == tb) bf[qi + 3] = 0;\n            }\n            if (depth == 16) for(var i = 0; i < area; i++){\n                var qi = i << 2, ti = i * 6;\n                bf32[i] = 255 << 24 | data[ti + 4] << 16 | data[ti + 2] << 8 | data[ti];\n                if (rs(data, ti) == tr && rs(data, ti + 2) == tg && rs(data, ti + 4) == tb) bf[qi + 3] = 0;\n            }\n        }\n    } else if (ctype == 3) {\n        var p = out.tabs[\"PLTE\"], ap = out.tabs[\"tRNS\"], tl = ap ? ap.length : 0;\n        //console.log(p, ap);\n        if (depth == 1) for(var y = 0; y < h; y++){\n            var s0 = y * bpl, t0 = y * w;\n            for(var i = 0; i < w; i++){\n                var qi = t0 + i << 2, j = data[s0 + (i >> 3)] >> 7 - ((i & 7) << 0) & 1, cj = 3 * j;\n                bf[qi] = p[cj];\n                bf[qi + 1] = p[cj + 1];\n                bf[qi + 2] = p[cj + 2];\n                bf[qi + 3] = j < tl ? ap[j] : 255;\n            }\n        }\n        if (depth == 2) for(var y = 0; y < h; y++){\n            var s0 = y * bpl, t0 = y * w;\n            for(var i = 0; i < w; i++){\n                var qi = t0 + i << 2, j = data[s0 + (i >> 2)] >> 6 - ((i & 3) << 1) & 3, cj = 3 * j;\n                bf[qi] = p[cj];\n                bf[qi + 1] = p[cj + 1];\n                bf[qi + 2] = p[cj + 2];\n                bf[qi + 3] = j < tl ? ap[j] : 255;\n            }\n        }\n        if (depth == 4) for(var y = 0; y < h; y++){\n            var s0 = y * bpl, t0 = y * w;\n            for(var i = 0; i < w; i++){\n                var qi = t0 + i << 2, j = data[s0 + (i >> 1)] >> 4 - ((i & 1) << 2) & 15, cj = 3 * j;\n                bf[qi] = p[cj];\n                bf[qi + 1] = p[cj + 1];\n                bf[qi + 2] = p[cj + 2];\n                bf[qi + 3] = j < tl ? ap[j] : 255;\n            }\n        }\n        if (depth == 8) for(var i = 0; i < area; i++){\n            var qi = i << 2, j = data[i], cj = 3 * j;\n            bf[qi] = p[cj];\n            bf[qi + 1] = p[cj + 1];\n            bf[qi + 2] = p[cj + 2];\n            bf[qi + 3] = j < tl ? ap[j] : 255;\n        }\n    } else if (ctype == 4) {\n        if (depth == 8) for(var i = 0; i < area; i++){\n            var qi = i << 2, di = i << 1, gr = data[di];\n            bf[qi] = gr;\n            bf[qi + 1] = gr;\n            bf[qi + 2] = gr;\n            bf[qi + 3] = data[di + 1];\n        }\n        if (depth == 16) for(var i = 0; i < area; i++){\n            var qi = i << 2, di = i << 2, gr = data[di];\n            bf[qi] = gr;\n            bf[qi + 1] = gr;\n            bf[qi + 2] = gr;\n            bf[qi + 3] = data[di + 2];\n        }\n    } else if (ctype == 0) {\n        var tr = out.tabs[\"tRNS\"] ? out.tabs[\"tRNS\"] : -1;\n        for(var y = 0; y < h; y++){\n            var off = y * bpl, to = y * w;\n            if (depth == 1) for(var x = 0; x < w; x++){\n                var gr = 255 * (data[off + (x >>> 3)] >>> 7 - (x & 7) & 1), al = gr == tr * 255 ? 0 : 255;\n                bf32[to + x] = al << 24 | gr << 16 | gr << 8 | gr;\n            }\n            else if (depth == 2) for(var x = 0; x < w; x++){\n                var gr = 85 * (data[off + (x >>> 2)] >>> 6 - ((x & 3) << 1) & 3), al = gr == tr * 85 ? 0 : 255;\n                bf32[to + x] = al << 24 | gr << 16 | gr << 8 | gr;\n            }\n            else if (depth == 4) for(var x = 0; x < w; x++){\n                var gr = 17 * (data[off + (x >>> 1)] >>> 4 - ((x & 1) << 2) & 15), al = gr == tr * 17 ? 0 : 255;\n                bf32[to + x] = al << 24 | gr << 16 | gr << 8 | gr;\n            }\n            else if (depth == 8) for(var x = 0; x < w; x++){\n                var gr = data[off + x], al = gr == tr ? 0 : 255;\n                bf32[to + x] = al << 24 | gr << 16 | gr << 8 | gr;\n            }\n            else if (depth == 16) for(var x = 0; x < w; x++){\n                var gr = data[off + (x << 1)], al = rs(data, off + (x << i)) == tr ? 0 : 255;\n                bf32[to + x] = al << 24 | gr << 16 | gr << 8 | gr;\n            }\n        }\n    }\n    //console.log(Date.now()-time);\n    return bf;\n};\nUPNG.decode = function(buff) {\n    var data = new Uint8Array(buff), offset = 8, bin = UPNG._bin, rUs = bin.readUshort, rUi = bin.readUint;\n    var out = {\n        tabs: {},\n        frames: []\n    };\n    var dd = new Uint8Array(data.length), doff = 0; // put all IDAT data into it\n    var fd, foff = 0; // frames\n    var mgck = [\n        0x89,\n        0x50,\n        0x4e,\n        0x47,\n        0x0d,\n        0x0a,\n        0x1a,\n        0x0a\n    ];\n    for(var i = 0; i < 8; i++)if (data[i] != mgck[i]) throw \"The input is not a PNG file!\";\n    while(offset < data.length){\n        var len = bin.readUint(data, offset);\n        offset += 4;\n        var type = bin.readASCII(data, offset, 4);\n        offset += 4;\n        //console.log(type,len);\n        if (type == \"IHDR\") {\n            UPNG.decode._IHDR(data, offset, out);\n        } else if (type == \"IDAT\") {\n            for(var i = 0; i < len; i++)dd[doff + i] = data[offset + i];\n            doff += len;\n        } else if (type == \"acTL\") {\n            out.tabs[type] = {\n                num_frames: rUi(data, offset),\n                num_plays: rUi(data, offset + 4)\n            };\n            fd = new Uint8Array(data.length);\n        } else if (type == \"fcTL\") {\n            if (foff != 0) {\n                var fr = out.frames[out.frames.length - 1];\n                fr.data = UPNG.decode._decompress(out, fd.slice(0, foff), fr.rect.width, fr.rect.height);\n                foff = 0;\n            }\n            var rct = {\n                x: rUi(data, offset + 12),\n                y: rUi(data, offset + 16),\n                width: rUi(data, offset + 4),\n                height: rUi(data, offset + 8)\n            };\n            var del = rUs(data, offset + 22);\n            del = rUs(data, offset + 20) / (del == 0 ? 100 : del);\n            var frm = {\n                rect: rct,\n                delay: Math.round(del * 1000),\n                dispose: data[offset + 24],\n                blend: data[offset + 25]\n            };\n            //console.log(frm);\n            out.frames.push(frm);\n        } else if (type == \"fdAT\") {\n            for(var i = 0; i < len - 4; i++)fd[foff + i] = data[offset + i + 4];\n            foff += len - 4;\n        } else if (type == \"pHYs\") {\n            out.tabs[type] = [\n                bin.readUint(data, offset),\n                bin.readUint(data, offset + 4),\n                data[offset + 8]\n            ];\n        } else if (type == \"cHRM\") {\n            out.tabs[type] = [];\n            for(var i = 0; i < 8; i++)out.tabs[type].push(bin.readUint(data, offset + i * 4));\n        } else if (type == \"tEXt\") {\n            if (out.tabs[type] == null) out.tabs[type] = {};\n            var nz = bin.nextZero(data, offset);\n            var keyw = bin.readASCII(data, offset, nz - offset);\n            var text = bin.readASCII(data, nz + 1, offset + len - nz - 1);\n            out.tabs[type][keyw] = text;\n        } else if (type == \"iTXt\") {\n            if (out.tabs[type] == null) out.tabs[type] = {};\n            var nz = 0, off = offset;\n            nz = bin.nextZero(data, off);\n            var keyw = bin.readASCII(data, off, nz - off);\n            off = nz + 1;\n            var cflag = data[off], cmeth = data[off + 1];\n            off += 2;\n            nz = bin.nextZero(data, off);\n            var ltag = bin.readASCII(data, off, nz - off);\n            off = nz + 1;\n            nz = bin.nextZero(data, off);\n            var tkeyw = bin.readUTF8(data, off, nz - off);\n            off = nz + 1;\n            var text = bin.readUTF8(data, off, len - (off - offset));\n            out.tabs[type][keyw] = text;\n        } else if (type == \"PLTE\") {\n            out.tabs[type] = bin.readBytes(data, offset, len);\n        } else if (type == \"hIST\") {\n            var pl = out.tabs[\"PLTE\"].length / 3;\n            out.tabs[type] = [];\n            for(var i = 0; i < pl; i++)out.tabs[type].push(rUs(data, offset + i * 2));\n        } else if (type == \"tRNS\") {\n            if (out.ctype == 3) out.tabs[type] = bin.readBytes(data, offset, len);\n            else if (out.ctype == 0) out.tabs[type] = rUs(data, offset);\n            else if (out.ctype == 2) out.tabs[type] = [\n                rUs(data, offset),\n                rUs(data, offset + 2),\n                rUs(data, offset + 4)\n            ];\n        //else console.log(\"tRNS for unsupported color type\",out.ctype, len);\n        } else if (type == \"gAMA\") out.tabs[type] = bin.readUint(data, offset) / 100000;\n        else if (type == \"sRGB\") out.tabs[type] = data[offset];\n        else if (type == \"bKGD\") {\n            if (out.ctype == 0 || out.ctype == 4) out.tabs[type] = [\n                rUs(data, offset)\n            ];\n            else if (out.ctype == 2 || out.ctype == 6) out.tabs[type] = [\n                rUs(data, offset),\n                rUs(data, offset + 2),\n                rUs(data, offset + 4)\n            ];\n            else if (out.ctype == 3) out.tabs[type] = data[offset];\n        } else if (type == \"IEND\") {\n            break;\n        }\n        //else {  log(\"unknown chunk type\", type, len);  }\n        offset += len;\n        var crc = bin.readUint(data, offset);\n        offset += 4;\n    }\n    if (foff != 0) {\n        var fr = out.frames[out.frames.length - 1];\n        fr.data = UPNG.decode._decompress(out, fd.slice(0, foff), fr.rect.width, fr.rect.height);\n        foff = 0;\n    }\n    out.data = UPNG.decode._decompress(out, dd, out.width, out.height);\n    delete out.compress;\n    delete out.interlace;\n    delete out.filter;\n    return out;\n};\nUPNG.decode._decompress = function(out, dd, w, h) {\n    var time = Date.now();\n    var bpp = UPNG.decode._getBPP(out), bpl = Math.ceil(w * bpp / 8), buff = new Uint8Array((bpl + 1 + out.interlace) * h);\n    dd = UPNG.decode._inflate(dd, buff);\n    //console.log(dd.length, buff.length);\n    //console.log(Date.now()-time);\n    var time = Date.now();\n    if (out.interlace == 0) dd = UPNG.decode._filterZero(dd, out, 0, w, h);\n    else if (out.interlace == 1) dd = UPNG.decode._readInterlace(dd, out);\n    //console.log(Date.now()-time);\n    return dd;\n};\nUPNG.decode._inflate = function(data, buff) {\n    var out = UPNG[\"inflateRaw\"](new Uint8Array(data.buffer, 2, data.length - 6), buff);\n    return out;\n};\nUPNG.inflateRaw = function() {\n    var H = {};\n    H.H = {};\n    H.H.N = function(N, W) {\n        var R = Uint8Array, i = 0, m = 0, J = 0, h = 0, Q = 0, X = 0, u = 0, w = 0, d = 0, v, C;\n        if (N[0] == 3 && N[1] == 0) return W ? W : new R(0);\n        var V = H.H, n = V.b, A = V.e, l = V.R, M = V.n, I = V.A, e = V.Z, b = V.m, Z = W == null;\n        if (Z) W = new R(N.length >>> 2 << 3);\n        while(i == 0){\n            i = n(N, d, 1);\n            m = n(N, d + 1, 2);\n            d += 3;\n            if (m == 0) {\n                if ((d & 7) != 0) d += 8 - (d & 7);\n                var D = (d >>> 3) + 4, q = N[D - 4] | N[D - 3] << 8;\n                if (Z) W = H.H.W(W, w + q);\n                W.set(new R(N.buffer, N.byteOffset + D, q), w);\n                d = D + q << 3;\n                w += q;\n                continue;\n            }\n            if (Z) W = H.H.W(W, w + (1 << 17));\n            if (m == 1) {\n                v = b.J;\n                C = b.h;\n                X = (1 << 9) - 1;\n                u = (1 << 5) - 1;\n            }\n            if (m == 2) {\n                J = A(N, d, 5) + 257;\n                h = A(N, d + 5, 5) + 1;\n                Q = A(N, d + 10, 4) + 4;\n                d += 14;\n                var E = d, j = 1;\n                for(var c = 0; c < 38; c += 2){\n                    b.Q[c] = 0;\n                    b.Q[c + 1] = 0;\n                }\n                for(var c = 0; c < Q; c++){\n                    var K = A(N, d + c * 3, 3);\n                    b.Q[(b.X[c] << 1) + 1] = K;\n                    if (K > j) j = K;\n                }\n                d += 3 * Q;\n                M(b.Q, j);\n                I(b.Q, j, b.u);\n                v = b.w;\n                C = b.d;\n                d = l(b.u, (1 << j) - 1, J + h, N, d, b.v);\n                var r = V.V(b.v, 0, J, b.C);\n                X = (1 << r) - 1;\n                var S = V.V(b.v, J, h, b.D);\n                u = (1 << S) - 1;\n                M(b.C, r);\n                I(b.C, r, v);\n                M(b.D, S);\n                I(b.D, S, C);\n            }\n            while(!0){\n                var T = v[e(N, d) & X];\n                d += T & 15;\n                var p = T >>> 4;\n                if (p >>> 8 == 0) {\n                    W[w++] = p;\n                } else if (p == 256) {\n                    break;\n                } else {\n                    var z = w + p - 254;\n                    if (p > 264) {\n                        var _ = b.q[p - 257];\n                        z = w + (_ >>> 3) + A(N, d, _ & 7);\n                        d += _ & 7;\n                    }\n                    var $ = C[e(N, d) & u];\n                    d += $ & 15;\n                    var s = $ >>> 4, Y = b.c[s], a = (Y >>> 4) + n(N, d, Y & 15);\n                    d += Y & 15;\n                    while(w < z){\n                        W[w] = W[w++ - a];\n                        W[w] = W[w++ - a];\n                        W[w] = W[w++ - a];\n                        W[w] = W[w++ - a];\n                    }\n                    w = z;\n                }\n            }\n        }\n        return W.length == w ? W : W.slice(0, w);\n    };\n    H.H.W = function(N, W) {\n        var R = N.length;\n        if (W <= R) return N;\n        var V = new Uint8Array(R << 1);\n        V.set(N, 0);\n        return V;\n    };\n    H.H.R = function(N, W, R, V, n, A) {\n        var l = H.H.e, M = H.H.Z, I = 0;\n        while(I < R){\n            var e = N[M(V, n) & W];\n            n += e & 15;\n            var b = e >>> 4;\n            if (b <= 15) {\n                A[I] = b;\n                I++;\n            } else {\n                var Z = 0, m = 0;\n                if (b == 16) {\n                    m = 3 + l(V, n, 2);\n                    n += 2;\n                    Z = A[I - 1];\n                } else if (b == 17) {\n                    m = 3 + l(V, n, 3);\n                    n += 3;\n                } else if (b == 18) {\n                    m = 11 + l(V, n, 7);\n                    n += 7;\n                }\n                var J = I + m;\n                while(I < J){\n                    A[I] = Z;\n                    I++;\n                }\n            }\n        }\n        return n;\n    };\n    H.H.V = function(N, W, R, V) {\n        var n = 0, A = 0, l = V.length >>> 1;\n        while(A < R){\n            var M = N[A + W];\n            V[A << 1] = 0;\n            V[(A << 1) + 1] = M;\n            if (M > n) n = M;\n            A++;\n        }\n        while(A < l){\n            V[A << 1] = 0;\n            V[(A << 1) + 1] = 0;\n            A++;\n        }\n        return n;\n    };\n    H.H.n = function(N, W) {\n        var R = H.H.m, V = N.length, n, A, l, M, I, e = R.j;\n        for(var M = 0; M <= W; M++)e[M] = 0;\n        for(M = 1; M < V; M += 2)e[N[M]]++;\n        var b = R.K;\n        n = 0;\n        e[0] = 0;\n        for(A = 1; A <= W; A++){\n            n = n + e[A - 1] << 1;\n            b[A] = n;\n        }\n        for(l = 0; l < V; l += 2){\n            I = N[l + 1];\n            if (I != 0) {\n                N[l] = b[I];\n                b[I]++;\n            }\n        }\n    };\n    H.H.A = function(N, W, R) {\n        var V = N.length, n = H.H.m, A = n.r;\n        for(var l = 0; l < V; l += 2)if (N[l + 1] != 0) {\n            var M = l >> 1, I = N[l + 1], e = M << 4 | I, b = W - I, Z = N[l] << b, m = Z + (1 << b);\n            while(Z != m){\n                var J = A[Z] >>> 15 - W;\n                R[J] = e;\n                Z++;\n            }\n        }\n    };\n    H.H.l = function(N, W) {\n        var R = H.H.m.r, V = 15 - W;\n        for(var n = 0; n < N.length; n += 2){\n            var A = N[n] << W - N[n + 1];\n            N[n] = R[A] >>> V;\n        }\n    };\n    H.H.M = function(N, W, R) {\n        R = R << (W & 7);\n        var V = W >>> 3;\n        N[V] |= R;\n        N[V + 1] |= R >>> 8;\n    };\n    H.H.I = function(N, W, R) {\n        R = R << (W & 7);\n        var V = W >>> 3;\n        N[V] |= R;\n        N[V + 1] |= R >>> 8;\n        N[V + 2] |= R >>> 16;\n    };\n    H.H.e = function(N, W, R) {\n        return (N[W >>> 3] | N[(W >>> 3) + 1] << 8) >>> (W & 7) & (1 << R) - 1;\n    };\n    H.H.b = function(N, W, R) {\n        return (N[W >>> 3] | N[(W >>> 3) + 1] << 8 | N[(W >>> 3) + 2] << 16) >>> (W & 7) & (1 << R) - 1;\n    };\n    H.H.Z = function(N, W) {\n        return (N[W >>> 3] | N[(W >>> 3) + 1] << 8 | N[(W >>> 3) + 2] << 16) >>> (W & 7);\n    };\n    H.H.i = function(N, W) {\n        return (N[W >>> 3] | N[(W >>> 3) + 1] << 8 | N[(W >>> 3) + 2] << 16 | N[(W >>> 3) + 3] << 24) >>> (W & 7);\n    };\n    H.H.m = function() {\n        var N = Uint16Array, W = Uint32Array;\n        return {\n            K: new N(16),\n            j: new N(16),\n            X: [\n                16,\n                17,\n                18,\n                0,\n                8,\n                7,\n                9,\n                6,\n                10,\n                5,\n                11,\n                4,\n                12,\n                3,\n                13,\n                2,\n                14,\n                1,\n                15\n            ],\n            S: [\n                3,\n                4,\n                5,\n                6,\n                7,\n                8,\n                9,\n                10,\n                11,\n                13,\n                15,\n                17,\n                19,\n                23,\n                27,\n                31,\n                35,\n                43,\n                51,\n                59,\n                67,\n                83,\n                99,\n                115,\n                131,\n                163,\n                195,\n                227,\n                258,\n                999,\n                999,\n                999\n            ],\n            T: [\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                1,\n                1,\n                1,\n                1,\n                2,\n                2,\n                2,\n                2,\n                3,\n                3,\n                3,\n                3,\n                4,\n                4,\n                4,\n                4,\n                5,\n                5,\n                5,\n                5,\n                0,\n                0,\n                0,\n                0\n            ],\n            q: new N(32),\n            p: [\n                1,\n                2,\n                3,\n                4,\n                5,\n                7,\n                9,\n                13,\n                17,\n                25,\n                33,\n                49,\n                65,\n                97,\n                129,\n                193,\n                257,\n                385,\n                513,\n                769,\n                1025,\n                1537,\n                2049,\n                3073,\n                4097,\n                6145,\n                8193,\n                12289,\n                16385,\n                24577,\n                65535,\n                65535\n            ],\n            z: [\n                0,\n                0,\n                0,\n                0,\n                1,\n                1,\n                2,\n                2,\n                3,\n                3,\n                4,\n                4,\n                5,\n                5,\n                6,\n                6,\n                7,\n                7,\n                8,\n                8,\n                9,\n                9,\n                10,\n                10,\n                11,\n                11,\n                12,\n                12,\n                13,\n                13,\n                0,\n                0\n            ],\n            c: new W(32),\n            J: new N(512),\n            _: [],\n            h: new N(32),\n            $: [],\n            w: new N(32768),\n            C: [],\n            v: [],\n            d: new N(32768),\n            D: [],\n            u: new N(512),\n            Q: [],\n            r: new N(1 << 15),\n            s: new W(286),\n            Y: new W(30),\n            a: new W(19),\n            t: new W(15e3),\n            k: new N(1 << 16),\n            g: new N(1 << 15)\n        };\n    }();\n    (function() {\n        var N = H.H.m, W = 1 << 15;\n        for(var R = 0; R < W; R++){\n            var V = R;\n            V = (V & 2863311530) >>> 1 | (V & 1431655765) << 1;\n            V = (V & 3435973836) >>> 2 | (V & 858993459) << 2;\n            V = (V & 4042322160) >>> 4 | (V & 252645135) << 4;\n            V = (V & 4278255360) >>> 8 | (V & 16711935) << 8;\n            N.r[R] = (V >>> 16 | V << 16) >>> 17;\n        }\n        function n(A, l, M) {\n            while(l-- != 0)A.push(0, M);\n        }\n        for(var R = 0; R < 32; R++){\n            N.q[R] = N.S[R] << 3 | N.T[R];\n            N.c[R] = N.p[R] << 4 | N.z[R];\n        }\n        n(N._, 144, 8);\n        n(N._, 255 - 143, 9);\n        n(N._, 279 - 255, 7);\n        n(N._, 287 - 279, 8);\n        H.H.n(N._, 9);\n        H.H.A(N._, 9, N.J);\n        H.H.l(N._, 9);\n        n(N.$, 32, 5);\n        H.H.n(N.$, 5);\n        H.H.A(N.$, 5, N.h);\n        H.H.l(N.$, 5);\n        n(N.Q, 19, 0);\n        n(N.C, 286, 0);\n        n(N.D, 30, 0);\n        n(N.v, 320, 0);\n    })();\n    return H.H.N;\n}();\nUPNG.decode._readInterlace = function(data, out) {\n    var w = out.width, h = out.height;\n    var bpp = UPNG.decode._getBPP(out), cbpp = bpp >> 3, bpl = Math.ceil(w * bpp / 8);\n    var img = new Uint8Array(h * bpl);\n    var di = 0;\n    var starting_row = [\n        0,\n        0,\n        4,\n        0,\n        2,\n        0,\n        1\n    ];\n    var starting_col = [\n        0,\n        4,\n        0,\n        2,\n        0,\n        1,\n        0\n    ];\n    var row_increment = [\n        8,\n        8,\n        8,\n        4,\n        4,\n        2,\n        2\n    ];\n    var col_increment = [\n        8,\n        8,\n        4,\n        4,\n        2,\n        2,\n        1\n    ];\n    var pass = 0;\n    while(pass < 7){\n        var ri = row_increment[pass], ci = col_increment[pass];\n        var sw = 0, sh = 0;\n        var cr = starting_row[pass];\n        while(cr < h){\n            cr += ri;\n            sh++;\n        }\n        var cc = starting_col[pass];\n        while(cc < w){\n            cc += ci;\n            sw++;\n        }\n        var bpll = Math.ceil(sw * bpp / 8);\n        UPNG.decode._filterZero(data, out, di, sw, sh);\n        var y = 0, row = starting_row[pass];\n        while(row < h){\n            var col = starting_col[pass];\n            var cdi = di + y * bpll << 3;\n            while(col < w){\n                if (bpp == 1) {\n                    var val = data[cdi >> 3];\n                    val = val >> 7 - (cdi & 7) & 1;\n                    img[row * bpl + (col >> 3)] |= val << 7 - ((col & 7) << 0);\n                }\n                if (bpp == 2) {\n                    var val = data[cdi >> 3];\n                    val = val >> 6 - (cdi & 7) & 3;\n                    img[row * bpl + (col >> 2)] |= val << 6 - ((col & 3) << 1);\n                }\n                if (bpp == 4) {\n                    var val = data[cdi >> 3];\n                    val = val >> 4 - (cdi & 7) & 15;\n                    img[row * bpl + (col >> 1)] |= val << 4 - ((col & 1) << 2);\n                }\n                if (bpp >= 8) {\n                    var ii = row * bpl + col * cbpp;\n                    for(var j = 0; j < cbpp; j++)img[ii + j] = data[(cdi >> 3) + j];\n                }\n                cdi += bpp;\n                col += ci;\n            }\n            y++;\n            row += ri;\n        }\n        if (sw * sh != 0) di += sh * (1 + bpll);\n        pass = pass + 1;\n    }\n    return img;\n};\nUPNG.decode._getBPP = function(out) {\n    var noc = [\n        1,\n        null,\n        3,\n        1,\n        2,\n        null,\n        4\n    ][out.ctype];\n    return noc * out.depth;\n};\nUPNG.decode._filterZero = function(data, out, off, w, h) {\n    var bpp = UPNG.decode._getBPP(out), bpl = Math.ceil(w * bpp / 8), paeth = UPNG.decode._paeth;\n    bpp = Math.ceil(bpp / 8);\n    var i = 0, di = 1, type = data[off], x = 0;\n    if (type > 1) data[off] = [\n        0,\n        0,\n        1\n    ][type - 2];\n    if (type == 3) for(x = bpp; x < bpl; x++)data[x + 1] = data[x + 1] + (data[x + 1 - bpp] >>> 1) & 255;\n    for(var y = 0; y < h; y++){\n        i = off + y * bpl;\n        di = i + y + 1;\n        type = data[di - 1];\n        x = 0;\n        if (type == 0) for(; x < bpl; x++)data[i + x] = data[di + x];\n        else if (type == 1) {\n            for(; x < bpp; x++)data[i + x] = data[di + x];\n            for(; x < bpl; x++)data[i + x] = data[di + x] + data[i + x - bpp];\n        } else if (type == 2) {\n            for(; x < bpl; x++)data[i + x] = data[di + x] + data[i + x - bpl];\n        } else if (type == 3) {\n            for(; x < bpp; x++)data[i + x] = data[di + x] + (data[i + x - bpl] >>> 1);\n            for(; x < bpl; x++)data[i + x] = data[di + x] + (data[i + x - bpl] + data[i + x - bpp] >>> 1);\n        } else {\n            for(; x < bpp; x++)data[i + x] = data[di + x] + paeth(0, data[i + x - bpl], 0);\n            for(; x < bpl; x++)data[i + x] = data[di + x] + paeth(data[i + x - bpp], data[i + x - bpl], data[i + x - bpp - bpl]);\n        }\n    }\n    return data;\n};\nUPNG.decode._paeth = function(a, b, c) {\n    var p = a + b - c, pa = p - a, pb = p - b, pc = p - c;\n    if (pa * pa <= pb * pb && pa * pa <= pc * pc) return a;\n    else if (pb * pb <= pc * pc) return b;\n    return c;\n};\nUPNG.decode._IHDR = function(data, offset, out) {\n    var bin = UPNG._bin;\n    out.width = bin.readUint(data, offset);\n    offset += 4;\n    out.height = bin.readUint(data, offset);\n    offset += 4;\n    out.depth = data[offset];\n    offset++;\n    out.ctype = data[offset];\n    offset++;\n    out.compress = data[offset];\n    offset++;\n    out.filter = data[offset];\n    offset++;\n    out.interlace = data[offset];\n    offset++;\n};\nUPNG._bin = {\n    nextZero: function(data, p) {\n        while(data[p] != 0)p++;\n        return p;\n    },\n    readUshort: function(buff, p) {\n        return buff[p] << 8 | buff[p + 1];\n    },\n    writeUshort: function(buff, p, n) {\n        buff[p] = n >> 8 & 255;\n        buff[p + 1] = n & 255;\n    },\n    readUint: function(buff, p) {\n        return buff[p] * (256 * 256 * 256) + (buff[p + 1] << 16 | buff[p + 2] << 8 | buff[p + 3]);\n    },\n    writeUint: function(buff, p, n) {\n        buff[p] = n >> 24 & 255;\n        buff[p + 1] = n >> 16 & 255;\n        buff[p + 2] = n >> 8 & 255;\n        buff[p + 3] = n & 255;\n    },\n    readASCII: function(buff, p, l) {\n        var s = \"\";\n        for(var i = 0; i < l; i++)s += String.fromCharCode(buff[p + i]);\n        return s;\n    },\n    writeASCII: function(data, p, s) {\n        for(var i = 0; i < s.length; i++)data[p + i] = s.charCodeAt(i);\n    },\n    readBytes: function(buff, p, l) {\n        var arr = [];\n        for(var i = 0; i < l; i++)arr.push(buff[p + i]);\n        return arr;\n    },\n    pad: function(n) {\n        return n.length < 2 ? \"0\" + n : n;\n    },\n    readUTF8: function(buff, p, l) {\n        var s = \"\", ns;\n        for(var i = 0; i < l; i++)s += \"%\" + UPNG._bin.pad(buff[p + i].toString(16));\n        try {\n            ns = decodeURIComponent(s);\n        } catch (e) {\n            return UPNG._bin.readASCII(buff, p, l);\n        }\n        return ns;\n    }\n};\nUPNG._copyTile = function(sb, sw, sh, tb, tw, th, xoff, yoff, mode) {\n    var w = Math.min(sw, tw), h = Math.min(sh, th);\n    var si = 0, ti = 0;\n    for(var y = 0; y < h; y++)for(var x = 0; x < w; x++){\n        if (xoff >= 0 && yoff >= 0) {\n            si = y * sw + x << 2;\n            ti = (yoff + y) * tw + xoff + x << 2;\n        } else {\n            si = (-yoff + y) * sw - xoff + x << 2;\n            ti = y * tw + x << 2;\n        }\n        if (mode == 0) {\n            tb[ti] = sb[si];\n            tb[ti + 1] = sb[si + 1];\n            tb[ti + 2] = sb[si + 2];\n            tb[ti + 3] = sb[si + 3];\n        } else if (mode == 1) {\n            var fa = sb[si + 3] * (1 / 255), fr = sb[si] * fa, fg = sb[si + 1] * fa, fb = sb[si + 2] * fa;\n            var ba = tb[ti + 3] * (1 / 255), br = tb[ti] * ba, bg = tb[ti + 1] * ba, bb = tb[ti + 2] * ba;\n            var ifa = 1 - fa, oa = fa + ba * ifa, ioa = oa == 0 ? 0 : 1 / oa;\n            tb[ti + 3] = 255 * oa;\n            tb[ti + 0] = (fr + br * ifa) * ioa;\n            tb[ti + 1] = (fg + bg * ifa) * ioa;\n            tb[ti + 2] = (fb + bb * ifa) * ioa;\n        } else if (mode == 2) {\n            var fa = sb[si + 3], fr = sb[si], fg = sb[si + 1], fb = sb[si + 2];\n            var ba = tb[ti + 3], br = tb[ti], bg = tb[ti + 1], bb = tb[ti + 2];\n            if (fa == ba && fr == br && fg == bg && fb == bb) {\n                tb[ti] = 0;\n                tb[ti + 1] = 0;\n                tb[ti + 2] = 0;\n                tb[ti + 3] = 0;\n            } else {\n                tb[ti] = fr;\n                tb[ti + 1] = fg;\n                tb[ti + 2] = fb;\n                tb[ti + 3] = fa;\n            }\n        } else if (mode == 3) {\n            var fa = sb[si + 3], fr = sb[si], fg = sb[si + 1], fb = sb[si + 2];\n            var ba = tb[ti + 3], br = tb[ti], bg = tb[ti + 1], bb = tb[ti + 2];\n            if (fa == ba && fr == br && fg == bg && fb == bb) continue;\n            //if(fa!=255 && ba!=0) return false;\n            if (fa < 220 && ba > 20) return false;\n        }\n    }\n    return true;\n};\nUPNG.encode = function(bufs, w, h, ps, dels, tabs, forbidPlte) {\n    if (ps == null) ps = 0;\n    if (forbidPlte == null) forbidPlte = false;\n    var nimg = UPNG.encode.compress(bufs, w, h, ps, [\n        false,\n        false,\n        false,\n        0,\n        forbidPlte\n    ]);\n    UPNG.encode.compressPNG(nimg, -1);\n    return UPNG.encode._main(nimg, w, h, dels, tabs);\n};\nUPNG.encodeLL = function(bufs, w, h, cc, ac, depth, dels, tabs) {\n    var nimg = {\n        ctype: 0 + (cc == 1 ? 0 : 2) + (ac == 0 ? 0 : 4),\n        depth: depth,\n        frames: []\n    };\n    var time = Date.now();\n    var bipp = (cc + ac) * depth, bipl = bipp * w;\n    for(var i = 0; i < bufs.length; i++)nimg.frames.push({\n        rect: {\n            x: 0,\n            y: 0,\n            width: w,\n            height: h\n        },\n        img: new Uint8Array(bufs[i]),\n        blend: 0,\n        dispose: 1,\n        bpp: Math.ceil(bipp / 8),\n        bpl: Math.ceil(bipl / 8)\n    });\n    UPNG.encode.compressPNG(nimg, 0, true);\n    var out = UPNG.encode._main(nimg, w, h, dels, tabs);\n    return out;\n};\nUPNG.encode._main = function(nimg, w, h, dels, tabs) {\n    if (tabs == null) tabs = {};\n    var crc = UPNG.crc.crc, wUi = UPNG._bin.writeUint, wUs = UPNG._bin.writeUshort, wAs = UPNG._bin.writeASCII;\n    var offset = 8, anim = nimg.frames.length > 1, pltAlpha = false;\n    var leng = 8 + (16 + 5 + 4) + (anim ? 20 : 0);\n    if (tabs[\"sRGB\"] != null) leng += 8 + 1 + 4;\n    if (tabs[\"pHYs\"] != null) leng += 8 + 9 + 4;\n    if (nimg.ctype == 3) {\n        var dl = nimg.plte.length;\n        for(var i = 0; i < dl; i++)if (nimg.plte[i] >>> 24 != 255) pltAlpha = true;\n        leng += 8 + dl * 3 + 4 + (pltAlpha ? 8 + dl * 1 + 4 : 0);\n    }\n    for(var j = 0; j < nimg.frames.length; j++){\n        var fr = nimg.frames[j];\n        if (anim) leng += 38;\n        leng += fr.cimg.length + 12;\n        if (j != 0) leng += 4;\n    }\n    leng += 12;\n    var data = new Uint8Array(leng);\n    var wr = [\n        0x89,\n        0x50,\n        0x4e,\n        0x47,\n        0x0d,\n        0x0a,\n        0x1a,\n        0x0a\n    ];\n    for(var i = 0; i < 8; i++)data[i] = wr[i];\n    wUi(data, offset, 13);\n    offset += 4;\n    wAs(data, offset, \"IHDR\");\n    offset += 4;\n    wUi(data, offset, w);\n    offset += 4;\n    wUi(data, offset, h);\n    offset += 4;\n    data[offset] = nimg.depth;\n    offset++; // depth\n    data[offset] = nimg.ctype;\n    offset++; // ctype\n    data[offset] = 0;\n    offset++; // compress\n    data[offset] = 0;\n    offset++; // filter\n    data[offset] = 0;\n    offset++; // interlace\n    wUi(data, offset, crc(data, offset - 17, 17));\n    offset += 4; // crc\n    // 13 bytes to say, that it is sRGB\n    if (tabs[\"sRGB\"] != null) {\n        wUi(data, offset, 1);\n        offset += 4;\n        wAs(data, offset, \"sRGB\");\n        offset += 4;\n        data[offset] = tabs[\"sRGB\"];\n        offset++;\n        wUi(data, offset, crc(data, offset - 5, 5));\n        offset += 4; // crc\n    }\n    if (tabs[\"pHYs\"] != null) {\n        wUi(data, offset, 9);\n        offset += 4;\n        wAs(data, offset, \"pHYs\");\n        offset += 4;\n        wUi(data, offset, tabs[\"pHYs\"][0]);\n        offset += 4;\n        wUi(data, offset, tabs[\"pHYs\"][1]);\n        offset += 4;\n        data[offset] = tabs[\"pHYs\"][2];\n        offset++;\n        wUi(data, offset, crc(data, offset - 13, 13));\n        offset += 4; // crc\n    }\n    if (anim) {\n        wUi(data, offset, 8);\n        offset += 4;\n        wAs(data, offset, \"acTL\");\n        offset += 4;\n        wUi(data, offset, nimg.frames.length);\n        offset += 4;\n        wUi(data, offset, tabs[\"loop\"] != null ? tabs[\"loop\"] : 0);\n        offset += 4;\n        wUi(data, offset, crc(data, offset - 12, 12));\n        offset += 4; // crc\n    }\n    if (nimg.ctype == 3) {\n        var dl = nimg.plte.length;\n        wUi(data, offset, dl * 3);\n        offset += 4;\n        wAs(data, offset, \"PLTE\");\n        offset += 4;\n        for(var i = 0; i < dl; i++){\n            var ti = i * 3, c = nimg.plte[i], r = c & 255, g = c >>> 8 & 255, b = c >>> 16 & 255;\n            data[offset + ti + 0] = r;\n            data[offset + ti + 1] = g;\n            data[offset + ti + 2] = b;\n        }\n        offset += dl * 3;\n        wUi(data, offset, crc(data, offset - dl * 3 - 4, dl * 3 + 4));\n        offset += 4; // crc\n        if (pltAlpha) {\n            wUi(data, offset, dl);\n            offset += 4;\n            wAs(data, offset, \"tRNS\");\n            offset += 4;\n            for(var i = 0; i < dl; i++)data[offset + i] = nimg.plte[i] >>> 24 & 255;\n            offset += dl;\n            wUi(data, offset, crc(data, offset - dl - 4, dl + 4));\n            offset += 4; // crc\n        }\n    }\n    var fi = 0;\n    for(var j = 0; j < nimg.frames.length; j++){\n        var fr = nimg.frames[j];\n        if (anim) {\n            wUi(data, offset, 26);\n            offset += 4;\n            wAs(data, offset, \"fcTL\");\n            offset += 4;\n            wUi(data, offset, fi++);\n            offset += 4;\n            wUi(data, offset, fr.rect.width);\n            offset += 4;\n            wUi(data, offset, fr.rect.height);\n            offset += 4;\n            wUi(data, offset, fr.rect.x);\n            offset += 4;\n            wUi(data, offset, fr.rect.y);\n            offset += 4;\n            wUs(data, offset, dels[j]);\n            offset += 2;\n            wUs(data, offset, 1000);\n            offset += 2;\n            data[offset] = fr.dispose;\n            offset++; // dispose\n            data[offset] = fr.blend;\n            offset++; // blend\n            wUi(data, offset, crc(data, offset - 30, 30));\n            offset += 4; // crc\n        }\n        var imgd = fr.cimg, dl = imgd.length;\n        wUi(data, offset, dl + (j == 0 ? 0 : 4));\n        offset += 4;\n        var ioff = offset;\n        wAs(data, offset, j == 0 ? \"IDAT\" : \"fdAT\");\n        offset += 4;\n        if (j != 0) {\n            wUi(data, offset, fi++);\n            offset += 4;\n        }\n        data.set(imgd, offset);\n        offset += dl;\n        wUi(data, offset, crc(data, ioff, offset - ioff));\n        offset += 4; // crc\n    }\n    wUi(data, offset, 0);\n    offset += 4;\n    wAs(data, offset, \"IEND\");\n    offset += 4;\n    wUi(data, offset, crc(data, offset - 4, 4));\n    offset += 4; // crc\n    return data.buffer;\n};\nUPNG.encode.compressPNG = function(out, filter, levelZero) {\n    for(var i = 0; i < out.frames.length; i++){\n        var frm = out.frames[i], nw = frm.rect.width, nh = frm.rect.height;\n        var fdata = new Uint8Array(nh * frm.bpl + nh);\n        frm.cimg = UPNG.encode._filterZero(frm.img, nh, frm.bpp, frm.bpl, fdata, filter, levelZero);\n    }\n};\nUPNG.encode.compress = function(bufs, w, h, ps, prms) {\n    //var time = Date.now();\n    var onlyBlend = prms[0], evenCrd = prms[1], forbidPrev = prms[2], minBits = prms[3], forbidPlte = prms[4];\n    var ctype = 6, depth = 8, alphaAnd = 255;\n    for(var j = 0; j < bufs.length; j++){\n        var img = new Uint8Array(bufs[j]), ilen = img.length;\n        for(var i = 0; i < ilen; i += 4)alphaAnd &= img[i + 3];\n    }\n    var gotAlpha = alphaAnd != 255;\n    //console.log(\"alpha check\", Date.now()-time);  time = Date.now();\n    //var brute = gotAlpha && forGIF;\t\t// brute : frames can only be copied, not \"blended\"\n    var frms = UPNG.encode.framize(bufs, w, h, onlyBlend, evenCrd, forbidPrev);\n    //console.log(\"framize\", Date.now()-time);  time = Date.now();\n    var cmap = {}, plte = [], inds = [];\n    if (ps != 0) {\n        var nbufs = [];\n        for(var i = 0; i < frms.length; i++)nbufs.push(frms[i].img.buffer);\n        var abuf = UPNG.encode.concatRGBA(nbufs), qres = UPNG.quantize(abuf, ps);\n        var cof = 0, bb = new Uint8Array(qres.abuf);\n        for(var i = 0; i < frms.length; i++){\n            var ti = frms[i].img, bln = ti.length;\n            inds.push(new Uint8Array(qres.inds.buffer, cof >> 2, bln >> 2));\n            for(var j = 0; j < bln; j += 4){\n                ti[j] = bb[cof + j];\n                ti[j + 1] = bb[cof + j + 1];\n                ti[j + 2] = bb[cof + j + 2];\n                ti[j + 3] = bb[cof + j + 3];\n            }\n            cof += bln;\n        }\n        for(var i = 0; i < qres.plte.length; i++)plte.push(qres.plte[i].est.rgba);\n    //console.log(\"quantize\", Date.now()-time);  time = Date.now();\n    } else {\n        // what if ps==0, but there are <=256 colors?  we still need to detect, if the palette could be used\n        for(var j = 0; j < frms.length; j++){\n            var frm = frms[j], img32 = new Uint32Array(frm.img.buffer), nw = frm.rect.width, ilen = img32.length;\n            var ind = new Uint8Array(ilen);\n            inds.push(ind);\n            for(var i = 0; i < ilen; i++){\n                var c = img32[i];\n                if (i != 0 && c == img32[i - 1]) ind[i] = ind[i - 1];\n                else if (i > nw && c == img32[i - nw]) ind[i] = ind[i - nw];\n                else {\n                    var cmc = cmap[c];\n                    if (cmc == null) {\n                        cmap[c] = cmc = plte.length;\n                        plte.push(c);\n                        if (plte.length >= 300) break;\n                    }\n                    ind[i] = cmc;\n                }\n            }\n        }\n    //console.log(\"make palette\", Date.now()-time);  time = Date.now();\n    }\n    var cc = plte.length; //console.log(\"colors:\",cc);\n    if (cc <= 256 && forbidPlte == false) {\n        if (cc <= 2) depth = 1;\n        else if (cc <= 4) depth = 2;\n        else if (cc <= 16) depth = 4;\n        else depth = 8;\n        depth = Math.max(depth, minBits);\n    }\n    for(var j = 0; j < frms.length; j++){\n        var frm = frms[j], nx = frm.rect.x, ny = frm.rect.y, nw = frm.rect.width, nh = frm.rect.height;\n        var cimg = frm.img, cimg32 = new Uint32Array(cimg.buffer);\n        var bpl = 4 * nw, bpp = 4;\n        if (cc <= 256 && forbidPlte == false) {\n            bpl = Math.ceil(depth * nw / 8);\n            var nimg = new Uint8Array(bpl * nh);\n            var inj = inds[j];\n            for(var y = 0; y < nh; y++){\n                var i = y * bpl, ii = y * nw;\n                if (depth == 8) for(var x = 0; x < nw; x++)nimg[i + x] = inj[ii + x];\n                else if (depth == 4) for(var x = 0; x < nw; x++)nimg[i + (x >> 1)] |= inj[ii + x] << 4 - (x & 1) * 4;\n                else if (depth == 2) for(var x = 0; x < nw; x++)nimg[i + (x >> 2)] |= inj[ii + x] << 6 - (x & 3) * 2;\n                else if (depth == 1) for(var x = 0; x < nw; x++)nimg[i + (x >> 3)] |= inj[ii + x] << 7 - (x & 7) * 1;\n            }\n            cimg = nimg;\n            ctype = 3;\n            bpp = 1;\n        } else if (gotAlpha == false && frms.length == 1) {\n            var nimg = new Uint8Array(nw * nh * 3), area = nw * nh;\n            for(var i = 0; i < area; i++){\n                var ti = i * 3, qi = i * 4;\n                nimg[ti] = cimg[qi];\n                nimg[ti + 1] = cimg[qi + 1];\n                nimg[ti + 2] = cimg[qi + 2];\n            }\n            cimg = nimg;\n            ctype = 2;\n            bpp = 3;\n            bpl = 3 * nw;\n        }\n        frm.img = cimg;\n        frm.bpl = bpl;\n        frm.bpp = bpp;\n    }\n    //console.log(\"colors => palette indices\", Date.now()-time);  time = Date.now();\n    return {\n        ctype: ctype,\n        depth: depth,\n        plte: plte,\n        frames: frms\n    };\n};\nUPNG.encode.framize = function(bufs, w, h, alwaysBlend, evenCrd, forbidPrev) {\n    /*  DISPOSE\n\t    - 0 : no change\n\t\t- 1 : clear to transparent\n\t\t- 2 : retstore to content before rendering (previous frame disposed)\n\t\tBLEND\n\t\t- 0 : replace\n\t\t- 1 : blend\n\t*/ var frms = [];\n    for(var j = 0; j < bufs.length; j++){\n        var cimg = new Uint8Array(bufs[j]), cimg32 = new Uint32Array(cimg.buffer);\n        var nimg;\n        var nx = 0, ny = 0, nw = w, nh = h, blend = alwaysBlend ? 1 : 0;\n        if (j != 0) {\n            var tlim = forbidPrev || alwaysBlend || j == 1 || frms[j - 2].dispose != 0 ? 1 : 2, tstp = 0, tarea = 1e9;\n            for(var it = 0; it < tlim; it++){\n                var pimg = new Uint8Array(bufs[j - 1 - it]), p32 = new Uint32Array(bufs[j - 1 - it]);\n                var mix = w, miy = h, max = -1, may = -1;\n                for(var y = 0; y < h; y++)for(var x = 0; x < w; x++){\n                    var i = y * w + x;\n                    if (cimg32[i] != p32[i]) {\n                        if (x < mix) mix = x;\n                        if (x > max) max = x;\n                        if (y < miy) miy = y;\n                        if (y > may) may = y;\n                    }\n                }\n                if (max == -1) mix = miy = max = may = 0;\n                if (evenCrd) {\n                    if ((mix & 1) == 1) mix--;\n                    if ((miy & 1) == 1) miy--;\n                }\n                var sarea = (max - mix + 1) * (may - miy + 1);\n                if (sarea < tarea) {\n                    tarea = sarea;\n                    tstp = it;\n                    nx = mix;\n                    ny = miy;\n                    nw = max - mix + 1;\n                    nh = may - miy + 1;\n                }\n            }\n            // alwaysBlend: pokud zjistím, že blendit nelze, nastavím předchozímu snímku dispose=1. Zajistím, aby obsahoval můj obdélník.\n            var pimg = new Uint8Array(bufs[j - 1 - tstp]);\n            if (tstp == 1) frms[j - 1].dispose = 2;\n            nimg = new Uint8Array(nw * nh * 4);\n            UPNG._copyTile(pimg, w, h, nimg, nw, nh, -nx, -ny, 0);\n            blend = UPNG._copyTile(cimg, w, h, nimg, nw, nh, -nx, -ny, 3) ? 1 : 0;\n            if (blend == 1) UPNG.encode._prepareDiff(cimg, w, h, nimg, {\n                x: nx,\n                y: ny,\n                width: nw,\n                height: nh\n            });\n            else UPNG._copyTile(cimg, w, h, nimg, nw, nh, -nx, -ny, 0);\n        //UPNG._copyTile(cimg,w,h, nimg,nw,nh, -nx,-ny, blend==1?2:0);\n        } else nimg = cimg.slice(0); // img may be rewritten further ... don't rewrite input\n        frms.push({\n            rect: {\n                x: nx,\n                y: ny,\n                width: nw,\n                height: nh\n            },\n            img: nimg,\n            blend: blend,\n            dispose: 0\n        });\n    }\n    if (alwaysBlend) for(var j = 0; j < frms.length; j++){\n        var frm = frms[j];\n        if (frm.blend == 1) continue;\n        var r0 = frm.rect, r1 = frms[j - 1].rect;\n        var miX = Math.min(r0.x, r1.x), miY = Math.min(r0.y, r1.y);\n        var maX = Math.max(r0.x + r0.width, r1.x + r1.width), maY = Math.max(r0.y + r0.height, r1.y + r1.height);\n        var r = {\n            x: miX,\n            y: miY,\n            width: maX - miX,\n            height: maY - miY\n        };\n        frms[j - 1].dispose = 1;\n        if (j - 1 != 0) UPNG.encode._updateFrame(bufs, w, h, frms, j - 1, r, evenCrd);\n        UPNG.encode._updateFrame(bufs, w, h, frms, j, r, evenCrd);\n    }\n    var area = 0;\n    if (bufs.length != 1) for(var i = 0; i < frms.length; i++){\n        var frm = frms[i];\n        area += frm.rect.width * frm.rect.height;\n    //if(i==0 || frm.blend!=1) continue;\n    //var ob = new Uint8Array(\n    //console.log(frm.blend, frm.dispose, frm.rect);\n    }\n    //if(area!=0) console.log(area);\n    return frms;\n};\nUPNG.encode._updateFrame = function(bufs, w, h, frms, i, r, evenCrd) {\n    var U8 = Uint8Array, U32 = Uint32Array;\n    var pimg = new U8(bufs[i - 1]), pimg32 = new U32(bufs[i - 1]), nimg = i + 1 < bufs.length ? new U8(bufs[i + 1]) : null;\n    var cimg = new U8(bufs[i]), cimg32 = new U32(cimg.buffer);\n    var mix = w, miy = h, max = -1, may = -1;\n    for(var y = 0; y < r.height; y++)for(var x = 0; x < r.width; x++){\n        var cx = r.x + x, cy = r.y + y;\n        var j = cy * w + cx, cc = cimg32[j];\n        // no need to draw transparency, or to dispose it. Or, if writing the same color and the next one does not need transparency.\n        if (cc == 0 || frms[i - 1].dispose == 0 && pimg32[j] == cc && (nimg == null || nimg[j * 4 + 3] != 0)) {} else {\n            if (cx < mix) mix = cx;\n            if (cx > max) max = cx;\n            if (cy < miy) miy = cy;\n            if (cy > may) may = cy;\n        }\n    }\n    if (max == -1) mix = miy = max = may = 0;\n    if (evenCrd) {\n        if ((mix & 1) == 1) mix--;\n        if ((miy & 1) == 1) miy--;\n    }\n    r = {\n        x: mix,\n        y: miy,\n        width: max - mix + 1,\n        height: may - miy + 1\n    };\n    var fr = frms[i];\n    fr.rect = r;\n    fr.blend = 1;\n    fr.img = new Uint8Array(r.width * r.height * 4);\n    if (frms[i - 1].dispose == 0) {\n        UPNG._copyTile(pimg, w, h, fr.img, r.width, r.height, -r.x, -r.y, 0);\n        UPNG.encode._prepareDiff(cimg, w, h, fr.img, r);\n    //UPNG._copyTile(cimg,w,h, fr.img,r.width,r.height, -r.x,-r.y, 2);\n    } else UPNG._copyTile(cimg, w, h, fr.img, r.width, r.height, -r.x, -r.y, 0);\n};\nUPNG.encode._prepareDiff = function(cimg, w, h, nimg, rec) {\n    UPNG._copyTile(cimg, w, h, nimg, rec.width, rec.height, -rec.x, -rec.y, 2);\n/*\n\tvar n32 = new Uint32Array(nimg.buffer);\n\tvar og = new Uint8Array(rec.width*rec.height*4), o32 = new Uint32Array(og.buffer);\n\tUPNG._copyTile(cimg,w,h, og,rec.width,rec.height, -rec.x,-rec.y, 0);\n\tfor(var i=4; i<nimg.length; i+=4) {\n\t\tif(nimg[i-1]!=0 && nimg[i+3]==0 && o32[i>>>2]==o32[(i>>>2)-1]) {\n\t\t\tn32[i>>>2]=o32[i>>>2];\n\t\t\t//var j = i, c=p32[(i>>>2)-1];\n\t\t\t//while(p32[j>>>2]==c) {  n32[j>>>2]=c;  j+=4;  }\n\t\t}\n\t}\n\tfor(var i=nimg.length-8; i>0; i-=4) {\n\t\tif(nimg[i+7]!=0 && nimg[i+3]==0 && o32[i>>>2]==o32[(i>>>2)+1]) {\n\t\t\tn32[i>>>2]=o32[i>>>2];\n\t\t\t//var j = i, c=p32[(i>>>2)-1];\n\t\t\t//while(p32[j>>>2]==c) {  n32[j>>>2]=c;  j+=4;  }\n\t\t}\n\t}*/ };\nUPNG.encode._filterZero = function(img, h, bpp, bpl, data, filter, levelZero) {\n    var fls = [], ftry = [\n        0,\n        1,\n        2,\n        3,\n        4\n    ];\n    if (filter != -1) ftry = [\n        filter\n    ];\n    else if (h * bpl > 500000 || bpp == 1) ftry = [\n        0\n    ];\n    var opts;\n    if (levelZero) opts = {\n        level: 0\n    };\n    var CMPR = levelZero && UZIP != null ? UZIP : (pako__WEBPACK_IMPORTED_MODULE_0___default());\n    for(var i = 0; i < ftry.length; i++){\n        for(var y = 0; y < h; y++)UPNG.encode._filterLine(data, img, y, bpl, bpp, ftry[i]);\n        //var nimg = new Uint8Array(data.length);\n        //var sz = UZIP.F.deflate(data, nimg);  fls.push(nimg.slice(0,sz));\n        //var dfl = pako[\"deflate\"](data), dl=dfl.length-4;\n        //var crc = (dfl[dl+3]<<24)|(dfl[dl+2]<<16)|(dfl[dl+1]<<8)|(dfl[dl+0]<<0);\n        //console.log(crc, UZIP.adler(data,2,data.length-6));\n        fls.push(CMPR[\"deflate\"](data, opts));\n    }\n    var ti, tsize = 1e9;\n    for(var i = 0; i < fls.length; i++)if (fls[i].length < tsize) {\n        ti = i;\n        tsize = fls[i].length;\n    }\n    return fls[ti];\n};\nUPNG.encode._filterLine = function(data, img, y, bpl, bpp, type) {\n    var i = y * bpl, di = i + y, paeth = UPNG.decode._paeth;\n    data[di] = type;\n    di++;\n    if (type == 0) {\n        if (bpl < 500) for(var x = 0; x < bpl; x++)data[di + x] = img[i + x];\n        else data.set(new Uint8Array(img.buffer, i, bpl), di);\n    } else if (type == 1) {\n        for(var x = 0; x < bpp; x++)data[di + x] = img[i + x];\n        for(var x = bpp; x < bpl; x++)data[di + x] = img[i + x] - img[i + x - bpp] + 256 & 255;\n    } else if (y == 0) {\n        for(var x = 0; x < bpp; x++)data[di + x] = img[i + x];\n        if (type == 2) for(var x = bpp; x < bpl; x++)data[di + x] = img[i + x];\n        if (type == 3) for(var x = bpp; x < bpl; x++)data[di + x] = img[i + x] - (img[i + x - bpp] >> 1) + 256 & 255;\n        if (type == 4) for(var x = bpp; x < bpl; x++)data[di + x] = img[i + x] - paeth(img[i + x - bpp], 0, 0) + 256 & 255;\n    } else {\n        if (type == 2) {\n            for(var x = 0; x < bpl; x++)data[di + x] = img[i + x] + 256 - img[i + x - bpl] & 255;\n        }\n        if (type == 3) {\n            for(var x = 0; x < bpp; x++)data[di + x] = img[i + x] + 256 - (img[i + x - bpl] >> 1) & 255;\n            for(var x = bpp; x < bpl; x++)data[di + x] = img[i + x] + 256 - (img[i + x - bpl] + img[i + x - bpp] >> 1) & 255;\n        }\n        if (type == 4) {\n            for(var x = 0; x < bpp; x++)data[di + x] = img[i + x] + 256 - paeth(0, img[i + x - bpl], 0) & 255;\n            for(var x = bpp; x < bpl; x++)data[di + x] = img[i + x] + 256 - paeth(img[i + x - bpp], img[i + x - bpl], img[i + x - bpp - bpl]) & 255;\n        }\n    }\n};\nUPNG.crc = {\n    table: function() {\n        var tab = new Uint32Array(256);\n        for(var n = 0; n < 256; n++){\n            var c = n;\n            for(var k = 0; k < 8; k++){\n                if (c & 1) c = 0xedb88320 ^ c >>> 1;\n                else c = c >>> 1;\n            }\n            tab[n] = c;\n        }\n        return tab;\n    }(),\n    update: function(c, buf, off, len) {\n        for(var i = 0; i < len; i++)c = UPNG.crc.table[(c ^ buf[off + i]) & 0xff] ^ c >>> 8;\n        return c;\n    },\n    crc: function(b, o, l) {\n        return UPNG.crc.update(0xffffffff, b, o, l) ^ 0xffffffff;\n    }\n};\nUPNG.quantize = function(abuf, ps) {\n    var oimg = new Uint8Array(abuf), nimg = oimg.slice(0), nimg32 = new Uint32Array(nimg.buffer);\n    var KD = UPNG.quantize.getKDtree(nimg, ps);\n    var root = KD[0], leafs = KD[1];\n    var planeDst = UPNG.quantize.planeDst;\n    var sb = oimg, tb = nimg32, len = sb.length;\n    var inds = new Uint8Array(oimg.length >> 2);\n    for(var i = 0; i < len; i += 4){\n        var r = sb[i] * (1 / 255), g = sb[i + 1] * (1 / 255), b = sb[i + 2] * (1 / 255), a = sb[i + 3] * (1 / 255);\n        //  exact, but too slow :(\n        var nd = UPNG.quantize.getNearest(root, r, g, b, a);\n        //var nd = root;\n        //while(nd.left) nd = (planeDst(nd.est,r,g,b,a)<=0) ? nd.left : nd.right;\n        inds[i >> 2] = nd.ind;\n        tb[i >> 2] = nd.est.rgba;\n    }\n    return {\n        abuf: nimg.buffer,\n        inds: inds,\n        plte: leafs\n    };\n};\nUPNG.quantize.getKDtree = function(nimg, ps, err) {\n    if (err == null) err = 0.0001;\n    var nimg32 = new Uint32Array(nimg.buffer);\n    var root = {\n        i0: 0,\n        i1: nimg.length,\n        bst: null,\n        est: null,\n        tdst: 0,\n        left: null,\n        right: null\n    }; // basic statistic, extra statistic\n    root.bst = UPNG.quantize.stats(nimg, root.i0, root.i1);\n    root.est = UPNG.quantize.estats(root.bst);\n    var leafs = [\n        root\n    ];\n    while(leafs.length < ps){\n        var maxL = 0, mi = 0;\n        for(var i = 0; i < leafs.length; i++)if (leafs[i].est.L > maxL) {\n            maxL = leafs[i].est.L;\n            mi = i;\n        }\n        if (maxL < err) break;\n        var node = leafs[mi];\n        var s0 = UPNG.quantize.splitPixels(nimg, nimg32, node.i0, node.i1, node.est.e, node.est.eMq255);\n        var s0wrong = node.i0 >= s0 || node.i1 <= s0;\n        //console.log(maxL, leafs.length, mi);\n        if (s0wrong) {\n            node.est.L = 0;\n            continue;\n        }\n        var ln = {\n            i0: node.i0,\n            i1: s0,\n            bst: null,\n            est: null,\n            tdst: 0,\n            left: null,\n            right: null\n        };\n        ln.bst = UPNG.quantize.stats(nimg, ln.i0, ln.i1);\n        ln.est = UPNG.quantize.estats(ln.bst);\n        var rn = {\n            i0: s0,\n            i1: node.i1,\n            bst: null,\n            est: null,\n            tdst: 0,\n            left: null,\n            right: null\n        };\n        rn.bst = {\n            R: [],\n            m: [],\n            N: node.bst.N - ln.bst.N\n        };\n        for(var i = 0; i < 16; i++)rn.bst.R[i] = node.bst.R[i] - ln.bst.R[i];\n        for(var i = 0; i < 4; i++)rn.bst.m[i] = node.bst.m[i] - ln.bst.m[i];\n        rn.est = UPNG.quantize.estats(rn.bst);\n        node.left = ln;\n        node.right = rn;\n        leafs[mi] = ln;\n        leafs.push(rn);\n    }\n    leafs.sort(function(a, b) {\n        return b.bst.N - a.bst.N;\n    });\n    for(var i = 0; i < leafs.length; i++)leafs[i].ind = i;\n    return [\n        root,\n        leafs\n    ];\n};\nUPNG.quantize.getNearest = function(nd, r, g, b, a) {\n    if (nd.left == null) {\n        nd.tdst = UPNG.quantize.dist(nd.est.q, r, g, b, a);\n        return nd;\n    }\n    var planeDst = UPNG.quantize.planeDst(nd.est, r, g, b, a);\n    var node0 = nd.left, node1 = nd.right;\n    if (planeDst > 0) {\n        node0 = nd.right;\n        node1 = nd.left;\n    }\n    var ln = UPNG.quantize.getNearest(node0, r, g, b, a);\n    if (ln.tdst <= planeDst * planeDst) return ln;\n    var rn = UPNG.quantize.getNearest(node1, r, g, b, a);\n    return rn.tdst < ln.tdst ? rn : ln;\n};\nUPNG.quantize.planeDst = function(est, r, g, b, a) {\n    var e = est.e;\n    return e[0] * r + e[1] * g + e[2] * b + e[3] * a - est.eMq;\n};\nUPNG.quantize.dist = function(q, r, g, b, a) {\n    var d0 = r - q[0], d1 = g - q[1], d2 = b - q[2], d3 = a - q[3];\n    return d0 * d0 + d1 * d1 + d2 * d2 + d3 * d3;\n};\nUPNG.quantize.splitPixels = function(nimg, nimg32, i0, i1, e, eMq) {\n    var vecDot = UPNG.quantize.vecDot;\n    i1 -= 4;\n    var shfs = 0;\n    while(i0 < i1){\n        while(vecDot(nimg, i0, e) <= eMq)i0 += 4;\n        while(vecDot(nimg, i1, e) > eMq)i1 -= 4;\n        if (i0 >= i1) break;\n        var t = nimg32[i0 >> 2];\n        nimg32[i0 >> 2] = nimg32[i1 >> 2];\n        nimg32[i1 >> 2] = t;\n        i0 += 4;\n        i1 -= 4;\n    }\n    while(vecDot(nimg, i0, e) > eMq)i0 -= 4;\n    return i0 + 4;\n};\nUPNG.quantize.vecDot = function(nimg, i, e) {\n    return nimg[i] * e[0] + nimg[i + 1] * e[1] + nimg[i + 2] * e[2] + nimg[i + 3] * e[3];\n};\nUPNG.quantize.stats = function(nimg, i0, i1) {\n    var R = [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n    ];\n    var m = [\n        0,\n        0,\n        0,\n        0\n    ];\n    var N = i1 - i0 >> 2;\n    for(var i = i0; i < i1; i += 4){\n        var r = nimg[i] * (1 / 255), g = nimg[i + 1] * (1 / 255), b = nimg[i + 2] * (1 / 255), a = nimg[i + 3] * (1 / 255);\n        //var r = nimg[i], g = nimg[i+1], b = nimg[i+2], a = nimg[i+3];\n        m[0] += r;\n        m[1] += g;\n        m[2] += b;\n        m[3] += a;\n        R[0] += r * r;\n        R[1] += r * g;\n        R[2] += r * b;\n        R[3] += r * a;\n        R[5] += g * g;\n        R[6] += g * b;\n        R[7] += g * a;\n        R[10] += b * b;\n        R[11] += b * a;\n        R[15] += a * a;\n    }\n    R[4] = R[1];\n    R[8] = R[2];\n    R[9] = R[6];\n    R[12] = R[3];\n    R[13] = R[7];\n    R[14] = R[11];\n    return {\n        R: R,\n        m: m,\n        N: N\n    };\n};\nUPNG.quantize.estats = function(stats) {\n    var R = stats.R, m = stats.m, N = stats.N;\n    // when all samples are equal, but N is large (millions), the Rj can be non-zero ( 0.0003.... - precission error)\n    var m0 = m[0], m1 = m[1], m2 = m[2], m3 = m[3], iN = N == 0 ? 0 : 1 / N;\n    var Rj = [\n        R[0] - m0 * m0 * iN,\n        R[1] - m0 * m1 * iN,\n        R[2] - m0 * m2 * iN,\n        R[3] - m0 * m3 * iN,\n        R[4] - m1 * m0 * iN,\n        R[5] - m1 * m1 * iN,\n        R[6] - m1 * m2 * iN,\n        R[7] - m1 * m3 * iN,\n        R[8] - m2 * m0 * iN,\n        R[9] - m2 * m1 * iN,\n        R[10] - m2 * m2 * iN,\n        R[11] - m2 * m3 * iN,\n        R[12] - m3 * m0 * iN,\n        R[13] - m3 * m1 * iN,\n        R[14] - m3 * m2 * iN,\n        R[15] - m3 * m3 * iN\n    ];\n    var A = Rj, M = UPNG.M4;\n    var b = [\n        0.5,\n        0.5,\n        0.5,\n        0.5\n    ], mi = 0, tmi = 0;\n    if (N != 0) for(var i = 0; i < 10; i++){\n        b = M.multVec(A, b);\n        tmi = Math.sqrt(M.dot(b, b));\n        b = M.sml(1 / tmi, b);\n        if (Math.abs(tmi - mi) < 1e-9) break;\n        mi = tmi;\n    }\n    //b = [0,0,1,0];  mi=N;\n    var q = [\n        m0 * iN,\n        m1 * iN,\n        m2 * iN,\n        m3 * iN\n    ];\n    var eMq255 = M.dot(M.sml(255, q), b);\n    return {\n        Cov: Rj,\n        q: q,\n        e: b,\n        L: mi,\n        eMq255: eMq255,\n        eMq: M.dot(b, q),\n        rgba: (Math.round(255 * q[3]) << 24 | Math.round(255 * q[2]) << 16 | Math.round(255 * q[1]) << 8 | Math.round(255 * q[0]) << 0) >>> 0\n    };\n};\nUPNG.M4 = {\n    multVec: function(m, v) {\n        return [\n            m[0] * v[0] + m[1] * v[1] + m[2] * v[2] + m[3] * v[3],\n            m[4] * v[0] + m[5] * v[1] + m[6] * v[2] + m[7] * v[3],\n            m[8] * v[0] + m[9] * v[1] + m[10] * v[2] + m[11] * v[3],\n            m[12] * v[0] + m[13] * v[1] + m[14] * v[2] + m[15] * v[3]\n        ];\n    },\n    dot: function(x, y) {\n        return x[0] * y[0] + x[1] * y[1] + x[2] * y[2] + x[3] * y[3];\n    },\n    sml: function(a, y) {\n        return [\n            a * y[0],\n            a * y[1],\n            a * y[2],\n            a * y[3]\n        ];\n    }\n};\nUPNG.encode.concatRGBA = function(bufs) {\n    var tlen = 0;\n    for(var i = 0; i < bufs.length; i++)tlen += bufs[i].byteLength;\n    var nimg = new Uint8Array(tlen), noff = 0;\n    for(var i = 0; i < bufs.length; i++){\n        var img = new Uint8Array(bufs[i]), il = img.length;\n        for(var j = 0; j < il; j += 4){\n            var r = img[j], g = img[j + 1], b = img[j + 2], a = img[j + 3];\n            if (a == 0) r = g = b = 0;\n            nimg[noff + j] = r;\n            nimg[noff + j + 1] = g;\n            nimg[noff + j + 2] = b;\n            nimg[noff + j + 3] = a;\n        }\n        noff += il;\n    }\n    return nimg.buffer;\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (UPNG);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@pdf-lib/upng/UPNG.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@pdf-lib/upng/node_modules/pako/index.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Top level file is just a mixin of submodules & constants\n\nvar assign = (__webpack_require__(/*! ./lib/utils/common */ \"(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/utils/common.js\").assign);\nvar deflate = __webpack_require__(/*! ./lib/deflate */ \"(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/deflate.js\");\nvar inflate = __webpack_require__(/*! ./lib/inflate */ \"(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/inflate.js\");\nvar constants = __webpack_require__(/*! ./lib/zlib/constants */ \"(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/constants.js\");\nvar pako = {};\nassign(pako, deflate, inflate, constants);\nmodule.exports = pako;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHBkZi1saWIvdXBuZy9ub2RlX21vZHVsZXMvcGFrby9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSwyREFBMkQ7QUFDM0Q7QUFFQSxJQUFJQSxTQUFZQyxrSUFBb0M7QUFFcEQsSUFBSUMsVUFBWUQsbUJBQU9BLENBQUM7QUFDeEIsSUFBSUUsVUFBWUYsbUJBQU9BLENBQUM7QUFDeEIsSUFBSUcsWUFBWUgsbUJBQU9BLENBQUM7QUFFeEIsSUFBSUksT0FBTyxDQUFDO0FBRVpMLE9BQU9LLE1BQU1ILFNBQVNDLFNBQVNDO0FBRS9CRSxPQUFPQyxPQUFPLEdBQUdGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2l2aWwtZW5naW5lZXJpbmctcGxhdGZvcm0vLi9ub2RlX21vZHVsZXMvQHBkZi1saWIvdXBuZy9ub2RlX21vZHVsZXMvcGFrby9pbmRleC5qcz85MDA1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRvcCBsZXZlbCBmaWxlIGlzIGp1c3QgYSBtaXhpbiBvZiBzdWJtb2R1bGVzICYgY29uc3RhbnRzXG4ndXNlIHN0cmljdCc7XG5cbnZhciBhc3NpZ24gICAgPSByZXF1aXJlKCcuL2xpYi91dGlscy9jb21tb24nKS5hc3NpZ247XG5cbnZhciBkZWZsYXRlICAgPSByZXF1aXJlKCcuL2xpYi9kZWZsYXRlJyk7XG52YXIgaW5mbGF0ZSAgID0gcmVxdWlyZSgnLi9saWIvaW5mbGF0ZScpO1xudmFyIGNvbnN0YW50cyA9IHJlcXVpcmUoJy4vbGliL3psaWIvY29uc3RhbnRzJyk7XG5cbnZhciBwYWtvID0ge307XG5cbmFzc2lnbihwYWtvLCBkZWZsYXRlLCBpbmZsYXRlLCBjb25zdGFudHMpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBha287XG4iXSwibmFtZXMiOlsiYXNzaWduIiwicmVxdWlyZSIsImRlZmxhdGUiLCJpbmZsYXRlIiwiY29uc3RhbnRzIiwicGFrbyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/deflate.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@pdf-lib/upng/node_modules/pako/lib/deflate.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar zlib_deflate = __webpack_require__(/*! ./zlib/deflate */ \"(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/deflate.js\");\nvar utils = __webpack_require__(/*! ./utils/common */ \"(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/utils/common.js\");\nvar strings = __webpack_require__(/*! ./utils/strings */ \"(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/utils/strings.js\");\nvar msg = __webpack_require__(/*! ./zlib/messages */ \"(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/messages.js\");\nvar ZStream = __webpack_require__(/*! ./zlib/zstream */ \"(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/zstream.js\");\nvar toString = Object.prototype.toString;\n/* Public constants ==========================================================*/ /* ===========================================================================*/ var Z_NO_FLUSH = 0;\nvar Z_FINISH = 4;\nvar Z_OK = 0;\nvar Z_STREAM_END = 1;\nvar Z_SYNC_FLUSH = 2;\nvar Z_DEFAULT_COMPRESSION = -1;\nvar Z_DEFAULT_STRATEGY = 0;\nvar Z_DEFLATED = 8;\n/* ===========================================================================*/ /**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/ /* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/ /**\n * Deflate.result -> Uint8Array|Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you\n * push a chunk with explicit flush (call [[Deflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/ /**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/ /**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/ /**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/ function Deflate(options) {\n    if (!(this instanceof Deflate)) return new Deflate(options);\n    this.options = utils.assign({\n        level: Z_DEFAULT_COMPRESSION,\n        method: Z_DEFLATED,\n        chunkSize: 16384,\n        windowBits: 15,\n        memLevel: 8,\n        strategy: Z_DEFAULT_STRATEGY,\n        to: \"\"\n    }, options || {});\n    var opt = this.options;\n    if (opt.raw && opt.windowBits > 0) {\n        opt.windowBits = -opt.windowBits;\n    } else if (opt.gzip && opt.windowBits > 0 && opt.windowBits < 16) {\n        opt.windowBits += 16;\n    }\n    this.err = 0; // error code, if happens (0 = Z_OK)\n    this.msg = \"\"; // error message\n    this.ended = false; // used to avoid multiple onEnd() calls\n    this.chunks = []; // chunks of compressed data\n    this.strm = new ZStream();\n    this.strm.avail_out = 0;\n    var status = zlib_deflate.deflateInit2(this.strm, opt.level, opt.method, opt.windowBits, opt.memLevel, opt.strategy);\n    if (status !== Z_OK) {\n        throw new Error(msg[status]);\n    }\n    if (opt.header) {\n        zlib_deflate.deflateSetHeader(this.strm, opt.header);\n    }\n    if (opt.dictionary) {\n        var dict;\n        // Convert data if needed\n        if (typeof opt.dictionary === \"string\") {\n            // If we need to compress text, change encoding to utf8.\n            dict = strings.string2buf(opt.dictionary);\n        } else if (toString.call(opt.dictionary) === \"[object ArrayBuffer]\") {\n            dict = new Uint8Array(opt.dictionary);\n        } else {\n            dict = opt.dictionary;\n        }\n        status = zlib_deflate.deflateSetDictionary(this.strm, dict);\n        if (status !== Z_OK) {\n            throw new Error(msg[status]);\n        }\n        this._dict_set = true;\n    }\n}\n/**\n * Deflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the compression context.\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * array format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/ Deflate.prototype.push = function(data, mode) {\n    var strm = this.strm;\n    var chunkSize = this.options.chunkSize;\n    var status, _mode;\n    if (this.ended) {\n        return false;\n    }\n    _mode = mode === ~~mode ? mode : mode === true ? Z_FINISH : Z_NO_FLUSH;\n    // Convert data if needed\n    if (typeof data === \"string\") {\n        // If we need to compress text, change encoding to utf8.\n        strm.input = strings.string2buf(data);\n    } else if (toString.call(data) === \"[object ArrayBuffer]\") {\n        strm.input = new Uint8Array(data);\n    } else {\n        strm.input = data;\n    }\n    strm.next_in = 0;\n    strm.avail_in = strm.input.length;\n    do {\n        if (strm.avail_out === 0) {\n            strm.output = new utils.Buf8(chunkSize);\n            strm.next_out = 0;\n            strm.avail_out = chunkSize;\n        }\n        status = zlib_deflate.deflate(strm, _mode); /* no bad return value */ \n        if (status !== Z_STREAM_END && status !== Z_OK) {\n            this.onEnd(status);\n            this.ended = true;\n            return false;\n        }\n        if (strm.avail_out === 0 || strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH)) {\n            if (this.options.to === \"string\") {\n                this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));\n            } else {\n                this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n            }\n        }\n    }while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);\n    // Finalize on the last chunk.\n    if (_mode === Z_FINISH) {\n        status = zlib_deflate.deflateEnd(this.strm);\n        this.onEnd(status);\n        this.ended = true;\n        return status === Z_OK;\n    }\n    // callback interim results if Z_SYNC_FLUSH.\n    if (_mode === Z_SYNC_FLUSH) {\n        this.onEnd(Z_OK);\n        strm.avail_out = 0;\n        return true;\n    }\n    return true;\n};\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): output data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/ Deflate.prototype.onData = function(chunk) {\n    this.chunks.push(chunk);\n};\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/ Deflate.prototype.onEnd = function(status) {\n    // On success - join\n    if (status === Z_OK) {\n        if (this.options.to === \"string\") {\n            this.result = this.chunks.join(\"\");\n        } else {\n            this.result = utils.flattenChunks(this.chunks);\n        }\n    }\n    this.chunks = [];\n    this.err = status;\n    this.msg = this.strm.msg;\n};\n/**\n * deflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/ function deflate(input, options) {\n    var deflator = new Deflate(options);\n    deflator.push(input, true);\n    // That will never happens, if you don't cheat with options :)\n    if (deflator.err) {\n        throw deflator.msg || msg[deflator.err];\n    }\n    return deflator.result;\n}\n/**\n * deflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/ function deflateRaw(input, options) {\n    options = options || {};\n    options.raw = true;\n    return deflate(input, options);\n}\n/**\n * gzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/ function gzip(input, options) {\n    options = options || {};\n    options.gzip = true;\n    return deflate(input, options);\n}\nexports.Deflate = Deflate;\nexports.deflate = deflate;\nexports.deflateRaw = deflateRaw;\nexports.gzip = gzip;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/deflate.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/inflate.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@pdf-lib/upng/node_modules/pako/lib/inflate.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar zlib_inflate = __webpack_require__(/*! ./zlib/inflate */ \"(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/inflate.js\");\nvar utils = __webpack_require__(/*! ./utils/common */ \"(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/utils/common.js\");\nvar strings = __webpack_require__(/*! ./utils/strings */ \"(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/utils/strings.js\");\nvar c = __webpack_require__(/*! ./zlib/constants */ \"(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/constants.js\");\nvar msg = __webpack_require__(/*! ./zlib/messages */ \"(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/messages.js\");\nvar ZStream = __webpack_require__(/*! ./zlib/zstream */ \"(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/zstream.js\");\nvar GZheader = __webpack_require__(/*! ./zlib/gzheader */ \"(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/gzheader.js\");\nvar toString = Object.prototype.toString;\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/ /* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/ /**\n * Inflate.result -> Uint8Array|Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you\n * push a chunk with explicit flush (call [[Inflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/ /**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/ /**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/ /**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/ function Inflate(options) {\n    if (!(this instanceof Inflate)) return new Inflate(options);\n    this.options = utils.assign({\n        chunkSize: 16384,\n        windowBits: 0,\n        to: \"\"\n    }, options || {});\n    var opt = this.options;\n    // Force window size for `raw` data, if not set directly,\n    // because we have no header for autodetect.\n    if (opt.raw && opt.windowBits >= 0 && opt.windowBits < 16) {\n        opt.windowBits = -opt.windowBits;\n        if (opt.windowBits === 0) {\n            opt.windowBits = -15;\n        }\n    }\n    // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n    if (opt.windowBits >= 0 && opt.windowBits < 16 && !(options && options.windowBits)) {\n        opt.windowBits += 32;\n    }\n    // Gzip header has no info about windows size, we can do autodetect only\n    // for deflate. So, if window size not set, force it to max when gzip possible\n    if (opt.windowBits > 15 && opt.windowBits < 48) {\n        // bit 3 (16) -> gzipped data\n        // bit 4 (32) -> autodetect gzip/deflate\n        if ((opt.windowBits & 15) === 0) {\n            opt.windowBits |= 15;\n        }\n    }\n    this.err = 0; // error code, if happens (0 = Z_OK)\n    this.msg = \"\"; // error message\n    this.ended = false; // used to avoid multiple onEnd() calls\n    this.chunks = []; // chunks of compressed data\n    this.strm = new ZStream();\n    this.strm.avail_out = 0;\n    var status = zlib_inflate.inflateInit2(this.strm, opt.windowBits);\n    if (status !== c.Z_OK) {\n        throw new Error(msg[status]);\n    }\n    this.header = new GZheader();\n    zlib_inflate.inflateGetHeader(this.strm, this.header);\n    // Setup dictionary\n    if (opt.dictionary) {\n        // Convert data if needed\n        if (typeof opt.dictionary === \"string\") {\n            opt.dictionary = strings.string2buf(opt.dictionary);\n        } else if (toString.call(opt.dictionary) === \"[object ArrayBuffer]\") {\n            opt.dictionary = new Uint8Array(opt.dictionary);\n        }\n        if (opt.raw) {\n            status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);\n            if (status !== c.Z_OK) {\n                throw new Error(msg[status]);\n            }\n        }\n    }\n}\n/**\n * Inflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the decompression context.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/ Inflate.prototype.push = function(data, mode) {\n    var strm = this.strm;\n    var chunkSize = this.options.chunkSize;\n    var dictionary = this.options.dictionary;\n    var status, _mode;\n    var next_out_utf8, tail, utf8str;\n    // Flag to properly process Z_BUF_ERROR on testing inflate call\n    // when we check that all output data was flushed.\n    var allowBufError = false;\n    if (this.ended) {\n        return false;\n    }\n    _mode = mode === ~~mode ? mode : mode === true ? c.Z_FINISH : c.Z_NO_FLUSH;\n    // Convert data if needed\n    if (typeof data === \"string\") {\n        // Only binary strings can be decompressed on practice\n        strm.input = strings.binstring2buf(data);\n    } else if (toString.call(data) === \"[object ArrayBuffer]\") {\n        strm.input = new Uint8Array(data);\n    } else {\n        strm.input = data;\n    }\n    strm.next_in = 0;\n    strm.avail_in = strm.input.length;\n    do {\n        if (strm.avail_out === 0) {\n            strm.output = new utils.Buf8(chunkSize);\n            strm.next_out = 0;\n            strm.avail_out = chunkSize;\n        }\n        status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH); /* no bad return value */ \n        if (status === c.Z_NEED_DICT && dictionary) {\n            status = zlib_inflate.inflateSetDictionary(this.strm, dictionary);\n        }\n        if (status === c.Z_BUF_ERROR && allowBufError === true) {\n            status = c.Z_OK;\n            allowBufError = false;\n        }\n        if (status !== c.Z_STREAM_END && status !== c.Z_OK) {\n            this.onEnd(status);\n            this.ended = true;\n            return false;\n        }\n        if (strm.next_out) {\n            if (strm.avail_out === 0 || status === c.Z_STREAM_END || strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH)) {\n                if (this.options.to === \"string\") {\n                    next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n                    tail = strm.next_out - next_out_utf8;\n                    utf8str = strings.buf2string(strm.output, next_out_utf8);\n                    // move tail\n                    strm.next_out = tail;\n                    strm.avail_out = chunkSize - tail;\n                    if (tail) {\n                        utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0);\n                    }\n                    this.onData(utf8str);\n                } else {\n                    this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n                }\n            }\n        }\n        // When no more input data, we should check that internal inflate buffers\n        // are flushed. The only way to do it when avail_out = 0 - run one more\n        // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.\n        // Here we set flag to process this error properly.\n        //\n        // NOTE. Deflate does not return error in this case and does not needs such\n        // logic.\n        if (strm.avail_in === 0 && strm.avail_out === 0) {\n            allowBufError = true;\n        }\n    }while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);\n    if (status === c.Z_STREAM_END) {\n        _mode = c.Z_FINISH;\n    }\n    // Finalize on the last chunk.\n    if (_mode === c.Z_FINISH) {\n        status = zlib_inflate.inflateEnd(this.strm);\n        this.onEnd(status);\n        this.ended = true;\n        return status === c.Z_OK;\n    }\n    // callback interim results if Z_SYNC_FLUSH.\n    if (_mode === c.Z_SYNC_FLUSH) {\n        this.onEnd(c.Z_OK);\n        strm.avail_out = 0;\n        return true;\n    }\n    return true;\n};\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): output data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/ Inflate.prototype.onData = function(chunk) {\n    this.chunks.push(chunk);\n};\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/ Inflate.prototype.onEnd = function(status) {\n    // On success - join\n    if (status === c.Z_OK) {\n        if (this.options.to === \"string\") {\n            // Glue & convert here, until we teach pako to send\n            // utf8 aligned strings to onData\n            this.result = this.chunks.join(\"\");\n        } else {\n            this.result = utils.flattenChunks(this.chunks);\n        }\n    }\n    this.chunks = [];\n    this.err = status;\n    this.msg = this.strm.msg;\n};\n/**\n * inflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])\n *   , output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err)\n *   console.log(err);\n * }\n * ```\n **/ function inflate(input, options) {\n    var inflator = new Inflate(options);\n    inflator.push(input, true);\n    // That will never happens, if you don't cheat with options :)\n    if (inflator.err) {\n        throw inflator.msg || msg[inflator.err];\n    }\n    return inflator.result;\n}\n/**\n * inflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/ function inflateRaw(input, options) {\n    options = options || {};\n    options.raw = true;\n    return inflate(input, options);\n}\n/**\n * ungzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/ exports.Inflate = Inflate;\nexports.inflate = inflate;\nexports.inflateRaw = inflateRaw;\nexports.ungzip = inflate;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/inflate.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/utils/common.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@pdf-lib/upng/node_modules/pako/lib/utils/common.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nvar TYPED_OK = typeof Uint8Array !== \"undefined\" && typeof Uint16Array !== \"undefined\" && typeof Int32Array !== \"undefined\";\nfunction _has(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\nexports.assign = function(obj /*from1, from2, from3, ...*/ ) {\n    var sources = Array.prototype.slice.call(arguments, 1);\n    while(sources.length){\n        var source = sources.shift();\n        if (!source) {\n            continue;\n        }\n        if (typeof source !== \"object\") {\n            throw new TypeError(source + \"must be non-object\");\n        }\n        for(var p in source){\n            if (_has(source, p)) {\n                obj[p] = source[p];\n            }\n        }\n    }\n    return obj;\n};\n// reduce buffer size, avoiding mem copy\nexports.shrinkBuf = function(buf, size) {\n    if (buf.length === size) {\n        return buf;\n    }\n    if (buf.subarray) {\n        return buf.subarray(0, size);\n    }\n    buf.length = size;\n    return buf;\n};\nvar fnTyped = {\n    arraySet: function(dest, src, src_offs, len, dest_offs) {\n        if (src.subarray && dest.subarray) {\n            dest.set(src.subarray(src_offs, src_offs + len), dest_offs);\n            return;\n        }\n        // Fallback to ordinary array\n        for(var i = 0; i < len; i++){\n            dest[dest_offs + i] = src[src_offs + i];\n        }\n    },\n    // Join array of chunks to single array.\n    flattenChunks: function(chunks) {\n        var i, l, len, pos, chunk, result;\n        // calculate data length\n        len = 0;\n        for(i = 0, l = chunks.length; i < l; i++){\n            len += chunks[i].length;\n        }\n        // join chunks\n        result = new Uint8Array(len);\n        pos = 0;\n        for(i = 0, l = chunks.length; i < l; i++){\n            chunk = chunks[i];\n            result.set(chunk, pos);\n            pos += chunk.length;\n        }\n        return result;\n    }\n};\nvar fnUntyped = {\n    arraySet: function(dest, src, src_offs, len, dest_offs) {\n        for(var i = 0; i < len; i++){\n            dest[dest_offs + i] = src[src_offs + i];\n        }\n    },\n    // Join array of chunks to single array.\n    flattenChunks: function(chunks) {\n        return [].concat.apply([], chunks);\n    }\n};\n// Enable/Disable typed arrays use, for testing\n//\nexports.setTyped = function(on) {\n    if (on) {\n        exports.Buf8 = Uint8Array;\n        exports.Buf16 = Uint16Array;\n        exports.Buf32 = Int32Array;\n        exports.assign(exports, fnTyped);\n    } else {\n        exports.Buf8 = Array;\n        exports.Buf16 = Array;\n        exports.Buf32 = Array;\n        exports.assign(exports, fnUntyped);\n    }\n};\nexports.setTyped(TYPED_OK);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHBkZi1saWIvdXBuZy9ub2RlX21vZHVsZXMvcGFrby9saWIvdXRpbHMvY29tbW9uLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBR0EsSUFBSUEsV0FBWSxPQUFRQyxlQUFlLGVBQ3RCLE9BQU9DLGdCQUFnQixlQUN2QixPQUFPQyxlQUFlO0FBRXZDLFNBQVNDLEtBQUtDLEdBQUcsRUFBRUMsR0FBRztJQUNwQixPQUFPQyxPQUFPQyxTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDTCxLQUFLQztBQUNuRDtBQUVBSyxjQUFjLEdBQUcsU0FBVU4sSUFBSSwwQkFBMEIsR0FBM0I7SUFDNUIsSUFBSVEsVUFBVUMsTUFBTU4sU0FBUyxDQUFDTyxLQUFLLENBQUNMLElBQUksQ0FBQ00sV0FBVztJQUNwRCxNQUFPSCxRQUFRSSxNQUFNLENBQUU7UUFDckIsSUFBSUMsU0FBU0wsUUFBUU0sS0FBSztRQUMxQixJQUFJLENBQUNELFFBQVE7WUFBRTtRQUFVO1FBRXpCLElBQUksT0FBT0EsV0FBVyxVQUFVO1lBQzlCLE1BQU0sSUFBSUUsVUFBVUYsU0FBUztRQUMvQjtRQUVBLElBQUssSUFBSUcsS0FBS0gsT0FBUTtZQUNwQixJQUFJZCxLQUFLYyxRQUFRRyxJQUFJO2dCQUNuQmhCLEdBQUcsQ0FBQ2dCLEVBQUUsR0FBR0gsTUFBTSxDQUFDRyxFQUFFO1lBQ3BCO1FBQ0Y7SUFDRjtJQUVBLE9BQU9oQjtBQUNUO0FBR0Esd0NBQXdDO0FBQ3hDTSxpQkFBaUIsR0FBRyxTQUFVWSxHQUFHLEVBQUVDLElBQUk7SUFDckMsSUFBSUQsSUFBSU4sTUFBTSxLQUFLTyxNQUFNO1FBQUUsT0FBT0Q7SUFBSztJQUN2QyxJQUFJQSxJQUFJRSxRQUFRLEVBQUU7UUFBRSxPQUFPRixJQUFJRSxRQUFRLENBQUMsR0FBR0Q7SUFBTztJQUNsREQsSUFBSU4sTUFBTSxHQUFHTztJQUNiLE9BQU9EO0FBQ1Q7QUFHQSxJQUFJRyxVQUFVO0lBQ1pDLFVBQVUsU0FBVUMsSUFBSSxFQUFFQyxHQUFHLEVBQUVDLFFBQVEsRUFBRUMsR0FBRyxFQUFFQyxTQUFTO1FBQ3JELElBQUlILElBQUlKLFFBQVEsSUFBSUcsS0FBS0gsUUFBUSxFQUFFO1lBQ2pDRyxLQUFLSyxHQUFHLENBQUNKLElBQUlKLFFBQVEsQ0FBQ0ssVUFBVUEsV0FBV0MsTUFBTUM7WUFDakQ7UUFDRjtRQUNBLDZCQUE2QjtRQUM3QixJQUFLLElBQUlFLElBQUksR0FBR0EsSUFBSUgsS0FBS0csSUFBSztZQUM1Qk4sSUFBSSxDQUFDSSxZQUFZRSxFQUFFLEdBQUdMLEdBQUcsQ0FBQ0MsV0FBV0ksRUFBRTtRQUN6QztJQUNGO0lBQ0Esd0NBQXdDO0lBQ3hDQyxlQUFlLFNBQVVDLE1BQU07UUFDN0IsSUFBSUYsR0FBR0csR0FBR04sS0FBS08sS0FBS0MsT0FBT0M7UUFFM0Isd0JBQXdCO1FBQ3hCVCxNQUFNO1FBQ04sSUFBS0csSUFBSSxHQUFHRyxJQUFJRCxPQUFPbkIsTUFBTSxFQUFFaUIsSUFBSUcsR0FBR0gsSUFBSztZQUN6Q0gsT0FBT0ssTUFBTSxDQUFDRixFQUFFLENBQUNqQixNQUFNO1FBQ3pCO1FBRUEsY0FBYztRQUNkdUIsU0FBUyxJQUFJdkMsV0FBVzhCO1FBQ3hCTyxNQUFNO1FBQ04sSUFBS0osSUFBSSxHQUFHRyxJQUFJRCxPQUFPbkIsTUFBTSxFQUFFaUIsSUFBSUcsR0FBR0gsSUFBSztZQUN6Q0ssUUFBUUgsTUFBTSxDQUFDRixFQUFFO1lBQ2pCTSxPQUFPUCxHQUFHLENBQUNNLE9BQU9EO1lBQ2xCQSxPQUFPQyxNQUFNdEIsTUFBTTtRQUNyQjtRQUVBLE9BQU91QjtJQUNUO0FBQ0Y7QUFFQSxJQUFJQyxZQUFZO0lBQ2RkLFVBQVUsU0FBVUMsSUFBSSxFQUFFQyxHQUFHLEVBQUVDLFFBQVEsRUFBRUMsR0FBRyxFQUFFQyxTQUFTO1FBQ3JELElBQUssSUFBSUUsSUFBSSxHQUFHQSxJQUFJSCxLQUFLRyxJQUFLO1lBQzVCTixJQUFJLENBQUNJLFlBQVlFLEVBQUUsR0FBR0wsR0FBRyxDQUFDQyxXQUFXSSxFQUFFO1FBQ3pDO0lBQ0Y7SUFDQSx3Q0FBd0M7SUFDeENDLGVBQWUsU0FBVUMsTUFBTTtRQUM3QixPQUFPLEVBQUUsQ0FBQ00sTUFBTSxDQUFDQyxLQUFLLENBQUMsRUFBRSxFQUFFUDtJQUM3QjtBQUNGO0FBR0EsK0NBQStDO0FBQy9DLEVBQUU7QUFDRnpCLGdCQUFnQixHQUFHLFNBQVVrQyxFQUFFO0lBQzdCLElBQUlBLElBQUk7UUFDTmxDLFlBQVksR0FBSVY7UUFDaEJVLGFBQWEsR0FBR1Q7UUFDaEJTLGFBQWEsR0FBR1I7UUFDaEJRLFFBQVFDLE1BQU0sQ0FBQ0QsU0FBU2U7SUFDMUIsT0FBTztRQUNMZixZQUFZLEdBQUlHO1FBQ2hCSCxhQUFhLEdBQUdHO1FBQ2hCSCxhQUFhLEdBQUdHO1FBQ2hCSCxRQUFRQyxNQUFNLENBQUNELFNBQVM4QjtJQUMxQjtBQUNGO0FBRUE5QixRQUFRaUMsUUFBUSxDQUFDNUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaXZpbC1lbmdpbmVlcmluZy1wbGF0Zm9ybS8uL25vZGVfbW9kdWxlcy9AcGRmLWxpYi91cG5nL25vZGVfbW9kdWxlcy9wYWtvL2xpYi91dGlscy9jb21tb24uanM/ZDlhNCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cblxudmFyIFRZUEVEX09LID0gICh0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcpICYmXG4gICAgICAgICAgICAgICAgKHR5cGVvZiBVaW50MTZBcnJheSAhPT0gJ3VuZGVmaW5lZCcpICYmXG4gICAgICAgICAgICAgICAgKHR5cGVvZiBJbnQzMkFycmF5ICE9PSAndW5kZWZpbmVkJyk7XG5cbmZ1bmN0aW9uIF9oYXMob2JqLCBrZXkpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSk7XG59XG5cbmV4cG9ydHMuYXNzaWduID0gZnVuY3Rpb24gKG9iaiAvKmZyb20xLCBmcm9tMiwgZnJvbTMsIC4uLiovKSB7XG4gIHZhciBzb3VyY2VzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgd2hpbGUgKHNvdXJjZXMubGVuZ3RoKSB7XG4gICAgdmFyIHNvdXJjZSA9IHNvdXJjZXMuc2hpZnQoKTtcbiAgICBpZiAoIXNvdXJjZSkgeyBjb250aW51ZTsgfVxuXG4gICAgaWYgKHR5cGVvZiBzb3VyY2UgIT09ICdvYmplY3QnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHNvdXJjZSArICdtdXN0IGJlIG5vbi1vYmplY3QnKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBwIGluIHNvdXJjZSkge1xuICAgICAgaWYgKF9oYXMoc291cmNlLCBwKSkge1xuICAgICAgICBvYmpbcF0gPSBzb3VyY2VbcF07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9iajtcbn07XG5cblxuLy8gcmVkdWNlIGJ1ZmZlciBzaXplLCBhdm9pZGluZyBtZW0gY29weVxuZXhwb3J0cy5zaHJpbmtCdWYgPSBmdW5jdGlvbiAoYnVmLCBzaXplKSB7XG4gIGlmIChidWYubGVuZ3RoID09PSBzaXplKSB7IHJldHVybiBidWY7IH1cbiAgaWYgKGJ1Zi5zdWJhcnJheSkgeyByZXR1cm4gYnVmLnN1YmFycmF5KDAsIHNpemUpOyB9XG4gIGJ1Zi5sZW5ndGggPSBzaXplO1xuICByZXR1cm4gYnVmO1xufTtcblxuXG52YXIgZm5UeXBlZCA9IHtcbiAgYXJyYXlTZXQ6IGZ1bmN0aW9uIChkZXN0LCBzcmMsIHNyY19vZmZzLCBsZW4sIGRlc3Rfb2Zmcykge1xuICAgIGlmIChzcmMuc3ViYXJyYXkgJiYgZGVzdC5zdWJhcnJheSkge1xuICAgICAgZGVzdC5zZXQoc3JjLnN1YmFycmF5KHNyY19vZmZzLCBzcmNfb2ZmcyArIGxlbiksIGRlc3Rfb2Zmcyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIEZhbGxiYWNrIHRvIG9yZGluYXJ5IGFycmF5XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgZGVzdFtkZXN0X29mZnMgKyBpXSA9IHNyY1tzcmNfb2ZmcyArIGldO1xuICAgIH1cbiAgfSxcbiAgLy8gSm9pbiBhcnJheSBvZiBjaHVua3MgdG8gc2luZ2xlIGFycmF5LlxuICBmbGF0dGVuQ2h1bmtzOiBmdW5jdGlvbiAoY2h1bmtzKSB7XG4gICAgdmFyIGksIGwsIGxlbiwgcG9zLCBjaHVuaywgcmVzdWx0O1xuXG4gICAgLy8gY2FsY3VsYXRlIGRhdGEgbGVuZ3RoXG4gICAgbGVuID0gMDtcbiAgICBmb3IgKGkgPSAwLCBsID0gY2h1bmtzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgbGVuICs9IGNodW5rc1tpXS5sZW5ndGg7XG4gICAgfVxuXG4gICAgLy8gam9pbiBjaHVua3NcbiAgICByZXN1bHQgPSBuZXcgVWludDhBcnJheShsZW4pO1xuICAgIHBvcyA9IDA7XG4gICAgZm9yIChpID0gMCwgbCA9IGNodW5rcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGNodW5rID0gY2h1bmtzW2ldO1xuICAgICAgcmVzdWx0LnNldChjaHVuaywgcG9zKTtcbiAgICAgIHBvcyArPSBjaHVuay5sZW5ndGg7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcblxudmFyIGZuVW50eXBlZCA9IHtcbiAgYXJyYXlTZXQ6IGZ1bmN0aW9uIChkZXN0LCBzcmMsIHNyY19vZmZzLCBsZW4sIGRlc3Rfb2Zmcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGRlc3RbZGVzdF9vZmZzICsgaV0gPSBzcmNbc3JjX29mZnMgKyBpXTtcbiAgICB9XG4gIH0sXG4gIC8vIEpvaW4gYXJyYXkgb2YgY2h1bmtzIHRvIHNpbmdsZSBhcnJheS5cbiAgZmxhdHRlbkNodW5rczogZnVuY3Rpb24gKGNodW5rcykge1xuICAgIHJldHVybiBbXS5jb25jYXQuYXBwbHkoW10sIGNodW5rcyk7XG4gIH1cbn07XG5cblxuLy8gRW5hYmxlL0Rpc2FibGUgdHlwZWQgYXJyYXlzIHVzZSwgZm9yIHRlc3Rpbmdcbi8vXG5leHBvcnRzLnNldFR5cGVkID0gZnVuY3Rpb24gKG9uKSB7XG4gIGlmIChvbikge1xuICAgIGV4cG9ydHMuQnVmOCAgPSBVaW50OEFycmF5O1xuICAgIGV4cG9ydHMuQnVmMTYgPSBVaW50MTZBcnJheTtcbiAgICBleHBvcnRzLkJ1ZjMyID0gSW50MzJBcnJheTtcbiAgICBleHBvcnRzLmFzc2lnbihleHBvcnRzLCBmblR5cGVkKTtcbiAgfSBlbHNlIHtcbiAgICBleHBvcnRzLkJ1ZjggID0gQXJyYXk7XG4gICAgZXhwb3J0cy5CdWYxNiA9IEFycmF5O1xuICAgIGV4cG9ydHMuQnVmMzIgPSBBcnJheTtcbiAgICBleHBvcnRzLmFzc2lnbihleHBvcnRzLCBmblVudHlwZWQpO1xuICB9XG59O1xuXG5leHBvcnRzLnNldFR5cGVkKFRZUEVEX09LKTtcbiJdLCJuYW1lcyI6WyJUWVBFRF9PSyIsIlVpbnQ4QXJyYXkiLCJVaW50MTZBcnJheSIsIkludDMyQXJyYXkiLCJfaGFzIiwib2JqIiwia2V5IiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZXhwb3J0cyIsImFzc2lnbiIsInNvdXJjZXMiLCJBcnJheSIsInNsaWNlIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwic2hpZnQiLCJUeXBlRXJyb3IiLCJwIiwic2hyaW5rQnVmIiwiYnVmIiwic2l6ZSIsInN1YmFycmF5IiwiZm5UeXBlZCIsImFycmF5U2V0IiwiZGVzdCIsInNyYyIsInNyY19vZmZzIiwibGVuIiwiZGVzdF9vZmZzIiwic2V0IiwiaSIsImZsYXR0ZW5DaHVua3MiLCJjaHVua3MiLCJsIiwicG9zIiwiY2h1bmsiLCJyZXN1bHQiLCJmblVudHlwZWQiLCJjb25jYXQiLCJhcHBseSIsInNldFR5cGVkIiwib24iLCJCdWY4IiwiQnVmMTYiLCJCdWYzMiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/utils/common.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/utils/strings.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@pdf-lib/upng/node_modules/pako/lib/utils/strings.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("// String encode/decode helpers\n\nvar utils = __webpack_require__(/*! ./common */ \"(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/utils/common.js\");\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nvar STR_APPLY_OK = true;\nvar STR_APPLY_UIA_OK = true;\ntry {\n    String.fromCharCode.apply(null, [\n        0\n    ]);\n} catch (__) {\n    STR_APPLY_OK = false;\n}\ntry {\n    String.fromCharCode.apply(null, new Uint8Array(1));\n} catch (__) {\n    STR_APPLY_UIA_OK = false;\n}\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nvar _utf8len = new utils.Buf8(256);\nfor(var q = 0; q < 256; q++){\n    _utf8len[q] = q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1;\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n// convert string to array (typed, when possible)\nexports.string2buf = function(str) {\n    var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n    // count binary size\n    for(m_pos = 0; m_pos < str_len; m_pos++){\n        c = str.charCodeAt(m_pos);\n        if ((c & 0xfc00) === 0xd800 && m_pos + 1 < str_len) {\n            c2 = str.charCodeAt(m_pos + 1);\n            if ((c2 & 0xfc00) === 0xdc00) {\n                c = 0x10000 + (c - 0xd800 << 10) + (c2 - 0xdc00);\n                m_pos++;\n            }\n        }\n        buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n    }\n    // allocate buffer\n    buf = new utils.Buf8(buf_len);\n    // convert\n    for(i = 0, m_pos = 0; i < buf_len; m_pos++){\n        c = str.charCodeAt(m_pos);\n        if ((c & 0xfc00) === 0xd800 && m_pos + 1 < str_len) {\n            c2 = str.charCodeAt(m_pos + 1);\n            if ((c2 & 0xfc00) === 0xdc00) {\n                c = 0x10000 + (c - 0xd800 << 10) + (c2 - 0xdc00);\n                m_pos++;\n            }\n        }\n        if (c < 0x80) {\n            /* one byte */ buf[i++] = c;\n        } else if (c < 0x800) {\n            /* two bytes */ buf[i++] = 0xC0 | c >>> 6;\n            buf[i++] = 0x80 | c & 0x3f;\n        } else if (c < 0x10000) {\n            /* three bytes */ buf[i++] = 0xE0 | c >>> 12;\n            buf[i++] = 0x80 | c >>> 6 & 0x3f;\n            buf[i++] = 0x80 | c & 0x3f;\n        } else {\n            /* four bytes */ buf[i++] = 0xf0 | c >>> 18;\n            buf[i++] = 0x80 | c >>> 12 & 0x3f;\n            buf[i++] = 0x80 | c >>> 6 & 0x3f;\n            buf[i++] = 0x80 | c & 0x3f;\n        }\n    }\n    return buf;\n};\n// Helper (used in 2 places)\nfunction buf2binstring(buf, len) {\n    // On Chrome, the arguments in a function call that are allowed is `65534`.\n    // If the length of the buffer is smaller than that, we can use this optimization,\n    // otherwise we will take a slower path.\n    if (len < 65534) {\n        if (buf.subarray && STR_APPLY_UIA_OK || !buf.subarray && STR_APPLY_OK) {\n            return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));\n        }\n    }\n    var result = \"\";\n    for(var i = 0; i < len; i++){\n        result += String.fromCharCode(buf[i]);\n    }\n    return result;\n}\n// Convert byte array to binary string\nexports.buf2binstring = function(buf) {\n    return buf2binstring(buf, buf.length);\n};\n// Convert binary string (typed, when possible)\nexports.binstring2buf = function(str) {\n    var buf = new utils.Buf8(str.length);\n    for(var i = 0, len = buf.length; i < len; i++){\n        buf[i] = str.charCodeAt(i);\n    }\n    return buf;\n};\n// convert array to string\nexports.buf2string = function(buf, max) {\n    var i, out, c, c_len;\n    var len = max || buf.length;\n    // Reserve max possible length (2 words per char)\n    // NB: by unknown reasons, Array is significantly faster for\n    //     String.fromCharCode.apply than Uint16Array.\n    var utf16buf = new Array(len * 2);\n    for(out = 0, i = 0; i < len;){\n        c = buf[i++];\n        // quick process ascii\n        if (c < 0x80) {\n            utf16buf[out++] = c;\n            continue;\n        }\n        c_len = _utf8len[c];\n        // skip 5 & 6 byte codes\n        if (c_len > 4) {\n            utf16buf[out++] = 0xfffd;\n            i += c_len - 1;\n            continue;\n        }\n        // apply mask on first byte\n        c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n        // join the rest\n        while(c_len > 1 && i < len){\n            c = c << 6 | buf[i++] & 0x3f;\n            c_len--;\n        }\n        // terminated by end of string?\n        if (c_len > 1) {\n            utf16buf[out++] = 0xfffd;\n            continue;\n        }\n        if (c < 0x10000) {\n            utf16buf[out++] = c;\n        } else {\n            c -= 0x10000;\n            utf16buf[out++] = 0xd800 | c >> 10 & 0x3ff;\n            utf16buf[out++] = 0xdc00 | c & 0x3ff;\n        }\n    }\n    return buf2binstring(utf16buf, out);\n};\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nexports.utf8border = function(buf, max) {\n    var pos;\n    max = max || buf.length;\n    if (max > buf.length) {\n        max = buf.length;\n    }\n    // go back from last position, until start of sequence found\n    pos = max - 1;\n    while(pos >= 0 && (buf[pos] & 0xC0) === 0x80){\n        pos--;\n    }\n    // Very small and broken sequence,\n    // return max, because we should return something anyway.\n    if (pos < 0) {\n        return max;\n    }\n    // If we came to start of buffer - that means buffer is too small,\n    // return max too.\n    if (pos === 0) {\n        return max;\n    }\n    return pos + _utf8len[buf[pos]] > max ? pos : max;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHBkZi1saWIvdXBuZy9ub2RlX21vZHVsZXMvcGFrby9saWIvdXRpbHMvc3RyaW5ncy5qcyIsIm1hcHBpbmdzIjoiQUFBQSwrQkFBK0I7QUFDL0I7QUFHQSxJQUFJQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUdwQixnRUFBZ0U7QUFDaEUsRUFBRTtBQUNGLHlDQUF5QztBQUN6QyxpREFBaUQ7QUFDakQsRUFBRTtBQUNGLElBQUlDLGVBQWU7QUFDbkIsSUFBSUMsbUJBQW1CO0FBRXZCLElBQUk7SUFBRUMsT0FBT0MsWUFBWSxDQUFDQyxLQUFLLENBQUMsTUFBTTtRQUFFO0tBQUc7QUFBRyxFQUFFLE9BQU9DLElBQUk7SUFBRUwsZUFBZTtBQUFPO0FBQ25GLElBQUk7SUFBRUUsT0FBT0MsWUFBWSxDQUFDQyxLQUFLLENBQUMsTUFBTSxJQUFJRSxXQUFXO0FBQUssRUFBRSxPQUFPRCxJQUFJO0lBQUVKLG1CQUFtQjtBQUFPO0FBR25HLGlFQUFpRTtBQUNqRSxvRkFBb0Y7QUFDcEYsNkNBQTZDO0FBQzdDLElBQUlNLFdBQVcsSUFBSVQsTUFBTVUsSUFBSSxDQUFDO0FBQzlCLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJLEtBQUtBLElBQUs7SUFDNUJGLFFBQVEsQ0FBQ0UsRUFBRSxHQUFJQSxLQUFLLE1BQU0sSUFBSUEsS0FBSyxNQUFNLElBQUlBLEtBQUssTUFBTSxJQUFJQSxLQUFLLE1BQU0sSUFBSUEsS0FBSyxNQUFNLElBQUk7QUFDNUY7QUFDQUYsUUFBUSxDQUFDLElBQUksR0FBR0EsUUFBUSxDQUFDLElBQUksR0FBRyxHQUFHLHlCQUF5QjtBQUc1RCxpREFBaUQ7QUFDakRHLGtCQUFrQixHQUFHLFNBQVVFLEdBQUc7SUFDaEMsSUFBSUMsS0FBS0MsR0FBR0MsSUFBSUMsT0FBT0MsR0FBR0MsVUFBVU4sSUFBSU8sTUFBTSxFQUFFQyxVQUFVO0lBRTFELG9CQUFvQjtJQUNwQixJQUFLSixRQUFRLEdBQUdBLFFBQVFFLFNBQVNG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LENBQUNGLE1BQU0sR0FBRyxTQUFVaEIsSUFBSTtRQUNsQztJQUNGO0lBRUEsT0FBT1EsY0FBY1UsVUFBVUY7QUFDakM7QUFHQSxrREFBa0Q7QUFDbEQsdURBQXVEO0FBQ3ZELCtDQUErQztBQUMvQyxFQUFFO0FBQ0YsMkJBQTJCO0FBQzNCLG9DQUFvQztBQUNwQ3BCLGtCQUFrQixHQUFHLFNBQVVHLEdBQUcsRUFBRWdCLEdBQUc7SUFDckMsSUFBSU07SUFFSk4sTUFBTUEsT0FBT2hCLElBQUlNLE1BQU07SUFDdkIsSUFBSVUsTUFBTWhCLElBQUlNLE1BQU0sRUFBRTtRQUFFVSxNQUFNaEIsSUFBSU0sTUFBTTtJQUFFO0lBRTFDLDREQUE0RDtJQUM1RGdCLE1BQU1OLE1BQU07SUFDWixNQUFPTSxPQUFPLEtBQUssQ0FBQ3RCLEdBQUcsQ0FBQ3NCLElBQUksR0FBRyxJQUFHLE1BQU8sS0FBTTtRQUFFQTtJQUFPO0lBRXhELGtDQUFrQztJQUNsQyx5REFBeUQ7SUFDekQsSUFBSUEsTUFBTSxHQUFHO1FBQUUsT0FBT047SUFBSztJQUUzQixrRUFBa0U7SUFDbEUsa0JBQWtCO0lBQ2xCLElBQUlNLFFBQVEsR0FBRztRQUFFLE9BQU9OO0lBQUs7SUFFN0IsT0FBTyxNQUFPdEIsUUFBUSxDQUFDTSxHQUFHLENBQUNzQixJQUFJLENBQUMsR0FBR04sTUFBT00sTUFBTU47QUFDbEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaXZpbC1lbmdpbmVlcmluZy1wbGF0Zm9ybS8uL25vZGVfbW9kdWxlcy9AcGRmLWxpYi91cG5nL25vZGVfbW9kdWxlcy9wYWtvL2xpYi91dGlscy9zdHJpbmdzLmpzP2RmM2YiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU3RyaW5nIGVuY29kZS9kZWNvZGUgaGVscGVyc1xuJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vY29tbW9uJyk7XG5cblxuLy8gUXVpY2sgY2hlY2sgaWYgd2UgY2FuIHVzZSBmYXN0IGFycmF5IHRvIGJpbiBzdHJpbmcgY29udmVyc2lvblxuLy9cbi8vIC0gYXBwbHkoQXJyYXkpIGNhbiBmYWlsIG9uIEFuZHJvaWQgMi4yXG4vLyAtIGFwcGx5KFVpbnQ4QXJyYXkpIGNhbiBmYWlsIG9uIGlPUyA1LjEgU2FmYXJpXG4vL1xudmFyIFNUUl9BUFBMWV9PSyA9IHRydWU7XG52YXIgU1RSX0FQUExZX1VJQV9PSyA9IHRydWU7XG5cbnRyeSB7IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgWyAwIF0pOyB9IGNhdGNoIChfXykgeyBTVFJfQVBQTFlfT0sgPSBmYWxzZTsgfVxudHJ5IHsgU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBuZXcgVWludDhBcnJheSgxKSk7IH0gY2F0Y2ggKF9fKSB7IFNUUl9BUFBMWV9VSUFfT0sgPSBmYWxzZTsgfVxuXG5cbi8vIFRhYmxlIHdpdGggdXRmOCBsZW5ndGhzIChjYWxjdWxhdGVkIGJ5IGZpcnN0IGJ5dGUgb2Ygc2VxdWVuY2UpXG4vLyBOb3RlLCB0aGF0IDUgJiA2LWJ5dGUgdmFsdWVzIGFuZCBzb21lIDQtYnl0ZSB2YWx1ZXMgY2FuIG5vdCBiZSByZXByZXNlbnRlZCBpbiBKUyxcbi8vIGJlY2F1c2UgbWF4IHBvc3NpYmxlIGNvZGVwb2ludCBpcyAweDEwZmZmZlxudmFyIF91dGY4bGVuID0gbmV3IHV0aWxzLkJ1ZjgoMjU2KTtcbmZvciAodmFyIHEgPSAwOyBxIDwgMjU2OyBxKyspIHtcbiAgX3V0ZjhsZW5bcV0gPSAocSA+PSAyNTIgPyA2IDogcSA+PSAyNDggPyA1IDogcSA+PSAyNDAgPyA0IDogcSA+PSAyMjQgPyAzIDogcSA+PSAxOTIgPyAyIDogMSk7XG59XG5fdXRmOGxlblsyNTRdID0gX3V0ZjhsZW5bMjU0XSA9IDE7IC8vIEludmFsaWQgc2VxdWVuY2Ugc3RhcnRcblxuXG4vLyBjb252ZXJ0IHN0cmluZyB0byBhcnJheSAodHlwZWQsIHdoZW4gcG9zc2libGUpXG5leHBvcnRzLnN0cmluZzJidWYgPSBmdW5jdGlvbiAoc3RyKSB7XG4gIHZhciBidWYsIGMsIGMyLCBtX3BvcywgaSwgc3RyX2xlbiA9IHN0ci5sZW5ndGgsIGJ1Zl9sZW4gPSAwO1xuXG4gIC8vIGNvdW50IGJpbmFyeSBzaXplXG4gIGZvciAobV9wb3MgPSAwOyBtX3BvcyA8IHN0cl9sZW47IG1fcG9zKyspIHtcbiAgICBjID0gc3RyLmNoYXJDb2RlQXQobV9wb3MpO1xuICAgIGlmICgoYyAmIDB4ZmMwMCkgPT09IDB4ZDgwMCAmJiAobV9wb3MgKyAxIDwgc3RyX2xlbikpIHtcbiAgICAgIGMyID0gc3RyLmNoYXJDb2RlQXQobV9wb3MgKyAxKTtcbiAgICAgIGlmICgoYzIgJiAweGZjMDApID09PSAweGRjMDApIHtcbiAgICAgICAgYyA9IDB4MTAwMDAgKyAoKGMgLSAweGQ4MDApIDw8IDEwKSArIChjMiAtIDB4ZGMwMCk7XG4gICAgICAgIG1fcG9zKys7XG4gICAgICB9XG4gICAgfVxuICAgIGJ1Zl9sZW4gKz0gYyA8IDB4ODAgPyAxIDogYyA8IDB4ODAwID8gMiA6IGMgPCAweDEwMDAwID8gMyA6IDQ7XG4gIH1cblxuICAvLyBhbGxvY2F0ZSBidWZmZXJcbiAgYnVmID0gbmV3IHV0aWxzLkJ1ZjgoYnVmX2xlbik7XG5cbiAgLy8gY29udmVydFxuICBmb3IgKGkgPSAwLCBtX3BvcyA9IDA7IGkgPCBidWZfbGVuOyBtX3BvcysrKSB7XG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KG1fcG9zKTtcbiAgICBpZiAoKGMgJiAweGZjMDApID09PSAweGQ4MDAgJiYgKG1fcG9zICsgMSA8IHN0cl9sZW4pKSB7XG4gICAgICBjMiA9IHN0ci5jaGFyQ29kZUF0KG1fcG9zICsgMSk7XG4gICAgICBpZiAoKGMyICYgMHhmYzAwKSA9PT0gMHhkYzAwKSB7XG4gICAgICAgIGMgPSAweDEwMDAwICsgKChjIC0gMHhkODAwKSA8PCAxMCkgKyAoYzIgLSAweGRjMDApO1xuICAgICAgICBtX3BvcysrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoYyA8IDB4ODApIHtcbiAgICAgIC8qIG9uZSBieXRlICovXG4gICAgICBidWZbaSsrXSA9IGM7XG4gICAgfSBlbHNlIGlmIChjIDwgMHg4MDApIHtcbiAgICAgIC8qIHR3byBieXRlcyAqL1xuICAgICAgYnVmW2krK10gPSAweEMwIHwgKGMgPj4+IDYpO1xuICAgICAgYnVmW2krK10gPSAweDgwIHwgKGMgJiAweDNmKTtcbiAgICB9IGVsc2UgaWYgKGMgPCAweDEwMDAwKSB7XG4gICAgICAvKiB0aHJlZSBieXRlcyAqL1xuICAgICAgYnVmW2krK10gPSAweEUwIHwgKGMgPj4+IDEyKTtcbiAgICAgIGJ1ZltpKytdID0gMHg4MCB8IChjID4+PiA2ICYgMHgzZik7XG4gICAgICBidWZbaSsrXSA9IDB4ODAgfCAoYyAmIDB4M2YpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvKiBmb3VyIGJ5dGVzICovXG4gICAgICBidWZbaSsrXSA9IDB4ZjAgfCAoYyA+Pj4gMTgpO1xuICAgICAgYnVmW2krK10gPSAweDgwIHwgKGMgPj4+IDEyICYgMHgzZik7XG4gICAgICBidWZbaSsrXSA9IDB4ODAgfCAoYyA+Pj4gNiAmIDB4M2YpO1xuICAgICAgYnVmW2krK10gPSAweDgwIHwgKGMgJiAweDNmKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnVmO1xufTtcblxuLy8gSGVscGVyICh1c2VkIGluIDIgcGxhY2VzKVxuZnVuY3Rpb24gYnVmMmJpbnN0cmluZyhidWYsIGxlbikge1xuICAvLyBPbiBDaHJvbWUsIHRoZSBhcmd1bWVudHMgaW4gYSBmdW5jdGlvbiBjYWxsIHRoYXQgYXJlIGFsbG93ZWQgaXMgYDY1NTM0YC5cbiAgLy8gSWYgdGhlIGxlbmd0aCBvZiB0aGUgYnVmZmVyIGlzIHNtYWxsZXIgdGhhbiB0aGF0LCB3ZSBjYW4gdXNlIHRoaXMgb3B0aW1pemF0aW9uLFxuICAvLyBvdGhlcndpc2Ugd2Ugd2lsbCB0YWtlIGEgc2xvd2VyIHBhdGguXG4gIGlmIChsZW4gPCA2NTUzNCkge1xuICAgIGlmICgoYnVmLnN1YmFycmF5ICYmIFNUUl9BUFBMWV9VSUFfT0spIHx8ICghYnVmLnN1YmFycmF5ICYmIFNUUl9BUFBMWV9PSykpIHtcbiAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIHV0aWxzLnNocmlua0J1ZihidWYsIGxlbikpO1xuICAgIH1cbiAgfVxuXG4gIHZhciByZXN1bHQgPSAnJztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIHJlc3VsdCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuXG4vLyBDb252ZXJ0IGJ5dGUgYXJyYXkgdG8gYmluYXJ5IHN0cmluZ1xuZXhwb3J0cy5idWYyYmluc3RyaW5nID0gZnVuY3Rpb24gKGJ1Zikge1xuICByZXR1cm4gYnVmMmJpbnN0cmluZyhidWYsIGJ1Zi5sZW5ndGgpO1xufTtcblxuXG4vLyBDb252ZXJ0IGJpbmFyeSBzdHJpbmcgKHR5cGVkLCB3aGVuIHBvc3NpYmxlKVxuZXhwb3J0cy5iaW5zdHJpbmcyYnVmID0gZnVuY3Rpb24gKHN0cikge1xuICB2YXIgYnVmID0gbmV3IHV0aWxzLkJ1Zjgoc3RyLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBidWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBidWZbaV0gPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgfVxuICByZXR1cm4gYnVmO1xufTtcblxuXG4vLyBjb252ZXJ0IGFycmF5IHRvIHN0cmluZ1xuZXhwb3J0cy5idWYyc3RyaW5nID0gZnVuY3Rpb24gKGJ1ZiwgbWF4KSB7XG4gIHZhciBpLCBvdXQsIGMsIGNfbGVuO1xuICB2YXIgbGVuID0gbWF4IHx8IGJ1Zi5sZW5ndGg7XG5cbiAgLy8gUmVzZXJ2ZSBtYXggcG9zc2libGUgbGVuZ3RoICgyIHdvcmRzIHBlciBjaGFyKVxuICAvLyBOQjogYnkgdW5rbm93biByZWFzb25zLCBBcnJheSBpcyBzaWduaWZpY2FudGx5IGZhc3RlciBmb3JcbiAgLy8gICAgIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkgdGhhbiBVaW50MTZBcnJheS5cbiAgdmFyIHV0ZjE2YnVmID0gbmV3IEFycmF5KGxlbiAqIDIpO1xuXG4gIGZvciAob3V0ID0gMCwgaSA9IDA7IGkgPCBsZW47KSB7XG4gICAgYyA9IGJ1ZltpKytdO1xuICAgIC8vIHF1aWNrIHByb2Nlc3MgYXNjaWlcbiAgICBpZiAoYyA8IDB4ODApIHsgdXRmMTZidWZbb3V0KytdID0gYzsgY29udGludWU7IH1cblxuICAgIGNfbGVuID0gX3V0ZjhsZW5bY107XG4gICAgLy8gc2tpcCA1ICYgNiBieXRlIGNvZGVzXG4gICAgaWYgKGNfbGVuID4gNCkgeyB1dGYxNmJ1ZltvdXQrK10gPSAweGZmZmQ7IGkgKz0gY19sZW4gLSAxOyBjb250aW51ZTsgfVxuXG4gICAgLy8gYXBwbHkgbWFzayBvbiBmaXJzdCBieXRlXG4gICAgYyAmPSBjX2xlbiA9PT0gMiA/IDB4MWYgOiBjX2xlbiA9PT0gMyA/IDB4MGYgOiAweDA3O1xuICAgIC8vIGpvaW4gdGhlIHJlc3RcbiAgICB3aGlsZSAoY19sZW4gPiAxICYmIGkgPCBsZW4pIHtcbiAgICAgIGMgPSAoYyA8PCA2KSB8IChidWZbaSsrXSAmIDB4M2YpO1xuICAgICAgY19sZW4tLTtcbiAgICB9XG5cbiAgICAvLyB0ZXJtaW5hdGVkIGJ5IGVuZCBvZiBzdHJpbmc/XG4gICAgaWYgKGNfbGVuID4gMSkgeyB1dGYxNmJ1ZltvdXQrK10gPSAweGZmZmQ7IGNvbnRpbnVlOyB9XG5cbiAgICBpZiAoYyA8IDB4MTAwMDApIHtcbiAgICAgIHV0ZjE2YnVmW291dCsrXSA9IGM7XG4gICAgfSBlbHNlIHtcbiAgICAgIGMgLT0gMHgxMDAwMDtcbiAgICAgIHV0ZjE2YnVmW291dCsrXSA9IDB4ZDgwMCB8ICgoYyA+PiAxMCkgJiAweDNmZik7XG4gICAgICB1dGYxNmJ1ZltvdXQrK10gPSAweGRjMDAgfCAoYyAmIDB4M2ZmKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnVmMmJpbnN0cmluZyh1dGYxNmJ1Ziwgb3V0KTtcbn07XG5cblxuLy8gQ2FsY3VsYXRlIG1heCBwb3NzaWJsZSBwb3NpdGlvbiBpbiB1dGY4IGJ1ZmZlcixcbi8vIHRoYXQgd2lsbCBub3QgYnJlYWsgc2VxdWVuY2UuIElmIHRoYXQncyBub3QgcG9zc2libGVcbi8vIC0gKHZlcnkgc21hbGwgbGltaXRzKSByZXR1cm4gbWF4IHNpemUgYXMgaXMuXG4vL1xuLy8gYnVmW10gLSB1dGY4IGJ5dGVzIGFycmF5XG4vLyBtYXggICAtIGxlbmd0aCBsaW1pdCAobWFuZGF0b3J5KTtcbmV4cG9ydHMudXRmOGJvcmRlciA9IGZ1bmN0aW9uIChidWYsIG1heCkge1xuICB2YXIgcG9zO1xuXG4gIG1heCA9IG1heCB8fCBidWYubGVuZ3RoO1xuICBpZiAobWF4ID4gYnVmLmxlbmd0aCkgeyBtYXggPSBidWYubGVuZ3RoOyB9XG5cbiAgLy8gZ28gYmFjayBmcm9tIGxhc3QgcG9zaXRpb24sIHVudGlsIHN0YXJ0IG9mIHNlcXVlbmNlIGZvdW5kXG4gIHBvcyA9IG1heCAtIDE7XG4gIHdoaWxlIChwb3MgPj0gMCAmJiAoYnVmW3Bvc10gJiAweEMwKSA9PT0gMHg4MCkgeyBwb3MtLTsgfVxuXG4gIC8vIFZlcnkgc21hbGwgYW5kIGJyb2tlbiBzZXF1ZW5jZSxcbiAgLy8gcmV0dXJuIG1heCwgYmVjYXVzZSB3ZSBzaG91bGQgcmV0dXJuIHNvbWV0aGluZyBhbnl3YXkuXG4gIGlmIChwb3MgPCAwKSB7IHJldHVybiBtYXg7IH1cblxuICAvLyBJZiB3ZSBjYW1lIHRvIHN0YXJ0IG9mIGJ1ZmZlciAtIHRoYXQgbWVhbnMgYnVmZmVyIGlzIHRvbyBzbWFsbCxcbiAgLy8gcmV0dXJuIG1heCB0b28uXG4gIGlmIChwb3MgPT09IDApIHsgcmV0dXJuIG1heDsgfVxuXG4gIHJldHVybiAocG9zICsgX3V0ZjhsZW5bYnVmW3Bvc11dID4gbWF4KSA/IHBvcyA6IG1heDtcbn07XG4iXSwibmFtZXMiOlsidXRpbHMiLCJyZXF1aXJlIiwiU1RSX0FQUExZX09LIiwiU1RSX0FQUExZX1VJQV9PSyIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImFwcGx5IiwiX18iLCJVaW50OEFycmF5IiwiX3V0ZjhsZW4iLCJCdWY4IiwicSIsImV4cG9ydHMiLCJzdHJpbmcyYnVmIiwic3RyIiwiYnVmIiwiYyIsImMyIiwibV9wb3MiLCJpIiwic3RyX2xlbiIsImxlbmd0aCIsImJ1Zl9sZW4iLCJjaGFyQ29kZUF0IiwiYnVmMmJpbnN0cmluZyIsImxlbiIsInN1YmFycmF5Iiwic2hyaW5rQnVmIiwicmVzdWx0IiwiYmluc3RyaW5nMmJ1ZiIsImJ1ZjJzdHJpbmciLCJtYXgiLCJvdXQiLCJjX2xlbiIsInV0ZjE2YnVmIiwiQXJyYXkiLCJ1dGY4Ym9yZGVyIiwicG9zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/utils/strings.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/adler32.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/adler32.js ***!
  \**************************************************************************/
/***/ ((module) => {

eval("\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nfunction adler32(adler, buf, len, pos) {\n    var s1 = adler & 0xffff | 0, s2 = adler >>> 16 & 0xffff | 0, n = 0;\n    while(len !== 0){\n        // Set limit ~ twice less than 5552, to keep\n        // s2 in 31-bits, because we force signed ints.\n        // in other case %= will fail.\n        n = len > 2000 ? 2000 : len;\n        len -= n;\n        do {\n            s1 = s1 + buf[pos++] | 0;\n            s2 = s2 + s1 | 0;\n        }while (--n);\n        s1 %= 65521;\n        s2 %= 65521;\n    }\n    return s1 | s2 << 16 | 0;\n}\nmodule.exports = adler32;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHBkZi1saWIvdXBuZy9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9hZGxlcjMyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsMERBQTBEO0FBQzFELHFFQUFxRTtBQUNyRSw0QkFBNEI7QUFFNUIsZ0RBQWdEO0FBQ2hELGtEQUFrRDtBQUNsRCxFQUFFO0FBQ0Ysb0VBQW9FO0FBQ3BFLHdFQUF3RTtBQUN4RSx5Q0FBeUM7QUFDekMsRUFBRTtBQUNGLHdFQUF3RTtBQUN4RSx5RUFBeUU7QUFDekUsaURBQWlEO0FBQ2pELEVBQUU7QUFDRiwwRUFBMEU7QUFDMUUseUVBQXlFO0FBQ3pFLDBFQUEwRTtBQUMxRSxxQ0FBcUM7QUFDckMsNkVBQTZFO0FBQzdFLG1EQUFtRDtBQUNuRCw2RUFBNkU7QUFFN0UsU0FBU0EsUUFBUUMsS0FBSyxFQUFFQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsR0FBRztJQUNuQyxJQUFJQyxLQUFLLFFBQVMsU0FBUyxHQUN2QkMsS0FBSyxVQUFZLEtBQU0sU0FBUyxHQUNoQ0MsSUFBSTtJQUVSLE1BQU9KLFFBQVEsRUFBRztRQUNoQiw0Q0FBNEM7UUFDNUMsK0NBQStDO1FBQy9DLDhCQUE4QjtRQUM5QkksSUFBSUosTUFBTSxPQUFPLE9BQU9BO1FBQ3hCQSxPQUFPSTtRQUVQLEdBQUc7WUFDREYsS0FBSyxLQUFNSCxHQUFHLENBQUNFLE1BQU0sR0FBRztZQUN4QkUsS0FBSyxLQUFNRCxLQUFLO1FBQ2xCLFFBQVMsRUFBRUUsR0FBRztRQUVkRixNQUFNO1FBQ05DLE1BQU07SUFDUjtJQUVBLE9BQU8sS0FBT0EsTUFBTSxLQUFNO0FBQzVCO0FBR0FFLE9BQU9DLE9BQU8sR0FBR1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaXZpbC1lbmdpbmVlcmluZy1wbGF0Zm9ybS8uL25vZGVfbW9kdWxlcy9AcGRmLWxpYi91cG5nL25vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL2FkbGVyMzIuanM/NjQ5MSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8vIE5vdGU6IGFkbGVyMzIgdGFrZXMgMTIlIGZvciBsZXZlbCAwIGFuZCAyJSBmb3IgbGV2ZWwgNi5cbi8vIEl0IGlzbid0IHdvcnRoIGl0IHRvIG1ha2UgYWRkaXRpb25hbCBvcHRpbWl6YXRpb25zIGFzIGluIG9yaWdpbmFsLlxuLy8gU21hbGwgc2l6ZSBpcyBwcmVmZXJhYmxlLlxuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbmZ1bmN0aW9uIGFkbGVyMzIoYWRsZXIsIGJ1ZiwgbGVuLCBwb3MpIHtcbiAgdmFyIHMxID0gKGFkbGVyICYgMHhmZmZmKSB8MCxcbiAgICAgIHMyID0gKChhZGxlciA+Pj4gMTYpICYgMHhmZmZmKSB8MCxcbiAgICAgIG4gPSAwO1xuXG4gIHdoaWxlIChsZW4gIT09IDApIHtcbiAgICAvLyBTZXQgbGltaXQgfiB0d2ljZSBsZXNzIHRoYW4gNTU1MiwgdG8ga2VlcFxuICAgIC8vIHMyIGluIDMxLWJpdHMsIGJlY2F1c2Ugd2UgZm9yY2Ugc2lnbmVkIGludHMuXG4gICAgLy8gaW4gb3RoZXIgY2FzZSAlPSB3aWxsIGZhaWwuXG4gICAgbiA9IGxlbiA+IDIwMDAgPyAyMDAwIDogbGVuO1xuICAgIGxlbiAtPSBuO1xuXG4gICAgZG8ge1xuICAgICAgczEgPSAoczEgKyBidWZbcG9zKytdKSB8MDtcbiAgICAgIHMyID0gKHMyICsgczEpIHwwO1xuICAgIH0gd2hpbGUgKC0tbik7XG5cbiAgICBzMSAlPSA2NTUyMTtcbiAgICBzMiAlPSA2NTUyMTtcbiAgfVxuXG4gIHJldHVybiAoczEgfCAoczIgPDwgMTYpKSB8MDtcbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGFkbGVyMzI7XG4iXSwibmFtZXMiOlsiYWRsZXIzMiIsImFkbGVyIiwiYnVmIiwibGVuIiwicG9zIiwiczEiLCJzMiIsIm4iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/adler32.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/constants.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/constants.js ***!
  \****************************************************************************/
/***/ ((module) => {

eval("\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nmodule.exports = {\n    /* Allowed flush values; see deflate() and inflate() below for details */ Z_NO_FLUSH: 0,\n    Z_PARTIAL_FLUSH: 1,\n    Z_SYNC_FLUSH: 2,\n    Z_FULL_FLUSH: 3,\n    Z_FINISH: 4,\n    Z_BLOCK: 5,\n    Z_TREES: 6,\n    /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */ Z_OK: 0,\n    Z_STREAM_END: 1,\n    Z_NEED_DICT: 2,\n    Z_ERRNO: -1,\n    Z_STREAM_ERROR: -2,\n    Z_DATA_ERROR: -3,\n    //Z_MEM_ERROR:     -4,\n    Z_BUF_ERROR: -5,\n    //Z_VERSION_ERROR: -6,\n    /* compression levels */ Z_NO_COMPRESSION: 0,\n    Z_BEST_SPEED: 1,\n    Z_BEST_COMPRESSION: 9,\n    Z_DEFAULT_COMPRESSION: -1,\n    Z_FILTERED: 1,\n    Z_HUFFMAN_ONLY: 2,\n    Z_RLE: 3,\n    Z_FIXED: 4,\n    Z_DEFAULT_STRATEGY: 0,\n    /* Possible values of the data_type field (though see inflate()) */ Z_BINARY: 0,\n    Z_TEXT: 1,\n    //Z_ASCII:                1, // = Z_TEXT (deprecated)\n    Z_UNKNOWN: 2,\n    /* The deflate compression method */ Z_DEFLATED: 8\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHBkZi1saWIvdXBuZy9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxnREFBZ0Q7QUFDaEQsa0RBQWtEO0FBQ2xELEVBQUU7QUFDRixvRUFBb0U7QUFDcEUsd0VBQXdFO0FBQ3hFLHlDQUF5QztBQUN6QyxFQUFFO0FBQ0Ysd0VBQXdFO0FBQ3hFLHlFQUF5RTtBQUN6RSxpREFBaUQ7QUFDakQsRUFBRTtBQUNGLDBFQUEwRTtBQUMxRSx5RUFBeUU7QUFDekUsMEVBQTBFO0FBQzFFLHFDQUFxQztBQUNyQyw2RUFBNkU7QUFDN0UsbURBQW1EO0FBQ25ELDZFQUE2RTtBQUU3RUEsT0FBT0MsT0FBTyxHQUFHO0lBRWYsdUVBQXVFLEdBQ3ZFQyxZQUFvQjtJQUNwQkMsaUJBQW9CO0lBQ3BCQyxjQUFvQjtJQUNwQkMsY0FBb0I7SUFDcEJDLFVBQW9CO0lBQ3BCQyxTQUFvQjtJQUNwQkMsU0FBb0I7SUFFcEI7O0VBRUEsR0FDQUMsTUFBb0I7SUFDcEJDLGNBQW9CO0lBQ3BCQyxhQUFvQjtJQUNwQkMsU0FBbUIsQ0FBQztJQUNwQkMsZ0JBQW1CLENBQUM7SUFDcEJDLGNBQW1CLENBQUM7SUFDcEIsc0JBQXNCO0lBQ3RCQyxhQUFtQixDQUFDO0lBQ3BCLHNCQUFzQjtJQUV0QixzQkFBc0IsR0FDdEJDLGtCQUEwQjtJQUMxQkMsY0FBMEI7SUFDMUJDLG9CQUEwQjtJQUMxQkMsdUJBQXlCLENBQUM7SUFHMUJDLFlBQTBCO0lBQzFCQyxnQkFBMEI7SUFDMUJDLE9BQTBCO0lBQzFCQyxTQUEwQjtJQUMxQkMsb0JBQTBCO0lBRTFCLGlFQUFpRSxHQUNqRUMsVUFBMEI7SUFDMUJDLFFBQTBCO0lBQzFCLHFEQUFxRDtJQUNyREMsV0FBMEI7SUFFMUIsa0NBQWtDLEdBQ2xDQyxZQUEwQjtBQUU1QiIsInNvdXJjZXMiOlsid2VicGFjazovL2NpdmlsLWVuZ2luZWVyaW5nLXBsYXRmb3JtLy4vbm9kZV9tb2R1bGVzL0BwZGYtbGliL3Vwbmcvbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvY29uc3RhbnRzLmpzP2EzY2QiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIC8qIEFsbG93ZWQgZmx1c2ggdmFsdWVzOyBzZWUgZGVmbGF0ZSgpIGFuZCBpbmZsYXRlKCkgYmVsb3cgZm9yIGRldGFpbHMgKi9cbiAgWl9OT19GTFVTSDogICAgICAgICAwLFxuICBaX1BBUlRJQUxfRkxVU0g6ICAgIDEsXG4gIFpfU1lOQ19GTFVTSDogICAgICAgMixcbiAgWl9GVUxMX0ZMVVNIOiAgICAgICAzLFxuICBaX0ZJTklTSDogICAgICAgICAgIDQsXG4gIFpfQkxPQ0s6ICAgICAgICAgICAgNSxcbiAgWl9UUkVFUzogICAgICAgICAgICA2LFxuXG4gIC8qIFJldHVybiBjb2RlcyBmb3IgdGhlIGNvbXByZXNzaW9uL2RlY29tcHJlc3Npb24gZnVuY3Rpb25zLiBOZWdhdGl2ZSB2YWx1ZXNcbiAgKiBhcmUgZXJyb3JzLCBwb3NpdGl2ZSB2YWx1ZXMgYXJlIHVzZWQgZm9yIHNwZWNpYWwgYnV0IG5vcm1hbCBldmVudHMuXG4gICovXG4gIFpfT0s6ICAgICAgICAgICAgICAgMCxcbiAgWl9TVFJFQU1fRU5EOiAgICAgICAxLFxuICBaX05FRURfRElDVDogICAgICAgIDIsXG4gIFpfRVJSTk86ICAgICAgICAgICAtMSxcbiAgWl9TVFJFQU1fRVJST1I6ICAgIC0yLFxuICBaX0RBVEFfRVJST1I6ICAgICAgLTMsXG4gIC8vWl9NRU1fRVJST1I6ICAgICAtNCxcbiAgWl9CVUZfRVJST1I6ICAgICAgIC01LFxuICAvL1pfVkVSU0lPTl9FUlJPUjogLTYsXG5cbiAgLyogY29tcHJlc3Npb24gbGV2ZWxzICovXG4gIFpfTk9fQ09NUFJFU1NJT046ICAgICAgICAgMCxcbiAgWl9CRVNUX1NQRUVEOiAgICAgICAgICAgICAxLFxuICBaX0JFU1RfQ09NUFJFU1NJT046ICAgICAgIDksXG4gIFpfREVGQVVMVF9DT01QUkVTU0lPTjogICAtMSxcblxuXG4gIFpfRklMVEVSRUQ6ICAgICAgICAgICAgICAgMSxcbiAgWl9IVUZGTUFOX09OTFk6ICAgICAgICAgICAyLFxuICBaX1JMRTogICAgICAgICAgICAgICAgICAgIDMsXG4gIFpfRklYRUQ6ICAgICAgICAgICAgICAgICAgNCxcbiAgWl9ERUZBVUxUX1NUUkFURUdZOiAgICAgICAwLFxuXG4gIC8qIFBvc3NpYmxlIHZhbHVlcyBvZiB0aGUgZGF0YV90eXBlIGZpZWxkICh0aG91Z2ggc2VlIGluZmxhdGUoKSkgKi9cbiAgWl9CSU5BUlk6ICAgICAgICAgICAgICAgICAwLFxuICBaX1RFWFQ6ICAgICAgICAgICAgICAgICAgIDEsXG4gIC8vWl9BU0NJSTogICAgICAgICAgICAgICAgMSwgLy8gPSBaX1RFWFQgKGRlcHJlY2F0ZWQpXG4gIFpfVU5LTk9XTjogICAgICAgICAgICAgICAgMixcblxuICAvKiBUaGUgZGVmbGF0ZSBjb21wcmVzc2lvbiBtZXRob2QgKi9cbiAgWl9ERUZMQVRFRDogICAgICAgICAgICAgICA4XG4gIC8vWl9OVUxMOiAgICAgICAgICAgICAgICAgbnVsbCAvLyBVc2UgLTEgb3IgbnVsbCBpbmxpbmUsIGRlcGVuZGluZyBvbiB2YXIgdHlwZVxufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiWl9OT19GTFVTSCIsIlpfUEFSVElBTF9GTFVTSCIsIlpfU1lOQ19GTFVTSCIsIlpfRlVMTF9GTFVTSCIsIlpfRklOSVNIIiwiWl9CTE9DSyIsIlpfVFJFRVMiLCJaX09LIiwiWl9TVFJFQU1fRU5EIiwiWl9ORUVEX0RJQ1QiLCJaX0VSUk5PIiwiWl9TVFJFQU1fRVJST1IiLCJaX0RBVEFfRVJST1IiLCJaX0JVRl9FUlJPUiIsIlpfTk9fQ09NUFJFU1NJT04iLCJaX0JFU1RfU1BFRUQiLCJaX0JFU1RfQ09NUFJFU1NJT04iLCJaX0RFRkFVTFRfQ09NUFJFU1NJT04iLCJaX0ZJTFRFUkVEIiwiWl9IVUZGTUFOX09OTFkiLCJaX1JMRSIsIlpfRklYRUQiLCJaX0RFRkFVTFRfU1RSQVRFR1kiLCJaX0JJTkFSWSIsIlpfVEVYVCIsIlpfVU5LTk9XTiIsIlpfREVGTEFURUQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/crc32.js":
/*!************************************************************************!*\
  !*** ./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/crc32.js ***!
  \************************************************************************/
/***/ ((module) => {

eval("\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n// Use ordinary array, since untyped makes no boost here\nfunction makeTable() {\n    var c, table = [];\n    for(var n = 0; n < 256; n++){\n        c = n;\n        for(var k = 0; k < 8; k++){\n            c = c & 1 ? 0xEDB88320 ^ c >>> 1 : c >>> 1;\n        }\n        table[n] = c;\n    }\n    return table;\n}\n// Create table on load. Just 255 signed longs. Not a problem.\nvar crcTable = makeTable();\nfunction crc32(crc, buf, len, pos) {\n    var t = crcTable, end = pos + len;\n    crc ^= -1;\n    for(var i = pos; i < end; i++){\n        crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 0xFF];\n    }\n    return crc ^ -1; // >>> 0;\n}\nmodule.exports = crc32;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHBkZi1saWIvdXBuZy9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9jcmMzMi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLG1EQUFtRDtBQUNuRCwwREFBMEQ7QUFDMUQsZ0NBQWdDO0FBRWhDLGdEQUFnRDtBQUNoRCxrREFBa0Q7QUFDbEQsRUFBRTtBQUNGLG9FQUFvRTtBQUNwRSx3RUFBd0U7QUFDeEUseUNBQXlDO0FBQ3pDLEVBQUU7QUFDRix3RUFBd0U7QUFDeEUseUVBQXlFO0FBQ3pFLGlEQUFpRDtBQUNqRCxFQUFFO0FBQ0YsMEVBQTBFO0FBQzFFLHlFQUF5RTtBQUN6RSwwRUFBMEU7QUFDMUUscUNBQXFDO0FBQ3JDLDZFQUE2RTtBQUM3RSxtREFBbUQ7QUFDbkQsNkVBQTZFO0FBRTdFLHdEQUF3RDtBQUN4RCxTQUFTQTtJQUNQLElBQUlDLEdBQUdDLFFBQVEsRUFBRTtJQUVqQixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSSxLQUFLQSxJQUFLO1FBQzVCRixJQUFJRTtRQUNKLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJLEdBQUdBLElBQUs7WUFDMUJILElBQUssSUFBSyxJQUFNLGFBQWNBLE1BQU0sSUFBT0EsTUFBTTtRQUNuRDtRQUNBQyxLQUFLLENBQUNDLEVBQUUsR0FBR0Y7SUFDYjtJQUVBLE9BQU9DO0FBQ1Q7QUFFQSw4REFBOEQ7QUFDOUQsSUFBSUcsV0FBV0w7QUFHZixTQUFTTSxNQUFNQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxHQUFHO0lBQy9CLElBQUlDLElBQUlOLFVBQ0pPLE1BQU1GLE1BQU1EO0lBRWhCRixPQUFPLENBQUM7SUFFUixJQUFLLElBQUlNLElBQUlILEtBQUtHLElBQUlELEtBQUtDLElBQUs7UUFDOUJOLE1BQU0sUUFBUyxJQUFLSSxDQUFDLENBQUMsQ0FBQ0osTUFBTUMsR0FBRyxDQUFDSyxFQUFFLElBQUksS0FBSztJQUM5QztJQUVBLE9BQVFOLE1BQU8sQ0FBQyxHQUFLLFNBQVM7QUFDaEM7QUFHQU8sT0FBT0MsT0FBTyxHQUFHVCIsInNvdXJjZXMiOlsid2VicGFjazovL2NpdmlsLWVuZ2luZWVyaW5nLXBsYXRmb3JtLy4vbm9kZV9tb2R1bGVzL0BwZGYtbGliL3Vwbmcvbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvY3JjMzIuanM/MDMwMSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8vIE5vdGU6IHdlIGNhbid0IGdldCBzaWduaWZpY2FudCBzcGVlZCBib29zdCBoZXJlLlxuLy8gU28gd3JpdGUgY29kZSB0byBtaW5pbWl6ZSBzaXplIC0gbm8gcHJlZ2VuZXJhdGVkIHRhYmxlc1xuLy8gYW5kIGFycmF5IHRvb2xzIGRlcGVuZGVuY2llcy5cblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG4vLyBVc2Ugb3JkaW5hcnkgYXJyYXksIHNpbmNlIHVudHlwZWQgbWFrZXMgbm8gYm9vc3QgaGVyZVxuZnVuY3Rpb24gbWFrZVRhYmxlKCkge1xuICB2YXIgYywgdGFibGUgPSBbXTtcblxuICBmb3IgKHZhciBuID0gMDsgbiA8IDI1NjsgbisrKSB7XG4gICAgYyA9IG47XG4gICAgZm9yICh2YXIgayA9IDA7IGsgPCA4OyBrKyspIHtcbiAgICAgIGMgPSAoKGMgJiAxKSA/ICgweEVEQjg4MzIwIF4gKGMgPj4+IDEpKSA6IChjID4+PiAxKSk7XG4gICAgfVxuICAgIHRhYmxlW25dID0gYztcbiAgfVxuXG4gIHJldHVybiB0YWJsZTtcbn1cblxuLy8gQ3JlYXRlIHRhYmxlIG9uIGxvYWQuIEp1c3QgMjU1IHNpZ25lZCBsb25ncy4gTm90IGEgcHJvYmxlbS5cbnZhciBjcmNUYWJsZSA9IG1ha2VUYWJsZSgpO1xuXG5cbmZ1bmN0aW9uIGNyYzMyKGNyYywgYnVmLCBsZW4sIHBvcykge1xuICB2YXIgdCA9IGNyY1RhYmxlLFxuICAgICAgZW5kID0gcG9zICsgbGVuO1xuXG4gIGNyYyBePSAtMTtcblxuICBmb3IgKHZhciBpID0gcG9zOyBpIDwgZW5kOyBpKyspIHtcbiAgICBjcmMgPSAoY3JjID4+PiA4KSBeIHRbKGNyYyBeIGJ1ZltpXSkgJiAweEZGXTtcbiAgfVxuXG4gIHJldHVybiAoY3JjIF4gKC0xKSk7IC8vID4+PiAwO1xufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gY3JjMzI7XG4iXSwibmFtZXMiOlsibWFrZVRhYmxlIiwiYyIsInRhYmxlIiwibiIsImsiLCJjcmNUYWJsZSIsImNyYzMyIiwiY3JjIiwiYnVmIiwibGVuIiwicG9zIiwidCIsImVuZCIsImkiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/crc32.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/deflate.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/deflate.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nvar utils = __webpack_require__(/*! ../utils/common */ \"(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/utils/common.js\");\nvar trees = __webpack_require__(/*! ./trees */ \"(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/trees.js\");\nvar adler32 = __webpack_require__(/*! ./adler32 */ \"(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/adler32.js\");\nvar crc32 = __webpack_require__(/*! ./crc32 */ \"(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/crc32.js\");\nvar msg = __webpack_require__(/*! ./messages */ \"(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/messages.js\");\n/* Public constants ==========================================================*/ /* ===========================================================================*/ /* Allowed flush values; see deflate() and inflate() below for details */ var Z_NO_FLUSH = 0;\nvar Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\nvar Z_FULL_FLUSH = 3;\nvar Z_FINISH = 4;\nvar Z_BLOCK = 5;\n//var Z_TREES         = 6;\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */ var Z_OK = 0;\nvar Z_STREAM_END = 1;\n//var Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR = -2;\nvar Z_DATA_ERROR = -3;\n//var Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR = -5;\n//var Z_VERSION_ERROR = -6;\n/* compression levels */ //var Z_NO_COMPRESSION      = 0;\n//var Z_BEST_SPEED          = 1;\n//var Z_BEST_COMPRESSION    = 9;\nvar Z_DEFAULT_COMPRESSION = -1;\nvar Z_FILTERED = 1;\nvar Z_HUFFMAN_ONLY = 2;\nvar Z_RLE = 3;\nvar Z_FIXED = 4;\nvar Z_DEFAULT_STRATEGY = 0;\n/* Possible values of the data_type field (though see inflate()) */ //var Z_BINARY              = 0;\n//var Z_TEXT                = 1;\n//var Z_ASCII               = 1; // = Z_TEXT\nvar Z_UNKNOWN = 2;\n/* The deflate compression method */ var Z_DEFLATED = 8;\n/*============================================================================*/ var MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */ var MAX_WBITS = 15;\n/* 32K LZ77 window */ var DEF_MEM_LEVEL = 8;\nvar LENGTH_CODES = 29;\n/* number of length codes, not counting the special END_BLOCK code */ var LITERALS = 256;\n/* number of literal bytes 0..255 */ var L_CODES = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */ var D_CODES = 30;\n/* number of distance codes */ var BL_CODES = 19;\n/* number of codes used to transfer the bit lengths */ var HEAP_SIZE = 2 * L_CODES + 1;\n/* maximum heap size */ var MAX_BITS = 15;\n/* All codes must not exceed MAX_BITS bits */ var MIN_MATCH = 3;\nvar MAX_MATCH = 258;\nvar MIN_LOOKAHEAD = MAX_MATCH + MIN_MATCH + 1;\nvar PRESET_DICT = 0x20;\nvar INIT_STATE = 42;\nvar EXTRA_STATE = 69;\nvar NAME_STATE = 73;\nvar COMMENT_STATE = 91;\nvar HCRC_STATE = 103;\nvar BUSY_STATE = 113;\nvar FINISH_STATE = 666;\nvar BS_NEED_MORE = 1; /* block not completed, need more input or more output */ \nvar BS_BLOCK_DONE = 2; /* block flush performed */ \nvar BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */ \nvar BS_FINISH_DONE = 4; /* finish done, accept no more input or output */ \nvar OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\nfunction err(strm, errorCode) {\n    strm.msg = msg[errorCode];\n    return errorCode;\n}\nfunction rank(f) {\n    return (f << 1) - (f > 4 ? 9 : 0);\n}\nfunction zero(buf) {\n    var len = buf.length;\n    while(--len >= 0){\n        buf[len] = 0;\n    }\n}\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output goes\n * through this function so some applications may wish to modify it\n * to avoid allocating a large strm->output buffer and copying into it.\n * (See also read_buf()).\n */ function flush_pending(strm) {\n    var s = strm.state;\n    //_tr_flush_bits(s);\n    var len = s.pending;\n    if (len > strm.avail_out) {\n        len = strm.avail_out;\n    }\n    if (len === 0) {\n        return;\n    }\n    utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);\n    strm.next_out += len;\n    s.pending_out += len;\n    strm.total_out += len;\n    strm.avail_out -= len;\n    s.pending -= len;\n    if (s.pending === 0) {\n        s.pending_out = 0;\n    }\n}\nfunction flush_block_only(s, last) {\n    trees._tr_flush_block(s, s.block_start >= 0 ? s.block_start : -1, s.strstart - s.block_start, last);\n    s.block_start = s.strstart;\n    flush_pending(s.strm);\n}\nfunction put_byte(s, b) {\n    s.pending_buf[s.pending++] = b;\n}\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */ function putShortMSB(s, b) {\n    //  put_byte(s, (Byte)(b >> 8));\n    //  put_byte(s, (Byte)(b & 0xff));\n    s.pending_buf[s.pending++] = b >>> 8 & 0xff;\n    s.pending_buf[s.pending++] = b & 0xff;\n}\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */ function read_buf(strm, buf, start, size) {\n    var len = strm.avail_in;\n    if (len > size) {\n        len = size;\n    }\n    if (len === 0) {\n        return 0;\n    }\n    strm.avail_in -= len;\n    // zmemcpy(buf, strm->next_in, len);\n    utils.arraySet(buf, strm.input, strm.next_in, len, start);\n    if (strm.state.wrap === 1) {\n        strm.adler = adler32(strm.adler, buf, len, start);\n    } else if (strm.state.wrap === 2) {\n        strm.adler = crc32(strm.adler, buf, len, start);\n    }\n    strm.next_in += len;\n    strm.total_in += len;\n    return len;\n}\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */ function longest_match(s, cur_match) {\n    var chain_length = s.max_chain_length; /* max hash chain length */ \n    var scan = s.strstart; /* current string */ \n    var match; /* matched string */ \n    var len; /* length of current match */ \n    var best_len = s.prev_length; /* best match length so far */ \n    var nice_match = s.nice_match; /* stop if match long enough */ \n    var limit = s.strstart > s.w_size - MIN_LOOKAHEAD ? s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0 /*NIL*/ ;\n    var _win = s.window; // shortcut\n    var wmask = s.w_mask;\n    var prev = s.prev;\n    /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */ var strend = s.strstart + MAX_MATCH;\n    var scan_end1 = _win[scan + best_len - 1];\n    var scan_end = _win[scan + best_len];\n    /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */ // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n    /* Do not waste too much time if we already have a good match: */ if (s.prev_length >= s.good_match) {\n        chain_length >>= 2;\n    }\n    /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */ if (nice_match > s.lookahead) {\n        nice_match = s.lookahead;\n    }\n    // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n    do {\n        // Assert(cur_match < s->strstart, \"no future\");\n        match = cur_match;\n        /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */ if (_win[match + best_len] !== scan_end || _win[match + best_len - 1] !== scan_end1 || _win[match] !== _win[scan] || _win[++match] !== _win[scan + 1]) {\n            continue;\n        }\n        /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */ scan += 2;\n        match++;\n        // Assert(*scan == *match, \"match[2]?\");\n        /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */ do {\n        /*jshint noempty:false*/ }while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && scan < strend);\n        // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n        len = MAX_MATCH - (strend - scan);\n        scan = strend - MAX_MATCH;\n        if (len > best_len) {\n            s.match_start = cur_match;\n            best_len = len;\n            if (len >= nice_match) {\n                break;\n            }\n            scan_end1 = _win[scan + best_len - 1];\n            scan_end = _win[scan + best_len];\n        }\n    }while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n    if (best_len <= s.lookahead) {\n        return best_len;\n    }\n    return s.lookahead;\n}\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */ function fill_window(s) {\n    var _w_size = s.w_size;\n    var p, n, m, more, str;\n    //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n    do {\n        more = s.window_size - s.lookahead - s.strstart;\n        // JS ints have 32 bit, block below not needed\n        /* Deal with !@#$% 64K limit: */ //if (sizeof(int) <= 2) {\n        //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n        //        more = wsize;\n        //\n        //  } else if (more == (unsigned)(-1)) {\n        //        /* Very unlikely, but possible on 16 bit machine if\n        //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n        //         */\n        //        more--;\n        //    }\n        //}\n        /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */ if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n            utils.arraySet(s.window, s.window, _w_size, _w_size, 0);\n            s.match_start -= _w_size;\n            s.strstart -= _w_size;\n            /* we now have strstart >= MAX_DIST */ s.block_start -= _w_size;\n            /* Slide the hash table (could be avoided with 32 bit values\n       at the expense of memory usage). We slide even when level == 0\n       to keep the hash table consistent if we switch back to level > 0\n       later. (Using level 0 permanently is not an optimal usage of\n       zlib, so we don't care about this pathological case.)\n       */ n = s.hash_size;\n            p = n;\n            do {\n                m = s.head[--p];\n                s.head[p] = m >= _w_size ? m - _w_size : 0;\n            }while (--n);\n            n = _w_size;\n            p = n;\n            do {\n                m = s.prev[--p];\n                s.prev[p] = m >= _w_size ? m - _w_size : 0;\n            /* If n is not on any hash chain, prev[n] is garbage but\n         * its value will never be used.\n         */ }while (--n);\n            more += _w_size;\n        }\n        if (s.strm.avail_in === 0) {\n            break;\n        }\n        /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */ //Assert(more >= 2, \"more < 2\");\n        n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n        s.lookahead += n;\n        /* Initialize the hash value now that we have some input: */ if (s.lookahead + s.insert >= MIN_MATCH) {\n            str = s.strstart - s.insert;\n            s.ins_h = s.window[str];\n            /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */ s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + 1]) & s.hash_mask;\n            //#if MIN_MATCH != 3\n            //        Call update_hash() MIN_MATCH-3 more times\n            //#endif\n            while(s.insert){\n                /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */ s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n                s.prev[str & s.w_mask] = s.head[s.ins_h];\n                s.head[s.ins_h] = str;\n                str++;\n                s.insert--;\n                if (s.lookahead + s.insert < MIN_MATCH) {\n                    break;\n                }\n            }\n        }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */ }while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n/* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */ //  if (s.high_water < s.window_size) {\n//    var curr = s.strstart + s.lookahead;\n//    var init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n}\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n * This function does not insert new strings in the dictionary since\n * uncompressible data is probably not useful. This function is used\n * only for the level=0 compression option.\n * NOTE: this function should be optimized to avoid extra copying from\n * window to pending_buf.\n */ function deflate_stored(s, flush) {\n    /* Stored blocks are limited to 0xffff bytes, pending_buf is limited\n   * to pending_buf_size, and each stored block has a 5 byte header:\n   */ var max_block_size = 0xffff;\n    if (max_block_size > s.pending_buf_size - 5) {\n        max_block_size = s.pending_buf_size - 5;\n    }\n    /* Copy as much as possible from input to output: */ for(;;){\n        /* Fill the window as much as possible: */ if (s.lookahead <= 1) {\n            //Assert(s->strstart < s->w_size+MAX_DIST(s) ||\n            //  s->block_start >= (long)s->w_size, \"slide too late\");\n            //      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||\n            //        s.block_start >= s.w_size)) {\n            //        throw  new Error(\"slide too late\");\n            //      }\n            fill_window(s);\n            if (s.lookahead === 0 && flush === Z_NO_FLUSH) {\n                return BS_NEED_MORE;\n            }\n            if (s.lookahead === 0) {\n                break;\n            }\n        /* flush the current block */ }\n        //Assert(s->block_start >= 0L, \"block gone\");\n        //    if (s.block_start < 0) throw new Error(\"block gone\");\n        s.strstart += s.lookahead;\n        s.lookahead = 0;\n        /* Emit a stored block if pending_buf will be full: */ var max_start = s.block_start + max_block_size;\n        if (s.strstart === 0 || s.strstart >= max_start) {\n            /* strstart == 0 is possible when wraparound on 16-bit machine */ s.lookahead = s.strstart - max_start;\n            s.strstart = max_start;\n            /*** FLUSH_BLOCK(s, 0); ***/ flush_block_only(s, false);\n            if (s.strm.avail_out === 0) {\n                return BS_NEED_MORE;\n            }\n        /***/ }\n        /* Flush if we may have to slide, otherwise block_start may become\n     * negative and the data will be gone:\n     */ if (s.strstart - s.block_start >= s.w_size - MIN_LOOKAHEAD) {\n            /*** FLUSH_BLOCK(s, 0); ***/ flush_block_only(s, false);\n            if (s.strm.avail_out === 0) {\n                return BS_NEED_MORE;\n            }\n        /***/ }\n    }\n    s.insert = 0;\n    if (flush === Z_FINISH) {\n        /*** FLUSH_BLOCK(s, 1); ***/ flush_block_only(s, true);\n        if (s.strm.avail_out === 0) {\n            return BS_FINISH_STARTED;\n        }\n        /***/ return BS_FINISH_DONE;\n    }\n    if (s.strstart > s.block_start) {\n        /*** FLUSH_BLOCK(s, 0); ***/ flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n            return BS_NEED_MORE;\n        }\n    /***/ }\n    return BS_NEED_MORE;\n}\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */ function deflate_fast(s, flush) {\n    var hash_head; /* head of the hash chain */ \n    var bflush; /* set if current block must be flushed */ \n    for(;;){\n        /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */ if (s.lookahead < MIN_LOOKAHEAD) {\n            fill_window(s);\n            if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n                return BS_NEED_MORE;\n            }\n            if (s.lookahead === 0) {\n                break; /* flush the current block */ \n            }\n        }\n        /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */ hash_head = 0 /*NIL*/ ;\n        if (s.lookahead >= MIN_MATCH) {\n            /*** INSERT_STRING(s, s.strstart, hash_head); ***/ s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n            s.head[s.ins_h] = s.strstart;\n        /***/ }\n        /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */ if (hash_head !== 0 /*NIL*/  && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {\n            /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */ s.match_length = longest_match(s, hash_head);\n        /* longest_match() sets match_start */ }\n        if (s.match_length >= MIN_MATCH) {\n            // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n            /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/ bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n            s.lookahead -= s.match_length;\n            /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */ if (s.match_length <= s.max_lazy_match /*max_insert_length*/  && s.lookahead >= MIN_MATCH) {\n                s.match_length--; /* string at strstart already in table */ \n                do {\n                    s.strstart++;\n                    /*** INSERT_STRING(s, s.strstart, hash_head); ***/ s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n                    hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n                    s.head[s.ins_h] = s.strstart;\n                /***/ /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */ }while (--s.match_length !== 0);\n                s.strstart++;\n            } else {\n                s.strstart += s.match_length;\n                s.match_length = 0;\n                s.ins_h = s.window[s.strstart];\n                /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */ s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + 1]) & s.hash_mask;\n            //#if MIN_MATCH != 3\n            //                Call UPDATE_HASH() MIN_MATCH-3 more times\n            //#endif\n            /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */ }\n        } else {\n            /* No match, output a literal byte */ //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n            /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/ bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n            s.lookahead--;\n            s.strstart++;\n        }\n        if (bflush) {\n            /*** FLUSH_BLOCK(s, 0); ***/ flush_block_only(s, false);\n            if (s.strm.avail_out === 0) {\n                return BS_NEED_MORE;\n            }\n        /***/ }\n    }\n    s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n    if (flush === Z_FINISH) {\n        /*** FLUSH_BLOCK(s, 1); ***/ flush_block_only(s, true);\n        if (s.strm.avail_out === 0) {\n            return BS_FINISH_STARTED;\n        }\n        /***/ return BS_FINISH_DONE;\n    }\n    if (s.last_lit) {\n        /*** FLUSH_BLOCK(s, 0); ***/ flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n            return BS_NEED_MORE;\n        }\n    /***/ }\n    return BS_BLOCK_DONE;\n}\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */ function deflate_slow(s, flush) {\n    var hash_head; /* head of hash chain */ \n    var bflush; /* set if current block must be flushed */ \n    var max_insert;\n    /* Process the input block. */ for(;;){\n        /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */ if (s.lookahead < MIN_LOOKAHEAD) {\n            fill_window(s);\n            if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n                return BS_NEED_MORE;\n            }\n            if (s.lookahead === 0) {\n                break;\n            } /* flush the current block */ \n        }\n        /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */ hash_head = 0 /*NIL*/ ;\n        if (s.lookahead >= MIN_MATCH) {\n            /*** INSERT_STRING(s, s.strstart, hash_head); ***/ s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n            s.head[s.ins_h] = s.strstart;\n        /***/ }\n        /* Find the longest match, discarding those <= prev_length.\n     */ s.prev_length = s.match_length;\n        s.prev_match = s.match_start;\n        s.match_length = MIN_MATCH - 1;\n        if (hash_head !== 0 /*NIL*/  && s.prev_length < s.max_lazy_match && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {\n            /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */ s.match_length = longest_match(s, hash_head);\n            /* longest_match() sets match_start */ if (s.match_length <= 5 && (s.strategy === Z_FILTERED || s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096 /*TOO_FAR*/ )) {\n                /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */ s.match_length = MIN_MATCH - 1;\n            }\n        }\n        /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */ if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n            max_insert = s.strstart + s.lookahead - MIN_MATCH;\n            /* Do not insert strings in hash table beyond this. */ //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n            /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/ bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n            /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */ s.lookahead -= s.prev_length - 1;\n            s.prev_length -= 2;\n            do {\n                if (++s.strstart <= max_insert) {\n                    /*** INSERT_STRING(s, s.strstart, hash_head); ***/ s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n                    hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n                    s.head[s.ins_h] = s.strstart;\n                /***/ }\n            }while (--s.prev_length !== 0);\n            s.match_available = 0;\n            s.match_length = MIN_MATCH - 1;\n            s.strstart++;\n            if (bflush) {\n                /*** FLUSH_BLOCK(s, 0); ***/ flush_block_only(s, false);\n                if (s.strm.avail_out === 0) {\n                    return BS_NEED_MORE;\n                }\n            /***/ }\n        } else if (s.match_available) {\n            /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */ //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n            /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/ bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n            if (bflush) {\n                /*** FLUSH_BLOCK_ONLY(s, 0) ***/ flush_block_only(s, false);\n            /***/ }\n            s.strstart++;\n            s.lookahead--;\n            if (s.strm.avail_out === 0) {\n                return BS_NEED_MORE;\n            }\n        } else {\n            /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */ s.match_available = 1;\n            s.strstart++;\n            s.lookahead--;\n        }\n    }\n    //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n    if (s.match_available) {\n        //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n        /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/ bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n        s.match_available = 0;\n    }\n    s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n    if (flush === Z_FINISH) {\n        /*** FLUSH_BLOCK(s, 1); ***/ flush_block_only(s, true);\n        if (s.strm.avail_out === 0) {\n            return BS_FINISH_STARTED;\n        }\n        /***/ return BS_FINISH_DONE;\n    }\n    if (s.last_lit) {\n        /*** FLUSH_BLOCK(s, 0); ***/ flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n            return BS_NEED_MORE;\n        }\n    /***/ }\n    return BS_BLOCK_DONE;\n}\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */ function deflate_rle(s, flush) {\n    var bflush; /* set if current block must be flushed */ \n    var prev; /* byte at distance one to match */ \n    var scan, strend; /* scan goes up to strend for length of run */ \n    var _win = s.window;\n    for(;;){\n        /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */ if (s.lookahead <= MAX_MATCH) {\n            fill_window(s);\n            if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {\n                return BS_NEED_MORE;\n            }\n            if (s.lookahead === 0) {\n                break;\n            } /* flush the current block */ \n        }\n        /* See how many times the previous byte repeats */ s.match_length = 0;\n        if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n            scan = s.strstart - 1;\n            prev = _win[scan];\n            if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n                strend = s.strstart + MAX_MATCH;\n                do {\n                /*jshint noempty:false*/ }while (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && scan < strend);\n                s.match_length = MAX_MATCH - (strend - scan);\n                if (s.match_length > s.lookahead) {\n                    s.match_length = s.lookahead;\n                }\n            }\n        //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n        }\n        /* Emit match if have run of MIN_MATCH or longer, else emit literal */ if (s.match_length >= MIN_MATCH) {\n            //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n            /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/ bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);\n            s.lookahead -= s.match_length;\n            s.strstart += s.match_length;\n            s.match_length = 0;\n        } else {\n            /* No match, output a literal byte */ //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n            /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/ bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n            s.lookahead--;\n            s.strstart++;\n        }\n        if (bflush) {\n            /*** FLUSH_BLOCK(s, 0); ***/ flush_block_only(s, false);\n            if (s.strm.avail_out === 0) {\n                return BS_NEED_MORE;\n            }\n        /***/ }\n    }\n    s.insert = 0;\n    if (flush === Z_FINISH) {\n        /*** FLUSH_BLOCK(s, 1); ***/ flush_block_only(s, true);\n        if (s.strm.avail_out === 0) {\n            return BS_FINISH_STARTED;\n        }\n        /***/ return BS_FINISH_DONE;\n    }\n    if (s.last_lit) {\n        /*** FLUSH_BLOCK(s, 0); ***/ flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n            return BS_NEED_MORE;\n        }\n    /***/ }\n    return BS_BLOCK_DONE;\n}\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */ function deflate_huff(s, flush) {\n    var bflush; /* set if current block must be flushed */ \n    for(;;){\n        /* Make sure that we have a literal to write. */ if (s.lookahead === 0) {\n            fill_window(s);\n            if (s.lookahead === 0) {\n                if (flush === Z_NO_FLUSH) {\n                    return BS_NEED_MORE;\n                }\n                break; /* flush the current block */ \n            }\n        }\n        /* Output a literal byte */ s.match_length = 0;\n        //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n        /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/ bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n        s.lookahead--;\n        s.strstart++;\n        if (bflush) {\n            /*** FLUSH_BLOCK(s, 0); ***/ flush_block_only(s, false);\n            if (s.strm.avail_out === 0) {\n                return BS_NEED_MORE;\n            }\n        /***/ }\n    }\n    s.insert = 0;\n    if (flush === Z_FINISH) {\n        /*** FLUSH_BLOCK(s, 1); ***/ flush_block_only(s, true);\n        if (s.strm.avail_out === 0) {\n            return BS_FINISH_STARTED;\n        }\n        /***/ return BS_FINISH_DONE;\n    }\n    if (s.last_lit) {\n        /*** FLUSH_BLOCK(s, 0); ***/ flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n            return BS_NEED_MORE;\n        }\n    /***/ }\n    return BS_BLOCK_DONE;\n}\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */ function Config(good_length, max_lazy, nice_length, max_chain, func) {\n    this.good_length = good_length;\n    this.max_lazy = max_lazy;\n    this.nice_length = nice_length;\n    this.max_chain = max_chain;\n    this.func = func;\n}\nvar configuration_table;\nconfiguration_table = [\n    /*      good lazy nice chain */ new Config(0, 0, 0, 0, deflate_stored),\n    /* 0 store only */ new Config(4, 4, 8, 4, deflate_fast),\n    /* 1 max speed, no lazy matches */ new Config(4, 5, 16, 8, deflate_fast),\n    /* 2 */ new Config(4, 6, 32, 32, deflate_fast),\n    /* 3 */ new Config(4, 4, 16, 16, deflate_slow),\n    /* 4 lazy matches */ new Config(8, 16, 32, 32, deflate_slow),\n    /* 5 */ new Config(8, 16, 128, 128, deflate_slow),\n    /* 6 */ new Config(8, 32, 128, 256, deflate_slow),\n    /* 7 */ new Config(32, 128, 258, 1024, deflate_slow),\n    /* 8 */ new Config(32, 258, 258, 4096, deflate_slow)\n];\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */ function lm_init(s) {\n    s.window_size = 2 * s.w_size;\n    /*** CLEAR_HASH(s); ***/ zero(s.head); // Fill with NIL (= 0);\n    /* Set the default configuration parameters:\n   */ s.max_lazy_match = configuration_table[s.level].max_lazy;\n    s.good_match = configuration_table[s.level].good_length;\n    s.nice_match = configuration_table[s.level].nice_length;\n    s.max_chain_length = configuration_table[s.level].max_chain;\n    s.strstart = 0;\n    s.block_start = 0;\n    s.lookahead = 0;\n    s.insert = 0;\n    s.match_length = s.prev_length = MIN_MATCH - 1;\n    s.match_available = 0;\n    s.ins_h = 0;\n}\nfunction DeflateState() {\n    this.strm = null; /* pointer back to this zlib stream */ \n    this.status = 0; /* as the name implies */ \n    this.pending_buf = null; /* output still pending */ \n    this.pending_buf_size = 0; /* size of pending_buf */ \n    this.pending_out = 0; /* next pending byte to output to the stream */ \n    this.pending = 0; /* nb of bytes in the pending buffer */ \n    this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip */ \n    this.gzhead = null; /* gzip header information to write */ \n    this.gzindex = 0; /* where in extra, name, or comment */ \n    this.method = Z_DEFLATED; /* can only be DEFLATED */ \n    this.last_flush = -1; /* value of flush param for previous deflate call */ \n    this.w_size = 0; /* LZ77 window size (32K by default) */ \n    this.w_bits = 0; /* log2(w_size)  (8..16) */ \n    this.w_mask = 0; /* w_size - 1 */ \n    this.window = null;\n    /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */ this.window_size = 0;\n    /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */ this.prev = null;\n    /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */ this.head = null; /* Heads of the hash chains or NIL. */ \n    this.ins_h = 0; /* hash index of string to be inserted */ \n    this.hash_size = 0; /* number of elements in hash table */ \n    this.hash_bits = 0; /* log2(hash_size) */ \n    this.hash_mask = 0; /* hash_size-1 */ \n    this.hash_shift = 0;\n    /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */ this.block_start = 0;\n    /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */ this.match_length = 0; /* length of best match */ \n    this.prev_match = 0; /* previous match */ \n    this.match_available = 0; /* set if previous match exists */ \n    this.strstart = 0; /* start of string to insert */ \n    this.match_start = 0; /* start of matching string */ \n    this.lookahead = 0; /* number of valid bytes ahead in window */ \n    this.prev_length = 0;\n    /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */ this.max_chain_length = 0;\n    /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */ this.max_lazy_match = 0;\n    /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */ // That's alias to max_lazy_match, don't use directly\n    //this.max_insert_length = 0;\n    /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */ this.level = 0; /* compression level (1..9) */ \n    this.strategy = 0; /* favor or force Huffman coding*/ \n    this.good_match = 0;\n    /* Use a faster search when the previous match is longer than this */ this.nice_match = 0; /* Stop searching when current match exceeds this */ \n    /* used by trees.c: */ /* Didn't use ct_data typedef below to suppress compiler warning */ // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n    // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n    // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n    // Use flat array of DOUBLE size, with interleaved fata,\n    // because JS does not support effective\n    this.dyn_ltree = new utils.Buf16(HEAP_SIZE * 2);\n    this.dyn_dtree = new utils.Buf16((2 * D_CODES + 1) * 2);\n    this.bl_tree = new utils.Buf16((2 * BL_CODES + 1) * 2);\n    zero(this.dyn_ltree);\n    zero(this.dyn_dtree);\n    zero(this.bl_tree);\n    this.l_desc = null; /* desc. for literal tree */ \n    this.d_desc = null; /* desc. for distance tree */ \n    this.bl_desc = null; /* desc. for bit length tree */ \n    //ush bl_count[MAX_BITS+1];\n    this.bl_count = new utils.Buf16(MAX_BITS + 1);\n    /* number of codes at each bit length for an optimal tree */ //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n    this.heap = new utils.Buf16(2 * L_CODES + 1); /* heap used to build the Huffman trees */ \n    zero(this.heap);\n    this.heap_len = 0; /* number of elements in the heap */ \n    this.heap_max = 0; /* element of largest frequency */ \n    /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */ this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n    zero(this.depth);\n    /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */ this.l_buf = 0; /* buffer index for literals or lengths */ \n    this.lit_bufsize = 0;\n    /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */ this.last_lit = 0; /* running index in l_buf */ \n    this.d_buf = 0;\n    /* Buffer index for distances. To simplify the code, d_buf and l_buf have\n   * the same number of elements. To use different lengths, an extra flag\n   * array would be necessary.\n   */ this.opt_len = 0; /* bit length of current block with optimal trees */ \n    this.static_len = 0; /* bit length of current block with static trees */ \n    this.matches = 0; /* number of string matches in current block */ \n    this.insert = 0; /* bytes at end of window left to insert */ \n    this.bi_buf = 0;\n    /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */ this.bi_valid = 0;\n/* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */ // Used for window memory init. We safely ignore it for JS. That makes\n// sense only for pointers and memory check tools.\n//this.high_water = 0;\n/* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */ }\nfunction deflateResetKeep(strm) {\n    var s;\n    if (!strm || !strm.state) {\n        return err(strm, Z_STREAM_ERROR);\n    }\n    strm.total_in = strm.total_out = 0;\n    strm.data_type = Z_UNKNOWN;\n    s = strm.state;\n    s.pending = 0;\n    s.pending_out = 0;\n    if (s.wrap < 0) {\n        s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */ }\n    s.status = s.wrap ? INIT_STATE : BUSY_STATE;\n    strm.adler = s.wrap === 2 ? 0 // crc32(0, Z_NULL, 0)\n     : 1; // adler32(0, Z_NULL, 0)\n    s.last_flush = Z_NO_FLUSH;\n    trees._tr_init(s);\n    return Z_OK;\n}\nfunction deflateReset(strm) {\n    var ret = deflateResetKeep(strm);\n    if (ret === Z_OK) {\n        lm_init(strm.state);\n    }\n    return ret;\n}\nfunction deflateSetHeader(strm, head) {\n    if (!strm || !strm.state) {\n        return Z_STREAM_ERROR;\n    }\n    if (strm.state.wrap !== 2) {\n        return Z_STREAM_ERROR;\n    }\n    strm.state.gzhead = head;\n    return Z_OK;\n}\nfunction deflateInit2(strm, level, method, windowBits, memLevel, strategy) {\n    if (!strm) {\n        return Z_STREAM_ERROR;\n    }\n    var wrap = 1;\n    if (level === Z_DEFAULT_COMPRESSION) {\n        level = 6;\n    }\n    if (windowBits < 0) {\n        wrap = 0;\n        windowBits = -windowBits;\n    } else if (windowBits > 15) {\n        wrap = 2; /* write gzip wrapper instead */ \n        windowBits -= 16;\n    }\n    if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED || windowBits < 8 || windowBits > 15 || level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {\n        return err(strm, Z_STREAM_ERROR);\n    }\n    if (windowBits === 8) {\n        windowBits = 9;\n    }\n    /* until 256-byte window bug fixed */ var s = new DeflateState();\n    strm.state = s;\n    s.strm = strm;\n    s.wrap = wrap;\n    s.gzhead = null;\n    s.w_bits = windowBits;\n    s.w_size = 1 << s.w_bits;\n    s.w_mask = s.w_size - 1;\n    s.hash_bits = memLevel + 7;\n    s.hash_size = 1 << s.hash_bits;\n    s.hash_mask = s.hash_size - 1;\n    s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n    s.window = new utils.Buf8(s.w_size * 2);\n    s.head = new utils.Buf16(s.hash_size);\n    s.prev = new utils.Buf16(s.w_size);\n    // Don't need mem init magic for JS.\n    //s.high_water = 0;  /* nothing written to s->window yet */\n    s.lit_bufsize = 1 << memLevel + 6; /* 16K elements by default */ \n    s.pending_buf_size = s.lit_bufsize * 4;\n    //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);\n    //s->pending_buf = (uchf *) overlay;\n    s.pending_buf = new utils.Buf8(s.pending_buf_size);\n    // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n    //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);\n    s.d_buf = 1 * s.lit_bufsize;\n    //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;\n    s.l_buf = (1 + 2) * s.lit_bufsize;\n    s.level = level;\n    s.strategy = strategy;\n    s.method = method;\n    return deflateReset(strm);\n}\nfunction deflateInit(strm, level) {\n    return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\n}\nfunction deflate(strm, flush) {\n    var old_flush, s;\n    var beg, val; // for gzip header write only\n    if (!strm || !strm.state || flush > Z_BLOCK || flush < 0) {\n        return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\n    }\n    s = strm.state;\n    if (!strm.output || !strm.input && strm.avail_in !== 0 || s.status === FINISH_STATE && flush !== Z_FINISH) {\n        return err(strm, strm.avail_out === 0 ? Z_BUF_ERROR : Z_STREAM_ERROR);\n    }\n    s.strm = strm; /* just in case */ \n    old_flush = s.last_flush;\n    s.last_flush = flush;\n    /* Write the header */ if (s.status === INIT_STATE) {\n        if (s.wrap === 2) {\n            strm.adler = 0; //crc32(0L, Z_NULL, 0);\n            put_byte(s, 31);\n            put_byte(s, 139);\n            put_byte(s, 8);\n            if (!s.gzhead) {\n                put_byte(s, 0);\n                put_byte(s, 0);\n                put_byte(s, 0);\n                put_byte(s, 0);\n                put_byte(s, 0);\n                put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);\n                put_byte(s, OS_CODE);\n                s.status = BUSY_STATE;\n            } else {\n                put_byte(s, (s.gzhead.text ? 1 : 0) + (s.gzhead.hcrc ? 2 : 0) + (!s.gzhead.extra ? 0 : 4) + (!s.gzhead.name ? 0 : 8) + (!s.gzhead.comment ? 0 : 16));\n                put_byte(s, s.gzhead.time & 0xff);\n                put_byte(s, s.gzhead.time >> 8 & 0xff);\n                put_byte(s, s.gzhead.time >> 16 & 0xff);\n                put_byte(s, s.gzhead.time >> 24 & 0xff);\n                put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);\n                put_byte(s, s.gzhead.os & 0xff);\n                if (s.gzhead.extra && s.gzhead.extra.length) {\n                    put_byte(s, s.gzhead.extra.length & 0xff);\n                    put_byte(s, s.gzhead.extra.length >> 8 & 0xff);\n                }\n                if (s.gzhead.hcrc) {\n                    strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);\n                }\n                s.gzindex = 0;\n                s.status = EXTRA_STATE;\n            }\n        } else {\n            var header = Z_DEFLATED + (s.w_bits - 8 << 4) << 8;\n            var level_flags = -1;\n            if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n                level_flags = 0;\n            } else if (s.level < 6) {\n                level_flags = 1;\n            } else if (s.level === 6) {\n                level_flags = 2;\n            } else {\n                level_flags = 3;\n            }\n            header |= level_flags << 6;\n            if (s.strstart !== 0) {\n                header |= PRESET_DICT;\n            }\n            header += 31 - header % 31;\n            s.status = BUSY_STATE;\n            putShortMSB(s, header);\n            /* Save the adler32 of the preset dictionary: */ if (s.strstart !== 0) {\n                putShortMSB(s, strm.adler >>> 16);\n                putShortMSB(s, strm.adler & 0xffff);\n            }\n            strm.adler = 1; // adler32(0L, Z_NULL, 0);\n        }\n    }\n    //#ifdef GZIP\n    if (s.status === EXTRA_STATE) {\n        if (s.gzhead.extra /* != Z_NULL*/ ) {\n            beg = s.pending; /* start of bytes to update crc */ \n            while(s.gzindex < (s.gzhead.extra.length & 0xffff)){\n                if (s.pending === s.pending_buf_size) {\n                    if (s.gzhead.hcrc && s.pending > beg) {\n                        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n                    }\n                    flush_pending(strm);\n                    beg = s.pending;\n                    if (s.pending === s.pending_buf_size) {\n                        break;\n                    }\n                }\n                put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);\n                s.gzindex++;\n            }\n            if (s.gzhead.hcrc && s.pending > beg) {\n                strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n            }\n            if (s.gzindex === s.gzhead.extra.length) {\n                s.gzindex = 0;\n                s.status = NAME_STATE;\n            }\n        } else {\n            s.status = NAME_STATE;\n        }\n    }\n    if (s.status === NAME_STATE) {\n        if (s.gzhead.name /* != Z_NULL*/ ) {\n            beg = s.pending; /* start of bytes to update crc */ \n            //int val;\n            do {\n                if (s.pending === s.pending_buf_size) {\n                    if (s.gzhead.hcrc && s.pending > beg) {\n                        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n                    }\n                    flush_pending(strm);\n                    beg = s.pending;\n                    if (s.pending === s.pending_buf_size) {\n                        val = 1;\n                        break;\n                    }\n                }\n                // JS specific: little magic to add zero terminator to end of string\n                if (s.gzindex < s.gzhead.name.length) {\n                    val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n                } else {\n                    val = 0;\n                }\n                put_byte(s, val);\n            }while (val !== 0);\n            if (s.gzhead.hcrc && s.pending > beg) {\n                strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n            }\n            if (val === 0) {\n                s.gzindex = 0;\n                s.status = COMMENT_STATE;\n            }\n        } else {\n            s.status = COMMENT_STATE;\n        }\n    }\n    if (s.status === COMMENT_STATE) {\n        if (s.gzhead.comment /* != Z_NULL*/ ) {\n            beg = s.pending; /* start of bytes to update crc */ \n            //int val;\n            do {\n                if (s.pending === s.pending_buf_size) {\n                    if (s.gzhead.hcrc && s.pending > beg) {\n                        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n                    }\n                    flush_pending(strm);\n                    beg = s.pending;\n                    if (s.pending === s.pending_buf_size) {\n                        val = 1;\n                        break;\n                    }\n                }\n                // JS specific: little magic to add zero terminator to end of string\n                if (s.gzindex < s.gzhead.comment.length) {\n                    val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n                } else {\n                    val = 0;\n                }\n                put_byte(s, val);\n            }while (val !== 0);\n            if (s.gzhead.hcrc && s.pending > beg) {\n                strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n            }\n            if (val === 0) {\n                s.status = HCRC_STATE;\n            }\n        } else {\n            s.status = HCRC_STATE;\n        }\n    }\n    if (s.status === HCRC_STATE) {\n        if (s.gzhead.hcrc) {\n            if (s.pending + 2 > s.pending_buf_size) {\n                flush_pending(strm);\n            }\n            if (s.pending + 2 <= s.pending_buf_size) {\n                put_byte(s, strm.adler & 0xff);\n                put_byte(s, strm.adler >> 8 & 0xff);\n                strm.adler = 0; //crc32(0L, Z_NULL, 0);\n                s.status = BUSY_STATE;\n            }\n        } else {\n            s.status = BUSY_STATE;\n        }\n    }\n    //#endif\n    /* Flush as much pending output as possible */ if (s.pending !== 0) {\n        flush_pending(strm);\n        if (strm.avail_out === 0) {\n            /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */ s.last_flush = -1;\n            return Z_OK;\n        }\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */ } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) && flush !== Z_FINISH) {\n        return err(strm, Z_BUF_ERROR);\n    }\n    /* User must not provide more input after the first FINISH: */ if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n        return err(strm, Z_BUF_ERROR);\n    }\n    /* Start a new block or continue the current one.\n   */ if (strm.avail_in !== 0 || s.lookahead !== 0 || flush !== Z_NO_FLUSH && s.status !== FINISH_STATE) {\n        var bstate = s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) : s.strategy === Z_RLE ? deflate_rle(s, flush) : configuration_table[s.level].func(s, flush);\n        if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n            s.status = FINISH_STATE;\n        }\n        if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n            if (strm.avail_out === 0) {\n                s.last_flush = -1;\n            /* avoid BUF_ERROR next call, see above */ }\n            return Z_OK;\n        /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */ }\n        if (bstate === BS_BLOCK_DONE) {\n            if (flush === Z_PARTIAL_FLUSH) {\n                trees._tr_align(s);\n            } else if (flush !== Z_BLOCK) {\n                trees._tr_stored_block(s, 0, 0, false);\n                /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */ if (flush === Z_FULL_FLUSH) {\n                    /*** CLEAR_HASH(s); ***/ /* forget history */ zero(s.head); // Fill with NIL (= 0);\n                    if (s.lookahead === 0) {\n                        s.strstart = 0;\n                        s.block_start = 0;\n                        s.insert = 0;\n                    }\n                }\n            }\n            flush_pending(strm);\n            if (strm.avail_out === 0) {\n                s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */ \n                return Z_OK;\n            }\n        }\n    }\n    //Assert(strm->avail_out > 0, \"bug2\");\n    //if (strm.avail_out <= 0) { throw new Error(\"bug2\");}\n    if (flush !== Z_FINISH) {\n        return Z_OK;\n    }\n    if (s.wrap <= 0) {\n        return Z_STREAM_END;\n    }\n    /* Write the trailer */ if (s.wrap === 2) {\n        put_byte(s, strm.adler & 0xff);\n        put_byte(s, strm.adler >> 8 & 0xff);\n        put_byte(s, strm.adler >> 16 & 0xff);\n        put_byte(s, strm.adler >> 24 & 0xff);\n        put_byte(s, strm.total_in & 0xff);\n        put_byte(s, strm.total_in >> 8 & 0xff);\n        put_byte(s, strm.total_in >> 16 & 0xff);\n        put_byte(s, strm.total_in >> 24 & 0xff);\n    } else {\n        putShortMSB(s, strm.adler >>> 16);\n        putShortMSB(s, strm.adler & 0xffff);\n    }\n    flush_pending(strm);\n    /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */ if (s.wrap > 0) {\n        s.wrap = -s.wrap;\n    }\n    /* write the trailer only once! */ return s.pending !== 0 ? Z_OK : Z_STREAM_END;\n}\nfunction deflateEnd(strm) {\n    var status;\n    if (!strm /*== Z_NULL*/  || !strm.state /*== Z_NULL*/ ) {\n        return Z_STREAM_ERROR;\n    }\n    status = strm.state.status;\n    if (status !== INIT_STATE && status !== EXTRA_STATE && status !== NAME_STATE && status !== COMMENT_STATE && status !== HCRC_STATE && status !== BUSY_STATE && status !== FINISH_STATE) {\n        return err(strm, Z_STREAM_ERROR);\n    }\n    strm.state = null;\n    return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\n}\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */ function deflateSetDictionary(strm, dictionary) {\n    var dictLength = dictionary.length;\n    var s;\n    var str, n;\n    var wrap;\n    var avail;\n    var next;\n    var input;\n    var tmpDict;\n    if (!strm /*== Z_NULL*/  || !strm.state /*== Z_NULL*/ ) {\n        return Z_STREAM_ERROR;\n    }\n    s = strm.state;\n    wrap = s.wrap;\n    if (wrap === 2 || wrap === 1 && s.status !== INIT_STATE || s.lookahead) {\n        return Z_STREAM_ERROR;\n    }\n    /* when using zlib wrappers, compute Adler-32 for provided dictionary */ if (wrap === 1) {\n        /* adler32(strm->adler, dictionary, dictLength); */ strm.adler = adler32(strm.adler, dictionary, dictLength, 0);\n    }\n    s.wrap = 0; /* avoid computing Adler-32 in read_buf */ \n    /* if dictionary would fill window, just replace the history */ if (dictLength >= s.w_size) {\n        if (wrap === 0) {\n            /*** CLEAR_HASH(s); ***/ zero(s.head); // Fill with NIL (= 0);\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n        }\n        /* use the tail */ // dictionary = dictionary.slice(dictLength - s.w_size);\n        tmpDict = new utils.Buf8(s.w_size);\n        utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);\n        dictionary = tmpDict;\n        dictLength = s.w_size;\n    }\n    /* insert dictionary into window and hash */ avail = strm.avail_in;\n    next = strm.next_in;\n    input = strm.input;\n    strm.avail_in = dictLength;\n    strm.next_in = 0;\n    strm.input = dictionary;\n    fill_window(s);\n    while(s.lookahead >= MIN_MATCH){\n        str = s.strstart;\n        n = s.lookahead - (MIN_MATCH - 1);\n        do {\n            /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */ s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n            s.prev[str & s.w_mask] = s.head[s.ins_h];\n            s.head[s.ins_h] = str;\n            str++;\n        }while (--n);\n        s.strstart = str;\n        s.lookahead = MIN_MATCH - 1;\n        fill_window(s);\n    }\n    s.strstart += s.lookahead;\n    s.block_start = s.strstart;\n    s.insert = s.lookahead;\n    s.lookahead = 0;\n    s.match_length = s.prev_length = MIN_MATCH - 1;\n    s.match_available = 0;\n    strm.next_in = next;\n    strm.input = input;\n    strm.avail_in = avail;\n    s.wrap = wrap;\n    return Z_OK;\n}\nexports.deflateInit = deflateInit;\nexports.deflateInit2 = deflateInit2;\nexports.deflateReset = deflateReset;\nexports.deflateResetKeep = deflateResetKeep;\nexports.deflateSetHeader = deflateSetHeader;\nexports.deflate = deflate;\nexports.deflateEnd = deflateEnd;\nexports.deflateSetDictionary = deflateSetDictionary;\nexports.deflateInfo = \"pako deflate (from Nodeca project)\"; /* Not implemented\nexports.deflateBound = deflateBound;\nexports.deflateCopy = deflateCopy;\nexports.deflateParams = deflateParams;\nexports.deflatePending = deflatePending;\nexports.deflatePrime = deflatePrime;\nexports.deflateTune = deflateTune;\n*/ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/deflate.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/gzheader.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/gzheader.js ***!
  \***************************************************************************/
/***/ ((module) => {

eval("\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nfunction GZheader() {\n    /* true if compressed data believed to be text */ this.text = 0;\n    /* modification time */ this.time = 0;\n    /* extra flags (not used when writing a gzip file) */ this.xflags = 0;\n    /* operating system */ this.os = 0;\n    /* pointer to extra field or Z_NULL if none */ this.extra = null;\n    /* extra field length (valid if extra != Z_NULL) */ this.extra_len = 0; // Actually, we don't need it in JS,\n    // but leave for few code modifications\n    //\n    // Setup limits is not necessary because in js we should not preallocate memory\n    // for inflate use constant limit in 65536 bytes\n    //\n    /* space at extra (only when reading header) */ // this.extra_max  = 0;\n    /* pointer to zero-terminated file name or Z_NULL */ this.name = \"\";\n    /* space at name (only when reading header) */ // this.name_max   = 0;\n    /* pointer to zero-terminated comment or Z_NULL */ this.comment = \"\";\n    /* space at comment (only when reading header) */ // this.comm_max   = 0;\n    /* true if there was or will be a header crc */ this.hcrc = 0;\n    /* true when done reading gzip header (not used when writing a gzip file) */ this.done = false;\n}\nmodule.exports = GZheader;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHBkZi1saWIvdXBuZy9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9nemhlYWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLGdEQUFnRDtBQUNoRCxrREFBa0Q7QUFDbEQsRUFBRTtBQUNGLG9FQUFvRTtBQUNwRSx3RUFBd0U7QUFDeEUseUNBQXlDO0FBQ3pDLEVBQUU7QUFDRix3RUFBd0U7QUFDeEUseUVBQXlFO0FBQ3pFLGlEQUFpRDtBQUNqRCxFQUFFO0FBQ0YsMEVBQTBFO0FBQzFFLHlFQUF5RTtBQUN6RSwwRUFBMEU7QUFDMUUscUNBQXFDO0FBQ3JDLDZFQUE2RTtBQUM3RSxtREFBbUQ7QUFDbkQsNkVBQTZFO0FBRTdFLFNBQVNBO0lBQ1AsK0NBQStDLEdBQy9DLElBQUksQ0FBQ0MsSUFBSSxHQUFTO0lBQ2xCLHFCQUFxQixHQUNyQixJQUFJLENBQUNDLElBQUksR0FBUztJQUNsQixtREFBbUQsR0FDbkQsSUFBSSxDQUFDQyxNQUFNLEdBQU87SUFDbEIsb0JBQW9CLEdBQ3BCLElBQUksQ0FBQ0MsRUFBRSxHQUFXO0lBQ2xCLDRDQUE0QyxHQUM1QyxJQUFJLENBQUNDLEtBQUssR0FBUTtJQUNsQixpREFBaUQsR0FDakQsSUFBSSxDQUFDQyxTQUFTLEdBQUksR0FBRyxvQ0FBb0M7SUFDcEMsdUNBQXVDO0lBRTVELEVBQUU7SUFDRiwrRUFBK0U7SUFDL0UsZ0RBQWdEO0lBQ2hELEVBQUU7SUFFRiw2Q0FBNkMsR0FDN0MsdUJBQXVCO0lBQ3ZCLGtEQUFrRCxHQUNsRCxJQUFJLENBQUNDLElBQUksR0FBUztJQUNsQiw0Q0FBNEMsR0FDNUMsdUJBQXVCO0lBQ3ZCLGdEQUFnRCxHQUNoRCxJQUFJLENBQUNDLE9BQU8sR0FBTTtJQUNsQiwrQ0FBK0MsR0FDL0MsdUJBQXVCO0lBQ3ZCLDZDQUE2QyxHQUM3QyxJQUFJLENBQUNDLElBQUksR0FBUztJQUNsQiwwRUFBMEUsR0FDMUUsSUFBSSxDQUFDQyxJQUFJLEdBQVM7QUFDcEI7QUFFQUMsT0FBT0MsT0FBTyxHQUFHWiIsInNvdXJjZXMiOlsid2VicGFjazovL2NpdmlsLWVuZ2luZWVyaW5nLXBsYXRmb3JtLy4vbm9kZV9tb2R1bGVzL0BwZGYtbGliL3Vwbmcvbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvZ3poZWFkZXIuanM/NDBlNyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxuZnVuY3Rpb24gR1poZWFkZXIoKSB7XG4gIC8qIHRydWUgaWYgY29tcHJlc3NlZCBkYXRhIGJlbGlldmVkIHRvIGJlIHRleHQgKi9cbiAgdGhpcy50ZXh0ICAgICAgID0gMDtcbiAgLyogbW9kaWZpY2F0aW9uIHRpbWUgKi9cbiAgdGhpcy50aW1lICAgICAgID0gMDtcbiAgLyogZXh0cmEgZmxhZ3MgKG5vdCB1c2VkIHdoZW4gd3JpdGluZyBhIGd6aXAgZmlsZSkgKi9cbiAgdGhpcy54ZmxhZ3MgICAgID0gMDtcbiAgLyogb3BlcmF0aW5nIHN5c3RlbSAqL1xuICB0aGlzLm9zICAgICAgICAgPSAwO1xuICAvKiBwb2ludGVyIHRvIGV4dHJhIGZpZWxkIG9yIFpfTlVMTCBpZiBub25lICovXG4gIHRoaXMuZXh0cmEgICAgICA9IG51bGw7XG4gIC8qIGV4dHJhIGZpZWxkIGxlbmd0aCAodmFsaWQgaWYgZXh0cmEgIT0gWl9OVUxMKSAqL1xuICB0aGlzLmV4dHJhX2xlbiAgPSAwOyAvLyBBY3R1YWxseSwgd2UgZG9uJ3QgbmVlZCBpdCBpbiBKUyxcbiAgICAgICAgICAgICAgICAgICAgICAgLy8gYnV0IGxlYXZlIGZvciBmZXcgY29kZSBtb2RpZmljYXRpb25zXG5cbiAgLy9cbiAgLy8gU2V0dXAgbGltaXRzIGlzIG5vdCBuZWNlc3NhcnkgYmVjYXVzZSBpbiBqcyB3ZSBzaG91bGQgbm90IHByZWFsbG9jYXRlIG1lbW9yeVxuICAvLyBmb3IgaW5mbGF0ZSB1c2UgY29uc3RhbnQgbGltaXQgaW4gNjU1MzYgYnl0ZXNcbiAgLy9cblxuICAvKiBzcGFjZSBhdCBleHRyYSAob25seSB3aGVuIHJlYWRpbmcgaGVhZGVyKSAqL1xuICAvLyB0aGlzLmV4dHJhX21heCAgPSAwO1xuICAvKiBwb2ludGVyIHRvIHplcm8tdGVybWluYXRlZCBmaWxlIG5hbWUgb3IgWl9OVUxMICovXG4gIHRoaXMubmFtZSAgICAgICA9ICcnO1xuICAvKiBzcGFjZSBhdCBuYW1lIChvbmx5IHdoZW4gcmVhZGluZyBoZWFkZXIpICovXG4gIC8vIHRoaXMubmFtZV9tYXggICA9IDA7XG4gIC8qIHBvaW50ZXIgdG8gemVyby10ZXJtaW5hdGVkIGNvbW1lbnQgb3IgWl9OVUxMICovXG4gIHRoaXMuY29tbWVudCAgICA9ICcnO1xuICAvKiBzcGFjZSBhdCBjb21tZW50IChvbmx5IHdoZW4gcmVhZGluZyBoZWFkZXIpICovXG4gIC8vIHRoaXMuY29tbV9tYXggICA9IDA7XG4gIC8qIHRydWUgaWYgdGhlcmUgd2FzIG9yIHdpbGwgYmUgYSBoZWFkZXIgY3JjICovXG4gIHRoaXMuaGNyYyAgICAgICA9IDA7XG4gIC8qIHRydWUgd2hlbiBkb25lIHJlYWRpbmcgZ3ppcCBoZWFkZXIgKG5vdCB1c2VkIHdoZW4gd3JpdGluZyBhIGd6aXAgZmlsZSkgKi9cbiAgdGhpcy5kb25lICAgICAgID0gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gR1poZWFkZXI7XG4iXSwibmFtZXMiOlsiR1poZWFkZXIiLCJ0ZXh0IiwidGltZSIsInhmbGFncyIsIm9zIiwiZXh0cmEiLCJleHRyYV9sZW4iLCJuYW1lIiwiY29tbWVudCIsImhjcmMiLCJkb25lIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/gzheader.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/inffast.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/inffast.js ***!
  \**************************************************************************/
/***/ ((module) => {

eval("\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n// See state defs from inflate.js\nvar BAD = 30; /* got a data error -- remain here until reset */ \nvar TYPE = 12; /* i: waiting for type bits, including last-flag bit */ \n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */ module.exports = function inflate_fast(strm, start) {\n    var state;\n    var _in; /* local strm.input */ \n    var last; /* have enough input while in < last */ \n    var _out; /* local strm.output */ \n    var beg; /* inflate()'s initial strm.output */ \n    var end; /* while out < end, enough space available */ \n    //#ifdef INFLATE_STRICT\n    var dmax; /* maximum distance from zlib header */ \n    //#endif\n    var wsize; /* window size or zero if not using window */ \n    var whave; /* valid bytes in the window */ \n    var wnext; /* window write index */ \n    // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n    var s_window; /* allocated sliding window, if wsize != 0 */ \n    var hold; /* local strm.hold */ \n    var bits; /* local strm.bits */ \n    var lcode; /* local strm.lencode */ \n    var dcode; /* local strm.distcode */ \n    var lmask; /* mask for first level of length codes */ \n    var dmask; /* mask for first level of distance codes */ \n    var here; /* retrieved table entry */ \n    var op; /* code bits, operation, extra bits, or */ \n    /*  window position, window bytes to copy */ var len; /* match length, unused bytes */ \n    var dist; /* match distance */ \n    var from; /* where to copy match from */ \n    var from_source;\n    var input, output; // JS specific, because we have no pointers\n    /* copy state to local variables */ state = strm.state;\n    //here = state.here;\n    _in = strm.next_in;\n    input = strm.input;\n    last = _in + (strm.avail_in - 5);\n    _out = strm.next_out;\n    output = strm.output;\n    beg = _out - (start - strm.avail_out);\n    end = _out + (strm.avail_out - 257);\n    //#ifdef INFLATE_STRICT\n    dmax = state.dmax;\n    //#endif\n    wsize = state.wsize;\n    whave = state.whave;\n    wnext = state.wnext;\n    s_window = state.window;\n    hold = state.hold;\n    bits = state.bits;\n    lcode = state.lencode;\n    dcode = state.distcode;\n    lmask = (1 << state.lenbits) - 1;\n    dmask = (1 << state.distbits) - 1;\n    /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */ top: do {\n        if (bits < 15) {\n            hold += input[_in++] << bits;\n            bits += 8;\n            hold += input[_in++] << bits;\n            bits += 8;\n        }\n        here = lcode[hold & lmask];\n        dolen: for(;;){\n            op = here >>> 24 /*here.bits*/ ;\n            hold >>>= op;\n            bits -= op;\n            op = here >>> 16 & 0xff /*here.op*/ ;\n            if (op === 0) {\n                //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n                //        \"inflate:         literal '%c'\\n\" :\n                //        \"inflate:         literal 0x%02x\\n\", here.val));\n                output[_out++] = here & 0xffff /*here.val*/ ;\n            } else if (op & 16) {\n                len = here & 0xffff /*here.val*/ ;\n                op &= 15; /* number of extra bits */ \n                if (op) {\n                    if (bits < op) {\n                        hold += input[_in++] << bits;\n                        bits += 8;\n                    }\n                    len += hold & (1 << op) - 1;\n                    hold >>>= op;\n                    bits -= op;\n                }\n                //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n                if (bits < 15) {\n                    hold += input[_in++] << bits;\n                    bits += 8;\n                    hold += input[_in++] << bits;\n                    bits += 8;\n                }\n                here = dcode[hold & dmask];\n                dodist: for(;;){\n                    op = here >>> 24 /*here.bits*/ ;\n                    hold >>>= op;\n                    bits -= op;\n                    op = here >>> 16 & 0xff /*here.op*/ ;\n                    if (op & 16) {\n                        dist = here & 0xffff /*here.val*/ ;\n                        op &= 15; /* number of extra bits */ \n                        if (bits < op) {\n                            hold += input[_in++] << bits;\n                            bits += 8;\n                            if (bits < op) {\n                                hold += input[_in++] << bits;\n                                bits += 8;\n                            }\n                        }\n                        dist += hold & (1 << op) - 1;\n                        //#ifdef INFLATE_STRICT\n                        if (dist > dmax) {\n                            strm.msg = \"invalid distance too far back\";\n                            state.mode = BAD;\n                            break top;\n                        }\n                        //#endif\n                        hold >>>= op;\n                        bits -= op;\n                        //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n                        op = _out - beg; /* max distance in output */ \n                        if (dist > op) {\n                            op = dist - op; /* distance back in window */ \n                            if (op > whave) {\n                                if (state.sane) {\n                                    strm.msg = \"invalid distance too far back\";\n                                    state.mode = BAD;\n                                    break top;\n                                }\n                            // (!) This block is disabled in zlib defaults,\n                            // don't enable it for binary compatibility\n                            //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n                            //                if (len <= op - whave) {\n                            //                  do {\n                            //                    output[_out++] = 0;\n                            //                  } while (--len);\n                            //                  continue top;\n                            //                }\n                            //                len -= op - whave;\n                            //                do {\n                            //                  output[_out++] = 0;\n                            //                } while (--op > whave);\n                            //                if (op === 0) {\n                            //                  from = _out - dist;\n                            //                  do {\n                            //                    output[_out++] = output[from++];\n                            //                  } while (--len);\n                            //                  continue top;\n                            //                }\n                            //#endif\n                            }\n                            from = 0; // window index\n                            from_source = s_window;\n                            if (wnext === 0) {\n                                from += wsize - op;\n                                if (op < len) {\n                                    len -= op;\n                                    do {\n                                        output[_out++] = s_window[from++];\n                                    }while (--op);\n                                    from = _out - dist; /* rest from output */ \n                                    from_source = output;\n                                }\n                            } else if (wnext < op) {\n                                from += wsize + wnext - op;\n                                op -= wnext;\n                                if (op < len) {\n                                    len -= op;\n                                    do {\n                                        output[_out++] = s_window[from++];\n                                    }while (--op);\n                                    from = 0;\n                                    if (wnext < len) {\n                                        op = wnext;\n                                        len -= op;\n                                        do {\n                                            output[_out++] = s_window[from++];\n                                        }while (--op);\n                                        from = _out - dist; /* rest from output */ \n                                        from_source = output;\n                                    }\n                                }\n                            } else {\n                                from += wnext - op;\n                                if (op < len) {\n                                    len -= op;\n                                    do {\n                                        output[_out++] = s_window[from++];\n                                    }while (--op);\n                                    from = _out - dist; /* rest from output */ \n                                    from_source = output;\n                                }\n                            }\n                            while(len > 2){\n                                output[_out++] = from_source[from++];\n                                output[_out++] = from_source[from++];\n                                output[_out++] = from_source[from++];\n                                len -= 3;\n                            }\n                            if (len) {\n                                output[_out++] = from_source[from++];\n                                if (len > 1) {\n                                    output[_out++] = from_source[from++];\n                                }\n                            }\n                        } else {\n                            from = _out - dist; /* copy direct from output */ \n                            do {\n                                output[_out++] = output[from++];\n                                output[_out++] = output[from++];\n                                output[_out++] = output[from++];\n                                len -= 3;\n                            }while (len > 2);\n                            if (len) {\n                                output[_out++] = output[from++];\n                                if (len > 1) {\n                                    output[_out++] = output[from++];\n                                }\n                            }\n                        }\n                    } else if ((op & 64) === 0) {\n                        here = dcode[(here & 0xffff) + (hold & (1 << op) - 1)];\n                        continue dodist;\n                    } else {\n                        strm.msg = \"invalid distance code\";\n                        state.mode = BAD;\n                        break top;\n                    }\n                    break; // need to emulate goto via \"continue\"\n                }\n            } else if ((op & 64) === 0) {\n                here = lcode[(here & 0xffff) + (hold & (1 << op) - 1)];\n                continue dolen;\n            } else if (op & 32) {\n                //Tracevv((stderr, \"inflate:         end of block\\n\"));\n                state.mode = TYPE;\n                break top;\n            } else {\n                strm.msg = \"invalid literal/length code\";\n                state.mode = BAD;\n                break top;\n            }\n            break; // need to emulate goto via \"continue\"\n        }\n    }while (_in < last && _out < end);\n    /* return unused bytes (on entry, bits < 8, so in won't go too far back) */ len = bits >> 3;\n    _in -= len;\n    bits -= len << 3;\n    hold &= (1 << bits) - 1;\n    /* update state and return */ strm.next_in = _in;\n    strm.next_out = _out;\n    strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);\n    strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);\n    state.hold = hold;\n    state.bits = bits;\n    return;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/inffast.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/inflate.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/inflate.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nvar utils = __webpack_require__(/*! ../utils/common */ \"(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/utils/common.js\");\nvar adler32 = __webpack_require__(/*! ./adler32 */ \"(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/adler32.js\");\nvar crc32 = __webpack_require__(/*! ./crc32 */ \"(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/crc32.js\");\nvar inflate_fast = __webpack_require__(/*! ./inffast */ \"(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/inffast.js\");\nvar inflate_table = __webpack_require__(/*! ./inftrees */ \"(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/inftrees.js\");\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n/* Public constants ==========================================================*/ /* ===========================================================================*/ /* Allowed flush values; see deflate() and inflate() below for details */ //var Z_NO_FLUSH      = 0;\n//var Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\n//var Z_FULL_FLUSH    = 3;\nvar Z_FINISH = 4;\nvar Z_BLOCK = 5;\nvar Z_TREES = 6;\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */ var Z_OK = 0;\nvar Z_STREAM_END = 1;\nvar Z_NEED_DICT = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR = -2;\nvar Z_DATA_ERROR = -3;\nvar Z_MEM_ERROR = -4;\nvar Z_BUF_ERROR = -5;\n//var Z_VERSION_ERROR = -6;\n/* The deflate compression method */ var Z_DEFLATED = 8;\n/* STATES ====================================================================*/ /* ===========================================================================*/ var HEAD = 1; /* i: waiting for magic header */ \nvar FLAGS = 2; /* i: waiting for method and flags (gzip) */ \nvar TIME = 3; /* i: waiting for modification time (gzip) */ \nvar OS = 4; /* i: waiting for extra flags and operating system (gzip) */ \nvar EXLEN = 5; /* i: waiting for extra length (gzip) */ \nvar EXTRA = 6; /* i: waiting for extra bytes (gzip) */ \nvar NAME = 7; /* i: waiting for end of file name (gzip) */ \nvar COMMENT = 8; /* i: waiting for end of comment (gzip) */ \nvar HCRC = 9; /* i: waiting for header crc (gzip) */ \nvar DICTID = 10; /* i: waiting for dictionary check value */ \nvar DICT = 11; /* waiting for inflateSetDictionary() call */ \nvar TYPE = 12; /* i: waiting for type bits, including last-flag bit */ \nvar TYPEDO = 13; /* i: same, but skip check to exit inflate on new block */ \nvar STORED = 14; /* i: waiting for stored size (length and complement) */ \nvar COPY_ = 15; /* i/o: same as COPY below, but only first time in */ \nvar COPY = 16; /* i/o: waiting for input or output to copy stored block */ \nvar TABLE = 17; /* i: waiting for dynamic block table lengths */ \nvar LENLENS = 18; /* i: waiting for code length code lengths */ \nvar CODELENS = 19; /* i: waiting for length/lit and distance code lengths */ \nvar LEN_ = 20; /* i: same as LEN below, but only first time in */ \nvar LEN = 21; /* i: waiting for length/lit/eob code */ \nvar LENEXT = 22; /* i: waiting for length extra bits */ \nvar DIST = 23; /* i: waiting for distance code */ \nvar DISTEXT = 24; /* i: waiting for distance extra bits */ \nvar MATCH = 25; /* o: waiting for output space to copy string */ \nvar LIT = 26; /* o: waiting for output space to write literal */ \nvar CHECK = 27; /* i: waiting for 32-bit check value */ \nvar LENGTH = 28; /* i: waiting for 32-bit length (gzip) */ \nvar DONE = 29; /* finished check, done -- remain here until reset */ \nvar BAD = 30; /* got a data error -- remain here until reset */ \nvar MEM = 31; /* got an inflate() memory error -- remain here until reset */ \nvar SYNC = 32; /* looking for synchronization bytes to restart inflate() */ \n/* ===========================================================================*/ var ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */ var DEF_WBITS = MAX_WBITS;\nfunction zswap32(q) {\n    return (q >>> 24 & 0xff) + (q >>> 8 & 0xff00) + ((q & 0xff00) << 8) + ((q & 0xff) << 24);\n}\nfunction InflateState() {\n    this.mode = 0; /* current inflate mode */ \n    this.last = false; /* true if processing last block */ \n    this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip */ \n    this.havedict = false; /* true if dictionary provided */ \n    this.flags = 0; /* gzip header method and flags (0 if zlib) */ \n    this.dmax = 0; /* zlib header max distance (INFLATE_STRICT) */ \n    this.check = 0; /* protected copy of check value */ \n    this.total = 0; /* protected copy of output count */ \n    // TODO: may be {}\n    this.head = null; /* where to save gzip header information */ \n    /* sliding window */ this.wbits = 0; /* log base 2 of requested window size */ \n    this.wsize = 0; /* window size or zero if not using window */ \n    this.whave = 0; /* valid bytes in the window */ \n    this.wnext = 0; /* window write index */ \n    this.window = null; /* allocated sliding window, if needed */ \n    /* bit accumulator */ this.hold = 0; /* input bit accumulator */ \n    this.bits = 0; /* number of bits in \"in\" */ \n    /* for string and stored block copying */ this.length = 0; /* literal or length of data to copy */ \n    this.offset = 0; /* distance back to copy string from */ \n    /* for table and code decoding */ this.extra = 0; /* extra bits needed */ \n    /* fixed and dynamic code tables */ this.lencode = null; /* starting table for length/literal codes */ \n    this.distcode = null; /* starting table for distance codes */ \n    this.lenbits = 0; /* index bits for lencode */ \n    this.distbits = 0; /* index bits for distcode */ \n    /* dynamic table building */ this.ncode = 0; /* number of code length code lengths */ \n    this.nlen = 0; /* number of length code lengths */ \n    this.ndist = 0; /* number of distance code lengths */ \n    this.have = 0; /* number of code lengths in lens[] */ \n    this.next = null; /* next available space in codes[] */ \n    this.lens = new utils.Buf16(320); /* temporary storage for code lengths */ \n    this.work = new utils.Buf16(288); /* work area for code table building */ \n    /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */ //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */\n    this.lendyn = null; /* dynamic table for length/literal codes (JS specific) */ \n    this.distdyn = null; /* dynamic table for distance codes (JS specific) */ \n    this.sane = 0; /* if false, allow invalid distance too far */ \n    this.back = 0; /* bits back of last unprocessed length/lit */ \n    this.was = 0; /* initial length of match */ \n}\nfunction inflateResetKeep(strm) {\n    var state;\n    if (!strm || !strm.state) {\n        return Z_STREAM_ERROR;\n    }\n    state = strm.state;\n    strm.total_in = strm.total_out = state.total = 0;\n    strm.msg = \"\"; /*Z_NULL*/ \n    if (state.wrap) {\n        strm.adler = state.wrap & 1;\n    }\n    state.mode = HEAD;\n    state.last = 0;\n    state.havedict = 0;\n    state.dmax = 32768;\n    state.head = null /*Z_NULL*/ ;\n    state.hold = 0;\n    state.bits = 0;\n    //state.lencode = state.distcode = state.next = state.codes;\n    state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);\n    state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);\n    state.sane = 1;\n    state.back = -1;\n    //Tracev((stderr, \"inflate: reset\\n\"));\n    return Z_OK;\n}\nfunction inflateReset(strm) {\n    var state;\n    if (!strm || !strm.state) {\n        return Z_STREAM_ERROR;\n    }\n    state = strm.state;\n    state.wsize = 0;\n    state.whave = 0;\n    state.wnext = 0;\n    return inflateResetKeep(strm);\n}\nfunction inflateReset2(strm, windowBits) {\n    var wrap;\n    var state;\n    /* get the state */ if (!strm || !strm.state) {\n        return Z_STREAM_ERROR;\n    }\n    state = strm.state;\n    /* extract wrap request from windowBits parameter */ if (windowBits < 0) {\n        wrap = 0;\n        windowBits = -windowBits;\n    } else {\n        wrap = (windowBits >> 4) + 1;\n        if (windowBits < 48) {\n            windowBits &= 15;\n        }\n    }\n    /* set number of window bits, free window if different */ if (windowBits && (windowBits < 8 || windowBits > 15)) {\n        return Z_STREAM_ERROR;\n    }\n    if (state.window !== null && state.wbits !== windowBits) {\n        state.window = null;\n    }\n    /* update state and reset the rest of it */ state.wrap = wrap;\n    state.wbits = windowBits;\n    return inflateReset(strm);\n}\nfunction inflateInit2(strm, windowBits) {\n    var ret;\n    var state;\n    if (!strm) {\n        return Z_STREAM_ERROR;\n    }\n    //strm.msg = Z_NULL;                 /* in case we return an error */\n    state = new InflateState();\n    //if (state === Z_NULL) return Z_MEM_ERROR;\n    //Tracev((stderr, \"inflate: allocated\\n\"));\n    strm.state = state;\n    state.window = null /*Z_NULL*/ ;\n    ret = inflateReset2(strm, windowBits);\n    if (ret !== Z_OK) {\n        strm.state = null /*Z_NULL*/ ;\n    }\n    return ret;\n}\nfunction inflateInit(strm) {\n    return inflateInit2(strm, DEF_WBITS);\n}\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */ var virgin = true;\nvar lenfix, distfix; // We have no pointers in JS, so keep tables separate\nfunction fixedtables(state) {\n    /* build fixed huffman tables if first call (may not be thread safe) */ if (virgin) {\n        var sym;\n        lenfix = new utils.Buf32(512);\n        distfix = new utils.Buf32(32);\n        /* literal/length table */ sym = 0;\n        while(sym < 144){\n            state.lens[sym++] = 8;\n        }\n        while(sym < 256){\n            state.lens[sym++] = 9;\n        }\n        while(sym < 280){\n            state.lens[sym++] = 7;\n        }\n        while(sym < 288){\n            state.lens[sym++] = 8;\n        }\n        inflate_table(LENS, state.lens, 0, 288, lenfix, 0, state.work, {\n            bits: 9\n        });\n        /* distance table */ sym = 0;\n        while(sym < 32){\n            state.lens[sym++] = 5;\n        }\n        inflate_table(DISTS, state.lens, 0, 32, distfix, 0, state.work, {\n            bits: 5\n        });\n        /* do this just once */ virgin = false;\n    }\n    state.lencode = lenfix;\n    state.lenbits = 9;\n    state.distcode = distfix;\n    state.distbits = 5;\n}\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */ function updatewindow(strm, src, end, copy) {\n    var dist;\n    var state = strm.state;\n    /* if it hasn't been done already, allocate space for the window */ if (state.window === null) {\n        state.wsize = 1 << state.wbits;\n        state.wnext = 0;\n        state.whave = 0;\n        state.window = new utils.Buf8(state.wsize);\n    }\n    /* copy state->wsize or less output bytes into the circular window */ if (copy >= state.wsize) {\n        utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);\n        state.wnext = 0;\n        state.whave = state.wsize;\n    } else {\n        dist = state.wsize - state.wnext;\n        if (dist > copy) {\n            dist = copy;\n        }\n        //zmemcpy(state->window + state->wnext, end - copy, dist);\n        utils.arraySet(state.window, src, end - copy, dist, state.wnext);\n        copy -= dist;\n        if (copy) {\n            //zmemcpy(state->window, end - copy, copy);\n            utils.arraySet(state.window, src, end - copy, copy, 0);\n            state.wnext = copy;\n            state.whave = state.wsize;\n        } else {\n            state.wnext += dist;\n            if (state.wnext === state.wsize) {\n                state.wnext = 0;\n            }\n            if (state.whave < state.wsize) {\n                state.whave += dist;\n            }\n        }\n    }\n    return 0;\n}\nfunction inflate(strm, flush) {\n    var state;\n    var input, output; // input/output buffers\n    var next; /* next input INDEX */ \n    var put; /* next output INDEX */ \n    var have, left; /* available input and output */ \n    var hold; /* bit buffer */ \n    var bits; /* bits in bit buffer */ \n    var _in, _out; /* save starting available input and output */ \n    var copy; /* number of stored or match bytes to copy */ \n    var from; /* where to copy match bytes from */ \n    var from_source;\n    var here = 0; /* current decoding table entry */ \n    var here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n    //var last;                   /* parent table entry */\n    var last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n    var len; /* length to copy for repeats, bits to drop */ \n    var ret; /* return code */ \n    var hbuf = new utils.Buf8(4); /* buffer for gzip header crc calculation */ \n    var opts;\n    var n; // temporary var for NEED_BITS\n    var order = /* permutation of code lengths */ [\n        16,\n        17,\n        18,\n        0,\n        8,\n        7,\n        9,\n        6,\n        10,\n        5,\n        11,\n        4,\n        12,\n        3,\n        13,\n        2,\n        14,\n        1,\n        15\n    ];\n    if (!strm || !strm.state || !strm.output || !strm.input && strm.avail_in !== 0) {\n        return Z_STREAM_ERROR;\n    }\n    state = strm.state;\n    if (state.mode === TYPE) {\n        state.mode = TYPEDO;\n    } /* skip check */ \n    //--- LOAD() ---\n    put = strm.next_out;\n    output = strm.output;\n    left = strm.avail_out;\n    next = strm.next_in;\n    input = strm.input;\n    have = strm.avail_in;\n    hold = state.hold;\n    bits = state.bits;\n    //---\n    _in = have;\n    _out = left;\n    ret = Z_OK;\n    inf_leave: for(;;){\n        switch(state.mode){\n            case HEAD:\n                if (state.wrap === 0) {\n                    state.mode = TYPEDO;\n                    break;\n                }\n                //=== NEEDBITS(16);\n                while(bits < 16){\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                }\n                //===//\n                if (state.wrap & 2 && hold === 0x8b1f) {\n                    state.check = 0 /*crc32(0L, Z_NULL, 0)*/ ;\n                    //=== CRC2(state.check, hold);\n                    hbuf[0] = hold & 0xff;\n                    hbuf[1] = hold >>> 8 & 0xff;\n                    state.check = crc32(state.check, hbuf, 2, 0);\n                    //===//\n                    //=== INITBITS();\n                    hold = 0;\n                    bits = 0;\n                    //===//\n                    state.mode = FLAGS;\n                    break;\n                }\n                state.flags = 0; /* expect zlib header */ \n                if (state.head) {\n                    state.head.done = false;\n                }\n                if (!(state.wrap & 1) || /* check if zlib header allowed */ (((hold & 0xff) << 8) + (hold >> 8)) % 31) {\n                    strm.msg = \"incorrect header check\";\n                    state.mode = BAD;\n                    break;\n                }\n                if ((hold & 0x0f) !== Z_DEFLATED) {\n                    strm.msg = \"unknown compression method\";\n                    state.mode = BAD;\n                    break;\n                }\n                //--- DROPBITS(4) ---//\n                hold >>>= 4;\n                bits -= 4;\n                //---//\n                len = (hold & 0x0f) + 8;\n                if (state.wbits === 0) {\n                    state.wbits = len;\n                } else if (len > state.wbits) {\n                    strm.msg = \"invalid window size\";\n                    state.mode = BAD;\n                    break;\n                }\n                state.dmax = 1 << len;\n                //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n                strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/ ;\n                state.mode = hold & 0x200 ? DICTID : TYPE;\n                //=== INITBITS();\n                hold = 0;\n                bits = 0;\n                break;\n            case FLAGS:\n                //=== NEEDBITS(16); */\n                while(bits < 16){\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                }\n                //===//\n                state.flags = hold;\n                if ((state.flags & 0xff) !== Z_DEFLATED) {\n                    strm.msg = \"unknown compression method\";\n                    state.mode = BAD;\n                    break;\n                }\n                if (state.flags & 0xe000) {\n                    strm.msg = \"unknown header flags set\";\n                    state.mode = BAD;\n                    break;\n                }\n                if (state.head) {\n                    state.head.text = hold >> 8 & 1;\n                }\n                if (state.flags & 0x0200) {\n                    //=== CRC2(state.check, hold);\n                    hbuf[0] = hold & 0xff;\n                    hbuf[1] = hold >>> 8 & 0xff;\n                    state.check = crc32(state.check, hbuf, 2, 0);\n                //===//\n                }\n                //=== INITBITS();\n                hold = 0;\n                bits = 0;\n                //===//\n                state.mode = TIME;\n            /* falls through */ case TIME:\n                //=== NEEDBITS(32); */\n                while(bits < 32){\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                }\n                //===//\n                if (state.head) {\n                    state.head.time = hold;\n                }\n                if (state.flags & 0x0200) {\n                    //=== CRC4(state.check, hold)\n                    hbuf[0] = hold & 0xff;\n                    hbuf[1] = hold >>> 8 & 0xff;\n                    hbuf[2] = hold >>> 16 & 0xff;\n                    hbuf[3] = hold >>> 24 & 0xff;\n                    state.check = crc32(state.check, hbuf, 4, 0);\n                //===\n                }\n                //=== INITBITS();\n                hold = 0;\n                bits = 0;\n                //===//\n                state.mode = OS;\n            /* falls through */ case OS:\n                //=== NEEDBITS(16); */\n                while(bits < 16){\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                }\n                //===//\n                if (state.head) {\n                    state.head.xflags = hold & 0xff;\n                    state.head.os = hold >> 8;\n                }\n                if (state.flags & 0x0200) {\n                    //=== CRC2(state.check, hold);\n                    hbuf[0] = hold & 0xff;\n                    hbuf[1] = hold >>> 8 & 0xff;\n                    state.check = crc32(state.check, hbuf, 2, 0);\n                //===//\n                }\n                //=== INITBITS();\n                hold = 0;\n                bits = 0;\n                //===//\n                state.mode = EXLEN;\n            /* falls through */ case EXLEN:\n                if (state.flags & 0x0400) {\n                    //=== NEEDBITS(16); */\n                    while(bits < 16){\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    }\n                    //===//\n                    state.length = hold;\n                    if (state.head) {\n                        state.head.extra_len = hold;\n                    }\n                    if (state.flags & 0x0200) {\n                        //=== CRC2(state.check, hold);\n                        hbuf[0] = hold & 0xff;\n                        hbuf[1] = hold >>> 8 & 0xff;\n                        state.check = crc32(state.check, hbuf, 2, 0);\n                    //===//\n                    }\n                    //=== INITBITS();\n                    hold = 0;\n                    bits = 0;\n                //===//\n                } else if (state.head) {\n                    state.head.extra = null /*Z_NULL*/ ;\n                }\n                state.mode = EXTRA;\n            /* falls through */ case EXTRA:\n                if (state.flags & 0x0400) {\n                    copy = state.length;\n                    if (copy > have) {\n                        copy = have;\n                    }\n                    if (copy) {\n                        if (state.head) {\n                            len = state.head.extra_len - state.length;\n                            if (!state.head.extra) {\n                                // Use untyped array for more convenient processing later\n                                state.head.extra = new Array(state.head.extra_len);\n                            }\n                            utils.arraySet(state.head.extra, input, next, // extra field is limited to 65536 bytes\n                            // - no need for additional size check\n                            copy, /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/ len);\n                        //zmemcpy(state.head.extra + len, next,\n                        //        len + copy > state.head.extra_max ?\n                        //        state.head.extra_max - len : copy);\n                        }\n                        if (state.flags & 0x0200) {\n                            state.check = crc32(state.check, input, copy, next);\n                        }\n                        have -= copy;\n                        next += copy;\n                        state.length -= copy;\n                    }\n                    if (state.length) {\n                        break inf_leave;\n                    }\n                }\n                state.length = 0;\n                state.mode = NAME;\n            /* falls through */ case NAME:\n                if (state.flags & 0x0800) {\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    copy = 0;\n                    do {\n                        // TODO: 2 or 1 bytes?\n                        len = input[next + copy++];\n                        /* use constant limit because in js we should not preallocate memory */ if (state.head && len && state.length < 65536 /*state.head.name_max*/ ) {\n                            state.head.name += String.fromCharCode(len);\n                        }\n                    }while (len && copy < have);\n                    if (state.flags & 0x0200) {\n                        state.check = crc32(state.check, input, copy, next);\n                    }\n                    have -= copy;\n                    next += copy;\n                    if (len) {\n                        break inf_leave;\n                    }\n                } else if (state.head) {\n                    state.head.name = null;\n                }\n                state.length = 0;\n                state.mode = COMMENT;\n            /* falls through */ case COMMENT:\n                if (state.flags & 0x1000) {\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    copy = 0;\n                    do {\n                        len = input[next + copy++];\n                        /* use constant limit because in js we should not preallocate memory */ if (state.head && len && state.length < 65536 /*state.head.comm_max*/ ) {\n                            state.head.comment += String.fromCharCode(len);\n                        }\n                    }while (len && copy < have);\n                    if (state.flags & 0x0200) {\n                        state.check = crc32(state.check, input, copy, next);\n                    }\n                    have -= copy;\n                    next += copy;\n                    if (len) {\n                        break inf_leave;\n                    }\n                } else if (state.head) {\n                    state.head.comment = null;\n                }\n                state.mode = HCRC;\n            /* falls through */ case HCRC:\n                if (state.flags & 0x0200) {\n                    //=== NEEDBITS(16); */\n                    while(bits < 16){\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    }\n                    //===//\n                    if (hold !== (state.check & 0xffff)) {\n                        strm.msg = \"header crc mismatch\";\n                        state.mode = BAD;\n                        break;\n                    }\n                    //=== INITBITS();\n                    hold = 0;\n                    bits = 0;\n                //===//\n                }\n                if (state.head) {\n                    state.head.hcrc = state.flags >> 9 & 1;\n                    state.head.done = true;\n                }\n                strm.adler = state.check = 0;\n                state.mode = TYPE;\n                break;\n            case DICTID:\n                //=== NEEDBITS(32); */\n                while(bits < 32){\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                }\n                //===//\n                strm.adler = state.check = zswap32(hold);\n                //=== INITBITS();\n                hold = 0;\n                bits = 0;\n                //===//\n                state.mode = DICT;\n            /* falls through */ case DICT:\n                if (state.havedict === 0) {\n                    //--- RESTORE() ---\n                    strm.next_out = put;\n                    strm.avail_out = left;\n                    strm.next_in = next;\n                    strm.avail_in = have;\n                    state.hold = hold;\n                    state.bits = bits;\n                    //---\n                    return Z_NEED_DICT;\n                }\n                strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/ ;\n                state.mode = TYPE;\n            /* falls through */ case TYPE:\n                if (flush === Z_BLOCK || flush === Z_TREES) {\n                    break inf_leave;\n                }\n            /* falls through */ case TYPEDO:\n                if (state.last) {\n                    //--- BYTEBITS() ---//\n                    hold >>>= bits & 7;\n                    bits -= bits & 7;\n                    //---//\n                    state.mode = CHECK;\n                    break;\n                }\n                //=== NEEDBITS(3); */\n                while(bits < 3){\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                }\n                //===//\n                state.last = hold & 0x01 /*BITS(1)*/ ;\n                //--- DROPBITS(1) ---//\n                hold >>>= 1;\n                bits -= 1;\n                //---//\n                switch(hold & 0x03){\n                    case 0:\n                        /* stored block */ //Tracev((stderr, \"inflate:     stored block%s\\n\",\n                        //        state.last ? \" (last)\" : \"\"));\n                        state.mode = STORED;\n                        break;\n                    case 1:\n                        /* fixed block */ fixedtables(state);\n                        //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n                        //        state.last ? \" (last)\" : \"\"));\n                        state.mode = LEN_; /* decode codes */ \n                        if (flush === Z_TREES) {\n                            //--- DROPBITS(2) ---//\n                            hold >>>= 2;\n                            bits -= 2;\n                            break inf_leave;\n                        }\n                        break;\n                    case 2:\n                        /* dynamic block */ //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n                        //        state.last ? \" (last)\" : \"\"));\n                        state.mode = TABLE;\n                        break;\n                    case 3:\n                        strm.msg = \"invalid block type\";\n                        state.mode = BAD;\n                }\n                //--- DROPBITS(2) ---//\n                hold >>>= 2;\n                bits -= 2;\n                break;\n            case STORED:\n                //--- BYTEBITS() ---// /* go to byte boundary */\n                hold >>>= bits & 7;\n                bits -= bits & 7;\n                //---//\n                //=== NEEDBITS(32); */\n                while(bits < 32){\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                }\n                //===//\n                if ((hold & 0xffff) !== (hold >>> 16 ^ 0xffff)) {\n                    strm.msg = \"invalid stored block lengths\";\n                    state.mode = BAD;\n                    break;\n                }\n                state.length = hold & 0xffff;\n                //Tracev((stderr, \"inflate:       stored length %u\\n\",\n                //        state.length));\n                //=== INITBITS();\n                hold = 0;\n                bits = 0;\n                //===//\n                state.mode = COPY_;\n                if (flush === Z_TREES) {\n                    break inf_leave;\n                }\n            /* falls through */ case COPY_:\n                state.mode = COPY;\n            /* falls through */ case COPY:\n                copy = state.length;\n                if (copy) {\n                    if (copy > have) {\n                        copy = have;\n                    }\n                    if (copy > left) {\n                        copy = left;\n                    }\n                    if (copy === 0) {\n                        break inf_leave;\n                    }\n                    //--- zmemcpy(put, next, copy); ---\n                    utils.arraySet(output, input, next, copy, put);\n                    //---//\n                    have -= copy;\n                    next += copy;\n                    left -= copy;\n                    put += copy;\n                    state.length -= copy;\n                    break;\n                }\n                //Tracev((stderr, \"inflate:       stored end\\n\"));\n                state.mode = TYPE;\n                break;\n            case TABLE:\n                //=== NEEDBITS(14); */\n                while(bits < 14){\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                }\n                //===//\n                state.nlen = (hold & 0x1f) + 257;\n                //--- DROPBITS(5) ---//\n                hold >>>= 5;\n                bits -= 5;\n                //---//\n                state.ndist = (hold & 0x1f) + 1;\n                //--- DROPBITS(5) ---//\n                hold >>>= 5;\n                bits -= 5;\n                //---//\n                state.ncode = (hold & 0x0f) + 4;\n                //--- DROPBITS(4) ---//\n                hold >>>= 4;\n                bits -= 4;\n                //---//\n                //#ifndef PKZIP_BUG_WORKAROUND\n                if (state.nlen > 286 || state.ndist > 30) {\n                    strm.msg = \"too many length or distance symbols\";\n                    state.mode = BAD;\n                    break;\n                }\n                //#endif\n                //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n                state.have = 0;\n                state.mode = LENLENS;\n            /* falls through */ case LENLENS:\n                while(state.have < state.ncode){\n                    //=== NEEDBITS(3);\n                    while(bits < 3){\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    }\n                    //===//\n                    state.lens[order[state.have++]] = hold & 0x07; //BITS(3);\n                    //--- DROPBITS(3) ---//\n                    hold >>>= 3;\n                    bits -= 3;\n                //---//\n                }\n                while(state.have < 19){\n                    state.lens[order[state.have++]] = 0;\n                }\n                // We have separate tables & no pointers. 2 commented lines below not needed.\n                //state.next = state.codes;\n                //state.lencode = state.next;\n                // Switch to use dynamic table\n                state.lencode = state.lendyn;\n                state.lenbits = 7;\n                opts = {\n                    bits: state.lenbits\n                };\n                ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n                state.lenbits = opts.bits;\n                if (ret) {\n                    strm.msg = \"invalid code lengths set\";\n                    state.mode = BAD;\n                    break;\n                }\n                //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n                state.have = 0;\n                state.mode = CODELENS;\n            /* falls through */ case CODELENS:\n                while(state.have < state.nlen + state.ndist){\n                    for(;;){\n                        here = state.lencode[hold & (1 << state.lenbits) - 1]; /*BITS(state.lenbits)*/ \n                        here_bits = here >>> 24;\n                        here_op = here >>> 16 & 0xff;\n                        here_val = here & 0xffff;\n                        if (here_bits <= bits) {\n                            break;\n                        }\n                        //--- PULLBYTE() ---//\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    //---//\n                    }\n                    if (here_val < 16) {\n                        //--- DROPBITS(here.bits) ---//\n                        hold >>>= here_bits;\n                        bits -= here_bits;\n                        //---//\n                        state.lens[state.have++] = here_val;\n                    } else {\n                        if (here_val === 16) {\n                            //=== NEEDBITS(here.bits + 2);\n                            n = here_bits + 2;\n                            while(bits < n){\n                                if (have === 0) {\n                                    break inf_leave;\n                                }\n                                have--;\n                                hold += input[next++] << bits;\n                                bits += 8;\n                            }\n                            //===//\n                            //--- DROPBITS(here.bits) ---//\n                            hold >>>= here_bits;\n                            bits -= here_bits;\n                            //---//\n                            if (state.have === 0) {\n                                strm.msg = \"invalid bit length repeat\";\n                                state.mode = BAD;\n                                break;\n                            }\n                            len = state.lens[state.have - 1];\n                            copy = 3 + (hold & 0x03); //BITS(2);\n                            //--- DROPBITS(2) ---//\n                            hold >>>= 2;\n                            bits -= 2;\n                        //---//\n                        } else if (here_val === 17) {\n                            //=== NEEDBITS(here.bits + 3);\n                            n = here_bits + 3;\n                            while(bits < n){\n                                if (have === 0) {\n                                    break inf_leave;\n                                }\n                                have--;\n                                hold += input[next++] << bits;\n                                bits += 8;\n                            }\n                            //===//\n                            //--- DROPBITS(here.bits) ---//\n                            hold >>>= here_bits;\n                            bits -= here_bits;\n                            //---//\n                            len = 0;\n                            copy = 3 + (hold & 0x07); //BITS(3);\n                            //--- DROPBITS(3) ---//\n                            hold >>>= 3;\n                            bits -= 3;\n                        //---//\n                        } else {\n                            //=== NEEDBITS(here.bits + 7);\n                            n = here_bits + 7;\n                            while(bits < n){\n                                if (have === 0) {\n                                    break inf_leave;\n                                }\n                                have--;\n                                hold += input[next++] << bits;\n                                bits += 8;\n                            }\n                            //===//\n                            //--- DROPBITS(here.bits) ---//\n                            hold >>>= here_bits;\n                            bits -= here_bits;\n                            //---//\n                            len = 0;\n                            copy = 11 + (hold & 0x7f); //BITS(7);\n                            //--- DROPBITS(7) ---//\n                            hold >>>= 7;\n                            bits -= 7;\n                        //---//\n                        }\n                        if (state.have + copy > state.nlen + state.ndist) {\n                            strm.msg = \"invalid bit length repeat\";\n                            state.mode = BAD;\n                            break;\n                        }\n                        while(copy--){\n                            state.lens[state.have++] = len;\n                        }\n                    }\n                }\n                /* handle error breaks in while */ if (state.mode === BAD) {\n                    break;\n                }\n                /* check for end-of-block code (better have one) */ if (state.lens[256] === 0) {\n                    strm.msg = \"invalid code -- missing end-of-block\";\n                    state.mode = BAD;\n                    break;\n                }\n                /* build code tables -- note: do not change the lenbits or distbits\n           values here (9 and 6) without reading the comments in inftrees.h\n           concerning the ENOUGH constants, which depend on those values */ state.lenbits = 9;\n                opts = {\n                    bits: state.lenbits\n                };\n                ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n                // We have separate tables & no pointers. 2 commented lines below not needed.\n                // state.next_index = opts.table_index;\n                state.lenbits = opts.bits;\n                // state.lencode = state.next;\n                if (ret) {\n                    strm.msg = \"invalid literal/lengths set\";\n                    state.mode = BAD;\n                    break;\n                }\n                state.distbits = 6;\n                //state.distcode.copy(state.codes);\n                // Switch to use dynamic table\n                state.distcode = state.distdyn;\n                opts = {\n                    bits: state.distbits\n                };\n                ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n                // We have separate tables & no pointers. 2 commented lines below not needed.\n                // state.next_index = opts.table_index;\n                state.distbits = opts.bits;\n                // state.distcode = state.next;\n                if (ret) {\n                    strm.msg = \"invalid distances set\";\n                    state.mode = BAD;\n                    break;\n                }\n                //Tracev((stderr, 'inflate:       codes ok\\n'));\n                state.mode = LEN_;\n                if (flush === Z_TREES) {\n                    break inf_leave;\n                }\n            /* falls through */ case LEN_:\n                state.mode = LEN;\n            /* falls through */ case LEN:\n                if (have >= 6 && left >= 258) {\n                    //--- RESTORE() ---\n                    strm.next_out = put;\n                    strm.avail_out = left;\n                    strm.next_in = next;\n                    strm.avail_in = have;\n                    state.hold = hold;\n                    state.bits = bits;\n                    //---\n                    inflate_fast(strm, _out);\n                    //--- LOAD() ---\n                    put = strm.next_out;\n                    output = strm.output;\n                    left = strm.avail_out;\n                    next = strm.next_in;\n                    input = strm.input;\n                    have = strm.avail_in;\n                    hold = state.hold;\n                    bits = state.bits;\n                    //---\n                    if (state.mode === TYPE) {\n                        state.back = -1;\n                    }\n                    break;\n                }\n                state.back = 0;\n                for(;;){\n                    here = state.lencode[hold & (1 << state.lenbits) - 1]; /*BITS(state.lenbits)*/ \n                    here_bits = here >>> 24;\n                    here_op = here >>> 16 & 0xff;\n                    here_val = here & 0xffff;\n                    if (here_bits <= bits) {\n                        break;\n                    }\n                    //--- PULLBYTE() ---//\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                //---//\n                }\n                if (here_op && (here_op & 0xf0) === 0) {\n                    last_bits = here_bits;\n                    last_op = here_op;\n                    last_val = here_val;\n                    for(;;){\n                        here = state.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];\n                        here_bits = here >>> 24;\n                        here_op = here >>> 16 & 0xff;\n                        here_val = here & 0xffff;\n                        if (last_bits + here_bits <= bits) {\n                            break;\n                        }\n                        //--- PULLBYTE() ---//\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    //---//\n                    }\n                    //--- DROPBITS(last.bits) ---//\n                    hold >>>= last_bits;\n                    bits -= last_bits;\n                    //---//\n                    state.back += last_bits;\n                }\n                //--- DROPBITS(here.bits) ---//\n                hold >>>= here_bits;\n                bits -= here_bits;\n                //---//\n                state.back += here_bits;\n                state.length = here_val;\n                if (here_op === 0) {\n                    //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n                    //        \"inflate:         literal '%c'\\n\" :\n                    //        \"inflate:         literal 0x%02x\\n\", here.val));\n                    state.mode = LIT;\n                    break;\n                }\n                if (here_op & 32) {\n                    //Tracevv((stderr, \"inflate:         end of block\\n\"));\n                    state.back = -1;\n                    state.mode = TYPE;\n                    break;\n                }\n                if (here_op & 64) {\n                    strm.msg = \"invalid literal/length code\";\n                    state.mode = BAD;\n                    break;\n                }\n                state.extra = here_op & 15;\n                state.mode = LENEXT;\n            /* falls through */ case LENEXT:\n                if (state.extra) {\n                    //=== NEEDBITS(state.extra);\n                    n = state.extra;\n                    while(bits < n){\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    }\n                    //===//\n                    state.length += hold & (1 << state.extra) - 1 /*BITS(state.extra)*/ ;\n                    //--- DROPBITS(state.extra) ---//\n                    hold >>>= state.extra;\n                    bits -= state.extra;\n                    //---//\n                    state.back += state.extra;\n                }\n                //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n                state.was = state.length;\n                state.mode = DIST;\n            /* falls through */ case DIST:\n                for(;;){\n                    here = state.distcode[hold & (1 << state.distbits) - 1]; /*BITS(state.distbits)*/ \n                    here_bits = here >>> 24;\n                    here_op = here >>> 16 & 0xff;\n                    here_val = here & 0xffff;\n                    if (here_bits <= bits) {\n                        break;\n                    }\n                    //--- PULLBYTE() ---//\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                //---//\n                }\n                if ((here_op & 0xf0) === 0) {\n                    last_bits = here_bits;\n                    last_op = here_op;\n                    last_val = here_val;\n                    for(;;){\n                        here = state.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];\n                        here_bits = here >>> 24;\n                        here_op = here >>> 16 & 0xff;\n                        here_val = here & 0xffff;\n                        if (last_bits + here_bits <= bits) {\n                            break;\n                        }\n                        //--- PULLBYTE() ---//\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    //---//\n                    }\n                    //--- DROPBITS(last.bits) ---//\n                    hold >>>= last_bits;\n                    bits -= last_bits;\n                    //---//\n                    state.back += last_bits;\n                }\n                //--- DROPBITS(here.bits) ---//\n                hold >>>= here_bits;\n                bits -= here_bits;\n                //---//\n                state.back += here_bits;\n                if (here_op & 64) {\n                    strm.msg = \"invalid distance code\";\n                    state.mode = BAD;\n                    break;\n                }\n                state.offset = here_val;\n                state.extra = here_op & 15;\n                state.mode = DISTEXT;\n            /* falls through */ case DISTEXT:\n                if (state.extra) {\n                    //=== NEEDBITS(state.extra);\n                    n = state.extra;\n                    while(bits < n){\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    }\n                    //===//\n                    state.offset += hold & (1 << state.extra) - 1 /*BITS(state.extra)*/ ;\n                    //--- DROPBITS(state.extra) ---//\n                    hold >>>= state.extra;\n                    bits -= state.extra;\n                    //---//\n                    state.back += state.extra;\n                }\n                //#ifdef INFLATE_STRICT\n                if (state.offset > state.dmax) {\n                    strm.msg = \"invalid distance too far back\";\n                    state.mode = BAD;\n                    break;\n                }\n                //#endif\n                //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n                state.mode = MATCH;\n            /* falls through */ case MATCH:\n                if (left === 0) {\n                    break inf_leave;\n                }\n                copy = _out - left;\n                if (state.offset > copy) {\n                    copy = state.offset - copy;\n                    if (copy > state.whave) {\n                        if (state.sane) {\n                            strm.msg = \"invalid distance too far back\";\n                            state.mode = BAD;\n                            break;\n                        }\n                    // (!) This block is disabled in zlib defaults,\n                    // don't enable it for binary compatibility\n                    //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n                    //          Trace((stderr, \"inflate.c too far\\n\"));\n                    //          copy -= state.whave;\n                    //          if (copy > state.length) { copy = state.length; }\n                    //          if (copy > left) { copy = left; }\n                    //          left -= copy;\n                    //          state.length -= copy;\n                    //          do {\n                    //            output[put++] = 0;\n                    //          } while (--copy);\n                    //          if (state.length === 0) { state.mode = LEN; }\n                    //          break;\n                    //#endif\n                    }\n                    if (copy > state.wnext) {\n                        copy -= state.wnext;\n                        from = state.wsize - copy;\n                    } else {\n                        from = state.wnext - copy;\n                    }\n                    if (copy > state.length) {\n                        copy = state.length;\n                    }\n                    from_source = state.window;\n                } else {\n                    from_source = output;\n                    from = put - state.offset;\n                    copy = state.length;\n                }\n                if (copy > left) {\n                    copy = left;\n                }\n                left -= copy;\n                state.length -= copy;\n                do {\n                    output[put++] = from_source[from++];\n                }while (--copy);\n                if (state.length === 0) {\n                    state.mode = LEN;\n                }\n                break;\n            case LIT:\n                if (left === 0) {\n                    break inf_leave;\n                }\n                output[put++] = state.length;\n                left--;\n                state.mode = LEN;\n                break;\n            case CHECK:\n                if (state.wrap) {\n                    //=== NEEDBITS(32);\n                    while(bits < 32){\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        // Use '|' instead of '+' to make sure that result is signed\n                        hold |= input[next++] << bits;\n                        bits += 8;\n                    }\n                    //===//\n                    _out -= left;\n                    strm.total_out += _out;\n                    state.total += _out;\n                    if (_out) {\n                        strm.adler = state.check = /*UPDATE(state.check, put - _out, _out);*/ state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out);\n                    }\n                    _out = left;\n                    // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n                    if ((state.flags ? hold : zswap32(hold)) !== state.check) {\n                        strm.msg = \"incorrect data check\";\n                        state.mode = BAD;\n                        break;\n                    }\n                    //=== INITBITS();\n                    hold = 0;\n                    bits = 0;\n                //===//\n                //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n                }\n                state.mode = LENGTH;\n            /* falls through */ case LENGTH:\n                if (state.wrap && state.flags) {\n                    //=== NEEDBITS(32);\n                    while(bits < 32){\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    }\n                    //===//\n                    if (hold !== (state.total & 0xffffffff)) {\n                        strm.msg = \"incorrect length check\";\n                        state.mode = BAD;\n                        break;\n                    }\n                    //=== INITBITS();\n                    hold = 0;\n                    bits = 0;\n                //===//\n                //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n                }\n                state.mode = DONE;\n            /* falls through */ case DONE:\n                ret = Z_STREAM_END;\n                break inf_leave;\n            case BAD:\n                ret = Z_DATA_ERROR;\n                break inf_leave;\n            case MEM:\n                return Z_MEM_ERROR;\n            case SYNC:\n            /* falls through */ default:\n                return Z_STREAM_ERROR;\n        }\n    }\n    // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n    /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */ //--- RESTORE() ---\n    strm.next_out = put;\n    strm.avail_out = left;\n    strm.next_in = next;\n    strm.avail_in = have;\n    state.hold = hold;\n    state.bits = bits;\n    //---\n    if (state.wsize || _out !== strm.avail_out && state.mode < BAD && (state.mode < CHECK || flush !== Z_FINISH)) {\n        if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {\n            state.mode = MEM;\n            return Z_MEM_ERROR;\n        }\n    }\n    _in -= strm.avail_in;\n    _out -= strm.avail_out;\n    strm.total_in += _in;\n    strm.total_out += _out;\n    state.total += _out;\n    if (state.wrap && _out) {\n        strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/ state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out);\n    }\n    strm.data_type = state.bits + (state.last ? 64 : 0) + (state.mode === TYPE ? 128 : 0) + (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n    if ((_in === 0 && _out === 0 || flush === Z_FINISH) && ret === Z_OK) {\n        ret = Z_BUF_ERROR;\n    }\n    return ret;\n}\nfunction inflateEnd(strm) {\n    if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/ ) {\n        return Z_STREAM_ERROR;\n    }\n    var state = strm.state;\n    if (state.window) {\n        state.window = null;\n    }\n    strm.state = null;\n    return Z_OK;\n}\nfunction inflateGetHeader(strm, head) {\n    var state;\n    /* check state */ if (!strm || !strm.state) {\n        return Z_STREAM_ERROR;\n    }\n    state = strm.state;\n    if ((state.wrap & 2) === 0) {\n        return Z_STREAM_ERROR;\n    }\n    /* save header structure */ state.head = head;\n    head.done = false;\n    return Z_OK;\n}\nfunction inflateSetDictionary(strm, dictionary) {\n    var dictLength = dictionary.length;\n    var state;\n    var dictid;\n    var ret;\n    /* check state */ if (!strm /* == Z_NULL */  || !strm.state /* == Z_NULL */ ) {\n        return Z_STREAM_ERROR;\n    }\n    state = strm.state;\n    if (state.wrap !== 0 && state.mode !== DICT) {\n        return Z_STREAM_ERROR;\n    }\n    /* check for correct dictionary identifier */ if (state.mode === DICT) {\n        dictid = 1; /* adler32(0, null, 0)*/ \n        /* dictid = adler32(dictid, dictionary, dictLength); */ dictid = adler32(dictid, dictionary, dictLength, 0);\n        if (dictid !== state.check) {\n            return Z_DATA_ERROR;\n        }\n    }\n    /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */ ret = updatewindow(strm, dictionary, dictLength, dictLength);\n    if (ret) {\n        state.mode = MEM;\n        return Z_MEM_ERROR;\n    }\n    state.havedict = 1;\n    // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n    return Z_OK;\n}\nexports.inflateReset = inflateReset;\nexports.inflateReset2 = inflateReset2;\nexports.inflateResetKeep = inflateResetKeep;\nexports.inflateInit = inflateInit;\nexports.inflateInit2 = inflateInit2;\nexports.inflate = inflate;\nexports.inflateEnd = inflateEnd;\nexports.inflateGetHeader = inflateGetHeader;\nexports.inflateSetDictionary = inflateSetDictionary;\nexports.inflateInfo = \"pako inflate (from Nodeca project)\"; /* Not implemented\nexports.inflateCopy = inflateCopy;\nexports.inflateGetDictionary = inflateGetDictionary;\nexports.inflateMark = inflateMark;\nexports.inflatePrime = inflatePrime;\nexports.inflateSync = inflateSync;\nexports.inflateSyncPoint = inflateSyncPoint;\nexports.inflateUndermine = inflateUndermine;\n*/ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/inflate.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/inftrees.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/inftrees.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nvar utils = __webpack_require__(/*! ../utils/common */ \"(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/utils/common.js\");\nvar MAXBITS = 15;\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\nvar lbase = [\n    /* Length codes 257..285 base */ 3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    13,\n    15,\n    17,\n    19,\n    23,\n    27,\n    31,\n    35,\n    43,\n    51,\n    59,\n    67,\n    83,\n    99,\n    115,\n    131,\n    163,\n    195,\n    227,\n    258,\n    0,\n    0\n];\nvar lext = [\n    /* Length codes 257..285 extra */ 16,\n    16,\n    16,\n    16,\n    16,\n    16,\n    16,\n    16,\n    17,\n    17,\n    17,\n    17,\n    18,\n    18,\n    18,\n    18,\n    19,\n    19,\n    19,\n    19,\n    20,\n    20,\n    20,\n    20,\n    21,\n    21,\n    21,\n    21,\n    16,\n    72,\n    78\n];\nvar dbase = [\n    /* Distance codes 0..29 base */ 1,\n    2,\n    3,\n    4,\n    5,\n    7,\n    9,\n    13,\n    17,\n    25,\n    33,\n    49,\n    65,\n    97,\n    129,\n    193,\n    257,\n    385,\n    513,\n    769,\n    1025,\n    1537,\n    2049,\n    3073,\n    4097,\n    6145,\n    8193,\n    12289,\n    16385,\n    24577,\n    0,\n    0\n];\nvar dext = [\n    /* Distance codes 0..29 extra */ 16,\n    16,\n    16,\n    16,\n    17,\n    17,\n    18,\n    18,\n    19,\n    19,\n    20,\n    20,\n    21,\n    21,\n    22,\n    22,\n    23,\n    23,\n    24,\n    24,\n    25,\n    25,\n    26,\n    26,\n    27,\n    27,\n    28,\n    28,\n    29,\n    29,\n    64,\n    64\n];\nmodule.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts) {\n    var bits = opts.bits;\n    //here = opts.here; /* table entry for duplication */\n    var len = 0; /* a code's length in bits */ \n    var sym = 0; /* index of code symbols */ \n    var min = 0, max = 0; /* minimum and maximum code lengths */ \n    var root = 0; /* number of index bits for root table */ \n    var curr = 0; /* number of index bits for current table */ \n    var drop = 0; /* code bits to drop for sub-table */ \n    var left = 0; /* number of prefix codes available */ \n    var used = 0; /* code entries in table used */ \n    var huff = 0; /* Huffman code */ \n    var incr; /* for incrementing code, index */ \n    var fill; /* index for replicating entries */ \n    var low; /* low bits for current root entry */ \n    var mask; /* mask for low root bits */ \n    var next; /* next available space in table */ \n    var base = null; /* base value table to use */ \n    var base_index = 0;\n    //  var shoextra;    /* extra bits table to use */\n    var end; /* use base and extra for symbol > end */ \n    var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n    var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n    var extra = null;\n    var extra_index = 0;\n    var here_bits, here_op, here_val;\n    /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */ /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */ for(len = 0; len <= MAXBITS; len++){\n        count[len] = 0;\n    }\n    for(sym = 0; sym < codes; sym++){\n        count[lens[lens_index + sym]]++;\n    }\n    /* bound code lengths, force root to be within code lengths */ root = bits;\n    for(max = MAXBITS; max >= 1; max--){\n        if (count[max] !== 0) {\n            break;\n        }\n    }\n    if (root > max) {\n        root = max;\n    }\n    if (max === 0) {\n        //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n        //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n        //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n        table[table_index++] = 1 << 24 | 64 << 16 | 0;\n        //table.op[opts.table_index] = 64;\n        //table.bits[opts.table_index] = 1;\n        //table.val[opts.table_index++] = 0;\n        table[table_index++] = 1 << 24 | 64 << 16 | 0;\n        opts.bits = 1;\n        return 0; /* no symbols, but wait for decoding to report error */ \n    }\n    for(min = 1; min < max; min++){\n        if (count[min] !== 0) {\n            break;\n        }\n    }\n    if (root < min) {\n        root = min;\n    }\n    /* check for an over-subscribed or incomplete set of lengths */ left = 1;\n    for(len = 1; len <= MAXBITS; len++){\n        left <<= 1;\n        left -= count[len];\n        if (left < 0) {\n            return -1;\n        } /* over-subscribed */ \n    }\n    if (left > 0 && (type === CODES || max !== 1)) {\n        return -1; /* incomplete set */ \n    }\n    /* generate offsets into symbol table for each length for sorting */ offs[1] = 0;\n    for(len = 1; len < MAXBITS; len++){\n        offs[len + 1] = offs[len] + count[len];\n    }\n    /* sort symbols by length, by symbol order within each length */ for(sym = 0; sym < codes; sym++){\n        if (lens[lens_index + sym] !== 0) {\n            work[offs[lens[lens_index + sym]]++] = sym;\n        }\n    }\n    /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */ /* set up for code type */ // poor man optimization - use if-else instead of switch,\n    // to avoid deopts in old v8\n    if (type === CODES) {\n        base = extra = work; /* dummy value--not used */ \n        end = 19;\n    } else if (type === LENS) {\n        base = lbase;\n        base_index -= 257;\n        extra = lext;\n        extra_index -= 257;\n        end = 256;\n    } else {\n        base = dbase;\n        extra = dext;\n        end = -1;\n    }\n    /* initialize opts for loop */ huff = 0; /* starting code */ \n    sym = 0; /* starting code symbol */ \n    len = min; /* starting code length */ \n    next = table_index; /* current table to fill in */ \n    curr = root; /* current table index bits */ \n    drop = 0; /* current bits to drop from code for index */ \n    low = -1; /* trigger new sub-table when len > root */ \n    used = 1 << root; /* use root table entries */ \n    mask = used - 1; /* mask for comparing low */ \n    /* check available table space */ if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {\n        return 1;\n    }\n    /* process all codes and make table entries */ for(;;){\n        /* create table entry */ here_bits = len - drop;\n        if (work[sym] < end) {\n            here_op = 0;\n            here_val = work[sym];\n        } else if (work[sym] > end) {\n            here_op = extra[extra_index + work[sym]];\n            here_val = base[base_index + work[sym]];\n        } else {\n            here_op = 32 + 64; /* end of block */ \n            here_val = 0;\n        }\n        /* replicate for those indices with low len bits equal to huff */ incr = 1 << len - drop;\n        fill = 1 << curr;\n        min = fill; /* save offset to next table */ \n        do {\n            fill -= incr;\n            table[next + (huff >> drop) + fill] = here_bits << 24 | here_op << 16 | here_val | 0;\n        }while (fill !== 0);\n        /* backwards increment the len-bit code huff */ incr = 1 << len - 1;\n        while(huff & incr){\n            incr >>= 1;\n        }\n        if (incr !== 0) {\n            huff &= incr - 1;\n            huff += incr;\n        } else {\n            huff = 0;\n        }\n        /* go to next symbol, update count, len */ sym++;\n        if (--count[len] === 0) {\n            if (len === max) {\n                break;\n            }\n            len = lens[lens_index + work[sym]];\n        }\n        /* create new sub-table if needed */ if (len > root && (huff & mask) !== low) {\n            /* if first time, transition to sub-tables */ if (drop === 0) {\n                drop = root;\n            }\n            /* increment past last table */ next += min; /* here min is 1 << curr */ \n            /* determine length of next table */ curr = len - drop;\n            left = 1 << curr;\n            while(curr + drop < max){\n                left -= count[curr + drop];\n                if (left <= 0) {\n                    break;\n                }\n                curr++;\n                left <<= 1;\n            }\n            /* check for enough space */ used += 1 << curr;\n            if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {\n                return 1;\n            }\n            /* point entry in root table to sub-table */ low = huff & mask;\n            /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/ table[low] = root << 24 | curr << 16 | next - table_index | 0;\n        }\n    }\n    /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */ if (huff !== 0) {\n        //table.op[next + huff] = 64;            /* invalid code marker */\n        //table.bits[next + huff] = len - drop;\n        //table.val[next + huff] = 0;\n        table[next + huff] = len - drop << 24 | 64 << 16 | 0;\n    }\n    /* set return parameters */ //opts.table_index += used;\n    opts.bits = root;\n    return 0;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHBkZi1saWIvdXBuZy9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9pbmZ0cmVlcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLGdEQUFnRDtBQUNoRCxrREFBa0Q7QUFDbEQsRUFBRTtBQUNGLG9FQUFvRTtBQUNwRSx3RUFBd0U7QUFDeEUseUNBQXlDO0FBQ3pDLEVBQUU7QUFDRix3RUFBd0U7QUFDeEUseUVBQXlFO0FBQ3pFLGlEQUFpRDtBQUNqRCxFQUFFO0FBQ0YsMEVBQTBFO0FBQzFFLHlFQUF5RTtBQUN6RSwwRUFBMEU7QUFDMUUscUNBQXFDO0FBQ3JDLDZFQUE2RTtBQUM3RSxtREFBbUQ7QUFDbkQsNkVBQTZFO0FBRTdFLElBQUlBLFFBQVFDLG1CQUFPQSxDQUFDO0FBRXBCLElBQUlDLFVBQVU7QUFDZCxJQUFJQyxjQUFjO0FBQ2xCLElBQUlDLGVBQWU7QUFDbkIsMENBQTBDO0FBRTFDLElBQUlDLFFBQVE7QUFDWixJQUFJQyxPQUFPO0FBQ1gsSUFBSUMsUUFBUTtBQUVaLElBQUlDLFFBQVE7SUFBRSw4QkFBOEIsR0FDMUM7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFDckQ7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFHO0NBQzlEO0FBRUQsSUFBSUMsT0FBTztJQUFFLCtCQUErQixHQUMxQztJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUM1RDtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7Q0FDekQ7QUFFRCxJQUFJQyxRQUFRO0lBQUUsNkJBQTZCLEdBQ3pDO0lBQUc7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SCxPQUFPSTtZQUNiOzsrQ0FFeUMsR0FDekNsQixLQUFLLENBQUNpQixJQUFJLEdBQUcsUUFBUyxLQUFPUCxRQUFRLEtBQU9TLE9BQU9sQixjQUFjO1FBQ25FO0lBQ0Y7SUFFQTs7b0VBRWtFLEdBQ2xFLElBQUlhLFNBQVMsR0FBRztRQUNkLGtFQUFrRTtRQUNsRSx1Q0FBdUM7UUFDdkMsNkJBQTZCO1FBQzdCZCxLQUFLLENBQUNtQixPQUFPTCxLQUFLLEdBQUcsTUFBUUgsUUFBUyxLQUFPLE1BQU0sS0FBSztJQUMxRDtJQUVBLHlCQUF5QixHQUN6QiwyQkFBMkI7SUFDM0JSLEtBQUtDLElBQUksR0FBR0s7SUFDWixPQUFPO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaXZpbC1lbmdpbmVlcmluZy1wbGF0Zm9ybS8uL25vZGVfbW9kdWxlcy9AcGRmLWxpYi91cG5nL25vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL2luZnRyZWVzLmpzP2Y1NmQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL2NvbW1vbicpO1xuXG52YXIgTUFYQklUUyA9IDE1O1xudmFyIEVOT1VHSF9MRU5TID0gODUyO1xudmFyIEVOT1VHSF9ESVNUUyA9IDU5Mjtcbi8vdmFyIEVOT1VHSCA9IChFTk9VR0hfTEVOUytFTk9VR0hfRElTVFMpO1xuXG52YXIgQ09ERVMgPSAwO1xudmFyIExFTlMgPSAxO1xudmFyIERJU1RTID0gMjtcblxudmFyIGxiYXNlID0gWyAvKiBMZW5ndGggY29kZXMgMjU3Li4yODUgYmFzZSAqL1xuICAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEzLCAxNSwgMTcsIDE5LCAyMywgMjcsIDMxLFxuICAzNSwgNDMsIDUxLCA1OSwgNjcsIDgzLCA5OSwgMTE1LCAxMzEsIDE2MywgMTk1LCAyMjcsIDI1OCwgMCwgMFxuXTtcblxudmFyIGxleHQgPSBbIC8qIExlbmd0aCBjb2RlcyAyNTcuLjI4NSBleHRyYSAqL1xuICAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE3LCAxNywgMTcsIDE3LCAxOCwgMTgsIDE4LCAxOCxcbiAgMTksIDE5LCAxOSwgMTksIDIwLCAyMCwgMjAsIDIwLCAyMSwgMjEsIDIxLCAyMSwgMTYsIDcyLCA3OFxuXTtcblxudmFyIGRiYXNlID0gWyAvKiBEaXN0YW5jZSBjb2RlcyAwLi4yOSBiYXNlICovXG4gIDEsIDIsIDMsIDQsIDUsIDcsIDksIDEzLCAxNywgMjUsIDMzLCA0OSwgNjUsIDk3LCAxMjksIDE5MyxcbiAgMjU3LCAzODUsIDUxMywgNzY5LCAxMDI1LCAxNTM3LCAyMDQ5LCAzMDczLCA0MDk3LCA2MTQ1LFxuICA4MTkzLCAxMjI4OSwgMTYzODUsIDI0NTc3LCAwLCAwXG5dO1xuXG52YXIgZGV4dCA9IFsgLyogRGlzdGFuY2UgY29kZXMgMC4uMjkgZXh0cmEgKi9cbiAgMTYsIDE2LCAxNiwgMTYsIDE3LCAxNywgMTgsIDE4LCAxOSwgMTksIDIwLCAyMCwgMjEsIDIxLCAyMiwgMjIsXG4gIDIzLCAyMywgMjQsIDI0LCAyNSwgMjUsIDI2LCAyNiwgMjcsIDI3LFxuICAyOCwgMjgsIDI5LCAyOSwgNjQsIDY0XG5dO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluZmxhdGVfdGFibGUodHlwZSwgbGVucywgbGVuc19pbmRleCwgY29kZXMsIHRhYmxlLCB0YWJsZV9pbmRleCwgd29yaywgb3B0cylcbntcbiAgdmFyIGJpdHMgPSBvcHRzLmJpdHM7XG4gICAgICAvL2hlcmUgPSBvcHRzLmhlcmU7IC8qIHRhYmxlIGVudHJ5IGZvciBkdXBsaWNhdGlvbiAqL1xuXG4gIHZhciBsZW4gPSAwOyAgICAgICAgICAgICAgIC8qIGEgY29kZSdzIGxlbmd0aCBpbiBiaXRzICovXG4gIHZhciBzeW0gPSAwOyAgICAgICAgICAgICAgIC8qIGluZGV4IG9mIGNvZGUgc3ltYm9scyAqL1xuICB2YXIgbWluID0gMCwgbWF4ID0gMDsgICAgICAgICAgLyogbWluaW11bSBhbmQgbWF4aW11bSBjb2RlIGxlbmd0aHMgKi9cbiAgdmFyIHJvb3QgPSAwOyAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGluZGV4IGJpdHMgZm9yIHJvb3QgdGFibGUgKi9cbiAgdmFyIGN1cnIgPSAwOyAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGluZGV4IGJpdHMgZm9yIGN1cnJlbnQgdGFibGUgKi9cbiAgdmFyIGRyb3AgPSAwOyAgICAgICAgICAgICAgLyogY29kZSBiaXRzIHRvIGRyb3AgZm9yIHN1Yi10YWJsZSAqL1xuICB2YXIgbGVmdCA9IDA7ICAgICAgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBwcmVmaXggY29kZXMgYXZhaWxhYmxlICovXG4gIHZhciB1c2VkID0gMDsgICAgICAgICAgICAgIC8qIGNvZGUgZW50cmllcyBpbiB0YWJsZSB1c2VkICovXG4gIHZhciBodWZmID0gMDsgICAgICAgICAgICAgIC8qIEh1ZmZtYW4gY29kZSAqL1xuICB2YXIgaW5jcjsgICAgICAgICAgICAgIC8qIGZvciBpbmNyZW1lbnRpbmcgY29kZSwgaW5kZXggKi9cbiAgdmFyIGZpbGw7ICAgICAgICAgICAgICAvKiBpbmRleCBmb3IgcmVwbGljYXRpbmcgZW50cmllcyAqL1xuICB2YXIgbG93OyAgICAgICAgICAgICAgIC8qIGxvdyBiaXRzIGZvciBjdXJyZW50IHJvb3QgZW50cnkgKi9cbiAgdmFyIG1hc2s7ICAgICAgICAgICAgICAvKiBtYXNrIGZvciBsb3cgcm9vdCBiaXRzICovXG4gIHZhciBuZXh0OyAgICAgICAgICAgICAvKiBuZXh0IGF2YWlsYWJsZSBzcGFjZSBpbiB0YWJsZSAqL1xuICB2YXIgYmFzZSA9IG51bGw7ICAgICAvKiBiYXNlIHZhbHVlIHRhYmxlIHRvIHVzZSAqL1xuICB2YXIgYmFzZV9pbmRleCA9IDA7XG4vLyAgdmFyIHNob2V4dHJhOyAgICAvKiBleHRyYSBiaXRzIHRhYmxlIHRvIHVzZSAqL1xuICB2YXIgZW5kOyAgICAgICAgICAgICAgICAgICAgLyogdXNlIGJhc2UgYW5kIGV4dHJhIGZvciBzeW1ib2wgPiBlbmQgKi9cbiAgdmFyIGNvdW50ID0gbmV3IHV0aWxzLkJ1ZjE2KE1BWEJJVFMgKyAxKTsgLy9bTUFYQklUUysxXTsgICAgLyogbnVtYmVyIG9mIGNvZGVzIG9mIGVhY2ggbGVuZ3RoICovXG4gIHZhciBvZmZzID0gbmV3IHV0aWxzLkJ1ZjE2KE1BWEJJVFMgKyAxKTsgLy9bTUFYQklUUysxXTsgICAgIC8qIG9mZnNldHMgaW4gdGFibGUgZm9yIGVhY2ggbGVuZ3RoICovXG4gIHZhciBleHRyYSA9IG51bGw7XG4gIHZhciBleHRyYV9pbmRleCA9IDA7XG5cbiAgdmFyIGhlcmVfYml0cywgaGVyZV9vcCwgaGVyZV92YWw7XG5cbiAgLypcbiAgIFByb2Nlc3MgYSBzZXQgb2YgY29kZSBsZW5ndGhzIHRvIGNyZWF0ZSBhIGNhbm9uaWNhbCBIdWZmbWFuIGNvZGUuICBUaGVcbiAgIGNvZGUgbGVuZ3RocyBhcmUgbGVuc1swLi5jb2Rlcy0xXS4gIEVhY2ggbGVuZ3RoIGNvcnJlc3BvbmRzIHRvIHRoZVxuICAgc3ltYm9scyAwLi5jb2Rlcy0xLiAgVGhlIEh1ZmZtYW4gY29kZSBpcyBnZW5lcmF0ZWQgYnkgZmlyc3Qgc29ydGluZyB0aGVcbiAgIHN5bWJvbHMgYnkgbGVuZ3RoIGZyb20gc2hvcnQgdG8gbG9uZywgYW5kIHJldGFpbmluZyB0aGUgc3ltYm9sIG9yZGVyXG4gICBmb3IgY29kZXMgd2l0aCBlcXVhbCBsZW5ndGhzLiAgVGhlbiB0aGUgY29kZSBzdGFydHMgd2l0aCBhbGwgemVybyBiaXRzXG4gICBmb3IgdGhlIGZpcnN0IGNvZGUgb2YgdGhlIHNob3J0ZXN0IGxlbmd0aCwgYW5kIHRoZSBjb2RlcyBhcmUgaW50ZWdlclxuICAgaW5jcmVtZW50cyBmb3IgdGhlIHNhbWUgbGVuZ3RoLCBhbmQgemVyb3MgYXJlIGFwcGVuZGVkIGFzIHRoZSBsZW5ndGhcbiAgIGluY3JlYXNlcy4gIEZvciB0aGUgZGVmbGF0ZSBmb3JtYXQsIHRoZXNlIGJpdHMgYXJlIHN0b3JlZCBiYWNrd2FyZHNcbiAgIGZyb20gdGhlaXIgbW9yZSBuYXR1cmFsIGludGVnZXIgaW5jcmVtZW50IG9yZGVyaW5nLCBhbmQgc28gd2hlbiB0aGVcbiAgIGRlY29kaW5nIHRhYmxlcyBhcmUgYnVpbHQgaW4gdGhlIGxhcmdlIGxvb3AgYmVsb3csIHRoZSBpbnRlZ2VyIGNvZGVzXG4gICBhcmUgaW5jcmVtZW50ZWQgYmFja3dhcmRzLlxuXG4gICBUaGlzIHJvdXRpbmUgYXNzdW1lcywgYnV0IGRvZXMgbm90IGNoZWNrLCB0aGF0IGFsbCBvZiB0aGUgZW50cmllcyBpblxuICAgbGVuc1tdIGFyZSBpbiB0aGUgcmFuZ2UgMC4uTUFYQklUUy4gIFRoZSBjYWxsZXIgbXVzdCBhc3N1cmUgdGhpcy5cbiAgIDEuLk1BWEJJVFMgaXMgaW50ZXJwcmV0ZWQgYXMgdGhhdCBjb2RlIGxlbmd0aC4gIHplcm8gbWVhbnMgdGhhdCB0aGF0XG4gICBzeW1ib2wgZG9lcyBub3Qgb2NjdXIgaW4gdGhpcyBjb2RlLlxuXG4gICBUaGUgY29kZXMgYXJlIHNvcnRlZCBieSBjb21wdXRpbmcgYSBjb3VudCBvZiBjb2RlcyBmb3IgZWFjaCBsZW5ndGgsXG4gICBjcmVhdGluZyBmcm9tIHRoYXQgYSB0YWJsZSBvZiBzdGFydGluZyBpbmRpY2VzIGZvciBlYWNoIGxlbmd0aCBpbiB0aGVcbiAgIHNvcnRlZCB0YWJsZSwgYW5kIHRoZW4gZW50ZXJpbmcgdGhlIHN5bWJvbHMgaW4gb3JkZXIgaW4gdGhlIHNvcnRlZFxuICAgdGFibGUuICBUaGUgc29ydGVkIHRhYmxlIGlzIHdvcmtbXSwgd2l0aCB0aGF0IHNwYWNlIGJlaW5nIHByb3ZpZGVkIGJ5XG4gICB0aGUgY2FsbGVyLlxuXG4gICBUaGUgbGVuZ3RoIGNvdW50cyBhcmUgdXNlZCBmb3Igb3RoZXIgcHVycG9zZXMgYXMgd2VsbCwgaS5lLiBmaW5kaW5nXG4gICB0aGUgbWluaW11bSBhbmQgbWF4aW11bSBsZW5ndGggY29kZXMsIGRldGVybWluaW5nIGlmIHRoZXJlIGFyZSBhbnlcbiAgIGNvZGVzIGF0IGFsbCwgY2hlY2tpbmcgZm9yIGEgdmFsaWQgc2V0IG9mIGxlbmd0aHMsIGFuZCBsb29raW5nIGFoZWFkXG4gICBhdCBsZW5ndGggY291bnRzIHRvIGRldGVybWluZSBzdWItdGFibGUgc2l6ZXMgd2hlbiBidWlsZGluZyB0aGVcbiAgIGRlY29kaW5nIHRhYmxlcy5cbiAgICovXG5cbiAgLyogYWNjdW11bGF0ZSBsZW5ndGhzIGZvciBjb2RlcyAoYXNzdW1lcyBsZW5zW10gYWxsIGluIDAuLk1BWEJJVFMpICovXG4gIGZvciAobGVuID0gMDsgbGVuIDw9IE1BWEJJVFM7IGxlbisrKSB7XG4gICAgY291bnRbbGVuXSA9IDA7XG4gIH1cbiAgZm9yIChzeW0gPSAwOyBzeW0gPCBjb2Rlczsgc3ltKyspIHtcbiAgICBjb3VudFtsZW5zW2xlbnNfaW5kZXggKyBzeW1dXSsrO1xuICB9XG5cbiAgLyogYm91bmQgY29kZSBsZW5ndGhzLCBmb3JjZSByb290IHRvIGJlIHdpdGhpbiBjb2RlIGxlbmd0aHMgKi9cbiAgcm9vdCA9IGJpdHM7XG4gIGZvciAobWF4ID0gTUFYQklUUzsgbWF4ID49IDE7IG1heC0tKSB7XG4gICAgaWYgKGNvdW50W21heF0gIT09IDApIHsgYnJlYWs7IH1cbiAgfVxuICBpZiAocm9vdCA+IG1heCkge1xuICAgIHJvb3QgPSBtYXg7XG4gIH1cbiAgaWYgKG1heCA9PT0gMCkgeyAgICAgICAgICAgICAgICAgICAgIC8qIG5vIHN5bWJvbHMgdG8gY29kZSBhdCBhbGwgKi9cbiAgICAvL3RhYmxlLm9wW29wdHMudGFibGVfaW5kZXhdID0gNjQ7ICAvL2hlcmUub3AgPSAodmFyIGNoYXIpNjQ7ICAgIC8qIGludmFsaWQgY29kZSBtYXJrZXIgKi9cbiAgICAvL3RhYmxlLmJpdHNbb3B0cy50YWJsZV9pbmRleF0gPSAxOyAgIC8vaGVyZS5iaXRzID0gKHZhciBjaGFyKTE7XG4gICAgLy90YWJsZS52YWxbb3B0cy50YWJsZV9pbmRleCsrXSA9IDA7ICAgLy9oZXJlLnZhbCA9ICh2YXIgc2hvcnQpMDtcbiAgICB0YWJsZVt0YWJsZV9pbmRleCsrXSA9ICgxIDw8IDI0KSB8ICg2NCA8PCAxNikgfCAwO1xuXG5cbiAgICAvL3RhYmxlLm9wW29wdHMudGFibGVfaW5kZXhdID0gNjQ7XG4gICAgLy90YWJsZS5iaXRzW29wdHMudGFibGVfaW5kZXhdID0gMTtcbiAgICAvL3RhYmxlLnZhbFtvcHRzLnRhYmxlX2luZGV4KytdID0gMDtcbiAgICB0YWJsZVt0YWJsZV9pbmRleCsrXSA9ICgxIDw8IDI0KSB8ICg2NCA8PCAxNikgfCAwO1xuXG4gICAgb3B0cy5iaXRzID0gMTtcbiAgICByZXR1cm4gMDsgICAgIC8qIG5vIHN5bWJvbHMsIGJ1dCB3YWl0IGZvciBkZWNvZGluZyB0byByZXBvcnQgZXJyb3IgKi9cbiAgfVxuICBmb3IgKG1pbiA9IDE7IG1pbiA8IG1heDsgbWluKyspIHtcbiAgICBpZiAoY291bnRbbWluXSAhPT0gMCkgeyBicmVhazsgfVxuICB9XG4gIGlmIChyb290IDwgbWluKSB7XG4gICAgcm9vdCA9IG1pbjtcbiAgfVxuXG4gIC8qIGNoZWNrIGZvciBhbiBvdmVyLXN1YnNjcmliZWQgb3IgaW5jb21wbGV0ZSBzZXQgb2YgbGVuZ3RocyAqL1xuICBsZWZ0ID0gMTtcbiAgZm9yIChsZW4gPSAxOyBsZW4gPD0gTUFYQklUUzsgbGVuKyspIHtcbiAgICBsZWZ0IDw8PSAxO1xuICAgIGxlZnQgLT0gY291bnRbbGVuXTtcbiAgICBpZiAobGVmdCA8IDApIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9ICAgICAgICAvKiBvdmVyLXN1YnNjcmliZWQgKi9cbiAgfVxuICBpZiAobGVmdCA+IDAgJiYgKHR5cGUgPT09IENPREVTIHx8IG1heCAhPT0gMSkpIHtcbiAgICByZXR1cm4gLTE7ICAgICAgICAgICAgICAgICAgICAgIC8qIGluY29tcGxldGUgc2V0ICovXG4gIH1cblxuICAvKiBnZW5lcmF0ZSBvZmZzZXRzIGludG8gc3ltYm9sIHRhYmxlIGZvciBlYWNoIGxlbmd0aCBmb3Igc29ydGluZyAqL1xuICBvZmZzWzFdID0gMDtcbiAgZm9yIChsZW4gPSAxOyBsZW4gPCBNQVhCSVRTOyBsZW4rKykge1xuICAgIG9mZnNbbGVuICsgMV0gPSBvZmZzW2xlbl0gKyBjb3VudFtsZW5dO1xuICB9XG5cbiAgLyogc29ydCBzeW1ib2xzIGJ5IGxlbmd0aCwgYnkgc3ltYm9sIG9yZGVyIHdpdGhpbiBlYWNoIGxlbmd0aCAqL1xuICBmb3IgKHN5bSA9IDA7IHN5bSA8IGNvZGVzOyBzeW0rKykge1xuICAgIGlmIChsZW5zW2xlbnNfaW5kZXggKyBzeW1dICE9PSAwKSB7XG4gICAgICB3b3JrW29mZnNbbGVuc1tsZW5zX2luZGV4ICsgc3ltXV0rK10gPSBzeW07XG4gICAgfVxuICB9XG5cbiAgLypcbiAgIENyZWF0ZSBhbmQgZmlsbCBpbiBkZWNvZGluZyB0YWJsZXMuICBJbiB0aGlzIGxvb3AsIHRoZSB0YWJsZSBiZWluZ1xuICAgZmlsbGVkIGlzIGF0IG5leHQgYW5kIGhhcyBjdXJyIGluZGV4IGJpdHMuICBUaGUgY29kZSBiZWluZyB1c2VkIGlzIGh1ZmZcbiAgIHdpdGggbGVuZ3RoIGxlbi4gIFRoYXQgY29kZSBpcyBjb252ZXJ0ZWQgdG8gYW4gaW5kZXggYnkgZHJvcHBpbmcgZHJvcFxuICAgYml0cyBvZmYgb2YgdGhlIGJvdHRvbS4gIEZvciBjb2RlcyB3aGVyZSBsZW4gaXMgbGVzcyB0aGFuIGRyb3AgKyBjdXJyLFxuICAgdGhvc2UgdG9wIGRyb3AgKyBjdXJyIC0gbGVuIGJpdHMgYXJlIGluY3JlbWVudGVkIHRocm91Z2ggYWxsIHZhbHVlcyB0b1xuICAgZmlsbCB0aGUgdGFibGUgd2l0aCByZXBsaWNhdGVkIGVudHJpZXMuXG5cbiAgIHJvb3QgaXMgdGhlIG51bWJlciBvZiBpbmRleCBiaXRzIGZvciB0aGUgcm9vdCB0YWJsZS4gIFdoZW4gbGVuIGV4Y2VlZHNcbiAgIHJvb3QsIHN1Yi10YWJsZXMgYXJlIGNyZWF0ZWQgcG9pbnRlZCB0byBieSB0aGUgcm9vdCBlbnRyeSB3aXRoIGFuIGluZGV4XG4gICBvZiB0aGUgbG93IHJvb3QgYml0cyBvZiBodWZmLiAgVGhpcyBpcyBzYXZlZCBpbiBsb3cgdG8gY2hlY2sgZm9yIHdoZW4gYVxuICAgbmV3IHN1Yi10YWJsZSBzaG91bGQgYmUgc3RhcnRlZC4gIGRyb3AgaXMgemVybyB3aGVuIHRoZSByb290IHRhYmxlIGlzXG4gICBiZWluZyBmaWxsZWQsIGFuZCBkcm9wIGlzIHJvb3Qgd2hlbiBzdWItdGFibGVzIGFyZSBiZWluZyBmaWxsZWQuXG5cbiAgIFdoZW4gYSBuZXcgc3ViLXRhYmxlIGlzIG5lZWRlZCwgaXQgaXMgbmVjZXNzYXJ5IHRvIGxvb2sgYWhlYWQgaW4gdGhlXG4gICBjb2RlIGxlbmd0aHMgdG8gZGV0ZXJtaW5lIHdoYXQgc2l6ZSBzdWItdGFibGUgaXMgbmVlZGVkLiAgVGhlIGxlbmd0aFxuICAgY291bnRzIGFyZSB1c2VkIGZvciB0aGlzLCBhbmQgc28gY291bnRbXSBpcyBkZWNyZW1lbnRlZCBhcyBjb2RlcyBhcmVcbiAgIGVudGVyZWQgaW4gdGhlIHRhYmxlcy5cblxuICAgdXNlZCBrZWVwcyB0cmFjayBvZiBob3cgbWFueSB0YWJsZSBlbnRyaWVzIGhhdmUgYmVlbiBhbGxvY2F0ZWQgZnJvbSB0aGVcbiAgIHByb3ZpZGVkICp0YWJsZSBzcGFjZS4gIEl0IGlzIGNoZWNrZWQgZm9yIExFTlMgYW5kIERJU1QgdGFibGVzIGFnYWluc3RcbiAgIHRoZSBjb25zdGFudHMgRU5PVUdIX0xFTlMgYW5kIEVOT1VHSF9ESVNUUyB0byBndWFyZCBhZ2FpbnN0IGNoYW5nZXMgaW5cbiAgIHRoZSBpbml0aWFsIHJvb3QgdGFibGUgc2l6ZSBjb25zdGFudHMuICBTZWUgdGhlIGNvbW1lbnRzIGluIGluZnRyZWVzLmhcbiAgIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuXG4gICBzeW0gaW5jcmVtZW50cyB0aHJvdWdoIGFsbCBzeW1ib2xzLCBhbmQgdGhlIGxvb3AgdGVybWluYXRlcyB3aGVuXG4gICBhbGwgY29kZXMgb2YgbGVuZ3RoIG1heCwgaS5lLiBhbGwgY29kZXMsIGhhdmUgYmVlbiBwcm9jZXNzZWQuICBUaGlzXG4gICByb3V0aW5lIHBlcm1pdHMgaW5jb21wbGV0ZSBjb2Rlcywgc28gYW5vdGhlciBsb29wIGFmdGVyIHRoaXMgb25lIGZpbGxzXG4gICBpbiB0aGUgcmVzdCBvZiB0aGUgZGVjb2RpbmcgdGFibGVzIHdpdGggaW52YWxpZCBjb2RlIG1hcmtlcnMuXG4gICAqL1xuXG4gIC8qIHNldCB1cCBmb3IgY29kZSB0eXBlICovXG4gIC8vIHBvb3IgbWFuIG9wdGltaXphdGlvbiAtIHVzZSBpZi1lbHNlIGluc3RlYWQgb2Ygc3dpdGNoLFxuICAvLyB0byBhdm9pZCBkZW9wdHMgaW4gb2xkIHY4XG4gIGlmICh0eXBlID09PSBDT0RFUykge1xuICAgIGJhc2UgPSBleHRyYSA9IHdvcms7ICAgIC8qIGR1bW15IHZhbHVlLS1ub3QgdXNlZCAqL1xuICAgIGVuZCA9IDE5O1xuXG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gTEVOUykge1xuICAgIGJhc2UgPSBsYmFzZTtcbiAgICBiYXNlX2luZGV4IC09IDI1NztcbiAgICBleHRyYSA9IGxleHQ7XG4gICAgZXh0cmFfaW5kZXggLT0gMjU3O1xuICAgIGVuZCA9IDI1NjtcblxuICB9IGVsc2UgeyAgICAgICAgICAgICAgICAgICAgLyogRElTVFMgKi9cbiAgICBiYXNlID0gZGJhc2U7XG4gICAgZXh0cmEgPSBkZXh0O1xuICAgIGVuZCA9IC0xO1xuICB9XG5cbiAgLyogaW5pdGlhbGl6ZSBvcHRzIGZvciBsb29wICovXG4gIGh1ZmYgPSAwOyAgICAgICAgICAgICAgICAgICAvKiBzdGFydGluZyBjb2RlICovXG4gIHN5bSA9IDA7ICAgICAgICAgICAgICAgICAgICAvKiBzdGFydGluZyBjb2RlIHN5bWJvbCAqL1xuICBsZW4gPSBtaW47ICAgICAgICAgICAgICAgICAgLyogc3RhcnRpbmcgY29kZSBsZW5ndGggKi9cbiAgbmV4dCA9IHRhYmxlX2luZGV4OyAgICAgICAgICAgICAgLyogY3VycmVudCB0YWJsZSB0byBmaWxsIGluICovXG4gIGN1cnIgPSByb290OyAgICAgICAgICAgICAgICAvKiBjdXJyZW50IHRhYmxlIGluZGV4IGJpdHMgKi9cbiAgZHJvcCA9IDA7ICAgICAgICAgICAgICAgICAgIC8qIGN1cnJlbnQgYml0cyB0byBkcm9wIGZyb20gY29kZSBmb3IgaW5kZXggKi9cbiAgbG93ID0gLTE7ICAgICAgICAgICAgICAgICAgIC8qIHRyaWdnZXIgbmV3IHN1Yi10YWJsZSB3aGVuIGxlbiA+IHJvb3QgKi9cbiAgdXNlZCA9IDEgPDwgcm9vdDsgICAgICAgICAgLyogdXNlIHJvb3QgdGFibGUgZW50cmllcyAqL1xuICBtYXNrID0gdXNlZCAtIDE7ICAgICAgICAgICAgLyogbWFzayBmb3IgY29tcGFyaW5nIGxvdyAqL1xuXG4gIC8qIGNoZWNrIGF2YWlsYWJsZSB0YWJsZSBzcGFjZSAqL1xuICBpZiAoKHR5cGUgPT09IExFTlMgJiYgdXNlZCA+IEVOT1VHSF9MRU5TKSB8fFxuICAgICh0eXBlID09PSBESVNUUyAmJiB1c2VkID4gRU5PVUdIX0RJU1RTKSkge1xuICAgIHJldHVybiAxO1xuICB9XG5cbiAgLyogcHJvY2VzcyBhbGwgY29kZXMgYW5kIG1ha2UgdGFibGUgZW50cmllcyAqL1xuICBmb3IgKDs7KSB7XG4gICAgLyogY3JlYXRlIHRhYmxlIGVudHJ5ICovXG4gICAgaGVyZV9iaXRzID0gbGVuIC0gZHJvcDtcbiAgICBpZiAod29ya1tzeW1dIDwgZW5kKSB7XG4gICAgICBoZXJlX29wID0gMDtcbiAgICAgIGhlcmVfdmFsID0gd29ya1tzeW1dO1xuICAgIH1cbiAgICBlbHNlIGlmICh3b3JrW3N5bV0gPiBlbmQpIHtcbiAgICAgIGhlcmVfb3AgPSBleHRyYVtleHRyYV9pbmRleCArIHdvcmtbc3ltXV07XG4gICAgICBoZXJlX3ZhbCA9IGJhc2VbYmFzZV9pbmRleCArIHdvcmtbc3ltXV07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgaGVyZV9vcCA9IDMyICsgNjQ7ICAgICAgICAgLyogZW5kIG9mIGJsb2NrICovXG4gICAgICBoZXJlX3ZhbCA9IDA7XG4gICAgfVxuXG4gICAgLyogcmVwbGljYXRlIGZvciB0aG9zZSBpbmRpY2VzIHdpdGggbG93IGxlbiBiaXRzIGVxdWFsIHRvIGh1ZmYgKi9cbiAgICBpbmNyID0gMSA8PCAobGVuIC0gZHJvcCk7XG4gICAgZmlsbCA9IDEgPDwgY3VycjtcbiAgICBtaW4gPSBmaWxsOyAgICAgICAgICAgICAgICAgLyogc2F2ZSBvZmZzZXQgdG8gbmV4dCB0YWJsZSAqL1xuICAgIGRvIHtcbiAgICAgIGZpbGwgLT0gaW5jcjtcbiAgICAgIHRhYmxlW25leHQgKyAoaHVmZiA+PiBkcm9wKSArIGZpbGxdID0gKGhlcmVfYml0cyA8PCAyNCkgfCAoaGVyZV9vcCA8PCAxNikgfCBoZXJlX3ZhbCB8MDtcbiAgICB9IHdoaWxlIChmaWxsICE9PSAwKTtcblxuICAgIC8qIGJhY2t3YXJkcyBpbmNyZW1lbnQgdGhlIGxlbi1iaXQgY29kZSBodWZmICovXG4gICAgaW5jciA9IDEgPDwgKGxlbiAtIDEpO1xuICAgIHdoaWxlIChodWZmICYgaW5jcikge1xuICAgICAgaW5jciA+Pj0gMTtcbiAgICB9XG4gICAgaWYgKGluY3IgIT09IDApIHtcbiAgICAgIGh1ZmYgJj0gaW5jciAtIDE7XG4gICAgICBodWZmICs9IGluY3I7XG4gICAgfSBlbHNlIHtcbiAgICAgIGh1ZmYgPSAwO1xuICAgIH1cblxuICAgIC8qIGdvIHRvIG5leHQgc3ltYm9sLCB1cGRhdGUgY291bnQsIGxlbiAqL1xuICAgIHN5bSsrO1xuICAgIGlmICgtLWNvdW50W2xlbl0gPT09IDApIHtcbiAgICAgIGlmIChsZW4gPT09IG1heCkgeyBicmVhazsgfVxuICAgICAgbGVuID0gbGVuc1tsZW5zX2luZGV4ICsgd29ya1tzeW1dXTtcbiAgICB9XG5cbiAgICAvKiBjcmVhdGUgbmV3IHN1Yi10YWJsZSBpZiBuZWVkZWQgKi9cbiAgICBpZiAobGVuID4gcm9vdCAmJiAoaHVmZiAmIG1hc2spICE9PSBsb3cpIHtcbiAgICAgIC8qIGlmIGZpcnN0IHRpbWUsIHRyYW5zaXRpb24gdG8gc3ViLXRhYmxlcyAqL1xuICAgICAgaWYgKGRyb3AgPT09IDApIHtcbiAgICAgICAgZHJvcCA9IHJvb3Q7XG4gICAgICB9XG5cbiAgICAgIC8qIGluY3JlbWVudCBwYXN0IGxhc3QgdGFibGUgKi9cbiAgICAgIG5leHQgKz0gbWluOyAgICAgICAgICAgIC8qIGhlcmUgbWluIGlzIDEgPDwgY3VyciAqL1xuXG4gICAgICAvKiBkZXRlcm1pbmUgbGVuZ3RoIG9mIG5leHQgdGFibGUgKi9cbiAgICAgIGN1cnIgPSBsZW4gLSBkcm9wO1xuICAgICAgbGVmdCA9IDEgPDwgY3VycjtcbiAgICAgIHdoaWxlIChjdXJyICsgZHJvcCA8IG1heCkge1xuICAgICAgICBsZWZ0IC09IGNvdW50W2N1cnIgKyBkcm9wXTtcbiAgICAgICAgaWYgKGxlZnQgPD0gMCkgeyBicmVhazsgfVxuICAgICAgICBjdXJyKys7XG4gICAgICAgIGxlZnQgPDw9IDE7XG4gICAgICB9XG5cbiAgICAgIC8qIGNoZWNrIGZvciBlbm91Z2ggc3BhY2UgKi9cbiAgICAgIHVzZWQgKz0gMSA8PCBjdXJyO1xuICAgICAgaWYgKCh0eXBlID09PSBMRU5TICYmIHVzZWQgPiBFTk9VR0hfTEVOUykgfHxcbiAgICAgICAgKHR5cGUgPT09IERJU1RTICYmIHVzZWQgPiBFTk9VR0hfRElTVFMpKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfVxuXG4gICAgICAvKiBwb2ludCBlbnRyeSBpbiByb290IHRhYmxlIHRvIHN1Yi10YWJsZSAqL1xuICAgICAgbG93ID0gaHVmZiAmIG1hc2s7XG4gICAgICAvKnRhYmxlLm9wW2xvd10gPSBjdXJyO1xuICAgICAgdGFibGUuYml0c1tsb3ddID0gcm9vdDtcbiAgICAgIHRhYmxlLnZhbFtsb3ddID0gbmV4dCAtIG9wdHMudGFibGVfaW5kZXg7Ki9cbiAgICAgIHRhYmxlW2xvd10gPSAocm9vdCA8PCAyNCkgfCAoY3VyciA8PCAxNikgfCAobmV4dCAtIHRhYmxlX2luZGV4KSB8MDtcbiAgICB9XG4gIH1cblxuICAvKiBmaWxsIGluIHJlbWFpbmluZyB0YWJsZSBlbnRyeSBpZiBjb2RlIGlzIGluY29tcGxldGUgKGd1YXJhbnRlZWQgdG8gaGF2ZVxuICAgYXQgbW9zdCBvbmUgcmVtYWluaW5nIGVudHJ5LCBzaW5jZSBpZiB0aGUgY29kZSBpcyBpbmNvbXBsZXRlLCB0aGVcbiAgIG1heGltdW0gY29kZSBsZW5ndGggdGhhdCB3YXMgYWxsb3dlZCB0byBnZXQgdGhpcyBmYXIgaXMgb25lIGJpdCkgKi9cbiAgaWYgKGh1ZmYgIT09IDApIHtcbiAgICAvL3RhYmxlLm9wW25leHQgKyBodWZmXSA9IDY0OyAgICAgICAgICAgIC8qIGludmFsaWQgY29kZSBtYXJrZXIgKi9cbiAgICAvL3RhYmxlLmJpdHNbbmV4dCArIGh1ZmZdID0gbGVuIC0gZHJvcDtcbiAgICAvL3RhYmxlLnZhbFtuZXh0ICsgaHVmZl0gPSAwO1xuICAgIHRhYmxlW25leHQgKyBodWZmXSA9ICgobGVuIC0gZHJvcCkgPDwgMjQpIHwgKDY0IDw8IDE2KSB8MDtcbiAgfVxuXG4gIC8qIHNldCByZXR1cm4gcGFyYW1ldGVycyAqL1xuICAvL29wdHMudGFibGVfaW5kZXggKz0gdXNlZDtcbiAgb3B0cy5iaXRzID0gcm9vdDtcbiAgcmV0dXJuIDA7XG59O1xuIl0sIm5hbWVzIjpbInV0aWxzIiwicmVxdWlyZSIsIk1BWEJJVFMiLCJFTk9VR0hfTEVOUyIsIkVOT1VHSF9ESVNUUyIsIkNPREVTIiwiTEVOUyIsIkRJU1RTIiwibGJhc2UiLCJsZXh0IiwiZGJhc2UiLCJkZXh0IiwibW9kdWxlIiwiZXhwb3J0cyIsImluZmxhdGVfdGFibGUiLCJ0eXBlIiwibGVucyIsImxlbnNfaW5kZXgiLCJjb2RlcyIsInRhYmxlIiwidGFibGVfaW5kZXgiLCJ3b3JrIiwib3B0cyIsImJpdHMiLCJsZW4iLCJzeW0iLCJtaW4iLCJtYXgiLCJyb290IiwiY3VyciIsImRyb3AiLCJsZWZ0IiwidXNlZCIsImh1ZmYiLCJpbmNyIiwiZmlsbCIsImxvdyIsIm1hc2siLCJuZXh0IiwiYmFzZSIsImJhc2VfaW5kZXgiLCJlbmQiLCJjb3VudCIsIkJ1ZjE2Iiwib2ZmcyIsImV4dHJhIiwiZXh0cmFfaW5kZXgiLCJoZXJlX2JpdHMiLCJoZXJlX29wIiwiaGVyZV92YWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/inftrees.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/messages.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/messages.js ***!
  \***************************************************************************/
/***/ ((module) => {

eval("\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nmodule.exports = {\n    2: \"need dictionary\",\n    /* Z_NEED_DICT       2  */ 1: \"stream end\",\n    /* Z_STREAM_END      1  */ 0: \"\",\n    /* Z_OK              0  */ \"-1\": \"file error\",\n    /* Z_ERRNO         (-1) */ \"-2\": \"stream error\",\n    /* Z_STREAM_ERROR  (-2) */ \"-3\": \"data error\",\n    /* Z_DATA_ERROR    (-3) */ \"-4\": \"insufficient memory\",\n    /* Z_MEM_ERROR     (-4) */ \"-5\": \"buffer error\",\n    /* Z_BUF_ERROR     (-5) */ \"-6\": \"incompatible version\" /* Z_VERSION_ERROR (-6) */ \n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHBkZi1saWIvdXBuZy9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9tZXNzYWdlcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLGdEQUFnRDtBQUNoRCxrREFBa0Q7QUFDbEQsRUFBRTtBQUNGLG9FQUFvRTtBQUNwRSx3RUFBd0U7QUFDeEUseUNBQXlDO0FBQ3pDLEVBQUU7QUFDRix3RUFBd0U7QUFDeEUseUVBQXlFO0FBQ3pFLGlEQUFpRDtBQUNqRCxFQUFFO0FBQ0YsMEVBQTBFO0FBQzFFLHlFQUF5RTtBQUN6RSwwRUFBMEU7QUFDMUUscUNBQXFDO0FBQ3JDLDZFQUE2RTtBQUM3RSxtREFBbUQ7QUFDbkQsNkVBQTZFO0FBRTdFQSxPQUFPQyxPQUFPLEdBQUc7SUFDZixHQUFRO0lBQXVCLHdCQUF3QixHQUN2RCxHQUFRO0lBQXVCLHdCQUF3QixHQUN2RCxHQUFRO0lBQXVCLHdCQUF3QixHQUN2RCxNQUFRO0lBQXVCLHdCQUF3QixHQUN2RCxNQUFRO0lBQXVCLHdCQUF3QixHQUN2RCxNQUFRO0lBQXVCLHdCQUF3QixHQUN2RCxNQUFRO0lBQXVCLHdCQUF3QixHQUN2RCxNQUFRO0lBQXVCLHdCQUF3QixHQUN2RCxNQUFRLHVCQUF1Qix3QkFBd0I7QUFDekQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaXZpbC1lbmdpbmVlcmluZy1wbGF0Zm9ybS8uL25vZGVfbW9kdWxlcy9AcGRmLWxpYi91cG5nL25vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL21lc3NhZ2VzLmpzP2E2ZGMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAyOiAgICAgICduZWVkIGRpY3Rpb25hcnknLCAgICAgLyogWl9ORUVEX0RJQ1QgICAgICAgMiAgKi9cbiAgMTogICAgICAnc3RyZWFtIGVuZCcsICAgICAgICAgIC8qIFpfU1RSRUFNX0VORCAgICAgIDEgICovXG4gIDA6ICAgICAgJycsICAgICAgICAgICAgICAgICAgICAvKiBaX09LICAgICAgICAgICAgICAwICAqL1xuICAnLTEnOiAgICdmaWxlIGVycm9yJywgICAgICAgICAgLyogWl9FUlJOTyAgICAgICAgICgtMSkgKi9cbiAgJy0yJzogICAnc3RyZWFtIGVycm9yJywgICAgICAgIC8qIFpfU1RSRUFNX0VSUk9SICAoLTIpICovXG4gICctMyc6ICAgJ2RhdGEgZXJyb3InLCAgICAgICAgICAvKiBaX0RBVEFfRVJST1IgICAgKC0zKSAqL1xuICAnLTQnOiAgICdpbnN1ZmZpY2llbnQgbWVtb3J5JywgLyogWl9NRU1fRVJST1IgICAgICgtNCkgKi9cbiAgJy01JzogICAnYnVmZmVyIGVycm9yJywgICAgICAgIC8qIFpfQlVGX0VSUk9SICAgICAoLTUpICovXG4gICctNic6ICAgJ2luY29tcGF0aWJsZSB2ZXJzaW9uJyAvKiBaX1ZFUlNJT05fRVJST1IgKC02KSAqL1xufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/messages.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/trees.js":
/*!************************************************************************!*\
  !*** ./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/trees.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n/* eslint-disable space-unary-ops */ var utils = __webpack_require__(/*! ../utils/common */ \"(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/utils/common.js\");\n/* Public constants ==========================================================*/ /* ===========================================================================*/ //var Z_FILTERED          = 1;\n//var Z_HUFFMAN_ONLY      = 2;\n//var Z_RLE               = 3;\nvar Z_FIXED = 4;\n//var Z_DEFAULT_STRATEGY  = 0;\n/* Possible values of the data_type field (though see inflate()) */ var Z_BINARY = 0;\nvar Z_TEXT = 1;\n//var Z_ASCII             = 1; // = Z_TEXT\nvar Z_UNKNOWN = 2;\n/*============================================================================*/ function zero(buf) {\n    var len = buf.length;\n    while(--len >= 0){\n        buf[len] = 0;\n    }\n}\n// From zutil.h\nvar STORED_BLOCK = 0;\nvar STATIC_TREES = 1;\nvar DYN_TREES = 2;\n/* The three kinds of block type */ var MIN_MATCH = 3;\nvar MAX_MATCH = 258;\n/* The minimum and maximum match lengths */ // From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */ var LENGTH_CODES = 29;\n/* number of length codes, not counting the special END_BLOCK code */ var LITERALS = 256;\n/* number of literal bytes 0..255 */ var L_CODES = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */ var D_CODES = 30;\n/* number of distance codes */ var BL_CODES = 19;\n/* number of codes used to transfer the bit lengths */ var HEAP_SIZE = 2 * L_CODES + 1;\n/* maximum heap size */ var MAX_BITS = 15;\n/* All codes must not exceed MAX_BITS bits */ var Buf_size = 16;\n/* size of bit buffer in bi_buf */ /* ===========================================================================\n * Constants\n */ var MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */ var END_BLOCK = 256;\n/* end of block literal code */ var REP_3_6 = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */ var REPZ_3_10 = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */ var REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */ /* eslint-disable comma-spacing,array-bracket-spacing */ var extra_lbits = /* extra bits for each length code */ [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    1,\n    1,\n    1,\n    1,\n    2,\n    2,\n    2,\n    2,\n    3,\n    3,\n    3,\n    3,\n    4,\n    4,\n    4,\n    4,\n    5,\n    5,\n    5,\n    5,\n    0\n];\nvar extra_dbits = /* extra bits for each distance code */ [\n    0,\n    0,\n    0,\n    0,\n    1,\n    1,\n    2,\n    2,\n    3,\n    3,\n    4,\n    4,\n    5,\n    5,\n    6,\n    6,\n    7,\n    7,\n    8,\n    8,\n    9,\n    9,\n    10,\n    10,\n    11,\n    11,\n    12,\n    12,\n    13,\n    13\n];\nvar extra_blbits = /* extra bits for each bit length code */ [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    2,\n    3,\n    7\n];\nvar bl_order = [\n    16,\n    17,\n    18,\n    0,\n    8,\n    7,\n    9,\n    6,\n    10,\n    5,\n    11,\n    4,\n    12,\n    3,\n    13,\n    2,\n    14,\n    1,\n    15\n];\n/* eslint-enable comma-spacing,array-bracket-spacing */ /* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */ /* ===========================================================================\n * Local data. These are initialized only once.\n */ // We pre-fill arrays with 0 to avoid uninitialized gaps\nvar DIST_CODE_LEN = 512; /* see definition of array dist_code below */ \n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nvar static_ltree = new Array((L_CODES + 2) * 2);\nzero(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */ var static_dtree = new Array(D_CODES * 2);\nzero(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */ var _dist_code = new Array(DIST_CODE_LEN);\nzero(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */ var _length_code = new Array(MAX_MATCH - MIN_MATCH + 1);\nzero(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */ var base_length = new Array(LENGTH_CODES);\nzero(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */ var base_dist = new Array(D_CODES);\nzero(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */ function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n    this.static_tree = static_tree; /* static tree or NULL */ \n    this.extra_bits = extra_bits; /* extra bits for each code or NULL */ \n    this.extra_base = extra_base; /* base index for extra_bits */ \n    this.elems = elems; /* max number of elements in the tree */ \n    this.max_length = max_length; /* max bit length for the codes */ \n    // show if `static_tree` has data or dummy - needed for monomorphic objects\n    this.has_stree = static_tree && static_tree.length;\n}\nvar static_l_desc;\nvar static_d_desc;\nvar static_bl_desc;\nfunction TreeDesc(dyn_tree, stat_desc) {\n    this.dyn_tree = dyn_tree; /* the dynamic tree */ \n    this.max_code = 0; /* largest code with non zero frequency */ \n    this.stat_desc = stat_desc; /* the corresponding static tree */ \n}\nfunction d_code(dist) {\n    return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n}\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */ function put_short(s, w) {\n    //    put_byte(s, (uch)((w) & 0xff));\n    //    put_byte(s, (uch)((ush)(w) >> 8));\n    s.pending_buf[s.pending++] = w & 0xff;\n    s.pending_buf[s.pending++] = w >>> 8 & 0xff;\n}\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */ function send_bits(s, value, length) {\n    if (s.bi_valid > Buf_size - length) {\n        s.bi_buf |= value << s.bi_valid & 0xffff;\n        put_short(s, s.bi_buf);\n        s.bi_buf = value >> Buf_size - s.bi_valid;\n        s.bi_valid += length - Buf_size;\n    } else {\n        s.bi_buf |= value << s.bi_valid & 0xffff;\n        s.bi_valid += length;\n    }\n}\nfunction send_code(s, c, tree) {\n    send_bits(s, tree[c * 2], tree[c * 2 + 1]);\n}\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */ function bi_reverse(code, len) {\n    var res = 0;\n    do {\n        res |= code & 1;\n        code >>>= 1;\n        res <<= 1;\n    }while (--len > 0);\n    return res >>> 1;\n}\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */ function bi_flush(s) {\n    if (s.bi_valid === 16) {\n        put_short(s, s.bi_buf);\n        s.bi_buf = 0;\n        s.bi_valid = 0;\n    } else if (s.bi_valid >= 8) {\n        s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n        s.bi_buf >>= 8;\n        s.bi_valid -= 8;\n    }\n}\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */ function gen_bitlen(s, desc) //    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n{\n    var tree = desc.dyn_tree;\n    var max_code = desc.max_code;\n    var stree = desc.stat_desc.static_tree;\n    var has_stree = desc.stat_desc.has_stree;\n    var extra = desc.stat_desc.extra_bits;\n    var base = desc.stat_desc.extra_base;\n    var max_length = desc.stat_desc.max_length;\n    var h; /* heap index */ \n    var n, m; /* iterate over the tree elements */ \n    var bits; /* bit length */ \n    var xbits; /* extra bits */ \n    var f; /* frequency */ \n    var overflow = 0; /* number of elements with bit length too large */ \n    for(bits = 0; bits <= MAX_BITS; bits++){\n        s.bl_count[bits] = 0;\n    }\n    /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */ tree[s.heap[s.heap_max] * 2 + 1] = 0; /* root of the heap */ \n    for(h = s.heap_max + 1; h < HEAP_SIZE; h++){\n        n = s.heap[h];\n        bits = tree[tree[n * 2 + 1] * 2 + 1] + 1;\n        if (bits > max_length) {\n            bits = max_length;\n            overflow++;\n        }\n        tree[n * 2 + 1] = bits;\n        /* We overwrite tree[n].Dad which is no longer needed */ if (n > max_code) {\n            continue;\n        } /* not a leaf node */ \n        s.bl_count[bits]++;\n        xbits = 0;\n        if (n >= base) {\n            xbits = extra[n - base];\n        }\n        f = tree[n * 2] /*.Freq*/ ;\n        s.opt_len += f * (bits + xbits);\n        if (has_stree) {\n            s.static_len += f * (stree[n * 2 + 1] + xbits);\n        }\n    }\n    if (overflow === 0) {\n        return;\n    }\n    // Trace((stderr,\"\\nbit length overflow\\n\"));\n    /* This happens for example on obj2 and pic of the Calgary corpus */ /* Find the first bit length which could increase: */ do {\n        bits = max_length - 1;\n        while(s.bl_count[bits] === 0){\n            bits--;\n        }\n        s.bl_count[bits]--; /* move one leaf down the tree */ \n        s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */ \n        s.bl_count[max_length]--;\n        /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */ overflow -= 2;\n    }while (overflow > 0);\n    /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */ for(bits = max_length; bits !== 0; bits--){\n        n = s.bl_count[bits];\n        while(n !== 0){\n            m = s.heap[--h];\n            if (m > max_code) {\n                continue;\n            }\n            if (tree[m * 2 + 1] !== bits) {\n                // Trace((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n                s.opt_len += (bits - tree[m * 2 + 1]) * tree[m * 2] /*.Freq*/ ;\n                tree[m * 2 + 1] = bits;\n            }\n            n--;\n        }\n    }\n}\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */ function gen_codes(tree, max_code, bl_count) //    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n{\n    var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */ \n    var code = 0; /* running code value */ \n    var bits; /* bit index */ \n    var n; /* code index */ \n    /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */ for(bits = 1; bits <= MAX_BITS; bits++){\n        next_code[bits] = code = code + bl_count[bits - 1] << 1;\n    }\n    /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */ //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n    //        \"inconsistent bit counts\");\n    //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n    for(n = 0; n <= max_code; n++){\n        var len = tree[n * 2 + 1] /*.Len*/ ;\n        if (len === 0) {\n            continue;\n        }\n        /* Now reverse the bits */ tree[n * 2] = bi_reverse(next_code[len]++, len);\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n    }\n}\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */ function tr_static_init() {\n    var n; /* iterates over tree elements */ \n    var bits; /* bit counter */ \n    var length; /* length value */ \n    var code; /* code value */ \n    var dist; /* distance index */ \n    var bl_count = new Array(MAX_BITS + 1);\n    /* number of codes at each bit length for an optimal tree */ // do check in _tr_init()\n    //if (static_init_done) return;\n    /* For some embedded targets, global variables are not initialized: */ /*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/ /* Initialize the mapping length (0..255) -> length code (0..28) */ length = 0;\n    for(code = 0; code < LENGTH_CODES - 1; code++){\n        base_length[code] = length;\n        for(n = 0; n < 1 << extra_lbits[code]; n++){\n            _length_code[length++] = code;\n        }\n    }\n    //Assert (length == 256, \"tr_static_init: length != 256\");\n    /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */ _length_code[length - 1] = code;\n    /* Initialize the mapping dist (0..32K) -> dist code (0..29) */ dist = 0;\n    for(code = 0; code < 16; code++){\n        base_dist[code] = dist;\n        for(n = 0; n < 1 << extra_dbits[code]; n++){\n            _dist_code[dist++] = code;\n        }\n    }\n    //Assert (dist == 256, \"tr_static_init: dist != 256\");\n    dist >>= 7; /* from now on, all distances are divided by 128 */ \n    for(; code < D_CODES; code++){\n        base_dist[code] = dist << 7;\n        for(n = 0; n < 1 << extra_dbits[code] - 7; n++){\n            _dist_code[256 + dist++] = code;\n        }\n    }\n    //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n    /* Construct the codes of the static literal tree */ for(bits = 0; bits <= MAX_BITS; bits++){\n        bl_count[bits] = 0;\n    }\n    n = 0;\n    while(n <= 143){\n        static_ltree[n * 2 + 1] = 8;\n        n++;\n        bl_count[8]++;\n    }\n    while(n <= 255){\n        static_ltree[n * 2 + 1] = 9;\n        n++;\n        bl_count[9]++;\n    }\n    while(n <= 279){\n        static_ltree[n * 2 + 1] = 7;\n        n++;\n        bl_count[7]++;\n    }\n    while(n <= 287){\n        static_ltree[n * 2 + 1] = 8;\n        n++;\n        bl_count[8]++;\n    }\n    /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */ gen_codes(static_ltree, L_CODES + 1, bl_count);\n    /* The static distance tree is trivial: */ for(n = 0; n < D_CODES; n++){\n        static_dtree[n * 2 + 1] = 5;\n        static_dtree[n * 2] = bi_reverse(n, 5);\n    }\n    // Now data ready and we can init static trees\n    static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n    static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES, MAX_BITS);\n    static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES, MAX_BL_BITS);\n//static_init_done = true;\n}\n/* ===========================================================================\n * Initialize a new block.\n */ function init_block(s) {\n    var n; /* iterates over tree elements */ \n    /* Initialize the trees. */ for(n = 0; n < L_CODES; n++){\n        s.dyn_ltree[n * 2] = 0;\n    }\n    for(n = 0; n < D_CODES; n++){\n        s.dyn_dtree[n * 2] = 0;\n    }\n    for(n = 0; n < BL_CODES; n++){\n        s.bl_tree[n * 2] = 0;\n    }\n    s.dyn_ltree[END_BLOCK * 2] = 1;\n    s.opt_len = s.static_len = 0;\n    s.last_lit = s.matches = 0;\n}\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */ function bi_windup(s) {\n    if (s.bi_valid > 8) {\n        put_short(s, s.bi_buf);\n    } else if (s.bi_valid > 0) {\n        //put_byte(s, (Byte)s->bi_buf);\n        s.pending_buf[s.pending++] = s.bi_buf;\n    }\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n}\n/* ===========================================================================\n * Copy a stored block, storing first the length and its\n * one's complement if requested.\n */ function copy_block(s, buf, len, header) //DeflateState *s;\n//charf    *buf;    /* the input data */\n//unsigned len;     /* its length */\n//int      header;  /* true if block header must be written */\n{\n    bi_windup(s); /* align on byte boundary */ \n    if (header) {\n        put_short(s, len);\n        put_short(s, ~len);\n    }\n    //  while (len--) {\n    //    put_byte(s, *buf++);\n    //  }\n    utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);\n    s.pending += len;\n}\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */ function smaller(tree, n, m, depth) {\n    var _n2 = n * 2;\n    var _m2 = m * 2;\n    return tree[_n2] < tree[_m2] || tree[_n2] === tree[_m2] && depth[n] <= depth[m];\n}\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */ function pqdownheap(s, tree, k) //    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n{\n    var v = s.heap[k];\n    var j = k << 1; /* left son of k */ \n    while(j <= s.heap_len){\n        /* Set j to the smallest of the two sons: */ if (j < s.heap_len && smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n            j++;\n        }\n        /* Exit if v is smaller than both sons */ if (smaller(tree, v, s.heap[j], s.depth)) {\n            break;\n        }\n        /* Exchange v with the smallest son */ s.heap[k] = s.heap[j];\n        k = j;\n        /* And continue down the tree, setting j to the left son of k */ j <<= 1;\n    }\n    s.heap[k] = v;\n}\n// inlined manually\n// var SMALLEST = 1;\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */ function compress_block(s, ltree, dtree) //    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n{\n    var dist; /* distance of matched string */ \n    var lc; /* match length or unmatched char (if dist == 0) */ \n    var lx = 0; /* running index in l_buf */ \n    var code; /* the code to send */ \n    var extra; /* number of extra bits to send */ \n    if (s.last_lit !== 0) {\n        do {\n            dist = s.pending_buf[s.d_buf + lx * 2] << 8 | s.pending_buf[s.d_buf + lx * 2 + 1];\n            lc = s.pending_buf[s.l_buf + lx];\n            lx++;\n            if (dist === 0) {\n                send_code(s, lc, ltree); /* send a literal byte */ \n            //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n            } else {\n                /* Here, lc is the match length - MIN_MATCH */ code = _length_code[lc];\n                send_code(s, code + LITERALS + 1, ltree); /* send the length code */ \n                extra = extra_lbits[code];\n                if (extra !== 0) {\n                    lc -= base_length[code];\n                    send_bits(s, lc, extra); /* send the extra length bits */ \n                }\n                dist--; /* dist is now the match distance - 1 */ \n                code = d_code(dist);\n                //Assert (code < D_CODES, \"bad d_code\");\n                send_code(s, code, dtree); /* send the distance code */ \n                extra = extra_dbits[code];\n                if (extra !== 0) {\n                    dist -= base_dist[code];\n                    send_bits(s, dist, extra); /* send the extra distance bits */ \n                }\n            } /* literal or match pair ? */ \n        /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */ //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,\n        //       \"pendingBuf overflow\");\n        }while (lx < s.last_lit);\n    }\n    send_code(s, END_BLOCK, ltree);\n}\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */ function build_tree(s, desc) //    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n{\n    var tree = desc.dyn_tree;\n    var stree = desc.stat_desc.static_tree;\n    var has_stree = desc.stat_desc.has_stree;\n    var elems = desc.stat_desc.elems;\n    var n, m; /* iterate over heap elements */ \n    var max_code = -1; /* largest code with non zero frequency */ \n    var node; /* new node being created */ \n    /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */ s.heap_len = 0;\n    s.heap_max = HEAP_SIZE;\n    for(n = 0; n < elems; n++){\n        if (tree[n * 2] !== 0) {\n            s.heap[++s.heap_len] = max_code = n;\n            s.depth[n] = 0;\n        } else {\n            tree[n * 2 + 1] = 0;\n        }\n    }\n    /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */ while(s.heap_len < 2){\n        node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;\n        tree[node * 2] = 1;\n        s.depth[node] = 0;\n        s.opt_len--;\n        if (has_stree) {\n            s.static_len -= stree[node * 2 + 1] /*.Len*/ ;\n        }\n    /* node is 0 or 1 so it does not have extra bits */ }\n    desc.max_code = max_code;\n    /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */ for(n = s.heap_len >> 1 /*int /2*/ ; n >= 1; n--){\n        pqdownheap(s, tree, n);\n    }\n    /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */ node = elems; /* next internal node of the tree */ \n    do {\n        //pqremove(s, tree, n);  /* n = node of least frequency */\n        /*** pqremove ***/ n = s.heap[1 /*SMALLEST*/ ];\n        s.heap[1 /*SMALLEST*/ ] = s.heap[s.heap_len--];\n        pqdownheap(s, tree, 1 /*SMALLEST*/ );\n        /***/ m = s.heap[1 /*SMALLEST*/ ]; /* m = node of next least frequency */ \n        s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */ \n        s.heap[--s.heap_max] = m;\n        /* Create a new node father of n and m */ tree[node * 2] = tree[n * 2] + tree[m * 2] /*.Freq*/ ;\n        s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n        tree[n * 2 + 1] = tree[m * 2 + 1] = node;\n        /* and insert the new node in the heap */ s.heap[1 /*SMALLEST*/ ] = node++;\n        pqdownheap(s, tree, 1 /*SMALLEST*/ );\n    }while (s.heap_len >= 2);\n    s.heap[--s.heap_max] = s.heap[1 /*SMALLEST*/ ];\n    /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */ gen_bitlen(s, desc);\n    /* The field len is now set, we can generate the bit codes */ gen_codes(tree, max_code, s.bl_count);\n}\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */ function scan_tree(s, tree, max_code) //    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n{\n    var n; /* iterates over all tree elements */ \n    var prevlen = -1; /* last emitted length */ \n    var curlen; /* length of current code */ \n    var nextlen = tree[0 * 2 + 1] /*.Len*/ ; /* length of next code */ \n    var count = 0; /* repeat count of the current code */ \n    var max_count = 7; /* max repeat count */ \n    var min_count = 4; /* min repeat count */ \n    if (nextlen === 0) {\n        max_count = 138;\n        min_count = 3;\n    }\n    tree[(max_code + 1) * 2 + 1] = 0xffff; /* guard */ \n    for(n = 0; n <= max_code; n++){\n        curlen = nextlen;\n        nextlen = tree[(n + 1) * 2 + 1] /*.Len*/ ;\n        if (++count < max_count && curlen === nextlen) {\n            continue;\n        } else if (count < min_count) {\n            s.bl_tree[curlen * 2] += count;\n        } else if (curlen !== 0) {\n            if (curlen !== prevlen) {\n                s.bl_tree[curlen * 2]++;\n            }\n            s.bl_tree[REP_3_6 * 2]++;\n        } else if (count <= 10) {\n            s.bl_tree[REPZ_3_10 * 2]++;\n        } else {\n            s.bl_tree[REPZ_11_138 * 2]++;\n        }\n        count = 0;\n        prevlen = curlen;\n        if (nextlen === 0) {\n            max_count = 138;\n            min_count = 3;\n        } else if (curlen === nextlen) {\n            max_count = 6;\n            min_count = 3;\n        } else {\n            max_count = 7;\n            min_count = 4;\n        }\n    }\n}\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */ function send_tree(s, tree, max_code) //    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n{\n    var n; /* iterates over all tree elements */ \n    var prevlen = -1; /* last emitted length */ \n    var curlen; /* length of current code */ \n    var nextlen = tree[0 * 2 + 1] /*.Len*/ ; /* length of next code */ \n    var count = 0; /* repeat count of the current code */ \n    var max_count = 7; /* max repeat count */ \n    var min_count = 4; /* min repeat count */ \n    /* tree[max_code+1].Len = -1; */ /* guard already set */ if (nextlen === 0) {\n        max_count = 138;\n        min_count = 3;\n    }\n    for(n = 0; n <= max_code; n++){\n        curlen = nextlen;\n        nextlen = tree[(n + 1) * 2 + 1] /*.Len*/ ;\n        if (++count < max_count && curlen === nextlen) {\n            continue;\n        } else if (count < min_count) {\n            do {\n                send_code(s, curlen, s.bl_tree);\n            }while (--count !== 0);\n        } else if (curlen !== 0) {\n            if (curlen !== prevlen) {\n                send_code(s, curlen, s.bl_tree);\n                count--;\n            }\n            //Assert(count >= 3 && count <= 6, \" 3_6?\");\n            send_code(s, REP_3_6, s.bl_tree);\n            send_bits(s, count - 3, 2);\n        } else if (count <= 10) {\n            send_code(s, REPZ_3_10, s.bl_tree);\n            send_bits(s, count - 3, 3);\n        } else {\n            send_code(s, REPZ_11_138, s.bl_tree);\n            send_bits(s, count - 11, 7);\n        }\n        count = 0;\n        prevlen = curlen;\n        if (nextlen === 0) {\n            max_count = 138;\n            min_count = 3;\n        } else if (curlen === nextlen) {\n            max_count = 6;\n            min_count = 3;\n        } else {\n            max_count = 7;\n            min_count = 4;\n        }\n    }\n}\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */ function build_bl_tree(s) {\n    var max_blindex; /* index of last bit length code of non zero freq */ \n    /* Determine the bit length frequencies for literal and distance trees */ scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n    scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n    /* Build the bit length tree: */ build_tree(s, s.bl_desc);\n    /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */ /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */ for(max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--){\n        if (s.bl_tree[bl_order[max_blindex] * 2 + 1] !== 0) {\n            break;\n        }\n    }\n    /* Update opt_len to include the bit length tree and counts */ s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n    //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n    //        s->opt_len, s->static_len));\n    return max_blindex;\n}\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */ function send_all_trees(s, lcodes, dcodes, blcodes) //    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n{\n    var rank; /* index in bl_order */ \n    //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n    //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n    //        \"too many codes\");\n    //Tracev((stderr, \"\\nbl counts: \"));\n    send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */ \n    send_bits(s, dcodes - 1, 5);\n    send_bits(s, blcodes - 4, 4); /* not -3 as stated in appnote.txt */ \n    for(rank = 0; rank < blcodes; rank++){\n        //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n        send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1], 3);\n    }\n    //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n    send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */ \n    //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n    send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */ \n//Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n}\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"black list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"white list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */ function detect_data_type(s) {\n    /* black_mask is the bit mask of black-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */ var black_mask = 0xf3ffc07f;\n    var n;\n    /* Check for non-textual (\"black-listed\") bytes. */ for(n = 0; n <= 31; n++, black_mask >>>= 1){\n        if (black_mask & 1 && s.dyn_ltree[n * 2] !== 0) {\n            return Z_BINARY;\n        }\n    }\n    /* Check for textual (\"white-listed\") bytes. */ if (s.dyn_ltree[9 * 2] !== 0 || s.dyn_ltree[10 * 2] !== 0 || s.dyn_ltree[13 * 2] !== 0) {\n        return Z_TEXT;\n    }\n    for(n = 32; n < LITERALS; n++){\n        if (s.dyn_ltree[n * 2] !== 0) {\n            return Z_TEXT;\n        }\n    }\n    /* There are no \"black-listed\" or \"white-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */ return Z_BINARY;\n}\nvar static_init_done = false;\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */ function _tr_init(s) {\n    if (!static_init_done) {\n        tr_static_init();\n        static_init_done = true;\n    }\n    s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);\n    s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);\n    s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n    /* Initialize the first block of the first file: */ init_block(s);\n}\n/* ===========================================================================\n * Send a stored block\n */ function _tr_stored_block(s, buf, stored_len, last) //DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n    send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3); /* send block type */ \n    copy_block(s, buf, stored_len, true); /* with header */ \n}\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */ function _tr_align(s) {\n    send_bits(s, STATIC_TREES << 1, 3);\n    send_code(s, END_BLOCK, static_ltree);\n    bi_flush(s);\n}\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and output the encoded block to the zip file.\n */ function _tr_flush_block(s, buf, stored_len, last) //DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n    var opt_lenb, static_lenb; /* opt_len and static_len in bytes */ \n    var max_blindex = 0; /* index of last bit length code of non zero freq */ \n    /* Build the Huffman trees unless a stored block is forced */ if (s.level > 0) {\n        /* Check if the file is binary or text */ if (s.strm.data_type === Z_UNKNOWN) {\n            s.strm.data_type = detect_data_type(s);\n        }\n        /* Construct the literal and distance trees */ build_tree(s, s.l_desc);\n        // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n        //        s->static_len));\n        build_tree(s, s.d_desc);\n        // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n        //        s->static_len));\n        /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */ /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */ max_blindex = build_bl_tree(s);\n        /* Determine the best encoding. Compute the block lengths in bytes. */ opt_lenb = s.opt_len + 3 + 7 >>> 3;\n        static_lenb = s.static_len + 3 + 7 >>> 3;\n        // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n        //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n        //        s->last_lit));\n        if (static_lenb <= opt_lenb) {\n            opt_lenb = static_lenb;\n        }\n    } else {\n        // Assert(buf != (char*)0, \"lost buf\");\n        opt_lenb = static_lenb = stored_len + 5; /* force a stored block */ \n    }\n    if (stored_len + 4 <= opt_lenb && buf !== -1) {\n        /* 4: two words for the lengths */ /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */ _tr_stored_block(s, buf, stored_len, last);\n    } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {\n        send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n        compress_block(s, static_ltree, static_dtree);\n    } else {\n        send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n        send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n        compress_block(s, s.dyn_ltree, s.dyn_dtree);\n    }\n    // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n    /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */ init_block(s);\n    if (last) {\n        bi_windup(s);\n    }\n// Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n//       s->compressed_len-7*last));\n}\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */ function _tr_tally(s, dist, lc) //    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n{\n    //var out_length, in_length, dcode;\n    s.pending_buf[s.d_buf + s.last_lit * 2] = dist >>> 8 & 0xff;\n    s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;\n    s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;\n    s.last_lit++;\n    if (dist === 0) {\n        /* lc is the unmatched char */ s.dyn_ltree[lc * 2]++;\n    } else {\n        s.matches++;\n        /* Here, lc is the match length - MIN_MATCH */ dist--; /* dist = match distance - 1 */ \n        //Assert((ush)dist < (ush)MAX_DIST(s) &&\n        //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n        //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n        s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]++;\n        s.dyn_dtree[d_code(dist) * 2]++;\n    }\n    // (!) This block is disabled in zlib defaults,\n    // don't enable it for binary compatibility\n    //#ifdef TRUNCATE_BLOCK\n    //  /* Try to guess if it is profitable to stop the current block here */\n    //  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {\n    //    /* Compute an upper bound for the compressed length */\n    //    out_length = s.last_lit*8;\n    //    in_length = s.strstart - s.block_start;\n    //\n    //    for (dcode = 0; dcode < D_CODES; dcode++) {\n    //      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);\n    //    }\n    //    out_length >>>= 3;\n    //    //Tracev((stderr,\"\\nlast_lit %u, in %ld, out ~%ld(%ld%%) \",\n    //    //       s->last_lit, in_length, out_length,\n    //    //       100L - out_length*100L/in_length));\n    //    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {\n    //      return true;\n    //    }\n    //  }\n    //#endif\n    return s.last_lit === s.lit_bufsize - 1;\n/* We avoid equality with lit_bufsize because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */ }\nexports._tr_init = _tr_init;\nexports._tr_stored_block = _tr_stored_block;\nexports._tr_flush_block = _tr_flush_block;\nexports._tr_tally = _tr_tally;\nexports._tr_align = _tr_align;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHBkZi1saWIvdXBuZy9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi90cmVlcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLGdEQUFnRDtBQUNoRCxrREFBa0Q7QUFDbEQsRUFBRTtBQUNGLG9FQUFvRTtBQUNwRSx3RUFBd0U7QUFDeEUseUNBQXlDO0FBQ3pDLEVBQUU7QUFDRix3RUFBd0U7QUFDeEUseUVBQXlFO0FBQ3pFLGlEQUFpRDtBQUNqRCxFQUFFO0FBQ0YsMEVBQTBFO0FBQzFFLHlFQUF5RTtBQUN6RSwwRUFBMEU7QUFDMUUscUNBQXFDO0FBQ3JDLDZFQUE2RTtBQUM3RSxtREFBbUQ7QUFDbkQsNkVBQTZFO0FBRTdFLGtDQUFrQyxHQUVsQyxJQUFJQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUVwQiw4RUFBOEUsR0FDOUUsOEVBQThFLEdBRzlFLDhCQUE4QjtBQUM5Qiw4QkFBOEI7QUFDOUIsOEJBQThCO0FBQzlCLElBQUlDLFVBQXdCO0FBQzVCLDhCQUE4QjtBQUU5QixpRUFBaUUsR0FDakUsSUFBSUMsV0FBd0I7QUFDNUIsSUFBSUMsU0FBd0I7QUFDNUIsMENBQTBDO0FBQzFDLElBQUlDLFlBQXdCO0FBRTVCLDhFQUE4RSxHQUc5RSxTQUFTQyxLQUFLQyxHQUFHO0lBQUksSUFBSUMsTUFBTUQsSUFBSUUsTUFBTTtJQUFFLE1BQU8sRUFBRUQsT0FBTyxFQUFHO1FBQUVELEdBQUcsQ0FBQ0MsSUFBSSxHQUFHO0lBQUc7QUFBRTtBQUVoRixlQUFlO0FBRWYsSUFBSUUsZUFBZTtBQUNuQixJQUFJQyxlQUFlO0FBQ25CLElBQUlDLFlBQWU7QUFDbkIsaUNBQWlDLEdBRWpDLElBQUlDLFlBQWU7QUFDbkIsSUFBSUMsWUFBZTtBQUNuQix5Q0FBeUMsR0FFekMsaUJBQWlCO0FBQ2pCOztDQUVDLEdBRUQsSUFBSUMsZUFBZ0I7QUFDcEIsbUVBQW1FLEdBRW5FLElBQUlDLFdBQWdCO0FBQ3BCLGtDQUFrQyxHQUVsQyxJQUFJQyxVQUFnQkQsV0FBVyxJQUFJRDtBQUNuQyxtRUFBbUUsR0FFbkUsSUFBSUcsVUFBZ0I7QUFDcEIsNEJBQTRCLEdBRTVCLElBQUlDLFdBQWdCO0FBQ3BCLG9EQUFvRCxHQUVwRCxJQUFJQyxZQUFnQixJQUFJSCxVQUFVO0FBQ2xDLHFCQUFxQixHQUVyQixJQUFJSSxXQUFnQjtBQUNwQiwyQ0FBMkMsR0FFM0MsSUFBSUMsV0FBZ0I7QUFDcEIsZ0NBQWdDLEdBR2hDOztDQUVDLEdBRUQsSUFBSUMsY0FBYztBQUNsQixxREFBcUQsR0FFckQsSUFBSUMsWUFBYztBQUNsQiw2QkFBNkIsR0FFN0IsSUFBSUMsVUFBYztBQUNsQixpRUFBaUUsR0FFakUsSUFBSUMsWUFBYztBQUNsQiw2REFBNkQsR0FFN0QsSUFBSUMsY0FBYztBQUNsQiwrREFBK0QsR0FFL0Qsc0RBQXNELEdBQ3RELElBQUlDLGNBQWdCLG1DQUFtQyxHQUNyRDtJQUFDO0lBQUU7SUFBRTtJQUFFO0lBQUU7SUFBRTtJQUFFO0lBQUU7SUFBRTtJQUFFO0lBQUU7SUFBRTtJQUFFO0lBQUU7SUFBRTtJQUFFO0lBQUU7SUFBRTtJQUFFO0lBQUU7SUFBRTtJQUFFO0lBQUU7SUFBRTtJQUFFO0lBQUU7SUFBRTtJQUFFO0lBQUU7Q0FBRTtBQUU3RCxJQUFJQyxjQUFnQixxQ0FBcUMsR0FDdkQ7SUFBQztJQUFFO0lBQUU7SUFBRTtJQUFFO0lBQUU7SUFBRTtJQUFFO0lBQUU7SUFBRTtJQUFFO0lBQUU7SUFBRTtJQUFFO0lBQUU7SUFBRTtJQUFFO0lBQUU7SUFBRTtJQUFFO0lBQUU7SUFBRTtJQUFFO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7Q0FBRztBQUV2RSxJQUFJQyxlQUFnQix1Q0FBdUMsR0FDekQ7SUFBQztJQUFFO0lBQUU7SUFBRTtJQUFFO0lBQUU7SUFBRTtJQUFFO0lBQUU7SUFBRTtJQUFFO0lBQUU7SUFBRTtJQUFFO0lBQUU7SUFBRTtJQUFFO0lBQUU7SUFBRTtDQUFFO0FBRXpDLElBQUlDLFdBQ0Y7SUFBQztJQUFHO0lBQUc7SUFBRztJQUFFO0lBQUU7SUFBRTtJQUFFO0lBQUU7SUFBRztJQUFFO0lBQUc7SUFBRTtJQUFHO0lBQUU7SUFBRztJQUFFO0lBQUc7SUFBRTtDQUFHO0FBQ2xELHFEQUFxRCxHQUVyRDs7Q0FFQyxHQUVEOztDQUVDLEdBRUQsd0RBQXdEO0FBRXhELElBQUlDLGdCQUFnQixLQUFLLDJDQUEyQztBQUVwRSxvRUFBb0U7QUFDcEUsSUFBSUMsZUFBZ0IsSUFBSUMsTUFBTSxDQUFDakIsVUFBVSxLQUFLO0FBQzlDWCxLQUFLMkI7QUFDTDs7OztDQUlDLEdBRUQsSUFBSUUsZUFBZ0IsSUFBSUQsTUFBTWhCLFVBQVU7QUFDeENaLEtBQUs2QjtBQUNMOztDQUVDLEdBRUQsSUFBSUMsYUFBZ0IsSUFBSUYsTUFBTUY7QUFDOUIxQixLQUFLOEI7QUFDTDs7O0NBR0MsR0FFRCxJQUFJQyxlQUFnQixJQUFJSCxNQUFNcEIsWUFBWUQsWUFBWTtBQUN0RFAsS0FBSytCO0FBQ0wsaUVBQWlFLEdBRWpFLElBQUlDLGNBQWdCLElBQUlKLE1BQU1uQjtBQUM5QlQsS0FBS2dDO0FBQ0wseURBQXlELEdBRXpELElBQUlDLFlBQWdCLElBQUlMLE1BQU1oQjtBQUM5QlosS0FBS2lDO0FBQ0wsK0RBQStELEdBRy9ELFNBQVNDLGVBQWVDLFdBQVcsRUFBRUMsVUFBVSxFQUFFQyxVQUFVLEVBQUVDLEtBQUssRUFBRUMsVUFBVTtJQUU1RSxJQUFJLENBQUNKLFdBQVcsR0FBSUEsYUFBYyx1QkFBdUI7SUFDekQsSUFBSSxDQUFDQyxVQUFVLEdBQUtBLFlBQWMsb0NBQW9DO0lBQ3RFLElBQUksQ0FBQ0MsVUFBVSxHQUFLQSxZQUFjLDZCQUE2QjtJQUMvRCxJQUFJLENBQUNDLEtBQUssR0FBVUEsT0FBYyxzQ0FBc0M7SUFDeEUsSUFBSSxDQUFDQyxVQUFVLEdBQUtBLFlBQWMsZ0NBQWdDO0lBRWxFLDJFQUEyRTtJQUMzRSxJQUFJLENBQUNDLFNBQVMsR0FBTUwsZUFBZUEsWUFBWWhDLE1BQU07QUFDdkQ7QUFHQSxJQUFJc0M7QUFDSixJQUFJQztBQUNKLElBQUlDO0FBR0osU0FBU0MsU0FBU0MsUUFBUSxFQUFFQyxTQUFTO0lBQ25DLElBQUksQ0FBQ0QsUUFBUSxHQUFHQSxVQUFjLG9CQUFvQjtJQUNsRCxJQUFJLENBQUNFLFFBQVEsR0FBRyxHQUFjLHdDQUF3QztJQUN0RSxJQUFJLENBQUNELFNBQVMsR0FBR0EsV0FBYSxpQ0FBaUM7QUFDakU7QUFJQSxTQUFTRSxPQUFPQyxJQUFJO0lBQ2xCLE9BQU9BLE9BQU8sTUFBTW5CLFVBQVUsQ0FBQ21CLEtBQUssR0FBR25CLFVBQVUsQ0FBQyxNQUFPbUIsQ0FBQUEsU0FBUyxHQUFHO0FBQ3ZFO0FBR0E7OztDQUdDLEdBQ0QsU0FBU0MsVUFBVUMsQ0FBQyxFQUFFQyxDQUFDO0lBQ3ZCLHFDQUFxQztJQUNyQyx3Q0FBd0M7SUFDdENELEVBQUVFLFdBQVcsQ0FBQ0YsRUFBRUcsT0FBTyxHQUFHLEdBQUcsSUFBTTtJQUNuQ0gsRUFBRUUsV0FBVyxDQUFDRixFQUFFRyxPQUFPLEdBQUcsR0FBRyxNQUFPLElBQUs7QUFDM0M7QUFHQTs7O0NBR0MsR0FDRCxTQUFTQyxVQUFVSixDQUFDLEVBQUVLLEtBQUssRUFBRXJELE1BQU07SUFDakMsSUFBSWdELEVBQUVNLFFBQVEsR0FBSXpDLFdBQVdiLFFBQVM7UUFDcENnRCxFQUFFTyxNQUFNLElBQUksU0FBVVAsRUFBRU0sUUFBUSxHQUFJO1FBQ3BDUCxVQUFVQyxHQUFHQSxFQUFFTyxNQUFNO1FBQ3JCUCxFQUFFTyxNQUFNLEdBQUdGLFNBQVV4QyxXQUFXbUMsRUFBRU0sUUFBUTtRQUMxQ04sRUFBRU0sUUFBUSxJQUFJdEQsU0FBU2E7SUFDekIsT0FBTztRQUNMbUMsRUFBRU8sTUFBTSxJQUFJLFNBQVVQLEVBQUVNLFFBQVEsR0FBSTtRQUNwQ04sRUFBRU0sUUFBUSxJQUFJdEQ7SUFDaEI7QUFDRjtBQUdBLFNBQVN3RCxVQUFVUixDQUFDLEVBQUVTLENBQUMsRUFBRUMsSUFBSTtJQUMzQk4sVUFBVUosR0FBR1UsSUFBSSxDQUFDRCxJQUFJLEVBQUUsRUFBV0MsSUFBSSxDQUFDRCxJQUFJLElBQUksRUFBRTtBQUNwRDtBQUdBOzs7O0NBSUMsR0FDRCxTQUFTRSxXQUFXQyxJQUFJLEVBQUU3RCxHQUFHO0lBQzNCLElBQUk4RCxNQUFNO0lBQ1YsR0FBRztRQUNEQSxPQUFPRCxPQUFPO1FBQ2RBLFVBQVU7UUFDVkMsUUFBUTtJQUNWLFFBQVMsRUFBRTlELE1BQU0sR0FBRztJQUNwQixPQUFPOEQsUUFBUTtBQUNqQjtBQUdBOztDQUVDLEdBQ0QsU0FBU0MsU0FBU2QsQ0FBQztJQUNqQixJQUFJQSxFQUFFTSxRQUFRLEtBQUssSUFBSTtRQUNyQlAsVUFBVUMsR0FBR0EsRUFBRU8sTUFBTTtRQUNyQlAsRUFBRU8sTUFBTSxHQUFHO1FBQ1hQLEVBQUVNLFFBQVEsR0FBRztJQUVmLE9BQU8sSUFBSU4sRUFBRU0sUUFBUSxJQUFJLEdBQUc7UUFDMUJOLEVBQUVFLFdBQVcsQ0FBQ0YsRUFBRUcsT0FBTyxHQUFHLEdBQUdILEVBQUVPLE1BQU0sR0FBRztRQUN4Q1AsRUFBRU8sTUFBTSxLQUFLO1FBQ2JQLEVBQUVNLFFBQVEsSUFBSTtJQUNoQjtBQUNGO0FBR0E7Ozs7Ozs7OztDQVNDLEdBQ0QsU0FBU1MsV0FBV2YsQ0FBQyxFQUFFZ0IsSUFBSSxFQUMzQix1QkFBdUI7QUFDdkIsbURBQW1EOztJQUVqRCxJQUFJTixPQUFrQk0sS0FBS3RCLFFBQVE7SUFDbkMsSUFBSUUsV0FBa0JvQixLQUFLcEIsUUFBUTtJQUNuQyxJQUFJcUIsUUFBa0JELEtBQUtyQixTQUFTLENBQUNYLFdBQVc7SUFDaEQsSUFBSUssWUFBa0IyQixLQUFLckIsU0FBUyxDQUFDTixTQUFTO0lBQzlDLElBQUk2QixRQUFrQkYsS0FBS3JCLFNBQVMsQ0FBQ1YsVUFBVTtJQUMvQyxJQUFJa0MsT0FBa0JILEtBQUtyQixTQUFTLENBQUNULFVBQVU7SUFDL0MsSUFBSUUsYUFBa0I0QixLQUFLckIsU0FBUyxDQUFDUCxVQUFVO0lBQy9DLElBQUlnQyxHQUFnQixjQUFjO0lBQ2xDLElBQUlDLEdBQUdDLEdBQWEsa0NBQWtDO0lBQ3RELElBQUlDLE1BQWdCLGNBQWM7SUFDbEMsSUFBSUMsT0FBZ0IsY0FBYztJQUNsQyxJQUFJQyxHQUFnQixhQUFhO0lBQ2pDLElBQUlDLFdBQVcsR0FBSyxnREFBZ0Q7SUFFcEUsSUFBS0gsT0FBTyxHQUFHQSxRQUFRM0QsVUFBVTJELE9BQVE7UUFDdkN2QixFQUFFMkIsUUFBUSxDQUFDSixLQUFLLEdBQUc7SUFDckI7SUFFQTs7R0FFQyxHQUNEYixJQUFJLENBQUNWLEVBQUU0QixJQUFJLENBQUM1QixFQUFFNkIsUUFBUSxDQUFDLEdBQUcsSUFBSSxFQUFFLEdBQVcsR0FBRyxvQkFBb0I7SUFFbEUsSUFBS1QsSUFBSXBCLEVBQUU2QixRQUFRLEdBQUcsR0FBR1QsSUFBSXpELFdBQVd5RCxJQUFLO1FBQzNDQyxJQUFJckIsRUFBRTRCLElBQUksQ0FBQ1IsRUFBRTtRQUNiRyxPQUFPYixJQUFJLENBQUNBLElBQUksQ0FBQ1csSUFBSSxJQUFJLEVBQUUsR0FBVyxJQUFJLEVBQUUsR0FBVztRQUN2RCxJQUFJRSxPQUFPbkMsWUFBWTtZQUNyQm1DLE9BQU9uQztZQUNQc0M7UUFDRjtRQUNBaEIsSUFBSSxDQUFDVyxJQUFJLElBQUksRUFBRSxHQUFXRTtRQUMxQixzREFBc0QsR0FFdEQsSUFBSUYsSUFBSXpCLFVBQVU7WUFBRTtRQUFVLEVBQUUsbUJBQW1CO1FBRW5ESSxFQUFFMkIsUUFBUSxDQUFDSixLQUFLO1FBQ2hCQyxRQUFRO1FBQ1IsSUFBSUgsS0FBS0YsTUFBTTtZQUNiSyxRQUFRTixLQUFLLENBQUNHLElBQUlGLEtBQUs7UUFDekI7UUFDQU0sSUFBSWYsSUFBSSxDQUFDVyxJQUFJLEVBQUUsUUFBTztRQUN0QnJCLEVBQUU4QixPQUFPLElBQUlMLElBQUtGLENBQUFBLE9BQU9DLEtBQUk7UUFDN0IsSUFBSW5DLFdBQVc7WUFDYlcsRUFBRStCLFVBQVUsSUFBSU4sSUFBS1IsQ0FBQUEsS0FBSyxDQUFDSSxJQUFJLElBQUksRUFBRSxHQUFXRyxLQUFJO1FBQ3REO0lBQ0Y7SUFDQSxJQUFJRSxhQUFhLEdBQUc7UUFBRTtJQUFRO0lBRTlCLDZDQUE2QztJQUM3QyxrRUFBa0UsR0FFbEUsbURBQW1ELEdBQ25ELEdBQUc7UUFDREgsT0FBT25DLGFBQWE7UUFDcEIsTUFBT1ksRUFBRTJCLFFBQVEsQ0FBQ0osS0FBSyxLQUFLLEVBQUc7WUFBRUE7UUFBUTtRQUN6Q3ZCLEVBQUUyQixRQUFRLENBQUNKLEtBQUssSUFBUywrQkFBK0I7UUFDeER2QixFQUFFMkIsUUFBUSxDQUFDSixPQUFPLEVBQUUsSUFBSSxHQUFHLHlDQUF5QztRQUNwRXZCLEVBQUUyQixRQUFRLENBQUN2QyxXQUFXO1FBQ3RCOztLQUVDLEdBQ0RzQyxZQUFZO0lBQ2QsUUFBU0EsV0FBVyxHQUFHO0lBRXZCOzs7O0dBSUMsR0FDRCxJQUFLSCxPQUFPbkMsWUFBWW1DLFNBQVMsR0FBR0EsT0FBUTtRQUMxQ0YsSUFBSXJCLEVBQUUyQixRQUFRLENBQUNKLEtBQUs7UUFDcEIsTUFBT0YsTUFBTSxFQUFHO1lBQ2RDLElBQUl0QixFQUFFNEIsSUFBSSxDQUFDLEVBQUVSLEVBQUU7WUFDZixJQUFJRSxJQUFJMUIsVUFBVTtnQkFBRTtZQUFVO1lBQzlCLElBQUljLElBQUksQ0FBQ1ksSUFBSSxJQUFJLEVBQUUsS0FBYUMsTUFBTTtnQkFDcEMsaUVBQWlFO2dCQUNqRXZCLEVBQUU4QixPQUFPLElBQUksQ0FBQ1AsT0FBT2IsSUFBSSxDQUFDWSxJQUFJLElBQUksRUFBRSxJQUFZWixJQUFJLENBQUNZLElBQUksRUFBRSxRQUFPO2dCQUNsRVosSUFBSSxDQUFDWSxJQUFJLElBQUksRUFBRSxHQUFXQztZQUM1QjtZQUNBRjtRQUNGO0lBQ0Y7QUFDRjtBQUdBOzs7Ozs7O0NBT0MsR0FDRCxTQUFTVyxVQUFVdEIsSUFBSSxFQUFFZCxRQUFRLEVBQUUrQixRQUFRLEVBQzNDLDJEQUEyRDtBQUMzRCwyRUFBMkU7QUFDM0UseUVBQXlFOztJQUV2RSxJQUFJTSxZQUFZLElBQUl4RCxNQUFNYixXQUFXLElBQUksdUNBQXVDO0lBQ2hGLElBQUlnRCxPQUFPLEdBQWdCLHNCQUFzQjtJQUNqRCxJQUFJVyxNQUF1QixhQUFhO0lBQ3hDLElBQUlGLEdBQXVCLGNBQWM7SUFFekM7O0dBRUMsR0FDRCxJQUFLRSxPQUFPLEdBQUdBLFFBQVEzRCxVQUFVMkQsT0FBUTtRQUN2Q1UsU0FBUyxDQUFDVixLQUFLLEdBQUdYLE9BQU8sT0FBUWUsUUFBUSxDQUFDSixPQUFPLEVBQUUsSUFBSztJQUMxRDtJQUNBOztHQUVDLEdBQ0QseURBQXlEO0lBQ3pELHFDQUFxQztJQUNyQyx5REFBeUQ7SUFFekQsSUFBS0YsSUFBSSxHQUFJQSxLQUFLekIsVUFBVXlCLElBQUs7UUFDL0IsSUFBSXRFLE1BQU0yRCxJQUFJLENBQUNXLElBQUksSUFBSSxFQUFFLE9BQU07UUFDL0IsSUFBSXRFLFFBQVEsR0FBRztZQUFFO1FBQVU7UUFDM0Isd0JBQXdCLEdBQ3hCMkQsSUFBSSxDQUFDVyxJQUFJLEVBQUUsR0FBWVYsV0FBV3NCLFNBQVMsQ0FBQ2xGLElBQUksSUFBSUE7SUFFcEQsdUVBQXVFO0lBQ3ZFLHdFQUF3RTtJQUMxRTtBQUNGO0FBR0E7O0NBRUMsR0FDRCxTQUFTbUY7SUFDUCxJQUFJYixHQUFVLCtCQUErQjtJQUM3QyxJQUFJRSxNQUFVLGVBQWU7SUFDN0IsSUFBSXZFLFFBQVUsZ0JBQWdCO0lBQzlCLElBQUk0RCxNQUFVLGNBQWM7SUFDNUIsSUFBSWQsTUFBVSxrQkFBa0I7SUFDaEMsSUFBSTZCLFdBQVcsSUFBSWxELE1BQU1iLFdBQVc7SUFDcEMsMERBQTBELEdBRTFELHlCQUF5QjtJQUN6QiwrQkFBK0I7SUFFL0Isb0VBQW9FLEdBQ3RFOzs7Ozs7TUFNTSxHQUVKLGlFQUFpRSxHQUNqRVosU0FBUztJQUNULElBQUs0RCxPQUFPLEdBQUdBLE9BQU90RCxlQUFlLEdBQUdzRCxPQUFRO1FBQzlDL0IsV0FBVyxDQUFDK0IsS0FBSyxHQUFHNUQ7UUFDcEIsSUFBS3FFLElBQUksR0FBR0EsSUFBSyxLQUFLbEQsV0FBVyxDQUFDeUMsS0FBSyxFQUFHUyxJQUFLO1lBQzdDekMsWUFBWSxDQUFDNUIsU0FBUyxHQUFHNEQ7UUFDM0I7SUFDRjtJQUNBLDBEQUEwRDtJQUMxRDs7O0dBR0MsR0FDRGhDLFlBQVksQ0FBQzVCLFNBQVMsRUFBRSxHQUFHNEQ7SUFFM0IsNkRBQTZELEdBQzdEZCxPQUFPO0lBQ1AsSUFBS2MsT0FBTyxHQUFHQSxPQUFPLElBQUlBLE9BQVE7UUFDaEM5QixTQUFTLENBQUM4QixLQUFLLEdBQUdkO1FBQ2xCLElBQUt1QixJQUFJLEdBQUdBLElBQUssS0FBS2pELFdBQVcsQ0FBQ3dDLEtBQUssRUFBR1MsSUFBSztZQUM3QzFDLFVBQVUsQ0FBQ21CLE9BQU8sR0FBR2M7UUFDdkI7SUFDRjtJQUNBLHNEQUFzRDtJQUN0RGQsU0FBUyxHQUFHLGlEQUFpRDtJQUM3RCxNQUFPYyxPQUFPbkQsU0FBU21ELE9BQVE7UUFDN0I5QixTQUFTLENBQUM4QixLQUFLLEdBQUdkLFFBQVE7UUFDMUIsSUFBS3VCLElBQUksR0FBR0EsSUFBSyxLQUFNakQsV0FBVyxDQUFDd0MsS0FBSyxHQUFHLEdBQUtTLElBQUs7WUFDbkQxQyxVQUFVLENBQUMsTUFBTW1CLE9BQU8sR0FBR2M7UUFDN0I7SUFDRjtJQUNBLDBEQUEwRDtJQUUxRCxrREFBa0QsR0FDbEQsSUFBS1csT0FBTyxHQUFHQSxRQUFRM0QsVUFBVTJELE9BQVE7UUFDdkNJLFFBQVEsQ0FBQ0osS0FBSyxHQUFHO0lBQ25CO0lBRUFGLElBQUk7SUFDSixNQUFPQSxLQUFLLElBQUs7UUFDZjdDLFlBQVksQ0FBQzZDLElBQUksSUFBSSxFQUFFLEdBQVc7UUFDbENBO1FBQ0FNLFFBQVEsQ0FBQyxFQUFFO0lBQ2I7SUFDQSxNQUFPTixLQUFLLElBQUs7UUFDZjdDLFlBQVksQ0FBQzZDLElBQUksSUFBSSxFQUFFLEdBQVc7UUFDbENBO1FBQ0FNLFFBQVEsQ0FBQyxFQUFFO0lBQ2I7SUFDQSxNQUFPTixLQUFLLElBQUs7UUFDZjdDLFlBQVksQ0FBQzZDLElBQUksSUFBSSxFQUFFLEdBQVc7UUFDbENBO1FBQ0FNLFFBQVEsQ0FBQyxFQUFFO0lBQ2I7SUFDQSxNQUFPTixLQUFLLElBQUs7UUFDZjdDLFlBQVksQ0FBQzZDLElBQUksSUFBSSxFQUFFLEdBQVc7UUFDbENBO1FBQ0FNLFFBQVEsQ0FBQyxFQUFFO0lBQ2I7SUFDQTs7O0dBR0MsR0FDREssVUFBVXhELGNBQWNoQixVQUFVLEdBQUdtRTtJQUVyQyx3Q0FBd0MsR0FDeEMsSUFBS04sSUFBSSxHQUFHQSxJQUFJNUQsU0FBUzRELElBQUs7UUFDNUIzQyxZQUFZLENBQUMyQyxJQUFJLElBQUksRUFBRSxHQUFXO1FBQ2xDM0MsWUFBWSxDQUFDMkMsSUFBSSxFQUFFLEdBQVlWLFdBQVdVLEdBQUc7SUFDL0M7SUFFQSw4Q0FBOEM7SUFDOUMvQixnQkFBZ0IsSUFBSVAsZUFBZVAsY0FBY0wsYUFBYVosV0FBVyxHQUFHQyxTQUFTSTtJQUNyRjJCLGdCQUFnQixJQUFJUixlQUFlTCxjQUFjTixhQUFhLEdBQVlYLFNBQVNHO0lBQ25GNEIsaUJBQWlCLElBQUlULGVBQWUsSUFBSU4sTUFBTSxJQUFJSixjQUFjLEdBQVdYLFVBQVVJO0FBRXJGLDBCQUEwQjtBQUM1QjtBQUdBOztDQUVDLEdBQ0QsU0FBU3FFLFdBQVduQyxDQUFDO0lBQ25CLElBQUlxQixHQUFHLCtCQUErQjtJQUV0Qyx5QkFBeUIsR0FDekIsSUFBS0EsSUFBSSxHQUFHQSxJQUFJN0QsU0FBVTZELElBQUs7UUFBRXJCLEVBQUVvQyxTQUFTLENBQUNmLElBQUksRUFBRSxHQUFZO0lBQUc7SUFDbEUsSUFBS0EsSUFBSSxHQUFHQSxJQUFJNUQsU0FBVTRELElBQUs7UUFBRXJCLEVBQUVxQyxTQUFTLENBQUNoQixJQUFJLEVBQUUsR0FBWTtJQUFHO0lBQ2xFLElBQUtBLElBQUksR0FBR0EsSUFBSTNELFVBQVUyRCxJQUFLO1FBQUVyQixFQUFFc0MsT0FBTyxDQUFDakIsSUFBSSxFQUFFLEdBQVk7SUFBRztJQUVoRXJCLEVBQUVvQyxTQUFTLENBQUNyRSxZQUFZLEVBQUUsR0FBWTtJQUN0Q2lDLEVBQUU4QixPQUFPLEdBQUc5QixFQUFFK0IsVUFBVSxHQUFHO0lBQzNCL0IsRUFBRXVDLFFBQVEsR0FBR3ZDLEVBQUV3QyxPQUFPLEdBQUc7QUFDM0I7QUFHQTs7Q0FFQyxHQUNELFNBQVNDLFVBQVV6QyxDQUFDO0lBRWxCLElBQUlBLEVBQUVNLFFBQVEsR0FBRyxHQUFHO1FBQ2xCUCxVQUFVQyxHQUFHQSxFQUFFTyxNQUFNO0lBQ3ZCLE9BQU8sSUFBSVAsRUFBRU0sUUFBUSxHQUFHLEdBQUc7UUFDekIsK0JBQStCO1FBQy9CTixFQUFFRSxXQUFXLENBQUNGLEVBQUVHLE9BQU8sR0FBRyxHQUFHSCxFQUFFTyxNQUFNO0lBQ3ZDO0lBQ0FQLEVBQUVPLE1BQU0sR0FBRztJQUNYUCxFQUFFTSxRQUFRLEdBQUc7QUFDZjtBQUVBOzs7Q0FHQyxHQUNELFNBQVNvQyxXQUFXMUMsQ0FBQyxFQUFFbEQsR0FBRyxFQUFFQyxHQUFHLEVBQUU0RixNQUFNLEVBQ3ZDLGtCQUFrQjtBQUNsQix3Q0FBd0M7QUFDeEMsb0NBQW9DO0FBQ3BDLDhEQUE4RDs7SUFFNURGLFVBQVV6QyxJQUFXLDBCQUEwQjtJQUUvQyxJQUFJMkMsUUFBUTtRQUNWNUMsVUFBVUMsR0FBR2pEO1FBQ2JnRCxVQUFVQyxHQUFHLENBQUNqRDtJQUNoQjtJQUNGLG1CQUFtQjtJQUNuQiwwQkFBMEI7SUFDMUIsS0FBSztJQUNIUixNQUFNcUcsUUFBUSxDQUFDNUMsRUFBRUUsV0FBVyxFQUFFRixFQUFFNkMsTUFBTSxFQUFFL0YsS0FBS0MsS0FBS2lELEVBQUVHLE9BQU87SUFDM0RILEVBQUVHLE9BQU8sSUFBSXBEO0FBQ2Y7QUFFQTs7O0NBR0MsR0FDRCxTQUFTK0YsUUFBUXBDLElBQUksRUFBRVcsQ0FBQyxFQUFFQyxDQUFDLEVBQUV5QixLQUFLO0lBQ2hDLElBQUlDLE1BQU0zQixJQUFJO0lBQ2QsSUFBSTRCLE1BQU0zQixJQUFJO0lBQ2QsT0FBUVosSUFBSSxDQUFDc0MsSUFBSSxHQUFZdEMsSUFBSSxDQUFDdUMsSUFBSSxJQUM5QnZDLElBQUksQ0FBQ3NDLElBQUksS0FBY3RDLElBQUksQ0FBQ3VDLElBQUksSUFBYUYsS0FBSyxDQUFDMUIsRUFBRSxJQUFJMEIsS0FBSyxDQUFDekIsRUFBRTtBQUMzRTtBQUVBOzs7OztDQUtDLEdBQ0QsU0FBUzRCLFdBQVdsRCxDQUFDLEVBQUVVLElBQUksRUFBRXlDLENBQUMsRUFDOUIsdUJBQXVCO0FBQ3ZCLCtDQUErQztBQUMvQyxrREFBa0Q7O0lBRWhELElBQUlDLElBQUlwRCxFQUFFNEIsSUFBSSxDQUFDdUIsRUFBRTtJQUNqQixJQUFJRSxJQUFJRixLQUFLLEdBQUksaUJBQWlCO0lBQ2xDLE1BQU9FLEtBQUtyRCxFQUFFc0QsUUFBUSxDQUFFO1FBQ3RCLDBDQUEwQyxHQUMxQyxJQUFJRCxJQUFJckQsRUFBRXNELFFBQVEsSUFDaEJSLFFBQVFwQyxNQUFNVixFQUFFNEIsSUFBSSxDQUFDeUIsSUFBSSxFQUFFLEVBQUVyRCxFQUFFNEIsSUFBSSxDQUFDeUIsRUFBRSxFQUFFckQsRUFBRStDLEtBQUssR0FBRztZQUNsRE07UUFDRjtRQUNBLHVDQUF1QyxHQUN2QyxJQUFJUCxRQUFRcEMsTUFBTTBDLEdBQUdwRCxFQUFFNEIsSUFBSSxDQUFDeUIsRUFBRSxFQUFFckQsRUFBRStDLEtBQUssR0FBRztZQUFFO1FBQU87UUFFbkQsb0NBQW9DLEdBQ3BDL0MsRUFBRTRCLElBQUksQ0FBQ3VCLEVBQUUsR0FBR25ELEVBQUU0QixJQUFJLENBQUN5QixFQUFFO1FBQ3JCRixJQUFJRTtRQUVKLDhEQUE4RCxHQUM5REEsTUFBTTtJQUNSO0lBQ0FyRCxFQUFFNEIsSUFBSSxDQUFDdUIsRUFBRSxHQUFHQztBQUNkO0FBR0EsbUJBQW1CO0FBQ25CLG9CQUFvQjtBQUVwQjs7Q0FFQyxHQUNELFNBQVNHLGVBQWV2RCxDQUFDLEVBQUV3RCxLQUFLLEVBQUVDLEtBQUssRUFDdkMsdUJBQXVCO0FBQ3ZCLDhDQUE4QztBQUM5QywrQ0FBK0M7O0lBRTdDLElBQUkzRCxNQUFnQiw4QkFBOEI7SUFDbEQsSUFBSTRELElBQWdCLGlEQUFpRDtJQUNyRSxJQUFJQyxLQUFLLEdBQVcsMEJBQTBCO0lBQzlDLElBQUkvQyxNQUFnQixvQkFBb0I7SUFDeEMsSUFBSU0sT0FBZ0IsZ0NBQWdDO0lBRXBELElBQUlsQixFQUFFdUMsUUFBUSxLQUFLLEdBQUc7UUFDcEIsR0FBRztZQUNEekMsT0FBTyxFQUFHSSxXQUFXLENBQUNGLEVBQUU0RCxLQUFLLEdBQUdELEtBQUssRUFBRSxJQUFJLElBQU0zRCxFQUFFRSxXQUFXLENBQUNGLEVBQUU0RCxLQUFLLEdBQUdELEtBQUssSUFBSSxFQUFFO1lBQ3BGRCxLQUFLMUQsRUFBRUUsV0FBVyxDQUFDRixFQUFFNkQsS0FBSyxHQUFHRixHQUFHO1lBQ2hDQTtZQUVBLElBQUk3RCxTQUFTLEdBQUc7Z0JBQ2RVLFVBQVVSLEdBQUcwRCxJQUFJRixRQUFRLHVCQUF1QjtZQUNoRCw4Q0FBOEM7WUFDaEQsT0FBTztnQkFDTCw0Q0FBNEMsR0FDNUM1QyxPQUFPaEMsWUFBWSxDQUFDOEUsR0FBRztnQkFDdkJsRCxVQUFVUixHQUFHWSxPQUFPckQsV0FBVyxHQUFHaUcsUUFBUSx3QkFBd0I7Z0JBQ2xFdEMsUUFBUS9DLFdBQVcsQ0FBQ3lDLEtBQUs7Z0JBQ3pCLElBQUlNLFVBQVUsR0FBRztvQkFDZndDLE1BQU03RSxXQUFXLENBQUMrQixLQUFLO29CQUN2QlIsVUFBVUosR0FBRzBELElBQUl4QyxRQUFjLDhCQUE4QjtnQkFDL0Q7Z0JBQ0FwQixRQUFRLHNDQUFzQztnQkFDOUNjLE9BQU9mLE9BQU9DO2dCQUNkLHdDQUF3QztnQkFFeENVLFVBQVVSLEdBQUdZLE1BQU02QyxRQUFjLDBCQUEwQjtnQkFDM0R2QyxRQUFROUMsV0FBVyxDQUFDd0MsS0FBSztnQkFDekIsSUFBSU0sVUFBVSxHQUFHO29CQUNmcEIsUUFBUWhCLFNBQVMsQ0FBQzhCLEtBQUs7b0JBQ3ZCUixVQUFVSixHQUFHRixNQUFNb0IsUUFBVSxnQ0FBZ0M7Z0JBQy9EO1lBQ0YsRUFBRSwyQkFBMkI7UUFFN0IscUVBQXFFLEdBQ3JFLG9EQUFvRDtRQUNwRCxnQ0FBZ0M7UUFFbEMsUUFBU3lDLEtBQUszRCxFQUFFdUMsUUFBUSxFQUFFO0lBQzVCO0lBRUEvQixVQUFVUixHQUFHakMsV0FBV3lGO0FBQzFCO0FBR0E7Ozs7Ozs7Q0FPQyxHQUNELFNBQVNNLFdBQVc5RCxDQUFDLEVBQUVnQixJQUFJLEVBQzNCLHVCQUF1QjtBQUN2QixnREFBZ0Q7O0lBRTlDLElBQUlOLE9BQVdNLEtBQUt0QixRQUFRO0lBQzVCLElBQUl1QixRQUFXRCxLQUFLckIsU0FBUyxDQUFDWCxXQUFXO0lBQ3pDLElBQUlLLFlBQVkyQixLQUFLckIsU0FBUyxDQUFDTixTQUFTO0lBQ3hDLElBQUlGLFFBQVc2QixLQUFLckIsU0FBUyxDQUFDUixLQUFLO0lBQ25DLElBQUlrQyxHQUFHQyxHQUFZLDhCQUE4QjtJQUNqRCxJQUFJMUIsV0FBVyxDQUFDLEdBQUcsd0NBQXdDO0lBQzNELElBQUltRSxNQUFlLDBCQUEwQjtJQUU3Qzs7O0dBR0MsR0FDRC9ELEVBQUVzRCxRQUFRLEdBQUc7SUFDYnRELEVBQUU2QixRQUFRLEdBQUdsRTtJQUViLElBQUswRCxJQUFJLEdBQUdBLElBQUlsQyxPQUFPa0MsSUFBSztRQUMxQixJQUFJWCxJQUFJLENBQUNXLElBQUksRUFBRSxLQUFjLEdBQUc7WUFDOUJyQixFQUFFNEIsSUFBSSxDQUFDLEVBQUU1QixFQUFFc0QsUUFBUSxDQUFDLEdBQUcxRCxXQUFXeUI7WUFDbENyQixFQUFFK0MsS0FBSyxDQUFDMUIsRUFBRSxHQUFHO1FBRWYsT0FBTztZQUNMWCxJQUFJLENBQUNXLElBQUksSUFBSSxFQUFFLEdBQVc7UUFDNUI7SUFDRjtJQUVBOzs7O0dBSUMsR0FDRCxNQUFPckIsRUFBRXNELFFBQVEsR0FBRyxFQUFHO1FBQ3JCUyxPQUFPL0QsRUFBRTRCLElBQUksQ0FBQyxFQUFFNUIsRUFBRXNELFFBQVEsQ0FBQyxHQUFJMUQsV0FBVyxJQUFJLEVBQUVBLFdBQVc7UUFDM0RjLElBQUksQ0FBQ3FELE9BQU8sRUFBRSxHQUFZO1FBQzFCL0QsRUFBRStDLEtBQUssQ0FBQ2dCLEtBQUssR0FBRztRQUNoQi9ELEVBQUU4QixPQUFPO1FBRVQsSUFBSXpDLFdBQVc7WUFDYlcsRUFBRStCLFVBQVUsSUFBSWQsS0FBSyxDQUFDOEMsT0FBTyxJQUFJLEVBQUUsT0FBTTtRQUMzQztJQUNBLGlEQUFpRCxHQUNuRDtJQUNBL0MsS0FBS3BCLFFBQVEsR0FBR0E7SUFFaEI7O0dBRUMsR0FDRCxJQUFLeUIsSUFBS3JCLEVBQUVzRCxRQUFRLElBQUksRUFBQyxRQUFRLEtBQUtqQyxLQUFLLEdBQUdBLElBQUs7UUFBRTZCLFdBQVdsRCxHQUFHVSxNQUFNVztJQUFJO0lBRTdFOztHQUVDLEdBQ0QwQyxPQUFPNUUsT0FBb0Isa0NBQWtDO0lBQzdELEdBQUc7UUFDRCwwREFBMEQ7UUFDMUQsZ0JBQWdCLEdBQ2hCa0MsSUFBSXJCLEVBQUU0QixJQUFJLENBQUMsRUFBQyxVQUFVLElBQUc7UUFDekI1QixFQUFFNEIsSUFBSSxDQUFDLEVBQUMsVUFBVSxJQUFHLEdBQUc1QixFQUFFNEIsSUFBSSxDQUFDNUIsRUFBRXNELFFBQVEsR0FBRztRQUM1Q0osV0FBV2xELEdBQUdVLE1BQU0sRUFBQyxVQUFVO1FBQy9CLEdBQUcsR0FFSFksSUFBSXRCLEVBQUU0QixJQUFJLENBQUMsRUFBQyxVQUFVLElBQUcsRUFBRSxvQ0FBb0M7UUFFL0Q1QixFQUFFNEIsSUFBSSxDQUFDLEVBQUU1QixFQUFFNkIsUUFBUSxDQUFDLEdBQUdSLEdBQUcsc0NBQXNDO1FBQ2hFckIsRUFBRTRCLElBQUksQ0FBQyxFQUFFNUIsRUFBRTZCLFFBQVEsQ0FBQyxHQUFHUDtRQUV2Qix1Q0FBdUMsR0FDdkNaLElBQUksQ0FBQ3FELE9BQU8sRUFBRSxHQUFZckQsSUFBSSxDQUFDVyxJQUFJLEVBQUUsR0FBWVgsSUFBSSxDQUFDWSxJQUFJLEVBQUUsUUFBTztRQUNuRXRCLEVBQUUrQyxLQUFLLENBQUNnQixLQUFLLEdBQUcsQ0FBQy9ELEVBQUUrQyxLQUFLLENBQUMxQixFQUFFLElBQUlyQixFQUFFK0MsS0FBSyxDQUFDekIsRUFBRSxHQUFHdEIsRUFBRStDLEtBQUssQ0FBQzFCLEVBQUUsR0FBR3JCLEVBQUUrQyxLQUFLLENBQUN6QixFQUFFLElBQUk7UUFDdkVaLElBQUksQ0FBQ1csSUFBSSxJQUFJLEVBQUUsR0FBV1gsSUFBSSxDQUFDWSxJQUFJLElBQUksRUFBRSxHQUFXeUM7UUFFcEQsdUNBQXVDLEdBQ3ZDL0QsRUFBRTRCLElBQUksQ0FBQyxFQUFDLFVBQVUsSUFBRyxHQUFHbUM7UUFDeEJiLFdBQVdsRCxHQUFHVSxNQUFNLEVBQUMsVUFBVTtJQUVqQyxRQUFTVixFQUFFc0QsUUFBUSxJQUFJLEdBQUc7SUFFMUJ0RCxFQUFFNEIsSUFBSSxDQUFDLEVBQUU1QixFQUFFNkIsUUFBUSxDQUFDLEdBQUc3QixFQUFFNEIsSUFBSSxDQUFDLEVBQUMsVUFBVSxJQUFHO0lBRTVDOztHQUVDLEdBQ0RiLFdBQVdmLEdBQUdnQjtJQUVkLDJEQUEyRCxHQUMzRGdCLFVBQVV0QixNQUFNZCxVQUFVSSxFQUFFMkIsUUFBUTtBQUN0QztBQUdBOzs7Q0FHQyxHQUNELFNBQVNxQyxVQUFVaEUsQ0FBQyxFQUFFVSxJQUFJLEVBQUVkLFFBQVEsRUFDcEMsdUJBQXVCO0FBQ3ZCLG1EQUFtRDtBQUNuRCx1RUFBdUU7O0lBRXJFLElBQUl5QixHQUF1QixtQ0FBbUM7SUFDOUQsSUFBSTRDLFVBQVUsQ0FBQyxHQUFZLHVCQUF1QjtJQUNsRCxJQUFJQyxRQUF1QiwwQkFBMEI7SUFFckQsSUFBSUMsVUFBVXpELElBQUksQ0FBQyxJQUFJLElBQUksRUFBRSxPQUFNLEtBQUksdUJBQXVCO0lBRTlELElBQUkwRCxRQUFRLEdBQWUsb0NBQW9DO0lBQy9ELElBQUlDLFlBQVksR0FBVyxvQkFBb0I7SUFDL0MsSUFBSUMsWUFBWSxHQUFXLG9CQUFvQjtJQUUvQyxJQUFJSCxZQUFZLEdBQUc7UUFDakJFLFlBQVk7UUFDWkMsWUFBWTtJQUNkO0lBQ0E1RCxJQUFJLENBQUMsQ0FBQ2QsV0FBVyxLQUFLLElBQUksRUFBRSxHQUFXLFFBQVEsU0FBUztJQUV4RCxJQUFLeUIsSUFBSSxHQUFHQSxLQUFLekIsVUFBVXlCLElBQUs7UUFDOUI2QyxTQUFTQztRQUNUQSxVQUFVekQsSUFBSSxDQUFDLENBQUNXLElBQUksS0FBSyxJQUFJLEVBQUUsT0FBTTtRQUVyQyxJQUFJLEVBQUUrQyxRQUFRQyxhQUFhSCxXQUFXQyxTQUFTO1lBQzdDO1FBRUYsT0FBTyxJQUFJQyxRQUFRRSxXQUFXO1lBQzVCdEUsRUFBRXNDLE9BQU8sQ0FBQzRCLFNBQVMsRUFBRSxJQUFhRTtRQUVwQyxPQUFPLElBQUlGLFdBQVcsR0FBRztZQUV2QixJQUFJQSxXQUFXRCxTQUFTO2dCQUFFakUsRUFBRXNDLE9BQU8sQ0FBQzRCLFNBQVMsRUFBRTtZQUFhO1lBQzVEbEUsRUFBRXNDLE9BQU8sQ0FBQ3RFLFVBQVUsRUFBRTtRQUV4QixPQUFPLElBQUlvRyxTQUFTLElBQUk7WUFDdEJwRSxFQUFFc0MsT0FBTyxDQUFDckUsWUFBWSxFQUFFO1FBRTFCLE9BQU87WUFDTCtCLEVBQUVzQyxPQUFPLENBQUNwRSxjQUFjLEVBQUU7UUFDNUI7UUFFQWtHLFFBQVE7UUFDUkgsVUFBVUM7UUFFVixJQUFJQyxZQUFZLEdBQUc7WUFDakJFLFlBQVk7WUFDWkMsWUFBWTtRQUVkLE9BQU8sSUFBSUosV0FBV0MsU0FBUztZQUM3QkUsWUFBWTtZQUNaQyxZQUFZO1FBRWQsT0FBTztZQUNMRCxZQUFZO1lBQ1pDLFlBQVk7UUFDZDtJQUNGO0FBQ0Y7QUFHQTs7O0NBR0MsR0FDRCxTQUFTQyxVQUFVdkUsQ0FBQyxFQUFFVSxJQUFJLEVBQUVkLFFBQVEsRUFDcEMsdUJBQXVCO0FBQ3ZCLGlEQUFpRDtBQUNqRCwwRUFBMEU7O0lBRXhFLElBQUl5QixHQUF1QixtQ0FBbUM7SUFDOUQsSUFBSTRDLFVBQVUsQ0FBQyxHQUFZLHVCQUF1QjtJQUNsRCxJQUFJQyxRQUF1QiwwQkFBMEI7SUFFckQsSUFBSUMsVUFBVXpELElBQUksQ0FBQyxJQUFJLElBQUksRUFBRSxPQUFNLEtBQUksdUJBQXVCO0lBRTlELElBQUkwRCxRQUFRLEdBQWUsb0NBQW9DO0lBQy9ELElBQUlDLFlBQVksR0FBVyxvQkFBb0I7SUFDL0MsSUFBSUMsWUFBWSxHQUFXLG9CQUFvQjtJQUUvQyw4QkFBOEIsR0FBSSxxQkFBcUIsR0FDdkQsSUFBSUgsWUFBWSxHQUFHO1FBQ2pCRSxZQUFZO1FBQ1pDLFlBQVk7SUFDZDtJQUVBLElBQUtqRCxJQUFJLEdBQUdBLEtBQUt6QixVQUFVeUIsSUFBSztRQUM5QjZDLFNBQVNDO1FBQ1RBLFVBQVV6RCxJQUFJLENBQUMsQ0FBQ1csSUFBSSxLQUFLLElBQUksRUFBRSxPQUFNO1FBRXJDLElBQUksRUFBRStDLFFBQVFDLGFBQWFILFdBQVdDLFNBQVM7WUFDN0M7UUFFRixPQUFPLElBQUlDLFFBQVFFLFdBQVc7WUFDNUIsR0FBRztnQkFBRTlELFVBQVVSLEdBQUdrRSxRQUFRbEUsRUFBRXNDLE9BQU87WUFBRyxRQUFTLEVBQUU4QixVQUFVLEdBQUc7UUFFaEUsT0FBTyxJQUFJRixXQUFXLEdBQUc7WUFDdkIsSUFBSUEsV0FBV0QsU0FBUztnQkFDdEJ6RCxVQUFVUixHQUFHa0UsUUFBUWxFLEVBQUVzQyxPQUFPO2dCQUM5QjhCO1lBQ0Y7WUFDQSw0Q0FBNEM7WUFDNUM1RCxVQUFVUixHQUFHaEMsU0FBU2dDLEVBQUVzQyxPQUFPO1lBQy9CbEMsVUFBVUosR0FBR29FLFFBQVEsR0FBRztRQUUxQixPQUFPLElBQUlBLFNBQVMsSUFBSTtZQUN0QjVELFVBQVVSLEdBQUcvQixXQUFXK0IsRUFBRXNDLE9BQU87WUFDakNsQyxVQUFVSixHQUFHb0UsUUFBUSxHQUFHO1FBRTFCLE9BQU87WUFDTDVELFVBQVVSLEdBQUc5QixhQUFhOEIsRUFBRXNDLE9BQU87WUFDbkNsQyxVQUFVSixHQUFHb0UsUUFBUSxJQUFJO1FBQzNCO1FBRUFBLFFBQVE7UUFDUkgsVUFBVUM7UUFDVixJQUFJQyxZQUFZLEdBQUc7WUFDakJFLFlBQVk7WUFDWkMsWUFBWTtRQUVkLE9BQU8sSUFBSUosV0FBV0MsU0FBUztZQUM3QkUsWUFBWTtZQUNaQyxZQUFZO1FBRWQsT0FBTztZQUNMRCxZQUFZO1lBQ1pDLFlBQVk7UUFDZDtJQUNGO0FBQ0Y7QUFHQTs7O0NBR0MsR0FDRCxTQUFTRSxjQUFjeEUsQ0FBQztJQUN0QixJQUFJeUUsYUFBYyxrREFBa0Q7SUFFcEUsdUVBQXVFLEdBQ3ZFVCxVQUFVaEUsR0FBR0EsRUFBRW9DLFNBQVMsRUFBRXBDLEVBQUUwRSxNQUFNLENBQUM5RSxRQUFRO0lBQzNDb0UsVUFBVWhFLEdBQUdBLEVBQUVxQyxTQUFTLEVBQUVyQyxFQUFFMkUsTUFBTSxDQUFDL0UsUUFBUTtJQUUzQyw4QkFBOEIsR0FDOUJrRSxXQUFXOUQsR0FBR0EsRUFBRTRFLE9BQU87SUFDdkI7O0dBRUMsR0FFRDs7O0dBR0MsR0FDRCxJQUFLSCxjQUFjL0csV0FBVyxHQUFHK0csZUFBZSxHQUFHQSxjQUFlO1FBQ2hFLElBQUl6RSxFQUFFc0MsT0FBTyxDQUFDaEUsUUFBUSxDQUFDbUcsWUFBWSxHQUFHLElBQUksRUFBRSxLQUFhLEdBQUc7WUFDMUQ7UUFDRjtJQUNGO0lBQ0EsNERBQTRELEdBQzVEekUsRUFBRThCLE9BQU8sSUFBSSxJQUFLMkMsQ0FBQUEsY0FBYyxLQUFLLElBQUksSUFBSTtJQUM3QyxtREFBbUQ7SUFDbkQsc0NBQXNDO0lBRXRDLE9BQU9BO0FBQ1Q7QUFHQTs7OztDQUlDLEdBQ0QsU0FBU0ksZUFBZTdFLENBQUMsRUFBRThFLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxPQUFPLEVBQ2xELHVCQUF1QjtBQUN2QixzRUFBc0U7O0lBRXBFLElBQUlDLE1BQXlCLHFCQUFxQjtJQUVsRCw0RUFBNEU7SUFDNUUsd0VBQXdFO0lBQ3hFLDRCQUE0QjtJQUM1QixvQ0FBb0M7SUFDcEM3RSxVQUFVSixHQUFHOEUsU0FBUyxLQUFLLElBQUkscUNBQXFDO0lBQ3BFMUUsVUFBVUosR0FBRytFLFNBQVMsR0FBSztJQUMzQjNFLFVBQVVKLEdBQUdnRixVQUFVLEdBQUksSUFBSSxtQ0FBbUM7SUFDbEUsSUFBS0MsT0FBTyxHQUFHQSxPQUFPRCxTQUFTQyxPQUFRO1FBQ3JDLHFEQUFxRDtRQUNyRDdFLFVBQVVKLEdBQUdBLEVBQUVzQyxPQUFPLENBQUNoRSxRQUFRLENBQUMyRyxLQUFLLEdBQUcsSUFBSSxFQUFFLEVBQVU7SUFDMUQ7SUFDQSx3REFBd0Q7SUFFeERWLFVBQVV2RSxHQUFHQSxFQUFFb0MsU0FBUyxFQUFFMEMsU0FBUyxJQUFJLGdCQUFnQjtJQUN2RCx5REFBeUQ7SUFFekRQLFVBQVV2RSxHQUFHQSxFQUFFcUMsU0FBUyxFQUFFMEMsU0FBUyxJQUFJLGlCQUFpQjtBQUN4RCwwREFBMEQ7QUFDNUQ7QUFHQTs7Ozs7Ozs7Ozs7O0NBWUMsR0FDRCxTQUFTRyxpQkFBaUJsRixDQUFDO0lBQ3pCOzs7R0FHQyxHQUNELElBQUltRixhQUFhO0lBQ2pCLElBQUk5RDtJQUVKLGlEQUFpRCxHQUNqRCxJQUFLQSxJQUFJLEdBQUdBLEtBQUssSUFBSUEsS0FBSzhELGdCQUFnQixFQUFHO1FBQzNDLElBQUksYUFBYyxLQUFPbkYsRUFBRW9DLFNBQVMsQ0FBQ2YsSUFBSSxFQUFFLEtBQWMsR0FBSTtZQUMzRCxPQUFPM0U7UUFDVDtJQUNGO0lBRUEsNkNBQTZDLEdBQzdDLElBQUlzRCxFQUFFb0MsU0FBUyxDQUFDLElBQUksRUFBRSxLQUFjLEtBQUtwQyxFQUFFb0MsU0FBUyxDQUFDLEtBQUssRUFBRSxLQUFjLEtBQ3RFcEMsRUFBRW9DLFNBQVMsQ0FBQyxLQUFLLEVBQUUsS0FBYyxHQUFHO1FBQ3RDLE9BQU96RjtJQUNUO0lBQ0EsSUFBSzBFLElBQUksSUFBSUEsSUFBSTlELFVBQVU4RCxJQUFLO1FBQzlCLElBQUlyQixFQUFFb0MsU0FBUyxDQUFDZixJQUFJLEVBQUUsS0FBYyxHQUFHO1lBQ3JDLE9BQU8xRTtRQUNUO0lBQ0Y7SUFFQTs7R0FFQyxHQUNELE9BQU9EO0FBQ1Q7QUFHQSxJQUFJMEksbUJBQW1CO0FBRXZCOztDQUVDLEdBQ0QsU0FBU0MsU0FBU3JGLENBQUM7SUFHakIsSUFBSSxDQUFDb0Ysa0JBQWtCO1FBQ3JCbEQ7UUFDQWtELG1CQUFtQjtJQUNyQjtJQUVBcEYsRUFBRTBFLE1BQU0sR0FBSSxJQUFJakYsU0FBU08sRUFBRW9DLFNBQVMsRUFBRTlDO0lBQ3RDVSxFQUFFMkUsTUFBTSxHQUFJLElBQUlsRixTQUFTTyxFQUFFcUMsU0FBUyxFQUFFOUM7SUFDdENTLEVBQUU0RSxPQUFPLEdBQUcsSUFBSW5GLFNBQVNPLEVBQUVzQyxPQUFPLEVBQUU5QztJQUVwQ1EsRUFBRU8sTUFBTSxHQUFHO0lBQ1hQLEVBQUVNLFFBQVEsR0FBRztJQUViLGlEQUFpRCxHQUNqRDZCLFdBQVduQztBQUNiO0FBR0E7O0NBRUMsR0FDRCxTQUFTc0YsaUJBQWlCdEYsQ0FBQyxFQUFFbEQsR0FBRyxFQUFFeUksVUFBVSxFQUFFQyxJQUFJLEVBQ2xELGtCQUFrQjtBQUNsQixxQ0FBcUM7QUFDckMsK0NBQStDO0FBQy9DLGtFQUFrRTs7SUFFaEVwRixVQUFVSixHQUFHLENBQUMvQyxnQkFBZ0IsS0FBTXVJLENBQUFBLE9BQU8sSUFBSSxJQUFJLElBQU8sbUJBQW1CO0lBQzdFOUMsV0FBVzFDLEdBQUdsRCxLQUFLeUksWUFBWSxPQUFPLGVBQWU7QUFDdkQ7QUFHQTs7O0NBR0MsR0FDRCxTQUFTRSxVQUFVekYsQ0FBQztJQUNsQkksVUFBVUosR0FBRzlDLGdCQUFnQixHQUFHO0lBQ2hDc0QsVUFBVVIsR0FBR2pDLFdBQVdTO0lBQ3hCc0MsU0FBU2Q7QUFDWDtBQUdBOzs7Q0FHQyxHQUNELFNBQVMwRixnQkFBZ0IxRixDQUFDLEVBQUVsRCxHQUFHLEVBQUV5SSxVQUFVLEVBQUVDLElBQUksRUFDakQsa0JBQWtCO0FBQ2xCLHlEQUF5RDtBQUN6RCwrQ0FBK0M7QUFDL0Msa0VBQWtFOztJQUVoRSxJQUFJRyxVQUFVQyxhQUFjLG1DQUFtQztJQUMvRCxJQUFJbkIsY0FBYyxHQUFVLGtEQUFrRDtJQUU5RSwyREFBMkQsR0FDM0QsSUFBSXpFLEVBQUU2RixLQUFLLEdBQUcsR0FBRztRQUVmLHVDQUF1QyxHQUN2QyxJQUFJN0YsRUFBRThGLElBQUksQ0FBQ0MsU0FBUyxLQUFLbkosV0FBVztZQUNsQ29ELEVBQUU4RixJQUFJLENBQUNDLFNBQVMsR0FBR2IsaUJBQWlCbEY7UUFDdEM7UUFFQSw0Q0FBNEMsR0FDNUM4RCxXQUFXOUQsR0FBR0EsRUFBRTBFLE1BQU07UUFDdEIsK0RBQStEO1FBQy9ELDBCQUEwQjtRQUUxQlosV0FBVzlELEdBQUdBLEVBQUUyRSxNQUFNO1FBQ3RCLGdFQUFnRTtRQUNoRSwwQkFBMEI7UUFDMUI7O0tBRUMsR0FFRDs7S0FFQyxHQUNERixjQUFjRCxjQUFjeEU7UUFFNUIsb0VBQW9FLEdBQ3BFMkYsV0FBVyxFQUFHN0QsT0FBTyxHQUFHLElBQUksTUFBTztRQUNuQzhELGNBQWMsRUFBRzdELFVBQVUsR0FBRyxJQUFJLE1BQU87UUFFekMscUVBQXFFO1FBQ3JFLHVFQUF1RTtRQUN2RSx3QkFBd0I7UUFFeEIsSUFBSTZELGVBQWVELFVBQVU7WUFBRUEsV0FBV0M7UUFBYTtJQUV6RCxPQUFPO1FBQ0wsdUNBQXVDO1FBQ3ZDRCxXQUFXQyxjQUFjTCxhQUFhLEdBQUcsd0JBQXdCO0lBQ25FO0lBRUEsSUFBSSxhQUFjLEtBQUtJLFlBQWM3SSxRQUFRLENBQUMsR0FBSTtRQUNoRCxnQ0FBZ0MsR0FFaEM7Ozs7O0tBS0MsR0FDRHdJLGlCQUFpQnRGLEdBQUdsRCxLQUFLeUksWUFBWUM7SUFFdkMsT0FBTyxJQUFJeEYsRUFBRWdHLFFBQVEsS0FBS3ZKLFdBQVdtSixnQkFBZ0JELFVBQVU7UUFFN0R2RixVQUFVSixHQUFHLENBQUM5QyxnQkFBZ0IsS0FBTXNJLENBQUFBLE9BQU8sSUFBSSxJQUFJO1FBQ25EakMsZUFBZXZELEdBQUd4QixjQUFjRTtJQUVsQyxPQUFPO1FBQ0wwQixVQUFVSixHQUFHLENBQUM3QyxhQUFhLEtBQU1xSSxDQUFBQSxPQUFPLElBQUksSUFBSTtRQUNoRFgsZUFBZTdFLEdBQUdBLEVBQUUwRSxNQUFNLENBQUM5RSxRQUFRLEdBQUcsR0FBR0ksRUFBRTJFLE1BQU0sQ0FBQy9FLFFBQVEsR0FBRyxHQUFHNkUsY0FBYztRQUM5RWxCLGVBQWV2RCxHQUFHQSxFQUFFb0MsU0FBUyxFQUFFcEMsRUFBRXFDLFNBQVM7SUFDNUM7SUFDQSxxRUFBcUU7SUFDckU7O0dBRUMsR0FDREYsV0FBV25DO0lBRVgsSUFBSXdGLE1BQU07UUFDUi9DLFVBQVV6QztJQUNaO0FBQ0EsK0RBQStEO0FBQy9ELG9DQUFvQztBQUN0QztBQUVBOzs7Q0FHQyxHQUNELFNBQVNpRyxVQUFVakcsQ0FBQyxFQUFFRixJQUFJLEVBQUU0RCxFQUFFLEVBQzlCLHVCQUF1QjtBQUN2QixzREFBc0Q7QUFDdEQsaUZBQWlGOztJQUUvRSxtQ0FBbUM7SUFFbkMxRCxFQUFFRSxXQUFXLENBQUNGLEVBQUU0RCxLQUFLLEdBQUc1RCxFQUFFdUMsUUFBUSxHQUFHLEVBQUUsR0FBTyxTQUFVLElBQUs7SUFDN0R2QyxFQUFFRSxXQUFXLENBQUNGLEVBQUU0RCxLQUFLLEdBQUc1RCxFQUFFdUMsUUFBUSxHQUFHLElBQUksRUFBRSxHQUFHekMsT0FBTztJQUVyREUsRUFBRUUsV0FBVyxDQUFDRixFQUFFNkQsS0FBSyxHQUFHN0QsRUFBRXVDLFFBQVEsQ0FBQyxHQUFHbUIsS0FBSztJQUMzQzFELEVBQUV1QyxRQUFRO0lBRVYsSUFBSXpDLFNBQVMsR0FBRztRQUNkLDRCQUE0QixHQUM1QkUsRUFBRW9DLFNBQVMsQ0FBQ3NCLEtBQUssRUFBRTtJQUNyQixPQUFPO1FBQ0wxRCxFQUFFd0MsT0FBTztRQUNULDRDQUE0QyxHQUM1QzFDLFFBQW9CLDZCQUE2QjtRQUNqRCx3Q0FBd0M7UUFDeEMsaURBQWlEO1FBQ2pELG9FQUFvRTtRQUVwRUUsRUFBRW9DLFNBQVMsQ0FBQyxDQUFDeEQsWUFBWSxDQUFDOEUsR0FBRyxHQUFHbkcsV0FBVyxLQUFLLEVBQUU7UUFDbER5QyxFQUFFcUMsU0FBUyxDQUFDeEMsT0FBT0MsUUFBUSxFQUFFO0lBQy9CO0lBRUYsK0NBQStDO0lBQy9DLDJDQUEyQztJQUUzQyx1QkFBdUI7SUFDdkIseUVBQXlFO0lBQ3pFLHFEQUFxRDtJQUNyRCw0REFBNEQ7SUFDNUQsZ0NBQWdDO0lBQ2hDLDZDQUE2QztJQUM3QyxFQUFFO0lBQ0YsaURBQWlEO0lBQ2pELCtFQUErRTtJQUMvRSxPQUFPO0lBQ1Asd0JBQXdCO0lBQ3hCLGlFQUFpRTtJQUNqRSxrREFBa0Q7SUFDbEQsa0RBQWtEO0lBQ2xELDJGQUEyRjtJQUMzRixvQkFBb0I7SUFDcEIsT0FBTztJQUNQLEtBQUs7SUFDTCxRQUFRO0lBRU4sT0FBUUUsRUFBRXVDLFFBQVEsS0FBS3ZDLEVBQUVrRyxXQUFXLEdBQUc7QUFDdkM7OztHQUdDLEdBQ0g7QUFFQUMsZ0JBQWdCLEdBQUlkO0FBQ3BCYyx3QkFBd0IsR0FBR2I7QUFDM0JhLHVCQUF1QixHQUFJVDtBQUMzQlMsaUJBQWlCLEdBQUdGO0FBQ3BCRSxpQkFBaUIsR0FBR1YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaXZpbC1lbmdpbmVlcmluZy1wbGF0Zm9ybS8uL25vZGVfbW9kdWxlcy9AcGRmLWxpYi91cG5nL25vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL3RyZWVzLmpzPzY5NmQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbi8qIGVzbGludC1kaXNhYmxlIHNwYWNlLXVuYXJ5LW9wcyAqL1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy9jb21tb24nKTtcblxuLyogUHVibGljIGNvbnN0YW50cyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cblxuLy92YXIgWl9GSUxURVJFRCAgICAgICAgICA9IDE7XG4vL3ZhciBaX0hVRkZNQU5fT05MWSAgICAgID0gMjtcbi8vdmFyIFpfUkxFICAgICAgICAgICAgICAgPSAzO1xudmFyIFpfRklYRUQgICAgICAgICAgICAgICA9IDQ7XG4vL3ZhciBaX0RFRkFVTFRfU1RSQVRFR1kgID0gMDtcblxuLyogUG9zc2libGUgdmFsdWVzIG9mIHRoZSBkYXRhX3R5cGUgZmllbGQgKHRob3VnaCBzZWUgaW5mbGF0ZSgpKSAqL1xudmFyIFpfQklOQVJZICAgICAgICAgICAgICA9IDA7XG52YXIgWl9URVhUICAgICAgICAgICAgICAgID0gMTtcbi8vdmFyIFpfQVNDSUkgICAgICAgICAgICAgPSAxOyAvLyA9IFpfVEVYVFxudmFyIFpfVU5LTk9XTiAgICAgICAgICAgICA9IDI7XG5cbi8qPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cblxuZnVuY3Rpb24gemVybyhidWYpIHsgdmFyIGxlbiA9IGJ1Zi5sZW5ndGg7IHdoaWxlICgtLWxlbiA+PSAwKSB7IGJ1ZltsZW5dID0gMDsgfSB9XG5cbi8vIEZyb20genV0aWwuaFxuXG52YXIgU1RPUkVEX0JMT0NLID0gMDtcbnZhciBTVEFUSUNfVFJFRVMgPSAxO1xudmFyIERZTl9UUkVFUyAgICA9IDI7XG4vKiBUaGUgdGhyZWUga2luZHMgb2YgYmxvY2sgdHlwZSAqL1xuXG52YXIgTUlOX01BVENIICAgID0gMztcbnZhciBNQVhfTUFUQ0ggICAgPSAyNTg7XG4vKiBUaGUgbWluaW11bSBhbmQgbWF4aW11bSBtYXRjaCBsZW5ndGhzICovXG5cbi8vIEZyb20gZGVmbGF0ZS5oXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEludGVybmFsIGNvbXByZXNzaW9uIHN0YXRlLlxuICovXG5cbnZhciBMRU5HVEhfQ09ERVMgID0gMjk7XG4vKiBudW1iZXIgb2YgbGVuZ3RoIGNvZGVzLCBub3QgY291bnRpbmcgdGhlIHNwZWNpYWwgRU5EX0JMT0NLIGNvZGUgKi9cblxudmFyIExJVEVSQUxTICAgICAgPSAyNTY7XG4vKiBudW1iZXIgb2YgbGl0ZXJhbCBieXRlcyAwLi4yNTUgKi9cblxudmFyIExfQ09ERVMgICAgICAgPSBMSVRFUkFMUyArIDEgKyBMRU5HVEhfQ09ERVM7XG4vKiBudW1iZXIgb2YgTGl0ZXJhbCBvciBMZW5ndGggY29kZXMsIGluY2x1ZGluZyB0aGUgRU5EX0JMT0NLIGNvZGUgKi9cblxudmFyIERfQ09ERVMgICAgICAgPSAzMDtcbi8qIG51bWJlciBvZiBkaXN0YW5jZSBjb2RlcyAqL1xuXG52YXIgQkxfQ09ERVMgICAgICA9IDE5O1xuLyogbnVtYmVyIG9mIGNvZGVzIHVzZWQgdG8gdHJhbnNmZXIgdGhlIGJpdCBsZW5ndGhzICovXG5cbnZhciBIRUFQX1NJWkUgICAgID0gMiAqIExfQ09ERVMgKyAxO1xuLyogbWF4aW11bSBoZWFwIHNpemUgKi9cblxudmFyIE1BWF9CSVRTICAgICAgPSAxNTtcbi8qIEFsbCBjb2RlcyBtdXN0IG5vdCBleGNlZWQgTUFYX0JJVFMgYml0cyAqL1xuXG52YXIgQnVmX3NpemUgICAgICA9IDE2O1xuLyogc2l6ZSBvZiBiaXQgYnVmZmVyIGluIGJpX2J1ZiAqL1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29uc3RhbnRzXG4gKi9cblxudmFyIE1BWF9CTF9CSVRTID0gNztcbi8qIEJpdCBsZW5ndGggY29kZXMgbXVzdCBub3QgZXhjZWVkIE1BWF9CTF9CSVRTIGJpdHMgKi9cblxudmFyIEVORF9CTE9DSyAgID0gMjU2O1xuLyogZW5kIG9mIGJsb2NrIGxpdGVyYWwgY29kZSAqL1xuXG52YXIgUkVQXzNfNiAgICAgPSAxNjtcbi8qIHJlcGVhdCBwcmV2aW91cyBiaXQgbGVuZ3RoIDMtNiB0aW1lcyAoMiBiaXRzIG9mIHJlcGVhdCBjb3VudCkgKi9cblxudmFyIFJFUFpfM18xMCAgID0gMTc7XG4vKiByZXBlYXQgYSB6ZXJvIGxlbmd0aCAzLTEwIHRpbWVzICAoMyBiaXRzIG9mIHJlcGVhdCBjb3VudCkgKi9cblxudmFyIFJFUFpfMTFfMTM4ID0gMTg7XG4vKiByZXBlYXQgYSB6ZXJvIGxlbmd0aCAxMS0xMzggdGltZXMgICg3IGJpdHMgb2YgcmVwZWF0IGNvdW50KSAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBjb21tYS1zcGFjaW5nLGFycmF5LWJyYWNrZXQtc3BhY2luZyAqL1xudmFyIGV4dHJhX2xiaXRzID0gICAvKiBleHRyYSBiaXRzIGZvciBlYWNoIGxlbmd0aCBjb2RlICovXG4gIFswLDAsMCwwLDAsMCwwLDAsMSwxLDEsMSwyLDIsMiwyLDMsMywzLDMsNCw0LDQsNCw1LDUsNSw1LDBdO1xuXG52YXIgZXh0cmFfZGJpdHMgPSAgIC8qIGV4dHJhIGJpdHMgZm9yIGVhY2ggZGlzdGFuY2UgY29kZSAqL1xuICBbMCwwLDAsMCwxLDEsMiwyLDMsMyw0LDQsNSw1LDYsNiw3LDcsOCw4LDksOSwxMCwxMCwxMSwxMSwxMiwxMiwxMywxM107XG5cbnZhciBleHRyYV9ibGJpdHMgPSAgLyogZXh0cmEgYml0cyBmb3IgZWFjaCBiaXQgbGVuZ3RoIGNvZGUgKi9cbiAgWzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMiwzLDddO1xuXG52YXIgYmxfb3JkZXIgPVxuICBbMTYsMTcsMTgsMCw4LDcsOSw2LDEwLDUsMTEsNCwxMiwzLDEzLDIsMTQsMSwxNV07XG4vKiBlc2xpbnQtZW5hYmxlIGNvbW1hLXNwYWNpbmcsYXJyYXktYnJhY2tldC1zcGFjaW5nICovXG5cbi8qIFRoZSBsZW5ndGhzIG9mIHRoZSBiaXQgbGVuZ3RoIGNvZGVzIGFyZSBzZW50IGluIG9yZGVyIG9mIGRlY3JlYXNpbmdcbiAqIHByb2JhYmlsaXR5LCB0byBhdm9pZCB0cmFuc21pdHRpbmcgdGhlIGxlbmd0aHMgZm9yIHVudXNlZCBiaXQgbGVuZ3RoIGNvZGVzLlxuICovXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogTG9jYWwgZGF0YS4gVGhlc2UgYXJlIGluaXRpYWxpemVkIG9ubHkgb25jZS5cbiAqL1xuXG4vLyBXZSBwcmUtZmlsbCBhcnJheXMgd2l0aCAwIHRvIGF2b2lkIHVuaW5pdGlhbGl6ZWQgZ2Fwc1xuXG52YXIgRElTVF9DT0RFX0xFTiA9IDUxMjsgLyogc2VlIGRlZmluaXRpb24gb2YgYXJyYXkgZGlzdF9jb2RlIGJlbG93ICovXG5cbi8vICEhISEgVXNlIGZsYXQgYXJyYXkgaW5zdGVhZCBvZiBzdHJ1Y3R1cmUsIEZyZXEgPSBpKjIsIExlbiA9IGkqMisxXG52YXIgc3RhdGljX2x0cmVlICA9IG5ldyBBcnJheSgoTF9DT0RFUyArIDIpICogMik7XG56ZXJvKHN0YXRpY19sdHJlZSk7XG4vKiBUaGUgc3RhdGljIGxpdGVyYWwgdHJlZS4gU2luY2UgdGhlIGJpdCBsZW5ndGhzIGFyZSBpbXBvc2VkLCB0aGVyZSBpcyBub1xuICogbmVlZCBmb3IgdGhlIExfQ09ERVMgZXh0cmEgY29kZXMgdXNlZCBkdXJpbmcgaGVhcCBjb25zdHJ1Y3Rpb24uIEhvd2V2ZXJcbiAqIFRoZSBjb2RlcyAyODYgYW5kIDI4NyBhcmUgbmVlZGVkIHRvIGJ1aWxkIGEgY2Fub25pY2FsIHRyZWUgKHNlZSBfdHJfaW5pdFxuICogYmVsb3cpLlxuICovXG5cbnZhciBzdGF0aWNfZHRyZWUgID0gbmV3IEFycmF5KERfQ09ERVMgKiAyKTtcbnplcm8oc3RhdGljX2R0cmVlKTtcbi8qIFRoZSBzdGF0aWMgZGlzdGFuY2UgdHJlZS4gKEFjdHVhbGx5IGEgdHJpdmlhbCB0cmVlIHNpbmNlIGFsbCBjb2RlcyB1c2VcbiAqIDUgYml0cy4pXG4gKi9cblxudmFyIF9kaXN0X2NvZGUgICAgPSBuZXcgQXJyYXkoRElTVF9DT0RFX0xFTik7XG56ZXJvKF9kaXN0X2NvZGUpO1xuLyogRGlzdGFuY2UgY29kZXMuIFRoZSBmaXJzdCAyNTYgdmFsdWVzIGNvcnJlc3BvbmQgdG8gdGhlIGRpc3RhbmNlc1xuICogMyAuLiAyNTgsIHRoZSBsYXN0IDI1NiB2YWx1ZXMgY29ycmVzcG9uZCB0byB0aGUgdG9wIDggYml0cyBvZlxuICogdGhlIDE1IGJpdCBkaXN0YW5jZXMuXG4gKi9cblxudmFyIF9sZW5ndGhfY29kZSAgPSBuZXcgQXJyYXkoTUFYX01BVENIIC0gTUlOX01BVENIICsgMSk7XG56ZXJvKF9sZW5ndGhfY29kZSk7XG4vKiBsZW5ndGggY29kZSBmb3IgZWFjaCBub3JtYWxpemVkIG1hdGNoIGxlbmd0aCAoMCA9PSBNSU5fTUFUQ0gpICovXG5cbnZhciBiYXNlX2xlbmd0aCAgID0gbmV3IEFycmF5KExFTkdUSF9DT0RFUyk7XG56ZXJvKGJhc2VfbGVuZ3RoKTtcbi8qIEZpcnN0IG5vcm1hbGl6ZWQgbGVuZ3RoIGZvciBlYWNoIGNvZGUgKDAgPSBNSU5fTUFUQ0gpICovXG5cbnZhciBiYXNlX2Rpc3QgICAgID0gbmV3IEFycmF5KERfQ09ERVMpO1xuemVybyhiYXNlX2Rpc3QpO1xuLyogRmlyc3Qgbm9ybWFsaXplZCBkaXN0YW5jZSBmb3IgZWFjaCBjb2RlICgwID0gZGlzdGFuY2Ugb2YgMSkgKi9cblxuXG5mdW5jdGlvbiBTdGF0aWNUcmVlRGVzYyhzdGF0aWNfdHJlZSwgZXh0cmFfYml0cywgZXh0cmFfYmFzZSwgZWxlbXMsIG1heF9sZW5ndGgpIHtcblxuICB0aGlzLnN0YXRpY190cmVlICA9IHN0YXRpY190cmVlOyAgLyogc3RhdGljIHRyZWUgb3IgTlVMTCAqL1xuICB0aGlzLmV4dHJhX2JpdHMgICA9IGV4dHJhX2JpdHM7ICAgLyogZXh0cmEgYml0cyBmb3IgZWFjaCBjb2RlIG9yIE5VTEwgKi9cbiAgdGhpcy5leHRyYV9iYXNlICAgPSBleHRyYV9iYXNlOyAgIC8qIGJhc2UgaW5kZXggZm9yIGV4dHJhX2JpdHMgKi9cbiAgdGhpcy5lbGVtcyAgICAgICAgPSBlbGVtczsgICAgICAgIC8qIG1heCBudW1iZXIgb2YgZWxlbWVudHMgaW4gdGhlIHRyZWUgKi9cbiAgdGhpcy5tYXhfbGVuZ3RoICAgPSBtYXhfbGVuZ3RoOyAgIC8qIG1heCBiaXQgbGVuZ3RoIGZvciB0aGUgY29kZXMgKi9cblxuICAvLyBzaG93IGlmIGBzdGF0aWNfdHJlZWAgaGFzIGRhdGEgb3IgZHVtbXkgLSBuZWVkZWQgZm9yIG1vbm9tb3JwaGljIG9iamVjdHNcbiAgdGhpcy5oYXNfc3RyZWUgICAgPSBzdGF0aWNfdHJlZSAmJiBzdGF0aWNfdHJlZS5sZW5ndGg7XG59XG5cblxudmFyIHN0YXRpY19sX2Rlc2M7XG52YXIgc3RhdGljX2RfZGVzYztcbnZhciBzdGF0aWNfYmxfZGVzYztcblxuXG5mdW5jdGlvbiBUcmVlRGVzYyhkeW5fdHJlZSwgc3RhdF9kZXNjKSB7XG4gIHRoaXMuZHluX3RyZWUgPSBkeW5fdHJlZTsgICAgIC8qIHRoZSBkeW5hbWljIHRyZWUgKi9cbiAgdGhpcy5tYXhfY29kZSA9IDA7ICAgICAgICAgICAgLyogbGFyZ2VzdCBjb2RlIHdpdGggbm9uIHplcm8gZnJlcXVlbmN5ICovXG4gIHRoaXMuc3RhdF9kZXNjID0gc3RhdF9kZXNjOyAgIC8qIHRoZSBjb3JyZXNwb25kaW5nIHN0YXRpYyB0cmVlICovXG59XG5cblxuXG5mdW5jdGlvbiBkX2NvZGUoZGlzdCkge1xuICByZXR1cm4gZGlzdCA8IDI1NiA/IF9kaXN0X2NvZGVbZGlzdF0gOiBfZGlzdF9jb2RlWzI1NiArIChkaXN0ID4+PiA3KV07XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBPdXRwdXQgYSBzaG9ydCBMU0IgZmlyc3Qgb24gdGhlIHN0cmVhbS5cbiAqIElOIGFzc2VydGlvbjogdGhlcmUgaXMgZW5vdWdoIHJvb20gaW4gcGVuZGluZ0J1Zi5cbiAqL1xuZnVuY3Rpb24gcHV0X3Nob3J0KHMsIHcpIHtcbi8vICAgIHB1dF9ieXRlKHMsICh1Y2gpKCh3KSAmIDB4ZmYpKTtcbi8vICAgIHB1dF9ieXRlKHMsICh1Y2gpKCh1c2gpKHcpID4+IDgpKTtcbiAgcy5wZW5kaW5nX2J1ZltzLnBlbmRpbmcrK10gPSAodykgJiAweGZmO1xuICBzLnBlbmRpbmdfYnVmW3MucGVuZGluZysrXSA9ICh3ID4+PiA4KSAmIDB4ZmY7XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBTZW5kIGEgdmFsdWUgb24gYSBnaXZlbiBudW1iZXIgb2YgYml0cy5cbiAqIElOIGFzc2VydGlvbjogbGVuZ3RoIDw9IDE2IGFuZCB2YWx1ZSBmaXRzIGluIGxlbmd0aCBiaXRzLlxuICovXG5mdW5jdGlvbiBzZW5kX2JpdHMocywgdmFsdWUsIGxlbmd0aCkge1xuICBpZiAocy5iaV92YWxpZCA+IChCdWZfc2l6ZSAtIGxlbmd0aCkpIHtcbiAgICBzLmJpX2J1ZiB8PSAodmFsdWUgPDwgcy5iaV92YWxpZCkgJiAweGZmZmY7XG4gICAgcHV0X3Nob3J0KHMsIHMuYmlfYnVmKTtcbiAgICBzLmJpX2J1ZiA9IHZhbHVlID4+IChCdWZfc2l6ZSAtIHMuYmlfdmFsaWQpO1xuICAgIHMuYmlfdmFsaWQgKz0gbGVuZ3RoIC0gQnVmX3NpemU7XG4gIH0gZWxzZSB7XG4gICAgcy5iaV9idWYgfD0gKHZhbHVlIDw8IHMuYmlfdmFsaWQpICYgMHhmZmZmO1xuICAgIHMuYmlfdmFsaWQgKz0gbGVuZ3RoO1xuICB9XG59XG5cblxuZnVuY3Rpb24gc2VuZF9jb2RlKHMsIGMsIHRyZWUpIHtcbiAgc2VuZF9iaXRzKHMsIHRyZWVbYyAqIDJdLyouQ29kZSovLCB0cmVlW2MgKiAyICsgMV0vKi5MZW4qLyk7XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBSZXZlcnNlIHRoZSBmaXJzdCBsZW4gYml0cyBvZiBhIGNvZGUsIHVzaW5nIHN0cmFpZ2h0Zm9yd2FyZCBjb2RlIChhIGZhc3RlclxuICogbWV0aG9kIHdvdWxkIHVzZSBhIHRhYmxlKVxuICogSU4gYXNzZXJ0aW9uOiAxIDw9IGxlbiA8PSAxNVxuICovXG5mdW5jdGlvbiBiaV9yZXZlcnNlKGNvZGUsIGxlbikge1xuICB2YXIgcmVzID0gMDtcbiAgZG8ge1xuICAgIHJlcyB8PSBjb2RlICYgMTtcbiAgICBjb2RlID4+Pj0gMTtcbiAgICByZXMgPDw9IDE7XG4gIH0gd2hpbGUgKC0tbGVuID4gMCk7XG4gIHJldHVybiByZXMgPj4+IDE7XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBGbHVzaCB0aGUgYml0IGJ1ZmZlciwga2VlcGluZyBhdCBtb3N0IDcgYml0cyBpbiBpdC5cbiAqL1xuZnVuY3Rpb24gYmlfZmx1c2gocykge1xuICBpZiAocy5iaV92YWxpZCA9PT0gMTYpIHtcbiAgICBwdXRfc2hvcnQocywgcy5iaV9idWYpO1xuICAgIHMuYmlfYnVmID0gMDtcbiAgICBzLmJpX3ZhbGlkID0gMDtcblxuICB9IGVsc2UgaWYgKHMuYmlfdmFsaWQgPj0gOCkge1xuICAgIHMucGVuZGluZ19idWZbcy5wZW5kaW5nKytdID0gcy5iaV9idWYgJiAweGZmO1xuICAgIHMuYmlfYnVmID4+PSA4O1xuICAgIHMuYmlfdmFsaWQgLT0gODtcbiAgfVxufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29tcHV0ZSB0aGUgb3B0aW1hbCBiaXQgbGVuZ3RocyBmb3IgYSB0cmVlIGFuZCB1cGRhdGUgdGhlIHRvdGFsIGJpdCBsZW5ndGhcbiAqIGZvciB0aGUgY3VycmVudCBibG9jay5cbiAqIElOIGFzc2VydGlvbjogdGhlIGZpZWxkcyBmcmVxIGFuZCBkYWQgYXJlIHNldCwgaGVhcFtoZWFwX21heF0gYW5kXG4gKiAgICBhYm92ZSBhcmUgdGhlIHRyZWUgbm9kZXMgc29ydGVkIGJ5IGluY3JlYXNpbmcgZnJlcXVlbmN5LlxuICogT1VUIGFzc2VydGlvbnM6IHRoZSBmaWVsZCBsZW4gaXMgc2V0IHRvIHRoZSBvcHRpbWFsIGJpdCBsZW5ndGgsIHRoZVxuICogICAgIGFycmF5IGJsX2NvdW50IGNvbnRhaW5zIHRoZSBmcmVxdWVuY2llcyBmb3IgZWFjaCBiaXQgbGVuZ3RoLlxuICogICAgIFRoZSBsZW5ndGggb3B0X2xlbiBpcyB1cGRhdGVkOyBzdGF0aWNfbGVuIGlzIGFsc28gdXBkYXRlZCBpZiBzdHJlZSBpc1xuICogICAgIG5vdCBudWxsLlxuICovXG5mdW5jdGlvbiBnZW5fYml0bGVuKHMsIGRlc2MpXG4vLyAgICBkZWZsYXRlX3N0YXRlICpzO1xuLy8gICAgdHJlZV9kZXNjICpkZXNjOyAgICAvKiB0aGUgdHJlZSBkZXNjcmlwdG9yICovXG57XG4gIHZhciB0cmVlICAgICAgICAgICAgPSBkZXNjLmR5bl90cmVlO1xuICB2YXIgbWF4X2NvZGUgICAgICAgID0gZGVzYy5tYXhfY29kZTtcbiAgdmFyIHN0cmVlICAgICAgICAgICA9IGRlc2Muc3RhdF9kZXNjLnN0YXRpY190cmVlO1xuICB2YXIgaGFzX3N0cmVlICAgICAgID0gZGVzYy5zdGF0X2Rlc2MuaGFzX3N0cmVlO1xuICB2YXIgZXh0cmEgICAgICAgICAgID0gZGVzYy5zdGF0X2Rlc2MuZXh0cmFfYml0cztcbiAgdmFyIGJhc2UgICAgICAgICAgICA9IGRlc2Muc3RhdF9kZXNjLmV4dHJhX2Jhc2U7XG4gIHZhciBtYXhfbGVuZ3RoICAgICAgPSBkZXNjLnN0YXRfZGVzYy5tYXhfbGVuZ3RoO1xuICB2YXIgaDsgICAgICAgICAgICAgIC8qIGhlYXAgaW5kZXggKi9cbiAgdmFyIG4sIG07ICAgICAgICAgICAvKiBpdGVyYXRlIG92ZXIgdGhlIHRyZWUgZWxlbWVudHMgKi9cbiAgdmFyIGJpdHM7ICAgICAgICAgICAvKiBiaXQgbGVuZ3RoICovXG4gIHZhciB4Yml0czsgICAgICAgICAgLyogZXh0cmEgYml0cyAqL1xuICB2YXIgZjsgICAgICAgICAgICAgIC8qIGZyZXF1ZW5jeSAqL1xuICB2YXIgb3ZlcmZsb3cgPSAwOyAgIC8qIG51bWJlciBvZiBlbGVtZW50cyB3aXRoIGJpdCBsZW5ndGggdG9vIGxhcmdlICovXG5cbiAgZm9yIChiaXRzID0gMDsgYml0cyA8PSBNQVhfQklUUzsgYml0cysrKSB7XG4gICAgcy5ibF9jb3VudFtiaXRzXSA9IDA7XG4gIH1cblxuICAvKiBJbiBhIGZpcnN0IHBhc3MsIGNvbXB1dGUgdGhlIG9wdGltYWwgYml0IGxlbmd0aHMgKHdoaWNoIG1heVxuICAgKiBvdmVyZmxvdyBpbiB0aGUgY2FzZSBvZiB0aGUgYml0IGxlbmd0aCB0cmVlKS5cbiAgICovXG4gIHRyZWVbcy5oZWFwW3MuaGVhcF9tYXhdICogMiArIDFdLyouTGVuKi8gPSAwOyAvKiByb290IG9mIHRoZSBoZWFwICovXG5cbiAgZm9yIChoID0gcy5oZWFwX21heCArIDE7IGggPCBIRUFQX1NJWkU7IGgrKykge1xuICAgIG4gPSBzLmhlYXBbaF07XG4gICAgYml0cyA9IHRyZWVbdHJlZVtuICogMiArIDFdLyouRGFkKi8gKiAyICsgMV0vKi5MZW4qLyArIDE7XG4gICAgaWYgKGJpdHMgPiBtYXhfbGVuZ3RoKSB7XG4gICAgICBiaXRzID0gbWF4X2xlbmd0aDtcbiAgICAgIG92ZXJmbG93Kys7XG4gICAgfVxuICAgIHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovID0gYml0cztcbiAgICAvKiBXZSBvdmVyd3JpdGUgdHJlZVtuXS5EYWQgd2hpY2ggaXMgbm8gbG9uZ2VyIG5lZWRlZCAqL1xuXG4gICAgaWYgKG4gPiBtYXhfY29kZSkgeyBjb250aW51ZTsgfSAvKiBub3QgYSBsZWFmIG5vZGUgKi9cblxuICAgIHMuYmxfY291bnRbYml0c10rKztcbiAgICB4Yml0cyA9IDA7XG4gICAgaWYgKG4gPj0gYmFzZSkge1xuICAgICAgeGJpdHMgPSBleHRyYVtuIC0gYmFzZV07XG4gICAgfVxuICAgIGYgPSB0cmVlW24gKiAyXS8qLkZyZXEqLztcbiAgICBzLm9wdF9sZW4gKz0gZiAqIChiaXRzICsgeGJpdHMpO1xuICAgIGlmIChoYXNfc3RyZWUpIHtcbiAgICAgIHMuc3RhdGljX2xlbiArPSBmICogKHN0cmVlW24gKiAyICsgMV0vKi5MZW4qLyArIHhiaXRzKTtcbiAgICB9XG4gIH1cbiAgaWYgKG92ZXJmbG93ID09PSAwKSB7IHJldHVybjsgfVxuXG4gIC8vIFRyYWNlKChzdGRlcnIsXCJcXG5iaXQgbGVuZ3RoIG92ZXJmbG93XFxuXCIpKTtcbiAgLyogVGhpcyBoYXBwZW5zIGZvciBleGFtcGxlIG9uIG9iajIgYW5kIHBpYyBvZiB0aGUgQ2FsZ2FyeSBjb3JwdXMgKi9cblxuICAvKiBGaW5kIHRoZSBmaXJzdCBiaXQgbGVuZ3RoIHdoaWNoIGNvdWxkIGluY3JlYXNlOiAqL1xuICBkbyB7XG4gICAgYml0cyA9IG1heF9sZW5ndGggLSAxO1xuICAgIHdoaWxlIChzLmJsX2NvdW50W2JpdHNdID09PSAwKSB7IGJpdHMtLTsgfVxuICAgIHMuYmxfY291bnRbYml0c10tLTsgICAgICAvKiBtb3ZlIG9uZSBsZWFmIGRvd24gdGhlIHRyZWUgKi9cbiAgICBzLmJsX2NvdW50W2JpdHMgKyAxXSArPSAyOyAvKiBtb3ZlIG9uZSBvdmVyZmxvdyBpdGVtIGFzIGl0cyBicm90aGVyICovXG4gICAgcy5ibF9jb3VudFttYXhfbGVuZ3RoXS0tO1xuICAgIC8qIFRoZSBicm90aGVyIG9mIHRoZSBvdmVyZmxvdyBpdGVtIGFsc28gbW92ZXMgb25lIHN0ZXAgdXAsXG4gICAgICogYnV0IHRoaXMgZG9lcyBub3QgYWZmZWN0IGJsX2NvdW50W21heF9sZW5ndGhdXG4gICAgICovXG4gICAgb3ZlcmZsb3cgLT0gMjtcbiAgfSB3aGlsZSAob3ZlcmZsb3cgPiAwKTtcblxuICAvKiBOb3cgcmVjb21wdXRlIGFsbCBiaXQgbGVuZ3Rocywgc2Nhbm5pbmcgaW4gaW5jcmVhc2luZyBmcmVxdWVuY3kuXG4gICAqIGggaXMgc3RpbGwgZXF1YWwgdG8gSEVBUF9TSVpFLiAoSXQgaXMgc2ltcGxlciB0byByZWNvbnN0cnVjdCBhbGxcbiAgICogbGVuZ3RocyBpbnN0ZWFkIG9mIGZpeGluZyBvbmx5IHRoZSB3cm9uZyBvbmVzLiBUaGlzIGlkZWEgaXMgdGFrZW5cbiAgICogZnJvbSAnYXInIHdyaXR0ZW4gYnkgSGFydWhpa28gT2t1bXVyYS4pXG4gICAqL1xuICBmb3IgKGJpdHMgPSBtYXhfbGVuZ3RoOyBiaXRzICE9PSAwOyBiaXRzLS0pIHtcbiAgICBuID0gcy5ibF9jb3VudFtiaXRzXTtcbiAgICB3aGlsZSAobiAhPT0gMCkge1xuICAgICAgbSA9IHMuaGVhcFstLWhdO1xuICAgICAgaWYgKG0gPiBtYXhfY29kZSkgeyBjb250aW51ZTsgfVxuICAgICAgaWYgKHRyZWVbbSAqIDIgKyAxXS8qLkxlbiovICE9PSBiaXRzKSB7XG4gICAgICAgIC8vIFRyYWNlKChzdGRlcnIsXCJjb2RlICVkIGJpdHMgJWQtPiVkXFxuXCIsIG0sIHRyZWVbbV0uTGVuLCBiaXRzKSk7XG4gICAgICAgIHMub3B0X2xlbiArPSAoYml0cyAtIHRyZWVbbSAqIDIgKyAxXS8qLkxlbiovKSAqIHRyZWVbbSAqIDJdLyouRnJlcSovO1xuICAgICAgICB0cmVlW20gKiAyICsgMV0vKi5MZW4qLyA9IGJpdHM7XG4gICAgICB9XG4gICAgICBuLS07XG4gICAgfVxuICB9XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBHZW5lcmF0ZSB0aGUgY29kZXMgZm9yIGEgZ2l2ZW4gdHJlZSBhbmQgYml0IGNvdW50cyAod2hpY2ggbmVlZCBub3QgYmVcbiAqIG9wdGltYWwpLlxuICogSU4gYXNzZXJ0aW9uOiB0aGUgYXJyYXkgYmxfY291bnQgY29udGFpbnMgdGhlIGJpdCBsZW5ndGggc3RhdGlzdGljcyBmb3JcbiAqIHRoZSBnaXZlbiB0cmVlIGFuZCB0aGUgZmllbGQgbGVuIGlzIHNldCBmb3IgYWxsIHRyZWUgZWxlbWVudHMuXG4gKiBPVVQgYXNzZXJ0aW9uOiB0aGUgZmllbGQgY29kZSBpcyBzZXQgZm9yIGFsbCB0cmVlIGVsZW1lbnRzIG9mIG5vblxuICogICAgIHplcm8gY29kZSBsZW5ndGguXG4gKi9cbmZ1bmN0aW9uIGdlbl9jb2Rlcyh0cmVlLCBtYXhfY29kZSwgYmxfY291bnQpXG4vLyAgICBjdF9kYXRhICp0cmVlOyAgICAgICAgICAgICAvKiB0aGUgdHJlZSB0byBkZWNvcmF0ZSAqL1xuLy8gICAgaW50IG1heF9jb2RlOyAgICAgICAgICAgICAgLyogbGFyZ2VzdCBjb2RlIHdpdGggbm9uIHplcm8gZnJlcXVlbmN5ICovXG4vLyAgICB1c2hmICpibF9jb3VudDsgICAgICAgICAgICAvKiBudW1iZXIgb2YgY29kZXMgYXQgZWFjaCBiaXQgbGVuZ3RoICovXG57XG4gIHZhciBuZXh0X2NvZGUgPSBuZXcgQXJyYXkoTUFYX0JJVFMgKyAxKTsgLyogbmV4dCBjb2RlIHZhbHVlIGZvciBlYWNoIGJpdCBsZW5ndGggKi9cbiAgdmFyIGNvZGUgPSAwOyAgICAgICAgICAgICAgLyogcnVubmluZyBjb2RlIHZhbHVlICovXG4gIHZhciBiaXRzOyAgICAgICAgICAgICAgICAgIC8qIGJpdCBpbmRleCAqL1xuICB2YXIgbjsgICAgICAgICAgICAgICAgICAgICAvKiBjb2RlIGluZGV4ICovXG5cbiAgLyogVGhlIGRpc3RyaWJ1dGlvbiBjb3VudHMgYXJlIGZpcnN0IHVzZWQgdG8gZ2VuZXJhdGUgdGhlIGNvZGUgdmFsdWVzXG4gICAqIHdpdGhvdXQgYml0IHJldmVyc2FsLlxuICAgKi9cbiAgZm9yIChiaXRzID0gMTsgYml0cyA8PSBNQVhfQklUUzsgYml0cysrKSB7XG4gICAgbmV4dF9jb2RlW2JpdHNdID0gY29kZSA9IChjb2RlICsgYmxfY291bnRbYml0cyAtIDFdKSA8PCAxO1xuICB9XG4gIC8qIENoZWNrIHRoYXQgdGhlIGJpdCBjb3VudHMgaW4gYmxfY291bnQgYXJlIGNvbnNpc3RlbnQuIFRoZSBsYXN0IGNvZGVcbiAgICogbXVzdCBiZSBhbGwgb25lcy5cbiAgICovXG4gIC8vQXNzZXJ0IChjb2RlICsgYmxfY291bnRbTUFYX0JJVFNdLTEgPT0gKDE8PE1BWF9CSVRTKS0xLFxuICAvLyAgICAgICAgXCJpbmNvbnNpc3RlbnQgYml0IGNvdW50c1wiKTtcbiAgLy9UcmFjZXYoKHN0ZGVycixcIlxcbmdlbl9jb2RlczogbWF4X2NvZGUgJWQgXCIsIG1heF9jb2RlKSk7XG5cbiAgZm9yIChuID0gMDsgIG4gPD0gbWF4X2NvZGU7IG4rKykge1xuICAgIHZhciBsZW4gPSB0cmVlW24gKiAyICsgMV0vKi5MZW4qLztcbiAgICBpZiAobGVuID09PSAwKSB7IGNvbnRpbnVlOyB9XG4gICAgLyogTm93IHJldmVyc2UgdGhlIGJpdHMgKi9cbiAgICB0cmVlW24gKiAyXS8qLkNvZGUqLyA9IGJpX3JldmVyc2UobmV4dF9jb2RlW2xlbl0rKywgbGVuKTtcblxuICAgIC8vVHJhY2Vjdih0cmVlICE9IHN0YXRpY19sdHJlZSwgKHN0ZGVycixcIlxcbm4gJTNkICVjIGwgJTJkIGMgJTR4ICgleCkgXCIsXG4gICAgLy8gICAgIG4sIChpc2dyYXBoKG4pID8gbiA6ICcgJyksIGxlbiwgdHJlZVtuXS5Db2RlLCBuZXh0X2NvZGVbbGVuXS0xKSk7XG4gIH1cbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEluaXRpYWxpemUgdGhlIHZhcmlvdXMgJ2NvbnN0YW50JyB0YWJsZXMuXG4gKi9cbmZ1bmN0aW9uIHRyX3N0YXRpY19pbml0KCkge1xuICB2YXIgbjsgICAgICAgIC8qIGl0ZXJhdGVzIG92ZXIgdHJlZSBlbGVtZW50cyAqL1xuICB2YXIgYml0czsgICAgIC8qIGJpdCBjb3VudGVyICovXG4gIHZhciBsZW5ndGg7ICAgLyogbGVuZ3RoIHZhbHVlICovXG4gIHZhciBjb2RlOyAgICAgLyogY29kZSB2YWx1ZSAqL1xuICB2YXIgZGlzdDsgICAgIC8qIGRpc3RhbmNlIGluZGV4ICovXG4gIHZhciBibF9jb3VudCA9IG5ldyBBcnJheShNQVhfQklUUyArIDEpO1xuICAvKiBudW1iZXIgb2YgY29kZXMgYXQgZWFjaCBiaXQgbGVuZ3RoIGZvciBhbiBvcHRpbWFsIHRyZWUgKi9cblxuICAvLyBkbyBjaGVjayBpbiBfdHJfaW5pdCgpXG4gIC8vaWYgKHN0YXRpY19pbml0X2RvbmUpIHJldHVybjtcblxuICAvKiBGb3Igc29tZSBlbWJlZGRlZCB0YXJnZXRzLCBnbG9iYWwgdmFyaWFibGVzIGFyZSBub3QgaW5pdGlhbGl6ZWQ6ICovXG4vKiNpZmRlZiBOT19JTklUX0dMT0JBTF9QT0lOVEVSU1xuICBzdGF0aWNfbF9kZXNjLnN0YXRpY190cmVlID0gc3RhdGljX2x0cmVlO1xuICBzdGF0aWNfbF9kZXNjLmV4dHJhX2JpdHMgPSBleHRyYV9sYml0cztcbiAgc3RhdGljX2RfZGVzYy5zdGF0aWNfdHJlZSA9IHN0YXRpY19kdHJlZTtcbiAgc3RhdGljX2RfZGVzYy5leHRyYV9iaXRzID0gZXh0cmFfZGJpdHM7XG4gIHN0YXRpY19ibF9kZXNjLmV4dHJhX2JpdHMgPSBleHRyYV9ibGJpdHM7XG4jZW5kaWYqL1xuXG4gIC8qIEluaXRpYWxpemUgdGhlIG1hcHBpbmcgbGVuZ3RoICgwLi4yNTUpIC0+IGxlbmd0aCBjb2RlICgwLi4yOCkgKi9cbiAgbGVuZ3RoID0gMDtcbiAgZm9yIChjb2RlID0gMDsgY29kZSA8IExFTkdUSF9DT0RFUyAtIDE7IGNvZGUrKykge1xuICAgIGJhc2VfbGVuZ3RoW2NvZGVdID0gbGVuZ3RoO1xuICAgIGZvciAobiA9IDA7IG4gPCAoMSA8PCBleHRyYV9sYml0c1tjb2RlXSk7IG4rKykge1xuICAgICAgX2xlbmd0aF9jb2RlW2xlbmd0aCsrXSA9IGNvZGU7XG4gICAgfVxuICB9XG4gIC8vQXNzZXJ0IChsZW5ndGggPT0gMjU2LCBcInRyX3N0YXRpY19pbml0OiBsZW5ndGggIT0gMjU2XCIpO1xuICAvKiBOb3RlIHRoYXQgdGhlIGxlbmd0aCAyNTUgKG1hdGNoIGxlbmd0aCAyNTgpIGNhbiBiZSByZXByZXNlbnRlZFxuICAgKiBpbiB0d28gZGlmZmVyZW50IHdheXM6IGNvZGUgMjg0ICsgNSBiaXRzIG9yIGNvZGUgMjg1LCBzbyB3ZVxuICAgKiBvdmVyd3JpdGUgbGVuZ3RoX2NvZGVbMjU1XSB0byB1c2UgdGhlIGJlc3QgZW5jb2Rpbmc6XG4gICAqL1xuICBfbGVuZ3RoX2NvZGVbbGVuZ3RoIC0gMV0gPSBjb2RlO1xuXG4gIC8qIEluaXRpYWxpemUgdGhlIG1hcHBpbmcgZGlzdCAoMC4uMzJLKSAtPiBkaXN0IGNvZGUgKDAuLjI5KSAqL1xuICBkaXN0ID0gMDtcbiAgZm9yIChjb2RlID0gMDsgY29kZSA8IDE2OyBjb2RlKyspIHtcbiAgICBiYXNlX2Rpc3RbY29kZV0gPSBkaXN0O1xuICAgIGZvciAobiA9IDA7IG4gPCAoMSA8PCBleHRyYV9kYml0c1tjb2RlXSk7IG4rKykge1xuICAgICAgX2Rpc3RfY29kZVtkaXN0KytdID0gY29kZTtcbiAgICB9XG4gIH1cbiAgLy9Bc3NlcnQgKGRpc3QgPT0gMjU2LCBcInRyX3N0YXRpY19pbml0OiBkaXN0ICE9IDI1NlwiKTtcbiAgZGlzdCA+Pj0gNzsgLyogZnJvbSBub3cgb24sIGFsbCBkaXN0YW5jZXMgYXJlIGRpdmlkZWQgYnkgMTI4ICovXG4gIGZvciAoOyBjb2RlIDwgRF9DT0RFUzsgY29kZSsrKSB7XG4gICAgYmFzZV9kaXN0W2NvZGVdID0gZGlzdCA8PCA3O1xuICAgIGZvciAobiA9IDA7IG4gPCAoMSA8PCAoZXh0cmFfZGJpdHNbY29kZV0gLSA3KSk7IG4rKykge1xuICAgICAgX2Rpc3RfY29kZVsyNTYgKyBkaXN0KytdID0gY29kZTtcbiAgICB9XG4gIH1cbiAgLy9Bc3NlcnQgKGRpc3QgPT0gMjU2LCBcInRyX3N0YXRpY19pbml0OiAyNTYrZGlzdCAhPSA1MTJcIik7XG5cbiAgLyogQ29uc3RydWN0IHRoZSBjb2RlcyBvZiB0aGUgc3RhdGljIGxpdGVyYWwgdHJlZSAqL1xuICBmb3IgKGJpdHMgPSAwOyBiaXRzIDw9IE1BWF9CSVRTOyBiaXRzKyspIHtcbiAgICBibF9jb3VudFtiaXRzXSA9IDA7XG4gIH1cblxuICBuID0gMDtcbiAgd2hpbGUgKG4gPD0gMTQzKSB7XG4gICAgc3RhdGljX2x0cmVlW24gKiAyICsgMV0vKi5MZW4qLyA9IDg7XG4gICAgbisrO1xuICAgIGJsX2NvdW50WzhdKys7XG4gIH1cbiAgd2hpbGUgKG4gPD0gMjU1KSB7XG4gICAgc3RhdGljX2x0cmVlW24gKiAyICsgMV0vKi5MZW4qLyA9IDk7XG4gICAgbisrO1xuICAgIGJsX2NvdW50WzldKys7XG4gIH1cbiAgd2hpbGUgKG4gPD0gMjc5KSB7XG4gICAgc3RhdGljX2x0cmVlW24gKiAyICsgMV0vKi5MZW4qLyA9IDc7XG4gICAgbisrO1xuICAgIGJsX2NvdW50WzddKys7XG4gIH1cbiAgd2hpbGUgKG4gPD0gMjg3KSB7XG4gICAgc3RhdGljX2x0cmVlW24gKiAyICsgMV0vKi5MZW4qLyA9IDg7XG4gICAgbisrO1xuICAgIGJsX2NvdW50WzhdKys7XG4gIH1cbiAgLyogQ29kZXMgMjg2IGFuZCAyODcgZG8gbm90IGV4aXN0LCBidXQgd2UgbXVzdCBpbmNsdWRlIHRoZW0gaW4gdGhlXG4gICAqIHRyZWUgY29uc3RydWN0aW9uIHRvIGdldCBhIGNhbm9uaWNhbCBIdWZmbWFuIHRyZWUgKGxvbmdlc3QgY29kZVxuICAgKiBhbGwgb25lcylcbiAgICovXG4gIGdlbl9jb2RlcyhzdGF0aWNfbHRyZWUsIExfQ09ERVMgKyAxLCBibF9jb3VudCk7XG5cbiAgLyogVGhlIHN0YXRpYyBkaXN0YW5jZSB0cmVlIGlzIHRyaXZpYWw6ICovXG4gIGZvciAobiA9IDA7IG4gPCBEX0NPREVTOyBuKyspIHtcbiAgICBzdGF0aWNfZHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovID0gNTtcbiAgICBzdGF0aWNfZHRyZWVbbiAqIDJdLyouQ29kZSovID0gYmlfcmV2ZXJzZShuLCA1KTtcbiAgfVxuXG4gIC8vIE5vdyBkYXRhIHJlYWR5IGFuZCB3ZSBjYW4gaW5pdCBzdGF0aWMgdHJlZXNcbiAgc3RhdGljX2xfZGVzYyA9IG5ldyBTdGF0aWNUcmVlRGVzYyhzdGF0aWNfbHRyZWUsIGV4dHJhX2xiaXRzLCBMSVRFUkFMUyArIDEsIExfQ09ERVMsIE1BWF9CSVRTKTtcbiAgc3RhdGljX2RfZGVzYyA9IG5ldyBTdGF0aWNUcmVlRGVzYyhzdGF0aWNfZHRyZWUsIGV4dHJhX2RiaXRzLCAwLCAgICAgICAgICBEX0NPREVTLCBNQVhfQklUUyk7XG4gIHN0YXRpY19ibF9kZXNjID0gbmV3IFN0YXRpY1RyZWVEZXNjKG5ldyBBcnJheSgwKSwgZXh0cmFfYmxiaXRzLCAwLCAgICAgICAgIEJMX0NPREVTLCBNQVhfQkxfQklUUyk7XG5cbiAgLy9zdGF0aWNfaW5pdF9kb25lID0gdHJ1ZTtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEluaXRpYWxpemUgYSBuZXcgYmxvY2suXG4gKi9cbmZ1bmN0aW9uIGluaXRfYmxvY2socykge1xuICB2YXIgbjsgLyogaXRlcmF0ZXMgb3ZlciB0cmVlIGVsZW1lbnRzICovXG5cbiAgLyogSW5pdGlhbGl6ZSB0aGUgdHJlZXMuICovXG4gIGZvciAobiA9IDA7IG4gPCBMX0NPREVTOyAgbisrKSB7IHMuZHluX2x0cmVlW24gKiAyXS8qLkZyZXEqLyA9IDA7IH1cbiAgZm9yIChuID0gMDsgbiA8IERfQ09ERVM7ICBuKyspIHsgcy5keW5fZHRyZWVbbiAqIDJdLyouRnJlcSovID0gMDsgfVxuICBmb3IgKG4gPSAwOyBuIDwgQkxfQ09ERVM7IG4rKykgeyBzLmJsX3RyZWVbbiAqIDJdLyouRnJlcSovID0gMDsgfVxuXG4gIHMuZHluX2x0cmVlW0VORF9CTE9DSyAqIDJdLyouRnJlcSovID0gMTtcbiAgcy5vcHRfbGVuID0gcy5zdGF0aWNfbGVuID0gMDtcbiAgcy5sYXN0X2xpdCA9IHMubWF0Y2hlcyA9IDA7XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBGbHVzaCB0aGUgYml0IGJ1ZmZlciBhbmQgYWxpZ24gdGhlIG91dHB1dCBvbiBhIGJ5dGUgYm91bmRhcnlcbiAqL1xuZnVuY3Rpb24gYmlfd2luZHVwKHMpXG57XG4gIGlmIChzLmJpX3ZhbGlkID4gOCkge1xuICAgIHB1dF9zaG9ydChzLCBzLmJpX2J1Zik7XG4gIH0gZWxzZSBpZiAocy5iaV92YWxpZCA+IDApIHtcbiAgICAvL3B1dF9ieXRlKHMsIChCeXRlKXMtPmJpX2J1Zik7XG4gICAgcy5wZW5kaW5nX2J1ZltzLnBlbmRpbmcrK10gPSBzLmJpX2J1ZjtcbiAgfVxuICBzLmJpX2J1ZiA9IDA7XG4gIHMuYmlfdmFsaWQgPSAwO1xufVxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHkgYSBzdG9yZWQgYmxvY2ssIHN0b3JpbmcgZmlyc3QgdGhlIGxlbmd0aCBhbmQgaXRzXG4gKiBvbmUncyBjb21wbGVtZW50IGlmIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gY29weV9ibG9jayhzLCBidWYsIGxlbiwgaGVhZGVyKVxuLy9EZWZsYXRlU3RhdGUgKnM7XG4vL2NoYXJmICAgICpidWY7ICAgIC8qIHRoZSBpbnB1dCBkYXRhICovXG4vL3Vuc2lnbmVkIGxlbjsgICAgIC8qIGl0cyBsZW5ndGggKi9cbi8vaW50ICAgICAgaGVhZGVyOyAgLyogdHJ1ZSBpZiBibG9jayBoZWFkZXIgbXVzdCBiZSB3cml0dGVuICovXG57XG4gIGJpX3dpbmR1cChzKTsgICAgICAgIC8qIGFsaWduIG9uIGJ5dGUgYm91bmRhcnkgKi9cblxuICBpZiAoaGVhZGVyKSB7XG4gICAgcHV0X3Nob3J0KHMsIGxlbik7XG4gICAgcHV0X3Nob3J0KHMsIH5sZW4pO1xuICB9XG4vLyAgd2hpbGUgKGxlbi0tKSB7XG4vLyAgICBwdXRfYnl0ZShzLCAqYnVmKyspO1xuLy8gIH1cbiAgdXRpbHMuYXJyYXlTZXQocy5wZW5kaW5nX2J1Ziwgcy53aW5kb3csIGJ1ZiwgbGVuLCBzLnBlbmRpbmcpO1xuICBzLnBlbmRpbmcgKz0gbGVuO1xufVxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvbXBhcmVzIHRvIHN1YnRyZWVzLCB1c2luZyB0aGUgdHJlZSBkZXB0aCBhcyB0aWUgYnJlYWtlciB3aGVuXG4gKiB0aGUgc3VidHJlZXMgaGF2ZSBlcXVhbCBmcmVxdWVuY3kuIFRoaXMgbWluaW1pemVzIHRoZSB3b3JzdCBjYXNlIGxlbmd0aC5cbiAqL1xuZnVuY3Rpb24gc21hbGxlcih0cmVlLCBuLCBtLCBkZXB0aCkge1xuICB2YXIgX24yID0gbiAqIDI7XG4gIHZhciBfbTIgPSBtICogMjtcbiAgcmV0dXJuICh0cmVlW19uMl0vKi5GcmVxKi8gPCB0cmVlW19tMl0vKi5GcmVxKi8gfHxcbiAgICAgICAgICh0cmVlW19uMl0vKi5GcmVxKi8gPT09IHRyZWVbX20yXS8qLkZyZXEqLyAmJiBkZXB0aFtuXSA8PSBkZXB0aFttXSkpO1xufVxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFJlc3RvcmUgdGhlIGhlYXAgcHJvcGVydHkgYnkgbW92aW5nIGRvd24gdGhlIHRyZWUgc3RhcnRpbmcgYXQgbm9kZSBrLFxuICogZXhjaGFuZ2luZyBhIG5vZGUgd2l0aCB0aGUgc21hbGxlc3Qgb2YgaXRzIHR3byBzb25zIGlmIG5lY2Vzc2FyeSwgc3RvcHBpbmdcbiAqIHdoZW4gdGhlIGhlYXAgcHJvcGVydHkgaXMgcmUtZXN0YWJsaXNoZWQgKGVhY2ggZmF0aGVyIHNtYWxsZXIgdGhhbiBpdHNcbiAqIHR3byBzb25zKS5cbiAqL1xuZnVuY3Rpb24gcHFkb3duaGVhcChzLCB0cmVlLCBrKVxuLy8gICAgZGVmbGF0ZV9zdGF0ZSAqcztcbi8vICAgIGN0X2RhdGEgKnRyZWU7ICAvKiB0aGUgdHJlZSB0byByZXN0b3JlICovXG4vLyAgICBpbnQgazsgICAgICAgICAgICAgICAvKiBub2RlIHRvIG1vdmUgZG93biAqL1xue1xuICB2YXIgdiA9IHMuaGVhcFtrXTtcbiAgdmFyIGogPSBrIDw8IDE7ICAvKiBsZWZ0IHNvbiBvZiBrICovXG4gIHdoaWxlIChqIDw9IHMuaGVhcF9sZW4pIHtcbiAgICAvKiBTZXQgaiB0byB0aGUgc21hbGxlc3Qgb2YgdGhlIHR3byBzb25zOiAqL1xuICAgIGlmIChqIDwgcy5oZWFwX2xlbiAmJlxuICAgICAgc21hbGxlcih0cmVlLCBzLmhlYXBbaiArIDFdLCBzLmhlYXBbal0sIHMuZGVwdGgpKSB7XG4gICAgICBqKys7XG4gICAgfVxuICAgIC8qIEV4aXQgaWYgdiBpcyBzbWFsbGVyIHRoYW4gYm90aCBzb25zICovXG4gICAgaWYgKHNtYWxsZXIodHJlZSwgdiwgcy5oZWFwW2pdLCBzLmRlcHRoKSkgeyBicmVhazsgfVxuXG4gICAgLyogRXhjaGFuZ2UgdiB3aXRoIHRoZSBzbWFsbGVzdCBzb24gKi9cbiAgICBzLmhlYXBba10gPSBzLmhlYXBbal07XG4gICAgayA9IGo7XG5cbiAgICAvKiBBbmQgY29udGludWUgZG93biB0aGUgdHJlZSwgc2V0dGluZyBqIHRvIHRoZSBsZWZ0IHNvbiBvZiBrICovXG4gICAgaiA8PD0gMTtcbiAgfVxuICBzLmhlYXBba10gPSB2O1xufVxuXG5cbi8vIGlubGluZWQgbWFudWFsbHlcbi8vIHZhciBTTUFMTEVTVCA9IDE7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2VuZCB0aGUgYmxvY2sgZGF0YSBjb21wcmVzc2VkIHVzaW5nIHRoZSBnaXZlbiBIdWZmbWFuIHRyZWVzXG4gKi9cbmZ1bmN0aW9uIGNvbXByZXNzX2Jsb2NrKHMsIGx0cmVlLCBkdHJlZSlcbi8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XG4vLyAgICBjb25zdCBjdF9kYXRhICpsdHJlZTsgLyogbGl0ZXJhbCB0cmVlICovXG4vLyAgICBjb25zdCBjdF9kYXRhICpkdHJlZTsgLyogZGlzdGFuY2UgdHJlZSAqL1xue1xuICB2YXIgZGlzdDsgICAgICAgICAgIC8qIGRpc3RhbmNlIG9mIG1hdGNoZWQgc3RyaW5nICovXG4gIHZhciBsYzsgICAgICAgICAgICAgLyogbWF0Y2ggbGVuZ3RoIG9yIHVubWF0Y2hlZCBjaGFyIChpZiBkaXN0ID09IDApICovXG4gIHZhciBseCA9IDA7ICAgICAgICAgLyogcnVubmluZyBpbmRleCBpbiBsX2J1ZiAqL1xuICB2YXIgY29kZTsgICAgICAgICAgIC8qIHRoZSBjb2RlIHRvIHNlbmQgKi9cbiAgdmFyIGV4dHJhOyAgICAgICAgICAvKiBudW1iZXIgb2YgZXh0cmEgYml0cyB0byBzZW5kICovXG5cbiAgaWYgKHMubGFzdF9saXQgIT09IDApIHtcbiAgICBkbyB7XG4gICAgICBkaXN0ID0gKHMucGVuZGluZ19idWZbcy5kX2J1ZiArIGx4ICogMl0gPDwgOCkgfCAocy5wZW5kaW5nX2J1ZltzLmRfYnVmICsgbHggKiAyICsgMV0pO1xuICAgICAgbGMgPSBzLnBlbmRpbmdfYnVmW3MubF9idWYgKyBseF07XG4gICAgICBseCsrO1xuXG4gICAgICBpZiAoZGlzdCA9PT0gMCkge1xuICAgICAgICBzZW5kX2NvZGUocywgbGMsIGx0cmVlKTsgLyogc2VuZCBhIGxpdGVyYWwgYnl0ZSAqL1xuICAgICAgICAvL1RyYWNlY3YoaXNncmFwaChsYyksIChzdGRlcnIsXCIgJyVjJyBcIiwgbGMpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIEhlcmUsIGxjIGlzIHRoZSBtYXRjaCBsZW5ndGggLSBNSU5fTUFUQ0ggKi9cbiAgICAgICAgY29kZSA9IF9sZW5ndGhfY29kZVtsY107XG4gICAgICAgIHNlbmRfY29kZShzLCBjb2RlICsgTElURVJBTFMgKyAxLCBsdHJlZSk7IC8qIHNlbmQgdGhlIGxlbmd0aCBjb2RlICovXG4gICAgICAgIGV4dHJhID0gZXh0cmFfbGJpdHNbY29kZV07XG4gICAgICAgIGlmIChleHRyYSAhPT0gMCkge1xuICAgICAgICAgIGxjIC09IGJhc2VfbGVuZ3RoW2NvZGVdO1xuICAgICAgICAgIHNlbmRfYml0cyhzLCBsYywgZXh0cmEpOyAgICAgICAvKiBzZW5kIHRoZSBleHRyYSBsZW5ndGggYml0cyAqL1xuICAgICAgICB9XG4gICAgICAgIGRpc3QtLTsgLyogZGlzdCBpcyBub3cgdGhlIG1hdGNoIGRpc3RhbmNlIC0gMSAqL1xuICAgICAgICBjb2RlID0gZF9jb2RlKGRpc3QpO1xuICAgICAgICAvL0Fzc2VydCAoY29kZSA8IERfQ09ERVMsIFwiYmFkIGRfY29kZVwiKTtcblxuICAgICAgICBzZW5kX2NvZGUocywgY29kZSwgZHRyZWUpOyAgICAgICAvKiBzZW5kIHRoZSBkaXN0YW5jZSBjb2RlICovXG4gICAgICAgIGV4dHJhID0gZXh0cmFfZGJpdHNbY29kZV07XG4gICAgICAgIGlmIChleHRyYSAhPT0gMCkge1xuICAgICAgICAgIGRpc3QgLT0gYmFzZV9kaXN0W2NvZGVdO1xuICAgICAgICAgIHNlbmRfYml0cyhzLCBkaXN0LCBleHRyYSk7ICAgLyogc2VuZCB0aGUgZXh0cmEgZGlzdGFuY2UgYml0cyAqL1xuICAgICAgICB9XG4gICAgICB9IC8qIGxpdGVyYWwgb3IgbWF0Y2ggcGFpciA/ICovXG5cbiAgICAgIC8qIENoZWNrIHRoYXQgdGhlIG92ZXJsYXkgYmV0d2VlbiBwZW5kaW5nX2J1ZiBhbmQgZF9idWYrbF9idWYgaXMgb2s6ICovXG4gICAgICAvL0Fzc2VydCgodUludCkocy0+cGVuZGluZykgPCBzLT5saXRfYnVmc2l6ZSArIDIqbHgsXG4gICAgICAvLyAgICAgICBcInBlbmRpbmdCdWYgb3ZlcmZsb3dcIik7XG5cbiAgICB9IHdoaWxlIChseCA8IHMubGFzdF9saXQpO1xuICB9XG5cbiAgc2VuZF9jb2RlKHMsIEVORF9CTE9DSywgbHRyZWUpO1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29uc3RydWN0IG9uZSBIdWZmbWFuIHRyZWUgYW5kIGFzc2lnbnMgdGhlIGNvZGUgYml0IHN0cmluZ3MgYW5kIGxlbmd0aHMuXG4gKiBVcGRhdGUgdGhlIHRvdGFsIGJpdCBsZW5ndGggZm9yIHRoZSBjdXJyZW50IGJsb2NrLlxuICogSU4gYXNzZXJ0aW9uOiB0aGUgZmllbGQgZnJlcSBpcyBzZXQgZm9yIGFsbCB0cmVlIGVsZW1lbnRzLlxuICogT1VUIGFzc2VydGlvbnM6IHRoZSBmaWVsZHMgbGVuIGFuZCBjb2RlIGFyZSBzZXQgdG8gdGhlIG9wdGltYWwgYml0IGxlbmd0aFxuICogICAgIGFuZCBjb3JyZXNwb25kaW5nIGNvZGUuIFRoZSBsZW5ndGggb3B0X2xlbiBpcyB1cGRhdGVkOyBzdGF0aWNfbGVuIGlzXG4gKiAgICAgYWxzbyB1cGRhdGVkIGlmIHN0cmVlIGlzIG5vdCBudWxsLiBUaGUgZmllbGQgbWF4X2NvZGUgaXMgc2V0LlxuICovXG5mdW5jdGlvbiBidWlsZF90cmVlKHMsIGRlc2MpXG4vLyAgICBkZWZsYXRlX3N0YXRlICpzO1xuLy8gICAgdHJlZV9kZXNjICpkZXNjOyAvKiB0aGUgdHJlZSBkZXNjcmlwdG9yICovXG57XG4gIHZhciB0cmVlICAgICA9IGRlc2MuZHluX3RyZWU7XG4gIHZhciBzdHJlZSAgICA9IGRlc2Muc3RhdF9kZXNjLnN0YXRpY190cmVlO1xuICB2YXIgaGFzX3N0cmVlID0gZGVzYy5zdGF0X2Rlc2MuaGFzX3N0cmVlO1xuICB2YXIgZWxlbXMgICAgPSBkZXNjLnN0YXRfZGVzYy5lbGVtcztcbiAgdmFyIG4sIG07ICAgICAgICAgIC8qIGl0ZXJhdGUgb3ZlciBoZWFwIGVsZW1lbnRzICovXG4gIHZhciBtYXhfY29kZSA9IC0xOyAvKiBsYXJnZXN0IGNvZGUgd2l0aCBub24gemVybyBmcmVxdWVuY3kgKi9cbiAgdmFyIG5vZGU7ICAgICAgICAgIC8qIG5ldyBub2RlIGJlaW5nIGNyZWF0ZWQgKi9cblxuICAvKiBDb25zdHJ1Y3QgdGhlIGluaXRpYWwgaGVhcCwgd2l0aCBsZWFzdCBmcmVxdWVudCBlbGVtZW50IGluXG4gICAqIGhlYXBbU01BTExFU1RdLiBUaGUgc29ucyBvZiBoZWFwW25dIGFyZSBoZWFwWzIqbl0gYW5kIGhlYXBbMipuKzFdLlxuICAgKiBoZWFwWzBdIGlzIG5vdCB1c2VkLlxuICAgKi9cbiAgcy5oZWFwX2xlbiA9IDA7XG4gIHMuaGVhcF9tYXggPSBIRUFQX1NJWkU7XG5cbiAgZm9yIChuID0gMDsgbiA8IGVsZW1zOyBuKyspIHtcbiAgICBpZiAodHJlZVtuICogMl0vKi5GcmVxKi8gIT09IDApIHtcbiAgICAgIHMuaGVhcFsrK3MuaGVhcF9sZW5dID0gbWF4X2NvZGUgPSBuO1xuICAgICAgcy5kZXB0aFtuXSA9IDA7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgdHJlZVtuICogMiArIDFdLyouTGVuKi8gPSAwO1xuICAgIH1cbiAgfVxuXG4gIC8qIFRoZSBwa3ppcCBmb3JtYXQgcmVxdWlyZXMgdGhhdCBhdCBsZWFzdCBvbmUgZGlzdGFuY2UgY29kZSBleGlzdHMsXG4gICAqIGFuZCB0aGF0IGF0IGxlYXN0IG9uZSBiaXQgc2hvdWxkIGJlIHNlbnQgZXZlbiBpZiB0aGVyZSBpcyBvbmx5IG9uZVxuICAgKiBwb3NzaWJsZSBjb2RlLiBTbyB0byBhdm9pZCBzcGVjaWFsIGNoZWNrcyBsYXRlciBvbiB3ZSBmb3JjZSBhdCBsZWFzdFxuICAgKiB0d28gY29kZXMgb2Ygbm9uIHplcm8gZnJlcXVlbmN5LlxuICAgKi9cbiAgd2hpbGUgKHMuaGVhcF9sZW4gPCAyKSB7XG4gICAgbm9kZSA9IHMuaGVhcFsrK3MuaGVhcF9sZW5dID0gKG1heF9jb2RlIDwgMiA/ICsrbWF4X2NvZGUgOiAwKTtcbiAgICB0cmVlW25vZGUgKiAyXS8qLkZyZXEqLyA9IDE7XG4gICAgcy5kZXB0aFtub2RlXSA9IDA7XG4gICAgcy5vcHRfbGVuLS07XG5cbiAgICBpZiAoaGFzX3N0cmVlKSB7XG4gICAgICBzLnN0YXRpY19sZW4gLT0gc3RyZWVbbm9kZSAqIDIgKyAxXS8qLkxlbiovO1xuICAgIH1cbiAgICAvKiBub2RlIGlzIDAgb3IgMSBzbyBpdCBkb2VzIG5vdCBoYXZlIGV4dHJhIGJpdHMgKi9cbiAgfVxuICBkZXNjLm1heF9jb2RlID0gbWF4X2NvZGU7XG5cbiAgLyogVGhlIGVsZW1lbnRzIGhlYXBbaGVhcF9sZW4vMisxIC4uIGhlYXBfbGVuXSBhcmUgbGVhdmVzIG9mIHRoZSB0cmVlLFxuICAgKiBlc3RhYmxpc2ggc3ViLWhlYXBzIG9mIGluY3JlYXNpbmcgbGVuZ3RoczpcbiAgICovXG4gIGZvciAobiA9IChzLmhlYXBfbGVuID4+IDEvKmludCAvMiovKTsgbiA+PSAxOyBuLS0pIHsgcHFkb3duaGVhcChzLCB0cmVlLCBuKTsgfVxuXG4gIC8qIENvbnN0cnVjdCB0aGUgSHVmZm1hbiB0cmVlIGJ5IHJlcGVhdGVkbHkgY29tYmluaW5nIHRoZSBsZWFzdCB0d29cbiAgICogZnJlcXVlbnQgbm9kZXMuXG4gICAqL1xuICBub2RlID0gZWxlbXM7ICAgICAgICAgICAgICAvKiBuZXh0IGludGVybmFsIG5vZGUgb2YgdGhlIHRyZWUgKi9cbiAgZG8ge1xuICAgIC8vcHFyZW1vdmUocywgdHJlZSwgbik7ICAvKiBuID0gbm9kZSBvZiBsZWFzdCBmcmVxdWVuY3kgKi9cbiAgICAvKioqIHBxcmVtb3ZlICoqKi9cbiAgICBuID0gcy5oZWFwWzEvKlNNQUxMRVNUKi9dO1xuICAgIHMuaGVhcFsxLypTTUFMTEVTVCovXSA9IHMuaGVhcFtzLmhlYXBfbGVuLS1dO1xuICAgIHBxZG93bmhlYXAocywgdHJlZSwgMS8qU01BTExFU1QqLyk7XG4gICAgLyoqKi9cblxuICAgIG0gPSBzLmhlYXBbMS8qU01BTExFU1QqL107IC8qIG0gPSBub2RlIG9mIG5leHQgbGVhc3QgZnJlcXVlbmN5ICovXG5cbiAgICBzLmhlYXBbLS1zLmhlYXBfbWF4XSA9IG47IC8qIGtlZXAgdGhlIG5vZGVzIHNvcnRlZCBieSBmcmVxdWVuY3kgKi9cbiAgICBzLmhlYXBbLS1zLmhlYXBfbWF4XSA9IG07XG5cbiAgICAvKiBDcmVhdGUgYSBuZXcgbm9kZSBmYXRoZXIgb2YgbiBhbmQgbSAqL1xuICAgIHRyZWVbbm9kZSAqIDJdLyouRnJlcSovID0gdHJlZVtuICogMl0vKi5GcmVxKi8gKyB0cmVlW20gKiAyXS8qLkZyZXEqLztcbiAgICBzLmRlcHRoW25vZGVdID0gKHMuZGVwdGhbbl0gPj0gcy5kZXB0aFttXSA/IHMuZGVwdGhbbl0gOiBzLmRlcHRoW21dKSArIDE7XG4gICAgdHJlZVtuICogMiArIDFdLyouRGFkKi8gPSB0cmVlW20gKiAyICsgMV0vKi5EYWQqLyA9IG5vZGU7XG5cbiAgICAvKiBhbmQgaW5zZXJ0IHRoZSBuZXcgbm9kZSBpbiB0aGUgaGVhcCAqL1xuICAgIHMuaGVhcFsxLypTTUFMTEVTVCovXSA9IG5vZGUrKztcbiAgICBwcWRvd25oZWFwKHMsIHRyZWUsIDEvKlNNQUxMRVNUKi8pO1xuXG4gIH0gd2hpbGUgKHMuaGVhcF9sZW4gPj0gMik7XG5cbiAgcy5oZWFwWy0tcy5oZWFwX21heF0gPSBzLmhlYXBbMS8qU01BTExFU1QqL107XG5cbiAgLyogQXQgdGhpcyBwb2ludCwgdGhlIGZpZWxkcyBmcmVxIGFuZCBkYWQgYXJlIHNldC4gV2UgY2FuIG5vd1xuICAgKiBnZW5lcmF0ZSB0aGUgYml0IGxlbmd0aHMuXG4gICAqL1xuICBnZW5fYml0bGVuKHMsIGRlc2MpO1xuXG4gIC8qIFRoZSBmaWVsZCBsZW4gaXMgbm93IHNldCwgd2UgY2FuIGdlbmVyYXRlIHRoZSBiaXQgY29kZXMgKi9cbiAgZ2VuX2NvZGVzKHRyZWUsIG1heF9jb2RlLCBzLmJsX2NvdW50KTtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNjYW4gYSBsaXRlcmFsIG9yIGRpc3RhbmNlIHRyZWUgdG8gZGV0ZXJtaW5lIHRoZSBmcmVxdWVuY2llcyBvZiB0aGUgY29kZXNcbiAqIGluIHRoZSBiaXQgbGVuZ3RoIHRyZWUuXG4gKi9cbmZ1bmN0aW9uIHNjYW5fdHJlZShzLCB0cmVlLCBtYXhfY29kZSlcbi8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XG4vLyAgICBjdF9kYXRhICp0cmVlOyAgIC8qIHRoZSB0cmVlIHRvIGJlIHNjYW5uZWQgKi9cbi8vICAgIGludCBtYXhfY29kZTsgICAgLyogYW5kIGl0cyBsYXJnZXN0IGNvZGUgb2Ygbm9uIHplcm8gZnJlcXVlbmN5ICovXG57XG4gIHZhciBuOyAgICAgICAgICAgICAgICAgICAgIC8qIGl0ZXJhdGVzIG92ZXIgYWxsIHRyZWUgZWxlbWVudHMgKi9cbiAgdmFyIHByZXZsZW4gPSAtMTsgICAgICAgICAgLyogbGFzdCBlbWl0dGVkIGxlbmd0aCAqL1xuICB2YXIgY3VybGVuOyAgICAgICAgICAgICAgICAvKiBsZW5ndGggb2YgY3VycmVudCBjb2RlICovXG5cbiAgdmFyIG5leHRsZW4gPSB0cmVlWzAgKiAyICsgMV0vKi5MZW4qLzsgLyogbGVuZ3RoIG9mIG5leHQgY29kZSAqL1xuXG4gIHZhciBjb3VudCA9IDA7ICAgICAgICAgICAgIC8qIHJlcGVhdCBjb3VudCBvZiB0aGUgY3VycmVudCBjb2RlICovXG4gIHZhciBtYXhfY291bnQgPSA3OyAgICAgICAgIC8qIG1heCByZXBlYXQgY291bnQgKi9cbiAgdmFyIG1pbl9jb3VudCA9IDQ7ICAgICAgICAgLyogbWluIHJlcGVhdCBjb3VudCAqL1xuXG4gIGlmIChuZXh0bGVuID09PSAwKSB7XG4gICAgbWF4X2NvdW50ID0gMTM4O1xuICAgIG1pbl9jb3VudCA9IDM7XG4gIH1cbiAgdHJlZVsobWF4X2NvZGUgKyAxKSAqIDIgKyAxXS8qLkxlbiovID0gMHhmZmZmOyAvKiBndWFyZCAqL1xuXG4gIGZvciAobiA9IDA7IG4gPD0gbWF4X2NvZGU7IG4rKykge1xuICAgIGN1cmxlbiA9IG5leHRsZW47XG4gICAgbmV4dGxlbiA9IHRyZWVbKG4gKyAxKSAqIDIgKyAxXS8qLkxlbiovO1xuXG4gICAgaWYgKCsrY291bnQgPCBtYXhfY291bnQgJiYgY3VybGVuID09PSBuZXh0bGVuKSB7XG4gICAgICBjb250aW51ZTtcblxuICAgIH0gZWxzZSBpZiAoY291bnQgPCBtaW5fY291bnQpIHtcbiAgICAgIHMuYmxfdHJlZVtjdXJsZW4gKiAyXS8qLkZyZXEqLyArPSBjb3VudDtcblxuICAgIH0gZWxzZSBpZiAoY3VybGVuICE9PSAwKSB7XG5cbiAgICAgIGlmIChjdXJsZW4gIT09IHByZXZsZW4pIHsgcy5ibF90cmVlW2N1cmxlbiAqIDJdLyouRnJlcSovKys7IH1cbiAgICAgIHMuYmxfdHJlZVtSRVBfM182ICogMl0vKi5GcmVxKi8rKztcblxuICAgIH0gZWxzZSBpZiAoY291bnQgPD0gMTApIHtcbiAgICAgIHMuYmxfdHJlZVtSRVBaXzNfMTAgKiAyXS8qLkZyZXEqLysrO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIHMuYmxfdHJlZVtSRVBaXzExXzEzOCAqIDJdLyouRnJlcSovKys7XG4gICAgfVxuXG4gICAgY291bnQgPSAwO1xuICAgIHByZXZsZW4gPSBjdXJsZW47XG5cbiAgICBpZiAobmV4dGxlbiA9PT0gMCkge1xuICAgICAgbWF4X2NvdW50ID0gMTM4O1xuICAgICAgbWluX2NvdW50ID0gMztcblxuICAgIH0gZWxzZSBpZiAoY3VybGVuID09PSBuZXh0bGVuKSB7XG4gICAgICBtYXhfY291bnQgPSA2O1xuICAgICAgbWluX2NvdW50ID0gMztcblxuICAgIH0gZWxzZSB7XG4gICAgICBtYXhfY291bnQgPSA3O1xuICAgICAgbWluX2NvdW50ID0gNDtcbiAgICB9XG4gIH1cbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNlbmQgYSBsaXRlcmFsIG9yIGRpc3RhbmNlIHRyZWUgaW4gY29tcHJlc3NlZCBmb3JtLCB1c2luZyB0aGUgY29kZXMgaW5cbiAqIGJsX3RyZWUuXG4gKi9cbmZ1bmN0aW9uIHNlbmRfdHJlZShzLCB0cmVlLCBtYXhfY29kZSlcbi8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XG4vLyAgICBjdF9kYXRhICp0cmVlOyAvKiB0aGUgdHJlZSB0byBiZSBzY2FubmVkICovXG4vLyAgICBpbnQgbWF4X2NvZGU7ICAgICAgIC8qIGFuZCBpdHMgbGFyZ2VzdCBjb2RlIG9mIG5vbiB6ZXJvIGZyZXF1ZW5jeSAqL1xue1xuICB2YXIgbjsgICAgICAgICAgICAgICAgICAgICAvKiBpdGVyYXRlcyBvdmVyIGFsbCB0cmVlIGVsZW1lbnRzICovXG4gIHZhciBwcmV2bGVuID0gLTE7ICAgICAgICAgIC8qIGxhc3QgZW1pdHRlZCBsZW5ndGggKi9cbiAgdmFyIGN1cmxlbjsgICAgICAgICAgICAgICAgLyogbGVuZ3RoIG9mIGN1cnJlbnQgY29kZSAqL1xuXG4gIHZhciBuZXh0bGVuID0gdHJlZVswICogMiArIDFdLyouTGVuKi87IC8qIGxlbmd0aCBvZiBuZXh0IGNvZGUgKi9cblxuICB2YXIgY291bnQgPSAwOyAgICAgICAgICAgICAvKiByZXBlYXQgY291bnQgb2YgdGhlIGN1cnJlbnQgY29kZSAqL1xuICB2YXIgbWF4X2NvdW50ID0gNzsgICAgICAgICAvKiBtYXggcmVwZWF0IGNvdW50ICovXG4gIHZhciBtaW5fY291bnQgPSA0OyAgICAgICAgIC8qIG1pbiByZXBlYXQgY291bnQgKi9cblxuICAvKiB0cmVlW21heF9jb2RlKzFdLkxlbiA9IC0xOyAqLyAgLyogZ3VhcmQgYWxyZWFkeSBzZXQgKi9cbiAgaWYgKG5leHRsZW4gPT09IDApIHtcbiAgICBtYXhfY291bnQgPSAxMzg7XG4gICAgbWluX2NvdW50ID0gMztcbiAgfVxuXG4gIGZvciAobiA9IDA7IG4gPD0gbWF4X2NvZGU7IG4rKykge1xuICAgIGN1cmxlbiA9IG5leHRsZW47XG4gICAgbmV4dGxlbiA9IHRyZWVbKG4gKyAxKSAqIDIgKyAxXS8qLkxlbiovO1xuXG4gICAgaWYgKCsrY291bnQgPCBtYXhfY291bnQgJiYgY3VybGVuID09PSBuZXh0bGVuKSB7XG4gICAgICBjb250aW51ZTtcblxuICAgIH0gZWxzZSBpZiAoY291bnQgPCBtaW5fY291bnQpIHtcbiAgICAgIGRvIHsgc2VuZF9jb2RlKHMsIGN1cmxlbiwgcy5ibF90cmVlKTsgfSB3aGlsZSAoLS1jb3VudCAhPT0gMCk7XG5cbiAgICB9IGVsc2UgaWYgKGN1cmxlbiAhPT0gMCkge1xuICAgICAgaWYgKGN1cmxlbiAhPT0gcHJldmxlbikge1xuICAgICAgICBzZW5kX2NvZGUocywgY3VybGVuLCBzLmJsX3RyZWUpO1xuICAgICAgICBjb3VudC0tO1xuICAgICAgfVxuICAgICAgLy9Bc3NlcnQoY291bnQgPj0gMyAmJiBjb3VudCA8PSA2LCBcIiAzXzY/XCIpO1xuICAgICAgc2VuZF9jb2RlKHMsIFJFUF8zXzYsIHMuYmxfdHJlZSk7XG4gICAgICBzZW5kX2JpdHMocywgY291bnQgLSAzLCAyKTtcblxuICAgIH0gZWxzZSBpZiAoY291bnQgPD0gMTApIHtcbiAgICAgIHNlbmRfY29kZShzLCBSRVBaXzNfMTAsIHMuYmxfdHJlZSk7XG4gICAgICBzZW5kX2JpdHMocywgY291bnQgLSAzLCAzKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICBzZW5kX2NvZGUocywgUkVQWl8xMV8xMzgsIHMuYmxfdHJlZSk7XG4gICAgICBzZW5kX2JpdHMocywgY291bnQgLSAxMSwgNyk7XG4gICAgfVxuXG4gICAgY291bnQgPSAwO1xuICAgIHByZXZsZW4gPSBjdXJsZW47XG4gICAgaWYgKG5leHRsZW4gPT09IDApIHtcbiAgICAgIG1heF9jb3VudCA9IDEzODtcbiAgICAgIG1pbl9jb3VudCA9IDM7XG5cbiAgICB9IGVsc2UgaWYgKGN1cmxlbiA9PT0gbmV4dGxlbikge1xuICAgICAgbWF4X2NvdW50ID0gNjtcbiAgICAgIG1pbl9jb3VudCA9IDM7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgbWF4X2NvdW50ID0gNztcbiAgICAgIG1pbl9jb3VudCA9IDQ7XG4gICAgfVxuICB9XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb25zdHJ1Y3QgdGhlIEh1ZmZtYW4gdHJlZSBmb3IgdGhlIGJpdCBsZW5ndGhzIGFuZCByZXR1cm4gdGhlIGluZGV4IGluXG4gKiBibF9vcmRlciBvZiB0aGUgbGFzdCBiaXQgbGVuZ3RoIGNvZGUgdG8gc2VuZC5cbiAqL1xuZnVuY3Rpb24gYnVpbGRfYmxfdHJlZShzKSB7XG4gIHZhciBtYXhfYmxpbmRleDsgIC8qIGluZGV4IG9mIGxhc3QgYml0IGxlbmd0aCBjb2RlIG9mIG5vbiB6ZXJvIGZyZXEgKi9cblxuICAvKiBEZXRlcm1pbmUgdGhlIGJpdCBsZW5ndGggZnJlcXVlbmNpZXMgZm9yIGxpdGVyYWwgYW5kIGRpc3RhbmNlIHRyZWVzICovXG4gIHNjYW5fdHJlZShzLCBzLmR5bl9sdHJlZSwgcy5sX2Rlc2MubWF4X2NvZGUpO1xuICBzY2FuX3RyZWUocywgcy5keW5fZHRyZWUsIHMuZF9kZXNjLm1heF9jb2RlKTtcblxuICAvKiBCdWlsZCB0aGUgYml0IGxlbmd0aCB0cmVlOiAqL1xuICBidWlsZF90cmVlKHMsIHMuYmxfZGVzYyk7XG4gIC8qIG9wdF9sZW4gbm93IGluY2x1ZGVzIHRoZSBsZW5ndGggb2YgdGhlIHRyZWUgcmVwcmVzZW50YXRpb25zLCBleGNlcHRcbiAgICogdGhlIGxlbmd0aHMgb2YgdGhlIGJpdCBsZW5ndGhzIGNvZGVzIGFuZCB0aGUgNSs1KzQgYml0cyBmb3IgdGhlIGNvdW50cy5cbiAgICovXG5cbiAgLyogRGV0ZXJtaW5lIHRoZSBudW1iZXIgb2YgYml0IGxlbmd0aCBjb2RlcyB0byBzZW5kLiBUaGUgcGt6aXAgZm9ybWF0XG4gICAqIHJlcXVpcmVzIHRoYXQgYXQgbGVhc3QgNCBiaXQgbGVuZ3RoIGNvZGVzIGJlIHNlbnQuIChhcHBub3RlLnR4dCBzYXlzXG4gICAqIDMgYnV0IHRoZSBhY3R1YWwgdmFsdWUgdXNlZCBpcyA0LilcbiAgICovXG4gIGZvciAobWF4X2JsaW5kZXggPSBCTF9DT0RFUyAtIDE7IG1heF9ibGluZGV4ID49IDM7IG1heF9ibGluZGV4LS0pIHtcbiAgICBpZiAocy5ibF90cmVlW2JsX29yZGVyW21heF9ibGluZGV4XSAqIDIgKyAxXS8qLkxlbiovICE9PSAwKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgLyogVXBkYXRlIG9wdF9sZW4gdG8gaW5jbHVkZSB0aGUgYml0IGxlbmd0aCB0cmVlIGFuZCBjb3VudHMgKi9cbiAgcy5vcHRfbGVuICs9IDMgKiAobWF4X2JsaW5kZXggKyAxKSArIDUgKyA1ICsgNDtcbiAgLy9UcmFjZXYoKHN0ZGVyciwgXCJcXG5keW4gdHJlZXM6IGR5biAlbGQsIHN0YXQgJWxkXCIsXG4gIC8vICAgICAgICBzLT5vcHRfbGVuLCBzLT5zdGF0aWNfbGVuKSk7XG5cbiAgcmV0dXJuIG1heF9ibGluZGV4O1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2VuZCB0aGUgaGVhZGVyIGZvciBhIGJsb2NrIHVzaW5nIGR5bmFtaWMgSHVmZm1hbiB0cmVlczogdGhlIGNvdW50cywgdGhlXG4gKiBsZW5ndGhzIG9mIHRoZSBiaXQgbGVuZ3RoIGNvZGVzLCB0aGUgbGl0ZXJhbCB0cmVlIGFuZCB0aGUgZGlzdGFuY2UgdHJlZS5cbiAqIElOIGFzc2VydGlvbjogbGNvZGVzID49IDI1NywgZGNvZGVzID49IDEsIGJsY29kZXMgPj0gNC5cbiAqL1xuZnVuY3Rpb24gc2VuZF9hbGxfdHJlZXMocywgbGNvZGVzLCBkY29kZXMsIGJsY29kZXMpXG4vLyAgICBkZWZsYXRlX3N0YXRlICpzO1xuLy8gICAgaW50IGxjb2RlcywgZGNvZGVzLCBibGNvZGVzOyAvKiBudW1iZXIgb2YgY29kZXMgZm9yIGVhY2ggdHJlZSAqL1xue1xuICB2YXIgcmFuazsgICAgICAgICAgICAgICAgICAgIC8qIGluZGV4IGluIGJsX29yZGVyICovXG5cbiAgLy9Bc3NlcnQgKGxjb2RlcyA+PSAyNTcgJiYgZGNvZGVzID49IDEgJiYgYmxjb2RlcyA+PSA0LCBcIm5vdCBlbm91Z2ggY29kZXNcIik7XG4gIC8vQXNzZXJ0IChsY29kZXMgPD0gTF9DT0RFUyAmJiBkY29kZXMgPD0gRF9DT0RFUyAmJiBibGNvZGVzIDw9IEJMX0NPREVTLFxuICAvLyAgICAgICAgXCJ0b28gbWFueSBjb2Rlc1wiKTtcbiAgLy9UcmFjZXYoKHN0ZGVyciwgXCJcXG5ibCBjb3VudHM6IFwiKSk7XG4gIHNlbmRfYml0cyhzLCBsY29kZXMgLSAyNTcsIDUpOyAvKiBub3QgKzI1NSBhcyBzdGF0ZWQgaW4gYXBwbm90ZS50eHQgKi9cbiAgc2VuZF9iaXRzKHMsIGRjb2RlcyAtIDEsICAgNSk7XG4gIHNlbmRfYml0cyhzLCBibGNvZGVzIC0gNCwgIDQpOyAvKiBub3QgLTMgYXMgc3RhdGVkIGluIGFwcG5vdGUudHh0ICovXG4gIGZvciAocmFuayA9IDA7IHJhbmsgPCBibGNvZGVzOyByYW5rKyspIHtcbiAgICAvL1RyYWNldigoc3RkZXJyLCBcIlxcbmJsIGNvZGUgJTJkIFwiLCBibF9vcmRlcltyYW5rXSkpO1xuICAgIHNlbmRfYml0cyhzLCBzLmJsX3RyZWVbYmxfb3JkZXJbcmFua10gKiAyICsgMV0vKi5MZW4qLywgMyk7XG4gIH1cbiAgLy9UcmFjZXYoKHN0ZGVyciwgXCJcXG5ibCB0cmVlOiBzZW50ICVsZFwiLCBzLT5iaXRzX3NlbnQpKTtcblxuICBzZW5kX3RyZWUocywgcy5keW5fbHRyZWUsIGxjb2RlcyAtIDEpOyAvKiBsaXRlcmFsIHRyZWUgKi9cbiAgLy9UcmFjZXYoKHN0ZGVyciwgXCJcXG5saXQgdHJlZTogc2VudCAlbGRcIiwgcy0+Yml0c19zZW50KSk7XG5cbiAgc2VuZF90cmVlKHMsIHMuZHluX2R0cmVlLCBkY29kZXMgLSAxKTsgLyogZGlzdGFuY2UgdHJlZSAqL1xuICAvL1RyYWNldigoc3RkZXJyLCBcIlxcbmRpc3QgdHJlZTogc2VudCAlbGRcIiwgcy0+Yml0c19zZW50KSk7XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDaGVjayBpZiB0aGUgZGF0YSB0eXBlIGlzIFRFWFQgb3IgQklOQVJZLCB1c2luZyB0aGUgZm9sbG93aW5nIGFsZ29yaXRobTpcbiAqIC0gVEVYVCBpZiB0aGUgdHdvIGNvbmRpdGlvbnMgYmVsb3cgYXJlIHNhdGlzZmllZDpcbiAqICAgIGEpIFRoZXJlIGFyZSBubyBub24tcG9ydGFibGUgY29udHJvbCBjaGFyYWN0ZXJzIGJlbG9uZ2luZyB0byB0aGVcbiAqICAgICAgIFwiYmxhY2sgbGlzdFwiICgwLi42LCAxNC4uMjUsIDI4Li4zMSkuXG4gKiAgICBiKSBUaGVyZSBpcyBhdCBsZWFzdCBvbmUgcHJpbnRhYmxlIGNoYXJhY3RlciBiZWxvbmdpbmcgdG8gdGhlXG4gKiAgICAgICBcIndoaXRlIGxpc3RcIiAoOSB7VEFCfSwgMTAge0xGfSwgMTMge0NSfSwgMzIuLjI1NSkuXG4gKiAtIEJJTkFSWSBvdGhlcndpc2UuXG4gKiAtIFRoZSBmb2xsb3dpbmcgcGFydGlhbGx5LXBvcnRhYmxlIGNvbnRyb2wgY2hhcmFjdGVycyBmb3JtIGFcbiAqICAgXCJncmF5IGxpc3RcIiB0aGF0IGlzIGlnbm9yZWQgaW4gdGhpcyBkZXRlY3Rpb24gYWxnb3JpdGhtOlxuICogICAoNyB7QkVMfSwgOCB7QlN9LCAxMSB7VlR9LCAxMiB7RkZ9LCAyNiB7U1VCfSwgMjcge0VTQ30pLlxuICogSU4gYXNzZXJ0aW9uOiB0aGUgZmllbGRzIEZyZXEgb2YgZHluX2x0cmVlIGFyZSBzZXQuXG4gKi9cbmZ1bmN0aW9uIGRldGVjdF9kYXRhX3R5cGUocykge1xuICAvKiBibGFja19tYXNrIGlzIHRoZSBiaXQgbWFzayBvZiBibGFjay1saXN0ZWQgYnl0ZXNcbiAgICogc2V0IGJpdHMgMC4uNiwgMTQuLjI1LCBhbmQgMjguLjMxXG4gICAqIDB4ZjNmZmMwN2YgPSBiaW5hcnkgMTExMTAwMTExMTExMTExMTExMDAwMDAwMDExMTExMTFcbiAgICovXG4gIHZhciBibGFja19tYXNrID0gMHhmM2ZmYzA3ZjtcbiAgdmFyIG47XG5cbiAgLyogQ2hlY2sgZm9yIG5vbi10ZXh0dWFsIChcImJsYWNrLWxpc3RlZFwiKSBieXRlcy4gKi9cbiAgZm9yIChuID0gMDsgbiA8PSAzMTsgbisrLCBibGFja19tYXNrID4+Pj0gMSkge1xuICAgIGlmICgoYmxhY2tfbWFzayAmIDEpICYmIChzLmR5bl9sdHJlZVtuICogMl0vKi5GcmVxKi8gIT09IDApKSB7XG4gICAgICByZXR1cm4gWl9CSU5BUlk7XG4gICAgfVxuICB9XG5cbiAgLyogQ2hlY2sgZm9yIHRleHR1YWwgKFwid2hpdGUtbGlzdGVkXCIpIGJ5dGVzLiAqL1xuICBpZiAocy5keW5fbHRyZWVbOSAqIDJdLyouRnJlcSovICE9PSAwIHx8IHMuZHluX2x0cmVlWzEwICogMl0vKi5GcmVxKi8gIT09IDAgfHxcbiAgICAgIHMuZHluX2x0cmVlWzEzICogMl0vKi5GcmVxKi8gIT09IDApIHtcbiAgICByZXR1cm4gWl9URVhUO1xuICB9XG4gIGZvciAobiA9IDMyOyBuIDwgTElURVJBTFM7IG4rKykge1xuICAgIGlmIChzLmR5bl9sdHJlZVtuICogMl0vKi5GcmVxKi8gIT09IDApIHtcbiAgICAgIHJldHVybiBaX1RFWFQ7XG4gICAgfVxuICB9XG5cbiAgLyogVGhlcmUgYXJlIG5vIFwiYmxhY2stbGlzdGVkXCIgb3IgXCJ3aGl0ZS1saXN0ZWRcIiBieXRlczpcbiAgICogdGhpcyBzdHJlYW0gZWl0aGVyIGlzIGVtcHR5IG9yIGhhcyB0b2xlcmF0ZWQgKFwiZ3JheS1saXN0ZWRcIikgYnl0ZXMgb25seS5cbiAgICovXG4gIHJldHVybiBaX0JJTkFSWTtcbn1cblxuXG52YXIgc3RhdGljX2luaXRfZG9uZSA9IGZhbHNlO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEluaXRpYWxpemUgdGhlIHRyZWUgZGF0YSBzdHJ1Y3R1cmVzIGZvciBhIG5ldyB6bGliIHN0cmVhbS5cbiAqL1xuZnVuY3Rpb24gX3RyX2luaXQocylcbntcblxuICBpZiAoIXN0YXRpY19pbml0X2RvbmUpIHtcbiAgICB0cl9zdGF0aWNfaW5pdCgpO1xuICAgIHN0YXRpY19pbml0X2RvbmUgPSB0cnVlO1xuICB9XG5cbiAgcy5sX2Rlc2MgID0gbmV3IFRyZWVEZXNjKHMuZHluX2x0cmVlLCBzdGF0aWNfbF9kZXNjKTtcbiAgcy5kX2Rlc2MgID0gbmV3IFRyZWVEZXNjKHMuZHluX2R0cmVlLCBzdGF0aWNfZF9kZXNjKTtcbiAgcy5ibF9kZXNjID0gbmV3IFRyZWVEZXNjKHMuYmxfdHJlZSwgc3RhdGljX2JsX2Rlc2MpO1xuXG4gIHMuYmlfYnVmID0gMDtcbiAgcy5iaV92YWxpZCA9IDA7XG5cbiAgLyogSW5pdGlhbGl6ZSB0aGUgZmlyc3QgYmxvY2sgb2YgdGhlIGZpcnN0IGZpbGU6ICovXG4gIGluaXRfYmxvY2socyk7XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBTZW5kIGEgc3RvcmVkIGJsb2NrXG4gKi9cbmZ1bmN0aW9uIF90cl9zdG9yZWRfYmxvY2socywgYnVmLCBzdG9yZWRfbGVuLCBsYXN0KVxuLy9EZWZsYXRlU3RhdGUgKnM7XG4vL2NoYXJmICpidWY7ICAgICAgIC8qIGlucHV0IGJsb2NrICovXG4vL3VsZyBzdG9yZWRfbGVuOyAgIC8qIGxlbmd0aCBvZiBpbnB1dCBibG9jayAqL1xuLy9pbnQgbGFzdDsgICAgICAgICAvKiBvbmUgaWYgdGhpcyBpcyB0aGUgbGFzdCBibG9jayBmb3IgYSBmaWxlICovXG57XG4gIHNlbmRfYml0cyhzLCAoU1RPUkVEX0JMT0NLIDw8IDEpICsgKGxhc3QgPyAxIDogMCksIDMpOyAgICAvKiBzZW5kIGJsb2NrIHR5cGUgKi9cbiAgY29weV9ibG9jayhzLCBidWYsIHN0b3JlZF9sZW4sIHRydWUpOyAvKiB3aXRoIGhlYWRlciAqL1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2VuZCBvbmUgZW1wdHkgc3RhdGljIGJsb2NrIHRvIGdpdmUgZW5vdWdoIGxvb2thaGVhZCBmb3IgaW5mbGF0ZS5cbiAqIFRoaXMgdGFrZXMgMTAgYml0cywgb2Ygd2hpY2ggNyBtYXkgcmVtYWluIGluIHRoZSBiaXQgYnVmZmVyLlxuICovXG5mdW5jdGlvbiBfdHJfYWxpZ24ocykge1xuICBzZW5kX2JpdHMocywgU1RBVElDX1RSRUVTIDw8IDEsIDMpO1xuICBzZW5kX2NvZGUocywgRU5EX0JMT0NLLCBzdGF0aWNfbHRyZWUpO1xuICBiaV9mbHVzaChzKTtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIERldGVybWluZSB0aGUgYmVzdCBlbmNvZGluZyBmb3IgdGhlIGN1cnJlbnQgYmxvY2s6IGR5bmFtaWMgdHJlZXMsIHN0YXRpY1xuICogdHJlZXMgb3Igc3RvcmUsIGFuZCBvdXRwdXQgdGhlIGVuY29kZWQgYmxvY2sgdG8gdGhlIHppcCBmaWxlLlxuICovXG5mdW5jdGlvbiBfdHJfZmx1c2hfYmxvY2socywgYnVmLCBzdG9yZWRfbGVuLCBsYXN0KVxuLy9EZWZsYXRlU3RhdGUgKnM7XG4vL2NoYXJmICpidWY7ICAgICAgIC8qIGlucHV0IGJsb2NrLCBvciBOVUxMIGlmIHRvbyBvbGQgKi9cbi8vdWxnIHN0b3JlZF9sZW47ICAgLyogbGVuZ3RoIG9mIGlucHV0IGJsb2NrICovXG4vL2ludCBsYXN0OyAgICAgICAgIC8qIG9uZSBpZiB0aGlzIGlzIHRoZSBsYXN0IGJsb2NrIGZvciBhIGZpbGUgKi9cbntcbiAgdmFyIG9wdF9sZW5iLCBzdGF0aWNfbGVuYjsgIC8qIG9wdF9sZW4gYW5kIHN0YXRpY19sZW4gaW4gYnl0ZXMgKi9cbiAgdmFyIG1heF9ibGluZGV4ID0gMDsgICAgICAgIC8qIGluZGV4IG9mIGxhc3QgYml0IGxlbmd0aCBjb2RlIG9mIG5vbiB6ZXJvIGZyZXEgKi9cblxuICAvKiBCdWlsZCB0aGUgSHVmZm1hbiB0cmVlcyB1bmxlc3MgYSBzdG9yZWQgYmxvY2sgaXMgZm9yY2VkICovXG4gIGlmIChzLmxldmVsID4gMCkge1xuXG4gICAgLyogQ2hlY2sgaWYgdGhlIGZpbGUgaXMgYmluYXJ5IG9yIHRleHQgKi9cbiAgICBpZiAocy5zdHJtLmRhdGFfdHlwZSA9PT0gWl9VTktOT1dOKSB7XG4gICAgICBzLnN0cm0uZGF0YV90eXBlID0gZGV0ZWN0X2RhdGFfdHlwZShzKTtcbiAgICB9XG5cbiAgICAvKiBDb25zdHJ1Y3QgdGhlIGxpdGVyYWwgYW5kIGRpc3RhbmNlIHRyZWVzICovXG4gICAgYnVpbGRfdHJlZShzLCBzLmxfZGVzYyk7XG4gICAgLy8gVHJhY2V2KChzdGRlcnIsIFwiXFxubGl0IGRhdGE6IGR5biAlbGQsIHN0YXQgJWxkXCIsIHMtPm9wdF9sZW4sXG4gICAgLy8gICAgICAgIHMtPnN0YXRpY19sZW4pKTtcblxuICAgIGJ1aWxkX3RyZWUocywgcy5kX2Rlc2MpO1xuICAgIC8vIFRyYWNldigoc3RkZXJyLCBcIlxcbmRpc3QgZGF0YTogZHluICVsZCwgc3RhdCAlbGRcIiwgcy0+b3B0X2xlbixcbiAgICAvLyAgICAgICAgcy0+c3RhdGljX2xlbikpO1xuICAgIC8qIEF0IHRoaXMgcG9pbnQsIG9wdF9sZW4gYW5kIHN0YXRpY19sZW4gYXJlIHRoZSB0b3RhbCBiaXQgbGVuZ3RocyBvZlxuICAgICAqIHRoZSBjb21wcmVzc2VkIGJsb2NrIGRhdGEsIGV4Y2x1ZGluZyB0aGUgdHJlZSByZXByZXNlbnRhdGlvbnMuXG4gICAgICovXG5cbiAgICAvKiBCdWlsZCB0aGUgYml0IGxlbmd0aCB0cmVlIGZvciB0aGUgYWJvdmUgdHdvIHRyZWVzLCBhbmQgZ2V0IHRoZSBpbmRleFxuICAgICAqIGluIGJsX29yZGVyIG9mIHRoZSBsYXN0IGJpdCBsZW5ndGggY29kZSB0byBzZW5kLlxuICAgICAqL1xuICAgIG1heF9ibGluZGV4ID0gYnVpbGRfYmxfdHJlZShzKTtcblxuICAgIC8qIERldGVybWluZSB0aGUgYmVzdCBlbmNvZGluZy4gQ29tcHV0ZSB0aGUgYmxvY2sgbGVuZ3RocyBpbiBieXRlcy4gKi9cbiAgICBvcHRfbGVuYiA9IChzLm9wdF9sZW4gKyAzICsgNykgPj4+IDM7XG4gICAgc3RhdGljX2xlbmIgPSAocy5zdGF0aWNfbGVuICsgMyArIDcpID4+PiAzO1xuXG4gICAgLy8gVHJhY2V2KChzdGRlcnIsIFwiXFxub3B0ICVsdSglbHUpIHN0YXQgJWx1KCVsdSkgc3RvcmVkICVsdSBsaXQgJXUgXCIsXG4gICAgLy8gICAgICAgIG9wdF9sZW5iLCBzLT5vcHRfbGVuLCBzdGF0aWNfbGVuYiwgcy0+c3RhdGljX2xlbiwgc3RvcmVkX2xlbixcbiAgICAvLyAgICAgICAgcy0+bGFzdF9saXQpKTtcblxuICAgIGlmIChzdGF0aWNfbGVuYiA8PSBvcHRfbGVuYikgeyBvcHRfbGVuYiA9IHN0YXRpY19sZW5iOyB9XG5cbiAgfSBlbHNlIHtcbiAgICAvLyBBc3NlcnQoYnVmICE9IChjaGFyKikwLCBcImxvc3QgYnVmXCIpO1xuICAgIG9wdF9sZW5iID0gc3RhdGljX2xlbmIgPSBzdG9yZWRfbGVuICsgNTsgLyogZm9yY2UgYSBzdG9yZWQgYmxvY2sgKi9cbiAgfVxuXG4gIGlmICgoc3RvcmVkX2xlbiArIDQgPD0gb3B0X2xlbmIpICYmIChidWYgIT09IC0xKSkge1xuICAgIC8qIDQ6IHR3byB3b3JkcyBmb3IgdGhlIGxlbmd0aHMgKi9cblxuICAgIC8qIFRoZSB0ZXN0IGJ1ZiAhPSBOVUxMIGlzIG9ubHkgbmVjZXNzYXJ5IGlmIExJVF9CVUZTSVpFID4gV1NJWkUuXG4gICAgICogT3RoZXJ3aXNlIHdlIGNhbid0IGhhdmUgcHJvY2Vzc2VkIG1vcmUgdGhhbiBXU0laRSBpbnB1dCBieXRlcyBzaW5jZVxuICAgICAqIHRoZSBsYXN0IGJsb2NrIGZsdXNoLCBiZWNhdXNlIGNvbXByZXNzaW9uIHdvdWxkIGhhdmUgYmVlblxuICAgICAqIHN1Y2Nlc3NmdWwuIElmIExJVF9CVUZTSVpFIDw9IFdTSVpFLCBpdCBpcyBuZXZlciB0b28gbGF0ZSB0b1xuICAgICAqIHRyYW5zZm9ybSBhIGJsb2NrIGludG8gYSBzdG9yZWQgYmxvY2suXG4gICAgICovXG4gICAgX3RyX3N0b3JlZF9ibG9jayhzLCBidWYsIHN0b3JlZF9sZW4sIGxhc3QpO1xuXG4gIH0gZWxzZSBpZiAocy5zdHJhdGVneSA9PT0gWl9GSVhFRCB8fCBzdGF0aWNfbGVuYiA9PT0gb3B0X2xlbmIpIHtcblxuICAgIHNlbmRfYml0cyhzLCAoU1RBVElDX1RSRUVTIDw8IDEpICsgKGxhc3QgPyAxIDogMCksIDMpO1xuICAgIGNvbXByZXNzX2Jsb2NrKHMsIHN0YXRpY19sdHJlZSwgc3RhdGljX2R0cmVlKTtcblxuICB9IGVsc2Uge1xuICAgIHNlbmRfYml0cyhzLCAoRFlOX1RSRUVTIDw8IDEpICsgKGxhc3QgPyAxIDogMCksIDMpO1xuICAgIHNlbmRfYWxsX3RyZWVzKHMsIHMubF9kZXNjLm1heF9jb2RlICsgMSwgcy5kX2Rlc2MubWF4X2NvZGUgKyAxLCBtYXhfYmxpbmRleCArIDEpO1xuICAgIGNvbXByZXNzX2Jsb2NrKHMsIHMuZHluX2x0cmVlLCBzLmR5bl9kdHJlZSk7XG4gIH1cbiAgLy8gQXNzZXJ0IChzLT5jb21wcmVzc2VkX2xlbiA9PSBzLT5iaXRzX3NlbnQsIFwiYmFkIGNvbXByZXNzZWQgc2l6ZVwiKTtcbiAgLyogVGhlIGFib3ZlIGNoZWNrIGlzIG1hZGUgbW9kIDJeMzIsIGZvciBmaWxlcyBsYXJnZXIgdGhhbiA1MTIgTUJcbiAgICogYW5kIHVMb25nIGltcGxlbWVudGVkIG9uIDMyIGJpdHMuXG4gICAqL1xuICBpbml0X2Jsb2NrKHMpO1xuXG4gIGlmIChsYXN0KSB7XG4gICAgYmlfd2luZHVwKHMpO1xuICB9XG4gIC8vIFRyYWNldigoc3RkZXJyLFwiXFxuY29tcHJsZW4gJWx1KCVsdSkgXCIsIHMtPmNvbXByZXNzZWRfbGVuPj4zLFxuICAvLyAgICAgICBzLT5jb21wcmVzc2VkX2xlbi03Kmxhc3QpKTtcbn1cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBTYXZlIHRoZSBtYXRjaCBpbmZvIGFuZCB0YWxseSB0aGUgZnJlcXVlbmN5IGNvdW50cy4gUmV0dXJuIHRydWUgaWZcbiAqIHRoZSBjdXJyZW50IGJsb2NrIG11c3QgYmUgZmx1c2hlZC5cbiAqL1xuZnVuY3Rpb24gX3RyX3RhbGx5KHMsIGRpc3QsIGxjKVxuLy8gICAgZGVmbGF0ZV9zdGF0ZSAqcztcbi8vICAgIHVuc2lnbmVkIGRpc3Q7ICAvKiBkaXN0YW5jZSBvZiBtYXRjaGVkIHN0cmluZyAqL1xuLy8gICAgdW5zaWduZWQgbGM7ICAgIC8qIG1hdGNoIGxlbmd0aC1NSU5fTUFUQ0ggb3IgdW5tYXRjaGVkIGNoYXIgKGlmIGRpc3Q9PTApICovXG57XG4gIC8vdmFyIG91dF9sZW5ndGgsIGluX2xlbmd0aCwgZGNvZGU7XG5cbiAgcy5wZW5kaW5nX2J1ZltzLmRfYnVmICsgcy5sYXN0X2xpdCAqIDJdICAgICA9IChkaXN0ID4+PiA4KSAmIDB4ZmY7XG4gIHMucGVuZGluZ19idWZbcy5kX2J1ZiArIHMubGFzdF9saXQgKiAyICsgMV0gPSBkaXN0ICYgMHhmZjtcblxuICBzLnBlbmRpbmdfYnVmW3MubF9idWYgKyBzLmxhc3RfbGl0XSA9IGxjICYgMHhmZjtcbiAgcy5sYXN0X2xpdCsrO1xuXG4gIGlmIChkaXN0ID09PSAwKSB7XG4gICAgLyogbGMgaXMgdGhlIHVubWF0Y2hlZCBjaGFyICovXG4gICAgcy5keW5fbHRyZWVbbGMgKiAyXS8qLkZyZXEqLysrO1xuICB9IGVsc2Uge1xuICAgIHMubWF0Y2hlcysrO1xuICAgIC8qIEhlcmUsIGxjIGlzIHRoZSBtYXRjaCBsZW5ndGggLSBNSU5fTUFUQ0ggKi9cbiAgICBkaXN0LS07ICAgICAgICAgICAgIC8qIGRpc3QgPSBtYXRjaCBkaXN0YW5jZSAtIDEgKi9cbiAgICAvL0Fzc2VydCgodXNoKWRpc3QgPCAodXNoKU1BWF9ESVNUKHMpICYmXG4gICAgLy8gICAgICAgKHVzaClsYyA8PSAodXNoKShNQVhfTUFUQ0gtTUlOX01BVENIKSAmJlxuICAgIC8vICAgICAgICh1c2gpZF9jb2RlKGRpc3QpIDwgKHVzaClEX0NPREVTLCAgXCJfdHJfdGFsbHk6IGJhZCBtYXRjaFwiKTtcblxuICAgIHMuZHluX2x0cmVlWyhfbGVuZ3RoX2NvZGVbbGNdICsgTElURVJBTFMgKyAxKSAqIDJdLyouRnJlcSovKys7XG4gICAgcy5keW5fZHRyZWVbZF9jb2RlKGRpc3QpICogMl0vKi5GcmVxKi8rKztcbiAgfVxuXG4vLyAoISkgVGhpcyBibG9jayBpcyBkaXNhYmxlZCBpbiB6bGliIGRlZmF1bHRzLFxuLy8gZG9uJ3QgZW5hYmxlIGl0IGZvciBiaW5hcnkgY29tcGF0aWJpbGl0eVxuXG4vLyNpZmRlZiBUUlVOQ0FURV9CTE9DS1xuLy8gIC8qIFRyeSB0byBndWVzcyBpZiBpdCBpcyBwcm9maXRhYmxlIHRvIHN0b3AgdGhlIGN1cnJlbnQgYmxvY2sgaGVyZSAqL1xuLy8gIGlmICgocy5sYXN0X2xpdCAmIDB4MWZmZikgPT09IDAgJiYgcy5sZXZlbCA+IDIpIHtcbi8vICAgIC8qIENvbXB1dGUgYW4gdXBwZXIgYm91bmQgZm9yIHRoZSBjb21wcmVzc2VkIGxlbmd0aCAqL1xuLy8gICAgb3V0X2xlbmd0aCA9IHMubGFzdF9saXQqODtcbi8vICAgIGluX2xlbmd0aCA9IHMuc3Ryc3RhcnQgLSBzLmJsb2NrX3N0YXJ0O1xuLy9cbi8vICAgIGZvciAoZGNvZGUgPSAwOyBkY29kZSA8IERfQ09ERVM7IGRjb2RlKyspIHtcbi8vICAgICAgb3V0X2xlbmd0aCArPSBzLmR5bl9kdHJlZVtkY29kZSoyXS8qLkZyZXEqLyAqICg1ICsgZXh0cmFfZGJpdHNbZGNvZGVdKTtcbi8vICAgIH1cbi8vICAgIG91dF9sZW5ndGggPj4+PSAzO1xuLy8gICAgLy9UcmFjZXYoKHN0ZGVycixcIlxcbmxhc3RfbGl0ICV1LCBpbiAlbGQsIG91dCB+JWxkKCVsZCUlKSBcIixcbi8vICAgIC8vICAgICAgIHMtPmxhc3RfbGl0LCBpbl9sZW5ndGgsIG91dF9sZW5ndGgsXG4vLyAgICAvLyAgICAgICAxMDBMIC0gb3V0X2xlbmd0aCoxMDBML2luX2xlbmd0aCkpO1xuLy8gICAgaWYgKHMubWF0Y2hlcyA8IChzLmxhc3RfbGl0Pj4xKS8qaW50IC8yKi8gJiYgb3V0X2xlbmd0aCA8IChpbl9sZW5ndGg+PjEpLyppbnQgLzIqLykge1xuLy8gICAgICByZXR1cm4gdHJ1ZTtcbi8vICAgIH1cbi8vICB9XG4vLyNlbmRpZlxuXG4gIHJldHVybiAocy5sYXN0X2xpdCA9PT0gcy5saXRfYnVmc2l6ZSAtIDEpO1xuICAvKiBXZSBhdm9pZCBlcXVhbGl0eSB3aXRoIGxpdF9idWZzaXplIGJlY2F1c2Ugb2Ygd3JhcGFyb3VuZCBhdCA2NEtcbiAgICogb24gMTYgYml0IG1hY2hpbmVzIGFuZCBiZWNhdXNlIHN0b3JlZCBibG9ja3MgYXJlIHJlc3RyaWN0ZWQgdG9cbiAgICogNjRLLTEgYnl0ZXMuXG4gICAqL1xufVxuXG5leHBvcnRzLl90cl9pbml0ICA9IF90cl9pbml0O1xuZXhwb3J0cy5fdHJfc3RvcmVkX2Jsb2NrID0gX3RyX3N0b3JlZF9ibG9jaztcbmV4cG9ydHMuX3RyX2ZsdXNoX2Jsb2NrICA9IF90cl9mbHVzaF9ibG9jaztcbmV4cG9ydHMuX3RyX3RhbGx5ID0gX3RyX3RhbGx5O1xuZXhwb3J0cy5fdHJfYWxpZ24gPSBfdHJfYWxpZ247XG4iXSwibmFtZXMiOlsidXRpbHMiLCJyZXF1aXJlIiwiWl9GSVhFRCIsIlpfQklOQVJZIiwiWl9URVhUIiwiWl9VTktOT1dOIiwiemVybyIsImJ1ZiIsImxlbiIsImxlbmd0aCIsIlNUT1JFRF9CTE9DSyIsIlNUQVRJQ19UUkVFUyIsIkRZTl9UUkVFUyIsIk1JTl9NQVRDSCIsIk1BWF9NQVRDSCIsIkxFTkdUSF9DT0RFUyIsIkxJVEVSQUxTIiwiTF9DT0RFUyIsIkRfQ09ERVMiLCJCTF9DT0RFUyIsIkhFQVBfU0laRSIsIk1BWF9CSVRTIiwiQnVmX3NpemUiLCJNQVhfQkxfQklUUyIsIkVORF9CTE9DSyIsIlJFUF8zXzYiLCJSRVBaXzNfMTAiLCJSRVBaXzExXzEzOCIsImV4dHJhX2xiaXRzIiwiZXh0cmFfZGJpdHMiLCJleHRyYV9ibGJpdHMiLCJibF9vcmRlciIsIkRJU1RfQ09ERV9MRU4iLCJzdGF0aWNfbHRyZWUiLCJBcnJheSIsInN0YXRpY19kdHJlZSIsIl9kaXN0X2NvZGUiLCJfbGVuZ3RoX2NvZGUiLCJiYXNlX2xlbmd0aCIsImJhc2VfZGlzdCIsIlN0YXRpY1RyZWVEZXNjIiwic3RhdGljX3RyZWUiLCJleHRyYV9iaXRzIiwiZXh0cmFfYmFzZSIsImVsZW1zIiwibWF4X2xlbmd0aCIsImhhc19zdHJlZSIsInN0YXRpY19sX2Rlc2MiLCJzdGF0aWNfZF9kZXNjIiwic3RhdGljX2JsX2Rlc2MiLCJUcmVlRGVzYyIsImR5bl90cmVlIiwic3RhdF9kZXNjIiwibWF4X2NvZGUiLCJkX2NvZGUiLCJkaXN0IiwicHV0X3Nob3J0IiwicyIsInciLCJwZW5kaW5nX2J1ZiIsInBlbmRpbmciLCJzZW5kX2JpdHMiLCJ2YWx1ZSIsImJpX3ZhbGlkIiwiYmlfYnVmIiwic2VuZF9jb2RlIiwiYyIsInRyZWUiLCJiaV9yZXZlcnNlIiwiY29kZSIsInJlcyIsImJpX2ZsdXNoIiwiZ2VuX2JpdGxlbiIsImRlc2MiLCJzdHJlZSIsImV4dHJhIiwiYmFzZSIsImgiLCJuIiwibSIsImJpdHMiLCJ4Yml0cyIsImYiLCJvdmVyZmxvdyIsImJsX2NvdW50IiwiaGVhcCIsImhlYXBfbWF4Iiwib3B0X2xlbiIsInN0YXRpY19sZW4iLCJnZW5fY29kZXMiLCJuZXh0X2NvZGUiLCJ0cl9zdGF0aWNfaW5pdCIsImluaXRfYmxvY2siLCJkeW5fbHRyZWUiLCJkeW5fZHRyZWUiLCJibF90cmVlIiwibGFzdF9saXQiLCJtYXRjaGVzIiwiYmlfd2luZHVwIiwiY29weV9ibG9jayIsImhlYWRlciIsImFycmF5U2V0Iiwid2luZG93Iiwic21hbGxlciIsImRlcHRoIiwiX24yIiwiX20yIiwicHFkb3duaGVhcCIsImsiLCJ2IiwiaiIsImhlYXBfbGVuIiwiY29tcHJlc3NfYmxvY2siLCJsdHJlZSIsImR0cmVlIiwibGMiLCJseCIsImRfYnVmIiwibF9idWYiLCJidWlsZF90cmVlIiwibm9kZSIsInNjYW5fdHJlZSIsInByZXZsZW4iLCJjdXJsZW4iLCJuZXh0bGVuIiwiY291bnQiLCJtYXhfY291bnQiLCJtaW5fY291bnQiLCJzZW5kX3RyZWUiLCJidWlsZF9ibF90cmVlIiwibWF4X2JsaW5kZXgiLCJsX2Rlc2MiLCJkX2Rlc2MiLCJibF9kZXNjIiwic2VuZF9hbGxfdHJlZXMiLCJsY29kZXMiLCJkY29kZXMiLCJibGNvZGVzIiwicmFuayIsImRldGVjdF9kYXRhX3R5cGUiLCJibGFja19tYXNrIiwic3RhdGljX2luaXRfZG9uZSIsIl90cl9pbml0IiwiX3RyX3N0b3JlZF9ibG9jayIsInN0b3JlZF9sZW4iLCJsYXN0IiwiX3RyX2FsaWduIiwiX3RyX2ZsdXNoX2Jsb2NrIiwib3B0X2xlbmIiLCJzdGF0aWNfbGVuYiIsImxldmVsIiwic3RybSIsImRhdGFfdHlwZSIsInN0cmF0ZWd5IiwiX3RyX3RhbGx5IiwibGl0X2J1ZnNpemUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/trees.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/zstream.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/zstream.js ***!
  \**************************************************************************/
/***/ ((module) => {

eval("\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nfunction ZStream() {\n    /* next input byte */ this.input = null; // JS specific, because we have no pointers\n    this.next_in = 0;\n    /* number of bytes available at input */ this.avail_in = 0;\n    /* total number of input bytes read so far */ this.total_in = 0;\n    /* next output byte should be put there */ this.output = null; // JS specific, because we have no pointers\n    this.next_out = 0;\n    /* remaining free space at output */ this.avail_out = 0;\n    /* total number of bytes output so far */ this.total_out = 0;\n    /* last error message, NULL if no error */ this.msg = \"\" /*Z_NULL*/ ;\n    /* not visible by applications */ this.state = null;\n    /* best guess about the data type: binary or text */ this.data_type = 2 /*Z_UNKNOWN*/ ;\n    /* adler32 value of the uncompressed data */ this.adler = 0;\n}\nmodule.exports = ZStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHBkZi1saWIvdXBuZy9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi96c3RyZWFtLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsZ0RBQWdEO0FBQ2hELGtEQUFrRDtBQUNsRCxFQUFFO0FBQ0Ysb0VBQW9FO0FBQ3BFLHdFQUF3RTtBQUN4RSx5Q0FBeUM7QUFDekMsRUFBRTtBQUNGLHdFQUF3RTtBQUN4RSx5RUFBeUU7QUFDekUsaURBQWlEO0FBQ2pELEVBQUU7QUFDRiwwRUFBMEU7QUFDMUUseUVBQXlFO0FBQ3pFLDBFQUEwRTtBQUMxRSxxQ0FBcUM7QUFDckMsNkVBQTZFO0FBQzdFLG1EQUFtRDtBQUNuRCw2RUFBNkU7QUFFN0UsU0FBU0E7SUFDUCxtQkFBbUIsR0FDbkIsSUFBSSxDQUFDQyxLQUFLLEdBQUcsTUFBTSwyQ0FBMkM7SUFDOUQsSUFBSSxDQUFDQyxPQUFPLEdBQUc7SUFDZixzQ0FBc0MsR0FDdEMsSUFBSSxDQUFDQyxRQUFRLEdBQUc7SUFDaEIsMkNBQTJDLEdBQzNDLElBQUksQ0FBQ0MsUUFBUSxHQUFHO0lBQ2hCLHdDQUF3QyxHQUN4QyxJQUFJLENBQUNDLE1BQU0sR0FBRyxNQUFNLDJDQUEyQztJQUMvRCxJQUFJLENBQUNDLFFBQVEsR0FBRztJQUNoQixrQ0FBa0MsR0FDbEMsSUFBSSxDQUFDQyxTQUFTLEdBQUc7SUFDakIsdUNBQXVDLEdBQ3ZDLElBQUksQ0FBQ0MsU0FBUyxHQUFHO0lBQ2pCLHdDQUF3QyxHQUN4QyxJQUFJLENBQUNDLEdBQUcsR0FBRyxHQUFFLFFBQVE7SUFDckIsK0JBQStCLEdBQy9CLElBQUksQ0FBQ0MsS0FBSyxHQUFHO0lBQ2Isa0RBQWtELEdBQ2xELElBQUksQ0FBQ0MsU0FBUyxHQUFHLEVBQUMsV0FBVztJQUM3QiwwQ0FBMEMsR0FDMUMsSUFBSSxDQUFDQyxLQUFLLEdBQUc7QUFDZjtBQUVBQyxPQUFPQyxPQUFPLEdBQUdkIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2l2aWwtZW5naW5lZXJpbmctcGxhdGZvcm0vLi9ub2RlX21vZHVsZXMvQHBkZi1saWIvdXBuZy9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi96c3RyZWFtLmpzPzhiMzAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbmZ1bmN0aW9uIFpTdHJlYW0oKSB7XG4gIC8qIG5leHQgaW5wdXQgYnl0ZSAqL1xuICB0aGlzLmlucHV0ID0gbnVsbDsgLy8gSlMgc3BlY2lmaWMsIGJlY2F1c2Ugd2UgaGF2ZSBubyBwb2ludGVyc1xuICB0aGlzLm5leHRfaW4gPSAwO1xuICAvKiBudW1iZXIgb2YgYnl0ZXMgYXZhaWxhYmxlIGF0IGlucHV0ICovXG4gIHRoaXMuYXZhaWxfaW4gPSAwO1xuICAvKiB0b3RhbCBudW1iZXIgb2YgaW5wdXQgYnl0ZXMgcmVhZCBzbyBmYXIgKi9cbiAgdGhpcy50b3RhbF9pbiA9IDA7XG4gIC8qIG5leHQgb3V0cHV0IGJ5dGUgc2hvdWxkIGJlIHB1dCB0aGVyZSAqL1xuICB0aGlzLm91dHB1dCA9IG51bGw7IC8vIEpTIHNwZWNpZmljLCBiZWNhdXNlIHdlIGhhdmUgbm8gcG9pbnRlcnNcbiAgdGhpcy5uZXh0X291dCA9IDA7XG4gIC8qIHJlbWFpbmluZyBmcmVlIHNwYWNlIGF0IG91dHB1dCAqL1xuICB0aGlzLmF2YWlsX291dCA9IDA7XG4gIC8qIHRvdGFsIG51bWJlciBvZiBieXRlcyBvdXRwdXQgc28gZmFyICovXG4gIHRoaXMudG90YWxfb3V0ID0gMDtcbiAgLyogbGFzdCBlcnJvciBtZXNzYWdlLCBOVUxMIGlmIG5vIGVycm9yICovXG4gIHRoaXMubXNnID0gJycvKlpfTlVMTCovO1xuICAvKiBub3QgdmlzaWJsZSBieSBhcHBsaWNhdGlvbnMgKi9cbiAgdGhpcy5zdGF0ZSA9IG51bGw7XG4gIC8qIGJlc3QgZ3Vlc3MgYWJvdXQgdGhlIGRhdGEgdHlwZTogYmluYXJ5IG9yIHRleHQgKi9cbiAgdGhpcy5kYXRhX3R5cGUgPSAyLypaX1VOS05PV04qLztcbiAgLyogYWRsZXIzMiB2YWx1ZSBvZiB0aGUgdW5jb21wcmVzc2VkIGRhdGEgKi9cbiAgdGhpcy5hZGxlciA9IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gWlN0cmVhbTtcbiJdLCJuYW1lcyI6WyJaU3RyZWFtIiwiaW5wdXQiLCJuZXh0X2luIiwiYXZhaWxfaW4iLCJ0b3RhbF9pbiIsIm91dHB1dCIsIm5leHRfb3V0IiwiYXZhaWxfb3V0IiwidG90YWxfb3V0IiwibXNnIiwic3RhdGUiLCJkYXRhX3R5cGUiLCJhZGxlciIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@pdf-lib/upng/node_modules/pako/lib/zlib/zstream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/standard-fonts/es/Courier-Bold.compressed.json":
/*!******************************************************************************!*\
  !*** ./node_modules/@pdf-lib/standard-fonts/es/Courier-Bold.compressed.json ***!
  \******************************************************************************/
/***/ ((module) => {

module.exports = "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";

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/standard-fonts/es/Courier-BoldOblique.compressed.json":
/*!*************************************************************************************!*\
  !*** ./node_modules/@pdf-lib/standard-fonts/es/Courier-BoldOblique.compressed.json ***!
  \*************************************************************************************/
/***/ ((module) => {

module.exports = "eJyFWdtyGjkQ/RVqnnarcAo7vuE3jEnCxgEvGDtxKg9iRgxaa0ZEF9s4lX/fnrGdTVZ9lBcKTmvU96PW8C0bmqqStc9OsqsPwYlSdnaPDvb6naP+3v5+1s3emNpPRCVpwdAEq6TdOTW6mC61+hpksyBo/euCTrOg89MKUSm9/XUNwddSletGcbOcfo+90Cof1KWmdTu7e4S4N+pBFhfK5+vsxNsgu9lwLazIvbRz2Tw7evCyLmQxM5Won809PTUP2cnnnYOj7s7eQa97fNjvHvd2v3SzBS21WtXywjjllakbRb3eT4LLtcpva+lcdkJPZlfSunZZ1uu9ftXr9UjFxHiVP7my2drGh84f+Z+d3f5xv0uf/V77udt+vm4/jzqDwixlZ751XlauM65zYzfGCi+LV53OQOvOrNnHdWbSSXtHKOkZ0apC1eU8X8s2dO0mcy/qQtjiRUoLh2Lz7jmWB4cUto8vv/Zf97vZwOVNhGx2crhHP8/kj987uxShbO6Ld9fZyfF++/WKvu72Dp/i/EF6q3IKxedv2fVH2qAJ1YQscRtBEfje/R8sH3Itqhj/Ggx5utSxpA7VsglxWceywmgtbIxvpM2bio0EoiKRo/AAC9pcMfsJK2stV0gEHhOu2dHdMk/p4GI0p0YTMbzebtaS8Z5cUYbxxGnh1jH8KK2JUVMzWfL3zEq/tpJZu6JuZVB1x6x16oEB5R3nneRjWivO4Nxow+zhZKWASDcNHCv9GgRTg6WV1IiMm8ReriWJOPeM7YMYOo2hYQydxdAoht7E0NsYehdD4xj6K4bex9B5DH2IoUkMTWPoIob+jqFZDM1j6DKGFjF0FUPXMfQxhj7F0E0MLekQupWep40lyUCfPj8HOSVXKlc2DwyLhoa1HZ0cTIu0/MYbw3DOkukxhn+ZDmK4gGkohuViSMXQPzHE0CvTwky0mK5laG/DhDKGGG5g6IWJfYihuxi6jyGGSbcM6fP1BQphyR2m7fpUNXqlC3jUF+aeiTN/OjfHpW4GlriEmoGO5dktd3astLGKPQ/ALnmwdIznTADbtnGqHTnh1MJHswyKJJUBFNCI241/IwahXzHdsWIKnyY5lmYKUZbckfaEs6PY08DR5E5ayfQ+zUKitGLDkRpdASTjxX/hXQqXiHBaCkL0IwFALrVWG6eYRiVP/doENCk+Hfp8aVMAuNFH5MFzg0vL5CstmXYGfVWJ3HI1vLSSU1wYL3K+3wq6ZUnWf8t2YS4LCig3oYa6FDZUWgRGjSlpyGRYOhesH7LiC3bAjDzGFiua8fih8BwcsFOE8woqIrmgWQ2Cj3czWzLdqYFeg3Bmd2pNusVSyTNJG+N8SlB+AhRNSGdUgtR9whYU6k5x1fwJWDZIdYYADy1SD23BQ669dqEekaktF3yfLHAYBGqGBbAuoAdGWMkZEQR3/0g6mr+8qmBUIcrJQR0IPi6TpAEa1Shg1MvkbkO0G2DVUYInHXDTQUJUQLs2j7IuGcEMqHibdDIkmyQlHKCUWmBIDn29SUTucm0ss9kUaZ+BuM0BXgBrF0hB4CuzfbfhQjvgMDPRFJTgAOGAVqugvdpoZswMwMFL4CCNWl4JXagVc7vaYmqYAD0qVSyjZJklTh0syoEdNaJBlNAJCNAYbNS8eaOBgXv9trTmVtbsHcjKUjkw9b4FyR6nGCVQV/NXkRGoKQscMigyN+CBGxCx55dc4BXYyDMTyhCSgk7ylkejHzwdkWCAxodEVYIAP6LWQLqnKCPo6EGZckgzdmKaHEuAh2dSeyZXnidpf28SjIhNq5hXGgpYZNJz5giFvgATTsvjVMCWCpkxbZ6oV74i3yfr+BwkzltRyEpYxnKZYIUxiNIYFc45sJqCthaaORmamwlocJOqqBpMTYvf5A/ERyKHSsCl5NBzVrmk8kGYJ1M3TVteEEtw/3YYkKIhMCJANi9UzqXhDGxkk95MQH4MwGfpsk5KB2DPAeRofuaagn0eEx0yQqc90n2bdAUMAuNkKwATfPpyY8om37Xh3o9gLg1YRFuhf6vSF1ruIH8ETtXJrSjk+IRQqMdHofkf8ks3ey9tfSGUbf49/vL9XxrnGMA=";

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/standard-fonts/es/Courier-Oblique.compressed.json":
/*!*********************************************************************************!*\
  !*** ./node_modules/@pdf-lib/standard-fonts/es/Courier-Oblique.compressed.json ***!
  \*********************************************************************************/
/***/ ((module) => {

module.exports = "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";

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/standard-fonts/es/Courier.compressed.json":
/*!*************************************************************************!*\
  !*** ./node_modules/@pdf-lib/standard-fonts/es/Courier.compressed.json ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = "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";

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/standard-fonts/es/Helvetica-Bold.compressed.json":
/*!********************************************************************************!*\
  !*** ./node_modules/@pdf-lib/standard-fonts/es/Helvetica-Bold.compressed.json ***!
  \********************************************************************************/
/***/ ((module) => {

module.exports = "";

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/standard-fonts/es/Helvetica-BoldOblique.compressed.json":
/*!***************************************************************************************!*\
  !*** ./node_modules/@pdf-lib/standard-fonts/es/Helvetica-BoldOblique.compressed.json ***!
  \***************************************************************************************/
/***/ ((module) => {

module.exports = "";

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/standard-fonts/es/Helvetica-Oblique.compressed.json":
/*!***********************************************************************************!*\
  !*** ./node_modules/@pdf-lib/standard-fonts/es/Helvetica-Oblique.compressed.json ***!
  \***********************************************************************************/
/***/ ((module) => {

module.exports = "";

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/standard-fonts/es/Helvetica.compressed.json":
/*!***************************************************************************!*\
  !*** ./node_modules/@pdf-lib/standard-fonts/es/Helvetica.compressed.json ***!
  \***************************************************************************/
/***/ ((module) => {

module.exports = "";

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/standard-fonts/es/Symbol.compressed.json":
/*!************************************************************************!*\
  !*** ./node_modules/@pdf-lib/standard-fonts/es/Symbol.compressed.json ***!
  \************************************************************************/
/***/ ((module) => {

module.exports = "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";

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/standard-fonts/es/Times-Bold.compressed.json":
/*!****************************************************************************!*\
  !*** ./node_modules/@pdf-lib/standard-fonts/es/Times-Bold.compressed.json ***!
  \****************************************************************************/
/***/ ((module) => {

module.exports = "";

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/standard-fonts/es/Times-BoldItalic.compressed.json":
/*!**********************************************************************************!*\
  !*** ./node_modules/@pdf-lib/standard-fonts/es/Times-BoldItalic.compressed.json ***!
  \**********************************************************************************/
/***/ ((module) => {

module.exports = "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";

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/standard-fonts/es/Times-Italic.compressed.json":
/*!******************************************************************************!*\
  !*** ./node_modules/@pdf-lib/standard-fonts/es/Times-Italic.compressed.json ***!
  \******************************************************************************/
/***/ ((module) => {

module.exports = "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";

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/standard-fonts/es/Times-Roman.compressed.json":
/*!*****************************************************************************!*\
  !*** ./node_modules/@pdf-lib/standard-fonts/es/Times-Roman.compressed.json ***!
  \*****************************************************************************/
/***/ ((module) => {

module.exports = "";

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/standard-fonts/es/ZapfDingbats.compressed.json":
/*!******************************************************************************!*\
  !*** ./node_modules/@pdf-lib/standard-fonts/es/ZapfDingbats.compressed.json ***!
  \******************************************************************************/
/***/ ((module) => {

module.exports = "eJxtmNtu20YQhl+F4FULyMGeD7pz3AY1ChtG7NpFA18w1NomIlECSRcxgrx7SVk7+wOdG8H5OJydf2Z2d5gf9cV+t0v9VK/r+6vXsXlOlbHe28paq229qj/t++m62aXZ4J/m8PRb1z9/baZxefK63Z6eXN5dVMvTCh83u277xr/6kLrnl2XNq7TpXnczuZyabdee98/b2VzM/x4/dd/T5qab2pd6PQ2vaVVfvDRD005puE3Lu7eH1HbN9hTjx4/77/X6y5lcnUmjVzHIVVDicVX/1W/SsO36dLMfu6nb9/X6TAoBD+5euvZbn8axXtuZ36dhPJrVQqgPQoh5hev91LWLkIv94W1Ygq9+aX+tZAx2tfz64284/sblN/rqfLP/mqrbt3FKu7G67Nv9cNgPzZQ2H6rz7bb6vLgZq89pTMO/M/xfEqturJpqSM/d7GJIm2oamk3aNcO3av80O5xh3yyKmm1193ZIT02bqovTKjP+MAf++7zsZvZ3276kYyWWXB0z99S18/PbafPHQ71W4fjn/fxnFO+ZvkrT0LVzTr78qB/+nk38bHM9exgP8zr1z9U7jt6840YW5uSJKcZOCaBBnKgm5mU8MVNYyMwWFvO7Ukagkmgg6sDWQ5yFFqjzUrLEaQ3BEmiwNsMSaZS0vgWfOkPHWQowNeTUc0kumnxZvsgPxlGai6VTGUqAVCTQ6QkWnc77DKEiLktSUBJKqHIQZ86d8gCpHYoiEzMsb1ubYy8vW50DChB5ZhGqrijD0EqUIeiaEHIfCg5Kpuu0ApiToaGPSY0uaQsyr65L2oKi1yFt1PLaQ3lzfXTgXodGoJYzglndSLDMPg1sTPJpQJHJigw0QrGERqD9YhyTOgONQDUyuF1zaxuokc/BW2ztXCMrGZ9WMW1oQZHIXWNBkSCfRZEL5BMUiZw6CzVSFCfUSGZFNjIldoKDkonTKQiJIGzWmFd3BizJJ9SINoLDriOfUCOZS+zg+KGD1qGiLNMLxtJD1/ns00ON6EzyUCM6vbxhoBKaqbG3DFQCNiL1iHccBPV0DHhQH/JW8EW90dkyFKGywCJU0WkVSvSGeiSUODWFFD0HYdPQVoiRgfPMA+/nnRgiAyNYSjpWNQcNSMrtFCUH4ZIRpSCWocFCSuhCEY6hoUClc0WC52BJlCYYLQdhN+hygRRRlo5BKRRLS6oihSqh+ZzzRGG1Mo4Iz1LoP0qsxDGFzk0JE42ji0jCPejomJKCuwil4m5CiRMEUMVSzVLDUstSx1Juc0oVWMpqY295qVltmtWmWW2a1aZZbZrVplltmtWmWW2G1WZYbYbVZlhthtVmWG2G1WZYbYbVZlhtltVmWW2W1WZZbZbVZlltltVmWW2W1QYjQCh7E2aAQHeGhCFgPoNoy8KNb2wxBhmGKBxoUZXlLGsLI6AsftEDHV0wIURVbANLcTKlGGBIKPOAxCmhePCKUwFzAmpDFRQvjA9R06Hq8TONvshgKDCuRAZTXigUxjxNFfKRo3CLhnIJBMFRvMZpqpNBMlQJzGT5WFQMVQI/AikPMIhEU1aDjqJvQwmjSHB05cC9jbYwc5UtAHNLhDw41ha+lEqF4JaH3gmB61SYcqInxTDmQK8v08vjqv4zDf1N0w3Lf4A8/vwPpfK11w==";

/***/ }),

/***/ "(rsc)/./node_modules/@pdf-lib/standard-fonts/es/all-encodings.compressed.json":
/*!*******************************************************************************!*\
  !*** ./node_modules/@pdf-lib/standard-fonts/es/all-encodings.compressed.json ***!
  \*******************************************************************************/
/***/ ((module) => {

module.exports = "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";

/***/ })

};
;