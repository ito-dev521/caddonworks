"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/deep-equal";
exports.ids = ["vendor-chunks/deep-equal"];
exports.modules = {

/***/ "(rsc)/./node_modules/deep-equal/index.js":
/*!******************************************!*\
  !*** ./node_modules/deep-equal/index.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar assign = __webpack_require__(/*! object.assign */ \"(rsc)/./node_modules/object.assign/index.js\");\nvar callBound = __webpack_require__(/*! call-bind/callBound */ \"(rsc)/./node_modules/call-bind/callBound.js\");\nvar flags = __webpack_require__(/*! regexp.prototype.flags */ \"(rsc)/./node_modules/regexp.prototype.flags/index.js\");\nvar GetIntrinsic = __webpack_require__(/*! get-intrinsic */ \"(rsc)/./node_modules/get-intrinsic/index.js\");\nvar getIterator = __webpack_require__(/*! es-get-iterator */ \"(rsc)/./node_modules/es-get-iterator/node.js\");\nvar getSideChannel = __webpack_require__(/*! side-channel */ \"(rsc)/./node_modules/side-channel/index.js\");\nvar is = __webpack_require__(/*! object-is */ \"(rsc)/./node_modules/object-is/index.js\");\nvar isArguments = __webpack_require__(/*! is-arguments */ \"(rsc)/./node_modules/is-arguments/index.js\");\nvar isArray = __webpack_require__(/*! isarray */ \"(rsc)/./node_modules/isarray/index.js\");\nvar isArrayBuffer = __webpack_require__(/*! is-array-buffer */ \"(rsc)/./node_modules/is-array-buffer/index.js\");\nvar isDate = __webpack_require__(/*! is-date-object */ \"(rsc)/./node_modules/is-date-object/index.js\");\nvar isRegex = __webpack_require__(/*! is-regex */ \"(rsc)/./node_modules/is-regex/index.js\");\nvar isSharedArrayBuffer = __webpack_require__(/*! is-shared-array-buffer */ \"(rsc)/./node_modules/is-shared-array-buffer/index.js\");\nvar objectKeys = __webpack_require__(/*! object-keys */ \"(rsc)/./node_modules/object-keys/index.js\");\nvar whichBoxedPrimitive = __webpack_require__(/*! which-boxed-primitive */ \"(rsc)/./node_modules/which-boxed-primitive/index.js\");\nvar whichCollection = __webpack_require__(/*! which-collection */ \"(rsc)/./node_modules/which-collection/index.js\");\nvar whichTypedArray = __webpack_require__(/*! which-typed-array */ \"(rsc)/./node_modules/which-typed-array/index.js\");\nvar byteLength = __webpack_require__(/*! array-buffer-byte-length */ \"(rsc)/./node_modules/array-buffer-byte-length/index.js\");\nvar sabByteLength = callBound(\"SharedArrayBuffer.prototype.byteLength\", true);\nvar $getTime = callBound(\"Date.prototype.getTime\");\nvar gPO = Object.getPrototypeOf;\nvar $objToString = callBound(\"Object.prototype.toString\");\nvar $Set = GetIntrinsic(\"%Set%\", true);\nvar $mapHas = callBound(\"Map.prototype.has\", true);\nvar $mapGet = callBound(\"Map.prototype.get\", true);\nvar $mapSize = callBound(\"Map.prototype.size\", true);\nvar $setAdd = callBound(\"Set.prototype.add\", true);\nvar $setDelete = callBound(\"Set.prototype.delete\", true);\nvar $setHas = callBound(\"Set.prototype.has\", true);\nvar $setSize = callBound(\"Set.prototype.size\", true);\n// taken from https://github.com/browserify/commonjs-assert/blob/bba838e9ba9e28edf3127ce6974624208502f6bc/internal/util/comparisons.js#L401-L414\nfunction setHasEqualElement(set, val1, opts, channel) {\n    var i = getIterator(set);\n    var result;\n    while((result = i.next()) && !result.done){\n        if (internalDeepEqual(val1, result.value, opts, channel)) {\n            // Remove the matching element to make sure we do not check that again.\n            $setDelete(set, result.value);\n            return true;\n        }\n    }\n    return false;\n}\n// taken from https://github.com/browserify/commonjs-assert/blob/bba838e9ba9e28edf3127ce6974624208502f6bc/internal/util/comparisons.js#L416-L439\nfunction findLooseMatchingPrimitives(prim) {\n    if (typeof prim === \"undefined\") {\n        return null;\n    }\n    if (typeof prim === \"object\") {\n        return void 0;\n    }\n    if (typeof prim === \"symbol\") {\n        return false;\n    }\n    if (typeof prim === \"string\" || typeof prim === \"number\") {\n        // Loose equal entries exist only if the string is possible to convert to a regular number and not NaN.\n        return +prim === +prim; // eslint-disable-line no-implicit-coercion\n    }\n    return true;\n}\n// taken from https://github.com/browserify/commonjs-assert/blob/bba838e9ba9e28edf3127ce6974624208502f6bc/internal/util/comparisons.js#L449-L460\nfunction mapMightHaveLoosePrim(a, b, prim, item, opts, channel) {\n    var altValue = findLooseMatchingPrimitives(prim);\n    if (altValue != null) {\n        return altValue;\n    }\n    var curB = $mapGet(b, altValue);\n    var looseOpts = assign({}, opts, {\n        strict: false\n    });\n    if (typeof curB === \"undefined\" && !$mapHas(b, altValue) || !internalDeepEqual(item, curB, looseOpts, channel)) {\n        return false;\n    }\n    // eslint-disable-next-line no-use-before-define\n    return !$mapHas(a, altValue) && internalDeepEqual(item, curB, looseOpts, channel);\n}\n// taken from https://github.com/browserify/commonjs-assert/blob/bba838e9ba9e28edf3127ce6974624208502f6bc/internal/util/comparisons.js#L441-L447\nfunction setMightHaveLoosePrim(a, b, prim) {\n    var altValue = findLooseMatchingPrimitives(prim);\n    if (altValue != null) {\n        return altValue;\n    }\n    return $setHas(b, altValue) && !$setHas(a, altValue);\n}\n// taken from https://github.com/browserify/commonjs-assert/blob/bba838e9ba9e28edf3127ce6974624208502f6bc/internal/util/comparisons.js#L518-L533\nfunction mapHasEqualEntry(set, map, key1, item1, opts, channel) {\n    var i = getIterator(set);\n    var result;\n    var key2;\n    while((result = i.next()) && !result.done){\n        key2 = result.value;\n        if (// eslint-disable-next-line no-use-before-define\n        internalDeepEqual(key1, key2, opts, channel) && internalDeepEqual(item1, $mapGet(map, key2), opts, channel)) {\n            $setDelete(set, key2);\n            return true;\n        }\n    }\n    return false;\n}\nfunction internalDeepEqual(actual, expected, options, channel) {\n    var opts = options || {};\n    // 7.1. All identical values are equivalent, as determined by ===.\n    if (opts.strict ? is(actual, expected) : actual === expected) {\n        return true;\n    }\n    var actualBoxed = whichBoxedPrimitive(actual);\n    var expectedBoxed = whichBoxedPrimitive(expected);\n    if (actualBoxed !== expectedBoxed) {\n        return false;\n    }\n    // 7.3. Other pairs that do not both pass typeof value == 'object', equivalence is determined by ==.\n    if (!actual || !expected || typeof actual !== \"object\" && typeof expected !== \"object\") {\n        return opts.strict ? is(actual, expected) : actual == expected; // eslint-disable-line eqeqeq\n    }\n    /*\n   * 7.4. For all other Object pairs, including Array objects, equivalence is\n   * determined by having the same number of owned properties (as verified\n   * with Object.prototype.hasOwnProperty.call), the same set of keys\n   * (although not necessarily the same order), equivalent values for every\n   * corresponding key, and an identical 'prototype' property. Note: this\n   * accounts for both named and indexed properties on Arrays.\n   */ // see https://github.com/nodejs/node/commit/d3aafd02efd3a403d646a3044adcf14e63a88d32 for memos/channel inspiration\n    var hasActual = channel.has(actual);\n    var hasExpected = channel.has(expected);\n    var sentinel;\n    if (hasActual && hasExpected) {\n        if (channel.get(actual) === channel.get(expected)) {\n            return true;\n        }\n    } else {\n        sentinel = {};\n    }\n    if (!hasActual) {\n        channel.set(actual, sentinel);\n    }\n    if (!hasExpected) {\n        channel.set(expected, sentinel);\n    }\n    // eslint-disable-next-line no-use-before-define\n    return objEquiv(actual, expected, opts, channel);\n}\nfunction isBuffer(x) {\n    if (!x || typeof x !== \"object\" || typeof x.length !== \"number\") {\n        return false;\n    }\n    if (typeof x.copy !== \"function\" || typeof x.slice !== \"function\") {\n        return false;\n    }\n    if (x.length > 0 && typeof x[0] !== \"number\") {\n        return false;\n    }\n    return !!(x.constructor && x.constructor.isBuffer && x.constructor.isBuffer(x));\n}\nfunction setEquiv(a, b, opts, channel) {\n    if ($setSize(a) !== $setSize(b)) {\n        return false;\n    }\n    var iA = getIterator(a);\n    var iB = getIterator(b);\n    var resultA;\n    var resultB;\n    var set;\n    while((resultA = iA.next()) && !resultA.done){\n        if (resultA.value && typeof resultA.value === \"object\") {\n            if (!set) {\n                set = new $Set();\n            }\n            $setAdd(set, resultA.value);\n        } else if (!$setHas(b, resultA.value)) {\n            if (opts.strict) {\n                return false;\n            }\n            if (!setMightHaveLoosePrim(a, b, resultA.value)) {\n                return false;\n            }\n            if (!set) {\n                set = new $Set();\n            }\n            $setAdd(set, resultA.value);\n        }\n    }\n    if (set) {\n        while((resultB = iB.next()) && !resultB.done){\n            // We have to check if a primitive value is already matching and only if it's not, go hunting for it.\n            if (resultB.value && typeof resultB.value === \"object\") {\n                if (!setHasEqualElement(set, resultB.value, opts.strict, channel)) {\n                    return false;\n                }\n            } else if (!opts.strict && !$setHas(a, resultB.value) && !setHasEqualElement(set, resultB.value, opts.strict, channel)) {\n                return false;\n            }\n        }\n        return $setSize(set) === 0;\n    }\n    return true;\n}\nfunction mapEquiv(a, b, opts, channel) {\n    if ($mapSize(a) !== $mapSize(b)) {\n        return false;\n    }\n    var iA = getIterator(a);\n    var iB = getIterator(b);\n    var resultA;\n    var resultB;\n    var set;\n    var key;\n    var item1;\n    var item2;\n    while((resultA = iA.next()) && !resultA.done){\n        key = resultA.value[0];\n        item1 = resultA.value[1];\n        if (key && typeof key === \"object\") {\n            if (!set) {\n                set = new $Set();\n            }\n            $setAdd(set, key);\n        } else {\n            item2 = $mapGet(b, key);\n            if (typeof item2 === \"undefined\" && !$mapHas(b, key) || !internalDeepEqual(item1, item2, opts, channel)) {\n                if (opts.strict) {\n                    return false;\n                }\n                if (!mapMightHaveLoosePrim(a, b, key, item1, opts, channel)) {\n                    return false;\n                }\n                if (!set) {\n                    set = new $Set();\n                }\n                $setAdd(set, key);\n            }\n        }\n    }\n    if (set) {\n        while((resultB = iB.next()) && !resultB.done){\n            key = resultB.value[0];\n            item2 = resultB.value[1];\n            if (key && typeof key === \"object\") {\n                if (!mapHasEqualEntry(set, a, key, item2, opts, channel)) {\n                    return false;\n                }\n            } else if (!opts.strict && (!a.has(key) || !internalDeepEqual($mapGet(a, key), item2, opts, channel)) && !mapHasEqualEntry(set, a, key, item2, assign({}, opts, {\n                strict: false\n            }), channel)) {\n                return false;\n            }\n        }\n        return $setSize(set) === 0;\n    }\n    return true;\n}\nfunction objEquiv(a, b, opts, channel) {\n    /* eslint max-statements: [2, 100], max-lines-per-function: [2, 120], max-depth: [2, 5], max-lines: [2, 400] */ var i, key;\n    if (typeof a !== typeof b) {\n        return false;\n    }\n    if (a == null || b == null) {\n        return false;\n    }\n    if ($objToString(a) !== $objToString(b)) {\n        return false;\n    }\n    if (isArguments(a) !== isArguments(b)) {\n        return false;\n    }\n    var aIsArray = isArray(a);\n    var bIsArray = isArray(b);\n    if (aIsArray !== bIsArray) {\n        return false;\n    }\n    // TODO: replace when a cross-realm brand check is available\n    var aIsError = a instanceof Error;\n    var bIsError = b instanceof Error;\n    if (aIsError !== bIsError) {\n        return false;\n    }\n    if (aIsError || bIsError) {\n        if (a.name !== b.name || a.message !== b.message) {\n            return false;\n        }\n    }\n    var aIsRegex = isRegex(a);\n    var bIsRegex = isRegex(b);\n    if (aIsRegex !== bIsRegex) {\n        return false;\n    }\n    if ((aIsRegex || bIsRegex) && (a.source !== b.source || flags(a) !== flags(b))) {\n        return false;\n    }\n    var aIsDate = isDate(a);\n    var bIsDate = isDate(b);\n    if (aIsDate !== bIsDate) {\n        return false;\n    }\n    if (aIsDate || bIsDate) {\n        if ($getTime(a) !== $getTime(b)) {\n            return false;\n        }\n    }\n    if (opts.strict && gPO && gPO(a) !== gPO(b)) {\n        return false;\n    }\n    var aWhich = whichTypedArray(a);\n    var bWhich = whichTypedArray(b);\n    if (aWhich !== bWhich) {\n        return false;\n    }\n    if (aWhich || bWhich) {\n        if (a.length !== b.length) {\n            return false;\n        }\n        for(i = 0; i < a.length; i++){\n            if (a[i] !== b[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    var aIsBuffer = isBuffer(a);\n    var bIsBuffer = isBuffer(b);\n    if (aIsBuffer !== bIsBuffer) {\n        return false;\n    }\n    if (aIsBuffer || bIsBuffer) {\n        if (a.length !== b.length) {\n            return false;\n        }\n        for(i = 0; i < a.length; i++){\n            if (a[i] !== b[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    var aIsArrayBuffer = isArrayBuffer(a);\n    var bIsArrayBuffer = isArrayBuffer(b);\n    if (aIsArrayBuffer !== bIsArrayBuffer) {\n        return false;\n    }\n    if (aIsArrayBuffer || bIsArrayBuffer) {\n        if (byteLength(a) !== byteLength(b)) {\n            return false;\n        }\n        return typeof Uint8Array === \"function\" && internalDeepEqual(new Uint8Array(a), new Uint8Array(b), opts, channel);\n    }\n    var aIsSAB = isSharedArrayBuffer(a);\n    var bIsSAB = isSharedArrayBuffer(b);\n    if (aIsSAB !== bIsSAB) {\n        return false;\n    }\n    if (aIsSAB || bIsSAB) {\n        if (sabByteLength(a) !== sabByteLength(b)) {\n            return false;\n        }\n        return typeof Uint8Array === \"function\" && internalDeepEqual(new Uint8Array(a), new Uint8Array(b), opts, channel);\n    }\n    if (typeof a !== typeof b) {\n        return false;\n    }\n    var ka = objectKeys(a);\n    var kb = objectKeys(b);\n    // having the same number of owned properties (keys incorporates hasOwnProperty)\n    if (ka.length !== kb.length) {\n        return false;\n    }\n    // the same set of keys (although not necessarily the same order),\n    ka.sort();\n    kb.sort();\n    // ~~~cheap key test\n    for(i = ka.length - 1; i >= 0; i--){\n        if (ka[i] != kb[i]) {\n            return false;\n        } // eslint-disable-line eqeqeq\n    }\n    // equivalent values for every corresponding key, and ~~~possibly expensive deep test\n    for(i = ka.length - 1; i >= 0; i--){\n        key = ka[i];\n        if (!internalDeepEqual(a[key], b[key], opts, channel)) {\n            return false;\n        }\n    }\n    var aCollection = whichCollection(a);\n    var bCollection = whichCollection(b);\n    if (aCollection !== bCollection) {\n        return false;\n    }\n    if (aCollection === \"Set\" || bCollection === \"Set\") {\n        return setEquiv(a, b, opts, channel);\n    }\n    if (aCollection === \"Map\") {\n        return mapEquiv(a, b, opts, channel);\n    }\n    return true;\n}\nmodule.exports = function deepEqual(a, b, opts) {\n    return internalDeepEqual(a, b, opts, getSideChannel());\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/deep-equal/index.js\n");

/***/ })

};
;