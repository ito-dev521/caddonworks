/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/jsonfile";
exports.ids = ["vendor-chunks/jsonfile"];
exports.modules = {

/***/ "(rsc)/./node_modules/jsonfile/index.js":
/*!****************************************!*\
  !*** ./node_modules/jsonfile/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var _fs;\ntry {\n    _fs = __webpack_require__(/*! graceful-fs */ \"(rsc)/./node_modules/graceful-fs/graceful-fs.js\");\n} catch (_) {\n    _fs = __webpack_require__(/*! fs */ \"fs\");\n}\nfunction readFile(file, options, callback) {\n    if (callback == null) {\n        callback = options;\n        options = {};\n    }\n    if (typeof options === \"string\") {\n        options = {\n            encoding: options\n        };\n    }\n    options = options || {};\n    var fs = options.fs || _fs;\n    var shouldThrow = true;\n    if (\"throws\" in options) {\n        shouldThrow = options.throws;\n    }\n    fs.readFile(file, options, function(err, data) {\n        if (err) return callback(err);\n        data = stripBom(data);\n        var obj;\n        try {\n            obj = JSON.parse(data, options ? options.reviver : null);\n        } catch (err2) {\n            if (shouldThrow) {\n                err2.message = file + \": \" + err2.message;\n                return callback(err2);\n            } else {\n                return callback(null, null);\n            }\n        }\n        callback(null, obj);\n    });\n}\nfunction readFileSync(file, options) {\n    options = options || {};\n    if (typeof options === \"string\") {\n        options = {\n            encoding: options\n        };\n    }\n    var fs = options.fs || _fs;\n    var shouldThrow = true;\n    if (\"throws\" in options) {\n        shouldThrow = options.throws;\n    }\n    try {\n        var content = fs.readFileSync(file, options);\n        content = stripBom(content);\n        return JSON.parse(content, options.reviver);\n    } catch (err) {\n        if (shouldThrow) {\n            err.message = file + \": \" + err.message;\n            throw err;\n        } else {\n            return null;\n        }\n    }\n}\nfunction stringify(obj, options) {\n    var spaces;\n    var EOL = \"\\n\";\n    if (typeof options === \"object\" && options !== null) {\n        if (options.spaces) {\n            spaces = options.spaces;\n        }\n        if (options.EOL) {\n            EOL = options.EOL;\n        }\n    }\n    var str = JSON.stringify(obj, options ? options.replacer : null, spaces);\n    return str.replace(/\\n/g, EOL) + EOL;\n}\nfunction writeFile(file, obj, options, callback) {\n    if (callback == null) {\n        callback = options;\n        options = {};\n    }\n    options = options || {};\n    var fs = options.fs || _fs;\n    var str = \"\";\n    try {\n        str = stringify(obj, options);\n    } catch (err) {\n        // Need to return whether a callback was passed or not\n        if (callback) callback(err, null);\n        return;\n    }\n    fs.writeFile(file, str, options, callback);\n}\nfunction writeFileSync(file, obj, options) {\n    options = options || {};\n    var fs = options.fs || _fs;\n    var str = stringify(obj, options);\n    // not sure if fs.writeFileSync returns anything, but just in case\n    return fs.writeFileSync(file, str, options);\n}\nfunction stripBom(content) {\n    // we do this because JSON.parse would convert it to a utf8 string if encoding wasn't specified\n    if (Buffer.isBuffer(content)) content = content.toString(\"utf8\");\n    content = content.replace(/^\\uFEFF/, \"\");\n    return content;\n}\nvar jsonfile = {\n    readFile: readFile,\n    readFileSync: readFileSync,\n    writeFile: writeFile,\n    writeFileSync: writeFileSync\n};\nmodule.exports = jsonfile;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LElBQUl5QixNQUFNO0lBQ1YsSUFBSTtRQUNGQSxNQUFNSCxVQUFVUixLQUFLVDtJQUN2QixFQUFFLE9BQU9NLEtBQUs7UUFDWixzREFBc0Q7UUFDdEQsSUFBSUwsVUFBVUEsU0FBU0ssS0FBSztRQUM1QjtJQUNGO0lBRUFILEdBQUdvQixTQUFTLENBQUN4QixNQUFNcUIsS0FBS3BCLFNBQVNDO0FBQ25DO0FBRUEsU0FBU3VCLGNBQWV6QixJQUFJLEVBQUVVLEdBQUcsRUFBRVQsT0FBTztJQUN4Q0EsVUFBVUEsV0FBVyxDQUFDO0lBQ3RCLElBQUlHLEtBQUtILFFBQVFHLEVBQUUsSUFBSVI7SUFFdkIsSUFBSXlCLE1BQU1ILFVBQVVSLEtBQUtUO0lBQ3pCLGtFQUFrRTtJQUNsRSxPQUFPRyxHQUFHcUIsYUFBYSxDQUFDekIsTUFBTXFCLEtBQUtwQjtBQUNyQztBQUVBLFNBQVNRLFNBQVVRLE9BQU87SUFDeEIsK0ZBQStGO0lBQy9GLElBQUlTLE9BQU9DLFFBQVEsQ0FBQ1YsVUFBVUEsVUFBVUEsUUFBUVcsUUFBUSxDQUFDO0lBQ3pEWCxVQUFVQSxRQUFRTSxPQUFPLENBQUMsV0FBVztJQUNyQyxPQUFPTjtBQUNUO0FBRUEsSUFBSVksV0FBVztJQUNiOUIsVUFBVUE7SUFDVmlCLGNBQWNBO0lBQ2RRLFdBQVdBO0lBQ1hDLGVBQWVBO0FBQ2pCO0FBRUFLLE9BQU9DLE9BQU8sR0FBR0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaXZpbC1lbmdpbmVlcmluZy1wbGF0Zm9ybS8uL25vZGVfbW9kdWxlcy9qc29uZmlsZS9pbmRleC5qcz9jYzg1Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBfZnNcbnRyeSB7XG4gIF9mcyA9IHJlcXVpcmUoJ2dyYWNlZnVsLWZzJylcbn0gY2F0Y2ggKF8pIHtcbiAgX2ZzID0gcmVxdWlyZSgnZnMnKVxufVxuXG5mdW5jdGlvbiByZWFkRmlsZSAoZmlsZSwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgaWYgKGNhbGxiYWNrID09IG51bGwpIHtcbiAgICBjYWxsYmFjayA9IG9wdGlvbnNcbiAgICBvcHRpb25zID0ge31cbiAgfVxuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICBvcHRpb25zID0ge2VuY29kaW5nOiBvcHRpb25zfVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cbiAgdmFyIGZzID0gb3B0aW9ucy5mcyB8fCBfZnNcblxuICB2YXIgc2hvdWxkVGhyb3cgPSB0cnVlXG4gIGlmICgndGhyb3dzJyBpbiBvcHRpb25zKSB7XG4gICAgc2hvdWxkVGhyb3cgPSBvcHRpb25zLnRocm93c1xuICB9XG5cbiAgZnMucmVhZEZpbGUoZmlsZSwgb3B0aW9ucywgZnVuY3Rpb24gKGVyciwgZGF0YSkge1xuICAgIGlmIChlcnIpIHJldHVybiBjYWxsYmFjayhlcnIpXG5cbiAgICBkYXRhID0gc3RyaXBCb20oZGF0YSlcblxuICAgIHZhciBvYmpcbiAgICB0cnkge1xuICAgICAgb2JqID0gSlNPTi5wYXJzZShkYXRhLCBvcHRpb25zID8gb3B0aW9ucy5yZXZpdmVyIDogbnVsbClcbiAgICB9IGNhdGNoIChlcnIyKSB7XG4gICAgICBpZiAoc2hvdWxkVGhyb3cpIHtcbiAgICAgICAgZXJyMi5tZXNzYWdlID0gZmlsZSArICc6ICcgKyBlcnIyLm1lc3NhZ2VcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycjIpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgbnVsbClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjYWxsYmFjayhudWxsLCBvYmopXG4gIH0pXG59XG5cbmZ1bmN0aW9uIHJlYWRGaWxlU3luYyAoZmlsZSwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgb3B0aW9ucyA9IHtlbmNvZGluZzogb3B0aW9uc31cbiAgfVxuXG4gIHZhciBmcyA9IG9wdGlvbnMuZnMgfHwgX2ZzXG5cbiAgdmFyIHNob3VsZFRocm93ID0gdHJ1ZVxuICBpZiAoJ3Rocm93cycgaW4gb3B0aW9ucykge1xuICAgIHNob3VsZFRocm93ID0gb3B0aW9ucy50aHJvd3NcbiAgfVxuXG4gIHRyeSB7XG4gICAgdmFyIGNvbnRlbnQgPSBmcy5yZWFkRmlsZVN5bmMoZmlsZSwgb3B0aW9ucylcbiAgICBjb250ZW50ID0gc3RyaXBCb20oY29udGVudClcbiAgICByZXR1cm4gSlNPTi5wYXJzZShjb250ZW50LCBvcHRpb25zLnJldml2ZXIpXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChzaG91bGRUaHJvdykge1xuICAgICAgZXJyLm1lc3NhZ2UgPSBmaWxlICsgJzogJyArIGVyci5tZXNzYWdlXG4gICAgICB0aHJvdyBlcnJcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5IChvYmosIG9wdGlvbnMpIHtcbiAgdmFyIHNwYWNlc1xuICB2YXIgRU9MID0gJ1xcbidcbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnb2JqZWN0JyAmJiBvcHRpb25zICE9PSBudWxsKSB7XG4gICAgaWYgKG9wdGlvbnMuc3BhY2VzKSB7XG4gICAgICBzcGFjZXMgPSBvcHRpb25zLnNwYWNlc1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5FT0wpIHtcbiAgICAgIEVPTCA9IG9wdGlvbnMuRU9MXG4gICAgfVxuICB9XG5cbiAgdmFyIHN0ciA9IEpTT04uc3RyaW5naWZ5KG9iaiwgb3B0aW9ucyA/IG9wdGlvbnMucmVwbGFjZXIgOiBudWxsLCBzcGFjZXMpXG5cbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9cXG4vZywgRU9MKSArIEVPTFxufVxuXG5mdW5jdGlvbiB3cml0ZUZpbGUgKGZpbGUsIG9iaiwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgaWYgKGNhbGxiYWNrID09IG51bGwpIHtcbiAgICBjYWxsYmFjayA9IG9wdGlvbnNcbiAgICBvcHRpb25zID0ge31cbiAgfVxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuICB2YXIgZnMgPSBvcHRpb25zLmZzIHx8IF9mc1xuXG4gIHZhciBzdHIgPSAnJ1xuICB0cnkge1xuICAgIHN0ciA9IHN0cmluZ2lmeShvYmosIG9wdGlvbnMpXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIE5lZWQgdG8gcmV0dXJuIHdoZXRoZXIgYSBjYWxsYmFjayB3YXMgcGFzc2VkIG9yIG5vdFxuICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soZXJyLCBudWxsKVxuICAgIHJldHVyblxuICB9XG5cbiAgZnMud3JpdGVGaWxlKGZpbGUsIHN0ciwgb3B0aW9ucywgY2FsbGJhY2spXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmlsZVN5bmMgKGZpbGUsIG9iaiwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuICB2YXIgZnMgPSBvcHRpb25zLmZzIHx8IF9mc1xuXG4gIHZhciBzdHIgPSBzdHJpbmdpZnkob2JqLCBvcHRpb25zKVxuICAvLyBub3Qgc3VyZSBpZiBmcy53cml0ZUZpbGVTeW5jIHJldHVybnMgYW55dGhpbmcsIGJ1dCBqdXN0IGluIGNhc2VcbiAgcmV0dXJuIGZzLndyaXRlRmlsZVN5bmMoZmlsZSwgc3RyLCBvcHRpb25zKVxufVxuXG5mdW5jdGlvbiBzdHJpcEJvbSAoY29udGVudCkge1xuICAvLyB3ZSBkbyB0aGlzIGJlY2F1c2UgSlNPTi5wYXJzZSB3b3VsZCBjb252ZXJ0IGl0IHRvIGEgdXRmOCBzdHJpbmcgaWYgZW5jb2Rpbmcgd2Fzbid0IHNwZWNpZmllZFxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKGNvbnRlbnQpKSBjb250ZW50ID0gY29udGVudC50b1N0cmluZygndXRmOCcpXG4gIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2UoL15cXHVGRUZGLywgJycpXG4gIHJldHVybiBjb250ZW50XG59XG5cbnZhciBqc29uZmlsZSA9IHtcbiAgcmVhZEZpbGU6IHJlYWRGaWxlLFxuICByZWFkRmlsZVN5bmM6IHJlYWRGaWxlU3luYyxcbiAgd3JpdGVGaWxlOiB3cml0ZUZpbGUsXG4gIHdyaXRlRmlsZVN5bmM6IHdyaXRlRmlsZVN5bmNcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBqc29uZmlsZVxuIl0sIm5hbWVzIjpbIl9mcyIsInJlcXVpcmUiLCJfIiwicmVhZEZpbGUiLCJmaWxlIiwib3B0aW9ucyIsImNhbGxiYWNrIiwiZW5jb2RpbmciLCJmcyIsInNob3VsZFRocm93IiwidGhyb3dzIiwiZXJyIiwiZGF0YSIsInN0cmlwQm9tIiwib2JqIiwiSlNPTiIsInBhcnNlIiwicmV2aXZlciIsImVycjIiLCJtZXNzYWdlIiwicmVhZEZpbGVTeW5jIiwiY29udGVudCIsInN0cmluZ2lmeSIsInNwYWNlcyIsIkVPTCIsInN0ciIsInJlcGxhY2VyIiwicmVwbGFjZSIsIndyaXRlRmlsZSIsIndyaXRlRmlsZVN5bmMiLCJCdWZmZXIiLCJpc0J1ZmZlciIsInRvU3RyaW5nIiwianNvbmZpbGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/jsonfile/index.js\n");

/***/ })

};
;