/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ftp";
exports.ids = ["vendor-chunks/ftp"];
exports.modules = {

/***/ "(rsc)/./node_modules/ftp/lib/connection.js":
/*!********************************************!*\
  !*** ./node_modules/ftp/lib/connection.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var fs = __webpack_require__(/*! fs */ \"fs\"), tls = __webpack_require__(/*! tls */ \"tls\"), zlib = __webpack_require__(/*! zlib */ \"zlib\"), Socket = (__webpack_require__(/*! net */ \"net\").Socket), EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter), inherits = (__webpack_require__(/*! util */ \"util\").inherits), inspect = (__webpack_require__(/*! util */ \"util\").inspect);\nvar Parser = __webpack_require__(/*! ./parser */ \"(rsc)/./node_modules/ftp/lib/parser.js\");\nvar XRegExp = (__webpack_require__(/*! xregexp */ \"(rsc)/./node_modules/xregexp/xregexp-all.js\").XRegExp);\nvar REX_TIMEVAL = XRegExp.cache(\"^(?<year>\\\\d{4})(?<month>\\\\d{2})(?<date>\\\\d{2})(?<hour>\\\\d{2})(?<minute>\\\\d{2})(?<second>\\\\d+)(?:.\\\\d+)?$\"), RE_PASV = /([\\d]+),([\\d]+),([\\d]+),([\\d]+),([-\\d]+),([-\\d]+)/, RE_EOL = /\\r?\\n/g, RE_WD = /\"(.+)\"(?: |$)/, RE_SYST = /^([^ ]+)(?: |$)/;\nvar /*TYPE = {\n      SYNTAX: 0,\n      INFO: 1,\n      SOCKETS: 2,\n      AUTH: 3,\n      UNSPEC: 4,\n      FILESYS: 5\n    },*/ RETVAL = {\n    PRELIM: 1,\n    OK: 2,\n    WAITING: 3,\n    ERR_TEMP: 4,\n    ERR_PERM: 5\n}, /*ERRORS = {\n      421: 'Service not available, closing control connection',\n      425: 'Can\\'t open data connection',\n      426: 'Connection closed; transfer aborted',\n      450: 'Requested file action not taken / File unavailable (e.g., file busy)',\n      451: 'Requested action aborted: local error in processing',\n      452: 'Requested action not taken / Insufficient storage space in system',\n      500: 'Syntax error / Command unrecognized',\n      501: 'Syntax error in parameters or arguments',\n      502: 'Command not implemented',\n      503: 'Bad sequence of commands',\n      504: 'Command not implemented for that parameter',\n      530: 'Not logged in',\n      532: 'Need account for storing files',\n      550: 'Requested action not taken / File unavailable (e.g., file not found, no access)',\n      551: 'Requested action aborted: page type unknown',\n      552: 'Requested file action aborted / Exceeded storage allocation (for current directory or dataset)',\n      553: 'Requested action not taken / File name not allowed'\n    },*/ bytesNOOP = new Buffer(\"NOOP\\r\\n\");\nvar FTP = module.exports = function() {\n    if (!(this instanceof FTP)) return new FTP();\n    this._socket = undefined;\n    this._pasvSock = undefined;\n    this._feat = undefined;\n    this._curReq = undefined;\n    this._queue = [];\n    this._secstate = undefined;\n    this._debug = undefined;\n    this._keepalive = undefined;\n    this._ending = false;\n    this._parser = undefined;\n    this.options = {\n        host: undefined,\n        port: undefined,\n        user: undefined,\n        password: undefined,\n        secure: false,\n        secureOptions: undefined,\n        connTimeout: undefined,\n        pasvTimeout: undefined,\n        aliveTimeout: undefined\n    };\n    this.connected = false;\n};\ninherits(FTP, EventEmitter);\nFTP.prototype.connect = function(options) {\n    var self = this;\n    if (typeof options !== \"object\") options = {};\n    this.connected = false;\n    this.options.host = options.host || \"localhost\";\n    this.options.port = options.port || 21;\n    this.options.user = options.user || \"anonymous\";\n    this.options.password = options.password || \"anonymous@\";\n    this.options.secure = options.secure || false;\n    this.options.secureOptions = options.secureOptions;\n    this.options.connTimeout = options.connTimeout || 10000;\n    this.options.pasvTimeout = options.pasvTimeout || 10000;\n    this.options.aliveTimeout = options.keepalive || 10000;\n    if (typeof options.debug === \"function\") this._debug = options.debug;\n    var secureOptions, debug = this._debug, socket = new Socket();\n    socket.setTimeout(0);\n    socket.setKeepAlive(true);\n    this._parser = new Parser({\n        debug: debug\n    });\n    this._parser.on(\"response\", function(code, text) {\n        var retval = code / 100 >> 0;\n        if (retval === RETVAL.ERR_TEMP || retval === RETVAL.ERR_PERM) {\n            if (self._curReq) self._curReq.cb(makeError(code, text), undefined, code);\n            else self.emit(\"error\", makeError(code, text));\n        } else if (self._curReq) self._curReq.cb(undefined, text, code);\n        // a hack to signal we're waiting for a PASV data connection to complete\n        // first before executing any more queued requests ...\n        //\n        // also: don't forget our current request if we're expecting another\n        // terminating response ....\n        if (self._curReq && retval !== RETVAL.PRELIM) {\n            self._curReq = undefined;\n            self._send();\n        }\n        noopreq.cb();\n    });\n    if (this.options.secure) {\n        secureOptions = {};\n        secureOptions.host = this.options.host;\n        for(var k in this.options.secureOptions)secureOptions[k] = this.options.secureOptions[k];\n        secureOptions.socket = socket;\n        this.options.secureOptions = secureOptions;\n    }\n    if (this.options.secure === \"implicit\") this._socket = tls.connect(secureOptions, onconnect);\n    else {\n        socket.once(\"connect\", onconnect);\n        this._socket = socket;\n    }\n    var noopreq = {\n        cmd: \"NOOP\",\n        cb: function() {\n            clearTimeout(self._keepalive);\n            self._keepalive = setTimeout(donoop, self.options.aliveTimeout);\n        }\n    };\n    function donoop() {\n        if (!self._socket || !self._socket.writable) clearTimeout(self._keepalive);\n        else if (!self._curReq && self._queue.length === 0) {\n            self._curReq = noopreq;\n            debug && debug(\"[connection] > NOOP\");\n            self._socket.write(bytesNOOP);\n        } else noopreq.cb();\n    }\n    function onconnect() {\n        clearTimeout(timer);\n        clearTimeout(self._keepalive);\n        self.connected = true;\n        self._socket = socket; // re-assign for implicit secure connections\n        var cmd;\n        if (self._secstate) {\n            if (self._secstate === \"upgraded-tls\" && self.options.secure === true) {\n                cmd = \"PBSZ\";\n                self._send(\"PBSZ 0\", reentry, true);\n            } else {\n                cmd = \"USER\";\n                self._send(\"USER \" + self.options.user, reentry, true);\n            }\n        } else {\n            self._curReq = {\n                cmd: \"\",\n                cb: reentry\n            };\n        }\n        function reentry(err, text, code) {\n            if (err && (!cmd || cmd === \"USER\" || cmd === \"PASS\" || cmd === \"TYPE\")) {\n                self.emit(\"error\", err);\n                return self._socket && self._socket.end();\n            }\n            if (cmd === \"AUTH TLS\" && code !== 234 && self.options.secure !== true || cmd === \"AUTH SSL\" && code !== 334 || cmd === \"PBSZ\" && code !== 200 || cmd === \"PROT\" && code !== 200) {\n                self.emit(\"error\", makeError(code, \"Unable to secure connection(s)\"));\n                return self._socket && self._socket.end();\n            }\n            if (!cmd) {\n                // sometimes the initial greeting can contain useful information\n                // about authorized use, other limits, etc.\n                self.emit(\"greeting\", text);\n                if (self.options.secure && self.options.secure !== \"implicit\") {\n                    cmd = \"AUTH TLS\";\n                    self._send(cmd, reentry, true);\n                } else {\n                    cmd = \"USER\";\n                    self._send(\"USER \" + self.options.user, reentry, true);\n                }\n            } else if (cmd === \"USER\") {\n                if (code !== 230) {\n                    // password required\n                    if (!self.options.password) {\n                        self.emit(\"error\", makeError(code, \"Password required\"));\n                        return self._socket && self._socket.end();\n                    }\n                    cmd = \"PASS\";\n                    self._send(\"PASS \" + self.options.password, reentry, true);\n                } else {\n                    // no password required\n                    cmd = \"PASS\";\n                    reentry(undefined, text, code);\n                }\n            } else if (cmd === \"PASS\") {\n                cmd = \"FEAT\";\n                self._send(cmd, reentry, true);\n            } else if (cmd === \"FEAT\") {\n                if (!err) self._feat = Parser.parseFeat(text);\n                cmd = \"TYPE\";\n                self._send(\"TYPE I\", reentry, true);\n            } else if (cmd === \"TYPE\") self.emit(\"ready\");\n            else if (cmd === \"PBSZ\") {\n                cmd = \"PROT\";\n                self._send(\"PROT P\", reentry, true);\n            } else if (cmd === \"PROT\") {\n                cmd = \"USER\";\n                self._send(\"USER \" + self.options.user, reentry, true);\n            } else if (cmd.substr(0, 4) === \"AUTH\") {\n                if (cmd === \"AUTH TLS\" && code !== 234) {\n                    cmd = \"AUTH SSL\";\n                    return self._send(cmd, reentry, true);\n                } else if (cmd === \"AUTH TLS\") self._secstate = \"upgraded-tls\";\n                else if (cmd === \"AUTH SSL\") self._secstate = \"upgraded-ssl\";\n                socket.removeAllListeners(\"data\");\n                socket.removeAllListeners(\"error\");\n                socket._decoder = null;\n                self._curReq = null; // prevent queue from being processed during\n                // TLS/SSL negotiation\n                secureOptions.socket = self._socket;\n                secureOptions.session = undefined;\n                socket = tls.connect(secureOptions, onconnect);\n                socket.setEncoding(\"binary\");\n                socket.on(\"data\", ondata);\n                socket.once(\"end\", onend);\n                socket.on(\"error\", onerror);\n            }\n        }\n    }\n    socket.on(\"data\", ondata);\n    function ondata(chunk) {\n        debug && debug(\"[connection] < \" + inspect(chunk.toString(\"binary\")));\n        if (self._parser) self._parser.write(chunk);\n    }\n    socket.on(\"error\", onerror);\n    function onerror(err) {\n        clearTimeout(timer);\n        clearTimeout(self._keepalive);\n        self.emit(\"error\", err);\n    }\n    socket.once(\"end\", onend);\n    function onend() {\n        ondone();\n        self.emit(\"end\");\n    }\n    socket.once(\"close\", function(had_err) {\n        ondone();\n        self.emit(\"close\", had_err);\n    });\n    var hasReset = false;\n    function ondone() {\n        if (!hasReset) {\n            hasReset = true;\n            clearTimeout(timer);\n            self._reset();\n        }\n    }\n    var timer = setTimeout(function() {\n        self.emit(\"error\", new Error(\"Timeout while connecting to server\"));\n        self._socket && self._socket.destroy();\n        self._reset();\n    }, this.options.connTimeout);\n    this._socket.connect(this.options.port, this.options.host);\n};\nFTP.prototype.end = function() {\n    if (this._queue.length) this._ending = true;\n    else this._reset();\n};\nFTP.prototype.destroy = function() {\n    this._reset();\n};\n// \"Standard\" (RFC 959) commands\nFTP.prototype.ascii = function(cb) {\n    return this._send(\"TYPE A\", cb);\n};\nFTP.prototype.binary = function(cb) {\n    return this._send(\"TYPE I\", cb);\n};\nFTP.prototype.abort = function(immediate, cb) {\n    if (typeof immediate === \"function\") {\n        cb = immediate;\n        immediate = true;\n    }\n    if (immediate) this._send(\"ABOR\", cb, true);\n    else this._send(\"ABOR\", cb);\n};\nFTP.prototype.cwd = function(path, cb, promote) {\n    this._send(\"CWD \" + path, function(err, text, code) {\n        if (err) return cb(err);\n        var m = RE_WD.exec(text);\n        cb(undefined, m ? m[1] : undefined);\n    }, promote);\n};\nFTP.prototype.delete = function(path, cb) {\n    this._send(\"DELE \" + path, cb);\n};\nFTP.prototype.site = function(cmd, cb) {\n    this._send(\"SITE \" + cmd, cb);\n};\nFTP.prototype.status = function(cb) {\n    this._send(\"STAT\", cb);\n};\nFTP.prototype.rename = function(from, to, cb) {\n    var self = this;\n    this._send(\"RNFR \" + from, function(err) {\n        if (err) return cb(err);\n        self._send(\"RNTO \" + to, cb, true);\n    });\n};\nFTP.prototype.logout = function(cb) {\n    this._send(\"QUIT\", cb);\n};\nFTP.prototype.listSafe = function(path, zcomp, cb) {\n    if (typeof path === \"string\") {\n        var self = this;\n        // store current path\n        this.pwd(function(err, origpath) {\n            if (err) return cb(err);\n            // change to destination path\n            self.cwd(path, function(err) {\n                if (err) return cb(err);\n                // get dir listing\n                self.list(zcomp || false, function(err, list) {\n                    // change back to original path\n                    if (err) return self.cwd(origpath, cb);\n                    self.cwd(origpath, function(err) {\n                        if (err) return cb(err);\n                        cb(err, list);\n                    });\n                });\n            });\n        });\n    } else this.list(path, zcomp, cb);\n};\nFTP.prototype.list = function(path, zcomp, cb) {\n    var self = this, cmd;\n    if (typeof path === \"function\") {\n        // list(function() {})\n        cb = path;\n        path = undefined;\n        cmd = \"LIST\";\n        zcomp = false;\n    } else if (typeof path === \"boolean\") {\n        // list(true, function() {})\n        cb = zcomp;\n        zcomp = path;\n        path = undefined;\n        cmd = \"LIST\";\n    } else if (typeof zcomp === \"function\") {\n        // list('/foo', function() {})\n        cb = zcomp;\n        cmd = \"LIST \" + path;\n        zcomp = false;\n    } else cmd = \"LIST \" + path;\n    this._pasv(function(err, sock) {\n        if (err) return cb(err);\n        if (self._queue[0] && self._queue[0].cmd === \"ABOR\") {\n            sock.destroy();\n            return cb();\n        }\n        var sockerr, done = false, replies = 0, entries, buffer = \"\", source = sock;\n        if (zcomp) {\n            source = zlib.createInflate();\n            sock.pipe(source);\n        }\n        source.on(\"data\", function(chunk) {\n            buffer += chunk.toString(\"binary\");\n        });\n        source.once(\"error\", function(err) {\n            if (!sock.aborting) sockerr = err;\n        });\n        source.once(\"end\", ondone);\n        source.once(\"close\", ondone);\n        function ondone() {\n            done = true;\n            final();\n        }\n        function final() {\n            if (done && replies === 2) {\n                replies = 3;\n                if (sockerr) return cb(new Error(\"Unexpected data connection error: \" + sockerr));\n                if (sock.aborting) return cb();\n                // process received data\n                entries = buffer.split(RE_EOL);\n                entries.pop(); // ending EOL\n                var parsed = [];\n                for(var i = 0, len = entries.length; i < len; ++i){\n                    var parsedVal = Parser.parseListEntry(entries[i]);\n                    if (parsedVal !== null) parsed.push(parsedVal);\n                }\n                if (zcomp) {\n                    self._send(\"MODE S\", function() {\n                        cb(undefined, parsed);\n                    }, true);\n                } else cb(undefined, parsed);\n            }\n        }\n        if (zcomp) {\n            self._send(\"MODE Z\", function(err, text, code) {\n                if (err) {\n                    sock.destroy();\n                    return cb(makeError(code, \"Compression not supported\"));\n                }\n                sendList();\n            }, true);\n        } else sendList();\n        function sendList() {\n            // this callback will be executed multiple times, the first is when server\n            // replies with 150 and then a final reply to indicate whether the\n            // transfer was actually a success or not\n            self._send(cmd, function(err, text, code) {\n                if (err) {\n                    sock.destroy();\n                    if (zcomp) {\n                        self._send(\"MODE S\", function() {\n                            cb(err);\n                        }, true);\n                    } else cb(err);\n                    return;\n                }\n                // some servers may not open a data connection for empty directories\n                if (++replies === 1 && code === 226) {\n                    replies = 2;\n                    sock.destroy();\n                    final();\n                } else if (replies === 2) final();\n            }, true);\n        }\n    });\n};\nFTP.prototype.get = function(path, zcomp, cb) {\n    var self = this;\n    if (typeof zcomp === \"function\") {\n        cb = zcomp;\n        zcomp = false;\n    }\n    this._pasv(function(err, sock) {\n        if (err) return cb(err);\n        if (self._queue[0] && self._queue[0].cmd === \"ABOR\") {\n            sock.destroy();\n            return cb();\n        }\n        // modify behavior of socket events so that we can emit 'error' once for\n        // either a TCP-level error OR an FTP-level error response that we get when\n        // the socket is closed (e.g. the server ran out of space).\n        var sockerr, started = false, lastreply = false, done = false, source = sock;\n        if (zcomp) {\n            source = zlib.createInflate();\n            sock.pipe(source);\n            sock._emit = sock.emit;\n            sock.emit = function(ev, arg1) {\n                if (ev === \"error\") {\n                    if (!sockerr) sockerr = arg1;\n                    return;\n                }\n                sock._emit.apply(sock, Array.prototype.slice.call(arguments));\n            };\n        }\n        source._emit = source.emit;\n        source.emit = function(ev, arg1) {\n            if (ev === \"error\") {\n                if (!sockerr) sockerr = arg1;\n                return;\n            } else if (ev === \"end\" || ev === \"close\") {\n                if (!done) {\n                    done = true;\n                    ondone();\n                }\n                return;\n            }\n            source._emit.apply(source, Array.prototype.slice.call(arguments));\n        };\n        function ondone() {\n            if (done && lastreply) {\n                self._send(\"MODE S\", function() {\n                    source._emit(\"end\");\n                    source._emit(\"close\");\n                }, true);\n            }\n        }\n        sock.pause();\n        if (zcomp) {\n            self._send(\"MODE Z\", function(err, text, code) {\n                if (err) {\n                    sock.destroy();\n                    return cb(makeError(code, \"Compression not supported\"));\n                }\n                sendRetr();\n            }, true);\n        } else sendRetr();\n        function sendRetr() {\n            // this callback will be executed multiple times, the first is when server\n            // replies with 150, then a final reply after the data connection closes\n            // to indicate whether the transfer was actually a success or not\n            self._send(\"RETR \" + path, function(err, text, code) {\n                if (sockerr || err) {\n                    sock.destroy();\n                    if (!started) {\n                        if (zcomp) {\n                            self._send(\"MODE S\", function() {\n                                cb(sockerr || err);\n                            }, true);\n                        } else cb(sockerr || err);\n                    } else {\n                        source._emit(\"error\", sockerr || err);\n                        source._emit(\"close\", true);\n                    }\n                    return;\n                }\n                // server returns 125 when data connection is already open; we treat it\n                // just like a 150\n                if (code === 150 || code === 125) {\n                    started = true;\n                    cb(undefined, source);\n                    sock.resume();\n                } else {\n                    lastreply = true;\n                    ondone();\n                }\n            }, true);\n        }\n    });\n};\nFTP.prototype.put = function(input, path, zcomp, cb) {\n    this._store(\"STOR \" + path, input, zcomp, cb);\n};\nFTP.prototype.append = function(input, path, zcomp, cb) {\n    this._store(\"APPE \" + path, input, zcomp, cb);\n};\nFTP.prototype.pwd = function(cb) {\n    var self = this;\n    this._send(\"PWD\", function(err, text, code) {\n        if (code === 502) {\n            return self.cwd(\".\", function(cwderr, cwd) {\n                if (cwderr) return cb(cwderr);\n                if (cwd === undefined) cb(err);\n                else cb(undefined, cwd);\n            }, true);\n        } else if (err) return cb(err);\n        cb(undefined, RE_WD.exec(text)[1]);\n    });\n};\nFTP.prototype.cdup = function(cb) {\n    var self = this;\n    this._send(\"CDUP\", function(err, text, code) {\n        if (code === 502) self.cwd(\"..\", cb, true);\n        else cb(err);\n    });\n};\nFTP.prototype.mkdir = function(path, recursive, cb) {\n    if (typeof recursive === \"function\") {\n        cb = recursive;\n        recursive = false;\n    }\n    if (!recursive) this._send(\"MKD \" + path, cb);\n    else {\n        var self = this, owd, abs, dirs, dirslen, i = -1, searching = true;\n        abs = path[0] === \"/\";\n        var nextDir = function() {\n            if (++i === dirslen) {\n                // return to original working directory\n                return self._send(\"CWD \" + owd, cb, true);\n            }\n            if (searching) {\n                self._send(\"CWD \" + dirs[i], function(err, text, code) {\n                    if (code === 550) {\n                        searching = false;\n                        --i;\n                    } else if (err) {\n                        // return to original working directory\n                        return self._send(\"CWD \" + owd, function() {\n                            cb(err);\n                        }, true);\n                    }\n                    nextDir();\n                }, true);\n            } else {\n                self._send(\"MKD \" + dirs[i], function(err, text, code) {\n                    if (err) {\n                        // return to original working directory\n                        return self._send(\"CWD \" + owd, function() {\n                            cb(err);\n                        }, true);\n                    }\n                    self._send(\"CWD \" + dirs[i], nextDir, true);\n                }, true);\n            }\n        };\n        this.pwd(function(err, cwd) {\n            if (err) return cb(err);\n            owd = cwd;\n            if (abs) path = path.substr(1);\n            if (path[path.length - 1] === \"/\") path = path.substring(0, path.length - 1);\n            dirs = path.split(\"/\");\n            dirslen = dirs.length;\n            if (abs) self._send(\"CWD /\", function(err) {\n                if (err) return cb(err);\n                nextDir();\n            }, true);\n            else nextDir();\n        });\n    }\n};\nFTP.prototype.rmdir = function(path, recursive, cb) {\n    if (typeof recursive === \"function\") {\n        cb = recursive;\n        recursive = false;\n    }\n    if (!recursive) {\n        return this._send(\"RMD \" + path, cb);\n    }\n    var self = this;\n    this.list(path, function(err, list) {\n        if (err) return cb(err);\n        var idx = 0;\n        // this function will be called once per listing entry\n        var deleteNextEntry;\n        deleteNextEntry = function(err) {\n            if (err) return cb(err);\n            if (idx >= list.length) {\n                if (list[0] && list[0].name === path) {\n                    return cb(null);\n                } else {\n                    return self.rmdir(path, cb);\n                }\n            }\n            var entry = list[idx++];\n            // get the path to the file\n            var subpath = null;\n            if (entry.name[0] === \"/\") {\n                // this will be the case when you call deleteRecursively() and pass\n                // the path to a plain file\n                subpath = entry.name;\n            } else {\n                if (path[path.length - 1] == \"/\") {\n                    subpath = path + entry.name;\n                } else {\n                    subpath = path + \"/\" + entry.name;\n                }\n            }\n            // delete the entry (recursively) according to its type\n            if (entry.type === \"d\") {\n                if (entry.name === \".\" || entry.name === \"..\") {\n                    return deleteNextEntry();\n                }\n                self.rmdir(subpath, true, deleteNextEntry);\n            } else {\n                self.delete(subpath, deleteNextEntry);\n            }\n        };\n        deleteNextEntry();\n    });\n};\nFTP.prototype.system = function(cb) {\n    this._send(\"SYST\", function(err, text) {\n        if (err) return cb(err);\n        cb(undefined, RE_SYST.exec(text)[1]);\n    });\n};\n// \"Extended\" (RFC 3659) commands\nFTP.prototype.size = function(path, cb) {\n    var self = this;\n    this._send(\"SIZE \" + path, function(err, text, code) {\n        if (code === 502) {\n            // Note: this may cause a problem as list() is _appended_ to the queue\n            return self.list(path, function(err, list) {\n                if (err) return cb(err);\n                if (list.length === 1) cb(undefined, list[0].size);\n                else {\n                    // path could have been a directory and we got a listing of its\n                    // contents, but here we echo the behavior of the real SIZE and\n                    // return 'File not found' for directories\n                    cb(new Error(\"File not found\"));\n                }\n            }, true);\n        } else if (err) return cb(err);\n        cb(undefined, parseInt(text, 10));\n    });\n};\nFTP.prototype.lastMod = function(path, cb) {\n    var self = this;\n    this._send(\"MDTM \" + path, function(err, text, code) {\n        if (code === 502) {\n            return self.list(path, function(err, list) {\n                if (err) return cb(err);\n                if (list.length === 1) cb(undefined, list[0].date);\n                else cb(new Error(\"File not found\"));\n            }, true);\n        } else if (err) return cb(err);\n        var val = XRegExp.exec(text, REX_TIMEVAL), ret;\n        if (!val) return cb(new Error(\"Invalid date/time format from server\"));\n        ret = new Date(val.year + \"-\" + val.month + \"-\" + val.date + \"T\" + val.hour + \":\" + val.minute + \":\" + val.second);\n        cb(undefined, ret);\n    });\n};\nFTP.prototype.restart = function(offset, cb) {\n    this._send(\"REST \" + offset, cb);\n};\n// Private/Internal methods\nFTP.prototype._pasv = function(cb) {\n    var self = this, first = true, ip, port;\n    this._send(\"PASV\", function reentry(err, text) {\n        if (err) return cb(err);\n        self._curReq = undefined;\n        if (first) {\n            var m = RE_PASV.exec(text);\n            if (!m) return cb(new Error(\"Unable to parse PASV server response\"));\n            ip = m[1];\n            ip += \".\";\n            ip += m[2];\n            ip += \".\";\n            ip += m[3];\n            ip += \".\";\n            ip += m[4];\n            port = parseInt(m[5], 10) * 256 + parseInt(m[6], 10);\n            first = false;\n        }\n        self._pasvConnect(ip, port, function(err, sock) {\n            if (err) {\n                // try the IP of the control connection if the server was somehow\n                // misconfigured and gave for example a LAN IP instead of WAN IP over\n                // the Internet\n                if (self._socket && ip !== self._socket.remoteAddress) {\n                    ip = self._socket.remoteAddress;\n                    return reentry();\n                }\n                // automatically abort PASV mode\n                self._send(\"ABOR\", function() {\n                    cb(err);\n                    self._send();\n                }, true);\n                return;\n            }\n            cb(undefined, sock);\n            self._send();\n        });\n    });\n};\nFTP.prototype._pasvConnect = function(ip, port, cb) {\n    var self = this, socket = new Socket(), sockerr, timedOut = false, timer = setTimeout(function() {\n        timedOut = true;\n        socket.destroy();\n        cb(new Error(\"Timed out while making data connection\"));\n    }, this.options.pasvTimeout);\n    socket.setTimeout(0);\n    socket.once(\"connect\", function() {\n        self._debug && self._debug(\"[connection] PASV socket connected\");\n        if (self.options.secure === true) {\n            self.options.secureOptions.socket = socket;\n            self.options.secureOptions.session = self._socket.getSession();\n            //socket.removeAllListeners('error');\n            socket = tls.connect(self.options.secureOptions);\n            //socket.once('error', onerror);\n            socket.setTimeout(0);\n        }\n        clearTimeout(timer);\n        self._pasvSocket = socket;\n        cb(undefined, socket);\n    });\n    socket.once(\"error\", onerror);\n    function onerror(err) {\n        sockerr = err;\n    }\n    socket.once(\"end\", function() {\n        clearTimeout(timer);\n    });\n    socket.once(\"close\", function(had_err) {\n        clearTimeout(timer);\n        if (!self._pasvSocket && !timedOut) {\n            var errmsg = \"Unable to make data connection\";\n            if (sockerr) {\n                errmsg += \"( \" + sockerr + \")\";\n                sockerr = undefined;\n            }\n            cb(new Error(errmsg));\n        }\n        self._pasvSocket = undefined;\n    });\n    socket.connect(port, ip);\n};\nFTP.prototype._store = function(cmd, input, zcomp, cb) {\n    var isBuffer = Buffer.isBuffer(input);\n    if (!isBuffer && input.pause !== undefined) input.pause();\n    if (typeof zcomp === \"function\") {\n        cb = zcomp;\n        zcomp = false;\n    }\n    var self = this;\n    this._pasv(function(err, sock) {\n        if (err) return cb(err);\n        if (self._queue[0] && self._queue[0].cmd === \"ABOR\") {\n            sock.destroy();\n            return cb();\n        }\n        var sockerr, dest = sock;\n        sock.once(\"error\", function(err) {\n            sockerr = err;\n        });\n        if (zcomp) {\n            self._send(\"MODE Z\", function(err, text, code) {\n                if (err) {\n                    sock.destroy();\n                    return cb(makeError(code, \"Compression not supported\"));\n                }\n                // draft-preston-ftpext-deflate-04 says min of 8 should be supported\n                dest = zlib.createDeflate({\n                    level: 8\n                });\n                dest.pipe(sock);\n                sendStore();\n            }, true);\n        } else sendStore();\n        function sendStore() {\n            // this callback will be executed multiple times, the first is when server\n            // replies with 150, then a final reply after the data connection closes\n            // to indicate whether the transfer was actually a success or not\n            self._send(cmd, function(err, text, code) {\n                if (sockerr || err) {\n                    if (zcomp) {\n                        self._send(\"MODE S\", function() {\n                            cb(sockerr || err);\n                        }, true);\n                    } else cb(sockerr || err);\n                    return;\n                }\n                if (code === 150 || code === 125) {\n                    if (isBuffer) dest.end(input);\n                    else if (typeof input === \"string\") {\n                        // check if input is a file path or just string data to store\n                        fs.stat(input, function(err, stats) {\n                            if (err) dest.end(input);\n                            else fs.createReadStream(input).pipe(dest);\n                        });\n                    } else {\n                        input.pipe(dest);\n                        input.resume();\n                    }\n                } else {\n                    if (zcomp) self._send(\"MODE S\", cb, true);\n                    else cb();\n                }\n            }, true);\n        }\n    });\n};\nFTP.prototype._send = function(cmd, cb, promote) {\n    clearTimeout(this._keepalive);\n    if (cmd !== undefined) {\n        if (promote) this._queue.unshift({\n            cmd: cmd,\n            cb: cb\n        });\n        else this._queue.push({\n            cmd: cmd,\n            cb: cb\n        });\n    }\n    var queueLen = this._queue.length;\n    if (!this._curReq && queueLen && this._socket && this._socket.readable) {\n        this._curReq = this._queue.shift();\n        if (this._curReq.cmd === \"ABOR\" && this._pasvSocket) this._pasvSocket.aborting = true;\n        this._debug && this._debug(\"[connection] > \" + inspect(this._curReq.cmd));\n        this._socket.write(this._curReq.cmd + \"\\r\\n\");\n    } else if (!this._curReq && !queueLen && this._ending) this._reset();\n};\nFTP.prototype._reset = function() {\n    if (this._pasvSock && this._pasvSock.writable) this._pasvSock.end();\n    if (this._socket && this._socket.writable) this._socket.end();\n    this._socket = undefined;\n    this._pasvSock = undefined;\n    this._feat = undefined;\n    this._curReq = undefined;\n    this._secstate = undefined;\n    clearTimeout(this._keepalive);\n    this._keepalive = undefined;\n    this._queue = [];\n    this._ending = false;\n    this._parser = undefined;\n    this.options.host = this.options.port = this.options.user = this.options.password = this.options.secure = this.options.connTimeout = this.options.pasvTimeout = this.options.keepalive = this._debug = undefined;\n    this.connected = false;\n};\n// Utility functions\nfunction makeError(code, text) {\n    var err = new Error(text);\n    err.code = code;\n    return err;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ftp/lib/connection.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ftp/lib/parser.js":
/*!****************************************!*\
  !*** ./node_modules/ftp/lib/parser.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var WritableStream = (__webpack_require__(/*! stream */ \"stream\").Writable) || (__webpack_require__(/*! readable-stream */ \"(rsc)/./node_modules/readable-stream/readable.js\").Writable), inherits = (__webpack_require__(/*! util */ \"util\").inherits), inspect = (__webpack_require__(/*! util */ \"util\").inspect);\nvar XRegExp = (__webpack_require__(/*! xregexp */ \"(rsc)/./node_modules/xregexp/xregexp-all.js\").XRegExp);\nvar REX_LISTUNIX = XRegExp.cache(\"^(?<type>[\\\\-ld])(?<permission>([\\\\-r][\\\\-w][\\\\-xstT]){3})(?<acl>(\\\\+))?\\\\s+(?<inodes>\\\\d+)\\\\s+(?<owner>\\\\S+)\\\\s+(?<group>\\\\S+)\\\\s+(?<size>\\\\d+)\\\\s+(?<timestamp>((?<month1>\\\\w{3})\\\\s+(?<date1>\\\\d{1,2})\\\\s+(?<hour>\\\\d{1,2}):(?<minute>\\\\d{2}))|((?<month2>\\\\w{3})\\\\s+(?<date2>\\\\d{1,2})\\\\s+(?<year>\\\\d{4})))\\\\s+(?<name>.+)$\"), REX_LISTMSDOS = XRegExp.cache(\"^(?<month>\\\\d{2})(?:\\\\-|\\\\/)(?<date>\\\\d{2})(?:\\\\-|\\\\/)(?<year>\\\\d{2,4})\\\\s+(?<hour>\\\\d{2}):(?<minute>\\\\d{2})\\\\s{0,1}(?<ampm>[AaMmPp]{1,2})\\\\s+(?:(?<size>\\\\d+)|(?<isdir>\\\\<DIR\\\\>))\\\\s+(?<name>.+)$\"), RE_ENTRY_TOTAL = /^total/, RE_RES_END = /(?:^|\\r?\\n)(\\d{3}) [^\\r\\n]*\\r?\\n/, RE_EOL = /\\r?\\n/g, RE_DASH = /\\-/g;\nvar MONTHS = {\n    jan: 1,\n    feb: 2,\n    mar: 3,\n    apr: 4,\n    may: 5,\n    jun: 6,\n    jul: 7,\n    aug: 8,\n    sep: 9,\n    oct: 10,\n    nov: 11,\n    dec: 12\n};\nfunction Parser(options) {\n    if (!(this instanceof Parser)) return new Parser(options);\n    WritableStream.call(this);\n    this._buffer = \"\";\n    this._debug = options.debug;\n}\ninherits(Parser, WritableStream);\nParser.prototype._write = function(chunk, encoding, cb) {\n    var m, code, reRmLeadCode, rest = \"\", debug = this._debug;\n    this._buffer += chunk.toString(\"binary\");\n    while(m = RE_RES_END.exec(this._buffer)){\n        // support multiple terminating responses in the buffer\n        rest = this._buffer.substring(m.index + m[0].length);\n        if (rest.length) this._buffer = this._buffer.substring(0, m.index + m[0].length);\n        debug && debug(\"[parser] < \" + inspect(this._buffer));\n        // we have a terminating response line\n        code = parseInt(m[1], 10);\n        // RFC 959 does not require each line in a multi-line response to begin\n        // with '<code>-', but many servers will do this.\n        //\n        // remove this leading '<code>-' (or '<code> ' from last line) from each\n        // line in the response ...\n        reRmLeadCode = \"(^|\\\\r?\\\\n)\";\n        reRmLeadCode += m[1];\n        reRmLeadCode += \"(?: |\\\\-)\";\n        reRmLeadCode = new RegExp(reRmLeadCode, \"g\");\n        var text = this._buffer.replace(reRmLeadCode, \"$1\").trim();\n        this._buffer = rest;\n        debug && debug(\"[parser] Response: code=\" + code + \", buffer=\" + inspect(text));\n        this.emit(\"response\", code, text);\n    }\n    cb();\n};\nParser.parseFeat = function(text) {\n    var lines = text.split(RE_EOL);\n    lines.shift(); // initial response line\n    lines.pop(); // final response line\n    for(var i = 0, len = lines.length; i < len; ++i)lines[i] = lines[i].trim();\n    // just return the raw lines for now\n    return lines;\n};\nParser.parseListEntry = function(line) {\n    var ret, info, month, day, year, hour, mins;\n    if (ret = XRegExp.exec(line, REX_LISTUNIX)) {\n        info = {\n            type: ret.type,\n            name: undefined,\n            target: undefined,\n            sticky: false,\n            rights: {\n                user: ret.permission.substr(0, 3).replace(RE_DASH, \"\"),\n                group: ret.permission.substr(3, 3).replace(RE_DASH, \"\"),\n                other: ret.permission.substr(6, 3).replace(RE_DASH, \"\")\n            },\n            acl: ret.acl === \"+\",\n            owner: ret.owner,\n            group: ret.group,\n            size: parseInt(ret.size, 10),\n            date: undefined\n        };\n        // check for sticky bit\n        var lastbit = info.rights.other.slice(-1);\n        if (lastbit === \"t\") {\n            info.rights.other = info.rights.other.slice(0, -1) + \"x\";\n            info.sticky = true;\n        } else if (lastbit === \"T\") {\n            info.rights.other = info.rights.other.slice(0, -1);\n            info.sticky = true;\n        }\n        if (ret.month1 !== undefined) {\n            month = parseInt(MONTHS[ret.month1.toLowerCase()], 10);\n            day = parseInt(ret.date1, 10);\n            year = new Date().getFullYear();\n            hour = parseInt(ret.hour, 10);\n            mins = parseInt(ret.minute, 10);\n            if (month < 10) month = \"0\" + month;\n            if (day < 10) day = \"0\" + day;\n            if (hour < 10) hour = \"0\" + hour;\n            if (mins < 10) mins = \"0\" + mins;\n            info.date = new Date(year + \"-\" + month + \"-\" + day + \"T\" + hour + \":\" + mins);\n            // If the date is in the past but no more than 6 months old, year\n            // isn't displayed and doesn't have to be the current year.\n            // \n            // If the date is in the future (less than an hour from now), year\n            // isn't displayed and doesn't have to be the current year.\n            // That second case is much more rare than the first and less annoying.\n            // It's impossible to fix without knowing about the server's timezone,\n            // so we just don't do anything about it.\n            // \n            // If we're here with a time that is more than 28 hours into the\n            // future (1 hour + maximum timezone offset which is 27 hours),\n            // there is a problem -- we should be in the second conditional block\n            if (info.date.getTime() - Date.now() > 100800000) {\n                info.date = new Date(year - 1 + \"-\" + month + \"-\" + day + \"T\" + hour + \":\" + mins);\n            }\n            // If we're here with a time that is more than 6 months old, there's\n            // a problem as well.\n            // Maybe local & remote servers aren't on the same timezone (with remote\n            // ahead of local)\n            // For instance, remote is in 2014 while local is still in 2013. In\n            // this case, a date like 01/01/13 02:23 could be detected instead of\n            // 01/01/14 02:23 \n            // Our trigger point will be 3600*24*31*6 (since we already use 31\n            // as an upper bound, no need to add the 27 hours timezone offset)\n            if (Date.now() - info.date.getTime() > 16070400000) {\n                info.date = new Date(year + 1 + \"-\" + month + \"-\" + day + \"T\" + hour + \":\" + mins);\n            }\n        } else if (ret.month2 !== undefined) {\n            month = parseInt(MONTHS[ret.month2.toLowerCase()], 10);\n            day = parseInt(ret.date2, 10);\n            year = parseInt(ret.year, 10);\n            if (month < 10) month = \"0\" + month;\n            if (day < 10) day = \"0\" + day;\n            info.date = new Date(year + \"-\" + month + \"-\" + day);\n        }\n        if (ret.type === \"l\") {\n            var pos = ret.name.indexOf(\" -> \");\n            info.name = ret.name.substring(0, pos);\n            info.target = ret.name.substring(pos + 4);\n        } else info.name = ret.name;\n        ret = info;\n    } else if (ret = XRegExp.exec(line, REX_LISTMSDOS)) {\n        info = {\n            name: ret.name,\n            type: ret.isdir ? \"d\" : \"-\",\n            size: ret.isdir ? 0 : parseInt(ret.size, 10),\n            date: undefined\n        };\n        month = parseInt(ret.month, 10), day = parseInt(ret.date, 10), year = parseInt(ret.year, 10), hour = parseInt(ret.hour, 10), mins = parseInt(ret.minute, 10);\n        if (year < 70) year += 2000;\n        else year += 1900;\n        if (ret.ampm[0].toLowerCase() === \"p\" && hour < 12) hour += 12;\n        else if (ret.ampm[0].toLowerCase() === \"a\" && hour === 12) hour = 0;\n        info.date = new Date(year, month - 1, day, hour, mins);\n        ret = info;\n    } else if (!RE_ENTRY_TOTAL.test(line)) ret = line; // could not parse, so at least give the end user a chance to\n    // look at the raw listing themselves\n    return ret;\n};\nmodule.exports = Parser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ftp/lib/parser.js\n");

/***/ })

};
;