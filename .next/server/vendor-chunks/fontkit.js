/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/fontkit";
exports.ids = ["vendor-chunks/fontkit"];
exports.modules = {

/***/ "(rsc)/./node_modules/fontkit/node_modules/@swc/helpers/src/_apply_decorated_descriptor.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/fontkit/node_modules/@swc/helpers/src/_apply_decorated_descriptor.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ _applyDecoratedDescriptor)\n/* harmony export */ });\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {\n    var desc = {};\n    Object[\"ke\" + \"ys\"](descriptor).forEach(function(key) {\n        desc[key] = descriptor[key];\n    });\n    desc.enumerable = !!desc.enumerable;\n    desc.configurable = !!desc.configurable;\n    if (\"value\" in desc || desc.initializer) {\n        desc.writable = true;\n    }\n    desc = decorators.slice().reverse().reduce(function(desc, decorator) {\n        return decorator ? decorator(target, property, desc) || desc : desc;\n    }, desc);\n    var hasAccessor = Object.prototype.hasOwnProperty.call(desc, \"get\") || Object.prototype.hasOwnProperty.call(desc, \"set\");\n    if (context && desc.initializer !== void 0 && !hasAccessor) {\n        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n        desc.initializer = undefined;\n    }\n    if (hasAccessor) {\n        delete desc.writable;\n        delete desc.initializer;\n        delete desc.value;\n    }\n    if (desc.initializer === void 0) {\n        Object[\"define\" + \"Property\"](target, property, desc);\n        desc = null;\n    }\n    return desc;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZm9udGtpdC9ub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL3NyYy9fYXBwbHlfZGVjb3JhdGVkX2Rlc2NyaXB0b3IuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFlLFNBQVNBLDBCQUEwQkMsTUFBTSxFQUFFQyxRQUFRLEVBQUVDLFVBQVUsRUFBRUMsVUFBVSxFQUFFQyxPQUFPO0lBQ2pHLElBQUlDLE9BQU8sQ0FBQztJQUNaQyxNQUFNLENBQUMsT0FBTyxLQUFLLENBQUNILFlBQVlJLE9BQU8sQ0FBQyxTQUFVQyxHQUFHO1FBQ25ESCxJQUFJLENBQUNHLElBQUksR0FBR0wsVUFBVSxDQUFDSyxJQUFJO0lBQzdCO0lBQ0FILEtBQUtJLFVBQVUsR0FBRyxDQUFDLENBQUNKLEtBQUtJLFVBQVU7SUFDbkNKLEtBQUtLLFlBQVksR0FBRyxDQUFDLENBQUNMLEtBQUtLLFlBQVk7SUFFdkMsSUFBSSxXQUFXTCxRQUFRQSxLQUFLTSxXQUFXLEVBQUU7UUFDdkNOLEtBQUtPLFFBQVEsR0FBRztJQUNsQjtJQUVBUCxPQUFPSCxXQUFXVyxLQUFLLEdBQUdDLE9BQU8sR0FBR0MsTUFBTSxDQUFDLFNBQVVWLElBQUksRUFBRVcsU0FBUztRQUNsRSxPQUFPQSxZQUFhQSxVQUFVaEIsUUFBUUMsVUFBVUksU0FBU0EsT0FBUUE7SUFDbkUsR0FBR0E7SUFFSCxJQUFJWSxjQUFjWCxPQUFPWSxTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDZixNQUFNLFVBQVVDLE9BQU9ZLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNmLE1BQU07SUFDbEgsSUFBSUQsV0FBV0MsS0FBS00sV0FBVyxLQUFLLEtBQUssS0FBSyxDQUFDTSxhQUFhO1FBQzFEWixLQUFLZ0IsS0FBSyxHQUFHaEIsS0FBS00sV0FBVyxHQUFHTixLQUFLTSxXQUFXLENBQUNTLElBQUksQ0FBQ2hCLFdBQVcsS0FBSztRQUN0RUMsS0FBS00sV0FBVyxHQUFHVztJQUNyQjtJQUVBLElBQUlMLGFBQWE7UUFDZixPQUFPWixLQUFLTyxRQUFRO1FBQ3BCLE9BQU9QLEtBQUtNLFdBQVc7UUFDdkIsT0FBT04sS0FBS2dCLEtBQUs7SUFDbkI7SUFDQSxJQUFJaEIsS0FBS00sV0FBVyxLQUFLLEtBQUssR0FBRztRQUMvQkwsTUFBTSxDQUFDLFdBQVcsV0FBVyxDQUFDTixRQUFRQyxVQUFVSTtRQUNoREEsT0FBTztJQUNUO0lBRUEsT0FBT0E7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL2NpdmlsLWVuZ2luZWVyaW5nLXBsYXRmb3JtLy4vbm9kZV9tb2R1bGVzL2ZvbnRraXQvbm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9zcmMvX2FwcGx5X2RlY29yYXRlZF9kZXNjcmlwdG9yLmpzP2ZhYmIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5LCBkZWNvcmF0b3JzLCBkZXNjcmlwdG9yLCBjb250ZXh0KSB7XG4gIHZhciBkZXNjID0ge307XG4gIE9iamVjdFsna2UnICsgJ3lzJ10oZGVzY3JpcHRvcikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgZGVzY1trZXldID0gZGVzY3JpcHRvcltrZXldO1xuICB9KTtcbiAgZGVzYy5lbnVtZXJhYmxlID0gISFkZXNjLmVudW1lcmFibGU7XG4gIGRlc2MuY29uZmlndXJhYmxlID0gISFkZXNjLmNvbmZpZ3VyYWJsZTtcblxuICBpZiAoJ3ZhbHVlJyBpbiBkZXNjIHx8IGRlc2MuaW5pdGlhbGl6ZXIpIHtcbiAgICBkZXNjLndyaXRhYmxlID0gdHJ1ZTtcbiAgfVxuXG4gIGRlc2MgPSBkZWNvcmF0b3JzLnNsaWNlKCkucmV2ZXJzZSgpLnJlZHVjZShmdW5jdGlvbiAoZGVzYywgZGVjb3JhdG9yKSB7XG4gICAgcmV0dXJuIGRlY29yYXRvciA/IChkZWNvcmF0b3IodGFyZ2V0LCBwcm9wZXJ0eSwgZGVzYykgfHwgZGVzYykgOiBkZXNjO1xuICB9LCBkZXNjKTtcblxuICB2YXIgaGFzQWNjZXNzb3IgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZGVzYywgJ2dldCcpIHx8IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChkZXNjLCAnc2V0Jyk7XG4gIGlmIChjb250ZXh0ICYmIGRlc2MuaW5pdGlhbGl6ZXIgIT09IHZvaWQgMCAmJiAhaGFzQWNjZXNzb3IpIHtcbiAgICBkZXNjLnZhbHVlID0gZGVzYy5pbml0aWFsaXplciA/IGRlc2MuaW5pdGlhbGl6ZXIuY2FsbChjb250ZXh0KSA6IHZvaWQgMDtcbiAgICBkZXNjLmluaXRpYWxpemVyID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKGhhc0FjY2Vzc29yKSB7XG4gICAgZGVsZXRlIGRlc2Mud3JpdGFibGU7XG4gICAgZGVsZXRlIGRlc2MuaW5pdGlhbGl6ZXI7XG4gICAgZGVsZXRlIGRlc2MudmFsdWU7XG4gIH1cbiAgaWYgKGRlc2MuaW5pdGlhbGl6ZXIgPT09IHZvaWQgMCkge1xuICAgIE9iamVjdFsnZGVmaW5lJyArICdQcm9wZXJ0eSddKHRhcmdldCwgcHJvcGVydHksIGRlc2MpO1xuICAgIGRlc2MgPSBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGRlc2M7XG59XG4iXSwibmFtZXMiOlsiX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvciIsInRhcmdldCIsInByb3BlcnR5IiwiZGVjb3JhdG9ycyIsImRlc2NyaXB0b3IiLCJjb250ZXh0IiwiZGVzYyIsIk9iamVjdCIsImZvckVhY2giLCJrZXkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwiaW5pdGlhbGl6ZXIiLCJ3cml0YWJsZSIsInNsaWNlIiwicmV2ZXJzZSIsInJlZHVjZSIsImRlY29yYXRvciIsImhhc0FjY2Vzc29yIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwidmFsdWUiLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fontkit/node_modules/@swc/helpers/src/_apply_decorated_descriptor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fontkit/iconv-lite.cjs":
/*!*********************************************!*\
  !*** ./node_modules/fontkit/iconv-lite.cjs ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// iconv-lite is an optional dependency.\n// This is a hack to make that work with Node native ESM by creating a CJS module\n// that can be imported from ESM. This also works in bundlers which support try..catch\n// blocks to mark optional dependencies.\ntry {\n    module.exports = __webpack_require__(/*! iconv-lite */ \"(rsc)/./node_modules/iconv-lite/lib/index.js\");\n} catch (err) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZm9udGtpdC9pY29udi1saXRlLmNqcyIsIm1hcHBpbmdzIjoiQUFBQSx3Q0FBd0M7QUFDeEMsaUZBQWlGO0FBQ2pGLHNGQUFzRjtBQUN0Rix3Q0FBd0M7QUFDeEMsSUFBSTtJQUNGQSxzR0FBeUI7QUFDM0IsRUFBRSxPQUFPRyxLQUFLLENBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaXZpbC1lbmdpbmVlcmluZy1wbGF0Zm9ybS8uL25vZGVfbW9kdWxlcy9mb250a2l0L2ljb252LWxpdGUuY2pzPzZmZmIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaWNvbnYtbGl0ZSBpcyBhbiBvcHRpb25hbCBkZXBlbmRlbmN5LlxuLy8gVGhpcyBpcyBhIGhhY2sgdG8gbWFrZSB0aGF0IHdvcmsgd2l0aCBOb2RlIG5hdGl2ZSBFU00gYnkgY3JlYXRpbmcgYSBDSlMgbW9kdWxlXG4vLyB0aGF0IGNhbiBiZSBpbXBvcnRlZCBmcm9tIEVTTS4gVGhpcyBhbHNvIHdvcmtzIGluIGJ1bmRsZXJzIHdoaWNoIHN1cHBvcnQgdHJ5Li5jYXRjaFxuLy8gYmxvY2tzIHRvIG1hcmsgb3B0aW9uYWwgZGVwZW5kZW5jaWVzLlxudHJ5IHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCdpY29udi1saXRlJyk7XG59IGNhdGNoIChlcnIpIHsgfVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIiwiZXJyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fontkit/iconv-lite.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/fontkit/dist/module.mjs":
/*!**********************************************!*\
  !*** ./node_modules/fontkit/dist/module.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   create: () => (/* binding */ $8857867ee3ddfad5$export$185802fd694ee1f5),\n/* harmony export */   \"default\": () => (/* binding */ $cf838c15c8b009ba$export$2e2bcd8739ae039),\n/* harmony export */   defaultLanguage: () => (/* binding */ $8857867ee3ddfad5$export$42940898df819940),\n/* harmony export */   logErrors: () => (/* binding */ $8857867ee3ddfad5$export$bd5c5d8b8dcafd78),\n/* harmony export */   open: () => (/* binding */ $8857867ee3ddfad5$export$3ce6949f20cea765),\n/* harmony export */   openSync: () => (/* binding */ $8857867ee3ddfad5$export$fa5499edb1ab414a),\n/* harmony export */   registerFormat: () => (/* binding */ $8857867ee3ddfad5$export$36b2f24e97d43be),\n/* harmony export */   setDefaultLanguage: () => (/* binding */ $8857867ee3ddfad5$export$5157e7780d44cc36)\n/* harmony export */ });\n/* harmony import */ var restructure__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! restructure */ \"(rsc)/./node_modules/restructure/index.js\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var _swc_helpers__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @swc/helpers */ \"(rsc)/./node_modules/fontkit/node_modules/@swc/helpers/src/_apply_decorated_descriptor.js\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! buffer */ \"buffer\");\n/* harmony import */ var restructure_src_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! restructure/src/utils.js */ \"(rsc)/./node_modules/restructure/src/utils.js\");\n/* harmony import */ var deep_equal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! deep-equal */ \"(rsc)/./node_modules/deep-equal/index.js\");\n/* harmony import */ var _iconv_lite_cjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../iconv-lite.cjs */ \"(rsc)/./node_modules/fontkit/iconv-lite.cjs\");\n/* harmony import */ var unicode_properties__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! unicode-properties */ \"(rsc)/./node_modules/unicode-properties/dist/module.mjs\");\n/* harmony import */ var unicode_trie__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! unicode-trie */ \"(rsc)/./node_modules/unicode-trie/index.js\");\n/* harmony import */ var dfa__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! dfa */ \"(rsc)/./node_modules/dfa/index.js\");\n/* harmony import */ var clone__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! clone */ \"(rsc)/./node_modules/clone/clone.js\");\n/* harmony import */ var tiny_inflate__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! tiny-inflate */ \"(rsc)/./node_modules/tiny-inflate/index.js\");\n/* harmony import */ var brotli_decompress_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! brotli/decompress.js */ \"(rsc)/./node_modules/brotli/decompress.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction $parcel$export(e, n, v, s) {\n    Object.defineProperty(e, n, {\n        get: v,\n        set: s,\n        enumerable: true,\n        configurable: true\n    });\n}\nfunction $parcel$interopDefault(a) {\n    return a && a.__esModule ? a.default : a;\n}\nvar $8857867ee3ddfad5$exports = {};\n$parcel$export($8857867ee3ddfad5$exports, \"logErrors\", ()=>$8857867ee3ddfad5$export$bd5c5d8b8dcafd78);\n$parcel$export($8857867ee3ddfad5$exports, \"registerFormat\", ()=>$8857867ee3ddfad5$export$36b2f24e97d43be);\n$parcel$export($8857867ee3ddfad5$exports, \"openSync\", ()=>$8857867ee3ddfad5$export$fa5499edb1ab414a);\n$parcel$export($8857867ee3ddfad5$exports, \"create\", ()=>$8857867ee3ddfad5$export$185802fd694ee1f5);\n$parcel$export($8857867ee3ddfad5$exports, \"open\", ()=>$8857867ee3ddfad5$export$3ce6949f20cea765);\n$parcel$export($8857867ee3ddfad5$exports, \"defaultLanguage\", ()=>$8857867ee3ddfad5$export$42940898df819940);\n$parcel$export($8857867ee3ddfad5$exports, \"setDefaultLanguage\", ()=>$8857867ee3ddfad5$export$5157e7780d44cc36);\nlet $8857867ee3ddfad5$export$bd5c5d8b8dcafd78 = false;\nlet $8857867ee3ddfad5$var$formats = [];\nfunction $8857867ee3ddfad5$export$36b2f24e97d43be(format) {\n    $8857867ee3ddfad5$var$formats.push(format);\n}\nfunction $8857867ee3ddfad5$export$fa5499edb1ab414a(filename, postscriptName) {\n    let buffer = (0,fs__WEBPACK_IMPORTED_MODULE_1__.readFileSync)(filename);\n    return $8857867ee3ddfad5$export$185802fd694ee1f5(buffer, postscriptName);\n}\nfunction $8857867ee3ddfad5$export$3ce6949f20cea765(filename, postscriptName, callback) {\n    if (typeof postscriptName === \"function\") {\n        callback = postscriptName;\n        postscriptName = null;\n    }\n    (0,fs__WEBPACK_IMPORTED_MODULE_1__.readFile)(filename, function(err, buffer) {\n        if (err) return callback(err);\n        try {\n            var font = $8857867ee3ddfad5$export$185802fd694ee1f5(buffer, postscriptName);\n        } catch (e) {\n            return callback(e);\n        }\n        return callback(null, font);\n    });\n    return;\n}\nfunction $8857867ee3ddfad5$export$185802fd694ee1f5(buffer, postscriptName) {\n    for(let i = 0; i < $8857867ee3ddfad5$var$formats.length; i++){\n        let format = $8857867ee3ddfad5$var$formats[i];\n        if (format.probe(buffer)) {\n            let font = new format(new restructure__WEBPACK_IMPORTED_MODULE_0__.DecodeStream(buffer));\n            if (postscriptName) return font.getFont(postscriptName);\n            return font;\n        }\n    }\n    throw new Error(\"Unknown font format\");\n}\nlet $8857867ee3ddfad5$export$42940898df819940 = \"en\";\nfunction $8857867ee3ddfad5$export$5157e7780d44cc36(lang = \"en\") {\n    $8857867ee3ddfad5$export$42940898df819940 = lang;\n}\nfunction $df9bc573962369ff$export$69a3209f1a06c04d(target, key1, descriptor) {\n    if (descriptor.get) {\n        let get = descriptor.get;\n        descriptor.get = function() {\n            let value = get.call(this);\n            Object.defineProperty(this, key1, {\n                value: value\n            });\n            return value;\n        };\n    } else if (typeof descriptor.value === \"function\") {\n        let fn = descriptor.value;\n        return {\n            get () {\n                let $df9bc573962369ff$export$69a3209f1a06c04d = new Map;\n                function memoized(...args) {\n                    let key = args.length > 0 ? args[0] : \"value\";\n                    if ($df9bc573962369ff$export$69a3209f1a06c04d.has(key)) return $df9bc573962369ff$export$69a3209f1a06c04d.get(key);\n                    let result = fn.apply(this, args);\n                    $df9bc573962369ff$export$69a3209f1a06c04d.set(key, result);\n                    return result;\n                }\n                Object.defineProperty(this, key1, {\n                    value: memoized\n                });\n                return memoized;\n            }\n        };\n    }\n}\nlet $9aad45a64cf8e4b5$var$SubHeader = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    firstCode: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    entryCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    idDelta: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    idRangeOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n});\nlet $9aad45a64cf8e4b5$var$CmapGroup = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    startCharCode: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    endCharCode: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    glyphID: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32\n});\nlet $9aad45a64cf8e4b5$var$UnicodeValueRange = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    startUnicodeValue: restructure__WEBPACK_IMPORTED_MODULE_0__.uint24,\n    additionalCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8\n});\nlet $9aad45a64cf8e4b5$var$UVSMapping = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    unicodeValue: restructure__WEBPACK_IMPORTED_MODULE_0__.uint24,\n    glyphID: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n});\nlet $9aad45a64cf8e4b5$var$DefaultUVS = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($9aad45a64cf8e4b5$var$UnicodeValueRange, restructure__WEBPACK_IMPORTED_MODULE_0__.uint32);\nlet $9aad45a64cf8e4b5$var$NonDefaultUVS = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($9aad45a64cf8e4b5$var$UVSMapping, restructure__WEBPACK_IMPORTED_MODULE_0__.uint32);\nlet $9aad45a64cf8e4b5$var$VarSelectorRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    varSelector: restructure__WEBPACK_IMPORTED_MODULE_0__.uint24,\n    defaultUVS: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $9aad45a64cf8e4b5$var$DefaultUVS, {\n        type: \"parent\"\n    }),\n    nonDefaultUVS: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $9aad45a64cf8e4b5$var$NonDefaultUVS, {\n        type: \"parent\"\n    })\n});\nlet $9aad45a64cf8e4b5$var$CmapSubtable = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    0: {\n        length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        language: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        codeMap: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, 256)\n    },\n    2: {\n        length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        language: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        subHeaderKeys: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, 256),\n        subHeaderCount: (t)=>Math.max.apply(Math, t.subHeaderKeys),\n        subHeaders: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray($9aad45a64cf8e4b5$var$SubHeader, \"subHeaderCount\"),\n        glyphIndexArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"subHeaderCount\")\n    },\n    4: {\n        length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        language: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        segCountX2: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        segCount: (t)=>t.segCountX2 >> 1,\n        searchRange: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        entrySelector: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        rangeShift: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        endCode: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"segCount\"),\n        reservedPad: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16),\n        startCode: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"segCount\"),\n        idDelta: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.int16, \"segCount\"),\n        idRangeOffset: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"segCount\"),\n        glyphIndexArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (t)=>(t.length - t._currentOffset) / 2)\n    },\n    6: {\n        length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        language: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        firstCode: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        entryCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        glyphIndices: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"entryCount\")\n    },\n    8: {\n        reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16),\n        length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        language: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        is32: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, 8192),\n        nGroups: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        groups: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray($9aad45a64cf8e4b5$var$CmapGroup, \"nGroups\")\n    },\n    10: {\n        reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16),\n        length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        language: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        firstCode: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        entryCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        glyphIndices: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"numChars\")\n    },\n    12: {\n        reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16),\n        length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        language: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        nGroups: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        groups: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray($9aad45a64cf8e4b5$var$CmapGroup, \"nGroups\")\n    },\n    13: {\n        reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16),\n        length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        language: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        nGroups: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        groups: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray($9aad45a64cf8e4b5$var$CmapGroup, \"nGroups\")\n    },\n    14: {\n        length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        numRecords: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        varSelectors: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray($9aad45a64cf8e4b5$var$VarSelectorRecord, \"numRecords\")\n    }\n});\nlet $9aad45a64cf8e4b5$var$CmapEntry = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    platformID: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    encodingID: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    table: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $9aad45a64cf8e4b5$var$CmapSubtable, {\n        type: \"parent\",\n        lazy: true\n    })\n});\nvar $9aad45a64cf8e4b5$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    numSubtables: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    tables: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($9aad45a64cf8e4b5$var$CmapEntry, \"numSubtables\")\n});\nvar $b41847595480ce3a$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.int32,\n    revision: restructure__WEBPACK_IMPORTED_MODULE_0__.int32,\n    checkSumAdjustment: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    magicNumber: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    flags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    unitsPerEm: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    created: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.int32, 2),\n    modified: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.int32, 2),\n    xMin: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    yMin: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    xMax: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    yMax: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    macStyle: new restructure__WEBPACK_IMPORTED_MODULE_0__.Bitfield(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, [\n        \"bold\",\n        \"italic\",\n        \"underline\",\n        \"outline\",\n        \"shadow\",\n        \"condensed\",\n        \"extended\"\n    ]),\n    lowestRecPPEM: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    fontDirectionHint: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    indexToLocFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    glyphDataFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.int16 // 0 for current format\n});\nvar $5fda302e2516d0c7$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.int32,\n    ascent: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    descent: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    lineGap: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    advanceWidthMax: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    minLeftSideBearing: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    minRightSideBearing: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    xMaxExtent: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    caretSlopeRise: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    caretSlopeRun: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    caretOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.int16, 4),\n    metricDataFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    numberOfMetrics: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16 // Number of advance widths in 'hmtx' table\n});\nlet $28788c978325a3e1$var$HmtxEntry = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    advance: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    bearing: restructure__WEBPACK_IMPORTED_MODULE_0__.int16\n});\nvar $28788c978325a3e1$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    metrics: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray($28788c978325a3e1$var$HmtxEntry, (t)=>t.parent.hhea.numberOfMetrics),\n    bearings: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.int16, (t)=>t.parent.maxp.numGlyphs - t.parent.hhea.numberOfMetrics)\n});\nvar $9e68d972c1fae2a9$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.int32,\n    numGlyphs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    maxPoints: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    maxContours: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    maxComponentPoints: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    maxComponentContours: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    maxZones: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    maxTwilightPoints: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    maxStorage: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    maxFunctionDefs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    maxInstructionDefs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    maxStackElements: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    maxSizeOfInstructions: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    maxComponentElements: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    maxComponentDepth: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16 // Maximum levels of recursion; 1 for simple components\n});\nfunction $111d7d948974b54a$export$badc544e0651b6b1(platformID, encodingID, languageID = 0) {\n    if (platformID === 1 && $111d7d948974b54a$export$479e671907f486d1[languageID]) return $111d7d948974b54a$export$479e671907f486d1[languageID];\n    return $111d7d948974b54a$export$6fef87b7618bdf0b[platformID][encodingID];\n}\nconst $111d7d948974b54a$export$6fef87b7618bdf0b = [\n    // unicode\n    [\n        \"utf16be\",\n        \"utf16be\",\n        \"utf16be\",\n        \"utf16be\",\n        \"utf16be\",\n        \"utf16be\"\n    ],\n    // macintosh\n    // Mappings available at http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/\n    // 0\tRoman                 17\tMalayalam\n    // 1\tJapanese\t            18\tSinhalese\n    // 2\tTraditional Chinese\t  19\tBurmese\n    // 3\tKorean\t              20\tKhmer\n    // 4\tArabic\t              21\tThai\n    // 5\tHebrew\t              22\tLaotian\n    // 6\tGreek\t                23\tGeorgian\n    // 7\tRussian\t              24\tArmenian\n    // 8\tRSymbol\t              25\tSimplified Chinese\n    // 9\tDevanagari\t          26\tTibetan\n    // 10\tGurmukhi\t            27\tMongolian\n    // 11\tGujarati\t            28\tGeez\n    // 12\tOriya\t                29\tSlavic\n    // 13\tBengali\t              30\tVietnamese\n    // 14\tTamil\t                31\tSindhi\n    // 15\tTelugu\t              32\t(Uninterpreted)\n    // 16\tKannada\n    [\n        \"macroman\",\n        \"shift-jis\",\n        \"big5\",\n        \"euc-kr\",\n        \"iso-8859-6\",\n        \"iso-8859-8\",\n        \"macgreek\",\n        \"maccyrillic\",\n        \"symbol\",\n        \"Devanagari\",\n        \"Gurmukhi\",\n        \"Gujarati\",\n        \"Oriya\",\n        \"Bengali\",\n        \"Tamil\",\n        \"Telugu\",\n        \"Kannada\",\n        \"Malayalam\",\n        \"Sinhalese\",\n        \"Burmese\",\n        \"Khmer\",\n        \"macthai\",\n        \"Laotian\",\n        \"Georgian\",\n        \"Armenian\",\n        \"gb-2312-80\",\n        \"Tibetan\",\n        \"Mongolian\",\n        \"Geez\",\n        \"maccenteuro\",\n        \"Vietnamese\",\n        \"Sindhi\"\n    ],\n    // ISO (deprecated)\n    [\n        \"ascii\"\n    ],\n    // windows\n    // Docs here: http://msdn.microsoft.com/en-us/library/system.text.encoding(v=vs.110).aspx\n    [\n        \"symbol\",\n        \"utf16be\",\n        \"shift-jis\",\n        \"gb18030\",\n        \"big5\",\n        \"wansung\",\n        \"johab\",\n        null,\n        null,\n        null,\n        \"utf16be\"\n    ]\n];\nconst $111d7d948974b54a$export$479e671907f486d1 = {\n    15: \"maciceland\",\n    17: \"macturkish\",\n    18: \"maccroatian\",\n    24: \"maccenteuro\",\n    25: \"maccenteuro\",\n    26: \"maccenteuro\",\n    27: \"maccenteuro\",\n    28: \"maccenteuro\",\n    30: \"maciceland\",\n    37: \"macromania\",\n    38: \"maccenteuro\",\n    39: \"maccenteuro\",\n    40: \"maccenteuro\",\n    143: \"macinuit\",\n    146: \"macgaelic\" // Unsupported by iconv-lite\n};\nconst $111d7d948974b54a$export$2092376fd002e13 = [\n    // unicode\n    [],\n    {\n        0: \"en\",\n        30: \"fo\",\n        60: \"ks\",\n        90: \"rw\",\n        1: \"fr\",\n        31: \"fa\",\n        61: \"ku\",\n        91: \"rn\",\n        2: \"de\",\n        32: \"ru\",\n        62: \"sd\",\n        92: \"ny\",\n        3: \"it\",\n        33: \"zh\",\n        63: \"bo\",\n        93: \"mg\",\n        4: \"nl\",\n        34: \"nl-BE\",\n        64: \"ne\",\n        94: \"eo\",\n        5: \"sv\",\n        35: \"ga\",\n        65: \"sa\",\n        128: \"cy\",\n        6: \"es\",\n        36: \"sq\",\n        66: \"mr\",\n        129: \"eu\",\n        7: \"da\",\n        37: \"ro\",\n        67: \"bn\",\n        130: \"ca\",\n        8: \"pt\",\n        38: \"cz\",\n        68: \"as\",\n        131: \"la\",\n        9: \"no\",\n        39: \"sk\",\n        69: \"gu\",\n        132: \"qu\",\n        10: \"he\",\n        40: \"si\",\n        70: \"pa\",\n        133: \"gn\",\n        11: \"ja\",\n        41: \"yi\",\n        71: \"or\",\n        134: \"ay\",\n        12: \"ar\",\n        42: \"sr\",\n        72: \"ml\",\n        135: \"tt\",\n        13: \"fi\",\n        43: \"mk\",\n        73: \"kn\",\n        136: \"ug\",\n        14: \"el\",\n        44: \"bg\",\n        74: \"ta\",\n        137: \"dz\",\n        15: \"is\",\n        45: \"uk\",\n        75: \"te\",\n        138: \"jv\",\n        16: \"mt\",\n        46: \"be\",\n        76: \"si\",\n        139: \"su\",\n        17: \"tr\",\n        47: \"uz\",\n        77: \"my\",\n        140: \"gl\",\n        18: \"hr\",\n        48: \"kk\",\n        78: \"km\",\n        141: \"af\",\n        19: \"zh-Hant\",\n        49: \"az-Cyrl\",\n        79: \"lo\",\n        142: \"br\",\n        20: \"ur\",\n        50: \"az-Arab\",\n        80: \"vi\",\n        143: \"iu\",\n        21: \"hi\",\n        51: \"hy\",\n        81: \"id\",\n        144: \"gd\",\n        22: \"th\",\n        52: \"ka\",\n        82: \"tl\",\n        145: \"gv\",\n        23: \"ko\",\n        53: \"mo\",\n        83: \"ms\",\n        146: \"ga\",\n        24: \"lt\",\n        54: \"ky\",\n        84: \"ms-Arab\",\n        147: \"to\",\n        25: \"pl\",\n        55: \"tg\",\n        85: \"am\",\n        148: \"el-polyton\",\n        26: \"hu\",\n        56: \"tk\",\n        86: \"ti\",\n        149: \"kl\",\n        27: \"es\",\n        57: \"mn-CN\",\n        87: \"om\",\n        150: \"az\",\n        28: \"lv\",\n        58: \"mn\",\n        88: \"so\",\n        151: \"nn\",\n        29: \"se\",\n        59: \"ps\",\n        89: \"sw\"\n    },\n    // ISO (deprecated)\n    [],\n    {\n        0x0436: \"af\",\n        0x4009: \"en-IN\",\n        0x0487: \"rw\",\n        0x0432: \"tn\",\n        0x041C: \"sq\",\n        0x1809: \"en-IE\",\n        0x0441: \"sw\",\n        0x045B: \"si\",\n        0x0484: \"gsw\",\n        0x2009: \"en-JM\",\n        0x0457: \"kok\",\n        0x041B: \"sk\",\n        0x045E: \"am\",\n        0x4409: \"en-MY\",\n        0x0412: \"ko\",\n        0x0424: \"sl\",\n        0x1401: \"ar-DZ\",\n        0x1409: \"en-NZ\",\n        0x0440: \"ky\",\n        0x2C0A: \"es-AR\",\n        0x3C01: \"ar-BH\",\n        0x3409: \"en-PH\",\n        0x0454: \"lo\",\n        0x400A: \"es-BO\",\n        0x0C01: \"ar\",\n        0x4809: \"en-SG\",\n        0x0426: \"lv\",\n        0x340A: \"es-CL\",\n        0x0801: \"ar-IQ\",\n        0x1C09: \"en-ZA\",\n        0x0427: \"lt\",\n        0x240A: \"es-CO\",\n        0x2C01: \"ar-JO\",\n        0x2C09: \"en-TT\",\n        0x082E: \"dsb\",\n        0x140A: \"es-CR\",\n        0x3401: \"ar-KW\",\n        0x0809: \"en-GB\",\n        0x046E: \"lb\",\n        0x1C0A: \"es-DO\",\n        0x3001: \"ar-LB\",\n        0x0409: \"en\",\n        0x042F: \"mk\",\n        0x300A: \"es-EC\",\n        0x1001: \"ar-LY\",\n        0x3009: \"en-ZW\",\n        0x083E: \"ms-BN\",\n        0x440A: \"es-SV\",\n        0x1801: \"ary\",\n        0x0425: \"et\",\n        0x043E: \"ms\",\n        0x100A: \"es-GT\",\n        0x2001: \"ar-OM\",\n        0x0438: \"fo\",\n        0x044C: \"ml\",\n        0x480A: \"es-HN\",\n        0x4001: \"ar-QA\",\n        0x0464: \"fil\",\n        0x043A: \"mt\",\n        0x080A: \"es-MX\",\n        0x0401: \"ar-SA\",\n        0x040B: \"fi\",\n        0x0481: \"mi\",\n        0x4C0A: \"es-NI\",\n        0x2801: \"ar-SY\",\n        0x080C: \"fr-BE\",\n        0x047A: \"arn\",\n        0x180A: \"es-PA\",\n        0x1C01: \"aeb\",\n        0x0C0C: \"fr-CA\",\n        0x044E: \"mr\",\n        0x3C0A: \"es-PY\",\n        0x3801: \"ar-AE\",\n        0x040C: \"fr\",\n        0x047C: \"moh\",\n        0x280A: \"es-PE\",\n        0x2401: \"ar-YE\",\n        0x140C: \"fr-LU\",\n        0x0450: \"mn\",\n        0x500A: \"es-PR\",\n        0x042B: \"hy\",\n        0x180C: \"fr-MC\",\n        0x0850: \"mn-CN\",\n        0x0C0A: \"es\",\n        0x044D: \"as\",\n        0x100C: \"fr-CH\",\n        0x0461: \"ne\",\n        0x040A: \"es\",\n        0x082C: \"az-Cyrl\",\n        0x0462: \"fy\",\n        0x0414: \"nb\",\n        0x540A: \"es-US\",\n        0x042C: \"az\",\n        0x0456: \"gl\",\n        0x0814: \"nn\",\n        0x380A: \"es-UY\",\n        0x046D: \"ba\",\n        0x0437: \"ka\",\n        0x0482: \"oc\",\n        0x200A: \"es-VE\",\n        0x042D: \"eu\",\n        0x0C07: \"de-AT\",\n        0x0448: \"or\",\n        0x081D: \"sv-FI\",\n        0x0423: \"be\",\n        0x0407: \"de\",\n        0x0463: \"ps\",\n        0x041D: \"sv\",\n        0x0845: \"bn\",\n        0x1407: \"de-LI\",\n        0x0415: \"pl\",\n        0x045A: \"syr\",\n        0x0445: \"bn-IN\",\n        0x1007: \"de-LU\",\n        0x0416: \"pt\",\n        0x0428: \"tg\",\n        0x201A: \"bs-Cyrl\",\n        0x0807: \"de-CH\",\n        0x0816: \"pt-PT\",\n        0x085F: \"tzm\",\n        0x141A: \"bs\",\n        0x0408: \"el\",\n        0x0446: \"pa\",\n        0x0449: \"ta\",\n        0x047E: \"br\",\n        0x046F: \"kl\",\n        0x046B: \"qu-BO\",\n        0x0444: \"tt\",\n        0x0402: \"bg\",\n        0x0447: \"gu\",\n        0x086B: \"qu-EC\",\n        0x044A: \"te\",\n        0x0403: \"ca\",\n        0x0468: \"ha\",\n        0x0C6B: \"qu\",\n        0x041E: \"th\",\n        0x0C04: \"zh-HK\",\n        0x040D: \"he\",\n        0x0418: \"ro\",\n        0x0451: \"bo\",\n        0x1404: \"zh-MO\",\n        0x0439: \"hi\",\n        0x0417: \"rm\",\n        0x041F: \"tr\",\n        0x0804: \"zh\",\n        0x040E: \"hu\",\n        0x0419: \"ru\",\n        0x0442: \"tk\",\n        0x1004: \"zh-SG\",\n        0x040F: \"is\",\n        0x243B: \"smn\",\n        0x0480: \"ug\",\n        0x0404: \"zh-TW\",\n        0x0470: \"ig\",\n        0x103B: \"smj-NO\",\n        0x0422: \"uk\",\n        0x0483: \"co\",\n        0x0421: \"id\",\n        0x143B: \"smj\",\n        0x042E: \"hsb\",\n        0x041A: \"hr\",\n        0x045D: \"iu\",\n        0x0C3B: \"se-FI\",\n        0x0420: \"ur\",\n        0x101A: \"hr-BA\",\n        0x085D: \"iu-Latn\",\n        0x043B: \"se\",\n        0x0843: \"uz-Cyrl\",\n        0x0405: \"cs\",\n        0x083C: \"ga\",\n        0x083B: \"se-SE\",\n        0x0443: \"uz\",\n        0x0406: \"da\",\n        0x0434: \"xh\",\n        0x203B: \"sms\",\n        0x042A: \"vi\",\n        0x048C: \"prs\",\n        0x0435: \"zu\",\n        0x183B: \"sma-NO\",\n        0x0452: \"cy\",\n        0x0465: \"dv\",\n        0x0410: \"it\",\n        0x1C3B: \"sms\",\n        0x0488: \"wo\",\n        0x0813: \"nl-BE\",\n        0x0810: \"it-CH\",\n        0x044F: \"sa\",\n        0x0485: \"sah\",\n        0x0413: \"nl\",\n        0x0411: \"ja\",\n        0x1C1A: \"sr-Cyrl-BA\",\n        0x0478: \"ii\",\n        0x0C09: \"en-AU\",\n        0x044B: \"kn\",\n        0x0C1A: \"sr\",\n        0x046A: \"yo\",\n        0x2809: \"en-BZ\",\n        0x043F: \"kk\",\n        0x181A: \"sr-Latn-BA\",\n        0x1009: \"en-CA\",\n        0x0453: \"km\",\n        0x081A: \"sr-Latn\",\n        0x2409: \"en-029\",\n        0x0486: \"quc\",\n        0x046C: \"nso\"\n    }\n];\nvar $866b9b7dd32d7242$require$Buffer = buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer;\nlet $866b9b7dd32d7242$var$NameRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    platformID: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    encodingID: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    languageID: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    nameID: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    string: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, new restructure__WEBPACK_IMPORTED_MODULE_0__.String(\"length\", (t)=>$111d7d948974b54a$export$badc544e0651b6b1(t.platformID, t.encodingID, t.languageID)), {\n        type: \"parent\",\n        relativeTo: (ctx)=>ctx.parent.stringOffset,\n        allowNull: false\n    })\n});\nlet $866b9b7dd32d7242$var$LangTagRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, new restructure__WEBPACK_IMPORTED_MODULE_0__.String(\"length\", \"utf16be\"), {\n        type: \"parent\",\n        relativeTo: (ctx)=>ctx.stringOffset\n    })\n});\nvar $866b9b7dd32d7242$var$NameTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    0: {\n        count: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        stringOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        records: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($866b9b7dd32d7242$var$NameRecord, \"count\")\n    },\n    1: {\n        count: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        stringOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        records: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($866b9b7dd32d7242$var$NameRecord, \"count\"),\n        langTagCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        langTags: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($866b9b7dd32d7242$var$LangTagRecord, \"langTagCount\")\n    }\n});\nvar $866b9b7dd32d7242$export$2e2bcd8739ae039 = $866b9b7dd32d7242$var$NameTable;\nconst $866b9b7dd32d7242$var$NAMES = [\n    \"copyright\",\n    \"fontFamily\",\n    \"fontSubfamily\",\n    \"uniqueSubfamily\",\n    \"fullName\",\n    \"version\",\n    \"postscriptName\",\n    \"trademark\",\n    \"manufacturer\",\n    \"designer\",\n    \"description\",\n    \"vendorURL\",\n    \"designerURL\",\n    \"license\",\n    \"licenseURL\",\n    null,\n    \"preferredFamily\",\n    \"preferredSubfamily\",\n    \"compatibleFull\",\n    \"sampleText\",\n    \"postscriptCIDFontName\",\n    \"wwsFamilyName\",\n    \"wwsSubfamilyName\"\n];\n$866b9b7dd32d7242$var$NameTable.process = function(stream) {\n    var records = {};\n    for (let record of this.records){\n        // find out what language this is for\n        let language = $111d7d948974b54a$export$2092376fd002e13[record.platformID][record.languageID];\n        if (language == null && this.langTags != null && record.languageID >= 0x8000) language = this.langTags[record.languageID - 0x8000].tag;\n        if (language == null) language = record.platformID + \"-\" + record.languageID;\n        // if the nameID is >= 256, it is a font feature record (AAT)\n        let key = record.nameID >= 256 ? \"fontFeatures\" : $866b9b7dd32d7242$var$NAMES[record.nameID] || record.nameID;\n        if (records[key] == null) records[key] = {};\n        let obj = records[key];\n        if (record.nameID >= 256) obj = obj[record.nameID] || (obj[record.nameID] = {});\n        if (typeof record.string === \"string\" || typeof obj[language] !== \"string\") obj[language] = record.string;\n    }\n    this.records = records;\n};\n$866b9b7dd32d7242$var$NameTable.preEncode = function() {\n    if (Array.isArray(this.records)) return;\n    this.version = 0;\n    let records = [];\n    for(let key in this.records){\n        let val = this.records[key];\n        if (key === \"fontFeatures\") continue;\n        records.push({\n            platformID: 3,\n            encodingID: 1,\n            languageID: 0x409,\n            nameID: $866b9b7dd32d7242$var$NAMES.indexOf(key),\n            length: $866b9b7dd32d7242$require$Buffer.byteLength(val.en, \"utf16le\"),\n            string: val.en\n        });\n        if (key === \"postscriptName\") records.push({\n            platformID: 1,\n            encodingID: 0,\n            languageID: 0,\n            nameID: $866b9b7dd32d7242$var$NAMES.indexOf(key),\n            length: val.en.length,\n            string: val.en\n        });\n    }\n    this.records = records;\n    this.count = records.length;\n    this.stringOffset = $866b9b7dd32d7242$var$NameTable.size(this, null, false);\n};\nvar $268023eac606db57$var$OS2 = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    header: {\n        xAvgCharWidth: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        usWeightClass: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        usWidthClass: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        fsType: new restructure__WEBPACK_IMPORTED_MODULE_0__.Bitfield(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, [\n            null,\n            \"noEmbedding\",\n            \"viewOnly\",\n            \"editable\",\n            null,\n            null,\n            null,\n            null,\n            \"noSubsetting\",\n            \"bitmapOnly\"\n        ]),\n        ySubscriptXSize: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        ySubscriptYSize: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        ySubscriptXOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        ySubscriptYOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        ySuperscriptXSize: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        ySuperscriptYSize: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        ySuperscriptXOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        ySuperscriptYOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        yStrikeoutSize: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        yStrikeoutPosition: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        sFamilyClass: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        panose: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, 10),\n        ulCharRange: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, 4),\n        vendorID: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n        fsSelection: new restructure__WEBPACK_IMPORTED_MODULE_0__.Bitfield(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, [\n            \"italic\",\n            \"underscore\",\n            \"negative\",\n            \"outlined\",\n            \"strikeout\",\n            \"bold\",\n            \"regular\",\n            \"useTypoMetrics\",\n            \"wws\",\n            \"oblique\"\n        ]),\n        usFirstCharIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        usLastCharIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16 // The maximum Unicode index in this font\n    },\n    // The Apple version of this table ends here, but the Microsoft one continues on...\n    0: {},\n    1: {\n        typoAscender: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        typoDescender: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        typoLineGap: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        winAscent: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        winDescent: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        codePageRange: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, 2)\n    },\n    2: {\n        // these should be common with version 1 somehow\n        typoAscender: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        typoDescender: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        typoLineGap: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        winAscent: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        winDescent: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        codePageRange: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, 2),\n        xHeight: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        capHeight: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        defaultChar: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        breakChar: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        maxContent: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n    },\n    5: {\n        typoAscender: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        typoDescender: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        typoLineGap: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        winAscent: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        winDescent: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        codePageRange: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, 2),\n        xHeight: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        capHeight: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        defaultChar: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        breakChar: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        maxContent: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        usLowerOpticalPointSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        usUpperOpticalPointSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n    }\n});\nlet $268023eac606db57$var$versions = $268023eac606db57$var$OS2.versions;\n$268023eac606db57$var$versions[3] = $268023eac606db57$var$versions[4] = $268023eac606db57$var$versions[2];\nvar $268023eac606db57$export$2e2bcd8739ae039 = $268023eac606db57$var$OS2;\nvar $5287343c85bea17e$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32, {\n    header: {\n        italicAngle: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n        underlinePosition: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        underlineThickness: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        isFixedPitch: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        minMemType42: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        maxMemType42: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        minMemType1: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        maxMemType1: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32 // Maximum memory usage when a TrueType font is downloaded as a Type 1 font\n    },\n    1: {},\n    2: {\n        numberOfGlyphs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        glyphNameIndex: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"numberOfGlyphs\"),\n        names: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.String(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8))\n    },\n    2.5: {\n        numberOfGlyphs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        offsets: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, \"numberOfGlyphs\")\n    },\n    3: {},\n    4: {\n        map: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, (t)=>t.parent.maxp.numGlyphs)\n    }\n});\nvar $5768e6ef8b1a512a$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    controlValues: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.int16)\n});\nvar // These instructions are known as the font program. The main use of this table\n// is for the definition of functions that are used in many different glyph programs.\n$6f2fae1f8d2b4b41$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    instructions: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8)\n});\nlet $cae48a5e791773ec$var$loca = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(\"head.indexToLocFormat\", {\n    0: {\n        offsets: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16)\n    },\n    1: {\n        offsets: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32)\n    }\n});\n$cae48a5e791773ec$var$loca.process = function() {\n    if (this.version === 0) for(let i = 0; i < this.offsets.length; i++)this.offsets[i] <<= 1;\n};\n$cae48a5e791773ec$var$loca.preEncode = function() {\n    if (this.version === 0) for(let i = 0; i < this.offsets.length; i++)this.offsets[i] >>>= 1;\n};\nvar $cae48a5e791773ec$export$2e2bcd8739ae039 = $cae48a5e791773ec$var$loca;\nvar $7b12cfca10f7f884$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    controlValueProgram: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8)\n});\nvar $06e9f2dae5795013$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Buffer);\nclass $6333f51d822e64a1$export$2e2bcd8739ae039 {\n    constructor(type){\n        this.type = type;\n    }\n    getCFFVersion(ctx) {\n        while(ctx && !ctx.hdrSize)ctx = ctx.parent;\n        return ctx ? ctx.version : -1;\n    }\n    decode(stream, parent) {\n        let version = this.getCFFVersion(parent);\n        let count = version >= 2 ? stream.readUInt32BE() : stream.readUInt16BE();\n        if (count === 0) return [];\n        let offSize = stream.readUInt8();\n        let offsetType;\n        if (offSize === 1) offsetType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint8;\n        else if (offSize === 2) offsetType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint16;\n        else if (offSize === 3) offsetType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint24;\n        else if (offSize === 4) offsetType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint32;\n        else throw new Error(`Bad offset size in CFFIndex: ${offSize} ${stream.pos}`);\n        let ret = [];\n        let startPos = stream.pos + (count + 1) * offSize - 1;\n        let start = offsetType.decode(stream);\n        for(let i = 0; i < count; i++){\n            let end = offsetType.decode(stream);\n            if (this.type != null) {\n                let pos = stream.pos;\n                stream.pos = startPos + start;\n                parent.length = end - start;\n                ret.push(this.type.decode(stream, parent));\n                stream.pos = pos;\n            } else ret.push({\n                offset: startPos + start,\n                length: end - start\n            });\n            start = end;\n        }\n        stream.pos = startPos + start;\n        return ret;\n    }\n    size(arr, parent) {\n        let size = 2;\n        if (arr.length === 0) return size;\n        let type = this.type || new restructure__WEBPACK_IMPORTED_MODULE_0__.Buffer;\n        // find maximum offset to detminine offset type\n        let offset = 1;\n        for(let i = 0; i < arr.length; i++){\n            let item = arr[i];\n            offset += type.size(item, parent);\n        }\n        let offsetType;\n        if (offset <= 0xff) offsetType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint8;\n        else if (offset <= 0xffff) offsetType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint16;\n        else if (offset <= 0xffffff) offsetType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint24;\n        else if (offset <= 0xffffffff) offsetType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint32;\n        else throw new Error(\"Bad offset in CFFIndex\");\n        size += 1 + offsetType.size() * (arr.length + 1);\n        size += offset - 1;\n        return size;\n    }\n    encode(stream, arr, parent) {\n        stream.writeUInt16BE(arr.length);\n        if (arr.length === 0) return;\n        let type = this.type || new restructure__WEBPACK_IMPORTED_MODULE_0__.Buffer;\n        // find maximum offset to detminine offset type\n        let sizes = [];\n        let offset = 1;\n        for (let item of arr){\n            let s = type.size(item, parent);\n            sizes.push(s);\n            offset += s;\n        }\n        let offsetType;\n        if (offset <= 0xff) offsetType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint8;\n        else if (offset <= 0xffff) offsetType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint16;\n        else if (offset <= 0xffffff) offsetType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint24;\n        else if (offset <= 0xffffffff) offsetType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint32;\n        else throw new Error(\"Bad offset in CFFIndex\");\n        // write offset size\n        stream.writeUInt8(offsetType.size());\n        // write elements\n        offset = 1;\n        offsetType.encode(stream, offset);\n        for (let size of sizes){\n            offset += size;\n            offsetType.encode(stream, offset);\n        }\n        for (let item1 of arr)type.encode(stream, item1, parent);\n        return;\n    }\n}\nconst $2e2b3208cd32b1af$var$FLOAT_EOF = 0xf;\nconst $2e2b3208cd32b1af$var$FLOAT_LOOKUP = [\n    \"0\",\n    \"1\",\n    \"2\",\n    \"3\",\n    \"4\",\n    \"5\",\n    \"6\",\n    \"7\",\n    \"8\",\n    \"9\",\n    \".\",\n    \"E\",\n    \"E-\",\n    null,\n    \"-\"\n];\nconst $2e2b3208cd32b1af$var$FLOAT_ENCODE_LOOKUP = {\n    \".\": 10,\n    \"E\": 11,\n    \"E-\": 12,\n    \"-\": 14\n};\nclass $2e2b3208cd32b1af$export$2e2bcd8739ae039 {\n    static decode(stream, value) {\n        if (32 <= value && value <= 246) return value - 139;\n        if (247 <= value && value <= 250) return (value - 247) * 256 + stream.readUInt8() + 108;\n        if (251 <= value && value <= 254) return -(value - 251) * 256 - stream.readUInt8() - 108;\n        if (value === 28) return stream.readInt16BE();\n        if (value === 29) return stream.readInt32BE();\n        if (value === 30) {\n            let str = \"\";\n            while(true){\n                let b = stream.readUInt8();\n                let n1 = b >> 4;\n                if (n1 === $2e2b3208cd32b1af$var$FLOAT_EOF) break;\n                str += $2e2b3208cd32b1af$var$FLOAT_LOOKUP[n1];\n                let n2 = b & 15;\n                if (n2 === $2e2b3208cd32b1af$var$FLOAT_EOF) break;\n                str += $2e2b3208cd32b1af$var$FLOAT_LOOKUP[n2];\n            }\n            return parseFloat(str);\n        }\n        return null;\n    }\n    static size(value) {\n        // if the value needs to be forced to the largest size (32 bit)\n        // e.g. for unknown pointers, set to 32768\n        if (value.forceLarge) value = 32768;\n        if ((value | 0) !== value) {\n            let str = \"\" + value;\n            return 1 + Math.ceil((str.length + 1) / 2);\n        } else if (-107 <= value && value <= 107) return 1;\n        else if (108 <= value && value <= 1131 || -1131 <= value && value <= -108) return 2;\n        else if (-32768 <= value && value <= 32767) return 3;\n        else return 5;\n    }\n    static encode(stream, value) {\n        // if the value needs to be forced to the largest size (32 bit)\n        // e.g. for unknown pointers, save the old value and set to 32768\n        let val = Number(value);\n        if (value.forceLarge) {\n            stream.writeUInt8(29);\n            return stream.writeInt32BE(val);\n        } else if ((val | 0) !== val) {\n            stream.writeUInt8(30);\n            let str = \"\" + val;\n            for(let i = 0; i < str.length; i += 2){\n                let c1 = str[i];\n                let n1 = $2e2b3208cd32b1af$var$FLOAT_ENCODE_LOOKUP[c1] || +c1;\n                if (i === str.length - 1) var n2 = $2e2b3208cd32b1af$var$FLOAT_EOF;\n                else {\n                    let c2 = str[i + 1];\n                    var n2 = $2e2b3208cd32b1af$var$FLOAT_ENCODE_LOOKUP[c2] || +c2;\n                }\n                stream.writeUInt8(n1 << 4 | n2 & 15);\n            }\n            if (n2 !== $2e2b3208cd32b1af$var$FLOAT_EOF) return stream.writeUInt8($2e2b3208cd32b1af$var$FLOAT_EOF << 4);\n        } else if (-107 <= val && val <= 107) return stream.writeUInt8(val + 139);\n        else if (108 <= val && val <= 1131) {\n            val -= 108;\n            stream.writeUInt8((val >> 8) + 247);\n            return stream.writeUInt8(val & 0xff);\n        } else if (-1131 <= val && val <= -108) {\n            val = -val - 108;\n            stream.writeUInt8((val >> 8) + 251);\n            return stream.writeUInt8(val & 0xff);\n        } else if (-32768 <= val && val <= 32767) {\n            stream.writeUInt8(28);\n            return stream.writeInt16BE(val);\n        } else {\n            stream.writeUInt8(29);\n            return stream.writeInt32BE(val);\n        }\n    }\n}\nclass $1694c4b242cd1a66$export$2e2bcd8739ae039 {\n    constructor(ops = []){\n        this.ops = ops;\n        this.fields = {};\n        for (let field of ops){\n            let key = Array.isArray(field[0]) ? field[0][0] << 8 | field[0][1] : field[0];\n            this.fields[key] = field;\n        }\n    }\n    decodeOperands(type, stream, ret, operands) {\n        if (Array.isArray(type)) return operands.map((op, i)=>this.decodeOperands(type[i], stream, ret, [\n                op\n            ]));\n        else if (type.decode != null) return type.decode(stream, ret, operands);\n        else switch(type){\n            case \"number\":\n            case \"offset\":\n            case \"sid\":\n                return operands[0];\n            case \"boolean\":\n                return !!operands[0];\n            default:\n                return operands;\n        }\n    }\n    encodeOperands(type, stream, ctx, operands) {\n        if (Array.isArray(type)) return operands.map((op, i)=>this.encodeOperands(type[i], stream, ctx, op)[0]);\n        else if (type.encode != null) return type.encode(stream, operands, ctx);\n        else if (typeof operands === \"number\") return [\n            operands\n        ];\n        else if (typeof operands === \"boolean\") return [\n            +operands\n        ];\n        else if (Array.isArray(operands)) return operands;\n        else return [\n            operands\n        ];\n    }\n    decode(stream, parent) {\n        let end = stream.pos + parent.length;\n        let ret = {};\n        let operands = [];\n        // define hidden properties\n        Object.defineProperties(ret, {\n            parent: {\n                value: parent\n            },\n            _startOffset: {\n                value: stream.pos\n            }\n        });\n        // fill in defaults\n        for(let key in this.fields){\n            let field = this.fields[key];\n            ret[field[1]] = field[3];\n        }\n        while(stream.pos < end){\n            let b = stream.readUInt8();\n            if (b < 28) {\n                if (b === 12) b = b << 8 | stream.readUInt8();\n                let field = this.fields[b];\n                if (!field) throw new Error(`Unknown operator ${b}`);\n                let val = this.decodeOperands(field[2], stream, ret, operands);\n                if (val != null) {\n                    if (val instanceof restructure_src_utils_js__WEBPACK_IMPORTED_MODULE_3__.PropertyDescriptor) Object.defineProperty(ret, field[1], val);\n                    else ret[field[1]] = val;\n                }\n                operands = [];\n            } else operands.push($2e2b3208cd32b1af$export$2e2bcd8739ae039.decode(stream, b));\n        }\n        return ret;\n    }\n    size(dict, parent, includePointers = true) {\n        let ctx = {\n            parent: parent,\n            val: dict,\n            pointerSize: 0,\n            startOffset: parent.startOffset || 0\n        };\n        let len = 0;\n        for(let k in this.fields){\n            let field = this.fields[k];\n            let val = dict[field[1]];\n            if (val == null || deep_equal__WEBPACK_IMPORTED_MODULE_4__(val, field[3])) continue;\n            let operands = this.encodeOperands(field[2], null, ctx, val);\n            for (let op of operands)len += $2e2b3208cd32b1af$export$2e2bcd8739ae039.size(op);\n            let key = Array.isArray(field[0]) ? field[0] : [\n                field[0]\n            ];\n            len += key.length;\n        }\n        if (includePointers) len += ctx.pointerSize;\n        return len;\n    }\n    encode(stream, dict, parent) {\n        let ctx = {\n            pointers: [],\n            startOffset: stream.pos,\n            parent: parent,\n            val: dict,\n            pointerSize: 0\n        };\n        ctx.pointerOffset = stream.pos + this.size(dict, ctx, false);\n        for (let field of this.ops){\n            let val = dict[field[1]];\n            if (val == null || deep_equal__WEBPACK_IMPORTED_MODULE_4__(val, field[3])) continue;\n            let operands = this.encodeOperands(field[2], stream, ctx, val);\n            for (let op of operands)$2e2b3208cd32b1af$export$2e2bcd8739ae039.encode(stream, op);\n            let key = Array.isArray(field[0]) ? field[0] : [\n                field[0]\n            ];\n            for (let op1 of key)stream.writeUInt8(op1);\n        }\n        let i = 0;\n        while(i < ctx.pointers.length){\n            let ptr = ctx.pointers[i++];\n            ptr.type.encode(stream, ptr.val, ptr.parent);\n        }\n        return;\n    }\n}\nclass $6631a7581d654814$export$2e2bcd8739ae039 extends restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer {\n    constructor(type, options = {}){\n        if (options.type == null) options.type = \"global\";\n        super(null, type, options);\n    }\n    decode(stream, parent, operands) {\n        this.offsetType = {\n            decode: ()=>operands[0]\n        };\n        return super.decode(stream, parent, operands);\n    }\n    encode(stream, value, ctx) {\n        if (!stream) {\n            // compute the size (so ctx.pointerSize is correct)\n            this.offsetType = {\n                size: ()=>0\n            };\n            this.size(value, ctx);\n            return [\n                new $6631a7581d654814$var$Ptr(0)\n            ];\n        }\n        let ptr = null;\n        this.offsetType = {\n            encode: (stream, val)=>ptr = val\n        };\n        super.encode(stream, value, ctx);\n        return [\n            new $6631a7581d654814$var$Ptr(ptr)\n        ];\n    }\n}\nclass $6631a7581d654814$var$Ptr {\n    constructor(val){\n        this.val = val;\n        this.forceLarge = true;\n    }\n    valueOf() {\n        return this.val;\n    }\n}\nclass $94c2c7ed7c236891$var$CFFBlendOp {\n    static decode(stream, parent, operands) {\n        let numBlends = operands.pop();\n        // TODO: actually blend. For now just consume the deltas\n        // since we don't use any of the values anyway.\n        while(operands.length > numBlends)operands.pop();\n    }\n}\nvar $94c2c7ed7c236891$export$2e2bcd8739ae039 = new $1694c4b242cd1a66$export$2e2bcd8739ae039([\n    // key       name                    type                                          default\n    [\n        6,\n        \"BlueValues\",\n        \"delta\",\n        null\n    ],\n    [\n        7,\n        \"OtherBlues\",\n        \"delta\",\n        null\n    ],\n    [\n        8,\n        \"FamilyBlues\",\n        \"delta\",\n        null\n    ],\n    [\n        9,\n        \"FamilyOtherBlues\",\n        \"delta\",\n        null\n    ],\n    [\n        [\n            12,\n            9\n        ],\n        \"BlueScale\",\n        \"number\",\n        0.039625\n    ],\n    [\n        [\n            12,\n            10\n        ],\n        \"BlueShift\",\n        \"number\",\n        7\n    ],\n    [\n        [\n            12,\n            11\n        ],\n        \"BlueFuzz\",\n        \"number\",\n        1\n    ],\n    [\n        10,\n        \"StdHW\",\n        \"number\",\n        null\n    ],\n    [\n        11,\n        \"StdVW\",\n        \"number\",\n        null\n    ],\n    [\n        [\n            12,\n            12\n        ],\n        \"StemSnapH\",\n        \"delta\",\n        null\n    ],\n    [\n        [\n            12,\n            13\n        ],\n        \"StemSnapV\",\n        \"delta\",\n        null\n    ],\n    [\n        [\n            12,\n            14\n        ],\n        \"ForceBold\",\n        \"boolean\",\n        false\n    ],\n    [\n        [\n            12,\n            17\n        ],\n        \"LanguageGroup\",\n        \"number\",\n        0\n    ],\n    [\n        [\n            12,\n            18\n        ],\n        \"ExpansionFactor\",\n        \"number\",\n        0.06\n    ],\n    [\n        [\n            12,\n            19\n        ],\n        \"initialRandomSeed\",\n        \"number\",\n        0\n    ],\n    [\n        20,\n        \"defaultWidthX\",\n        \"number\",\n        0\n    ],\n    [\n        21,\n        \"nominalWidthX\",\n        \"number\",\n        0\n    ],\n    [\n        22,\n        \"vsindex\",\n        \"number\",\n        0\n    ],\n    [\n        23,\n        \"blend\",\n        $94c2c7ed7c236891$var$CFFBlendOp,\n        null\n    ],\n    [\n        19,\n        \"Subrs\",\n        new $6631a7581d654814$export$2e2bcd8739ae039(new $6333f51d822e64a1$export$2e2bcd8739ae039, {\n            type: \"local\"\n        }),\n        null\n    ]\n]);\nvar // not edit. Length should be 391.\n$276d3ff37a4362c9$export$2e2bcd8739ae039 = [\n    \".notdef\",\n    \"space\",\n    \"exclam\",\n    \"quotedbl\",\n    \"numbersign\",\n    \"dollar\",\n    \"percent\",\n    \"ampersand\",\n    \"quoteright\",\n    \"parenleft\",\n    \"parenright\",\n    \"asterisk\",\n    \"plus\",\n    \"comma\",\n    \"hyphen\",\n    \"period\",\n    \"slash\",\n    \"zero\",\n    \"one\",\n    \"two\",\n    \"three\",\n    \"four\",\n    \"five\",\n    \"six\",\n    \"seven\",\n    \"eight\",\n    \"nine\",\n    \"colon\",\n    \"semicolon\",\n    \"less\",\n    \"equal\",\n    \"greater\",\n    \"question\",\n    \"at\",\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\",\n    \"E\",\n    \"F\",\n    \"G\",\n    \"H\",\n    \"I\",\n    \"J\",\n    \"K\",\n    \"L\",\n    \"M\",\n    \"N\",\n    \"O\",\n    \"P\",\n    \"Q\",\n    \"R\",\n    \"S\",\n    \"T\",\n    \"U\",\n    \"V\",\n    \"W\",\n    \"X\",\n    \"Y\",\n    \"Z\",\n    \"bracketleft\",\n    \"backslash\",\n    \"bracketright\",\n    \"asciicircum\",\n    \"underscore\",\n    \"quoteleft\",\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\",\n    \"h\",\n    \"i\",\n    \"j\",\n    \"k\",\n    \"l\",\n    \"m\",\n    \"n\",\n    \"o\",\n    \"p\",\n    \"q\",\n    \"r\",\n    \"s\",\n    \"t\",\n    \"u\",\n    \"v\",\n    \"w\",\n    \"x\",\n    \"y\",\n    \"z\",\n    \"braceleft\",\n    \"bar\",\n    \"braceright\",\n    \"asciitilde\",\n    \"exclamdown\",\n    \"cent\",\n    \"sterling\",\n    \"fraction\",\n    \"yen\",\n    \"florin\",\n    \"section\",\n    \"currency\",\n    \"quotesingle\",\n    \"quotedblleft\",\n    \"guillemotleft\",\n    \"guilsinglleft\",\n    \"guilsinglright\",\n    \"fi\",\n    \"fl\",\n    \"endash\",\n    \"dagger\",\n    \"daggerdbl\",\n    \"periodcentered\",\n    \"paragraph\",\n    \"bullet\",\n    \"quotesinglbase\",\n    \"quotedblbase\",\n    \"quotedblright\",\n    \"guillemotright\",\n    \"ellipsis\",\n    \"perthousand\",\n    \"questiondown\",\n    \"grave\",\n    \"acute\",\n    \"circumflex\",\n    \"tilde\",\n    \"macron\",\n    \"breve\",\n    \"dotaccent\",\n    \"dieresis\",\n    \"ring\",\n    \"cedilla\",\n    \"hungarumlaut\",\n    \"ogonek\",\n    \"caron\",\n    \"emdash\",\n    \"AE\",\n    \"ordfeminine\",\n    \"Lslash\",\n    \"Oslash\",\n    \"OE\",\n    \"ordmasculine\",\n    \"ae\",\n    \"dotlessi\",\n    \"lslash\",\n    \"oslash\",\n    \"oe\",\n    \"germandbls\",\n    \"onesuperior\",\n    \"logicalnot\",\n    \"mu\",\n    \"trademark\",\n    \"Eth\",\n    \"onehalf\",\n    \"plusminus\",\n    \"Thorn\",\n    \"onequarter\",\n    \"divide\",\n    \"brokenbar\",\n    \"degree\",\n    \"thorn\",\n    \"threequarters\",\n    \"twosuperior\",\n    \"registered\",\n    \"minus\",\n    \"eth\",\n    \"multiply\",\n    \"threesuperior\",\n    \"copyright\",\n    \"Aacute\",\n    \"Acircumflex\",\n    \"Adieresis\",\n    \"Agrave\",\n    \"Aring\",\n    \"Atilde\",\n    \"Ccedilla\",\n    \"Eacute\",\n    \"Ecircumflex\",\n    \"Edieresis\",\n    \"Egrave\",\n    \"Iacute\",\n    \"Icircumflex\",\n    \"Idieresis\",\n    \"Igrave\",\n    \"Ntilde\",\n    \"Oacute\",\n    \"Ocircumflex\",\n    \"Odieresis\",\n    \"Ograve\",\n    \"Otilde\",\n    \"Scaron\",\n    \"Uacute\",\n    \"Ucircumflex\",\n    \"Udieresis\",\n    \"Ugrave\",\n    \"Yacute\",\n    \"Ydieresis\",\n    \"Zcaron\",\n    \"aacute\",\n    \"acircumflex\",\n    \"adieresis\",\n    \"agrave\",\n    \"aring\",\n    \"atilde\",\n    \"ccedilla\",\n    \"eacute\",\n    \"ecircumflex\",\n    \"edieresis\",\n    \"egrave\",\n    \"iacute\",\n    \"icircumflex\",\n    \"idieresis\",\n    \"igrave\",\n    \"ntilde\",\n    \"oacute\",\n    \"ocircumflex\",\n    \"odieresis\",\n    \"ograve\",\n    \"otilde\",\n    \"scaron\",\n    \"uacute\",\n    \"ucircumflex\",\n    \"udieresis\",\n    \"ugrave\",\n    \"yacute\",\n    \"ydieresis\",\n    \"zcaron\",\n    \"exclamsmall\",\n    \"Hungarumlautsmall\",\n    \"dollaroldstyle\",\n    \"dollarsuperior\",\n    \"ampersandsmall\",\n    \"Acutesmall\",\n    \"parenleftsuperior\",\n    \"parenrightsuperior\",\n    \"twodotenleader\",\n    \"onedotenleader\",\n    \"zerooldstyle\",\n    \"oneoldstyle\",\n    \"twooldstyle\",\n    \"threeoldstyle\",\n    \"fouroldstyle\",\n    \"fiveoldstyle\",\n    \"sixoldstyle\",\n    \"sevenoldstyle\",\n    \"eightoldstyle\",\n    \"nineoldstyle\",\n    \"commasuperior\",\n    \"threequartersemdash\",\n    \"periodsuperior\",\n    \"questionsmall\",\n    \"asuperior\",\n    \"bsuperior\",\n    \"centsuperior\",\n    \"dsuperior\",\n    \"esuperior\",\n    \"isuperior\",\n    \"lsuperior\",\n    \"msuperior\",\n    \"nsuperior\",\n    \"osuperior\",\n    \"rsuperior\",\n    \"ssuperior\",\n    \"tsuperior\",\n    \"ff\",\n    \"ffi\",\n    \"ffl\",\n    \"parenleftinferior\",\n    \"parenrightinferior\",\n    \"Circumflexsmall\",\n    \"hyphensuperior\",\n    \"Gravesmall\",\n    \"Asmall\",\n    \"Bsmall\",\n    \"Csmall\",\n    \"Dsmall\",\n    \"Esmall\",\n    \"Fsmall\",\n    \"Gsmall\",\n    \"Hsmall\",\n    \"Ismall\",\n    \"Jsmall\",\n    \"Ksmall\",\n    \"Lsmall\",\n    \"Msmall\",\n    \"Nsmall\",\n    \"Osmall\",\n    \"Psmall\",\n    \"Qsmall\",\n    \"Rsmall\",\n    \"Ssmall\",\n    \"Tsmall\",\n    \"Usmall\",\n    \"Vsmall\",\n    \"Wsmall\",\n    \"Xsmall\",\n    \"Ysmall\",\n    \"Zsmall\",\n    \"colonmonetary\",\n    \"onefitted\",\n    \"rupiah\",\n    \"Tildesmall\",\n    \"exclamdownsmall\",\n    \"centoldstyle\",\n    \"Lslashsmall\",\n    \"Scaronsmall\",\n    \"Zcaronsmall\",\n    \"Dieresissmall\",\n    \"Brevesmall\",\n    \"Caronsmall\",\n    \"Dotaccentsmall\",\n    \"Macronsmall\",\n    \"figuredash\",\n    \"hypheninferior\",\n    \"Ogoneksmall\",\n    \"Ringsmall\",\n    \"Cedillasmall\",\n    \"questiondownsmall\",\n    \"oneeighth\",\n    \"threeeighths\",\n    \"fiveeighths\",\n    \"seveneighths\",\n    \"onethird\",\n    \"twothirds\",\n    \"zerosuperior\",\n    \"foursuperior\",\n    \"fivesuperior\",\n    \"sixsuperior\",\n    \"sevensuperior\",\n    \"eightsuperior\",\n    \"ninesuperior\",\n    \"zeroinferior\",\n    \"oneinferior\",\n    \"twoinferior\",\n    \"threeinferior\",\n    \"fourinferior\",\n    \"fiveinferior\",\n    \"sixinferior\",\n    \"seveninferior\",\n    \"eightinferior\",\n    \"nineinferior\",\n    \"centinferior\",\n    \"dollarinferior\",\n    \"periodinferior\",\n    \"commainferior\",\n    \"Agravesmall\",\n    \"Aacutesmall\",\n    \"Acircumflexsmall\",\n    \"Atildesmall\",\n    \"Adieresissmall\",\n    \"Aringsmall\",\n    \"AEsmall\",\n    \"Ccedillasmall\",\n    \"Egravesmall\",\n    \"Eacutesmall\",\n    \"Ecircumflexsmall\",\n    \"Edieresissmall\",\n    \"Igravesmall\",\n    \"Iacutesmall\",\n    \"Icircumflexsmall\",\n    \"Idieresissmall\",\n    \"Ethsmall\",\n    \"Ntildesmall\",\n    \"Ogravesmall\",\n    \"Oacutesmall\",\n    \"Ocircumflexsmall\",\n    \"Otildesmall\",\n    \"Odieresissmall\",\n    \"OEsmall\",\n    \"Oslashsmall\",\n    \"Ugravesmall\",\n    \"Uacutesmall\",\n    \"Ucircumflexsmall\",\n    \"Udieresissmall\",\n    \"Yacutesmall\",\n    \"Thornsmall\",\n    \"Ydieresissmall\",\n    \"001.000\",\n    \"001.001\",\n    \"001.002\",\n    \"001.003\",\n    \"Black\",\n    \"Bold\",\n    \"Book\",\n    \"Light\",\n    \"Medium\",\n    \"Regular\",\n    \"Roman\",\n    \"Semibold\"\n];\nlet $50148a3b88f16e26$export$dee0027060fa13bd = [\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"space\",\n    \"exclam\",\n    \"quotedbl\",\n    \"numbersign\",\n    \"dollar\",\n    \"percent\",\n    \"ampersand\",\n    \"quoteright\",\n    \"parenleft\",\n    \"parenright\",\n    \"asterisk\",\n    \"plus\",\n    \"comma\",\n    \"hyphen\",\n    \"period\",\n    \"slash\",\n    \"zero\",\n    \"one\",\n    \"two\",\n    \"three\",\n    \"four\",\n    \"five\",\n    \"six\",\n    \"seven\",\n    \"eight\",\n    \"nine\",\n    \"colon\",\n    \"semicolon\",\n    \"less\",\n    \"equal\",\n    \"greater\",\n    \"question\",\n    \"at\",\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\",\n    \"E\",\n    \"F\",\n    \"G\",\n    \"H\",\n    \"I\",\n    \"J\",\n    \"K\",\n    \"L\",\n    \"M\",\n    \"N\",\n    \"O\",\n    \"P\",\n    \"Q\",\n    \"R\",\n    \"S\",\n    \"T\",\n    \"U\",\n    \"V\",\n    \"W\",\n    \"X\",\n    \"Y\",\n    \"Z\",\n    \"bracketleft\",\n    \"backslash\",\n    \"bracketright\",\n    \"asciicircum\",\n    \"underscore\",\n    \"quoteleft\",\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\",\n    \"h\",\n    \"i\",\n    \"j\",\n    \"k\",\n    \"l\",\n    \"m\",\n    \"n\",\n    \"o\",\n    \"p\",\n    \"q\",\n    \"r\",\n    \"s\",\n    \"t\",\n    \"u\",\n    \"v\",\n    \"w\",\n    \"x\",\n    \"y\",\n    \"z\",\n    \"braceleft\",\n    \"bar\",\n    \"braceright\",\n    \"asciitilde\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"exclamdown\",\n    \"cent\",\n    \"sterling\",\n    \"fraction\",\n    \"yen\",\n    \"florin\",\n    \"section\",\n    \"currency\",\n    \"quotesingle\",\n    \"quotedblleft\",\n    \"guillemotleft\",\n    \"guilsinglleft\",\n    \"guilsinglright\",\n    \"fi\",\n    \"fl\",\n    \"\",\n    \"endash\",\n    \"dagger\",\n    \"daggerdbl\",\n    \"periodcentered\",\n    \"\",\n    \"paragraph\",\n    \"bullet\",\n    \"quotesinglbase\",\n    \"quotedblbase\",\n    \"quotedblright\",\n    \"guillemotright\",\n    \"ellipsis\",\n    \"perthousand\",\n    \"\",\n    \"questiondown\",\n    \"\",\n    \"grave\",\n    \"acute\",\n    \"circumflex\",\n    \"tilde\",\n    \"macron\",\n    \"breve\",\n    \"dotaccent\",\n    \"dieresis\",\n    \"\",\n    \"ring\",\n    \"cedilla\",\n    \"\",\n    \"hungarumlaut\",\n    \"ogonek\",\n    \"caron\",\n    \"emdash\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"AE\",\n    \"\",\n    \"ordfeminine\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"Lslash\",\n    \"Oslash\",\n    \"OE\",\n    \"ordmasculine\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"ae\",\n    \"\",\n    \"\",\n    \"\",\n    \"dotlessi\",\n    \"\",\n    \"\",\n    \"lslash\",\n    \"oslash\",\n    \"oe\",\n    \"germandbls\"\n];\nlet $50148a3b88f16e26$export$4f58f497e14a53c3 = [\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"space\",\n    \"exclamsmall\",\n    \"Hungarumlautsmall\",\n    \"\",\n    \"dollaroldstyle\",\n    \"dollarsuperior\",\n    \"ampersandsmall\",\n    \"Acutesmall\",\n    \"parenleftsuperior\",\n    \"parenrightsuperior\",\n    \"twodotenleader\",\n    \"onedotenleader\",\n    \"comma\",\n    \"hyphen\",\n    \"period\",\n    \"fraction\",\n    \"zerooldstyle\",\n    \"oneoldstyle\",\n    \"twooldstyle\",\n    \"threeoldstyle\",\n    \"fouroldstyle\",\n    \"fiveoldstyle\",\n    \"sixoldstyle\",\n    \"sevenoldstyle\",\n    \"eightoldstyle\",\n    \"nineoldstyle\",\n    \"colon\",\n    \"semicolon\",\n    \"commasuperior\",\n    \"threequartersemdash\",\n    \"periodsuperior\",\n    \"questionsmall\",\n    \"\",\n    \"asuperior\",\n    \"bsuperior\",\n    \"centsuperior\",\n    \"dsuperior\",\n    \"esuperior\",\n    \"\",\n    \"\",\n    \"isuperior\",\n    \"\",\n    \"\",\n    \"lsuperior\",\n    \"msuperior\",\n    \"nsuperior\",\n    \"osuperior\",\n    \"\",\n    \"\",\n    \"rsuperior\",\n    \"ssuperior\",\n    \"tsuperior\",\n    \"\",\n    \"ff\",\n    \"fi\",\n    \"fl\",\n    \"ffi\",\n    \"ffl\",\n    \"parenleftinferior\",\n    \"\",\n    \"parenrightinferior\",\n    \"Circumflexsmall\",\n    \"hyphensuperior\",\n    \"Gravesmall\",\n    \"Asmall\",\n    \"Bsmall\",\n    \"Csmall\",\n    \"Dsmall\",\n    \"Esmall\",\n    \"Fsmall\",\n    \"Gsmall\",\n    \"Hsmall\",\n    \"Ismall\",\n    \"Jsmall\",\n    \"Ksmall\",\n    \"Lsmall\",\n    \"Msmall\",\n    \"Nsmall\",\n    \"Osmall\",\n    \"Psmall\",\n    \"Qsmall\",\n    \"Rsmall\",\n    \"Ssmall\",\n    \"Tsmall\",\n    \"Usmall\",\n    \"Vsmall\",\n    \"Wsmall\",\n    \"Xsmall\",\n    \"Ysmall\",\n    \"Zsmall\",\n    \"colonmonetary\",\n    \"onefitted\",\n    \"rupiah\",\n    \"Tildesmall\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"exclamdownsmall\",\n    \"centoldstyle\",\n    \"Lslashsmall\",\n    \"\",\n    \"\",\n    \"Scaronsmall\",\n    \"Zcaronsmall\",\n    \"Dieresissmall\",\n    \"Brevesmall\",\n    \"Caronsmall\",\n    \"\",\n    \"Dotaccentsmall\",\n    \"\",\n    \"\",\n    \"Macronsmall\",\n    \"\",\n    \"\",\n    \"figuredash\",\n    \"hypheninferior\",\n    \"\",\n    \"\",\n    \"Ogoneksmall\",\n    \"Ringsmall\",\n    \"Cedillasmall\",\n    \"\",\n    \"\",\n    \"\",\n    \"onequarter\",\n    \"onehalf\",\n    \"threequarters\",\n    \"questiondownsmall\",\n    \"oneeighth\",\n    \"threeeighths\",\n    \"fiveeighths\",\n    \"seveneighths\",\n    \"onethird\",\n    \"twothirds\",\n    \"\",\n    \"\",\n    \"zerosuperior\",\n    \"onesuperior\",\n    \"twosuperior\",\n    \"threesuperior\",\n    \"foursuperior\",\n    \"fivesuperior\",\n    \"sixsuperior\",\n    \"sevensuperior\",\n    \"eightsuperior\",\n    \"ninesuperior\",\n    \"zeroinferior\",\n    \"oneinferior\",\n    \"twoinferior\",\n    \"threeinferior\",\n    \"fourinferior\",\n    \"fiveinferior\",\n    \"sixinferior\",\n    \"seveninferior\",\n    \"eightinferior\",\n    \"nineinferior\",\n    \"centinferior\",\n    \"dollarinferior\",\n    \"periodinferior\",\n    \"commainferior\",\n    \"Agravesmall\",\n    \"Aacutesmall\",\n    \"Acircumflexsmall\",\n    \"Atildesmall\",\n    \"Adieresissmall\",\n    \"Aringsmall\",\n    \"AEsmall\",\n    \"Ccedillasmall\",\n    \"Egravesmall\",\n    \"Eacutesmall\",\n    \"Ecircumflexsmall\",\n    \"Edieresissmall\",\n    \"Igravesmall\",\n    \"Iacutesmall\",\n    \"Icircumflexsmall\",\n    \"Idieresissmall\",\n    \"Ethsmall\",\n    \"Ntildesmall\",\n    \"Ogravesmall\",\n    \"Oacutesmall\",\n    \"Ocircumflexsmall\",\n    \"Otildesmall\",\n    \"Odieresissmall\",\n    \"OEsmall\",\n    \"Oslashsmall\",\n    \"Ugravesmall\",\n    \"Uacutesmall\",\n    \"Ucircumflexsmall\",\n    \"Udieresissmall\",\n    \"Yacutesmall\",\n    \"Thornsmall\",\n    \"Ydieresissmall\"\n];\nlet $a5fab60a6eadb8ed$export$c33b50336c234f16 = [\n    \".notdef\",\n    \"space\",\n    \"exclam\",\n    \"quotedbl\",\n    \"numbersign\",\n    \"dollar\",\n    \"percent\",\n    \"ampersand\",\n    \"quoteright\",\n    \"parenleft\",\n    \"parenright\",\n    \"asterisk\",\n    \"plus\",\n    \"comma\",\n    \"hyphen\",\n    \"period\",\n    \"slash\",\n    \"zero\",\n    \"one\",\n    \"two\",\n    \"three\",\n    \"four\",\n    \"five\",\n    \"six\",\n    \"seven\",\n    \"eight\",\n    \"nine\",\n    \"colon\",\n    \"semicolon\",\n    \"less\",\n    \"equal\",\n    \"greater\",\n    \"question\",\n    \"at\",\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\",\n    \"E\",\n    \"F\",\n    \"G\",\n    \"H\",\n    \"I\",\n    \"J\",\n    \"K\",\n    \"L\",\n    \"M\",\n    \"N\",\n    \"O\",\n    \"P\",\n    \"Q\",\n    \"R\",\n    \"S\",\n    \"T\",\n    \"U\",\n    \"V\",\n    \"W\",\n    \"X\",\n    \"Y\",\n    \"Z\",\n    \"bracketleft\",\n    \"backslash\",\n    \"bracketright\",\n    \"asciicircum\",\n    \"underscore\",\n    \"quoteleft\",\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\",\n    \"h\",\n    \"i\",\n    \"j\",\n    \"k\",\n    \"l\",\n    \"m\",\n    \"n\",\n    \"o\",\n    \"p\",\n    \"q\",\n    \"r\",\n    \"s\",\n    \"t\",\n    \"u\",\n    \"v\",\n    \"w\",\n    \"x\",\n    \"y\",\n    \"z\",\n    \"braceleft\",\n    \"bar\",\n    \"braceright\",\n    \"asciitilde\",\n    \"exclamdown\",\n    \"cent\",\n    \"sterling\",\n    \"fraction\",\n    \"yen\",\n    \"florin\",\n    \"section\",\n    \"currency\",\n    \"quotesingle\",\n    \"quotedblleft\",\n    \"guillemotleft\",\n    \"guilsinglleft\",\n    \"guilsinglright\",\n    \"fi\",\n    \"fl\",\n    \"endash\",\n    \"dagger\",\n    \"daggerdbl\",\n    \"periodcentered\",\n    \"paragraph\",\n    \"bullet\",\n    \"quotesinglbase\",\n    \"quotedblbase\",\n    \"quotedblright\",\n    \"guillemotright\",\n    \"ellipsis\",\n    \"perthousand\",\n    \"questiondown\",\n    \"grave\",\n    \"acute\",\n    \"circumflex\",\n    \"tilde\",\n    \"macron\",\n    \"breve\",\n    \"dotaccent\",\n    \"dieresis\",\n    \"ring\",\n    \"cedilla\",\n    \"hungarumlaut\",\n    \"ogonek\",\n    \"caron\",\n    \"emdash\",\n    \"AE\",\n    \"ordfeminine\",\n    \"Lslash\",\n    \"Oslash\",\n    \"OE\",\n    \"ordmasculine\",\n    \"ae\",\n    \"dotlessi\",\n    \"lslash\",\n    \"oslash\",\n    \"oe\",\n    \"germandbls\",\n    \"onesuperior\",\n    \"logicalnot\",\n    \"mu\",\n    \"trademark\",\n    \"Eth\",\n    \"onehalf\",\n    \"plusminus\",\n    \"Thorn\",\n    \"onequarter\",\n    \"divide\",\n    \"brokenbar\",\n    \"degree\",\n    \"thorn\",\n    \"threequarters\",\n    \"twosuperior\",\n    \"registered\",\n    \"minus\",\n    \"eth\",\n    \"multiply\",\n    \"threesuperior\",\n    \"copyright\",\n    \"Aacute\",\n    \"Acircumflex\",\n    \"Adieresis\",\n    \"Agrave\",\n    \"Aring\",\n    \"Atilde\",\n    \"Ccedilla\",\n    \"Eacute\",\n    \"Ecircumflex\",\n    \"Edieresis\",\n    \"Egrave\",\n    \"Iacute\",\n    \"Icircumflex\",\n    \"Idieresis\",\n    \"Igrave\",\n    \"Ntilde\",\n    \"Oacute\",\n    \"Ocircumflex\",\n    \"Odieresis\",\n    \"Ograve\",\n    \"Otilde\",\n    \"Scaron\",\n    \"Uacute\",\n    \"Ucircumflex\",\n    \"Udieresis\",\n    \"Ugrave\",\n    \"Yacute\",\n    \"Ydieresis\",\n    \"Zcaron\",\n    \"aacute\",\n    \"acircumflex\",\n    \"adieresis\",\n    \"agrave\",\n    \"aring\",\n    \"atilde\",\n    \"ccedilla\",\n    \"eacute\",\n    \"ecircumflex\",\n    \"edieresis\",\n    \"egrave\",\n    \"iacute\",\n    \"icircumflex\",\n    \"idieresis\",\n    \"igrave\",\n    \"ntilde\",\n    \"oacute\",\n    \"ocircumflex\",\n    \"odieresis\",\n    \"ograve\",\n    \"otilde\",\n    \"scaron\",\n    \"uacute\",\n    \"ucircumflex\",\n    \"udieresis\",\n    \"ugrave\",\n    \"yacute\",\n    \"ydieresis\",\n    \"zcaron\"\n];\nlet $a5fab60a6eadb8ed$export$3ed0f9e1fee8d489 = [\n    \".notdef\",\n    \"space\",\n    \"exclamsmall\",\n    \"Hungarumlautsmall\",\n    \"dollaroldstyle\",\n    \"dollarsuperior\",\n    \"ampersandsmall\",\n    \"Acutesmall\",\n    \"parenleftsuperior\",\n    \"parenrightsuperior\",\n    \"twodotenleader\",\n    \"onedotenleader\",\n    \"comma\",\n    \"hyphen\",\n    \"period\",\n    \"fraction\",\n    \"zerooldstyle\",\n    \"oneoldstyle\",\n    \"twooldstyle\",\n    \"threeoldstyle\",\n    \"fouroldstyle\",\n    \"fiveoldstyle\",\n    \"sixoldstyle\",\n    \"sevenoldstyle\",\n    \"eightoldstyle\",\n    \"nineoldstyle\",\n    \"colon\",\n    \"semicolon\",\n    \"commasuperior\",\n    \"threequartersemdash\",\n    \"periodsuperior\",\n    \"questionsmall\",\n    \"asuperior\",\n    \"bsuperior\",\n    \"centsuperior\",\n    \"dsuperior\",\n    \"esuperior\",\n    \"isuperior\",\n    \"lsuperior\",\n    \"msuperior\",\n    \"nsuperior\",\n    \"osuperior\",\n    \"rsuperior\",\n    \"ssuperior\",\n    \"tsuperior\",\n    \"ff\",\n    \"fi\",\n    \"fl\",\n    \"ffi\",\n    \"ffl\",\n    \"parenleftinferior\",\n    \"parenrightinferior\",\n    \"Circumflexsmall\",\n    \"hyphensuperior\",\n    \"Gravesmall\",\n    \"Asmall\",\n    \"Bsmall\",\n    \"Csmall\",\n    \"Dsmall\",\n    \"Esmall\",\n    \"Fsmall\",\n    \"Gsmall\",\n    \"Hsmall\",\n    \"Ismall\",\n    \"Jsmall\",\n    \"Ksmall\",\n    \"Lsmall\",\n    \"Msmall\",\n    \"Nsmall\",\n    \"Osmall\",\n    \"Psmall\",\n    \"Qsmall\",\n    \"Rsmall\",\n    \"Ssmall\",\n    \"Tsmall\",\n    \"Usmall\",\n    \"Vsmall\",\n    \"Wsmall\",\n    \"Xsmall\",\n    \"Ysmall\",\n    \"Zsmall\",\n    \"colonmonetary\",\n    \"onefitted\",\n    \"rupiah\",\n    \"Tildesmall\",\n    \"exclamdownsmall\",\n    \"centoldstyle\",\n    \"Lslashsmall\",\n    \"Scaronsmall\",\n    \"Zcaronsmall\",\n    \"Dieresissmall\",\n    \"Brevesmall\",\n    \"Caronsmall\",\n    \"Dotaccentsmall\",\n    \"Macronsmall\",\n    \"figuredash\",\n    \"hypheninferior\",\n    \"Ogoneksmall\",\n    \"Ringsmall\",\n    \"Cedillasmall\",\n    \"onequarter\",\n    \"onehalf\",\n    \"threequarters\",\n    \"questiondownsmall\",\n    \"oneeighth\",\n    \"threeeighths\",\n    \"fiveeighths\",\n    \"seveneighths\",\n    \"onethird\",\n    \"twothirds\",\n    \"zerosuperior\",\n    \"onesuperior\",\n    \"twosuperior\",\n    \"threesuperior\",\n    \"foursuperior\",\n    \"fivesuperior\",\n    \"sixsuperior\",\n    \"sevensuperior\",\n    \"eightsuperior\",\n    \"ninesuperior\",\n    \"zeroinferior\",\n    \"oneinferior\",\n    \"twoinferior\",\n    \"threeinferior\",\n    \"fourinferior\",\n    \"fiveinferior\",\n    \"sixinferior\",\n    \"seveninferior\",\n    \"eightinferior\",\n    \"nineinferior\",\n    \"centinferior\",\n    \"dollarinferior\",\n    \"periodinferior\",\n    \"commainferior\",\n    \"Agravesmall\",\n    \"Aacutesmall\",\n    \"Acircumflexsmall\",\n    \"Atildesmall\",\n    \"Adieresissmall\",\n    \"Aringsmall\",\n    \"AEsmall\",\n    \"Ccedillasmall\",\n    \"Egravesmall\",\n    \"Eacutesmall\",\n    \"Ecircumflexsmall\",\n    \"Edieresissmall\",\n    \"Igravesmall\",\n    \"Iacutesmall\",\n    \"Icircumflexsmall\",\n    \"Idieresissmall\",\n    \"Ethsmall\",\n    \"Ntildesmall\",\n    \"Ogravesmall\",\n    \"Oacutesmall\",\n    \"Ocircumflexsmall\",\n    \"Otildesmall\",\n    \"Odieresissmall\",\n    \"OEsmall\",\n    \"Oslashsmall\",\n    \"Ugravesmall\",\n    \"Uacutesmall\",\n    \"Ucircumflexsmall\",\n    \"Udieresissmall\",\n    \"Yacutesmall\",\n    \"Thornsmall\",\n    \"Ydieresissmall\"\n];\nlet $a5fab60a6eadb8ed$export$dc28be11139d4120 = [\n    \".notdef\",\n    \"space\",\n    \"dollaroldstyle\",\n    \"dollarsuperior\",\n    \"parenleftsuperior\",\n    \"parenrightsuperior\",\n    \"twodotenleader\",\n    \"onedotenleader\",\n    \"comma\",\n    \"hyphen\",\n    \"period\",\n    \"fraction\",\n    \"zerooldstyle\",\n    \"oneoldstyle\",\n    \"twooldstyle\",\n    \"threeoldstyle\",\n    \"fouroldstyle\",\n    \"fiveoldstyle\",\n    \"sixoldstyle\",\n    \"sevenoldstyle\",\n    \"eightoldstyle\",\n    \"nineoldstyle\",\n    \"colon\",\n    \"semicolon\",\n    \"commasuperior\",\n    \"threequartersemdash\",\n    \"periodsuperior\",\n    \"asuperior\",\n    \"bsuperior\",\n    \"centsuperior\",\n    \"dsuperior\",\n    \"esuperior\",\n    \"isuperior\",\n    \"lsuperior\",\n    \"msuperior\",\n    \"nsuperior\",\n    \"osuperior\",\n    \"rsuperior\",\n    \"ssuperior\",\n    \"tsuperior\",\n    \"ff\",\n    \"fi\",\n    \"fl\",\n    \"ffi\",\n    \"ffl\",\n    \"parenleftinferior\",\n    \"parenrightinferior\",\n    \"hyphensuperior\",\n    \"colonmonetary\",\n    \"onefitted\",\n    \"rupiah\",\n    \"centoldstyle\",\n    \"figuredash\",\n    \"hypheninferior\",\n    \"onequarter\",\n    \"onehalf\",\n    \"threequarters\",\n    \"oneeighth\",\n    \"threeeighths\",\n    \"fiveeighths\",\n    \"seveneighths\",\n    \"onethird\",\n    \"twothirds\",\n    \"zerosuperior\",\n    \"onesuperior\",\n    \"twosuperior\",\n    \"threesuperior\",\n    \"foursuperior\",\n    \"fivesuperior\",\n    \"sixsuperior\",\n    \"sevensuperior\",\n    \"eightsuperior\",\n    \"ninesuperior\",\n    \"zeroinferior\",\n    \"oneinferior\",\n    \"twoinferior\",\n    \"threeinferior\",\n    \"fourinferior\",\n    \"fiveinferior\",\n    \"sixinferior\",\n    \"seveninferior\",\n    \"eightinferior\",\n    \"nineinferior\",\n    \"centinferior\",\n    \"dollarinferior\",\n    \"periodinferior\",\n    \"commainferior\"\n];\n//########################\n// Scripts and Languages #\n//########################\nlet $401800e36a580e62$var$LangSysTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16),\n    reqFeatureIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    featureCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    featureIndexes: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"featureCount\")\n});\nlet $401800e36a580e62$var$LangSysRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    langSys: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$var$LangSysTable, {\n        type: \"parent\"\n    })\n});\nlet $401800e36a580e62$var$Script = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    defaultLangSys: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$var$LangSysTable),\n    count: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    langSysRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($401800e36a580e62$var$LangSysRecord, \"count\")\n});\nlet $401800e36a580e62$var$ScriptRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    script: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$var$Script, {\n        type: \"parent\"\n    })\n});\nlet $401800e36a580e62$export$3e15fc05ce864229 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($401800e36a580e62$var$ScriptRecord, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\n//#######################\n// Features and Lookups #\n//#######################\nlet $401800e36a580e62$var$FeatureParams = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    nameID: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n});\nlet $401800e36a580e62$export$6e91cf7616333d5 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    featureParams: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$var$FeatureParams),\n    lookupCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    lookupListIndexes: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"lookupCount\")\n});\nlet $401800e36a580e62$var$FeatureRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    feature: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$6e91cf7616333d5, {\n        type: \"parent\"\n    })\n});\nlet $401800e36a580e62$export$aa18130def4b6cb4 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($401800e36a580e62$var$FeatureRecord, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $401800e36a580e62$var$LookupFlags = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    markAttachmentType: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    flags: new restructure__WEBPACK_IMPORTED_MODULE_0__.Bitfield(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, [\n        \"rightToLeft\",\n        \"ignoreBaseGlyphs\",\n        \"ignoreLigatures\",\n        \"ignoreMarks\",\n        \"useMarkFilteringSet\"\n    ])\n});\nfunction $401800e36a580e62$export$df0008c6ff2da22a(SubTable) {\n    let Lookup = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n        lookupType: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        flags: $401800e36a580e62$var$LookupFlags,\n        subTableCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        subTables: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, SubTable), \"subTableCount\"),\n        markFilteringSet: new restructure__WEBPACK_IMPORTED_MODULE_0__.Optional(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (t)=>t.flags.flags.useMarkFilteringSet)\n    });\n    return new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, Lookup), restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\n}\n//#################\n// Coverage Table #\n//#################\nlet $401800e36a580e62$var$RangeRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    start: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    end: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    startCoverageIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n});\nlet $401800e36a580e62$export$17608c3f81a6111 = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    1: {\n        glyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        glyphs: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"glyphCount\")\n    },\n    2: {\n        rangeCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        rangeRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($401800e36a580e62$var$RangeRecord, \"rangeCount\")\n    }\n});\n//#########################\n// Class Definition Table #\n//#########################\nlet $401800e36a580e62$var$ClassRangeRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    start: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    end: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    class: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n});\nlet $401800e36a580e62$export$843d551fbbafef71 = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    1: {\n        startGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        glyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        classValueArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"glyphCount\")\n    },\n    2: {\n        classRangeCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        classRangeRecord: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($401800e36a580e62$var$ClassRangeRecord, \"classRangeCount\")\n    }\n});\nlet $401800e36a580e62$export$8215d14a63d9fb10 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    a: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    b: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    deltaFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n});\n//#############################################\n// Contextual Substitution/Positioning Tables #\n//#############################################\nlet $401800e36a580e62$var$LookupRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    sequenceIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    lookupListIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n});\nlet $401800e36a580e62$var$Rule = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    glyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    lookupCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    input: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (t)=>t.glyphCount - 1),\n    lookupRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($401800e36a580e62$var$LookupRecord, \"lookupCount\")\n});\nlet $401800e36a580e62$var$RuleSet = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$var$Rule), restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $401800e36a580e62$var$ClassRule = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    glyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    lookupCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    classes: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (t)=>t.glyphCount - 1),\n    lookupRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($401800e36a580e62$var$LookupRecord, \"lookupCount\")\n});\nlet $401800e36a580e62$var$ClassSet = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$var$ClassRule), restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $401800e36a580e62$export$841858b892ce1f4c = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    1: {\n        coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$17608c3f81a6111),\n        ruleSetCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        ruleSets: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$var$RuleSet), \"ruleSetCount\")\n    },\n    2: {\n        coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$17608c3f81a6111),\n        classDef: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$843d551fbbafef71),\n        classSetCnt: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        classSet: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$var$ClassSet), \"classSetCnt\")\n    },\n    3: {\n        glyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        lookupCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        coverages: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$17608c3f81a6111), \"glyphCount\"),\n        lookupRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($401800e36a580e62$var$LookupRecord, \"lookupCount\")\n    }\n});\n//######################################################\n// Chaining Contextual Substitution/Positioning Tables #\n//######################################################\nlet $401800e36a580e62$var$ChainRule = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    backtrackGlyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    backtrack: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"backtrackGlyphCount\"),\n    inputGlyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    input: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (t)=>t.inputGlyphCount - 1),\n    lookaheadGlyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    lookahead: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"lookaheadGlyphCount\"),\n    lookupCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    lookupRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($401800e36a580e62$var$LookupRecord, \"lookupCount\")\n});\nlet $401800e36a580e62$var$ChainRuleSet = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$var$ChainRule), restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $401800e36a580e62$export$5e6d09e6861162f6 = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    1: {\n        coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$17608c3f81a6111),\n        chainCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        chainRuleSets: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$var$ChainRuleSet), \"chainCount\")\n    },\n    2: {\n        coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$17608c3f81a6111),\n        backtrackClassDef: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$843d551fbbafef71),\n        inputClassDef: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$843d551fbbafef71),\n        lookaheadClassDef: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$843d551fbbafef71),\n        chainCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        chainClassSet: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$var$ChainRuleSet), \"chainCount\")\n    },\n    3: {\n        backtrackGlyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        backtrackCoverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$17608c3f81a6111), \"backtrackGlyphCount\"),\n        inputGlyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        inputCoverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$17608c3f81a6111), \"inputGlyphCount\"),\n        lookaheadGlyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        lookaheadCoverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$17608c3f81a6111), \"lookaheadGlyphCount\"),\n        lookupCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        lookupRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($401800e36a580e62$var$LookupRecord, \"lookupCount\")\n    }\n});\n/*******************\n * Variation Store *\n *******************/ let $421a2456cdbaa0d8$var$F2DOT14 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Fixed(16, \"BE\", 14);\nlet $421a2456cdbaa0d8$var$RegionAxisCoordinates = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    startCoord: $421a2456cdbaa0d8$var$F2DOT14,\n    peakCoord: $421a2456cdbaa0d8$var$F2DOT14,\n    endCoord: $421a2456cdbaa0d8$var$F2DOT14\n});\nlet $421a2456cdbaa0d8$var$VariationRegionList = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    axisCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    regionCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    variationRegions: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($421a2456cdbaa0d8$var$RegionAxisCoordinates, \"axisCount\"), \"regionCount\")\n});\nlet $421a2456cdbaa0d8$var$DeltaSet = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    shortDeltas: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.int16, (t)=>t.parent.shortDeltaCount),\n    regionDeltas: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.int8, (t)=>t.parent.regionIndexCount - t.parent.shortDeltaCount),\n    deltas: (t)=>t.shortDeltas.concat(t.regionDeltas)\n});\nlet $421a2456cdbaa0d8$var$ItemVariationData = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    itemCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    shortDeltaCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    regionIndexCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    regionIndexes: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"regionIndexCount\"),\n    deltaSets: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($421a2456cdbaa0d8$var$DeltaSet, \"itemCount\")\n});\nlet $421a2456cdbaa0d8$export$fe1b122a2710f241 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    format: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    variationRegionList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $421a2456cdbaa0d8$var$VariationRegionList),\n    variationDataCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    itemVariationData: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $421a2456cdbaa0d8$var$ItemVariationData), \"variationDataCount\")\n});\n/**********************\n * Feature Variations *\n **********************/ let $421a2456cdbaa0d8$var$ConditionTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    1: {\n        axisIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        axisIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        filterRangeMinValue: $421a2456cdbaa0d8$var$F2DOT14,\n        filterRangeMaxValue: $421a2456cdbaa0d8$var$F2DOT14\n    }\n});\nlet $421a2456cdbaa0d8$var$ConditionSet = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    conditionCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    conditionTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $421a2456cdbaa0d8$var$ConditionTable), \"conditionCount\")\n});\nlet $421a2456cdbaa0d8$var$FeatureTableSubstitutionRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    featureIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    alternateFeatureTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $401800e36a580e62$export$6e91cf7616333d5, {\n        type: \"parent\"\n    })\n});\nlet $421a2456cdbaa0d8$var$FeatureTableSubstitution = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n    substitutionCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    substitutions: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($421a2456cdbaa0d8$var$FeatureTableSubstitutionRecord, \"substitutionCount\")\n});\nlet $421a2456cdbaa0d8$var$FeatureVariationRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    conditionSet: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $421a2456cdbaa0d8$var$ConditionSet, {\n        type: \"parent\"\n    }),\n    featureTableSubstitution: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $421a2456cdbaa0d8$var$FeatureTableSubstitution, {\n        type: \"parent\"\n    })\n});\nlet $421a2456cdbaa0d8$export$441b70b7971dd419 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    majorVersion: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    minorVersion: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    featureVariationRecordCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    featureVariationRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($421a2456cdbaa0d8$var$FeatureVariationRecord, \"featureVariationRecordCount\")\n});\n// Checks if an operand is an index of a predefined value,\n// otherwise delegates to the provided type.\nclass $3e41cd50e8921098$var$PredefinedOp {\n    constructor(predefinedOps, type){\n        this.predefinedOps = predefinedOps;\n        this.type = type;\n    }\n    decode(stream, parent, operands) {\n        if (this.predefinedOps[operands[0]]) return this.predefinedOps[operands[0]];\n        return this.type.decode(stream, parent, operands);\n    }\n    size(value, ctx) {\n        return this.type.size(value, ctx);\n    }\n    encode(stream, value, ctx) {\n        let index = this.predefinedOps.indexOf(value);\n        if (index !== -1) return index;\n        return this.type.encode(stream, value, ctx);\n    }\n}\nclass $3e41cd50e8921098$var$CFFEncodingVersion extends restructure__WEBPACK_IMPORTED_MODULE_0__.Number {\n    constructor(){\n        super(\"UInt8\");\n    }\n    decode(stream) {\n        return restructure__WEBPACK_IMPORTED_MODULE_0__.uint8.decode(stream) & 0x7f;\n    }\n}\nlet $3e41cd50e8921098$var$Range1 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    first: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    nLeft: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8\n});\nlet $3e41cd50e8921098$var$Range2 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    first: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    nLeft: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n});\nlet $3e41cd50e8921098$var$CFFCustomEncoding = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(new $3e41cd50e8921098$var$CFFEncodingVersion(), {\n    0: {\n        nCodes: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n        codes: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, \"nCodes\")\n    },\n    1: {\n        nRanges: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n        ranges: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($3e41cd50e8921098$var$Range1, \"nRanges\")\n    }\n});\nlet $3e41cd50e8921098$var$CFFEncoding = new $3e41cd50e8921098$var$PredefinedOp([\n    $50148a3b88f16e26$export$dee0027060fa13bd,\n    $50148a3b88f16e26$export$4f58f497e14a53c3\n], new $6631a7581d654814$export$2e2bcd8739ae039($3e41cd50e8921098$var$CFFCustomEncoding, {\n    lazy: true\n}));\n// Decodes an array of ranges until the total\n// length is equal to the provided length.\nclass $3e41cd50e8921098$var$RangeArray extends restructure__WEBPACK_IMPORTED_MODULE_0__.Array {\n    decode(stream, parent) {\n        let length = (0,restructure_src_utils_js__WEBPACK_IMPORTED_MODULE_3__.resolveLength)(this.length, stream, parent);\n        let count = 0;\n        let res = [];\n        while(count < length){\n            let range = this.type.decode(stream, parent);\n            range.offset = count;\n            count += range.nLeft + 1;\n            res.push(range);\n        }\n        return res;\n    }\n}\nlet $3e41cd50e8921098$var$CFFCustomCharset = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, {\n    0: {\n        glyphs: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (t)=>t.parent.CharStrings.length - 1)\n    },\n    1: {\n        ranges: new $3e41cd50e8921098$var$RangeArray($3e41cd50e8921098$var$Range1, (t)=>t.parent.CharStrings.length - 1)\n    },\n    2: {\n        ranges: new $3e41cd50e8921098$var$RangeArray($3e41cd50e8921098$var$Range2, (t)=>t.parent.CharStrings.length - 1)\n    }\n});\nlet $3e41cd50e8921098$var$CFFCharset = new $3e41cd50e8921098$var$PredefinedOp([\n    $a5fab60a6eadb8ed$export$c33b50336c234f16,\n    $a5fab60a6eadb8ed$export$3ed0f9e1fee8d489,\n    $a5fab60a6eadb8ed$export$dc28be11139d4120\n], new $6631a7581d654814$export$2e2bcd8739ae039($3e41cd50e8921098$var$CFFCustomCharset, {\n    lazy: true\n}));\nlet $3e41cd50e8921098$var$FDRange3 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    first: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    fd: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8\n});\nlet $3e41cd50e8921098$var$FDRange4 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    first: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    fd: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n});\nlet $3e41cd50e8921098$var$FDSelect = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, {\n    0: {\n        fds: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, (t)=>t.parent.CharStrings.length)\n    },\n    3: {\n        nRanges: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        ranges: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($3e41cd50e8921098$var$FDRange3, \"nRanges\"),\n        sentinel: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n    },\n    4: {\n        nRanges: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        ranges: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($3e41cd50e8921098$var$FDRange4, \"nRanges\"),\n        sentinel: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32\n    }\n});\nlet $3e41cd50e8921098$var$ptr = new $6631a7581d654814$export$2e2bcd8739ae039($94c2c7ed7c236891$export$2e2bcd8739ae039);\nclass $3e41cd50e8921098$var$CFFPrivateOp {\n    decode(stream, parent, operands) {\n        parent.length = operands[0];\n        return $3e41cd50e8921098$var$ptr.decode(stream, parent, [\n            operands[1]\n        ]);\n    }\n    size(dict, ctx) {\n        return [\n            $94c2c7ed7c236891$export$2e2bcd8739ae039.size(dict, ctx, false),\n            $3e41cd50e8921098$var$ptr.size(dict, ctx)[0]\n        ];\n    }\n    encode(stream, dict, ctx) {\n        return [\n            $94c2c7ed7c236891$export$2e2bcd8739ae039.size(dict, ctx, false),\n            $3e41cd50e8921098$var$ptr.encode(stream, dict, ctx)[0]\n        ];\n    }\n}\nlet $3e41cd50e8921098$var$FontDict = new $1694c4b242cd1a66$export$2e2bcd8739ae039([\n    // key       name                   type(s)                                 default\n    [\n        18,\n        \"Private\",\n        new $3e41cd50e8921098$var$CFFPrivateOp,\n        null\n    ],\n    [\n        [\n            12,\n            38\n        ],\n        \"FontName\",\n        \"sid\",\n        null\n    ],\n    [\n        [\n            12,\n            7\n        ],\n        \"FontMatrix\",\n        \"array\",\n        [\n            0.001,\n            0,\n            0,\n            0.001,\n            0,\n            0\n        ]\n    ],\n    [\n        [\n            12,\n            5\n        ],\n        \"PaintType\",\n        \"number\",\n        0\n    ]\n]);\nlet $3e41cd50e8921098$var$CFFTopDict = new $1694c4b242cd1a66$export$2e2bcd8739ae039([\n    // key       name                   type(s)                                 default\n    [\n        [\n            12,\n            30\n        ],\n        \"ROS\",\n        [\n            \"sid\",\n            \"sid\",\n            \"number\"\n        ],\n        null\n    ],\n    [\n        0,\n        \"version\",\n        \"sid\",\n        null\n    ],\n    [\n        1,\n        \"Notice\",\n        \"sid\",\n        null\n    ],\n    [\n        [\n            12,\n            0\n        ],\n        \"Copyright\",\n        \"sid\",\n        null\n    ],\n    [\n        2,\n        \"FullName\",\n        \"sid\",\n        null\n    ],\n    [\n        3,\n        \"FamilyName\",\n        \"sid\",\n        null\n    ],\n    [\n        4,\n        \"Weight\",\n        \"sid\",\n        null\n    ],\n    [\n        [\n            12,\n            1\n        ],\n        \"isFixedPitch\",\n        \"boolean\",\n        false\n    ],\n    [\n        [\n            12,\n            2\n        ],\n        \"ItalicAngle\",\n        \"number\",\n        0\n    ],\n    [\n        [\n            12,\n            3\n        ],\n        \"UnderlinePosition\",\n        \"number\",\n        -100\n    ],\n    [\n        [\n            12,\n            4\n        ],\n        \"UnderlineThickness\",\n        \"number\",\n        50\n    ],\n    [\n        [\n            12,\n            5\n        ],\n        \"PaintType\",\n        \"number\",\n        0\n    ],\n    [\n        [\n            12,\n            6\n        ],\n        \"CharstringType\",\n        \"number\",\n        2\n    ],\n    [\n        [\n            12,\n            7\n        ],\n        \"FontMatrix\",\n        \"array\",\n        [\n            0.001,\n            0,\n            0,\n            0.001,\n            0,\n            0\n        ]\n    ],\n    [\n        13,\n        \"UniqueID\",\n        \"number\",\n        null\n    ],\n    [\n        5,\n        \"FontBBox\",\n        \"array\",\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ],\n    [\n        [\n            12,\n            8\n        ],\n        \"StrokeWidth\",\n        \"number\",\n        0\n    ],\n    [\n        14,\n        \"XUID\",\n        \"array\",\n        null\n    ],\n    [\n        15,\n        \"charset\",\n        $3e41cd50e8921098$var$CFFCharset,\n        $a5fab60a6eadb8ed$export$c33b50336c234f16\n    ],\n    [\n        16,\n        \"Encoding\",\n        $3e41cd50e8921098$var$CFFEncoding,\n        $50148a3b88f16e26$export$dee0027060fa13bd\n    ],\n    [\n        17,\n        \"CharStrings\",\n        new $6631a7581d654814$export$2e2bcd8739ae039(new $6333f51d822e64a1$export$2e2bcd8739ae039),\n        null\n    ],\n    [\n        18,\n        \"Private\",\n        new $3e41cd50e8921098$var$CFFPrivateOp,\n        null\n    ],\n    [\n        [\n            12,\n            20\n        ],\n        \"SyntheticBase\",\n        \"number\",\n        null\n    ],\n    [\n        [\n            12,\n            21\n        ],\n        \"PostScript\",\n        \"sid\",\n        null\n    ],\n    [\n        [\n            12,\n            22\n        ],\n        \"BaseFontName\",\n        \"sid\",\n        null\n    ],\n    [\n        [\n            12,\n            23\n        ],\n        \"BaseFontBlend\",\n        \"delta\",\n        null\n    ],\n    // CID font specific\n    [\n        [\n            12,\n            31\n        ],\n        \"CIDFontVersion\",\n        \"number\",\n        0\n    ],\n    [\n        [\n            12,\n            32\n        ],\n        \"CIDFontRevision\",\n        \"number\",\n        0\n    ],\n    [\n        [\n            12,\n            33\n        ],\n        \"CIDFontType\",\n        \"number\",\n        0\n    ],\n    [\n        [\n            12,\n            34\n        ],\n        \"CIDCount\",\n        \"number\",\n        8720\n    ],\n    [\n        [\n            12,\n            35\n        ],\n        \"UIDBase\",\n        \"number\",\n        null\n    ],\n    [\n        [\n            12,\n            37\n        ],\n        \"FDSelect\",\n        new $6631a7581d654814$export$2e2bcd8739ae039($3e41cd50e8921098$var$FDSelect),\n        null\n    ],\n    [\n        [\n            12,\n            36\n        ],\n        \"FDArray\",\n        new $6631a7581d654814$export$2e2bcd8739ae039(new $6333f51d822e64a1$export$2e2bcd8739ae039($3e41cd50e8921098$var$FontDict)),\n        null\n    ],\n    [\n        [\n            12,\n            38\n        ],\n        \"FontName\",\n        \"sid\",\n        null\n    ]\n]);\nlet $3e41cd50e8921098$var$VariationStore = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    itemVariationStore: $421a2456cdbaa0d8$export$fe1b122a2710f241\n});\nlet $3e41cd50e8921098$var$CFF2TopDict = new $1694c4b242cd1a66$export$2e2bcd8739ae039([\n    [\n        [\n            12,\n            7\n        ],\n        \"FontMatrix\",\n        \"array\",\n        [\n            0.001,\n            0,\n            0,\n            0.001,\n            0,\n            0\n        ]\n    ],\n    [\n        17,\n        \"CharStrings\",\n        new $6631a7581d654814$export$2e2bcd8739ae039(new $6333f51d822e64a1$export$2e2bcd8739ae039),\n        null\n    ],\n    [\n        [\n            12,\n            37\n        ],\n        \"FDSelect\",\n        new $6631a7581d654814$export$2e2bcd8739ae039($3e41cd50e8921098$var$FDSelect),\n        null\n    ],\n    [\n        [\n            12,\n            36\n        ],\n        \"FDArray\",\n        new $6631a7581d654814$export$2e2bcd8739ae039(new $6333f51d822e64a1$export$2e2bcd8739ae039($3e41cd50e8921098$var$FontDict)),\n        null\n    ],\n    [\n        24,\n        \"vstore\",\n        new $6631a7581d654814$export$2e2bcd8739ae039($3e41cd50e8921098$var$VariationStore),\n        null\n    ],\n    [\n        25,\n        \"maxstack\",\n        \"number\",\n        193\n    ]\n]);\nlet $3e41cd50e8921098$var$CFFTop = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.fixed16, {\n    1: {\n        hdrSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n        offSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n        nameIndex: new $6333f51d822e64a1$export$2e2bcd8739ae039(new restructure__WEBPACK_IMPORTED_MODULE_0__.String(\"length\")),\n        topDictIndex: new $6333f51d822e64a1$export$2e2bcd8739ae039($3e41cd50e8921098$var$CFFTopDict),\n        stringIndex: new $6333f51d822e64a1$export$2e2bcd8739ae039(new restructure__WEBPACK_IMPORTED_MODULE_0__.String(\"length\")),\n        globalSubrIndex: new $6333f51d822e64a1$export$2e2bcd8739ae039\n    },\n    2: {\n        hdrSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n        length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        topDict: $3e41cd50e8921098$var$CFF2TopDict,\n        globalSubrIndex: new $6333f51d822e64a1$export$2e2bcd8739ae039\n    }\n});\nvar $3e41cd50e8921098$export$2e2bcd8739ae039 = $3e41cd50e8921098$var$CFFTop;\nclass $8770fc79268fa3c2$var$CFFFont {\n    constructor(stream){\n        this.stream = stream;\n        this.decode();\n    }\n    static decode(stream) {\n        return new $8770fc79268fa3c2$var$CFFFont(stream);\n    }\n    decode() {\n        let start = this.stream.pos;\n        let top = $3e41cd50e8921098$export$2e2bcd8739ae039.decode(this.stream);\n        for(let key in top){\n            let val = top[key];\n            this[key] = val;\n        }\n        if (this.version < 2) {\n            if (this.topDictIndex.length !== 1) throw new Error(\"Only a single font is allowed in CFF\");\n            this.topDict = this.topDictIndex[0];\n        }\n        this.isCIDFont = this.topDict.ROS != null;\n        return this;\n    }\n    string(sid) {\n        if (this.version >= 2) return null;\n        if (sid < $276d3ff37a4362c9$export$2e2bcd8739ae039.length) return $276d3ff37a4362c9$export$2e2bcd8739ae039[sid];\n        return this.stringIndex[sid - $276d3ff37a4362c9$export$2e2bcd8739ae039.length];\n    }\n    get postscriptName() {\n        if (this.version < 2) return this.nameIndex[0];\n        return null;\n    }\n    get fullName() {\n        return this.string(this.topDict.FullName);\n    }\n    get familyName() {\n        return this.string(this.topDict.FamilyName);\n    }\n    getCharString(glyph) {\n        this.stream.pos = this.topDict.CharStrings[glyph].offset;\n        return this.stream.readBuffer(this.topDict.CharStrings[glyph].length);\n    }\n    getGlyphName(gid) {\n        // CFF2 glyph names are in the post table.\n        if (this.version >= 2) return null;\n        // CID-keyed fonts don't have glyph names\n        if (this.isCIDFont) return null;\n        let { charset: charset } = this.topDict;\n        if (Array.isArray(charset)) return charset[gid];\n        if (gid === 0) return \".notdef\";\n        gid -= 1;\n        switch(charset.version){\n            case 0:\n                return this.string(charset.glyphs[gid]);\n            case 1:\n            case 2:\n                for(let i = 0; i < charset.ranges.length; i++){\n                    let range = charset.ranges[i];\n                    if (range.offset <= gid && gid <= range.offset + range.nLeft) return this.string(range.first + (gid - range.offset));\n                }\n                break;\n        }\n        return null;\n    }\n    fdForGlyph(gid) {\n        if (!this.topDict.FDSelect) return null;\n        switch(this.topDict.FDSelect.version){\n            case 0:\n                return this.topDict.FDSelect.fds[gid];\n            case 3:\n            case 4:\n                let { ranges: ranges } = this.topDict.FDSelect;\n                let low = 0;\n                let high = ranges.length - 1;\n                while(low <= high){\n                    let mid = low + high >> 1;\n                    if (gid < ranges[mid].first) high = mid - 1;\n                    else if (mid < high && gid >= ranges[mid + 1].first) low = mid + 1;\n                    else return ranges[mid].fd;\n                }\n            default:\n                throw new Error(`Unknown FDSelect version: ${this.topDict.FDSelect.version}`);\n        }\n    }\n    privateDictForGlyph(gid) {\n        if (this.topDict.FDSelect) {\n            let fd = this.fdForGlyph(gid);\n            if (this.topDict.FDArray[fd]) return this.topDict.FDArray[fd].Private;\n            return null;\n        }\n        if (this.version < 2) return this.topDict.Private;\n        return this.topDict.FDArray[0].Private;\n    }\n}\nvar $8770fc79268fa3c2$export$2e2bcd8739ae039 = $8770fc79268fa3c2$var$CFFFont;\nlet $79f2eb50e4490e51$var$VerticalOrigin = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    glyphIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    vertOriginY: restructure__WEBPACK_IMPORTED_MODULE_0__.int16\n});\nvar $79f2eb50e4490e51$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    majorVersion: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    minorVersion: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    defaultVertOriginY: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    numVertOriginYMetrics: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    metrics: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($79f2eb50e4490e51$var$VerticalOrigin, \"numVertOriginYMetrics\")\n});\nlet $9dd3c2ae0a322c53$export$16b227cb15d716a0 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    height: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    width: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    horiBearingX: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    horiBearingY: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    horiAdvance: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    vertBearingX: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    vertBearingY: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    vertAdvance: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8\n});\nlet $9dd3c2ae0a322c53$export$62c53e75f69bfe12 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    height: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    width: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    bearingX: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    bearingY: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    advance: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8\n});\nlet $9dd3c2ae0a322c53$var$EBDTComponent = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    glyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    xOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    yOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.int8\n});\nclass $9dd3c2ae0a322c53$var$ByteAligned {\n}\nclass $9dd3c2ae0a322c53$var$BitAligned {\n}\nlet $9dd3c2ae0a322c53$export$f1f5ddeb20d14f = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(\"version\", {\n    1: {\n        metrics: $9dd3c2ae0a322c53$export$62c53e75f69bfe12,\n        data: $9dd3c2ae0a322c53$var$ByteAligned\n    },\n    2: {\n        metrics: $9dd3c2ae0a322c53$export$62c53e75f69bfe12,\n        data: $9dd3c2ae0a322c53$var$BitAligned\n    },\n    // format 3 is deprecated\n    // format 4 is not supported by Microsoft\n    5: {\n        data: $9dd3c2ae0a322c53$var$BitAligned\n    },\n    6: {\n        metrics: $9dd3c2ae0a322c53$export$16b227cb15d716a0,\n        data: $9dd3c2ae0a322c53$var$ByteAligned\n    },\n    7: {\n        metrics: $9dd3c2ae0a322c53$export$16b227cb15d716a0,\n        data: $9dd3c2ae0a322c53$var$BitAligned\n    },\n    8: {\n        metrics: $9dd3c2ae0a322c53$export$62c53e75f69bfe12,\n        pad: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8),\n        numComponents: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        components: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($9dd3c2ae0a322c53$var$EBDTComponent, \"numComponents\")\n    },\n    9: {\n        metrics: $9dd3c2ae0a322c53$export$16b227cb15d716a0,\n        pad: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8),\n        numComponents: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        components: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($9dd3c2ae0a322c53$var$EBDTComponent, \"numComponents\")\n    },\n    17: {\n        metrics: $9dd3c2ae0a322c53$export$62c53e75f69bfe12,\n        dataLen: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        data: new restructure__WEBPACK_IMPORTED_MODULE_0__.Buffer(\"dataLen\")\n    },\n    18: {\n        metrics: $9dd3c2ae0a322c53$export$16b227cb15d716a0,\n        dataLen: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        data: new restructure__WEBPACK_IMPORTED_MODULE_0__.Buffer(\"dataLen\")\n    },\n    19: {\n        dataLen: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        data: new restructure__WEBPACK_IMPORTED_MODULE_0__.Buffer(\"dataLen\")\n    }\n});\nlet $234c291eab07e474$var$SBitLineMetrics = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    ascender: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    descender: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    widthMax: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    caretSlopeNumerator: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    caretSlopeDenominator: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    caretOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    minOriginSB: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    minAdvanceSB: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    maxBeforeBL: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    minAfterBL: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    pad: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.int8, 2)\n});\nlet $234c291eab07e474$var$CodeOffsetPair = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    glyphCode: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    offset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n});\nlet $234c291eab07e474$var$IndexSubtable = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    header: {\n        imageFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        imageDataOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32\n    },\n    1: {\n        offsetArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, (t)=>t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1)\n    },\n    2: {\n        imageSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        bigMetrics: $9dd3c2ae0a322c53$export$16b227cb15d716a0\n    },\n    3: {\n        offsetArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (t)=>t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1)\n    },\n    4: {\n        numGlyphs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        glyphArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($234c291eab07e474$var$CodeOffsetPair, (t)=>t.numGlyphs + 1)\n    },\n    5: {\n        imageSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        bigMetrics: $9dd3c2ae0a322c53$export$16b227cb15d716a0,\n        numGlyphs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        glyphCodeArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"numGlyphs\")\n    }\n});\nlet $234c291eab07e474$var$IndexSubtableArray = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    firstGlyphIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    lastGlyphIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    subtable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $234c291eab07e474$var$IndexSubtable)\n});\nlet $234c291eab07e474$var$BitmapSizeTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    indexSubTableArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($234c291eab07e474$var$IndexSubtableArray, 1), {\n        type: \"parent\"\n    }),\n    indexTablesSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    numberOfIndexSubTables: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    colorRef: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    hori: $234c291eab07e474$var$SBitLineMetrics,\n    vert: $234c291eab07e474$var$SBitLineMetrics,\n    startGlyphIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    endGlyphIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    ppemX: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    ppemY: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    bitDepth: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    flags: new restructure__WEBPACK_IMPORTED_MODULE_0__.Bitfield(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, [\n        \"horizontal\",\n        \"vertical\"\n    ])\n});\nvar $234c291eab07e474$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    numSizes: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    sizes: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($234c291eab07e474$var$BitmapSizeTable, \"numSizes\")\n});\nlet $55d04373f0cac44e$var$ImageTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    ppem: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    resolution: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    imageOffsets: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, \"void\"), (t)=>t.parent.parent.maxp.numGlyphs + 1)\n});\nvar // It includes several image tables with images for each bitmap glyph\n// of several different sizes.\n$55d04373f0cac44e$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    flags: new restructure__WEBPACK_IMPORTED_MODULE_0__.Bitfield(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, [\n        \"renderOutlines\"\n    ]),\n    numImgTables: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    imageTables: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $55d04373f0cac44e$var$ImageTable), \"numImgTables\")\n});\nlet $0e59eccfa3005d9d$var$LayerRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    gid: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    paletteIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16 // Index value to use in the appropriate palette. This value must\n}); // be less than numPaletteEntries in the CPAL table, except for\n// the special case noted below. Each palette entry is 16 bits.\n// A palette index of 0xFFFF is a special case indicating that\n// the text foreground color should be used.\nlet $0e59eccfa3005d9d$var$BaseGlyphRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    gid: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    // and is not rendered for color.\n    firstLayerIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    // There will be numLayers consecutive entries for this base glyph.\n    numLayers: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n});\nvar $0e59eccfa3005d9d$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    numBaseGlyphRecords: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    baseGlyphRecord: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($0e59eccfa3005d9d$var$BaseGlyphRecord, \"numBaseGlyphRecords\")),\n    layerRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($0e59eccfa3005d9d$var$LayerRecord, \"numLayerRecords\"), {\n        lazy: true\n    }),\n    numLayerRecords: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n});\nlet $23affa36a12f7915$var$ColorRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    blue: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    green: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    red: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    alpha: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8\n});\nvar $23affa36a12f7915$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    header: {\n        numPaletteEntries: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        numPalettes: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        numColorRecords: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        colorRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($23affa36a12f7915$var$ColorRecord, \"numColorRecords\")),\n        colorRecordIndices: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"numPalettes\")\n    },\n    0: {},\n    1: {\n        offsetPaletteTypeArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, \"numPalettes\")),\n        offsetPaletteLabelArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"numPalettes\")),\n        offsetPaletteEntryLabelArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"numPaletteEntries\"))\n    }\n});\nlet $9fffe61eb0785f74$var$BaseCoord = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    1: {\n        coordinate: restructure__WEBPACK_IMPORTED_MODULE_0__.int16 // X or Y value, in design units\n    },\n    2: {\n        coordinate: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        referenceGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        baseCoordPoint: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16 // Index of contour point on the referenceGlyph\n    },\n    3: {\n        coordinate: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        deviceTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$8215d14a63d9fb10) // Device table for X or Y value\n    }\n});\nlet $9fffe61eb0785f74$var$BaseValues = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    defaultIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    baseCoordCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    baseCoords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $9fffe61eb0785f74$var$BaseCoord), \"baseCoordCount\")\n});\nlet $9fffe61eb0785f74$var$FeatMinMaxRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    minCoord: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $9fffe61eb0785f74$var$BaseCoord, {\n        type: \"parent\"\n    }),\n    maxCoord: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $9fffe61eb0785f74$var$BaseCoord, {\n        type: \"parent\"\n    }) // May be NULL\n});\nlet $9fffe61eb0785f74$var$MinMax = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    minCoord: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $9fffe61eb0785f74$var$BaseCoord),\n    maxCoord: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $9fffe61eb0785f74$var$BaseCoord),\n    featMinMaxCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    featMinMaxRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($9fffe61eb0785f74$var$FeatMinMaxRecord, \"featMinMaxCount\") // In alphabetical order\n});\nlet $9fffe61eb0785f74$var$BaseLangSysRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    minMax: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $9fffe61eb0785f74$var$MinMax, {\n        type: \"parent\"\n    })\n});\nlet $9fffe61eb0785f74$var$BaseScript = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    baseValues: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $9fffe61eb0785f74$var$BaseValues),\n    defaultMinMax: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $9fffe61eb0785f74$var$MinMax),\n    baseLangSysCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    baseLangSysRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($9fffe61eb0785f74$var$BaseLangSysRecord, \"baseLangSysCount\") // in alphabetical order by BaseLangSysTag\n});\nlet $9fffe61eb0785f74$var$BaseScriptRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    script: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $9fffe61eb0785f74$var$BaseScript, {\n        type: \"parent\"\n    })\n});\nlet $9fffe61eb0785f74$var$BaseScriptList = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($9fffe61eb0785f74$var$BaseScriptRecord, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\n// Array of 4-byte baseline identification tags-must be in alphabetical order\nlet $9fffe61eb0785f74$var$BaseTagList = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4), restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $9fffe61eb0785f74$var$Axis = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    baseTagList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $9fffe61eb0785f74$var$BaseTagList),\n    baseScriptList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $9fffe61eb0785f74$var$BaseScriptList)\n});\nvar $9fffe61eb0785f74$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, {\n    header: {\n        horizAxis: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $9fffe61eb0785f74$var$Axis),\n        vertAxis: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $9fffe61eb0785f74$var$Axis) // May be NULL\n    },\n    0x00010000: {},\n    0x00010001: {\n        itemVariationStore: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $421a2456cdbaa0d8$export$fe1b122a2710f241)\n    }\n});\nlet $418face38567ee6e$var$AttachPoint = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $418face38567ee6e$var$AttachList = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$17608c3f81a6111),\n    glyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    attachPoints: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $418face38567ee6e$var$AttachPoint), \"glyphCount\")\n});\nlet $418face38567ee6e$var$CaretValue = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    1: {\n        coordinate: restructure__WEBPACK_IMPORTED_MODULE_0__.int16\n    },\n    2: {\n        caretValuePoint: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n    },\n    3: {\n        coordinate: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        deviceTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$8215d14a63d9fb10)\n    }\n});\nlet $418face38567ee6e$var$LigGlyph = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $418face38567ee6e$var$CaretValue), restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $418face38567ee6e$var$LigCaretList = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$17608c3f81a6111),\n    ligGlyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    ligGlyphs: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $418face38567ee6e$var$LigGlyph), \"ligGlyphCount\")\n});\nlet $418face38567ee6e$var$MarkGlyphSetsDef = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    markSetTableFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    markSetCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $401800e36a580e62$export$17608c3f81a6111), \"markSetCount\")\n});\nvar $418face38567ee6e$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, {\n    header: {\n        glyphClassDef: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$843d551fbbafef71),\n        attachList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $418face38567ee6e$var$AttachList),\n        ligCaretList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $418face38567ee6e$var$LigCaretList),\n        markAttachClassDef: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$843d551fbbafef71)\n    },\n    0x00010000: {},\n    0x00010002: {\n        markGlyphSetsDef: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $418face38567ee6e$var$MarkGlyphSetsDef)\n    },\n    0x00010003: {\n        markGlyphSetsDef: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $418face38567ee6e$var$MarkGlyphSetsDef),\n        itemVariationStore: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $421a2456cdbaa0d8$export$fe1b122a2710f241)\n    }\n});\nlet $010e157f6d8a40e9$var$ValueFormat = new restructure__WEBPACK_IMPORTED_MODULE_0__.Bitfield(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, [\n    \"xPlacement\",\n    \"yPlacement\",\n    \"xAdvance\",\n    \"yAdvance\",\n    \"xPlaDevice\",\n    \"yPlaDevice\",\n    \"xAdvDevice\",\n    \"yAdvDevice\"\n]);\nlet $010e157f6d8a40e9$var$types = {\n    xPlacement: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    yPlacement: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    xAdvance: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    yAdvance: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    xPlaDevice: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$8215d14a63d9fb10, {\n        type: \"global\",\n        relativeTo: (ctx)=>ctx.rel\n    }),\n    yPlaDevice: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$8215d14a63d9fb10, {\n        type: \"global\",\n        relativeTo: (ctx)=>ctx.rel\n    }),\n    xAdvDevice: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$8215d14a63d9fb10, {\n        type: \"global\",\n        relativeTo: (ctx)=>ctx.rel\n    }),\n    yAdvDevice: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$8215d14a63d9fb10, {\n        type: \"global\",\n        relativeTo: (ctx)=>ctx.rel\n    })\n};\nclass $010e157f6d8a40e9$var$ValueRecord {\n    constructor(key = \"valueFormat\"){\n        this.key = key;\n    }\n    buildStruct(parent) {\n        let struct = parent;\n        while(!struct[this.key] && struct.parent)struct = struct.parent;\n        if (!struct[this.key]) return;\n        let fields = {};\n        fields.rel = ()=>struct._startOffset;\n        let format = struct[this.key];\n        for(let key in format)if (format[key]) fields[key] = $010e157f6d8a40e9$var$types[key];\n        return new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct(fields);\n    }\n    size(val, ctx) {\n        return this.buildStruct(ctx).size(val, ctx);\n    }\n    decode(stream, parent) {\n        let res = this.buildStruct(parent).decode(stream, parent);\n        delete res.rel;\n        return res;\n    }\n}\nlet $010e157f6d8a40e9$var$PairValueRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    secondGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    value1: new $010e157f6d8a40e9$var$ValueRecord(\"valueFormat1\"),\n    value2: new $010e157f6d8a40e9$var$ValueRecord(\"valueFormat2\")\n});\nlet $010e157f6d8a40e9$var$PairSet = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($010e157f6d8a40e9$var$PairValueRecord, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $010e157f6d8a40e9$var$Class2Record = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    value1: new $010e157f6d8a40e9$var$ValueRecord(\"valueFormat1\"),\n    value2: new $010e157f6d8a40e9$var$ValueRecord(\"valueFormat2\")\n});\nlet $010e157f6d8a40e9$var$Anchor = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    1: {\n        xCoordinate: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        yCoordinate: restructure__WEBPACK_IMPORTED_MODULE_0__.int16\n    },\n    2: {\n        xCoordinate: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        yCoordinate: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        anchorPoint: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n    },\n    3: {\n        xCoordinate: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        yCoordinate: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        xDeviceTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$8215d14a63d9fb10),\n        yDeviceTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$8215d14a63d9fb10)\n    }\n});\nlet $010e157f6d8a40e9$var$EntryExitRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    entryAnchor: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $010e157f6d8a40e9$var$Anchor, {\n        type: \"parent\"\n    }),\n    exitAnchor: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $010e157f6d8a40e9$var$Anchor, {\n        type: \"parent\"\n    })\n});\nlet $010e157f6d8a40e9$var$MarkRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    class: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    markAnchor: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $010e157f6d8a40e9$var$Anchor, {\n        type: \"parent\"\n    })\n});\nlet $010e157f6d8a40e9$var$MarkArray = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($010e157f6d8a40e9$var$MarkRecord, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $010e157f6d8a40e9$var$BaseRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $010e157f6d8a40e9$var$Anchor), (t)=>t.parent.classCount);\nlet $010e157f6d8a40e9$var$BaseArray = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($010e157f6d8a40e9$var$BaseRecord, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $010e157f6d8a40e9$var$ComponentRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $010e157f6d8a40e9$var$Anchor), (t)=>t.parent.parent.classCount);\nlet $010e157f6d8a40e9$var$LigatureAttach = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($010e157f6d8a40e9$var$ComponentRecord, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $010e157f6d8a40e9$var$LigatureArray = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $010e157f6d8a40e9$var$LigatureAttach), restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $010e157f6d8a40e9$export$73a8cfb19cd43a0f = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(\"lookupType\", {\n    1: new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n        1: {\n            coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$17608c3f81a6111),\n            valueFormat: $010e157f6d8a40e9$var$ValueFormat,\n            value: new $010e157f6d8a40e9$var$ValueRecord()\n        },\n        2: {\n            coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$17608c3f81a6111),\n            valueFormat: $010e157f6d8a40e9$var$ValueFormat,\n            valueCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n            values: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(new $010e157f6d8a40e9$var$ValueRecord(), \"valueCount\")\n        }\n    }),\n    2: new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n        1: {\n            coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$17608c3f81a6111),\n            valueFormat1: $010e157f6d8a40e9$var$ValueFormat,\n            valueFormat2: $010e157f6d8a40e9$var$ValueFormat,\n            pairSetCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n            pairSets: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $010e157f6d8a40e9$var$PairSet), \"pairSetCount\")\n        },\n        2: {\n            coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$17608c3f81a6111),\n            valueFormat1: $010e157f6d8a40e9$var$ValueFormat,\n            valueFormat2: $010e157f6d8a40e9$var$ValueFormat,\n            classDef1: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$843d551fbbafef71),\n            classDef2: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$843d551fbbafef71),\n            class1Count: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n            class2Count: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n            classRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray($010e157f6d8a40e9$var$Class2Record, \"class2Count\"), \"class1Count\")\n        }\n    }),\n    3: {\n        format: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$17608c3f81a6111),\n        entryExitCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        entryExitRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($010e157f6d8a40e9$var$EntryExitRecord, \"entryExitCount\")\n    },\n    4: {\n        format: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        markCoverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$17608c3f81a6111),\n        baseCoverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$17608c3f81a6111),\n        classCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        markArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $010e157f6d8a40e9$var$MarkArray),\n        baseArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $010e157f6d8a40e9$var$BaseArray)\n    },\n    5: {\n        format: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        markCoverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$17608c3f81a6111),\n        ligatureCoverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$17608c3f81a6111),\n        classCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        markArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $010e157f6d8a40e9$var$MarkArray),\n        ligatureArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $010e157f6d8a40e9$var$LigatureArray)\n    },\n    6: {\n        format: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        mark1Coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$17608c3f81a6111),\n        mark2Coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$17608c3f81a6111),\n        classCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        mark1Array: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $010e157f6d8a40e9$var$MarkArray),\n        mark2Array: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $010e157f6d8a40e9$var$BaseArray)\n    },\n    7: $401800e36a580e62$export$841858b892ce1f4c,\n    8: $401800e36a580e62$export$5e6d09e6861162f6,\n    9: {\n        posFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        lookupType: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        extension: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, null)\n    }\n});\n// Fix circular reference\n$010e157f6d8a40e9$export$73a8cfb19cd43a0f.versions[9].extension.type = $010e157f6d8a40e9$export$73a8cfb19cd43a0f;\nvar $010e157f6d8a40e9$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, {\n    header: {\n        scriptList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$3e15fc05ce864229),\n        featureList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$aa18130def4b6cb4),\n        lookupList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, new $401800e36a580e62$export$df0008c6ff2da22a($010e157f6d8a40e9$export$73a8cfb19cd43a0f))\n    },\n    0x00010000: {},\n    0x00010001: {\n        featureVariations: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $421a2456cdbaa0d8$export$441b70b7971dd419)\n    }\n});\nlet $7176ea6bb7dcf1c6$var$Sequence = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $7176ea6bb7dcf1c6$var$AlternateSet = $7176ea6bb7dcf1c6$var$Sequence;\nlet $7176ea6bb7dcf1c6$var$Ligature = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    glyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    compCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    components: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (t)=>t.compCount - 1)\n});\nlet $7176ea6bb7dcf1c6$var$LigatureSet = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7176ea6bb7dcf1c6$var$Ligature), restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $7176ea6bb7dcf1c6$var$GSUBLookup = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(\"lookupType\", {\n    1: new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n        1: {\n            coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$17608c3f81a6111),\n            deltaGlyphID: restructure__WEBPACK_IMPORTED_MODULE_0__.int16\n        },\n        2: {\n            coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$17608c3f81a6111),\n            glyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n            substitute: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"glyphCount\")\n        }\n    }),\n    2: {\n        substFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$17608c3f81a6111),\n        count: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        sequences: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7176ea6bb7dcf1c6$var$Sequence), \"count\")\n    },\n    3: {\n        substFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$17608c3f81a6111),\n        count: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        alternateSet: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7176ea6bb7dcf1c6$var$AlternateSet), \"count\")\n    },\n    4: {\n        substFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$17608c3f81a6111),\n        count: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        ligatureSets: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7176ea6bb7dcf1c6$var$LigatureSet), \"count\")\n    },\n    5: $401800e36a580e62$export$841858b892ce1f4c,\n    6: $401800e36a580e62$export$5e6d09e6861162f6,\n    7: {\n        substFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        lookupType: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        extension: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, null)\n    },\n    8: {\n        substFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$17608c3f81a6111),\n        backtrackCoverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$17608c3f81a6111), \"backtrackGlyphCount\"),\n        lookaheadGlyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        lookaheadCoverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$17608c3f81a6111), \"lookaheadGlyphCount\"),\n        glyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        substitutes: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"glyphCount\")\n    }\n});\n// Fix circular reference\n$7176ea6bb7dcf1c6$var$GSUBLookup.versions[7].extension.type = $7176ea6bb7dcf1c6$var$GSUBLookup;\nvar $7176ea6bb7dcf1c6$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, {\n    header: {\n        scriptList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$3e15fc05ce864229),\n        featureList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $401800e36a580e62$export$aa18130def4b6cb4),\n        lookupList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, new $401800e36a580e62$export$df0008c6ff2da22a($7176ea6bb7dcf1c6$var$GSUBLookup))\n    },\n    0x00010000: {},\n    0x00010001: {\n        featureVariations: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $421a2456cdbaa0d8$export$441b70b7971dd419)\n    }\n});\nlet $71e9e74bb6366bce$var$JstfGSUBModList = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $71e9e74bb6366bce$var$JstfPriority = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    shrinkageEnableGSUB: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $71e9e74bb6366bce$var$JstfGSUBModList),\n    shrinkageDisableGSUB: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $71e9e74bb6366bce$var$JstfGSUBModList),\n    shrinkageEnableGPOS: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $71e9e74bb6366bce$var$JstfGSUBModList),\n    shrinkageDisableGPOS: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $71e9e74bb6366bce$var$JstfGSUBModList),\n    shrinkageJstfMax: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, new $401800e36a580e62$export$df0008c6ff2da22a($010e157f6d8a40e9$export$73a8cfb19cd43a0f)),\n    extensionEnableGSUB: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $71e9e74bb6366bce$var$JstfGSUBModList),\n    extensionDisableGSUB: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $71e9e74bb6366bce$var$JstfGSUBModList),\n    extensionEnableGPOS: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $71e9e74bb6366bce$var$JstfGSUBModList),\n    extensionDisableGPOS: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $71e9e74bb6366bce$var$JstfGSUBModList),\n    extensionJstfMax: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, new $401800e36a580e62$export$df0008c6ff2da22a($010e157f6d8a40e9$export$73a8cfb19cd43a0f))\n});\nlet $71e9e74bb6366bce$var$JstfLangSys = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $71e9e74bb6366bce$var$JstfPriority), restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $71e9e74bb6366bce$var$JstfLangSysRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    jstfLangSys: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $71e9e74bb6366bce$var$JstfLangSys)\n});\nlet $71e9e74bb6366bce$var$JstfScript = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    extenderGlyphs: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16)),\n    defaultLangSys: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $71e9e74bb6366bce$var$JstfLangSys),\n    langSysCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    langSysRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($71e9e74bb6366bce$var$JstfLangSysRecord, \"langSysCount\")\n});\nlet $71e9e74bb6366bce$var$JstfScriptRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    script: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $71e9e74bb6366bce$var$JstfScript, {\n        type: \"parent\"\n    })\n});\nvar $71e9e74bb6366bce$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    scriptCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    scriptList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($71e9e74bb6366bce$var$JstfScriptRecord, \"scriptCount\")\n});\n// TODO: add this to restructure\nclass $706225b6909f9418$var$VariableSizeNumber {\n    constructor(size){\n        this._size = size;\n    }\n    decode(stream, parent) {\n        switch(this.size(0, parent)){\n            case 1:\n                return stream.readUInt8();\n            case 2:\n                return stream.readUInt16BE();\n            case 3:\n                return stream.readUInt24BE();\n            case 4:\n                return stream.readUInt32BE();\n        }\n    }\n    size(val, parent) {\n        return (0,restructure_src_utils_js__WEBPACK_IMPORTED_MODULE_3__.resolveLength)(this._size, null, parent);\n    }\n}\nlet $706225b6909f9418$var$MapDataEntry = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    entry: new $706225b6909f9418$var$VariableSizeNumber((t)=>((t.parent.entryFormat & 0x0030) >> 4) + 1),\n    outerIndex: (t)=>t.entry >> (t.parent.entryFormat & 0x000F) + 1,\n    innerIndex: (t)=>t.entry & (1 << (t.parent.entryFormat & 0x000F) + 1) - 1\n});\nlet $706225b6909f9418$var$DeltaSetIndexMap = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    entryFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    mapCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    mapData: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($706225b6909f9418$var$MapDataEntry, \"mapCount\")\n});\nvar $706225b6909f9418$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    majorVersion: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    minorVersion: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    itemVariationStore: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $421a2456cdbaa0d8$export$fe1b122a2710f241),\n    advanceWidthMapping: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $706225b6909f9418$var$DeltaSetIndexMap),\n    LSBMapping: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $706225b6909f9418$var$DeltaSetIndexMap),\n    RSBMapping: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $706225b6909f9418$var$DeltaSetIndexMap)\n});\nlet $4a144b8ae6f53b7c$var$Signature = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    format: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    offset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32\n});\nlet $4a144b8ae6f53b7c$var$SignatureBlock = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, 2),\n    cbSignature: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    signature: new restructure__WEBPACK_IMPORTED_MODULE_0__.Buffer(\"cbSignature\")\n});\nvar $4a144b8ae6f53b7c$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    ulVersion: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    usNumSigs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    usFlag: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    signatures: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($4a144b8ae6f53b7c$var$Signature, \"usNumSigs\"),\n    signatureBlocks: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($4a144b8ae6f53b7c$var$SignatureBlock, \"usNumSigs\")\n});\nlet $a2086c3965d7b105$var$GaspRange = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    rangeMaxPPEM: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    rangeGaspBehavior: new restructure__WEBPACK_IMPORTED_MODULE_0__.Bitfield(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, [\n        \"grayscale\",\n        \"gridfit\",\n        \"symmetricSmoothing\",\n        \"symmetricGridfit\" // only in version 1, for ClearType\n    ])\n});\nvar $a2086c3965d7b105$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    numRanges: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    gaspRanges: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($a2086c3965d7b105$var$GaspRange, \"numRanges\") // Sorted by ppem\n});\nlet $de83746c6c1c8559$var$DeviceRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    pixelSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    maximumWidth: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    widths: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, (t)=>t.parent.parent.maxp.numGlyphs)\n});\nvar $de83746c6c1c8559$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    numRecords: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    sizeDeviceRecord: restructure__WEBPACK_IMPORTED_MODULE_0__.int32,\n    records: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($de83746c6c1c8559$var$DeviceRecord, \"numRecords\")\n});\nlet $5a2237650c44652a$var$KernPair = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    left: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    right: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    value: restructure__WEBPACK_IMPORTED_MODULE_0__.int16\n});\nlet $5a2237650c44652a$var$ClassTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    firstGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    nGlyphs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    offsets: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"nGlyphs\"),\n    max: (t)=>t.offsets.length && Math.max.apply(Math, t.offsets)\n});\nlet $5a2237650c44652a$var$Kern2Array = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    off: (t)=>t._startOffset - t.parent.parent._startOffset,\n    len: (t)=>((t.parent.leftTable.max - t.off) / t.parent.rowWidth + 1) * (t.parent.rowWidth / 2),\n    values: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.int16, \"len\")\n});\nlet $5a2237650c44652a$var$KernSubtable = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(\"format\", {\n    0: {\n        nPairs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        searchRange: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        entrySelector: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        rangeShift: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        pairs: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($5a2237650c44652a$var$KernPair, \"nPairs\")\n    },\n    2: {\n        rowWidth: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        leftTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $5a2237650c44652a$var$ClassTable, {\n            type: \"parent\"\n        }),\n        rightTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $5a2237650c44652a$var$ClassTable, {\n            type: \"parent\"\n        }),\n        array: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $5a2237650c44652a$var$Kern2Array, {\n            type: \"parent\"\n        })\n    },\n    3: {\n        glyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        kernValueCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n        leftClassCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n        rightClassCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n        flags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n        kernValue: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.int16, \"kernValueCount\"),\n        leftClass: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, \"glyphCount\"),\n        rightClass: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, \"glyphCount\"),\n        kernIndex: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, (t)=>t.leftClassCount * t.rightClassCount)\n    }\n});\nlet $5a2237650c44652a$var$KernTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(\"version\", {\n    0: {\n        subVersion: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        format: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n        coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Bitfield(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, [\n            \"horizontal\",\n            \"minimum\",\n            \"crossStream\",\n            \"override\" // If set to 1 the value in this table replaces the accumulated value\n        ]),\n        subtable: $5a2237650c44652a$var$KernSubtable,\n        padding: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, (t)=>t.length - t._currentOffset)\n    },\n    1: {\n        length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Bitfield(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, [\n            null,\n            null,\n            null,\n            null,\n            null,\n            \"variation\",\n            \"crossStream\",\n            \"vertical\" // Set if table has vertical kerning values\n        ]),\n        format: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n        tupleIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        subtable: $5a2237650c44652a$var$KernSubtable,\n        padding: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, (t)=>t.length - t._currentOffset)\n    }\n});\nvar $5a2237650c44652a$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    0: {\n        nTables: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        tables: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($5a2237650c44652a$var$KernTable, \"nTables\")\n    },\n    1: {\n        reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16),\n        nTables: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        tables: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($5a2237650c44652a$var$KernTable, \"nTables\")\n    }\n});\nvar // Records the ppem for each glyph at which the scaling becomes linear again,\n// despite instructions effecting the advance width\n$1eadf070c8b34e48$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    numGlyphs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    yPels: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, \"numGlyphs\")\n});\nvar // NOTE: The PCLT table is strongly discouraged for OpenType fonts with TrueType outlines\n$8eb2f7302ef75084$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    fontNumber: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    pitch: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    xHeight: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    style: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    typeFamily: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    capHeight: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    symbolSet: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    typeface: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(16),\n    characterComplement: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(8),\n    fileName: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(6),\n    strokeWeight: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(1),\n    widthType: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(1),\n    serifStyle: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8)\n});\n// VDMX tables contain ascender/descender overrides for certain (usually small)\n// sizes. This is needed in order to match font metrics on Windows.\nlet $8223b0d67f5fd7c9$var$Ratio = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    bCharSet: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    xRatio: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    yStartRatio: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    yEndRatio: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8 // Ending y-Ratio value\n});\nlet $8223b0d67f5fd7c9$var$vTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    yPelHeight: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    yMax: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    yMin: restructure__WEBPACK_IMPORTED_MODULE_0__.int16 // Minimum value (in pels) for this yPelHeight\n});\nlet $8223b0d67f5fd7c9$var$VdmxGroup = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    recs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    startsz: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    endsz: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    entries: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($8223b0d67f5fd7c9$var$vTable, \"recs\") // The VDMX records\n});\nvar $8223b0d67f5fd7c9$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    numRecs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    numRatios: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    ratioRanges: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($8223b0d67f5fd7c9$var$Ratio, \"numRatios\"),\n    offsets: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"numRatios\"),\n    groups: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($8223b0d67f5fd7c9$var$VdmxGroup, \"numRecs\") // The actual VDMX groupings\n});\nvar $4b17ac6a75c85897$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    ascent: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    descent: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    lineGap: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    advanceHeightMax: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    minTopSideBearing: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    minBottomSideBearing: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    yMaxExtent: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    caretSlopeRise: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    caretSlopeRun: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    caretOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.int16, 4),\n    metricDataFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    numberOfMetrics: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16 // Number of advance heights in the Vertical Metrics table\n});\nlet $a9f9c5185d84186d$var$VmtxEntry = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    advance: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    bearing: restructure__WEBPACK_IMPORTED_MODULE_0__.int16 // The top sidebearing of the glyph\n});\nvar $a9f9c5185d84186d$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    metrics: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray($a9f9c5185d84186d$var$VmtxEntry, (t)=>t.parent.vhea.numberOfMetrics),\n    bearings: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.int16, (t)=>t.parent.maxp.numGlyphs - t.parent.vhea.numberOfMetrics)\n});\nlet $d9cf6d6467871d68$var$shortFrac = new restructure__WEBPACK_IMPORTED_MODULE_0__.Fixed(16, \"BE\", 14);\nlet $d9cf6d6467871d68$var$Correspondence = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    fromCoord: $d9cf6d6467871d68$var$shortFrac,\n    toCoord: $d9cf6d6467871d68$var$shortFrac\n});\nlet $d9cf6d6467871d68$var$Segment = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    pairCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    correspondence: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($d9cf6d6467871d68$var$Correspondence, \"pairCount\")\n});\nvar $d9cf6d6467871d68$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n    axisCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    segment: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($d9cf6d6467871d68$var$Segment, \"axisCount\")\n});\nclass $c35aa0a165e05d15$var$UnboundedArrayAccessor {\n    constructor(type, stream, parent){\n        this.type = type;\n        this.stream = stream;\n        this.parent = parent;\n        this.base = this.stream.pos;\n        this._items = [];\n    }\n    getItem(index) {\n        if (this._items[index] == null) {\n            let pos = this.stream.pos;\n            this.stream.pos = this.base + this.type.size(null, this.parent) * index;\n            this._items[index] = this.type.decode(this.stream, this.parent);\n            this.stream.pos = pos;\n        }\n        return this._items[index];\n    }\n    inspect() {\n        return `[UnboundedArray ${this.type.constructor.name}]`;\n    }\n}\nclass $c35aa0a165e05d15$export$c5af1eebc882e39a extends restructure__WEBPACK_IMPORTED_MODULE_0__.Array {\n    constructor(type){\n        super(type, 0);\n    }\n    decode(stream, parent) {\n        return new $c35aa0a165e05d15$var$UnboundedArrayAccessor(this.type, stream, parent);\n    }\n}\nlet $c35aa0a165e05d15$export$8351f8c2ae2f103c = function(ValueType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint16) {\n    // Helper class that makes internal structures invisible to pointers\n    class Shadow {\n        constructor(type){\n            this.type = type;\n        }\n        decode(stream, ctx) {\n            ctx = ctx.parent.parent;\n            return this.type.decode(stream, ctx);\n        }\n        size(val, ctx) {\n            ctx = ctx.parent.parent;\n            return this.type.size(val, ctx);\n        }\n        encode(stream, val, ctx) {\n            ctx = ctx.parent.parent;\n            return this.type.encode(stream, val, ctx);\n        }\n    }\n    ValueType = new Shadow(ValueType);\n    let BinarySearchHeader = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n        unitSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        nUnits: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        searchRange: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        entrySelector: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        rangeShift: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n    });\n    let LookupSegmentSingle = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n        lastGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        firstGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        value: ValueType\n    });\n    let LookupSegmentArray = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n        lastGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        firstGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        values: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(ValueType, (t)=>t.lastGlyph - t.firstGlyph + 1), {\n            type: \"parent\"\n        })\n    });\n    let LookupSingle = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n        glyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        value: ValueType\n    });\n    return new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n        0: {\n            values: new $c35aa0a165e05d15$export$c5af1eebc882e39a(ValueType) // length == number of glyphs maybe?\n        },\n        2: {\n            binarySearchHeader: BinarySearchHeader,\n            segments: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(LookupSegmentSingle, (t)=>t.binarySearchHeader.nUnits)\n        },\n        4: {\n            binarySearchHeader: BinarySearchHeader,\n            segments: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(LookupSegmentArray, (t)=>t.binarySearchHeader.nUnits)\n        },\n        6: {\n            binarySearchHeader: BinarySearchHeader,\n            segments: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(LookupSingle, (t)=>t.binarySearchHeader.nUnits)\n        },\n        8: {\n            firstGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n            count: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n            values: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(ValueType, \"count\")\n        }\n    });\n};\nfunction $c35aa0a165e05d15$export$79f7d93d790934ba(entryData = {}, lookupType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint16) {\n    let entry = Object.assign({\n        newState: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        flags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n    }, entryData);\n    let Entry = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct(entry);\n    let StateArray = new $c35aa0a165e05d15$export$c5af1eebc882e39a(new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (t)=>t.nClasses));\n    let StateHeader = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n        nClasses: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        classTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new $c35aa0a165e05d15$export$8351f8c2ae2f103c(lookupType)),\n        stateArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, StateArray),\n        entryTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new $c35aa0a165e05d15$export$c5af1eebc882e39a(Entry))\n    });\n    return StateHeader;\n}\nfunction $c35aa0a165e05d15$export$105027425199cc51(entryData = {}, lookupType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint16) {\n    let ClassLookupTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n        version () {\n            return 8;\n        },\n        firstGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        values: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16)\n    });\n    let entry = Object.assign({\n        newStateOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        // convert offset to stateArray index\n        newState: (t)=>(t.newStateOffset - (t.parent.stateArray.base - t.parent._startOffset)) / t.parent.nClasses,\n        flags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n    }, entryData);\n    let Entry = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct(entry);\n    let StateArray = new $c35aa0a165e05d15$export$c5af1eebc882e39a(new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, (t)=>t.nClasses));\n    let StateHeader1 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n        nClasses: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        classTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, ClassLookupTable),\n        stateArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, StateArray),\n        entryTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, new $c35aa0a165e05d15$export$c5af1eebc882e39a(Entry))\n    });\n    return StateHeader1;\n}\nlet $53e6946cfb72ad0c$var$BslnSubtable = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(\"format\", {\n    0: {\n        deltas: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.int16, 32)\n    },\n    1: {\n        deltas: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.int16, 32),\n        mappingData: new $c35aa0a165e05d15$export$8351f8c2ae2f103c(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16)\n    },\n    2: {\n        standardGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        controlPoints: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, 32)\n    },\n    3: {\n        standardGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        controlPoints: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, 32),\n        mappingData: new $c35aa0a165e05d15$export$8351f8c2ae2f103c(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16)\n    }\n});\nvar $53e6946cfb72ad0c$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n    format: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    defaultBaseline: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    subtable: $53e6946cfb72ad0c$var$BslnSubtable\n});\nlet $117550c71e13cb3d$var$Setting = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    setting: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    nameIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    name: (t)=>t.parent.parent.parent.name.records.fontFeatures[t.nameIndex]\n});\nlet $117550c71e13cb3d$var$FeatureName = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    feature: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    nSettings: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    settingTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($117550c71e13cb3d$var$Setting, \"nSettings\"), {\n        type: \"parent\"\n    }),\n    featureFlags: new restructure__WEBPACK_IMPORTED_MODULE_0__.Bitfield(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, [\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        \"hasDefault\",\n        \"exclusive\"\n    ]),\n    defaultSetting: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    nameIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    name: (t)=>t.parent.parent.name.records.fontFeatures[t.nameIndex]\n});\nvar $117550c71e13cb3d$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n    featureNameCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    reserved1: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16),\n    reserved2: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32),\n    featureNames: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($117550c71e13cb3d$var$FeatureName, \"featureNameCount\")\n});\nlet $551f92fdd501454e$var$Axis = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    axisTag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    minValue: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n    defaultValue: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n    maxValue: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n    flags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    nameID: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    name: (t)=>t.parent.parent.name.records.fontFeatures[t.nameID]\n});\nlet $551f92fdd501454e$var$Instance = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    nameID: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    name: (t)=>t.parent.parent.name.records.fontFeatures[t.nameID],\n    flags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    coord: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32, (t)=>t.parent.axisCount),\n    postscriptNameID: new restructure__WEBPACK_IMPORTED_MODULE_0__.Optional(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (t)=>t.parent.instanceSize - t._currentOffset > 0)\n});\nvar $551f92fdd501454e$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n    offsetToData: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    countSizePairs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    axisCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    axisSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    instanceCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    instanceSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    axis: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($551f92fdd501454e$var$Axis, \"axisCount\"),\n    instance: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($551f92fdd501454e$var$Instance, \"instanceCount\")\n});\nlet $d03801ee7a5f4d7c$var$shortFrac = new restructure__WEBPACK_IMPORTED_MODULE_0__.Fixed(16, \"BE\", 14);\nclass $d03801ee7a5f4d7c$var$Offset {\n    static decode(stream, parent) {\n        // In short format, offsets are multiplied by 2.\n        // This doesn't seem to be documented by Apple, but it\n        // is implemented this way in Freetype.\n        return parent.flags ? stream.readUInt32BE() : stream.readUInt16BE() * 2;\n    }\n}\nlet $d03801ee7a5f4d7c$var$gvar = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16),\n    axisCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    globalCoordCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    globalCoords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($d03801ee7a5f4d7c$var$shortFrac, \"axisCount\"), \"globalCoordCount\")),\n    glyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    flags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    offsetToData: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    offsets: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer($d03801ee7a5f4d7c$var$Offset, \"void\", {\n        relativeTo: (ctx)=>ctx.offsetToData,\n        allowNull: false\n    }), (t)=>t.glyphCount + 1)\n});\nvar $d03801ee7a5f4d7c$export$2e2bcd8739ae039 = $d03801ee7a5f4d7c$var$gvar;\nlet $70ffc7fec5b89b5e$var$ClassTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    coverage: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    subFeatureFlags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    stateTable: new $c35aa0a165e05d15$export$105027425199cc51\n});\nlet $70ffc7fec5b89b5e$var$WidthDeltaRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    justClass: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    beforeGrowLimit: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n    beforeShrinkLimit: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n    afterGrowLimit: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n    afterShrinkLimit: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n    growFlags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    shrinkFlags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n});\nlet $70ffc7fec5b89b5e$var$WidthDeltaCluster = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($70ffc7fec5b89b5e$var$WidthDeltaRecord, restructure__WEBPACK_IMPORTED_MODULE_0__.uint32);\nlet $70ffc7fec5b89b5e$var$ActionData = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(\"actionType\", {\n    0: {\n        lowerLimit: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n        upperLimit: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n        order: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        glyphs: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16)\n    },\n    1: {\n        addGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n    },\n    2: {\n        substThreshold: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n        addGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        substGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n    },\n    3: {},\n    4: {\n        variationAxis: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        minimumLimit: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n        noStretchValue: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n        maximumLimit: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32\n    },\n    5: {\n        flags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        glyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n    }\n});\nlet $70ffc7fec5b89b5e$var$Action = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    actionClass: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    actionType: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    actionLength: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    actionData: $70ffc7fec5b89b5e$var$ActionData,\n    padding: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, (t)=>t.actionLength - t._currentOffset)\n});\nlet $70ffc7fec5b89b5e$var$PostcompensationAction = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($70ffc7fec5b89b5e$var$Action, restructure__WEBPACK_IMPORTED_MODULE_0__.uint32);\nlet $70ffc7fec5b89b5e$var$PostCompensationTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    lookupTable: new $c35aa0a165e05d15$export$8351f8c2ae2f103c(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $70ffc7fec5b89b5e$var$PostcompensationAction))\n});\nlet $70ffc7fec5b89b5e$var$JustificationTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    classTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $70ffc7fec5b89b5e$var$ClassTable, {\n        type: \"parent\"\n    }),\n    wdcOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    postCompensationTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $70ffc7fec5b89b5e$var$PostCompensationTable, {\n        type: \"parent\"\n    }),\n    widthDeltaClusters: new $c35aa0a165e05d15$export$8351f8c2ae2f103c(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $70ffc7fec5b89b5e$var$WidthDeltaCluster, {\n        type: \"parent\",\n        relativeTo: (ctx)=>ctx.wdcOffset\n    }))\n});\nvar $70ffc7fec5b89b5e$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    format: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    horizontal: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $70ffc7fec5b89b5e$var$JustificationTable),\n    vertical: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $70ffc7fec5b89b5e$var$JustificationTable)\n});\nlet $dd743f90b6270daa$var$LigatureData = {\n    action: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n};\nlet $dd743f90b6270daa$var$ContextualData = {\n    markIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    currentIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n};\nlet $dd743f90b6270daa$var$InsertionData = {\n    currentInsertIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    markedInsertIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n};\nlet $dd743f90b6270daa$var$SubstitutionTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    items: new $c35aa0a165e05d15$export$c5af1eebc882e39a(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new $c35aa0a165e05d15$export$8351f8c2ae2f103c))\n});\nlet $dd743f90b6270daa$var$SubtableData = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(\"type\", {\n    0: {\n        stateTable: new $c35aa0a165e05d15$export$79f7d93d790934ba\n    },\n    1: {\n        stateTable: new $c35aa0a165e05d15$export$79f7d93d790934ba($dd743f90b6270daa$var$ContextualData),\n        substitutionTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $dd743f90b6270daa$var$SubstitutionTable)\n    },\n    2: {\n        stateTable: new $c35aa0a165e05d15$export$79f7d93d790934ba($dd743f90b6270daa$var$LigatureData),\n        ligatureActions: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new $c35aa0a165e05d15$export$c5af1eebc882e39a(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32)),\n        components: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new $c35aa0a165e05d15$export$c5af1eebc882e39a(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16)),\n        ligatureList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new $c35aa0a165e05d15$export$c5af1eebc882e39a(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16))\n    },\n    4: {\n        lookupTable: new $c35aa0a165e05d15$export$8351f8c2ae2f103c\n    },\n    5: {\n        stateTable: new $c35aa0a165e05d15$export$79f7d93d790934ba($dd743f90b6270daa$var$InsertionData),\n        insertionActions: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new $c35aa0a165e05d15$export$c5af1eebc882e39a(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16))\n    }\n});\nlet $dd743f90b6270daa$var$Subtable = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    coverage: restructure__WEBPACK_IMPORTED_MODULE_0__.uint24,\n    type: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    subFeatureFlags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    table: $dd743f90b6270daa$var$SubtableData,\n    padding: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, (t)=>t.length - t._currentOffset)\n});\nlet $dd743f90b6270daa$var$FeatureEntry = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    featureType: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    featureSetting: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    enableFlags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    disableFlags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32\n});\nlet $dd743f90b6270daa$var$MorxChain = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    defaultFlags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    chainLength: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    nFeatureEntries: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    nSubtables: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    features: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($dd743f90b6270daa$var$FeatureEntry, \"nFeatureEntries\"),\n    subtables: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($dd743f90b6270daa$var$Subtable, \"nSubtables\")\n});\nvar $dd743f90b6270daa$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    unused: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16),\n    nChains: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    chains: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($dd743f90b6270daa$var$MorxChain, \"nChains\")\n});\nlet $40e500cc5163d19f$var$OpticalBounds = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    left: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    top: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    right: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    bottom: restructure__WEBPACK_IMPORTED_MODULE_0__.int16\n});\nvar $40e500cc5163d19f$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n    format: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    lookupTable: new $c35aa0a165e05d15$export$8351f8c2ae2f103c($40e500cc5163d19f$var$OpticalBounds)\n});\nlet $60d88718e7e1fa97$var$tables = {};\nvar $60d88718e7e1fa97$export$2e2bcd8739ae039 = $60d88718e7e1fa97$var$tables;\n$60d88718e7e1fa97$var$tables.cmap = $9aad45a64cf8e4b5$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.head = $b41847595480ce3a$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.hhea = $5fda302e2516d0c7$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.hmtx = $28788c978325a3e1$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.maxp = $9e68d972c1fae2a9$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.name = $866b9b7dd32d7242$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables[\"OS/2\"] = $268023eac606db57$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.post = $5287343c85bea17e$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.fpgm = $6f2fae1f8d2b4b41$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.loca = $cae48a5e791773ec$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.prep = $7b12cfca10f7f884$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables[\"cvt \"] = $5768e6ef8b1a512a$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.glyf = $06e9f2dae5795013$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables[\"CFF \"] = $8770fc79268fa3c2$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables[\"CFF2\"] = $8770fc79268fa3c2$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.VORG = $79f2eb50e4490e51$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.EBLC = $234c291eab07e474$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.CBLC = $60d88718e7e1fa97$var$tables.EBLC;\n$60d88718e7e1fa97$var$tables.sbix = $55d04373f0cac44e$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.COLR = $0e59eccfa3005d9d$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.CPAL = $23affa36a12f7915$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.BASE = $9fffe61eb0785f74$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.GDEF = $418face38567ee6e$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.GPOS = $010e157f6d8a40e9$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.GSUB = $7176ea6bb7dcf1c6$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.JSTF = $71e9e74bb6366bce$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.HVAR = $706225b6909f9418$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.DSIG = $4a144b8ae6f53b7c$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.gasp = $a2086c3965d7b105$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.hdmx = $de83746c6c1c8559$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.kern = $5a2237650c44652a$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.LTSH = $1eadf070c8b34e48$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.PCLT = $8eb2f7302ef75084$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.VDMX = $8223b0d67f5fd7c9$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.vhea = $4b17ac6a75c85897$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.vmtx = $a9f9c5185d84186d$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.avar = $d9cf6d6467871d68$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.bsln = $53e6946cfb72ad0c$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.feat = $117550c71e13cb3d$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.fvar = $551f92fdd501454e$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.gvar = $d03801ee7a5f4d7c$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.just = $70ffc7fec5b89b5e$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.morx = $dd743f90b6270daa$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.opbd = $40e500cc5163d19f$export$2e2bcd8739ae039;\nlet $d5e01a2298150c9a$var$TableEntry = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    checkSum: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    offset: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, \"void\", {\n        type: \"global\"\n    }),\n    length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32\n});\nlet $d5e01a2298150c9a$var$Directory = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    numTables: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    searchRange: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    entrySelector: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    rangeShift: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    tables: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($d5e01a2298150c9a$var$TableEntry, \"numTables\")\n});\n$d5e01a2298150c9a$var$Directory.process = function() {\n    let tables = {};\n    for (let table of this.tables)tables[table.tag] = table;\n    this.tables = tables;\n};\n$d5e01a2298150c9a$var$Directory.preEncode = function(stream) {\n    let tables = [];\n    for(let tag in this.tables){\n        let table = this.tables[tag];\n        if (table) tables.push({\n            tag: tag,\n            checkSum: 0,\n            offset: new restructure__WEBPACK_IMPORTED_MODULE_0__.VoidPointer($60d88718e7e1fa97$export$2e2bcd8739ae039[tag], table),\n            length: $60d88718e7e1fa97$export$2e2bcd8739ae039[tag].size(table)\n        });\n    }\n    this.tag = \"true\";\n    this.numTables = tables.length;\n    this.tables = tables;\n    let maxExponentFor2 = Math.floor(Math.log(this.numTables) / Math.LN2);\n    let maxPowerOf2 = Math.pow(2, maxExponentFor2);\n    this.searchRange = maxPowerOf2 * 16;\n    this.entrySelector = Math.log(maxPowerOf2) / Math.LN2;\n    this.rangeShift = this.numTables * 16 - this.searchRange;\n};\nvar $d5e01a2298150c9a$export$2e2bcd8739ae039 = $d5e01a2298150c9a$var$Directory;\nfunction $f3ad94c9f84f4d57$export$2e0ae67339d5f1ac(arr, cmp) {\n    let min = 0;\n    let max = arr.length - 1;\n    while(min <= max){\n        let mid = min + max >> 1;\n        let res = cmp(arr[mid]);\n        if (res < 0) max = mid - 1;\n        else if (res > 0) min = mid + 1;\n        else return mid;\n    }\n    return -1;\n}\nfunction $f3ad94c9f84f4d57$export$d02631cccf789723(index, end) {\n    let $f3ad94c9f84f4d57$export$d02631cccf789723 = [];\n    while(index < end)$f3ad94c9f84f4d57$export$d02631cccf789723.push(index++);\n    return $f3ad94c9f84f4d57$export$d02631cccf789723;\n}\nvar _class;\nlet $5d24cfe1a4cd83bb$export$2e2bcd8739ae039 = (_class = class $5d24cfe1a4cd83bb$export$2e2bcd8739ae039 {\n    constructor(cmapTable){\n        // Attempt to find a Unicode cmap first\n        this.encoding = null;\n        this.cmap = this.findSubtable(cmapTable, [\n            // 32-bit subtables\n            [\n                3,\n                10\n            ],\n            [\n                0,\n                6\n            ],\n            [\n                0,\n                4\n            ],\n            // 16-bit subtables\n            [\n                3,\n                1\n            ],\n            [\n                0,\n                3\n            ],\n            [\n                0,\n                2\n            ],\n            [\n                0,\n                1\n            ],\n            [\n                0,\n                0\n            ]\n        ]);\n        // If not unicode cmap was found, and iconv-lite is installed,\n        // take the first table with a supported encoding.\n        if (!this.cmap && _iconv_lite_cjs__WEBPACK_IMPORTED_MODULE_5__) for (let cmap of cmapTable.tables){\n            let encoding = $111d7d948974b54a$export$badc544e0651b6b1(cmap.platformID, cmap.encodingID, cmap.table.language - 1);\n            if (_iconv_lite_cjs__WEBPACK_IMPORTED_MODULE_5__.encodingExists(encoding)) {\n                this.cmap = cmap.table;\n                this.encoding = encoding;\n            }\n        }\n        if (!this.cmap) throw new Error(\"Could not find a supported cmap table\");\n        this.uvs = this.findSubtable(cmapTable, [\n            [\n                0,\n                5\n            ]\n        ]);\n        if (this.uvs && this.uvs.version !== 14) this.uvs = null;\n    }\n    findSubtable(cmapTable, pairs) {\n        for (let [platformID, encodingID] of pairs)for (let cmap of cmapTable.tables){\n            if (cmap.platformID === platformID && cmap.encodingID === encodingID) return cmap.table;\n        }\n        return null;\n    }\n    lookup(codepoint, variationSelector) {\n        // If there is no Unicode cmap in this font, we need to re-encode\n        // the codepoint in the encoding that the cmap supports.\n        if (this.encoding) {\n            let buf = _iconv_lite_cjs__WEBPACK_IMPORTED_MODULE_5__.encode(String.fromCodePoint(codepoint), this.encoding);\n            codepoint = 0;\n            for(let i = 0; i < buf.length; i++)codepoint = codepoint << 8 | buf[i];\n        // Otherwise, try to get a Unicode variation selector for this codepoint if one is provided.\n        } else if (variationSelector) {\n            let gid = this.getVariationSelector(codepoint, variationSelector);\n            if (gid) return gid;\n        }\n        let cmap = this.cmap;\n        switch(cmap.version){\n            case 0:\n                return cmap.codeMap.get(codepoint) || 0;\n            case 4:\n                {\n                    let min = 0;\n                    let max = cmap.segCount - 1;\n                    while(min <= max){\n                        let mid = min + max >> 1;\n                        if (codepoint < cmap.startCode.get(mid)) max = mid - 1;\n                        else if (codepoint > cmap.endCode.get(mid)) min = mid + 1;\n                        else {\n                            let rangeOffset = cmap.idRangeOffset.get(mid);\n                            let gid;\n                            if (rangeOffset === 0) gid = codepoint + cmap.idDelta.get(mid);\n                            else {\n                                let index = rangeOffset / 2 + (codepoint - cmap.startCode.get(mid)) - (cmap.segCount - mid);\n                                gid = cmap.glyphIndexArray.get(index) || 0;\n                                if (gid !== 0) gid += cmap.idDelta.get(mid);\n                            }\n                            return gid & 0xffff;\n                        }\n                    }\n                    return 0;\n                }\n            case 8:\n                throw new Error(\"TODO: cmap format 8\");\n            case 6:\n            case 10:\n                return cmap.glyphIndices.get(codepoint - cmap.firstCode) || 0;\n            case 12:\n            case 13:\n                {\n                    let min = 0;\n                    let max = cmap.nGroups - 1;\n                    while(min <= max){\n                        let mid = min + max >> 1;\n                        let group = cmap.groups.get(mid);\n                        if (codepoint < group.startCharCode) max = mid - 1;\n                        else if (codepoint > group.endCharCode) min = mid + 1;\n                        else {\n                            if (cmap.version === 12) return group.glyphID + (codepoint - group.startCharCode);\n                            else return group.glyphID;\n                        }\n                    }\n                    return 0;\n                }\n            case 14:\n                throw new Error(\"TODO: cmap format 14\");\n            default:\n                throw new Error(`Unknown cmap format ${cmap.version}`);\n        }\n    }\n    getVariationSelector(codepoint, variationSelector) {\n        if (!this.uvs) return 0;\n        let selectors = this.uvs.varSelectors.toArray();\n        let i = $f3ad94c9f84f4d57$export$2e0ae67339d5f1ac(selectors, (x)=>variationSelector - x.varSelector);\n        let sel = selectors[i];\n        if (i !== -1 && sel.defaultUVS) i = $f3ad94c9f84f4d57$export$2e0ae67339d5f1ac(sel.defaultUVS, (x)=>codepoint < x.startUnicodeValue ? -1 : codepoint > x.startUnicodeValue + x.additionalCount ? 1 : 0);\n        if (i !== -1 && sel.nonDefaultUVS) {\n            i = $f3ad94c9f84f4d57$export$2e0ae67339d5f1ac(sel.nonDefaultUVS, (x)=>codepoint - x.unicodeValue);\n            if (i !== -1) return sel.nonDefaultUVS[i].glyphID;\n        }\n        return 0;\n    }\n    getCharacterSet() {\n        let cmap = this.cmap;\n        switch(cmap.version){\n            case 0:\n                return $f3ad94c9f84f4d57$export$d02631cccf789723(0, cmap.codeMap.length);\n            case 4:\n                {\n                    let res = [];\n                    let endCodes = cmap.endCode.toArray();\n                    for(let i = 0; i < endCodes.length; i++){\n                        let tail = endCodes[i] + 1;\n                        let start = cmap.startCode.get(i);\n                        res.push(...$f3ad94c9f84f4d57$export$d02631cccf789723(start, tail));\n                    }\n                    return res;\n                }\n            case 8:\n                throw new Error(\"TODO: cmap format 8\");\n            case 6:\n            case 10:\n                return $f3ad94c9f84f4d57$export$d02631cccf789723(cmap.firstCode, cmap.firstCode + cmap.glyphIndices.length);\n            case 12:\n            case 13:\n                {\n                    let res = [];\n                    for (let group of cmap.groups.toArray())res.push(...$f3ad94c9f84f4d57$export$d02631cccf789723(group.startCharCode, group.endCharCode + 1));\n                    return res;\n                }\n            case 14:\n                throw new Error(\"TODO: cmap format 14\");\n            default:\n                throw new Error(`Unknown cmap format ${cmap.version}`);\n        }\n    }\n    codePointsForGlyph(gid) {\n        let cmap = this.cmap;\n        switch(cmap.version){\n            case 0:\n                {\n                    let res = [];\n                    for(let i = 0; i < 256; i++)if (cmap.codeMap.get(i) === gid) res.push(i);\n                    return res;\n                }\n            case 4:\n                {\n                    let res = [];\n                    for(let i = 0; i < cmap.segCount; i++){\n                        let end = cmap.endCode.get(i);\n                        let start = cmap.startCode.get(i);\n                        let rangeOffset = cmap.idRangeOffset.get(i);\n                        let delta = cmap.idDelta.get(i);\n                        for(var c = start; c <= end; c++){\n                            let g = 0;\n                            if (rangeOffset === 0) g = c + delta;\n                            else {\n                                let index = rangeOffset / 2 + (c - start) - (cmap.segCount - i);\n                                g = cmap.glyphIndexArray.get(index) || 0;\n                                if (g !== 0) g += delta;\n                            }\n                            if (g === gid) res.push(c);\n                        }\n                    }\n                    return res;\n                }\n            case 12:\n                {\n                    let res = [];\n                    for (let group of cmap.groups.toArray())if (gid >= group.glyphID && gid <= group.glyphID + (group.endCharCode - group.startCharCode)) res.push(group.startCharCode + (gid - group.glyphID));\n                    return res;\n                }\n            case 13:\n                {\n                    let res = [];\n                    for (let group of cmap.groups.toArray())if (gid === group.glyphID) res.push(...$f3ad94c9f84f4d57$export$d02631cccf789723(group.startCharCode, group.endCharCode + 1));\n                    return res;\n                }\n            default:\n                throw new Error(`Unknown cmap format ${cmap.version}`);\n        }\n    }\n}, (0,_swc_helpers__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(_class.prototype, \"getCharacterSet\", [\n    $df9bc573962369ff$export$69a3209f1a06c04d\n], Object.getOwnPropertyDescriptor(_class.prototype, \"getCharacterSet\"), _class.prototype), (0,_swc_helpers__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(_class.prototype, \"codePointsForGlyph\", [\n    $df9bc573962369ff$export$69a3209f1a06c04d\n], Object.getOwnPropertyDescriptor(_class.prototype, \"codePointsForGlyph\"), _class.prototype), _class);\nclass $8526e21034212dc1$export$2e2bcd8739ae039 {\n    constructor(font){\n        this.kern = font.kern;\n    }\n    process(glyphs, positions) {\n        for(let glyphIndex = 0; glyphIndex < glyphs.length - 1; glyphIndex++){\n            let left = glyphs[glyphIndex].id;\n            let right = glyphs[glyphIndex + 1].id;\n            positions[glyphIndex].xAdvance += this.getKerning(left, right);\n        }\n    }\n    getKerning(left, right) {\n        let res = 0;\n        for (let table of this.kern.tables){\n            if (table.coverage.crossStream) continue;\n            switch(table.version){\n                case 0:\n                    if (!table.coverage.horizontal) continue;\n                    break;\n                case 1:\n                    if (table.coverage.vertical || table.coverage.variation) continue;\n                    break;\n                default:\n                    throw new Error(`Unsupported kerning table version ${table.version}`);\n            }\n            let val = 0;\n            let s = table.subtable;\n            switch(table.format){\n                case 0:\n                    let pairIdx = $f3ad94c9f84f4d57$export$2e0ae67339d5f1ac(s.pairs, function(pair) {\n                        return left - pair.left || right - pair.right;\n                    });\n                    if (pairIdx >= 0) val = s.pairs[pairIdx].value;\n                    break;\n                case 2:\n                    let leftOffset = 0, rightOffset = 0;\n                    if (left >= s.leftTable.firstGlyph && left < s.leftTable.firstGlyph + s.leftTable.nGlyphs) leftOffset = s.leftTable.offsets[left - s.leftTable.firstGlyph];\n                    else leftOffset = s.array.off;\n                    if (right >= s.rightTable.firstGlyph && right < s.rightTable.firstGlyph + s.rightTable.nGlyphs) rightOffset = s.rightTable.offsets[right - s.rightTable.firstGlyph];\n                    let index = (leftOffset + rightOffset - s.array.off) / 2;\n                    val = s.array.values.get(index);\n                    break;\n                case 3:\n                    if (left >= s.glyphCount || right >= s.glyphCount) return 0;\n                    val = s.kernValue[s.kernIndex[s.leftClass[left] * s.rightClassCount + s.rightClass[right]]];\n                    break;\n                default:\n                    throw new Error(`Unsupported kerning sub-table format ${table.format}`);\n            }\n            // Microsoft supports the override flag, which resets the result\n            // Otherwise, the sum of the results from all subtables is returned\n            if (table.coverage.override) res = val;\n            else res += val;\n        }\n        return res;\n    }\n}\nclass $e4967fef9afc586a$export$2e2bcd8739ae039 {\n    constructor(font){\n        this.font = font;\n    }\n    positionGlyphs(glyphs, positions) {\n        // find each base + mark cluster, and position the marks relative to the base\n        let clusterStart = 0;\n        let clusterEnd = 0;\n        for(let index = 0; index < glyphs.length; index++){\n            let glyph = glyphs[index];\n            if (glyph.isMark) clusterEnd = index;\n            else {\n                if (clusterStart !== clusterEnd) this.positionCluster(glyphs, positions, clusterStart, clusterEnd);\n                clusterStart = clusterEnd = index;\n            }\n        }\n        if (clusterStart !== clusterEnd) this.positionCluster(glyphs, positions, clusterStart, clusterEnd);\n        return positions;\n    }\n    positionCluster(glyphs, positions, clusterStart, clusterEnd) {\n        let base = glyphs[clusterStart];\n        let baseBox = base.cbox.copy();\n        // adjust bounding box for ligature glyphs\n        if (base.codePoints.length > 1) baseBox.minX += (base.codePoints.length - 1) * baseBox.width / base.codePoints.length;\n        let xOffset = -positions[clusterStart].xAdvance;\n        let yOffset = 0;\n        let yGap = this.font.unitsPerEm / 16;\n        // position each of the mark glyphs relative to the base glyph\n        for(let index = clusterStart + 1; index <= clusterEnd; index++){\n            let mark = glyphs[index];\n            let markBox = mark.cbox;\n            let position = positions[index];\n            let combiningClass = this.getCombiningClass(mark.codePoints[0]);\n            if (combiningClass !== \"Not_Reordered\") {\n                position.xOffset = position.yOffset = 0;\n                // x positioning\n                switch(combiningClass){\n                    case \"Double_Above\":\n                    case \"Double_Below\":\n                        // LTR. TODO: RTL support.\n                        position.xOffset += baseBox.minX - markBox.width / 2 - markBox.minX;\n                        break;\n                    case \"Attached_Below_Left\":\n                    case \"Below_Left\":\n                    case \"Above_Left\":\n                        // left align\n                        position.xOffset += baseBox.minX - markBox.minX;\n                        break;\n                    case \"Attached_Above_Right\":\n                    case \"Below_Right\":\n                    case \"Above_Right\":\n                        // right align\n                        position.xOffset += baseBox.maxX - markBox.width - markBox.minX;\n                        break;\n                    default:\n                        // center align\n                        position.xOffset += baseBox.minX + (baseBox.width - markBox.width) / 2 - markBox.minX;\n                }\n                // y positioning\n                switch(combiningClass){\n                    case \"Double_Below\":\n                    case \"Below_Left\":\n                    case \"Below\":\n                    case \"Below_Right\":\n                    case \"Attached_Below_Left\":\n                    case \"Attached_Below\":\n                        // add a small gap between the glyphs if they are not attached\n                        if (combiningClass === \"Attached_Below_Left\" || combiningClass === \"Attached_Below\") baseBox.minY += yGap;\n                        position.yOffset = -baseBox.minY - markBox.maxY;\n                        baseBox.minY += markBox.height;\n                        break;\n                    case \"Double_Above\":\n                    case \"Above_Left\":\n                    case \"Above\":\n                    case \"Above_Right\":\n                    case \"Attached_Above\":\n                    case \"Attached_Above_Right\":\n                        // add a small gap between the glyphs if they are not attached\n                        if (combiningClass === \"Attached_Above\" || combiningClass === \"Attached_Above_Right\") baseBox.maxY += yGap;\n                        position.yOffset = baseBox.maxY - markBox.minY;\n                        baseBox.maxY += markBox.height;\n                        break;\n                }\n                position.xAdvance = position.yAdvance = 0;\n                position.xOffset += xOffset;\n                position.yOffset += yOffset;\n            } else {\n                xOffset -= position.xAdvance;\n                yOffset -= position.yAdvance;\n            }\n        }\n        return;\n    }\n    getCombiningClass(codePoint) {\n        let combiningClass = unicode_properties__WEBPACK_IMPORTED_MODULE_6__[\"default\"].getCombiningClass(codePoint);\n        // Thai / Lao need some per-character work\n        if ((codePoint & -256) === 0x0e00) {\n            if (combiningClass === \"Not_Reordered\") switch(codePoint){\n                case 0x0e31:\n                case 0x0e34:\n                case 0x0e35:\n                case 0x0e36:\n                case 0x0e37:\n                case 0x0e47:\n                case 0x0e4c:\n                case 0x0e3d:\n                case 0x0e4e:\n                    return \"Above_Right\";\n                case 0x0eb1:\n                case 0x0eb4:\n                case 0x0eb5:\n                case 0x0eb6:\n                case 0x0eb7:\n                case 0x0ebb:\n                case 0x0ecc:\n                case 0x0ecd:\n                    return \"Above\";\n                case 0x0ebc:\n                    return \"Below\";\n            }\n            else if (codePoint === 0x0e3a) return \"Below_Right\";\n        }\n        switch(combiningClass){\n            // Hebrew\n            case \"CCC10\":\n            case \"CCC11\":\n            case \"CCC12\":\n            case \"CCC13\":\n            case \"CCC14\":\n            case \"CCC15\":\n            case \"CCC16\":\n            case \"CCC17\":\n            case \"CCC18\":\n            case \"CCC20\":\n            case \"CCC22\":\n                return \"Below\";\n            case \"CCC23\":\n                return \"Attached_Above\";\n            case \"CCC24\":\n                return \"Above_Right\";\n            case \"CCC25\":\n            case \"CCC19\":\n                return \"Above_Left\";\n            case \"CCC26\":\n                return \"Above\";\n            case \"CCC21\":\n                break;\n            // Arabic and Syriac\n            case \"CCC27\":\n            case \"CCC28\":\n            case \"CCC30\":\n            case \"CCC31\":\n            case \"CCC33\":\n            case \"CCC34\":\n            case \"CCC35\":\n            case \"CCC36\":\n                return \"Above\";\n            case \"CCC29\":\n            case \"CCC32\":\n                return \"Below\";\n            // Thai\n            case \"CCC103\":\n                return \"Below_Right\";\n            case \"CCC107\":\n                return \"Above_Right\";\n            // Lao\n            case \"CCC118\":\n                return \"Below\";\n            case \"CCC122\":\n                return \"Above\";\n            // Tibetan\n            case \"CCC129\":\n            case \"CCC132\":\n                return \"Below\";\n            case \"CCC130\":\n                return \"Above\";\n        }\n        return combiningClass;\n    }\n}\nclass $fcb46e14b01ea01f$export$2e2bcd8739ae039 {\n    constructor(minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity){\n        /**\n     * The minimum X position in the bounding box\n     * @type {number}\n     */ this.minX = minX;\n        /**\n     * The minimum Y position in the bounding box\n     * @type {number}\n     */ this.minY = minY;\n        /**\n     * The maxmimum X position in the bounding box\n     * @type {number}\n     */ this.maxX = maxX;\n        /**\n     * The maxmimum Y position in the bounding box\n     * @type {number}\n     */ this.maxY = maxY;\n    }\n    /**\n   * The width of the bounding box\n   * @type {number}\n   */ get width() {\n        return this.maxX - this.minX;\n    }\n    /**\n   * The height of the bounding box\n   * @type {number}\n   */ get height() {\n        return this.maxY - this.minY;\n    }\n    addPoint(x, y) {\n        if (Math.abs(x) !== Infinity) {\n            if (x < this.minX) this.minX = x;\n            if (x > this.maxX) this.maxX = x;\n        }\n        if (Math.abs(y) !== Infinity) {\n            if (y < this.minY) this.minY = y;\n            if (y > this.maxY) this.maxY = y;\n        }\n    }\n    copy() {\n        return new $fcb46e14b01ea01f$export$2e2bcd8739ae039(this.minX, this.minY, this.maxX, this.maxY);\n    }\n}\n// This maps the Unicode Script property to an OpenType script tag\n// Data from http://www.microsoft.com/typography/otspec/scripttags.htm\n// and http://www.unicode.org/Public/UNIDATA/PropertyValueAliases.txt.\nconst $a5878e4f4663c9e2$var$UNICODE_SCRIPTS = {\n    Caucasian_Albanian: \"aghb\",\n    Arabic: \"arab\",\n    Imperial_Aramaic: \"armi\",\n    Armenian: \"armn\",\n    Avestan: \"avst\",\n    Balinese: \"bali\",\n    Bamum: \"bamu\",\n    Bassa_Vah: \"bass\",\n    Batak: \"batk\",\n    Bengali: [\n        \"bng2\",\n        \"beng\"\n    ],\n    Bopomofo: \"bopo\",\n    Brahmi: \"brah\",\n    Braille: \"brai\",\n    Buginese: \"bugi\",\n    Buhid: \"buhd\",\n    Chakma: \"cakm\",\n    Canadian_Aboriginal: \"cans\",\n    Carian: \"cari\",\n    Cham: \"cham\",\n    Cherokee: \"cher\",\n    Coptic: \"copt\",\n    Cypriot: \"cprt\",\n    Cyrillic: \"cyrl\",\n    Devanagari: [\n        \"dev2\",\n        \"deva\"\n    ],\n    Deseret: \"dsrt\",\n    Duployan: \"dupl\",\n    Egyptian_Hieroglyphs: \"egyp\",\n    Elbasan: \"elba\",\n    Ethiopic: \"ethi\",\n    Georgian: \"geor\",\n    Glagolitic: \"glag\",\n    Gothic: \"goth\",\n    Grantha: \"gran\",\n    Greek: \"grek\",\n    Gujarati: [\n        \"gjr2\",\n        \"gujr\"\n    ],\n    Gurmukhi: [\n        \"gur2\",\n        \"guru\"\n    ],\n    Hangul: \"hang\",\n    Han: \"hani\",\n    Hanunoo: \"hano\",\n    Hebrew: \"hebr\",\n    Hiragana: \"hira\",\n    Pahawh_Hmong: \"hmng\",\n    Katakana_Or_Hiragana: \"hrkt\",\n    Old_Italic: \"ital\",\n    Javanese: \"java\",\n    Kayah_Li: \"kali\",\n    Katakana: \"kana\",\n    Kharoshthi: \"khar\",\n    Khmer: \"khmr\",\n    Khojki: \"khoj\",\n    Kannada: [\n        \"knd2\",\n        \"knda\"\n    ],\n    Kaithi: \"kthi\",\n    Tai_Tham: \"lana\",\n    Lao: \"lao \",\n    Latin: \"latn\",\n    Lepcha: \"lepc\",\n    Limbu: \"limb\",\n    Linear_A: \"lina\",\n    Linear_B: \"linb\",\n    Lisu: \"lisu\",\n    Lycian: \"lyci\",\n    Lydian: \"lydi\",\n    Mahajani: \"mahj\",\n    Mandaic: \"mand\",\n    Manichaean: \"mani\",\n    Mende_Kikakui: \"mend\",\n    Meroitic_Cursive: \"merc\",\n    Meroitic_Hieroglyphs: \"mero\",\n    Malayalam: [\n        \"mlm2\",\n        \"mlym\"\n    ],\n    Modi: \"modi\",\n    Mongolian: \"mong\",\n    Mro: \"mroo\",\n    Meetei_Mayek: \"mtei\",\n    Myanmar: [\n        \"mym2\",\n        \"mymr\"\n    ],\n    Old_North_Arabian: \"narb\",\n    Nabataean: \"nbat\",\n    Nko: \"nko \",\n    Ogham: \"ogam\",\n    Ol_Chiki: \"olck\",\n    Old_Turkic: \"orkh\",\n    Oriya: [\n        \"ory2\",\n        \"orya\"\n    ],\n    Osmanya: \"osma\",\n    Palmyrene: \"palm\",\n    Pau_Cin_Hau: \"pauc\",\n    Old_Permic: \"perm\",\n    Phags_Pa: \"phag\",\n    Inscriptional_Pahlavi: \"phli\",\n    Psalter_Pahlavi: \"phlp\",\n    Phoenician: \"phnx\",\n    Miao: \"plrd\",\n    Inscriptional_Parthian: \"prti\",\n    Rejang: \"rjng\",\n    Runic: \"runr\",\n    Samaritan: \"samr\",\n    Old_South_Arabian: \"sarb\",\n    Saurashtra: \"saur\",\n    Shavian: \"shaw\",\n    Sharada: \"shrd\",\n    Siddham: \"sidd\",\n    Khudawadi: \"sind\",\n    Sinhala: \"sinh\",\n    Sora_Sompeng: \"sora\",\n    Sundanese: \"sund\",\n    Syloti_Nagri: \"sylo\",\n    Syriac: \"syrc\",\n    Tagbanwa: \"tagb\",\n    Takri: \"takr\",\n    Tai_Le: \"tale\",\n    New_Tai_Lue: \"talu\",\n    Tamil: [\n        \"tml2\",\n        \"taml\"\n    ],\n    Tai_Viet: \"tavt\",\n    Telugu: [\n        \"tel2\",\n        \"telu\"\n    ],\n    Tifinagh: \"tfng\",\n    Tagalog: \"tglg\",\n    Thaana: \"thaa\",\n    Thai: \"thai\",\n    Tibetan: \"tibt\",\n    Tirhuta: \"tirh\",\n    Ugaritic: \"ugar\",\n    Vai: \"vai \",\n    Warang_Citi: \"wara\",\n    Old_Persian: \"xpeo\",\n    Cuneiform: \"xsux\",\n    Yi: \"yi  \",\n    Inherited: \"zinh\",\n    Common: \"zyyy\",\n    Unknown: \"zzzz\"\n};\nconst $a5878e4f4663c9e2$var$OPENTYPE_SCRIPTS = {};\nfor(let script in $a5878e4f4663c9e2$var$UNICODE_SCRIPTS){\n    let tag = $a5878e4f4663c9e2$var$UNICODE_SCRIPTS[script];\n    if (Array.isArray(tag)) for (let t of tag)$a5878e4f4663c9e2$var$OPENTYPE_SCRIPTS[t] = script;\n    else $a5878e4f4663c9e2$var$OPENTYPE_SCRIPTS[tag] = script;\n}\nfunction $a5878e4f4663c9e2$export$b32f0b5f69d65e51(script1) {\n    return $a5878e4f4663c9e2$var$UNICODE_SCRIPTS[script1];\n}\nfunction $a5878e4f4663c9e2$export$ce50e82f12a827a4(tag) {\n    return $a5878e4f4663c9e2$var$OPENTYPE_SCRIPTS[tag];\n}\nfunction $a5878e4f4663c9e2$export$e5cb25e204fb8450(string) {\n    let len = string.length;\n    let idx = 0;\n    while(idx < len){\n        let code = string.charCodeAt(idx++);\n        // Check if this is a high surrogate\n        if (0xd800 <= code && code <= 0xdbff && idx < len) {\n            let next = string.charCodeAt(idx);\n            // Check if this is a low surrogate\n            if (0xdc00 <= next && next <= 0xdfff) {\n                idx++;\n                code = ((code & 0x3FF) << 10) + (next & 0x3FF) + 0x10000;\n            }\n        }\n        let script2 = unicode_properties__WEBPACK_IMPORTED_MODULE_6__[\"default\"].getScript(code);\n        if (script2 !== \"Common\" && script2 !== \"Inherited\" && script2 !== \"Unknown\") return $a5878e4f4663c9e2$var$UNICODE_SCRIPTS[script2];\n    }\n    return $a5878e4f4663c9e2$var$UNICODE_SCRIPTS.Unknown;\n}\nfunction $a5878e4f4663c9e2$export$16fab0757cfc223d(codePoints) {\n    for(let i = 0; i < codePoints.length; i++){\n        let codePoint = codePoints[i];\n        let script3 = unicode_properties__WEBPACK_IMPORTED_MODULE_6__[\"default\"].getScript(codePoint);\n        if (script3 !== \"Common\" && script3 !== \"Inherited\" && script3 !== \"Unknown\") return $a5878e4f4663c9e2$var$UNICODE_SCRIPTS[script3];\n    }\n    return $a5878e4f4663c9e2$var$UNICODE_SCRIPTS.Unknown;\n}\n// The scripts in this map are written from right to left\nconst $a5878e4f4663c9e2$var$RTL = {\n    arab: true,\n    hebr: true,\n    syrc: true,\n    thaa: true,\n    cprt: true,\n    khar: true,\n    phnx: true,\n    \"nko \": true,\n    lydi: true,\n    avst: true,\n    armi: true,\n    phli: true,\n    prti: true,\n    sarb: true,\n    orkh: true,\n    samr: true,\n    mand: true,\n    merc: true,\n    mero: true,\n    // Unicode 7.0 (not listed on http://www.microsoft.com/typography/otspec/scripttags.htm)\n    mani: true,\n    mend: true,\n    nbat: true,\n    narb: true,\n    palm: true,\n    phlp: true // Psalter Pahlavi\n};\nfunction $a5878e4f4663c9e2$export$9fddb9d0dd7d8a54(script4) {\n    if ($a5878e4f4663c9e2$var$RTL[script4]) return \"rtl\";\n    return \"ltr\";\n}\nclass $5a6ae00fa7e614b0$export$2e2bcd8739ae039 {\n    constructor(glyphs, features, script, language, direction){\n        /**\n     * An array of Glyph objects in the run\n     * @type {Glyph[]}\n     */ this.glyphs = glyphs;\n        /**\n     * An array of GlyphPosition objects for each glyph in the run\n     * @type {GlyphPosition[]}\n     */ this.positions = null;\n        /**\n     * The script that was requested for shaping. This was either passed in or detected automatically.\n     * @type {string}\n     */ this.script = script;\n        /**\n     * The language requested for shaping, as passed in. If `null`, the default language for the\n     * script was used.\n     * @type {string}\n     */ this.language = language || null;\n        /**\n     * The direction requested for shaping, as passed in (either ltr or rtl).\n     * If `null`, the default direction of the script is used.\n     * @type {string}\n     */ this.direction = direction || $a5878e4f4663c9e2$export$9fddb9d0dd7d8a54(script);\n        /**\n     * The features requested during shaping. This is a combination of user\n     * specified features and features chosen by the shaper.\n     * @type {object}\n     */ this.features = {};\n        // Convert features to an object\n        if (Array.isArray(features)) for (let tag of features)this.features[tag] = true;\n        else if (typeof features === \"object\") this.features = features;\n    }\n    /**\n   * The total advance width of the run.\n   * @type {number}\n   */ get advanceWidth() {\n        let width = 0;\n        for (let position of this.positions)width += position.xAdvance;\n        return width;\n    }\n    /**\n  * The total advance height of the run.\n  * @type {number}\n  */ get advanceHeight() {\n        let height = 0;\n        for (let position of this.positions)height += position.yAdvance;\n        return height;\n    }\n    /**\n  * The bounding box containing all glyphs in the run.\n  * @type {BBox}\n  */ get bbox() {\n        let bbox = new $fcb46e14b01ea01f$export$2e2bcd8739ae039;\n        let x = 0;\n        let y = 0;\n        for(let index = 0; index < this.glyphs.length; index++){\n            let glyph = this.glyphs[index];\n            let p = this.positions[index];\n            let b = glyph.bbox;\n            bbox.addPoint(b.minX + x + p.xOffset, b.minY + y + p.yOffset);\n            bbox.addPoint(b.maxX + x + p.xOffset, b.maxY + y + p.yOffset);\n            x += p.xAdvance;\n            y += p.yAdvance;\n        }\n        return bbox;\n    }\n}\nclass $4bff5f854806c785$export$2e2bcd8739ae039 {\n    constructor(xAdvance = 0, yAdvance = 0, xOffset = 0, yOffset = 0){\n        /**\n     * The amount to move the virtual pen in the X direction after rendering this glyph.\n     * @type {number}\n     */ this.xAdvance = xAdvance;\n        /**\n     * The amount to move the virtual pen in the Y direction after rendering this glyph.\n     * @type {number}\n     */ this.yAdvance = yAdvance;\n        /**\n     * The offset from the pen position in the X direction at which to render this glyph.\n     * @type {number}\n     */ this.xOffset = xOffset;\n        /**\n     * The offset from the pen position in the Y direction at which to render this glyph.\n     * @type {number}\n     */ this.yOffset = yOffset;\n    }\n}\n// see https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html\n// and /System/Library/Frameworks/CoreText.framework/Versions/A/Headers/SFNTLayoutTypes.h on a Mac\nconst $b603e0ade09ad01e$var$features = {\n    allTypographicFeatures: {\n        code: 0,\n        exclusive: false,\n        allTypeFeatures: 0\n    },\n    ligatures: {\n        code: 1,\n        exclusive: false,\n        requiredLigatures: 0,\n        commonLigatures: 2,\n        rareLigatures: 4,\n        // logos: 6\n        rebusPictures: 8,\n        diphthongLigatures: 10,\n        squaredLigatures: 12,\n        abbrevSquaredLigatures: 14,\n        symbolLigatures: 16,\n        contextualLigatures: 18,\n        historicalLigatures: 20\n    },\n    cursiveConnection: {\n        code: 2,\n        exclusive: true,\n        unconnected: 0,\n        partiallyConnected: 1,\n        cursive: 2\n    },\n    letterCase: {\n        code: 3,\n        exclusive: true\n    },\n    // upperAndLowerCase: 0          # deprecated\n    // allCaps: 1                    # deprecated\n    // allLowerCase: 2               # deprecated\n    // smallCaps: 3                  # deprecated\n    // initialCaps: 4                # deprecated\n    // initialCapsAndSmallCaps: 5    # deprecated\n    verticalSubstitution: {\n        code: 4,\n        exclusive: false,\n        substituteVerticalForms: 0\n    },\n    linguisticRearrangement: {\n        code: 5,\n        exclusive: false,\n        linguisticRearrangement: 0\n    },\n    numberSpacing: {\n        code: 6,\n        exclusive: true,\n        monospacedNumbers: 0,\n        proportionalNumbers: 1,\n        thirdWidthNumbers: 2,\n        quarterWidthNumbers: 3\n    },\n    smartSwash: {\n        code: 8,\n        exclusive: false,\n        wordInitialSwashes: 0,\n        wordFinalSwashes: 2,\n        // lineInitialSwashes: 4\n        // lineFinalSwashes: 6\n        nonFinalSwashes: 8\n    },\n    diacritics: {\n        code: 9,\n        exclusive: true,\n        showDiacritics: 0,\n        hideDiacritics: 1,\n        decomposeDiacritics: 2\n    },\n    verticalPosition: {\n        code: 10,\n        exclusive: true,\n        normalPosition: 0,\n        superiors: 1,\n        inferiors: 2,\n        ordinals: 3,\n        scientificInferiors: 4\n    },\n    fractions: {\n        code: 11,\n        exclusive: true,\n        noFractions: 0,\n        verticalFractions: 1,\n        diagonalFractions: 2\n    },\n    overlappingCharacters: {\n        code: 13,\n        exclusive: false,\n        preventOverlap: 0\n    },\n    typographicExtras: {\n        code: 14,\n        exclusive: false,\n        // hyphensToEmDash: 0\n        // hyphenToEnDash: 2\n        slashedZero: 4\n    },\n    // formInterrobang: 6\n    // smartQuotes: 8\n    // periodsToEllipsis: 10\n    mathematicalExtras: {\n        code: 15,\n        exclusive: false,\n        // hyphenToMinus: 0\n        // asteristoMultiply: 2\n        // slashToDivide: 4\n        // inequalityLigatures: 6\n        // exponents: 8\n        mathematicalGreek: 10\n    },\n    ornamentSets: {\n        code: 16,\n        exclusive: true,\n        noOrnaments: 0,\n        dingbats: 1,\n        piCharacters: 2,\n        fleurons: 3,\n        decorativeBorders: 4,\n        internationalSymbols: 5,\n        mathSymbols: 6\n    },\n    characterAlternatives: {\n        code: 17,\n        exclusive: true,\n        noAlternates: 0\n    },\n    // user defined options\n    designComplexity: {\n        code: 18,\n        exclusive: true,\n        designLevel1: 0,\n        designLevel2: 1,\n        designLevel3: 2,\n        designLevel4: 3,\n        designLevel5: 4\n    },\n    styleOptions: {\n        code: 19,\n        exclusive: true,\n        noStyleOptions: 0,\n        displayText: 1,\n        engravedText: 2,\n        illuminatedCaps: 3,\n        titlingCaps: 4,\n        tallCaps: 5\n    },\n    characterShape: {\n        code: 20,\n        exclusive: true,\n        traditionalCharacters: 0,\n        simplifiedCharacters: 1,\n        JIS1978Characters: 2,\n        JIS1983Characters: 3,\n        JIS1990Characters: 4,\n        traditionalAltOne: 5,\n        traditionalAltTwo: 6,\n        traditionalAltThree: 7,\n        traditionalAltFour: 8,\n        traditionalAltFive: 9,\n        expertCharacters: 10,\n        JIS2004Characters: 11,\n        hojoCharacters: 12,\n        NLCCharacters: 13,\n        traditionalNamesCharacters: 14\n    },\n    numberCase: {\n        code: 21,\n        exclusive: true,\n        lowerCaseNumbers: 0,\n        upperCaseNumbers: 1\n    },\n    textSpacing: {\n        code: 22,\n        exclusive: true,\n        proportionalText: 0,\n        monospacedText: 1,\n        halfWidthText: 2,\n        thirdWidthText: 3,\n        quarterWidthText: 4,\n        altProportionalText: 5,\n        altHalfWidthText: 6\n    },\n    transliteration: {\n        code: 23,\n        exclusive: true,\n        noTransliteration: 0\n    },\n    // hanjaToHangul: 1\n    // hiraganaToKatakana: 2\n    // katakanaToHiragana: 3\n    // kanaToRomanization: 4\n    // romanizationToHiragana: 5\n    // romanizationToKatakana: 6\n    // hanjaToHangulAltOne: 7\n    // hanjaToHangulAltTwo: 8\n    // hanjaToHangulAltThree: 9\n    annotation: {\n        code: 24,\n        exclusive: true,\n        noAnnotation: 0,\n        boxAnnotation: 1,\n        roundedBoxAnnotation: 2,\n        circleAnnotation: 3,\n        invertedCircleAnnotation: 4,\n        parenthesisAnnotation: 5,\n        periodAnnotation: 6,\n        romanNumeralAnnotation: 7,\n        diamondAnnotation: 8,\n        invertedBoxAnnotation: 9,\n        invertedRoundedBoxAnnotation: 10\n    },\n    kanaSpacing: {\n        code: 25,\n        exclusive: true,\n        fullWidthKana: 0,\n        proportionalKana: 1\n    },\n    ideographicSpacing: {\n        code: 26,\n        exclusive: true,\n        fullWidthIdeographs: 0,\n        proportionalIdeographs: 1,\n        halfWidthIdeographs: 2\n    },\n    unicodeDecomposition: {\n        code: 27,\n        exclusive: false,\n        canonicalComposition: 0,\n        compatibilityComposition: 2,\n        transcodingComposition: 4\n    },\n    rubyKana: {\n        code: 28,\n        exclusive: false,\n        // noRubyKana: 0     # deprecated - use rubyKanaOff instead\n        // rubyKana: 1     # deprecated - use rubyKanaOn instead\n        rubyKana: 2\n    },\n    CJKSymbolAlternatives: {\n        code: 29,\n        exclusive: true,\n        noCJKSymbolAlternatives: 0,\n        CJKSymbolAltOne: 1,\n        CJKSymbolAltTwo: 2,\n        CJKSymbolAltThree: 3,\n        CJKSymbolAltFour: 4,\n        CJKSymbolAltFive: 5\n    },\n    ideographicAlternatives: {\n        code: 30,\n        exclusive: true,\n        noIdeographicAlternatives: 0,\n        ideographicAltOne: 1,\n        ideographicAltTwo: 2,\n        ideographicAltThree: 3,\n        ideographicAltFour: 4,\n        ideographicAltFive: 5\n    },\n    CJKVerticalRomanPlacement: {\n        code: 31,\n        exclusive: true,\n        CJKVerticalRomanCentered: 0,\n        CJKVerticalRomanHBaseline: 1\n    },\n    italicCJKRoman: {\n        code: 32,\n        exclusive: false,\n        // noCJKItalicRoman: 0     # deprecated - use CJKItalicRomanOff instead\n        // CJKItalicRoman: 1     # deprecated - use CJKItalicRomanOn instead\n        CJKItalicRoman: 2\n    },\n    caseSensitiveLayout: {\n        code: 33,\n        exclusive: false,\n        caseSensitiveLayout: 0,\n        caseSensitiveSpacing: 2\n    },\n    alternateKana: {\n        code: 34,\n        exclusive: false,\n        alternateHorizKana: 0,\n        alternateVertKana: 2\n    },\n    stylisticAlternatives: {\n        code: 35,\n        exclusive: false,\n        noStylisticAlternates: 0,\n        stylisticAltOne: 2,\n        stylisticAltTwo: 4,\n        stylisticAltThree: 6,\n        stylisticAltFour: 8,\n        stylisticAltFive: 10,\n        stylisticAltSix: 12,\n        stylisticAltSeven: 14,\n        stylisticAltEight: 16,\n        stylisticAltNine: 18,\n        stylisticAltTen: 20,\n        stylisticAltEleven: 22,\n        stylisticAltTwelve: 24,\n        stylisticAltThirteen: 26,\n        stylisticAltFourteen: 28,\n        stylisticAltFifteen: 30,\n        stylisticAltSixteen: 32,\n        stylisticAltSeventeen: 34,\n        stylisticAltEighteen: 36,\n        stylisticAltNineteen: 38,\n        stylisticAltTwenty: 40\n    },\n    contextualAlternates: {\n        code: 36,\n        exclusive: false,\n        contextualAlternates: 0,\n        swashAlternates: 2,\n        contextualSwashAlternates: 4\n    },\n    lowerCase: {\n        code: 37,\n        exclusive: true,\n        defaultLowerCase: 0,\n        lowerCaseSmallCaps: 1,\n        lowerCasePetiteCaps: 2\n    },\n    upperCase: {\n        code: 38,\n        exclusive: true,\n        defaultUpperCase: 0,\n        upperCaseSmallCaps: 1,\n        upperCasePetiteCaps: 2\n    },\n    languageTag: {\n        code: 39,\n        exclusive: true\n    },\n    CJKRomanSpacing: {\n        code: 103,\n        exclusive: true,\n        halfWidthCJKRoman: 0,\n        proportionalCJKRoman: 1,\n        defaultCJKRoman: 2,\n        fullWidthCJKRoman: 3\n    }\n};\nconst $b603e0ade09ad01e$var$feature = (name, selector)=>[\n        $b603e0ade09ad01e$var$features[name].code,\n        $b603e0ade09ad01e$var$features[name][selector]\n    ];\nconst $b603e0ade09ad01e$var$OTMapping = {\n    rlig: $b603e0ade09ad01e$var$feature(\"ligatures\", \"requiredLigatures\"),\n    clig: $b603e0ade09ad01e$var$feature(\"ligatures\", \"contextualLigatures\"),\n    dlig: $b603e0ade09ad01e$var$feature(\"ligatures\", \"rareLigatures\"),\n    hlig: $b603e0ade09ad01e$var$feature(\"ligatures\", \"historicalLigatures\"),\n    liga: $b603e0ade09ad01e$var$feature(\"ligatures\", \"commonLigatures\"),\n    hist: $b603e0ade09ad01e$var$feature(\"ligatures\", \"historicalLigatures\"),\n    smcp: $b603e0ade09ad01e$var$feature(\"lowerCase\", \"lowerCaseSmallCaps\"),\n    pcap: $b603e0ade09ad01e$var$feature(\"lowerCase\", \"lowerCasePetiteCaps\"),\n    frac: $b603e0ade09ad01e$var$feature(\"fractions\", \"diagonalFractions\"),\n    dnom: $b603e0ade09ad01e$var$feature(\"fractions\", \"diagonalFractions\"),\n    numr: $b603e0ade09ad01e$var$feature(\"fractions\", \"diagonalFractions\"),\n    afrc: $b603e0ade09ad01e$var$feature(\"fractions\", \"verticalFractions\"),\n    // aalt\n    // abvf, abvm, abvs, akhn, blwf, blwm, blws, cfar, cjct, cpsp, falt, isol, jalt, ljmo, mset?\n    // ltra, ltrm, nukt, pref, pres, pstf, psts, rand, rkrf, rphf, rtla, rtlm, size, tjmo, tnum?\n    // unic, vatu, vhal, vjmo, vpal, vrt2\n    // dist -> trak table?\n    // kern, vkrn -> kern table\n    // lfbd + opbd + rtbd -> opbd table?\n    // mark, mkmk -> acnt table?\n    // locl -> languageTag + ltag table\n    case: $b603e0ade09ad01e$var$feature(\"caseSensitiveLayout\", \"caseSensitiveLayout\"),\n    ccmp: $b603e0ade09ad01e$var$feature(\"unicodeDecomposition\", \"canonicalComposition\"),\n    cpct: $b603e0ade09ad01e$var$feature(\"CJKVerticalRomanPlacement\", \"CJKVerticalRomanCentered\"),\n    valt: $b603e0ade09ad01e$var$feature(\"CJKVerticalRomanPlacement\", \"CJKVerticalRomanCentered\"),\n    swsh: $b603e0ade09ad01e$var$feature(\"contextualAlternates\", \"swashAlternates\"),\n    cswh: $b603e0ade09ad01e$var$feature(\"contextualAlternates\", \"contextualSwashAlternates\"),\n    curs: $b603e0ade09ad01e$var$feature(\"cursiveConnection\", \"cursive\"),\n    c2pc: $b603e0ade09ad01e$var$feature(\"upperCase\", \"upperCasePetiteCaps\"),\n    c2sc: $b603e0ade09ad01e$var$feature(\"upperCase\", \"upperCaseSmallCaps\"),\n    init: $b603e0ade09ad01e$var$feature(\"smartSwash\", \"wordInitialSwashes\"),\n    fin2: $b603e0ade09ad01e$var$feature(\"smartSwash\", \"wordFinalSwashes\"),\n    medi: $b603e0ade09ad01e$var$feature(\"smartSwash\", \"nonFinalSwashes\"),\n    med2: $b603e0ade09ad01e$var$feature(\"smartSwash\", \"nonFinalSwashes\"),\n    fin3: $b603e0ade09ad01e$var$feature(\"smartSwash\", \"wordFinalSwashes\"),\n    fina: $b603e0ade09ad01e$var$feature(\"smartSwash\", \"wordFinalSwashes\"),\n    pkna: $b603e0ade09ad01e$var$feature(\"kanaSpacing\", \"proportionalKana\"),\n    half: $b603e0ade09ad01e$var$feature(\"textSpacing\", \"halfWidthText\"),\n    halt: $b603e0ade09ad01e$var$feature(\"textSpacing\", \"altHalfWidthText\"),\n    hkna: $b603e0ade09ad01e$var$feature(\"alternateKana\", \"alternateHorizKana\"),\n    vkna: $b603e0ade09ad01e$var$feature(\"alternateKana\", \"alternateVertKana\"),\n    // hngl: feature 'transliteration', 'hanjaToHangulSelector' # deprecated\n    ital: $b603e0ade09ad01e$var$feature(\"italicCJKRoman\", \"CJKItalicRoman\"),\n    lnum: $b603e0ade09ad01e$var$feature(\"numberCase\", \"upperCaseNumbers\"),\n    onum: $b603e0ade09ad01e$var$feature(\"numberCase\", \"lowerCaseNumbers\"),\n    mgrk: $b603e0ade09ad01e$var$feature(\"mathematicalExtras\", \"mathematicalGreek\"),\n    // nalt: not enough info. what type of annotation?\n    // ornm: ditto, which ornament style?\n    calt: $b603e0ade09ad01e$var$feature(\"contextualAlternates\", \"contextualAlternates\"),\n    vrt2: $b603e0ade09ad01e$var$feature(\"verticalSubstitution\", \"substituteVerticalForms\"),\n    vert: $b603e0ade09ad01e$var$feature(\"verticalSubstitution\", \"substituteVerticalForms\"),\n    tnum: $b603e0ade09ad01e$var$feature(\"numberSpacing\", \"monospacedNumbers\"),\n    pnum: $b603e0ade09ad01e$var$feature(\"numberSpacing\", \"proportionalNumbers\"),\n    sups: $b603e0ade09ad01e$var$feature(\"verticalPosition\", \"superiors\"),\n    subs: $b603e0ade09ad01e$var$feature(\"verticalPosition\", \"inferiors\"),\n    ordn: $b603e0ade09ad01e$var$feature(\"verticalPosition\", \"ordinals\"),\n    pwid: $b603e0ade09ad01e$var$feature(\"textSpacing\", \"proportionalText\"),\n    hwid: $b603e0ade09ad01e$var$feature(\"textSpacing\", \"halfWidthText\"),\n    qwid: $b603e0ade09ad01e$var$feature(\"textSpacing\", \"quarterWidthText\"),\n    twid: $b603e0ade09ad01e$var$feature(\"textSpacing\", \"thirdWidthText\"),\n    fwid: $b603e0ade09ad01e$var$feature(\"textSpacing\", \"proportionalText\"),\n    palt: $b603e0ade09ad01e$var$feature(\"textSpacing\", \"altProportionalText\"),\n    trad: $b603e0ade09ad01e$var$feature(\"characterShape\", \"traditionalCharacters\"),\n    smpl: $b603e0ade09ad01e$var$feature(\"characterShape\", \"simplifiedCharacters\"),\n    jp78: $b603e0ade09ad01e$var$feature(\"characterShape\", \"JIS1978Characters\"),\n    jp83: $b603e0ade09ad01e$var$feature(\"characterShape\", \"JIS1983Characters\"),\n    jp90: $b603e0ade09ad01e$var$feature(\"characterShape\", \"JIS1990Characters\"),\n    jp04: $b603e0ade09ad01e$var$feature(\"characterShape\", \"JIS2004Characters\"),\n    expt: $b603e0ade09ad01e$var$feature(\"characterShape\", \"expertCharacters\"),\n    hojo: $b603e0ade09ad01e$var$feature(\"characterShape\", \"hojoCharacters\"),\n    nlck: $b603e0ade09ad01e$var$feature(\"characterShape\", \"NLCCharacters\"),\n    tnam: $b603e0ade09ad01e$var$feature(\"characterShape\", \"traditionalNamesCharacters\"),\n    ruby: $b603e0ade09ad01e$var$feature(\"rubyKana\", \"rubyKana\"),\n    titl: $b603e0ade09ad01e$var$feature(\"styleOptions\", \"titlingCaps\"),\n    zero: $b603e0ade09ad01e$var$feature(\"typographicExtras\", \"slashedZero\"),\n    ss01: $b603e0ade09ad01e$var$feature(\"stylisticAlternatives\", \"stylisticAltOne\"),\n    ss02: $b603e0ade09ad01e$var$feature(\"stylisticAlternatives\", \"stylisticAltTwo\"),\n    ss03: $b603e0ade09ad01e$var$feature(\"stylisticAlternatives\", \"stylisticAltThree\"),\n    ss04: $b603e0ade09ad01e$var$feature(\"stylisticAlternatives\", \"stylisticAltFour\"),\n    ss05: $b603e0ade09ad01e$var$feature(\"stylisticAlternatives\", \"stylisticAltFive\"),\n    ss06: $b603e0ade09ad01e$var$feature(\"stylisticAlternatives\", \"stylisticAltSix\"),\n    ss07: $b603e0ade09ad01e$var$feature(\"stylisticAlternatives\", \"stylisticAltSeven\"),\n    ss08: $b603e0ade09ad01e$var$feature(\"stylisticAlternatives\", \"stylisticAltEight\"),\n    ss09: $b603e0ade09ad01e$var$feature(\"stylisticAlternatives\", \"stylisticAltNine\"),\n    ss10: $b603e0ade09ad01e$var$feature(\"stylisticAlternatives\", \"stylisticAltTen\"),\n    ss11: $b603e0ade09ad01e$var$feature(\"stylisticAlternatives\", \"stylisticAltEleven\"),\n    ss12: $b603e0ade09ad01e$var$feature(\"stylisticAlternatives\", \"stylisticAltTwelve\"),\n    ss13: $b603e0ade09ad01e$var$feature(\"stylisticAlternatives\", \"stylisticAltThirteen\"),\n    ss14: $b603e0ade09ad01e$var$feature(\"stylisticAlternatives\", \"stylisticAltFourteen\"),\n    ss15: $b603e0ade09ad01e$var$feature(\"stylisticAlternatives\", \"stylisticAltFifteen\"),\n    ss16: $b603e0ade09ad01e$var$feature(\"stylisticAlternatives\", \"stylisticAltSixteen\"),\n    ss17: $b603e0ade09ad01e$var$feature(\"stylisticAlternatives\", \"stylisticAltSeventeen\"),\n    ss18: $b603e0ade09ad01e$var$feature(\"stylisticAlternatives\", \"stylisticAltEighteen\"),\n    ss19: $b603e0ade09ad01e$var$feature(\"stylisticAlternatives\", \"stylisticAltNineteen\"),\n    ss20: $b603e0ade09ad01e$var$feature(\"stylisticAlternatives\", \"stylisticAltTwenty\")\n};\n// salt: feature 'stylisticAlternatives', 'stylisticAltOne' # hmm, which one to choose\n// Add cv01-cv99 features\nfor(let i = 1; i <= 99; i++)$b603e0ade09ad01e$var$OTMapping[`cv${`00${i}`.slice(-2)}`] = [\n    $b603e0ade09ad01e$var$features.characterAlternatives.code,\n    i\n];\n// create inverse mapping\nlet $b603e0ade09ad01e$var$AATMapping = {};\nfor(let ot in $b603e0ade09ad01e$var$OTMapping){\n    let aat = $b603e0ade09ad01e$var$OTMapping[ot];\n    if ($b603e0ade09ad01e$var$AATMapping[aat[0]] == null) $b603e0ade09ad01e$var$AATMapping[aat[0]] = {};\n    $b603e0ade09ad01e$var$AATMapping[aat[0]][aat[1]] = ot;\n}\nfunction $b603e0ade09ad01e$export$b813f7d2a1677c16(features) {\n    let res = {};\n    for(let k in features){\n        let r;\n        if (r = $b603e0ade09ad01e$var$OTMapping[k]) {\n            if (res[r[0]] == null) res[r[0]] = {};\n            res[r[0]][r[1]] = features[k];\n        }\n    }\n    return res;\n}\n// Maps strings in a [featureType, featureSetting]\n// to their equivalent number codes\nfunction $b603e0ade09ad01e$var$mapFeatureStrings(f) {\n    let [type, setting] = f;\n    if (isNaN(type)) var typeCode = $b603e0ade09ad01e$var$features[type] && $b603e0ade09ad01e$var$features[type].code;\n    else var typeCode = type;\n    if (isNaN(setting)) var settingCode = $b603e0ade09ad01e$var$features[type] && $b603e0ade09ad01e$var$features[type][setting];\n    else var settingCode = setting;\n    return [\n        typeCode,\n        settingCode\n    ];\n}\nfunction $b603e0ade09ad01e$export$bd6df347a4f391c4(features) {\n    let res = {};\n    if (Array.isArray(features)) for(let k = 0; k < features.length; k++){\n        let r;\n        let f = $b603e0ade09ad01e$var$mapFeatureStrings(features[k]);\n        if (r = $b603e0ade09ad01e$var$AATMapping[f[0]] && $b603e0ade09ad01e$var$AATMapping[f[0]][f[1]]) res[r] = true;\n    }\n    else if (typeof features === \"object\") for(let type in features){\n        let feature = features[type];\n        for(let setting in feature){\n            let r;\n            let f = $b603e0ade09ad01e$var$mapFeatureStrings([\n                type,\n                setting\n            ]);\n            if (feature[setting] && (r = $b603e0ade09ad01e$var$AATMapping[f[0]] && $b603e0ade09ad01e$var$AATMapping[f[0]][f[1]])) res[r] = true;\n        }\n    }\n    return Object.keys(res);\n}\nvar _class;\nlet $16667a2c0f0b1be5$export$2e2bcd8739ae039 = (_class = class $16667a2c0f0b1be5$export$2e2bcd8739ae039 {\n    constructor(table){\n        this.table = table;\n    }\n    lookup(glyph) {\n        switch(this.table.version){\n            case 0:\n                return this.table.values.getItem(glyph);\n            case 2:\n            case 4:\n                {\n                    let min = 0;\n                    let max = this.table.binarySearchHeader.nUnits - 1;\n                    while(min <= max){\n                        var mid = min + max >> 1;\n                        var seg = this.table.segments[mid];\n                        // special end of search value\n                        if (seg.firstGlyph === 0xffff) return null;\n                        if (glyph < seg.firstGlyph) max = mid - 1;\n                        else if (glyph > seg.lastGlyph) min = mid + 1;\n                        else {\n                            if (this.table.version === 2) return seg.value;\n                            else return seg.values[glyph - seg.firstGlyph];\n                        }\n                    }\n                    return null;\n                }\n            case 6:\n                {\n                    let min = 0;\n                    let max = this.table.binarySearchHeader.nUnits - 1;\n                    while(min <= max){\n                        var mid = min + max >> 1;\n                        var seg = this.table.segments[mid];\n                        // special end of search value\n                        if (seg.glyph === 0xffff) return null;\n                        if (glyph < seg.glyph) max = mid - 1;\n                        else if (glyph > seg.glyph) min = mid + 1;\n                        else return seg.value;\n                    }\n                    return null;\n                }\n            case 8:\n                return this.table.values[glyph - this.table.firstGlyph];\n            default:\n                throw new Error(`Unknown lookup table format: ${this.table.version}`);\n        }\n    }\n    glyphsForValue(classValue) {\n        let res = [];\n        switch(this.table.version){\n            case 2:\n            case 4:\n                for (let segment of this.table.segments)if (this.table.version === 2 && segment.value === classValue) res.push(...$f3ad94c9f84f4d57$export$d02631cccf789723(segment.firstGlyph, segment.lastGlyph + 1));\n                else {\n                    for(let index = 0; index < segment.values.length; index++)if (segment.values[index] === classValue) res.push(segment.firstGlyph + index);\n                }\n                break;\n            case 6:\n                for (let segment1 of this.table.segments)if (segment1.value === classValue) res.push(segment1.glyph);\n                break;\n            case 8:\n                for(let i = 0; i < this.table.values.length; i++)if (this.table.values[i] === classValue) res.push(this.table.firstGlyph + i);\n                break;\n            default:\n                throw new Error(`Unknown lookup table format: ${this.table.version}`);\n        }\n        return res;\n    }\n}, (0,_swc_helpers__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(_class.prototype, \"glyphsForValue\", [\n    $df9bc573962369ff$export$69a3209f1a06c04d\n], Object.getOwnPropertyDescriptor(_class.prototype, \"glyphsForValue\"), _class.prototype), _class);\nconst $de324b614d9ee26c$var$START_OF_TEXT_STATE = 0;\nconst $de324b614d9ee26c$var$START_OF_LINE_STATE = 1;\nconst $de324b614d9ee26c$var$END_OF_TEXT_CLASS = 0;\nconst $de324b614d9ee26c$var$OUT_OF_BOUNDS_CLASS = 1;\nconst $de324b614d9ee26c$var$DELETED_GLYPH_CLASS = 2;\nconst $de324b614d9ee26c$var$END_OF_LINE_CLASS = 3;\nconst $de324b614d9ee26c$var$DONT_ADVANCE = 0x4000;\nclass $de324b614d9ee26c$export$2e2bcd8739ae039 {\n    constructor(stateTable){\n        this.stateTable = stateTable;\n        this.lookupTable = new $16667a2c0f0b1be5$export$2e2bcd8739ae039(stateTable.classTable);\n    }\n    process(glyphs, reverse, processEntry) {\n        let currentState = $de324b614d9ee26c$var$START_OF_TEXT_STATE; // START_OF_LINE_STATE is used for kashida glyph insertions sometimes I think?\n        let index = reverse ? glyphs.length - 1 : 0;\n        let dir = reverse ? -1 : 1;\n        while(dir === 1 && index <= glyphs.length || dir === -1 && index >= -1){\n            let glyph = null;\n            let classCode = $de324b614d9ee26c$var$OUT_OF_BOUNDS_CLASS;\n            let shouldAdvance = true;\n            if (index === glyphs.length || index === -1) classCode = $de324b614d9ee26c$var$END_OF_TEXT_CLASS;\n            else {\n                glyph = glyphs[index];\n                if (glyph.id === 0xffff) classCode = $de324b614d9ee26c$var$DELETED_GLYPH_CLASS;\n                else {\n                    classCode = this.lookupTable.lookup(glyph.id);\n                    if (classCode == null) classCode = $de324b614d9ee26c$var$OUT_OF_BOUNDS_CLASS;\n                }\n            }\n            let row = this.stateTable.stateArray.getItem(currentState);\n            let entryIndex = row[classCode];\n            let entry = this.stateTable.entryTable.getItem(entryIndex);\n            if (classCode !== $de324b614d9ee26c$var$END_OF_TEXT_CLASS && classCode !== $de324b614d9ee26c$var$DELETED_GLYPH_CLASS) {\n                processEntry(glyph, entry, index);\n                shouldAdvance = !(entry.flags & $de324b614d9ee26c$var$DONT_ADVANCE);\n            }\n            currentState = entry.newState;\n            if (shouldAdvance) index += dir;\n        }\n        return glyphs;\n    }\n    /**\n   * Performs a depth-first traversal of the glyph strings\n   * represented by the state machine.\n   */ traverse(opts, state = 0, visited = new Set) {\n        if (visited.has(state)) return;\n        visited.add(state);\n        let { nClasses: nClasses, stateArray: stateArray, entryTable: entryTable } = this.stateTable;\n        let row = stateArray.getItem(state);\n        // Skip predefined classes\n        for(let classCode = 4; classCode < nClasses; classCode++){\n            let entryIndex = row[classCode];\n            let entry = entryTable.getItem(entryIndex);\n            // Try all glyphs in the class\n            for (let glyph of this.lookupTable.glyphsForValue(classCode)){\n                if (opts.enter) opts.enter(glyph, entry);\n                if (entry.newState !== 0) this.traverse(opts, entry.newState, visited);\n                if (opts.exit) opts.exit(glyph, entry);\n            }\n        }\n    }\n}\nvar _class;\n// indic replacement flags\nconst $696c050512749a50$var$MARK_FIRST = 0x8000;\nconst $696c050512749a50$var$MARK_LAST = 0x2000;\nconst $696c050512749a50$var$VERB = 0x000F;\n// contextual substitution and glyph insertion flag\nconst $696c050512749a50$var$SET_MARK = 0x8000;\n// ligature entry flags\nconst $696c050512749a50$var$SET_COMPONENT = 0x8000;\nconst $696c050512749a50$var$PERFORM_ACTION = 0x2000;\n// ligature action masks\nconst $696c050512749a50$var$LAST_MASK = 0x80000000;\nconst $696c050512749a50$var$STORE_MASK = 0x40000000;\nconst $696c050512749a50$var$OFFSET_MASK = 0x3FFFFFFF;\nconst $696c050512749a50$var$VERTICAL_ONLY = 0x800000;\nconst $696c050512749a50$var$REVERSE_DIRECTION = 0x400000;\nconst $696c050512749a50$var$HORIZONTAL_AND_VERTICAL = 0x200000;\n// glyph insertion flags\nconst $696c050512749a50$var$CURRENT_IS_KASHIDA_LIKE = 0x2000;\nconst $696c050512749a50$var$MARKED_IS_KASHIDA_LIKE = 0x1000;\nconst $696c050512749a50$var$CURRENT_INSERT_BEFORE = 0x0800;\nconst $696c050512749a50$var$MARKED_INSERT_BEFORE = 0x0400;\nconst $696c050512749a50$var$CURRENT_INSERT_COUNT = 0x03E0;\nconst $696c050512749a50$var$MARKED_INSERT_COUNT = 0x001F;\nlet $696c050512749a50$export$2e2bcd8739ae039 = (_class = class $696c050512749a50$export$2e2bcd8739ae039 {\n    constructor(font){\n        this.processIndicRearragement = this.processIndicRearragement.bind(this);\n        this.processContextualSubstitution = this.processContextualSubstitution.bind(this);\n        this.processLigature = this.processLigature.bind(this);\n        this.processNoncontextualSubstitutions = this.processNoncontextualSubstitutions.bind(this);\n        this.processGlyphInsertion = this.processGlyphInsertion.bind(this);\n        this.font = font;\n        this.morx = font.morx;\n        this.inputCache = null;\n    }\n    // Processes an array of glyphs and applies the specified features\n    // Features should be in the form of {featureType:{featureSetting:boolean}}\n    process(glyphs, features = {}) {\n        for (let chain of this.morx.chains){\n            let flags = chain.defaultFlags;\n            // enable/disable the requested features\n            for (let feature of chain.features){\n                let f;\n                if (f = features[feature.featureType]) {\n                    if (f[feature.featureSetting]) {\n                        flags &= feature.disableFlags;\n                        flags |= feature.enableFlags;\n                    } else if (f[feature.featureSetting] === false) {\n                        flags |= ~feature.disableFlags;\n                        flags &= ~feature.enableFlags;\n                    }\n                }\n            }\n            for (let subtable of chain.subtables)if (subtable.subFeatureFlags & flags) this.processSubtable(subtable, glyphs);\n        }\n        // remove deleted glyphs\n        let index = glyphs.length - 1;\n        while(index >= 0){\n            if (glyphs[index].id === 0xffff) glyphs.splice(index, 1);\n            index--;\n        }\n        return glyphs;\n    }\n    processSubtable(subtable, glyphs) {\n        this.subtable = subtable;\n        this.glyphs = glyphs;\n        if (this.subtable.type === 4) {\n            this.processNoncontextualSubstitutions(this.subtable, this.glyphs);\n            return;\n        }\n        this.ligatureStack = [];\n        this.markedGlyph = null;\n        this.firstGlyph = null;\n        this.lastGlyph = null;\n        this.markedIndex = null;\n        let stateMachine = this.getStateMachine(subtable);\n        let process = this.getProcessor();\n        let reverse = !!(this.subtable.coverage & $696c050512749a50$var$REVERSE_DIRECTION);\n        return stateMachine.process(this.glyphs, reverse, process);\n    }\n    getStateMachine(subtable) {\n        return new $de324b614d9ee26c$export$2e2bcd8739ae039(subtable.table.stateTable);\n    }\n    getProcessor() {\n        switch(this.subtable.type){\n            case 0:\n                return this.processIndicRearragement;\n            case 1:\n                return this.processContextualSubstitution;\n            case 2:\n                return this.processLigature;\n            case 4:\n                return this.processNoncontextualSubstitutions;\n            case 5:\n                return this.processGlyphInsertion;\n            default:\n                throw new Error(`Invalid morx subtable type: ${this.subtable.type}`);\n        }\n    }\n    processIndicRearragement(glyph, entry, index) {\n        if (entry.flags & $696c050512749a50$var$MARK_FIRST) this.firstGlyph = index;\n        if (entry.flags & $696c050512749a50$var$MARK_LAST) this.lastGlyph = index;\n        $696c050512749a50$var$reorderGlyphs(this.glyphs, entry.flags & $696c050512749a50$var$VERB, this.firstGlyph, this.lastGlyph);\n    }\n    processContextualSubstitution(glyph, entry, index) {\n        let subsitutions = this.subtable.table.substitutionTable.items;\n        if (entry.markIndex !== 0xffff) {\n            let lookup = subsitutions.getItem(entry.markIndex);\n            let lookupTable = new $16667a2c0f0b1be5$export$2e2bcd8739ae039(lookup);\n            glyph = this.glyphs[this.markedGlyph];\n            var gid = lookupTable.lookup(glyph.id);\n            if (gid) this.glyphs[this.markedGlyph] = this.font.getGlyph(gid, glyph.codePoints);\n        }\n        if (entry.currentIndex !== 0xffff) {\n            let lookup = subsitutions.getItem(entry.currentIndex);\n            let lookupTable = new $16667a2c0f0b1be5$export$2e2bcd8739ae039(lookup);\n            glyph = this.glyphs[index];\n            var gid = lookupTable.lookup(glyph.id);\n            if (gid) this.glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);\n        }\n        if (entry.flags & $696c050512749a50$var$SET_MARK) this.markedGlyph = index;\n    }\n    processLigature(glyph, entry, index) {\n        if (entry.flags & $696c050512749a50$var$SET_COMPONENT) this.ligatureStack.push(index);\n        if (entry.flags & $696c050512749a50$var$PERFORM_ACTION) {\n            let actions = this.subtable.table.ligatureActions;\n            let components = this.subtable.table.components;\n            let ligatureList = this.subtable.table.ligatureList;\n            let actionIndex = entry.action;\n            let last = false;\n            let ligatureIndex = 0;\n            let codePoints = [];\n            let ligatureGlyphs = [];\n            while(!last){\n                let componentGlyph = this.ligatureStack.pop();\n                codePoints.unshift(...this.glyphs[componentGlyph].codePoints);\n                let action = actions.getItem(actionIndex++);\n                last = !!(action & $696c050512749a50$var$LAST_MASK);\n                let store = !!(action & $696c050512749a50$var$STORE_MASK);\n                let offset = (action & $696c050512749a50$var$OFFSET_MASK) << 2 >> 2; // sign extend 30 to 32 bits\n                offset += this.glyphs[componentGlyph].id;\n                let component = components.getItem(offset);\n                ligatureIndex += component;\n                if (last || store) {\n                    let ligatureEntry = ligatureList.getItem(ligatureIndex);\n                    this.glyphs[componentGlyph] = this.font.getGlyph(ligatureEntry, codePoints);\n                    ligatureGlyphs.push(componentGlyph);\n                    ligatureIndex = 0;\n                    codePoints = [];\n                } else this.glyphs[componentGlyph] = this.font.getGlyph(0xffff);\n            }\n            // Put ligature glyph indexes back on the stack\n            this.ligatureStack.push(...ligatureGlyphs);\n        }\n    }\n    processNoncontextualSubstitutions(subtable, glyphs, index) {\n        let lookupTable = new $16667a2c0f0b1be5$export$2e2bcd8739ae039(subtable.table.lookupTable);\n        for(index = 0; index < glyphs.length; index++){\n            let glyph = glyphs[index];\n            if (glyph.id !== 0xffff) {\n                let gid = lookupTable.lookup(glyph.id);\n                if (gid) glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);\n            }\n        }\n    }\n    _insertGlyphs(glyphIndex, insertionActionIndex, count, isBefore) {\n        let insertions = [];\n        while(count--){\n            let gid = this.subtable.table.insertionActions.getItem(insertionActionIndex++);\n            insertions.push(this.font.getGlyph(gid));\n        }\n        if (!isBefore) glyphIndex++;\n        this.glyphs.splice(glyphIndex, 0, ...insertions);\n    }\n    processGlyphInsertion(glyph, entry, index) {\n        if (entry.flags & $696c050512749a50$var$SET_MARK) this.markedIndex = index;\n        if (entry.markedInsertIndex !== 0xffff) {\n            let count = (entry.flags & $696c050512749a50$var$MARKED_INSERT_COUNT) >>> 5;\n            let isBefore = !!(entry.flags & $696c050512749a50$var$MARKED_INSERT_BEFORE);\n            this._insertGlyphs(this.markedIndex, entry.markedInsertIndex, count, isBefore);\n        }\n        if (entry.currentInsertIndex !== 0xffff) {\n            let count = (entry.flags & $696c050512749a50$var$CURRENT_INSERT_COUNT) >>> 5;\n            let isBefore = !!(entry.flags & $696c050512749a50$var$CURRENT_INSERT_BEFORE);\n            this._insertGlyphs(index, entry.currentInsertIndex, count, isBefore);\n        }\n    }\n    getSupportedFeatures() {\n        let features = [];\n        for (let chain of this.morx.chains)for (let feature of chain.features)features.push([\n            feature.featureType,\n            feature.featureSetting\n        ]);\n        return features;\n    }\n    generateInputs(gid) {\n        if (!this.inputCache) this.generateInputCache();\n        return this.inputCache[gid] || [];\n    }\n    generateInputCache() {\n        this.inputCache = {};\n        for (let chain of this.morx.chains){\n            let flags = chain.defaultFlags;\n            for (let subtable of chain.subtables)if (subtable.subFeatureFlags & flags) this.generateInputsForSubtable(subtable);\n        }\n    }\n    generateInputsForSubtable(subtable) {\n        // Currently, only supporting ligature subtables.\n        if (subtable.type !== 2) return;\n        let reverse = !!(subtable.coverage & $696c050512749a50$var$REVERSE_DIRECTION);\n        if (reverse) throw new Error(\"Reverse subtable, not supported.\");\n        this.subtable = subtable;\n        this.ligatureStack = [];\n        let stateMachine = this.getStateMachine(subtable);\n        let process = this.getProcessor();\n        let input = [];\n        let stack = [];\n        this.glyphs = [];\n        stateMachine.traverse({\n            enter: (glyph, entry)=>{\n                let glyphs = this.glyphs;\n                stack.push({\n                    glyphs: glyphs.slice(),\n                    ligatureStack: this.ligatureStack.slice()\n                });\n                // Add glyph to input and glyphs to process.\n                let g1 = this.font.getGlyph(glyph);\n                input.push(g1);\n                glyphs.push(input[input.length - 1]);\n                // Process ligature substitution\n                process(glyphs[glyphs.length - 1], entry, glyphs.length - 1);\n                // Add input to result if only one matching (non-deleted) glyph remains.\n                let count = 0;\n                let found = 0;\n                for(let i = 0; i < glyphs.length && count <= 1; i++)if (glyphs[i].id !== 0xffff) {\n                    count++;\n                    found = glyphs[i].id;\n                }\n                if (count === 1) {\n                    let result = input.map((g)=>g.id);\n                    let cache = this.inputCache[found];\n                    if (cache) cache.push(result);\n                    else this.inputCache[found] = [\n                        result\n                    ];\n                }\n            },\n            exit: ()=>{\n                ({ glyphs: this.glyphs, ligatureStack: this.ligatureStack } = stack.pop());\n                input.pop();\n            }\n        });\n    }\n}, (0,_swc_helpers__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(_class.prototype, \"getStateMachine\", [\n    $df9bc573962369ff$export$69a3209f1a06c04d\n], Object.getOwnPropertyDescriptor(_class.prototype, \"getStateMachine\"), _class.prototype), _class);\n// swaps the glyphs in rangeA with those in rangeB\n// reverse the glyphs inside those ranges if specified\n// ranges are in [offset, length] format\nfunction $696c050512749a50$var$swap(glyphs, rangeA, rangeB, reverseA = false, reverseB = false) {\n    let end = glyphs.splice(rangeB[0] - (rangeB[1] - 1), rangeB[1]);\n    if (reverseB) end.reverse();\n    let start = glyphs.splice(rangeA[0], rangeA[1], ...end);\n    if (reverseA) start.reverse();\n    glyphs.splice(rangeB[0] - (rangeA[1] - 1), 0, ...start);\n    return glyphs;\n}\nfunction $696c050512749a50$var$reorderGlyphs(glyphs, verb, firstGlyph, lastGlyph) {\n    let length = lastGlyph - firstGlyph + 1;\n    switch(verb){\n        case 0:\n            return glyphs;\n        case 1:\n            return $696c050512749a50$var$swap(glyphs, [\n                firstGlyph,\n                1\n            ], [\n                lastGlyph,\n                0\n            ]);\n        case 2:\n            return $696c050512749a50$var$swap(glyphs, [\n                firstGlyph,\n                0\n            ], [\n                lastGlyph,\n                1\n            ]);\n        case 3:\n            return $696c050512749a50$var$swap(glyphs, [\n                firstGlyph,\n                1\n            ], [\n                lastGlyph,\n                1\n            ]);\n        case 4:\n            return $696c050512749a50$var$swap(glyphs, [\n                firstGlyph,\n                2\n            ], [\n                lastGlyph,\n                0\n            ]);\n        case 5:\n            return $696c050512749a50$var$swap(glyphs, [\n                firstGlyph,\n                2\n            ], [\n                lastGlyph,\n                0\n            ], true, false);\n        case 6:\n            return $696c050512749a50$var$swap(glyphs, [\n                firstGlyph,\n                0\n            ], [\n                lastGlyph,\n                2\n            ]);\n        case 7:\n            return $696c050512749a50$var$swap(glyphs, [\n                firstGlyph,\n                0\n            ], [\n                lastGlyph,\n                2\n            ], false, true);\n        case 8:\n            return $696c050512749a50$var$swap(glyphs, [\n                firstGlyph,\n                1\n            ], [\n                lastGlyph,\n                2\n            ]);\n        case 9:\n            return $696c050512749a50$var$swap(glyphs, [\n                firstGlyph,\n                1\n            ], [\n                lastGlyph,\n                2\n            ], false, true);\n        case 10:\n            return $696c050512749a50$var$swap(glyphs, [\n                firstGlyph,\n                2\n            ], [\n                lastGlyph,\n                1\n            ]);\n        case 11:\n            return $696c050512749a50$var$swap(glyphs, [\n                firstGlyph,\n                2\n            ], [\n                lastGlyph,\n                1\n            ], true, false);\n        case 12:\n            return $696c050512749a50$var$swap(glyphs, [\n                firstGlyph,\n                2\n            ], [\n                lastGlyph,\n                2\n            ]);\n        case 13:\n            return $696c050512749a50$var$swap(glyphs, [\n                firstGlyph,\n                2\n            ], [\n                lastGlyph,\n                2\n            ], true, false);\n        case 14:\n            return $696c050512749a50$var$swap(glyphs, [\n                firstGlyph,\n                2\n            ], [\n                lastGlyph,\n                2\n            ], false, true);\n        case 15:\n            return $696c050512749a50$var$swap(glyphs, [\n                firstGlyph,\n                2\n            ], [\n                lastGlyph,\n                2\n            ], true, true);\n        default:\n            throw new Error(`Unknown verb: ${verb}`);\n    }\n}\nclass $9273c77bc46b13e0$export$2e2bcd8739ae039 {\n    constructor(font){\n        this.font = font;\n        this.morxProcessor = new $696c050512749a50$export$2e2bcd8739ae039(font);\n        this.fallbackPosition = false;\n    }\n    substitute(glyphRun) {\n        // AAT expects the glyphs to be in visual order prior to morx processing,\n        // so reverse the glyphs if the script is right-to-left.\n        if (glyphRun.direction === \"rtl\") glyphRun.glyphs.reverse();\n        this.morxProcessor.process(glyphRun.glyphs, $b603e0ade09ad01e$export$b813f7d2a1677c16(glyphRun.features));\n    }\n    getAvailableFeatures(script, language) {\n        return $b603e0ade09ad01e$export$bd6df347a4f391c4(this.morxProcessor.getSupportedFeatures());\n    }\n    stringsForGlyph(gid) {\n        let glyphStrings = this.morxProcessor.generateInputs(gid);\n        let result = new Set;\n        for (let glyphs of glyphStrings)this._addStrings(glyphs, 0, result, \"\");\n        return result;\n    }\n    _addStrings(glyphs, index, strings, string) {\n        let codePoints = this.font._cmapProcessor.codePointsForGlyph(glyphs[index]);\n        for (let codePoint of codePoints){\n            let s = string + String.fromCodePoint(codePoint);\n            if (index < glyphs.length - 1) this._addStrings(glyphs, index + 1, strings, s);\n            else strings.add(s);\n        }\n    }\n}\nclass $d208953d14e55e3c$export$2e2bcd8739ae039 {\n    constructor(font, script, direction){\n        this.font = font;\n        this.script = script;\n        this.direction = direction;\n        this.stages = [];\n        this.globalFeatures = {};\n        this.allFeatures = {};\n    }\n    /**\n   * Adds the given features to the last stage.\n   * Ignores features that have already been applied.\n   */ _addFeatures(features, global) {\n        let stageIndex = this.stages.length - 1;\n        let stage = this.stages[stageIndex];\n        for (let feature of features)if (this.allFeatures[feature] == null) {\n            stage.push(feature);\n            this.allFeatures[feature] = stageIndex;\n            if (global) this.globalFeatures[feature] = true;\n        }\n    }\n    /**\n   * Add features to the last stage\n   */ add(arg, global = true) {\n        if (this.stages.length === 0) this.stages.push([]);\n        if (typeof arg === \"string\") arg = [\n            arg\n        ];\n        if (Array.isArray(arg)) this._addFeatures(arg, global);\n        else if (typeof arg === \"object\") {\n            this._addFeatures(arg.global || [], true);\n            this._addFeatures(arg.local || [], false);\n        } else throw new Error(\"Unsupported argument to ShapingPlan#add\");\n    }\n    /**\n   * Add a new stage\n   */ addStage(arg, global) {\n        if (typeof arg === \"function\") this.stages.push(arg, []);\n        else {\n            this.stages.push([]);\n            this.add(arg, global);\n        }\n    }\n    setFeatureOverrides(features) {\n        if (Array.isArray(features)) this.add(features);\n        else if (typeof features === \"object\") for(let tag in features){\n            if (features[tag]) this.add(tag);\n            else if (this.allFeatures[tag] != null) {\n                let stage = this.stages[this.allFeatures[tag]];\n                stage.splice(stage.indexOf(tag), 1);\n                delete this.allFeatures[tag];\n                delete this.globalFeatures[tag];\n            }\n        }\n    }\n    /**\n   * Assigns the global features to the given glyphs\n   */ assignGlobalFeatures(glyphs) {\n        for (let glyph of glyphs)for(let feature in this.globalFeatures)glyph.features[feature] = true;\n    }\n    /**\n   * Executes the planned stages using the given OTProcessor\n   */ process(processor, glyphs, positions) {\n        for (let stage of this.stages){\n            if (typeof stage === \"function\") {\n                if (!positions) stage(this.font, glyphs, this);\n            } else if (stage.length > 0) processor.applyFeatures(stage, glyphs, positions);\n        }\n    }\n}\nconst $5340de7a86f3ae85$var$VARIATION_FEATURES = [\n    \"rvrn\"\n];\nconst $5340de7a86f3ae85$var$COMMON_FEATURES = [\n    \"ccmp\",\n    \"locl\",\n    \"rlig\",\n    \"mark\",\n    \"mkmk\"\n];\nconst $5340de7a86f3ae85$var$FRACTIONAL_FEATURES = [\n    \"frac\",\n    \"numr\",\n    \"dnom\"\n];\nconst $5340de7a86f3ae85$var$HORIZONTAL_FEATURES = [\n    \"calt\",\n    \"clig\",\n    \"liga\",\n    \"rclt\",\n    \"curs\",\n    \"kern\"\n];\nconst $5340de7a86f3ae85$var$VERTICAL_FEATURES = [\n    \"vert\"\n];\nconst $5340de7a86f3ae85$var$DIRECTIONAL_FEATURES = {\n    ltr: [\n        \"ltra\",\n        \"ltrm\"\n    ],\n    rtl: [\n        \"rtla\",\n        \"rtlm\"\n    ]\n};\nclass $5340de7a86f3ae85$export$2e2bcd8739ae039 {\n    static{\n        this.zeroMarkWidths = \"AFTER_GPOS\";\n    }\n    static plan(plan, glyphs, features) {\n        // Plan the features we want to apply\n        this.planPreprocessing(plan);\n        this.planFeatures(plan);\n        this.planPostprocessing(plan, features);\n        // Assign the global features to all the glyphs\n        plan.assignGlobalFeatures(glyphs);\n        // Assign local features to glyphs\n        this.assignFeatures(plan, glyphs);\n    }\n    static planPreprocessing(plan) {\n        plan.add({\n            global: [\n                ...$5340de7a86f3ae85$var$VARIATION_FEATURES,\n                ...$5340de7a86f3ae85$var$DIRECTIONAL_FEATURES[plan.direction]\n            ],\n            local: $5340de7a86f3ae85$var$FRACTIONAL_FEATURES\n        });\n    }\n    static planFeatures(plan) {\n    // Do nothing by default. Let subclasses override this.\n    }\n    static planPostprocessing(plan, userFeatures) {\n        plan.add([\n            ...$5340de7a86f3ae85$var$COMMON_FEATURES,\n            ...$5340de7a86f3ae85$var$HORIZONTAL_FEATURES\n        ]);\n        plan.setFeatureOverrides(userFeatures);\n    }\n    static assignFeatures(plan, glyphs) {\n        // Enable contextual fractions\n        for(let i = 0; i < glyphs.length; i++){\n            let glyph = glyphs[i];\n            if (glyph.codePoints[0] === 0x2044) {\n                let start = i;\n                let end = i + 1;\n                // Apply numerator\n                while(start > 0 && unicode_properties__WEBPACK_IMPORTED_MODULE_6__[\"default\"].isDigit(glyphs[start - 1].codePoints[0])){\n                    glyphs[start - 1].features.numr = true;\n                    glyphs[start - 1].features.frac = true;\n                    start--;\n                }\n                // Apply denominator\n                while(end < glyphs.length && unicode_properties__WEBPACK_IMPORTED_MODULE_6__[\"default\"].isDigit(glyphs[end].codePoints[0])){\n                    glyphs[end].features.dnom = true;\n                    glyphs[end].features.frac = true;\n                    end++;\n                }\n                // Apply fraction slash\n                glyph.features.frac = true;\n                i = end - 1;\n            }\n        }\n    }\n}\nvar $5cab828b3273a17c$require$Buffer = buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer;\nconst $5cab828b3273a17c$var$trie = new unicode_trie__WEBPACK_IMPORTED_MODULE_7__($5cab828b3273a17c$require$Buffer.from(\"ABABAAAAAACgMQAAAZUBav7t2CtPA0EUBeDZB00pin9AJZIEgyUEj0QhweDAgQOJxCBRBElQSBwSicLgkOAwnNKZ5GaY2c7uzj4o5yZfZrrbefbuIx2nSq3CGmzAWH/+K+UO7MIe7MMhHMMpnMMFXMIVXIt2t3CnP088iPqjqNN8e4Ij7Rle4LUH82rLm6i/92A+RERERERERERNmfz/89GDeRARERERzbN8ceps2Iwt9H0C9/AJ6yOlDkbTczcot5VSm8Pm1vcFWfb7+BKOLTuOd2UlTX4wGP85Eg953lWPFbnuN7PkjtLmalOWbNenkHOSa7T3KmR9MVTZ2zZkVj1kHa68MueVKH0R4zqQ44WEXLM8VjcWHP0PtKLfPzQnMtGn3W4QYf6qxFxceVI394r2xnV+1rih0fV1Vzf3fO1n3evL5J78ruvZ5ptX2Rwy92Tfb1wlEqut3U+sZ3HXOeJ7/zDrbyuP6+Zz0fqa6Nv3vhY7Yu1xWnGevmsvsUpTT/RYIe8waUH/rvHMWKFzLfN8L+rTfp645mfX7ftlnfDtYxN59w0=\", \"base64\"));\nconst $5cab828b3273a17c$var$FEATURES = [\n    \"isol\",\n    \"fina\",\n    \"fin2\",\n    \"fin3\",\n    \"medi\",\n    \"med2\",\n    \"init\"\n];\nconst $5cab828b3273a17c$var$ShapingClasses = {\n    Non_Joining: 0,\n    Left_Joining: 1,\n    Right_Joining: 2,\n    Dual_Joining: 3,\n    Join_Causing: 3,\n    ALAPH: 4,\n    \"DALATH RISH\": 5,\n    Transparent: 6\n};\nconst $5cab828b3273a17c$var$ISOL = \"isol\";\nconst $5cab828b3273a17c$var$FINA = \"fina\";\nconst $5cab828b3273a17c$var$FIN2 = \"fin2\";\nconst $5cab828b3273a17c$var$FIN3 = \"fin3\";\nconst $5cab828b3273a17c$var$MEDI = \"medi\";\nconst $5cab828b3273a17c$var$MED2 = \"med2\";\nconst $5cab828b3273a17c$var$INIT = \"init\";\nconst $5cab828b3273a17c$var$NONE = null;\n// Each entry is [prevAction, curAction, nextState]\nconst $5cab828b3273a17c$var$STATE_TABLE = [\n    //   Non_Joining,        Left_Joining,       Right_Joining,     Dual_Joining,           ALAPH,            DALATH RISH\n    // State 0: prev was U,  not willing to join.\n    [\n        [\n            $5cab828b3273a17c$var$NONE,\n            $5cab828b3273a17c$var$NONE,\n            0\n        ],\n        [\n            $5cab828b3273a17c$var$NONE,\n            $5cab828b3273a17c$var$ISOL,\n            2\n        ],\n        [\n            $5cab828b3273a17c$var$NONE,\n            $5cab828b3273a17c$var$ISOL,\n            1\n        ],\n        [\n            $5cab828b3273a17c$var$NONE,\n            $5cab828b3273a17c$var$ISOL,\n            2\n        ],\n        [\n            $5cab828b3273a17c$var$NONE,\n            $5cab828b3273a17c$var$ISOL,\n            1\n        ],\n        [\n            $5cab828b3273a17c$var$NONE,\n            $5cab828b3273a17c$var$ISOL,\n            6\n        ]\n    ],\n    // State 1: prev was R or ISOL/ALAPH,  not willing to join.\n    [\n        [\n            $5cab828b3273a17c$var$NONE,\n            $5cab828b3273a17c$var$NONE,\n            0\n        ],\n        [\n            $5cab828b3273a17c$var$NONE,\n            $5cab828b3273a17c$var$ISOL,\n            2\n        ],\n        [\n            $5cab828b3273a17c$var$NONE,\n            $5cab828b3273a17c$var$ISOL,\n            1\n        ],\n        [\n            $5cab828b3273a17c$var$NONE,\n            $5cab828b3273a17c$var$ISOL,\n            2\n        ],\n        [\n            $5cab828b3273a17c$var$NONE,\n            $5cab828b3273a17c$var$FIN2,\n            5\n        ],\n        [\n            $5cab828b3273a17c$var$NONE,\n            $5cab828b3273a17c$var$ISOL,\n            6\n        ]\n    ],\n    // State 2: prev was D/L in ISOL form,  willing to join.\n    [\n        [\n            $5cab828b3273a17c$var$NONE,\n            $5cab828b3273a17c$var$NONE,\n            0\n        ],\n        [\n            $5cab828b3273a17c$var$NONE,\n            $5cab828b3273a17c$var$ISOL,\n            2\n        ],\n        [\n            $5cab828b3273a17c$var$INIT,\n            $5cab828b3273a17c$var$FINA,\n            1\n        ],\n        [\n            $5cab828b3273a17c$var$INIT,\n            $5cab828b3273a17c$var$FINA,\n            3\n        ],\n        [\n            $5cab828b3273a17c$var$INIT,\n            $5cab828b3273a17c$var$FINA,\n            4\n        ],\n        [\n            $5cab828b3273a17c$var$INIT,\n            $5cab828b3273a17c$var$FINA,\n            6\n        ]\n    ],\n    // State 3: prev was D in FINA form,  willing to join.\n    [\n        [\n            $5cab828b3273a17c$var$NONE,\n            $5cab828b3273a17c$var$NONE,\n            0\n        ],\n        [\n            $5cab828b3273a17c$var$NONE,\n            $5cab828b3273a17c$var$ISOL,\n            2\n        ],\n        [\n            $5cab828b3273a17c$var$MEDI,\n            $5cab828b3273a17c$var$FINA,\n            1\n        ],\n        [\n            $5cab828b3273a17c$var$MEDI,\n            $5cab828b3273a17c$var$FINA,\n            3\n        ],\n        [\n            $5cab828b3273a17c$var$MEDI,\n            $5cab828b3273a17c$var$FINA,\n            4\n        ],\n        [\n            $5cab828b3273a17c$var$MEDI,\n            $5cab828b3273a17c$var$FINA,\n            6\n        ]\n    ],\n    // State 4: prev was FINA ALAPH,  not willing to join.\n    [\n        [\n            $5cab828b3273a17c$var$NONE,\n            $5cab828b3273a17c$var$NONE,\n            0\n        ],\n        [\n            $5cab828b3273a17c$var$NONE,\n            $5cab828b3273a17c$var$ISOL,\n            2\n        ],\n        [\n            $5cab828b3273a17c$var$MED2,\n            $5cab828b3273a17c$var$ISOL,\n            1\n        ],\n        [\n            $5cab828b3273a17c$var$MED2,\n            $5cab828b3273a17c$var$ISOL,\n            2\n        ],\n        [\n            $5cab828b3273a17c$var$MED2,\n            $5cab828b3273a17c$var$FIN2,\n            5\n        ],\n        [\n            $5cab828b3273a17c$var$MED2,\n            $5cab828b3273a17c$var$ISOL,\n            6\n        ]\n    ],\n    // State 5: prev was FIN2/FIN3 ALAPH,  not willing to join.\n    [\n        [\n            $5cab828b3273a17c$var$NONE,\n            $5cab828b3273a17c$var$NONE,\n            0\n        ],\n        [\n            $5cab828b3273a17c$var$NONE,\n            $5cab828b3273a17c$var$ISOL,\n            2\n        ],\n        [\n            $5cab828b3273a17c$var$ISOL,\n            $5cab828b3273a17c$var$ISOL,\n            1\n        ],\n        [\n            $5cab828b3273a17c$var$ISOL,\n            $5cab828b3273a17c$var$ISOL,\n            2\n        ],\n        [\n            $5cab828b3273a17c$var$ISOL,\n            $5cab828b3273a17c$var$FIN2,\n            5\n        ],\n        [\n            $5cab828b3273a17c$var$ISOL,\n            $5cab828b3273a17c$var$ISOL,\n            6\n        ]\n    ],\n    // State 6: prev was DALATH/RISH,  not willing to join.\n    [\n        [\n            $5cab828b3273a17c$var$NONE,\n            $5cab828b3273a17c$var$NONE,\n            0\n        ],\n        [\n            $5cab828b3273a17c$var$NONE,\n            $5cab828b3273a17c$var$ISOL,\n            2\n        ],\n        [\n            $5cab828b3273a17c$var$NONE,\n            $5cab828b3273a17c$var$ISOL,\n            1\n        ],\n        [\n            $5cab828b3273a17c$var$NONE,\n            $5cab828b3273a17c$var$ISOL,\n            2\n        ],\n        [\n            $5cab828b3273a17c$var$NONE,\n            $5cab828b3273a17c$var$FIN3,\n            5\n        ],\n        [\n            $5cab828b3273a17c$var$NONE,\n            $5cab828b3273a17c$var$ISOL,\n            6\n        ]\n    ]\n];\nclass $5cab828b3273a17c$export$2e2bcd8739ae039 extends $5340de7a86f3ae85$export$2e2bcd8739ae039 {\n    static planFeatures(plan) {\n        plan.add([\n            \"ccmp\",\n            \"locl\"\n        ]);\n        for(let i = 0; i < $5cab828b3273a17c$var$FEATURES.length; i++){\n            let feature = $5cab828b3273a17c$var$FEATURES[i];\n            plan.addStage(feature, false);\n        }\n        plan.addStage(\"mset\");\n    }\n    static assignFeatures(plan, glyphs) {\n        super.assignFeatures(plan, glyphs);\n        let prev = -1;\n        let state = 0;\n        let actions = [];\n        // Apply the state machine to map glyphs to features\n        for(let i = 0; i < glyphs.length; i++){\n            let curAction, prevAction;\n            var glyph = glyphs[i];\n            let type = $5cab828b3273a17c$var$getShapingClass(glyph.codePoints[0]);\n            if (type === $5cab828b3273a17c$var$ShapingClasses.Transparent) {\n                actions[i] = $5cab828b3273a17c$var$NONE;\n                continue;\n            }\n            [prevAction, curAction, state] = $5cab828b3273a17c$var$STATE_TABLE[state][type];\n            if (prevAction !== $5cab828b3273a17c$var$NONE && prev !== -1) actions[prev] = prevAction;\n            actions[i] = curAction;\n            prev = i;\n        }\n        // Apply the chosen features to their respective glyphs\n        for(let index = 0; index < glyphs.length; index++){\n            let feature;\n            var glyph = glyphs[index];\n            if (feature = actions[index]) glyph.features[feature] = true;\n        }\n    }\n}\nfunction $5cab828b3273a17c$var$getShapingClass(codePoint) {\n    let res = $5cab828b3273a17c$var$trie.get(codePoint);\n    if (res) return res - 1;\n    let category = unicode_properties__WEBPACK_IMPORTED_MODULE_6__[\"default\"].getCategory(codePoint);\n    if (category === \"Mn\" || category === \"Me\" || category === \"Cf\") return $5cab828b3273a17c$var$ShapingClasses.Transparent;\n    return $5cab828b3273a17c$var$ShapingClasses.Non_Joining;\n}\nclass $ab0ec2aaf85421fe$export$2e2bcd8739ae039 {\n    constructor(glyphs, options){\n        this.glyphs = glyphs;\n        this.reset(options);\n    }\n    reset(options = {}, index = 0) {\n        this.options = options;\n        this.flags = options.flags || {};\n        this.markAttachmentType = options.markAttachmentType || 0;\n        this.index = index;\n    }\n    get cur() {\n        return this.glyphs[this.index] || null;\n    }\n    shouldIgnore(glyph) {\n        return this.flags.ignoreMarks && glyph.isMark || this.flags.ignoreBaseGlyphs && glyph.isBase || this.flags.ignoreLigatures && glyph.isLigature || this.markAttachmentType && glyph.isMark && glyph.markAttachmentType !== this.markAttachmentType;\n    }\n    move(dir) {\n        this.index += dir;\n        while(0 <= this.index && this.index < this.glyphs.length && this.shouldIgnore(this.glyphs[this.index]))this.index += dir;\n        if (0 > this.index || this.index >= this.glyphs.length) return null;\n        return this.glyphs[this.index];\n    }\n    next() {\n        return this.move(1);\n    }\n    prev() {\n        return this.move(-1);\n    }\n    peek(count = 1) {\n        let idx = this.index;\n        let res = this.increment(count);\n        this.index = idx;\n        return res;\n    }\n    peekIndex(count = 1) {\n        let idx = this.index;\n        this.increment(count);\n        let res = this.index;\n        this.index = idx;\n        return res;\n    }\n    increment(count = 1) {\n        let dir = count < 0 ? -1 : 1;\n        count = Math.abs(count);\n        while(count--)this.move(dir);\n        return this.glyphs[this.index];\n    }\n}\nconst $cffd0e0e7e88a6c6$var$DEFAULT_SCRIPTS = [\n    \"DFLT\",\n    \"dflt\",\n    \"latn\"\n];\nclass $cffd0e0e7e88a6c6$export$2e2bcd8739ae039 {\n    constructor(font, table){\n        this.font = font;\n        this.table = table;\n        this.script = null;\n        this.scriptTag = null;\n        this.language = null;\n        this.languageTag = null;\n        this.features = {};\n        this.lookups = {};\n        // Setup variation substitutions\n        this.variationsIndex = font._variationProcessor ? this.findVariationsIndex(font._variationProcessor.normalizedCoords) : -1;\n        // initialize to default script + language\n        this.selectScript();\n        // current context (set by applyFeatures)\n        this.glyphs = [];\n        this.positions = []; // only used by GPOS\n        this.ligatureID = 1;\n        this.currentFeature = null;\n    }\n    findScript(script) {\n        if (this.table.scriptList == null) return null;\n        if (!Array.isArray(script)) script = [\n            script\n        ];\n        for (let s of script)for (let entry of this.table.scriptList){\n            if (entry.tag === s) return entry;\n        }\n        return null;\n    }\n    selectScript(script, language, direction) {\n        let changed = false;\n        let entry;\n        if (!this.script || script !== this.scriptTag) {\n            entry = this.findScript(script);\n            if (!entry) entry = this.findScript($cffd0e0e7e88a6c6$var$DEFAULT_SCRIPTS);\n            if (!entry) return this.scriptTag;\n            this.scriptTag = entry.tag;\n            this.script = entry.script;\n            this.language = null;\n            this.languageTag = null;\n            changed = true;\n        }\n        if (!direction || direction !== this.direction) this.direction = direction || $a5878e4f4663c9e2$export$9fddb9d0dd7d8a54(script);\n        if (language && language.length < 4) language += \" \".repeat(4 - language.length);\n        if (!language || language !== this.languageTag) {\n            this.language = null;\n            for (let lang of this.script.langSysRecords)if (lang.tag === language) {\n                this.language = lang.langSys;\n                this.languageTag = lang.tag;\n                break;\n            }\n            if (!this.language) {\n                this.language = this.script.defaultLangSys;\n                this.languageTag = null;\n            }\n            changed = true;\n        }\n        // Build a feature lookup table\n        if (changed) {\n            this.features = {};\n            if (this.language) for (let featureIndex of this.language.featureIndexes){\n                let record = this.table.featureList[featureIndex];\n                let substituteFeature = this.substituteFeatureForVariations(featureIndex);\n                this.features[record.tag] = substituteFeature || record.feature;\n            }\n        }\n        return this.scriptTag;\n    }\n    lookupsForFeatures(userFeatures = [], exclude) {\n        let lookups = [];\n        for (let tag of userFeatures){\n            let feature = this.features[tag];\n            if (!feature) continue;\n            for (let lookupIndex of feature.lookupListIndexes){\n                if (exclude && exclude.indexOf(lookupIndex) !== -1) continue;\n                lookups.push({\n                    feature: tag,\n                    index: lookupIndex,\n                    lookup: this.table.lookupList.get(lookupIndex)\n                });\n            }\n        }\n        lookups.sort((a, b)=>a.index - b.index);\n        return lookups;\n    }\n    substituteFeatureForVariations(featureIndex) {\n        if (this.variationsIndex === -1) return null;\n        let record = this.table.featureVariations.featureVariationRecords[this.variationsIndex];\n        let substitutions = record.featureTableSubstitution.substitutions;\n        for (let substitution of substitutions){\n            if (substitution.featureIndex === featureIndex) return substitution.alternateFeatureTable;\n        }\n        return null;\n    }\n    findVariationsIndex(coords) {\n        let variations = this.table.featureVariations;\n        if (!variations) return -1;\n        let records = variations.featureVariationRecords;\n        for(let i = 0; i < records.length; i++){\n            let conditions = records[i].conditionSet.conditionTable;\n            if (this.variationConditionsMatch(conditions, coords)) return i;\n        }\n        return -1;\n    }\n    variationConditionsMatch(conditions, coords) {\n        return conditions.every((condition)=>{\n            let coord = condition.axisIndex < coords.length ? coords[condition.axisIndex] : 0;\n            return condition.filterRangeMinValue <= coord && coord <= condition.filterRangeMaxValue;\n        });\n    }\n    applyFeatures(userFeatures, glyphs, advances) {\n        let lookups = this.lookupsForFeatures(userFeatures);\n        this.applyLookups(lookups, glyphs, advances);\n    }\n    applyLookups(lookups, glyphs, positions) {\n        this.glyphs = glyphs;\n        this.positions = positions;\n        this.glyphIterator = new $ab0ec2aaf85421fe$export$2e2bcd8739ae039(glyphs);\n        for (let { feature: feature, lookup: lookup } of lookups){\n            this.currentFeature = feature;\n            this.glyphIterator.reset(lookup.flags);\n            while(this.glyphIterator.index < glyphs.length){\n                if (!(feature in this.glyphIterator.cur.features)) {\n                    this.glyphIterator.next();\n                    continue;\n                }\n                for (let table of lookup.subTables){\n                    let res = this.applyLookup(lookup.lookupType, table);\n                    if (res) break;\n                }\n                this.glyphIterator.next();\n            }\n        }\n    }\n    applyLookup(lookup, table) {\n        throw new Error(\"applyLookup must be implemented by subclasses\");\n    }\n    applyLookupList(lookupRecords) {\n        let options = this.glyphIterator.options;\n        let glyphIndex = this.glyphIterator.index;\n        for (let lookupRecord of lookupRecords){\n            // Reset flags and find glyph index for this lookup record\n            this.glyphIterator.reset(options, glyphIndex);\n            this.glyphIterator.increment(lookupRecord.sequenceIndex);\n            // Get the lookup and setup flags for subtables\n            let lookup = this.table.lookupList.get(lookupRecord.lookupListIndex);\n            this.glyphIterator.reset(lookup.flags, this.glyphIterator.index);\n            // Apply lookup subtables until one matches\n            for (let table of lookup.subTables){\n                if (this.applyLookup(lookup.lookupType, table)) break;\n            }\n        }\n        this.glyphIterator.reset(options, glyphIndex);\n        return true;\n    }\n    coverageIndex(coverage, glyph) {\n        if (glyph == null) glyph = this.glyphIterator.cur.id;\n        switch(coverage.version){\n            case 1:\n                return coverage.glyphs.indexOf(glyph);\n            case 2:\n                for (let range of coverage.rangeRecords){\n                    if (range.start <= glyph && glyph <= range.end) return range.startCoverageIndex + glyph - range.start;\n                }\n                break;\n        }\n        return -1;\n    }\n    match(sequenceIndex, sequence, fn, matched) {\n        let pos = this.glyphIterator.index;\n        let glyph = this.glyphIterator.increment(sequenceIndex);\n        let idx = 0;\n        while(idx < sequence.length && glyph && fn(sequence[idx], glyph)){\n            if (matched) matched.push(this.glyphIterator.index);\n            idx++;\n            glyph = this.glyphIterator.next();\n        }\n        this.glyphIterator.index = pos;\n        if (idx < sequence.length) return false;\n        return matched || true;\n    }\n    sequenceMatches(sequenceIndex, sequence) {\n        return this.match(sequenceIndex, sequence, (component, glyph)=>component === glyph.id);\n    }\n    sequenceMatchIndices(sequenceIndex, sequence) {\n        return this.match(sequenceIndex, sequence, (component, glyph)=>{\n            // If the current feature doesn't apply to this glyph,\n            if (!(this.currentFeature in glyph.features)) return false;\n            return component === glyph.id;\n        }, []);\n    }\n    coverageSequenceMatches(sequenceIndex, sequence) {\n        return this.match(sequenceIndex, sequence, (coverage, glyph)=>this.coverageIndex(coverage, glyph.id) >= 0);\n    }\n    getClassID(glyph, classDef) {\n        switch(classDef.version){\n            case 1:\n                let i = glyph - classDef.startGlyph;\n                if (i >= 0 && i < classDef.classValueArray.length) return classDef.classValueArray[i];\n                break;\n            case 2:\n                for (let range of classDef.classRangeRecord){\n                    if (range.start <= glyph && glyph <= range.end) return range.class;\n                }\n                break;\n        }\n        return 0;\n    }\n    classSequenceMatches(sequenceIndex, sequence, classDef) {\n        return this.match(sequenceIndex, sequence, (classID, glyph)=>classID === this.getClassID(glyph.id, classDef));\n    }\n    applyContext(table) {\n        let index, set;\n        switch(table.version){\n            case 1:\n                index = this.coverageIndex(table.coverage);\n                if (index === -1) return false;\n                set = table.ruleSets[index];\n                for (let rule of set){\n                    if (this.sequenceMatches(1, rule.input)) return this.applyLookupList(rule.lookupRecords);\n                }\n                break;\n            case 2:\n                if (this.coverageIndex(table.coverage) === -1) return false;\n                index = this.getClassID(this.glyphIterator.cur.id, table.classDef);\n                if (index === -1) return false;\n                set = table.classSet[index];\n                for (let rule1 of set){\n                    if (this.classSequenceMatches(1, rule1.classes, table.classDef)) return this.applyLookupList(rule1.lookupRecords);\n                }\n                break;\n            case 3:\n                if (this.coverageSequenceMatches(0, table.coverages)) return this.applyLookupList(table.lookupRecords);\n                break;\n        }\n        return false;\n    }\n    applyChainingContext(table) {\n        let index;\n        switch(table.version){\n            case 1:\n                index = this.coverageIndex(table.coverage);\n                if (index === -1) return false;\n                let set = table.chainRuleSets[index];\n                for (let rule of set){\n                    if (this.sequenceMatches(-rule.backtrack.length, rule.backtrack) && this.sequenceMatches(1, rule.input) && this.sequenceMatches(1 + rule.input.length, rule.lookahead)) return this.applyLookupList(rule.lookupRecords);\n                }\n                break;\n            case 2:\n                if (this.coverageIndex(table.coverage) === -1) return false;\n                index = this.getClassID(this.glyphIterator.cur.id, table.inputClassDef);\n                let rules = table.chainClassSet[index];\n                if (!rules) return false;\n                for (let rule2 of rules){\n                    if (this.classSequenceMatches(-rule2.backtrack.length, rule2.backtrack, table.backtrackClassDef) && this.classSequenceMatches(1, rule2.input, table.inputClassDef) && this.classSequenceMatches(1 + rule2.input.length, rule2.lookahead, table.lookaheadClassDef)) return this.applyLookupList(rule2.lookupRecords);\n                }\n                break;\n            case 3:\n                if (this.coverageSequenceMatches(-table.backtrackGlyphCount, table.backtrackCoverage) && this.coverageSequenceMatches(0, table.inputCoverage) && this.coverageSequenceMatches(table.inputGlyphCount, table.lookaheadCoverage)) return this.applyLookupList(table.lookupRecords);\n                break;\n        }\n        return false;\n    }\n}\nclass $8cba766f534deddd$export$2e2bcd8739ae039 {\n    constructor(font, id, codePoints = [], features){\n        this._font = font;\n        this.codePoints = codePoints;\n        this.id = id;\n        this.features = {};\n        if (Array.isArray(features)) for(let i = 0; i < features.length; i++){\n            let feature = features[i];\n            this.features[feature] = true;\n        }\n        else if (typeof features === \"object\") Object.assign(this.features, features);\n        this.ligatureID = null;\n        this.ligatureComponent = null;\n        this.isLigated = false;\n        this.cursiveAttachment = null;\n        this.markAttachment = null;\n        this.shaperInfo = null;\n        this.substituted = false;\n        this.isMultiplied = false;\n    }\n    get id() {\n        return this._id;\n    }\n    set id(id) {\n        this._id = id;\n        this.substituted = true;\n        let GDEF = this._font.GDEF;\n        if (GDEF && GDEF.glyphClassDef) {\n            // TODO: clean this up\n            let classID = $cffd0e0e7e88a6c6$export$2e2bcd8739ae039.prototype.getClassID(id, GDEF.glyphClassDef);\n            this.isBase = classID === 1;\n            this.isLigature = classID === 2;\n            this.isMark = classID === 3;\n            this.markAttachmentType = GDEF.markAttachClassDef ? $cffd0e0e7e88a6c6$export$2e2bcd8739ae039.prototype.getClassID(id, GDEF.markAttachClassDef) : 0;\n        } else {\n            this.isMark = this.codePoints.length > 0 && this.codePoints.every(unicode_properties__WEBPACK_IMPORTED_MODULE_6__[\"default\"].isMark);\n            this.isBase = !this.isMark;\n            this.isLigature = this.codePoints.length > 1;\n            this.markAttachmentType = 0;\n        }\n    }\n    copy() {\n        return new $8cba766f534deddd$export$2e2bcd8739ae039(this._font, this.id, this.codePoints, this.features);\n    }\n}\nclass $ce39c5154631fd0c$export$2e2bcd8739ae039 extends $5340de7a86f3ae85$export$2e2bcd8739ae039 {\n    static{\n        this.zeroMarkWidths = \"NONE\";\n    }\n    static planFeatures(plan) {\n        plan.add([\n            \"ljmo\",\n            \"vjmo\",\n            \"tjmo\"\n        ], false);\n    }\n    static assignFeatures(plan, glyphs) {\n        let state = 0;\n        let i = 0;\n        while(i < glyphs.length){\n            let action;\n            let glyph = glyphs[i];\n            let code = glyph.codePoints[0];\n            let type = $ce39c5154631fd0c$var$getType(code);\n            [action, state] = $ce39c5154631fd0c$var$STATE_TABLE[state][type];\n            switch(action){\n                case $ce39c5154631fd0c$var$DECOMPOSE:\n                    // Decompose the composed syllable if it is not supported by the font.\n                    if (!plan.font.hasGlyphForCodePoint(code)) i = $ce39c5154631fd0c$var$decompose(glyphs, i, plan.font);\n                    break;\n                case $ce39c5154631fd0c$var$COMPOSE:\n                    // Found a decomposed syllable. Try to compose if supported by the font.\n                    i = $ce39c5154631fd0c$var$compose(glyphs, i, plan.font);\n                    break;\n                case $ce39c5154631fd0c$var$TONE_MARK:\n                    // Got a valid syllable, followed by a tone mark. Move the tone mark to the beginning of the syllable.\n                    $ce39c5154631fd0c$var$reorderToneMark(glyphs, i, plan.font);\n                    break;\n                case $ce39c5154631fd0c$var$INVALID:\n                    // Tone mark has no valid syllable to attach to, so insert a dotted circle\n                    i = $ce39c5154631fd0c$var$insertDottedCircle(glyphs, i, plan.font);\n                    break;\n            }\n            i++;\n        }\n    }\n}\nconst $ce39c5154631fd0c$var$HANGUL_BASE = 0xac00;\nconst $ce39c5154631fd0c$var$HANGUL_END = 0xd7a4;\nconst $ce39c5154631fd0c$var$HANGUL_COUNT = $ce39c5154631fd0c$var$HANGUL_END - $ce39c5154631fd0c$var$HANGUL_BASE + 1;\nconst $ce39c5154631fd0c$var$L_BASE = 0x1100; // lead\nconst $ce39c5154631fd0c$var$V_BASE = 0x1161; // vowel\nconst $ce39c5154631fd0c$var$T_BASE = 0x11a7; // trail\nconst $ce39c5154631fd0c$var$L_COUNT = 19;\nconst $ce39c5154631fd0c$var$V_COUNT = 21;\nconst $ce39c5154631fd0c$var$T_COUNT = 28;\nconst $ce39c5154631fd0c$var$L_END = $ce39c5154631fd0c$var$L_BASE + $ce39c5154631fd0c$var$L_COUNT - 1;\nconst $ce39c5154631fd0c$var$V_END = $ce39c5154631fd0c$var$V_BASE + $ce39c5154631fd0c$var$V_COUNT - 1;\nconst $ce39c5154631fd0c$var$T_END = $ce39c5154631fd0c$var$T_BASE + $ce39c5154631fd0c$var$T_COUNT - 1;\nconst $ce39c5154631fd0c$var$DOTTED_CIRCLE = 0x25cc;\nconst $ce39c5154631fd0c$var$isL = (code)=>0x1100 <= code && code <= 0x115f || 0xa960 <= code && code <= 0xa97c;\nconst $ce39c5154631fd0c$var$isV = (code)=>0x1160 <= code && code <= 0x11a7 || 0xd7b0 <= code && code <= 0xd7c6;\nconst $ce39c5154631fd0c$var$isT = (code)=>0x11a8 <= code && code <= 0x11ff || 0xd7cb <= code && code <= 0xd7fb;\nconst $ce39c5154631fd0c$var$isTone = (code)=>0x302e <= code && code <= 0x302f;\nconst $ce39c5154631fd0c$var$isLVT = (code)=>$ce39c5154631fd0c$var$HANGUL_BASE <= code && code <= $ce39c5154631fd0c$var$HANGUL_END;\nconst $ce39c5154631fd0c$var$isLV = (code)=>code - $ce39c5154631fd0c$var$HANGUL_BASE < $ce39c5154631fd0c$var$HANGUL_COUNT && (code - $ce39c5154631fd0c$var$HANGUL_BASE) % $ce39c5154631fd0c$var$T_COUNT === 0;\nconst $ce39c5154631fd0c$var$isCombiningL = (code)=>$ce39c5154631fd0c$var$L_BASE <= code && code <= $ce39c5154631fd0c$var$L_END;\nconst $ce39c5154631fd0c$var$isCombiningV = (code)=>$ce39c5154631fd0c$var$V_BASE <= code && code <= $ce39c5154631fd0c$var$V_END;\nconst $ce39c5154631fd0c$var$isCombiningT = (code)=>$ce39c5154631fd0c$var$T_BASE + 1 && 1 <= code && code <= $ce39c5154631fd0c$var$T_END;\n// Character categories\nconst $ce39c5154631fd0c$var$X = 0; // Other character\nconst $ce39c5154631fd0c$var$L = 1; // Leading consonant\nconst $ce39c5154631fd0c$var$V = 2; // Medial vowel\nconst $ce39c5154631fd0c$var$T = 3; // Trailing consonant\nconst $ce39c5154631fd0c$var$LV = 4; // Composed <LV> syllable\nconst $ce39c5154631fd0c$var$LVT = 5; // Composed <LVT> syllable\nconst $ce39c5154631fd0c$var$M = 6; // Tone mark\n// This function classifies a character using the above categories.\nfunction $ce39c5154631fd0c$var$getType(code) {\n    if ($ce39c5154631fd0c$var$isL(code)) return $ce39c5154631fd0c$var$L;\n    if ($ce39c5154631fd0c$var$isV(code)) return $ce39c5154631fd0c$var$V;\n    if ($ce39c5154631fd0c$var$isT(code)) return $ce39c5154631fd0c$var$T;\n    if ($ce39c5154631fd0c$var$isLV(code)) return $ce39c5154631fd0c$var$LV;\n    if ($ce39c5154631fd0c$var$isLVT(code)) return $ce39c5154631fd0c$var$LVT;\n    if ($ce39c5154631fd0c$var$isTone(code)) return $ce39c5154631fd0c$var$M;\n    return $ce39c5154631fd0c$var$X;\n}\n// State machine actions\nconst $ce39c5154631fd0c$var$NO_ACTION = 0;\nconst $ce39c5154631fd0c$var$DECOMPOSE = 1;\nconst $ce39c5154631fd0c$var$COMPOSE = 2;\nconst $ce39c5154631fd0c$var$TONE_MARK = 4;\nconst $ce39c5154631fd0c$var$INVALID = 5;\n// Build a state machine that accepts valid syllables, and applies actions along the way.\n// The logic this is implementing is documented at the top of the file.\nconst $ce39c5154631fd0c$var$STATE_TABLE = [\n    //       X                 L                 V                T                  LV                LVT               M\n    // State 0: start state\n    [\n        [\n            $ce39c5154631fd0c$var$NO_ACTION,\n            0\n        ],\n        [\n            $ce39c5154631fd0c$var$NO_ACTION,\n            1\n        ],\n        [\n            $ce39c5154631fd0c$var$NO_ACTION,\n            0\n        ],\n        [\n            $ce39c5154631fd0c$var$NO_ACTION,\n            0\n        ],\n        [\n            $ce39c5154631fd0c$var$DECOMPOSE,\n            2\n        ],\n        [\n            $ce39c5154631fd0c$var$DECOMPOSE,\n            3\n        ],\n        [\n            $ce39c5154631fd0c$var$INVALID,\n            0\n        ]\n    ],\n    // State 1: <L>\n    [\n        [\n            $ce39c5154631fd0c$var$NO_ACTION,\n            0\n        ],\n        [\n            $ce39c5154631fd0c$var$NO_ACTION,\n            1\n        ],\n        [\n            $ce39c5154631fd0c$var$COMPOSE,\n            2\n        ],\n        [\n            $ce39c5154631fd0c$var$NO_ACTION,\n            0\n        ],\n        [\n            $ce39c5154631fd0c$var$DECOMPOSE,\n            2\n        ],\n        [\n            $ce39c5154631fd0c$var$DECOMPOSE,\n            3\n        ],\n        [\n            $ce39c5154631fd0c$var$INVALID,\n            0\n        ]\n    ],\n    // State 2: <L,V> or <LV>\n    [\n        [\n            $ce39c5154631fd0c$var$NO_ACTION,\n            0\n        ],\n        [\n            $ce39c5154631fd0c$var$NO_ACTION,\n            1\n        ],\n        [\n            $ce39c5154631fd0c$var$NO_ACTION,\n            0\n        ],\n        [\n            $ce39c5154631fd0c$var$COMPOSE,\n            3\n        ],\n        [\n            $ce39c5154631fd0c$var$DECOMPOSE,\n            2\n        ],\n        [\n            $ce39c5154631fd0c$var$DECOMPOSE,\n            3\n        ],\n        [\n            $ce39c5154631fd0c$var$TONE_MARK,\n            0\n        ]\n    ],\n    // State 3: <L,V,T> or <LVT>\n    [\n        [\n            $ce39c5154631fd0c$var$NO_ACTION,\n            0\n        ],\n        [\n            $ce39c5154631fd0c$var$NO_ACTION,\n            1\n        ],\n        [\n            $ce39c5154631fd0c$var$NO_ACTION,\n            0\n        ],\n        [\n            $ce39c5154631fd0c$var$NO_ACTION,\n            0\n        ],\n        [\n            $ce39c5154631fd0c$var$DECOMPOSE,\n            2\n        ],\n        [\n            $ce39c5154631fd0c$var$DECOMPOSE,\n            3\n        ],\n        [\n            $ce39c5154631fd0c$var$TONE_MARK,\n            0\n        ]\n    ]\n];\nfunction $ce39c5154631fd0c$var$getGlyph(font, code, features) {\n    return new $8cba766f534deddd$export$2e2bcd8739ae039(font, font.glyphForCodePoint(code).id, [\n        code\n    ], features);\n}\nfunction $ce39c5154631fd0c$var$decompose(glyphs, i, font) {\n    let glyph = glyphs[i];\n    let code = glyph.codePoints[0];\n    let s = code - $ce39c5154631fd0c$var$HANGUL_BASE;\n    let t = $ce39c5154631fd0c$var$T_BASE + s % $ce39c5154631fd0c$var$T_COUNT;\n    s = s / $ce39c5154631fd0c$var$T_COUNT | 0;\n    let l = $ce39c5154631fd0c$var$L_BASE + s / $ce39c5154631fd0c$var$V_COUNT | 0;\n    let v = $ce39c5154631fd0c$var$V_BASE + s % $ce39c5154631fd0c$var$V_COUNT;\n    // Don't decompose if all of the components are not available\n    if (!font.hasGlyphForCodePoint(l) || !font.hasGlyphForCodePoint(v) || t !== $ce39c5154631fd0c$var$T_BASE && !font.hasGlyphForCodePoint(t)) return i;\n    // Replace the current glyph with decomposed L, V, and T glyphs,\n    // and apply the proper OpenType features to each component.\n    let ljmo = $ce39c5154631fd0c$var$getGlyph(font, l, glyph.features);\n    ljmo.features.ljmo = true;\n    let vjmo = $ce39c5154631fd0c$var$getGlyph(font, v, glyph.features);\n    vjmo.features.vjmo = true;\n    let insert = [\n        ljmo,\n        vjmo\n    ];\n    if (t > $ce39c5154631fd0c$var$T_BASE) {\n        let tjmo = $ce39c5154631fd0c$var$getGlyph(font, t, glyph.features);\n        tjmo.features.tjmo = true;\n        insert.push(tjmo);\n    }\n    glyphs.splice(i, 1, ...insert);\n    return i + insert.length - 1;\n}\nfunction $ce39c5154631fd0c$var$compose(glyphs, i, font) {\n    let glyph = glyphs[i];\n    let code = glyphs[i].codePoints[0];\n    let type = $ce39c5154631fd0c$var$getType(code);\n    let prev = glyphs[i - 1].codePoints[0];\n    let prevType = $ce39c5154631fd0c$var$getType(prev);\n    // Figure out what type of syllable we're dealing with\n    let lv, ljmo, vjmo, tjmo;\n    if (prevType === $ce39c5154631fd0c$var$LV && type === $ce39c5154631fd0c$var$T) {\n        // <LV,T>\n        lv = prev;\n        tjmo = glyph;\n    } else {\n        if (type === $ce39c5154631fd0c$var$V) {\n            // <L,V>\n            ljmo = glyphs[i - 1];\n            vjmo = glyph;\n        } else {\n            // <L,V,T>\n            ljmo = glyphs[i - 2];\n            vjmo = glyphs[i - 1];\n            tjmo = glyph;\n        }\n        let l = ljmo.codePoints[0];\n        let v = vjmo.codePoints[0];\n        // Make sure L and V are combining characters\n        if ($ce39c5154631fd0c$var$isCombiningL(l) && $ce39c5154631fd0c$var$isCombiningV(v)) lv = $ce39c5154631fd0c$var$HANGUL_BASE + ((l - $ce39c5154631fd0c$var$L_BASE) * $ce39c5154631fd0c$var$V_COUNT + (v - $ce39c5154631fd0c$var$V_BASE)) * $ce39c5154631fd0c$var$T_COUNT;\n    }\n    let t = tjmo && tjmo.codePoints[0] || $ce39c5154631fd0c$var$T_BASE;\n    if (lv != null && (t === $ce39c5154631fd0c$var$T_BASE || $ce39c5154631fd0c$var$isCombiningT(t))) {\n        let s = lv + (t - $ce39c5154631fd0c$var$T_BASE);\n        // Replace with a composed glyph if supported by the font,\n        // otherwise apply the proper OpenType features to each component.\n        if (font.hasGlyphForCodePoint(s)) {\n            let del = prevType === $ce39c5154631fd0c$var$V ? 3 : 2;\n            glyphs.splice(i - del + 1, del, $ce39c5154631fd0c$var$getGlyph(font, s, glyph.features));\n            return i - del + 1;\n        }\n    }\n    // Didn't compose (either a non-combining component or unsupported by font).\n    if (ljmo) ljmo.features.ljmo = true;\n    if (vjmo) vjmo.features.vjmo = true;\n    if (tjmo) tjmo.features.tjmo = true;\n    if (prevType === $ce39c5154631fd0c$var$LV) {\n        // Sequence was originally <L,V>, which got combined earlier.\n        // Either the T was non-combining, or the LVT glyph wasn't supported.\n        // Decompose the glyph again and apply OT features.\n        $ce39c5154631fd0c$var$decompose(glyphs, i - 1, font);\n        return i + 1;\n    }\n    return i;\n}\nfunction $ce39c5154631fd0c$var$getLength(code) {\n    switch($ce39c5154631fd0c$var$getType(code)){\n        case $ce39c5154631fd0c$var$LV:\n        case $ce39c5154631fd0c$var$LVT:\n            return 1;\n        case $ce39c5154631fd0c$var$V:\n            return 2;\n        case $ce39c5154631fd0c$var$T:\n            return 3;\n    }\n}\nfunction $ce39c5154631fd0c$var$reorderToneMark(glyphs, i, font) {\n    let glyph = glyphs[i];\n    let code = glyphs[i].codePoints[0];\n    // Move tone mark to the beginning of the previous syllable, unless it is zero width\n    if (font.glyphForCodePoint(code).advanceWidth === 0) return;\n    let prev = glyphs[i - 1].codePoints[0];\n    let len = $ce39c5154631fd0c$var$getLength(prev);\n    glyphs.splice(i, 1);\n    return glyphs.splice(i - len, 0, glyph);\n}\nfunction $ce39c5154631fd0c$var$insertDottedCircle(glyphs, i, font) {\n    let glyph = glyphs[i];\n    let code = glyphs[i].codePoints[0];\n    if (font.hasGlyphForCodePoint($ce39c5154631fd0c$var$DOTTED_CIRCLE)) {\n        let dottedCircle = $ce39c5154631fd0c$var$getGlyph(font, $ce39c5154631fd0c$var$DOTTED_CIRCLE, glyph.features);\n        // If the tone mark is zero width, insert the dotted circle before, otherwise after\n        let idx = font.glyphForCodePoint(code).advanceWidth === 0 ? i : i + 1;\n        glyphs.splice(idx, 0, dottedCircle);\n        i++;\n    }\n    return i;\n}\nvar $a550b6039b7700b3$exports = {};\n$a550b6039b7700b3$exports = JSON.parse('{\"stateTable\":[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,2,3,4,5,6,7,8,9,0,10,11,11,12,13,14,15,16,17],[0,0,0,18,19,20,21,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,28,29,30,31,32,33,0,34,0,0,35,36,0,0,37,0],[0,0,0,38,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,39,0,0,0,40,41,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,43,44,44,8,9,0,0,0,0,12,43,0,0,0,0],[0,0,0,0,43,44,44,8,9,0,0,0,0,0,43,0,0,0,0],[0,0,0,45,46,47,48,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,50,0,0,51,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,52,0,0,0,0,0,0,0,0],[0,0,0,53,54,55,56,57,58,0,59,0,0,60,61,0,0,62,0],[0,0,0,4,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,63,64,0,0,40,41,0,9,0,10,0,0,0,42,0,63,0,0],[0,2,3,4,5,6,7,8,9,0,10,11,11,12,13,0,2,16,0],[0,0,0,18,65,20,21,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,0,66,67,67,8,9,0,10,0,0,0,68,0,0,0,0],[0,0,0,69,0,70,70,0,71,0,72,0,0,0,0,0,0,0,0],[0,0,0,73,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,75,0,0,0,76,77,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,79,80,80,22,23,0,0,0,0,25,79,0,0,0,0],[0,0,0,18,19,20,74,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,81,82,83,84,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,86,0,0,87,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,88,0,0,0,0,0,0,0,0],[0,0,0,18,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,89,90,0,0,76,77,0,23,0,24,0,0,0,78,0,89,0,0],[0,0,0,0,91,92,92,22,23,0,24,0,0,0,93,0,0,0,0],[0,0,0,94,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,96,0,0,0,97,98,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,35,100,0,0,0,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,0,100,0,0,0,0],[0,0,0,102,103,104,105,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,107,0,0,108,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,109,0,0,0,0,0,0,0,0],[0,0,0,28,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,110,111,0,0,97,98,0,33,0,34,0,0,0,99,0,110,0,0],[0,0,0,0,112,113,113,32,33,0,34,0,0,0,114,0,0,0,0],[0,0,0,0,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,0,0,115,116,117,118,8,9,0,10,0,0,119,120,0,0,16,0],[0,0,0,0,0,121,121,0,9,0,10,0,0,0,42,0,0,0,0],[0,39,0,122,0,123,123,8,9,0,10,0,0,0,42,0,39,0,0],[0,124,64,0,0,0,0,0,0,0,0,0,0,0,0,0,124,0,0],[0,39,0,0,0,121,125,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,126,126,8,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,46,47,48,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,47,47,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,127,127,49,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,128,127,127,49,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,129,130,131,132,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,50,0,0,0,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,134,0,0,0,0,0,0,0,0],[0,0,0,135,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,136,0,0,0,137,138,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,140,141,141,57,58,0,0,0,0,60,140,0,0,0,0],[0,0,0,0,140,141,141,57,58,0,0,0,0,0,140,0,0,0,0],[0,0,0,142,143,144,145,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,147,0,0,148,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,149,0,0,0,0,0,0,0,0],[0,0,0,53,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,150,151,0,0,137,138,0,58,0,59,0,0,0,139,0,150,0,0],[0,0,0,0,152,153,153,57,58,0,59,0,0,0,154,0,0,0,0],[0,0,0,155,116,156,157,8,9,0,10,0,0,158,120,0,0,16,0],[0,0,0,0,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,75,3,4,5,159,160,8,161,0,162,0,11,12,163,0,75,16,0],[0,0,0,0,0,40,164,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,0,165,0,0,0,0],[0,124,64,0,0,40,164,0,9,0,10,0,0,0,42,0,124,0,0],[0,0,0,0,0,70,70,0,71,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,71,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,166,0,0,167,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,168,0,0,0,0,0,0,0,0],[0,0,0,0,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,0,0,0,79,80,80,22,23,0,0,0,0,0,79,0,0,0,0],[0,0,0,169,170,171,172,22,23,0,24,0,0,173,174,0,0,27,0],[0,0,0,0,0,175,175,0,23,0,24,0,0,0,78,0,0,0,0],[0,75,0,176,0,177,177,22,23,0,24,0,0,0,78,0,75,0,0],[0,178,90,0,0,0,0,0,0,0,0,0,0,0,0,0,178,0,0],[0,75,0,0,0,175,179,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,180,180,22,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,82,83,84,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,83,83,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,181,181,85,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,182,181,181,85,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,183,184,185,186,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,86,0,0,0,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,188,0,0,0,0,0,0,0,0],[0,0,0,189,170,190,191,22,23,0,24,0,0,192,174,0,0,27,0],[0,0,0,0,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,76,193,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,0,194,0,0,0,0],[0,178,90,0,0,76,193,0,23,0,24,0,0,0,78,0,178,0,0],[0,0,0,0,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,0,100,0,0,0,0],[0,0,0,195,196,197,198,32,33,0,34,0,0,199,200,0,0,37,0],[0,0,0,0,0,201,201,0,33,0,34,0,0,0,99,0,0,0,0],[0,96,0,202,0,203,203,32,33,0,34,0,0,0,99,0,96,0,0],[0,204,111,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0],[0,96,0,0,0,201,205,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,206,206,32,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,103,104,105,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,104,104,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,207,207,106,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,208,207,207,106,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,209,210,211,212,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,107,0,0,0,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,214,0,0,0,0,0,0,0,0],[0,0,0,215,196,216,217,32,33,0,34,0,0,218,200,0,0,37,0],[0,0,0,0,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,97,219,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,0,220,0,0,0,0],[0,204,111,0,0,97,219,0,33,0,34,0,0,0,99,0,204,0,0],[0,0,0,221,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,223,0,0,0,40,224,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,119,225,0,0,0,0],[0,0,0,115,116,117,222,8,9,0,10,0,0,119,120,0,0,16,0],[0,0,0,115,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,226,64,0,0,40,224,0,9,0,10,0,0,0,42,0,226,0,0],[0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0],[0,39,0,0,0,121,121,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,44,44,8,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,227,0,228,229,0,9,0,10,0,0,230,0,0,0,0,0],[0,39,0,122,0,121,121,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,231,231,49,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,232,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,130,131,132,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,131,131,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,233,233,133,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,234,233,233,133,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,235,236,237,238,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,0,0,240,241,242,243,57,58,0,59,0,0,244,245,0,0,62,0],[0,0,0,0,0,246,246,0,58,0,59,0,0,0,139,0,0,0,0],[0,136,0,247,0,248,248,57,58,0,59,0,0,0,139,0,136,0,0],[0,249,151,0,0,0,0,0,0,0,0,0,0,0,0,0,249,0,0],[0,136,0,0,0,246,250,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,251,251,57,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,143,144,145,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,144,144,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,252,252,146,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,253,252,252,146,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,254,255,256,257,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,147,0,0,0,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,259,0,0,0,0,0,0,0,0],[0,0,0,260,241,261,262,57,58,0,59,0,0,263,245,0,0,62,0],[0,0,0,0,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,137,264,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,0,265,0,0,0,0],[0,249,151,0,0,137,264,0,58,0,59,0,0,0,139,0,249,0,0],[0,0,0,221,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,158,225,0,0,0,0],[0,0,0,155,116,156,222,8,9,0,10,0,0,158,120,0,0,16,0],[0,0,0,155,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,43,266,266,8,161,0,24,0,0,12,267,0,0,0,0],[0,75,0,176,43,268,268,269,161,0,24,0,0,0,267,0,75,0,0],[0,0,0,0,0,270,0,0,271,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,272,0,0,0,0,0,0,0,0],[0,273,274,0,0,40,41,0,9,0,10,0,0,0,42,0,273,0,0],[0,0,0,40,0,123,123,8,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,121,275,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,166,0,0,0,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,276,0,0,0,0,0,0,0,0],[0,0,0,277,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,279,0,0,0,76,280,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,173,281,0,0,0,0],[0,0,0,169,170,171,278,22,23,0,24,0,0,173,174,0,0,27,0],[0,0,0,169,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,282,90,0,0,76,280,0,23,0,24,0,0,0,78,0,282,0,0],[0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0],[0,75,0,0,0,175,175,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,80,80,22,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,283,0,284,285,0,23,0,24,0,0,286,0,0,0,0,0],[0,75,0,176,0,175,175,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,287,287,85,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,288,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,184,185,186,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,185,185,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,289,289,187,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,290,289,289,187,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,291,292,293,294,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,277,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,192,281,0,0,0,0],[0,0,0,189,170,190,278,22,23,0,24,0,0,192,174,0,0,27,0],[0,0,0,189,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,76,0,177,177,22,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,175,296,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,297,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,299,0,0,0,97,300,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,199,301,0,0,0,0],[0,0,0,195,196,197,298,32,33,0,34,0,0,199,200,0,0,37,0],[0,0,0,195,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,302,111,0,0,97,300,0,33,0,34,0,0,0,99,0,302,0,0],[0,0,0,0,0,0,0,0,33,0,0,0,0,0,0,0,0,0,0],[0,96,0,0,0,201,201,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,101,101,32,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,303,0,304,305,0,33,0,34,0,0,306,0,0,0,0,0],[0,96,0,202,0,201,201,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,307,307,106,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,308,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,210,211,212,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,211,211,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,309,309,213,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,310,309,309,213,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,311,312,313,314,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,297,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,218,301,0,0,0,0],[0,0,0,215,196,216,298,32,33,0,34,0,0,218,200,0,0,37,0],[0,0,0,215,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,97,0,203,203,32,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,201,316,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,0,225,0,0,0,0],[0,0,0,317,318,319,320,8,9,0,10,0,0,321,322,0,0,16,0],[0,223,0,323,0,123,123,8,9,0,10,0,0,0,42,0,223,0,0],[0,223,0,0,0,121,324,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,325,318,326,327,8,9,0,10,0,0,328,322,0,0,16,0],[0,0,0,64,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,9,0,0,0,0,230,0,0,0,0,0],[0,0,0,227,0,228,121,0,9,0,10,0,0,230,0,0,0,0,0],[0,0,0,227,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,0],[0,0,0,0,0,329,329,133,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,330,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,236,237,238,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,237,237,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,331,331,239,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,332,331,331,239,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,333,40,121,334,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,335,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,337,0,0,0,137,338,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,244,339,0,0,0,0],[0,0,0,240,241,242,336,57,58,0,59,0,0,244,245,0,0,62,0],[0,0,0,240,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,340,151,0,0,137,338,0,58,0,59,0,0,0,139,0,340,0,0],[0,0,0,0,0,0,0,0,58,0,0,0,0,0,0,0,0,0,0],[0,136,0,0,0,246,246,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,141,141,57,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,341,0,342,343,0,58,0,59,0,0,344,0,0,0,0,0],[0,136,0,247,0,246,246,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,0,0,57,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,345,345,146,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,346,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,255,256,257,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,256,256,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,347,347,258,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,348,347,347,258,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,349,350,351,352,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,335,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,263,339,0,0,0,0],[0,0,0,260,241,261,336,57,58,0,59,0,0,263,245,0,0,62,0],[0,0,0,260,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,137,0,248,248,57,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,246,354,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,126,126,8,23,0,0,0,0,0,0,0,0,0,0],[0,355,90,0,0,121,125,0,9,0,10,0,0,0,42,0,355,0,0],[0,0,0,0,0,356,356,269,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,357,358,359,360,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,270,0,0,0,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,0,0,0,0],[0,0,0,364,116,365,366,8,161,0,162,0,0,367,120,0,0,16,0],[0,0,0,0,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,40,0,121,121,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,0,281,0,0,0,0],[0,0,0,369,370,371,372,22,23,0,24,0,0,373,374,0,0,27,0],[0,279,0,375,0,177,177,22,23,0,24,0,0,0,78,0,279,0,0],[0,279,0,0,0,175,376,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,377,370,378,379,22,23,0,24,0,0,380,374,0,0,27,0],[0,0,0,90,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,23,0,0,0,0,286,0,0,0,0,0],[0,0,0,283,0,284,175,0,23,0,24,0,0,286,0,0,0,0,0],[0,0,0,283,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,85,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,0,0],[0,0,0,0,0,381,381,187,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,382,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,292,293,294,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,293,293,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,383,383,295,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,384,383,383,295,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,385,76,175,386,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,76,0,175,175,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,0,301,0,0,0,0],[0,0,0,387,388,389,390,32,33,0,34,0,0,391,392,0,0,37,0],[0,299,0,393,0,203,203,32,33,0,34,0,0,0,99,0,299,0,0],[0,299,0,0,0,201,394,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,395,388,396,397,32,33,0,34,0,0,398,392,0,0,37,0],[0,0,0,111,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,33,0,0,0,0,306,0,0,0,0,0],[0,0,0,303,0,304,201,0,33,0,34,0,0,306,0,0,0,0,0],[0,0,0,303,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,0,0],[0,0,0,0,0,399,399,213,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,400,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,312,313,314,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,313,313,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,401,401,315,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,402,401,401,315,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,403,97,201,404,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,97,0,201,201,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,405,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,407,0,0,0,40,408,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,321,409,0,0,0,0],[0,0,0,317,318,319,406,8,9,0,10,0,0,321,322,0,0,16,0],[0,0,0,317,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,410,64,0,0,40,408,0,9,0,10,0,0,0,42,0,410,0,0],[0,223,0,0,0,121,121,0,9,0,10,0,0,0,42,0,223,0,0],[0,223,0,323,0,121,121,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,405,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,328,409,0,0,0,0],[0,0,0,325,318,326,406,8,9,0,10,0,0,328,322,0,0,16,0],[0,0,0,325,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,0,0,0,133,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,0,0],[0,0,0,0,0,411,411,239,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,412,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,40,121,334,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,413,0,0,0,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,0,339,0,0,0,0],[0,0,0,414,415,416,417,57,58,0,59,0,0,418,419,0,0,62,0],[0,337,0,420,0,248,248,57,58,0,59,0,0,0,139,0,337,0,0],[0,337,0,0,0,246,421,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,422,415,423,424,57,58,0,59,0,0,425,419,0,0,62,0],[0,0,0,151,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,58,0,0,0,0,344,0,0,0,0,0],[0,0,0,341,0,342,246,0,58,0,59,0,0,344,0,0,0,0,0],[0,0,0,341,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,146,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,143,0,0],[0,0,0,0,0,426,426,258,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,427,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,350,351,352,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,351,351,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,428,428,353,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,429,428,428,353,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,430,137,246,431,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,137,0,246,246,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,432,116,433,434,8,161,0,162,0,0,435,120,0,0,16,0],[0,0,0,0,0,180,180,269,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,358,359,360,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,359,359,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,436,436,361,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,437,436,436,361,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,438,439,440,441,442,161,0,162,0,0,0,362,0,0,0,0],[0,443,274,0,0,0,0,0,0,0,0,0,0,0,0,0,443,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,444,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,367,225,0,0,0,0],[0,0,0,364,116,365,445,8,161,0,162,0,0,367,120,0,0,16,0],[0,0,0,364,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,0,0,0,0,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,446,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,448,0,0,0,76,449,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,373,450,0,0,0,0],[0,0,0,369,370,371,447,22,23,0,24,0,0,373,374,0,0,27,0],[0,0,0,369,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,451,90,0,0,76,449,0,23,0,24,0,0,0,78,0,451,0,0],[0,279,0,0,0,175,175,0,23,0,24,0,0,0,78,0,279,0,0],[0,279,0,375,0,175,175,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,446,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,380,450,0,0,0,0],[0,0,0,377,370,378,447,22,23,0,24,0,0,380,374,0,0,27,0],[0,0,0,377,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,0,0,0,187,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,0,0],[0,0,0,0,0,452,452,295,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,453,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,76,175,386,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,454,0,0,0,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,455,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,457,0,0,0,97,458,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,391,459,0,0,0,0],[0,0,0,387,388,389,456,32,33,0,34,0,0,391,392,0,0,37,0],[0,0,0,387,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,460,111,0,0,97,458,0,33,0,34,0,0,0,99,0,460,0,0],[0,299,0,0,0,201,201,0,33,0,34,0,0,0,99,0,299,0,0],[0,299,0,393,0,201,201,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,455,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,398,459,0,0,0,0],[0,0,0,395,388,396,456,32,33,0,34,0,0,398,392,0,0,37,0],[0,0,0,395,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,0,0,0,213,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,210,0,0],[0,0,0,0,0,461,461,315,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,462,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,97,201,404,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,463,0,0,0,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,0,409,0,0,0,0],[0,0,0,464,465,466,467,8,9,0,10,0,0,468,469,0,0,16,0],[0,407,0,470,0,123,123,8,9,0,10,0,0,0,42,0,407,0,0],[0,407,0,0,0,121,471,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,472,465,473,474,8,9,0,10,0,0,475,469,0,0,16,0],[0,0,0,0,0,0,0,239,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,0,0],[0,0,0,0,0,0,476,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,477,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,479,0,0,0,137,480,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,418,481,0,0,0,0],[0,0,0,414,415,416,478,57,58,0,59,0,0,418,419,0,0,62,0],[0,0,0,414,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,482,151,0,0,137,480,0,58,0,59,0,0,0,139,0,482,0,0],[0,337,0,0,0,246,246,0,58,0,59,0,0,0,139,0,337,0,0],[0,337,0,420,0,246,246,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,477,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,425,481,0,0,0,0],[0,0,0,422,415,423,478,57,58,0,59,0,0,425,419,0,0,62,0],[0,0,0,422,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,0,0,0,258,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0],[0,0,0,0,0,483,483,353,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,484,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,137,246,431,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,485,0,0,0,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,444,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,435,225,0,0,0,0],[0,0,0,432,116,433,445,8,161,0,162,0,0,435,120,0,0,16,0],[0,0,0,432,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,0,486,486,361,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,487,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,439,440,441,442,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,440,440,442,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,488,488,442,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,489,488,488,442,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,490,491,492,493,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,495,0,496,497,0,161,0,162,0,0,498,0,0,0,0,0],[0,0,0,0,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,0,225,0,0,0,0],[0,0,0,0,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,0,450,0,0,0,0],[0,0,0,499,500,501,502,22,23,0,24,0,0,503,504,0,0,27,0],[0,448,0,505,0,177,177,22,23,0,24,0,0,0,78,0,448,0,0],[0,448,0,0,0,175,506,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,507,500,508,509,22,23,0,24,0,0,510,504,0,0,27,0],[0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,292,0,0],[0,0,0,0,0,0,511,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,0,459,0,0,0,0],[0,0,0,512,513,514,515,32,33,0,34,0,0,516,517,0,0,37,0],[0,457,0,518,0,203,203,32,33,0,34,0,0,0,99,0,457,0,0],[0,457,0,0,0,201,519,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,520,513,521,522,32,33,0,34,0,0,523,517,0,0,37,0],[0,0,0,0,0,0,0,315,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,312,0,0],[0,0,0,0,0,0,524,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,525,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,527,0,0,0,40,528,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,468,529,0,0,0,0],[0,0,0,464,465,466,526,8,9,0,10,0,0,468,469,0,0,16,0],[0,0,0,464,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,530,64,0,0,40,528,0,9,0,10,0,0,0,42,0,530,0,0],[0,407,0,0,0,121,121,0,9,0,10,0,0,0,42,0,407,0,0],[0,407,0,470,0,121,121,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,525,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,475,529,0,0,0,0],[0,0,0,472,465,473,526,8,9,0,10,0,0,475,469,0,0,16,0],[0,0,0,472,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0],[0,0,0,0,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,0,481,0,0,0,0],[0,0,0,531,532,533,534,57,58,0,59,0,0,535,536,0,0,62,0],[0,479,0,537,0,248,248,57,58,0,59,0,0,0,139,0,479,0,0],[0,479,0,0,0,246,538,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,539,532,540,541,57,58,0,59,0,0,542,536,0,0,62,0],[0,0,0,0,0,0,0,353,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,350,0,0],[0,0,0,0,0,0,543,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,361,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,358,0,0],[0,0,0,0,0,544,544,442,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,545,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,491,492,493,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,492,492,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,546,546,494,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,547,546,546,494,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,548,549,368,550,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,274,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,161,0,0,0,0,498,0,0,0,0,0],[0,0,0,495,0,496,368,0,161,0,162,0,0,498,0,0,0,0,0],[0,0,0,495,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,551,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,553,0,0,0,76,554,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,503,555,0,0,0,0],[0,0,0,499,500,501,552,22,23,0,24,0,0,503,504,0,0,27,0],[0,0,0,499,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,556,90,0,0,76,554,0,23,0,24,0,0,0,78,0,556,0,0],[0,448,0,0,0,175,175,0,23,0,24,0,0,0,78,0,448,0,0],[0,448,0,505,0,175,175,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,551,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,510,555,0,0,0,0],[0,0,0,507,500,508,552,22,23,0,24,0,0,510,504,0,0,27,0],[0,0,0,507,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0],[0,0,0,557,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,559,0,0,0,97,560,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,516,561,0,0,0,0],[0,0,0,512,513,514,558,32,33,0,34,0,0,516,517,0,0,37,0],[0,0,0,512,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,562,111,0,0,97,560,0,33,0,34,0,0,0,99,0,562,0,0],[0,457,0,0,0,201,201,0,33,0,34,0,0,0,99,0,457,0,0],[0,457,0,518,0,201,201,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,557,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,523,561,0,0,0,0],[0,0,0,520,513,521,558,32,33,0,34,0,0,523,517,0,0,37,0],[0,0,0,520,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,0],[0,0,0,0,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,0,529,0,0,0,0],[0,0,0,563,66,564,565,8,9,0,10,0,0,566,68,0,0,16,0],[0,527,0,567,0,123,123,8,9,0,10,0,0,0,42,0,527,0,0],[0,527,0,0,0,121,568,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,569,66,570,571,8,9,0,10,0,0,572,68,0,0,16,0],[0,0,0,573,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,575,0,0,0,137,576,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,535,577,0,0,0,0],[0,0,0,531,532,533,574,57,58,0,59,0,0,535,536,0,0,62,0],[0,0,0,531,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,578,151,0,0,137,576,0,58,0,59,0,0,0,139,0,578,0,0],[0,479,0,0,0,246,246,0,58,0,59,0,0,0,139,0,479,0,0],[0,479,0,537,0,246,246,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,573,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,542,577,0,0,0,0],[0,0,0,539,532,540,574,57,58,0,59,0,0,542,536,0,0,62,0],[0,0,0,539,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,0,0],[0,0,0,0,0,0,0,442,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,439,0,0],[0,0,0,0,0,579,579,494,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,580,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,549,368,550,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,368,368,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,581,0,0,0,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,0,555,0,0,0,0],[0,0,0,582,91,583,584,22,23,0,24,0,0,585,93,0,0,27,0],[0,553,0,586,0,177,177,22,23,0,24,0,0,0,78,0,553,0,0],[0,553,0,0,0,175,587,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,588,91,589,590,22,23,0,24,0,0,591,93,0,0,27,0],[0,0,0,0,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,0,561,0,0,0,0],[0,0,0,592,112,593,594,32,33,0,34,0,0,595,114,0,0,37,0],[0,559,0,596,0,203,203,32,33,0,34,0,0,0,99,0,559,0,0],[0,559,0,0,0,201,597,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,598,112,599,600,32,33,0,34,0,0,601,114,0,0,37,0],[0,0,0,602,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,566,165,0,0,0,0],[0,0,0,563,66,564,67,8,9,0,10,0,0,566,68,0,0,16,0],[0,0,0,563,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,527,0,0,0,121,121,0,9,0,10,0,0,0,42,0,527,0,0],[0,527,0,567,0,121,121,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,602,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,572,165,0,0,0,0],[0,0,0,569,66,570,67,8,9,0,10,0,0,572,68,0,0,16,0],[0,0,0,569,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,0,577,0,0,0,0],[0,0,0,603,152,604,605,57,58,0,59,0,0,606,154,0,0,62,0],[0,575,0,607,0,248,248,57,58,0,59,0,0,0,139,0,575,0,0],[0,575,0,0,0,246,608,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,609,152,610,611,57,58,0,59,0,0,612,154,0,0,62,0],[0,0,0,0,0,0,0,494,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,491,0,0],[0,0,0,0,0,0,613,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,614,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,585,194,0,0,0,0],[0,0,0,582,91,583,92,22,23,0,24,0,0,585,93,0,0,27,0],[0,0,0,582,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,553,0,0,0,175,175,0,23,0,24,0,0,0,78,0,553,0,0],[0,553,0,586,0,175,175,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,614,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,591,194,0,0,0,0],[0,0,0,588,91,589,92,22,23,0,24,0,0,591,93,0,0,27,0],[0,0,0,588,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,615,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,595,220,0,0,0,0],[0,0,0,592,112,593,113,32,33,0,34,0,0,595,114,0,0,37,0],[0,0,0,592,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,559,0,0,0,201,201,0,33,0,34,0,0,0,99,0,559,0,0],[0,559,0,596,0,201,201,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,615,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,601,220,0,0,0,0],[0,0,0,598,112,599,113,32,33,0,34,0,0,601,114,0,0,37,0],[0,0,0,598,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,616,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,606,265,0,0,0,0],[0,0,0,603,152,604,153,57,58,0,59,0,0,606,154,0,0,62,0],[0,0,0,603,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,575,0,0,0,246,246,0,58,0,59,0,0,0,139,0,575,0,0],[0,575,0,607,0,246,246,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,616,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,612,265,0,0,0,0],[0,0,0,609,152,610,153,57,58,0,59,0,0,612,154,0,0,62,0],[0,0,0,609,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,549,0,0],[0,0,0,0,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0]],\"accepting\":[false,true,true,true,true,true,false,false,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,false,false,true,true,true,true,true,true,true,true,true,true,false,true,true,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,false,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,false,true,false,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,false,false,true,false,true,true,false,true,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,true,true,false,false,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,false,false,true,true,false,false,true,true,true,false,true,false,true,true,true,true,false,false,false,true,false,true,true,true,true,false,false,false,true,true,false,true,true,true,true,true,true,false,true,true,false,true,false,true,true,true,true,false,false,false,false,false,false,false,true,true,false,false,true,true,false,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,true,false,true,true,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,false,true,true,false,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,true,false,true,true,true,true,false,false,false,true,false,true,true,true,true,true,false,true,true,true,false,true,true,true,true,true,false,true,true,true,true,false,true,true,true,true,true,false,true,true,false,true,true,true],\"tags\":[[],[\"broken_cluster\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"standalone_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"consonant_syllable\"],[\"broken_cluster\"],[\"symbol_cluster\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"symbol_cluster\"],[],[\"symbol_cluster\"],[\"symbol_cluster\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"symbol_cluster\"],[\"symbol_cluster\"],[\"symbol_cluster\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[\"broken_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"broken_cluster\"],[\"symbol_cluster\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[],[],[\"broken_cluster\"],[],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[],[],[\"consonant_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[],[],[\"vowel_syllable\"],[],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[],[\"standalone_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[],[],[],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"consonant_syllable\"],[\"vowel_syllable\"],[\"standalone_cluster\"]]}');\nvar $f3bd27a8c88f3f53$exports = {};\n$f3bd27a8c88f3f53$exports = JSON.parse('{\"categories\":[\"O\",\"IND\",\"S\",\"GB\",\"B\",\"FM\",\"CGJ\",\"VMAbv\",\"VMPst\",\"VAbv\",\"VPst\",\"CMBlw\",\"VPre\",\"VBlw\",\"H\",\"VMBlw\",\"CMAbv\",\"MBlw\",\"CS\",\"R\",\"SUB\",\"MPst\",\"MPre\",\"FAbv\",\"FPst\",\"FBlw\",\"SMAbv\",\"SMBlw\",\"VMPre\",\"ZWNJ\",\"ZWJ\",\"WJ\",\"VS\",\"N\",\"HN\",\"MAbv\"],\"decompositions\":{\"2507\":[2503,2494],\"2508\":[2503,2519],\"2888\":[2887,2902],\"2891\":[2887,2878],\"2892\":[2887,2903],\"3018\":[3014,3006],\"3019\":[3015,3006],\"3020\":[3014,3031],\"3144\":[3142,3158],\"3264\":[3263,3285],\"3271\":[3270,3285],\"3272\":[3270,3286],\"3274\":[3270,3266],\"3275\":[3270,3266,3285],\"3402\":[3398,3390],\"3403\":[3399,3390],\"3404\":[3398,3415],\"3546\":[3545,3530],\"3548\":[3545,3535],\"3549\":[3545,3535,3530],\"3550\":[3545,3551],\"3635\":[3661,3634],\"3763\":[3789,3762],\"3955\":[3953,3954],\"3957\":[3953,3956],\"3958\":[4018,3968],\"3959\":[4018,3953,3968],\"3960\":[4019,3968],\"3961\":[4019,3953,3968],\"3969\":[3953,3968],\"6971\":[6970,6965],\"6973\":[6972,6965],\"6976\":[6974,6965],\"6977\":[6975,6965],\"6979\":[6978,6965],\"69934\":[69937,69927],\"69935\":[69938,69927],\"70475\":[70471,70462],\"70476\":[70471,70487],\"70843\":[70841,70842],\"70844\":[70841,70832],\"70846\":[70841,70845],\"71098\":[71096,71087],\"71099\":[71097,71087]},\"stateTable\":[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[2,2,3,4,4,5,0,6,7,8,9,10,11,12,13,14,15,16,0,17,18,11,19,20,21,22,0,0,23,0,0,2,0,24,0,25],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,28,0,0,0,0,27,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,39,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,39,0,0,47],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,0,0,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,9,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,10,11,12,13,14,0,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,9,0,0,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,10,11,12,13,14,15,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,0,0,0,0,11,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,4,4,5,0,6,7,8,9,10,11,12,13,14,15,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,48,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,49,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,16,0,0,0,11,0,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,51,0],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,16,0,0,0,11,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,28,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,0,0,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,33,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,0,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,33,0,0,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,39,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,0,0,0,0,35,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,52,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,53,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,40,0,0,0,35,0,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,40,0,0,0,35,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,0,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,48,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,0],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,0,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,52,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,51,0]],\"accepting\":[false,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],\"tags\":[[],[\"broken_cluster\"],[\"independent_cluster\"],[\"symbol_cluster\"],[\"standard_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"numeral_cluster\"],[\"broken_cluster\"],[\"independent_cluster\"],[\"symbol_cluster\"],[\"symbol_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"virama_terminated_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"numeral_cluster\"],[\"number_joiner_terminated_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"numeral_cluster\"]]}');\nconst $b9778c6b60232cf0$export$a513ea61a7bee91c = {\n    X: 1,\n    C: 2,\n    V: 4,\n    N: 8,\n    H: 16,\n    ZWNJ: 32,\n    ZWJ: 64,\n    M: 128,\n    SM: 256,\n    VD: 512,\n    A: 1024,\n    Placeholder: 2048,\n    Dotted_Circle: 4096,\n    RS: 8192,\n    Coeng: 16384,\n    Repha: 32768,\n    Ra: 65536,\n    CM: 131072,\n    Symbol: 262144 // Avagraha, etc that take marks (SM,A,VD).\n};\nconst $b9778c6b60232cf0$export$1a1f61c9c4dd9df0 = {\n    Start: 1,\n    Ra_To_Become_Reph: 2,\n    Pre_M: 4,\n    Pre_C: 8,\n    Base_C: 16,\n    After_Main: 32,\n    Above_C: 64,\n    Before_Sub: 128,\n    Below_C: 256,\n    After_Sub: 512,\n    Before_Post: 1024,\n    Post_C: 2048,\n    After_Post: 4096,\n    Final_C: 8192,\n    SMVD: 16384,\n    End: 32768\n};\nconst $b9778c6b60232cf0$export$8519deaa7de2b07 = $b9778c6b60232cf0$export$a513ea61a7bee91c.C | $b9778c6b60232cf0$export$a513ea61a7bee91c.Ra | $b9778c6b60232cf0$export$a513ea61a7bee91c.CM | $b9778c6b60232cf0$export$a513ea61a7bee91c.V | $b9778c6b60232cf0$export$a513ea61a7bee91c.Placeholder | $b9778c6b60232cf0$export$a513ea61a7bee91c.Dotted_Circle;\nconst $b9778c6b60232cf0$export$bbcd928767338e0d = $b9778c6b60232cf0$export$a513ea61a7bee91c.ZWJ | $b9778c6b60232cf0$export$a513ea61a7bee91c.ZWNJ;\nconst $b9778c6b60232cf0$export$ca9599b2a300afc = $b9778c6b60232cf0$export$a513ea61a7bee91c.H | $b9778c6b60232cf0$export$a513ea61a7bee91c.Coeng;\nconst $b9778c6b60232cf0$export$e99d119da76a0fc5 = {\n    Default: {\n        hasOldSpec: false,\n        virama: 0,\n        basePos: \"Last\",\n        rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Before_Post,\n        rephMode: \"Implicit\",\n        blwfMode: \"Pre_And_Post\"\n    },\n    Devanagari: {\n        hasOldSpec: true,\n        virama: 0x094D,\n        basePos: \"Last\",\n        rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Before_Post,\n        rephMode: \"Implicit\",\n        blwfMode: \"Pre_And_Post\"\n    },\n    Bengali: {\n        hasOldSpec: true,\n        virama: 0x09CD,\n        basePos: \"Last\",\n        rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Sub,\n        rephMode: \"Implicit\",\n        blwfMode: \"Pre_And_Post\"\n    },\n    Gurmukhi: {\n        hasOldSpec: true,\n        virama: 0x0A4D,\n        basePos: \"Last\",\n        rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Before_Sub,\n        rephMode: \"Implicit\",\n        blwfMode: \"Pre_And_Post\"\n    },\n    Gujarati: {\n        hasOldSpec: true,\n        virama: 0x0ACD,\n        basePos: \"Last\",\n        rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Before_Post,\n        rephMode: \"Implicit\",\n        blwfMode: \"Pre_And_Post\"\n    },\n    Oriya: {\n        hasOldSpec: true,\n        virama: 0x0B4D,\n        basePos: \"Last\",\n        rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Main,\n        rephMode: \"Implicit\",\n        blwfMode: \"Pre_And_Post\"\n    },\n    Tamil: {\n        hasOldSpec: true,\n        virama: 0x0BCD,\n        basePos: \"Last\",\n        rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Post,\n        rephMode: \"Implicit\",\n        blwfMode: \"Pre_And_Post\"\n    },\n    Telugu: {\n        hasOldSpec: true,\n        virama: 0x0C4D,\n        basePos: \"Last\",\n        rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Post,\n        rephMode: \"Explicit\",\n        blwfMode: \"Post_Only\"\n    },\n    Kannada: {\n        hasOldSpec: true,\n        virama: 0x0CCD,\n        basePos: \"Last\",\n        rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Post,\n        rephMode: \"Implicit\",\n        blwfMode: \"Post_Only\"\n    },\n    Malayalam: {\n        hasOldSpec: true,\n        virama: 0x0D4D,\n        basePos: \"Last\",\n        rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Main,\n        rephMode: \"Log_Repha\",\n        blwfMode: \"Pre_And_Post\"\n    },\n    // Handled by UniversalShaper\n    // Sinhala: {\n    //   hasOldSpec: false,\n    //   virama: 0x0DCA,\n    //   basePos: 'Last_Sinhala',\n    //   rephPos: POSITIONS.After_Main,\n    //   rephMode: 'Explicit',\n    //   blwfMode: 'Pre_And_Post'\n    // },\n    Khmer: {\n        hasOldSpec: false,\n        virama: 0x17D2,\n        basePos: \"First\",\n        rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Ra_To_Become_Reph,\n        rephMode: \"Vis_Repha\",\n        blwfMode: \"Pre_And_Post\"\n    }\n};\nconst $b9778c6b60232cf0$export$f647c9cfdd77d95a = {\n    // Khmer\n    0x17BE: [\n        0x17C1,\n        0x17BE\n    ],\n    0x17BF: [\n        0x17C1,\n        0x17BF\n    ],\n    0x17C0: [\n        0x17C1,\n        0x17C0\n    ],\n    0x17C4: [\n        0x17C1,\n        0x17C4\n    ],\n    0x17C5: [\n        0x17C1,\n        0x17C5\n    ]\n};\nvar $c6b883ac45fa55f1$require$Buffer = buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer;\nconst { decompositions: $c6b883ac45fa55f1$var$decompositions } = /*@__PURE__*/ $parcel$interopDefault($f3bd27a8c88f3f53$exports);\nconst $c6b883ac45fa55f1$var$trie = new unicode_trie__WEBPACK_IMPORTED_MODULE_7__($c6b883ac45fa55f1$require$Buffer.from(\"AAARAAAAAACgwgAAAbENTvLtnX+sHUUVx/f13nd/vHf7bl+FRGL7R0OJMcWYphBrimkVCSJR2xiEaLEGQ7AkBGowbYRSgj8K2B/GkpRYE6wlQSyJKCagrSlGkmqsqUZMY7S2CWkgqQViQSkt4Hfuzrx77tyZ2fm1u+/RPcknuzs7O3PmnDOzs7N73zteS5KXwKvgDTCnniTvBfPBJeAVpP2vFr69GGUtAkvAModyr0DeT4BrwCpwPVgDbga3ga+DjYbyluLcCvBN8F2wGWwHO8Ej4DjyPIbtz0DCeZpvD4CD4E/gb+AoOAFOgtPgLKiNJkkbTIKLwALwfvAh8GGwHFwFPg2uAzeCm8Ft4E5wN7gPPAi+D34AfgR+Ap7kx8+AZ8HvwZ/BEXAMvAheAa+Bc6OpzvVGknTABY30eB62C8GlYDFYCpaDq/n5z2J7PVgDbgG3N1KbrOdbWzby/N/G9i6wlR8/wLebUNcOll7vX7PLsQ4bdpAy92B/L3gK7AO/A38EfwX/AC+AkyT/m3x7mqdtYz7Gfq2ZJOPgPc3UXu/D9uJmmmcRT1uC7TJwZTONJxFL1+J4JbgBrAG3gNv5Nev5dhO2m3l54rqtON7RNLd1V8Z5auMfI+8Wbvv12P4Ux78AvyZl/Bb7fwD34HwH/EVR/t8t6rRlrYgFlHnMsdyXIupRFP+Gzv8Bb4CklSSjrTR9bz21uZx/Nj8v+uIFOJ4HFnJo3kWtNG6WkPSzBl1YbC8jeVfx+q+R9Pg48lxN8jFdhd8+01LrLTCdq6io8GNb1a8qKioqKioqKioc2cbXGcrWQ2Ynf9a9rmV/zVua9Dc16V/gz8pfxvar4A6wAdwL7gdbwUPgh+BR8AR4qpWuLe3D9gA4CA6DI+AoOAFOtdL1nNexfYs937fxDA8ubKf1zmv3dViI/Uvb9m2sqKioqAiHrVtehrH3TK2/3l4WZduioqIiDq+Rd1Jbef9ehnHmSnCtNNf7nOPcr8PHilO8jrfBF9v996lfwf6tUpl3tPvvdSjsvcwGnLt3Gsw/kzkpK8CdYH83my3Id0iT91WkL5xMktXgIfD85OD54zjfmYu5OFgN7h1LkmdBMg5fgbvAChzv49ujfEuZ3xlOk7kReTaSfL/B/jl+fMXsJLkb7AcPj8TlHC/zsgnYcyLd3zSh1vGAJr2ioqKiIn/eKXkMjn3/cWF5t/z6y37+K5urwP2YB36vPfw8yr7zeRjpu8g8cTf2H2+n89EtivLE93fs27Ez/Br2vM2+qWPl/ZyX9StFfQxW5v724PPxzXz7XHu4Pps5Jvtmiq13szmzfP0hlHkYHGn358bHeD0vYvsy+K+kz9vt/jy8gT40G1w4Rua0PN98nnaGf/e1G+mXIO2DY8P6Xz7WPz7Ky/7omJ0PBff4+B91fAqsAp8HXwI3gR04txbbdWDDWDpP/g7Yxs6BXWAP2AueJHo+M5bOpw+Cw+AIOApOgFMW7Xkdec6AkXH1+QfgyzbOTY73jy/C/gJ+/CCOP4D9xfz4I9h+TFMWtf9SRWzZwq7f0yi/L9voWSRbDfV/clx/3TuKfjoT26/iX813URx4tiVG3ay/sfFuJenb7J50A4mr1di/CZzLKZ6y2reunup4qzT+fM0wHp0PUD9+A7bYNJ5fn3eNP/Ft5bc0+S4n9/l1Gj+K82zesd1wfj3fZ79h2YyyVvLj7djfCR4xjJEyuy1+S/FyDt/MPwodn5hB8axrxy9nSBtYjOyHrs+BQ+B58E+u+wsWbWBtpb/hYL8RuA/pJ8fT2GffX+wl+daSa08jz9nxNG2k4963XBG/ZVhpUS573mh3BtPo7x/Eb7pE2yd5XvZssY/M/RZLc9SLeDsfD5gfTidi9//pwrzWu7t9lKcN7dxynthAh8vcKrQu1frHTGKBNF662KfoOXU1FsaFxe6x2kjClkBnGvXxwX0bytZ5unK+S9n2jxabTc5M0HUaIyTrfFa+Ljmflc9Xz7JtNdPa4eKz6WAPlb5l6xfLBzopWxcfncvSf7rHRJk2KSN2bKRsvcu2UZmxVIb9qd551e8rZcTERGuQ+qwIjERkjl2+djOlhWfpibnp/qxmP92FVr1/bc9GYxxuI5o3UzdukzYpj+H6nOxra9nHiaksjhDdsasPe9ca/CvOU1GVwUT4t8P921H4T8gsnkdIh+dn/pXrU0mnOZw21CbJv1P5LP0r4jtkbLH171BbCvavnFfeZ8L8K2wv/CuQRU6n/qWSNSbr2mO8xtK/U+Mq6Y/1yQyFJHHtv8Kn2uOC/Gvbf2VEPxJ9SvhY5d+Q+y21iRxLruOzsY6MWGrOkPHZ1b+jFuPzqEX/VcmoZkyIPT53k36/DZnrMd+K/Dbjs6kv6+6VYl9OU+WT07TplvMvWWhfVo3f4t48S+rbjIZl/1b5Xyd5vJdQiTyf7tUdMlbn0J9d/cn6c7M5DO1TNF0+bmT0Z3qdKaaoXeg1Lv7NEhufzyT/6vIKEeO1jX/psdi38a889qpkStcI/u12U3zE1Re+/Yv6QNwvdTDJGi9t2ps1XtKYDJ0PmcZKcU812sRxvms7J47mZ5c+SWJD5LPRg4qqj+nWL8Q5sRVrGar1EG0sOI6ndH3DVWL7wpeuwaY6O1Nh19N+Oqs5uI7Eto3aICxNrCn5rAuZ7Cn2bdJtfZPlL/k8Ld+ki6v9E56XPUvT52mV/YVvmMj2Zz8TEuNMTxfHuFfFUJ60OLrz1utODnFG47fLbSjXy0xSy4gN63EywlhMxWcNmK71svszi5OGTvdJe3rtd8ifB6I/mKBr1ap7uU/sqqTsMb+H5fxBFyuq+yqLnd7cmj33TwyOVVOwuj3nVXRtQtUGWR9jzI6kecZrKSKPuFakU2hZmXXZMDlsS1W9jBavv6eHpf3EtfJ7mKwYV0lX2g9FVY5N+Ung9aH1590+n3KLgEredfiez6u9svisY/Suk9Jsnkli1a+C1m/T7rzqd5UY9mfiXX9R92ibdZUIawTC96b1GBn6rDG1JsPv/b392SkiXVUGmyN0LO5LYi46Zf/Adc/QMaCo8TtG/bH1Z/TsW1QfUPRjm2cZee5PRaT33lEbnhlMax4qe1o/Y8a0icdaoOv9bsh+Hj6jonueoGtHumcMlX9lxLxXq7/D84fSzznGt6rtUerXxYU47/IcPeG3vqBbJ1StETZqg9fS2Akd/0Ovp+/CxD3P+/6bQwzJtsvyh5w+XjeXH9KfXGH3/VbSX4tS4XoftPZbnvcyxX1G5QvW1wbWTkbs7c3mTco6NWODbdxk3R9lGZo/aGxhiknTmETXLVs1c90u9+mBGCf6hs6fsmTq29sxPv8d82CuhCpNjGNjg31blGHrz1i41hd6nuYzbU3XhLQzj7Jt67Otw0uXUdDoH8e4F/joMdVui2dMJc3E+Tetvr6jEtPnPhJaVwz9Y7TDVlx1qnfitlEbtzlTVD0qX/pcm1esxI65PO3mU4eNrr5SZMz46FDE+aIlb5tntb1o/WOUETsW847pvNpaZH225eUpNnrS9yDy9wTysyr9XVOe63+qd3M6e4X6Ptd1Dpc1SdV53ZqFag1hpP+bE5f4ivY74BzXilzWWW1+S0TjJng91Gd9wmbNgpMVz6W8d7GJZwWtWp8p++c8fpjW0Vzff3dJfzGuoersEtnmpjVLupY48H6o7n8/C+kvJn+Lcd6q3QHx3usvZax3W8apvP6rev+UJSHfiCYe/h2aTwTaRi5DO28ZSd9zNhTfJ8b2je7drOo9HtNNbPMW03zOpq2qNqnKFN+0huhlMye2Pe9TdzfCedfxMlRfG7xjncaJ7fiXMYZk3X+ZvuKbXCGh8y8XH8TybajPTfq4tjG2/qb0RJO3SB19ba2SMuoNbW8R/g653qa9sdsRYsssu+ZxPss+tnayFd94yjofEi+hZdvo73q9jd3yisUYbfEpQ9XmMqUIm2fFZh4xkZeE1BNDL5v+ZcqXh/90bSwjflz8U0QcFWHzPOpy0amM+stqf1ad7LltVPqWmG3p3+GiIvLJf8duYA3NcBwbWRpkDXmo7RP+z5E6+8Xswz512dbrW2aMNrpKaBt9y45VR2j9efhAQL/PF38Xadq907NYC5dpZLy3kMX6PUHgeGGS3nfoPn9rObJ9s/4uMntnSt/J5TX+2ZRhtFcB8ZgVmyZbit8GCd/7/C7EOcYK7LdyjNhIlL81nqN/Xf9mOHt/anovP4X0tyem/OUZF9TmscY2nzEulq96ZeVwv2Bxxnwk3s9njT8m/YWOKl199fe53tTXyu5DLojfKWXej6R3RAPtDf1ex/PvtdJ8Q7aP7Ht6XpdXSJf8/wMdQuS/j0/HtKny9KbT+oT2K2ETuW7Tt09Uss5nCdWhjPuMTXzrztO4FHMy+V6TJaH9I6+2C5HPq9oc8xlKRva5rF8M/7tC26/6BsNFivQ//e1pVsyP19VrNrH1D5Wi7oUDdVp8Q5HVr1ztlzXPtH2Gc30+lMX3edH3ecm3fp0+Ps/IPvWH6OpiV7meEMlbzyIkpi1jtDU0Pmm6nMd0jU8bXK7N0jWkb/joHyNebfWgtrJpc0h7QiQP24aKqcwYPnTRIUmG63fRQ5VXLsekgy5NtVXVadLfpjzV9S6xYnuNri159ZmsmLCpJ8/6XSRGOaH659H+GLYtwhd51xvq31B9Qm0UavM84qhoKaNOnfwf\", \"base64\"));\nconst $c6b883ac45fa55f1$var$stateMachine = new dfa__WEBPACK_IMPORTED_MODULE_8__(/*@__PURE__*/ $parcel$interopDefault($a550b6039b7700b3$exports));\nclass $c6b883ac45fa55f1$export$2e2bcd8739ae039 extends $5340de7a86f3ae85$export$2e2bcd8739ae039 {\n    static{\n        this.zeroMarkWidths = \"NONE\";\n    }\n    static planFeatures(plan) {\n        plan.addStage($c6b883ac45fa55f1$var$setupSyllables);\n        plan.addStage([\n            \"locl\",\n            \"ccmp\"\n        ]);\n        plan.addStage($c6b883ac45fa55f1$var$initialReordering);\n        plan.addStage(\"nukt\");\n        plan.addStage(\"akhn\");\n        plan.addStage(\"rphf\", false);\n        plan.addStage(\"rkrf\");\n        plan.addStage(\"pref\", false);\n        plan.addStage(\"blwf\", false);\n        plan.addStage(\"abvf\", false);\n        plan.addStage(\"half\", false);\n        plan.addStage(\"pstf\", false);\n        plan.addStage(\"vatu\");\n        plan.addStage(\"cjct\");\n        plan.addStage(\"cfar\", false);\n        plan.addStage($c6b883ac45fa55f1$var$finalReordering);\n        plan.addStage({\n            local: [\n                \"init\"\n            ],\n            global: [\n                \"pres\",\n                \"abvs\",\n                \"blws\",\n                \"psts\",\n                \"haln\",\n                \"dist\",\n                \"abvm\",\n                \"blwm\",\n                \"calt\",\n                \"clig\"\n            ]\n        });\n        // Setup the indic config for the selected script\n        plan.unicodeScript = $a5878e4f4663c9e2$export$ce50e82f12a827a4(plan.script);\n        plan.indicConfig = $b9778c6b60232cf0$export$e99d119da76a0fc5[plan.unicodeScript] || $b9778c6b60232cf0$export$e99d119da76a0fc5.Default;\n        plan.isOldSpec = plan.indicConfig.hasOldSpec && plan.script[plan.script.length - 1] !== \"2\";\n    // TODO: turn off kern (Khmer) and liga features.\n    }\n    static assignFeatures(plan, glyphs) {\n        // Decompose split matras\n        // TODO: do this in a more general unicode normalizer\n        for(let i = glyphs.length - 1; i >= 0; i--){\n            let codepoint = glyphs[i].codePoints[0];\n            let d = $b9778c6b60232cf0$export$f647c9cfdd77d95a[codepoint] || $c6b883ac45fa55f1$var$decompositions[codepoint];\n            if (d) {\n                let decomposed = d.map((c)=>{\n                    let g = plan.font.glyphForCodePoint(c);\n                    return new $8cba766f534deddd$export$2e2bcd8739ae039(plan.font, g.id, [\n                        c\n                    ], glyphs[i].features);\n                });\n                glyphs.splice(i, 1, ...decomposed);\n            }\n        }\n    }\n}\nfunction $c6b883ac45fa55f1$var$indicCategory(glyph) {\n    return $c6b883ac45fa55f1$var$trie.get(glyph.codePoints[0]) >> 8;\n}\nfunction $c6b883ac45fa55f1$var$indicPosition(glyph) {\n    return 1 << ($c6b883ac45fa55f1$var$trie.get(glyph.codePoints[0]) & 0xff);\n}\nclass $c6b883ac45fa55f1$var$IndicInfo {\n    constructor(category, position, syllableType, syllable){\n        this.category = category;\n        this.position = position;\n        this.syllableType = syllableType;\n        this.syllable = syllable;\n    }\n}\nfunction $c6b883ac45fa55f1$var$setupSyllables(font, glyphs) {\n    let syllable = 0;\n    let last = 0;\n    for (let [start, end, tags] of $c6b883ac45fa55f1$var$stateMachine.match(glyphs.map($c6b883ac45fa55f1$var$indicCategory))){\n        if (start > last) {\n            ++syllable;\n            for(let i = last; i < start; i++)glyphs[i].shaperInfo = new $c6b883ac45fa55f1$var$IndicInfo($b9778c6b60232cf0$export$a513ea61a7bee91c.X, $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.End, \"non_indic_cluster\", syllable);\n        }\n        ++syllable;\n        // Create shaper info\n        for(let i = start; i <= end; i++)glyphs[i].shaperInfo = new $c6b883ac45fa55f1$var$IndicInfo(1 << $c6b883ac45fa55f1$var$indicCategory(glyphs[i]), $c6b883ac45fa55f1$var$indicPosition(glyphs[i]), tags[0], syllable);\n        last = end + 1;\n    }\n    if (last < glyphs.length) {\n        ++syllable;\n        for(let i = last; i < glyphs.length; i++)glyphs[i].shaperInfo = new $c6b883ac45fa55f1$var$IndicInfo($b9778c6b60232cf0$export$a513ea61a7bee91c.X, $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.End, \"non_indic_cluster\", syllable);\n    }\n}\nfunction $c6b883ac45fa55f1$var$isConsonant(glyph) {\n    return glyph.shaperInfo.category & $b9778c6b60232cf0$export$8519deaa7de2b07;\n}\nfunction $c6b883ac45fa55f1$var$isJoiner(glyph) {\n    return glyph.shaperInfo.category & $b9778c6b60232cf0$export$bbcd928767338e0d;\n}\nfunction $c6b883ac45fa55f1$var$isHalantOrCoeng(glyph) {\n    return glyph.shaperInfo.category & $b9778c6b60232cf0$export$ca9599b2a300afc;\n}\nfunction $c6b883ac45fa55f1$var$wouldSubstitute(glyphs, feature) {\n    for (let glyph of glyphs)glyph.features = {\n        [feature]: true\n    };\n    let GSUB = glyphs[0]._font._layoutEngine.engine.GSUBProcessor;\n    GSUB.applyFeatures([\n        feature\n    ], glyphs);\n    return glyphs.length === 1;\n}\nfunction $c6b883ac45fa55f1$var$consonantPosition(font, consonant, virama) {\n    let glyphs = [\n        virama,\n        consonant,\n        virama\n    ];\n    if ($c6b883ac45fa55f1$var$wouldSubstitute(glyphs.slice(0, 2), \"blwf\") || $c6b883ac45fa55f1$var$wouldSubstitute(glyphs.slice(1, 3), \"blwf\")) return $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Below_C;\n    else if ($c6b883ac45fa55f1$var$wouldSubstitute(glyphs.slice(0, 2), \"pstf\") || $c6b883ac45fa55f1$var$wouldSubstitute(glyphs.slice(1, 3), \"pstf\")) return $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Post_C;\n    else if ($c6b883ac45fa55f1$var$wouldSubstitute(glyphs.slice(0, 2), \"pref\") || $c6b883ac45fa55f1$var$wouldSubstitute(glyphs.slice(1, 3), \"pref\")) return $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Post_C;\n    return $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Base_C;\n}\nfunction $c6b883ac45fa55f1$var$initialReordering(font, glyphs, plan) {\n    let indicConfig = plan.indicConfig;\n    let features = font._layoutEngine.engine.GSUBProcessor.features;\n    let dottedCircle = font.glyphForCodePoint(0x25cc).id;\n    let virama = font.glyphForCodePoint(indicConfig.virama).id;\n    if (virama) {\n        let info = new $8cba766f534deddd$export$2e2bcd8739ae039(font, virama, [\n            indicConfig.virama\n        ]);\n        for(let i = 0; i < glyphs.length; i++)if (glyphs[i].shaperInfo.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Base_C) glyphs[i].shaperInfo.position = $c6b883ac45fa55f1$var$consonantPosition(font, glyphs[i].copy(), info);\n    }\n    for(let start = 0, end = $c6b883ac45fa55f1$var$nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = $c6b883ac45fa55f1$var$nextSyllable(glyphs, start)){\n        let { category: category, syllableType: syllableType } = glyphs[start].shaperInfo;\n        if (syllableType === \"symbol_cluster\" || syllableType === \"non_indic_cluster\") continue;\n        if (syllableType === \"broken_cluster\" && dottedCircle) {\n            let g = new $8cba766f534deddd$export$2e2bcd8739ae039(font, dottedCircle, [\n                0x25cc\n            ]);\n            g.shaperInfo = new $c6b883ac45fa55f1$var$IndicInfo(1 << $c6b883ac45fa55f1$var$indicCategory(g), $c6b883ac45fa55f1$var$indicPosition(g), glyphs[start].shaperInfo.syllableType, glyphs[start].shaperInfo.syllable);\n            // Insert after possible Repha.\n            let i = start;\n            while(i < end && glyphs[i].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.Repha)i++;\n            glyphs.splice(i++, 0, g);\n            end++;\n        }\n        // 1. Find base consonant:\n        //\n        // The shaping engine finds the base consonant of the syllable, using the\n        // following algorithm: starting from the end of the syllable, move backwards\n        // until a consonant is found that does not have a below-base or post-base\n        // form (post-base forms have to follow below-base forms), or that is not a\n        // pre-base reordering Ra, or arrive at the first consonant. The consonant\n        // stopped at will be the base.\n        let base = end;\n        let limit = start;\n        let hasReph = false;\n        // If the syllable starts with Ra + Halant (in a script that has Reph)\n        // and has more than one consonant, Ra is excluded from candidates for\n        // base consonants.\n        if (indicConfig.rephPos !== $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Ra_To_Become_Reph && features.rphf && start + 3 <= end && (indicConfig.rephMode === \"Implicit\" && !$c6b883ac45fa55f1$var$isJoiner(glyphs[start + 2]) || indicConfig.rephMode === \"Explicit\" && glyphs[start + 2].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.ZWJ)) {\n            // See if it matches the 'rphf' feature.\n            let g = [\n                glyphs[start].copy(),\n                glyphs[start + 1].copy(),\n                glyphs[start + 2].copy()\n            ];\n            if ($c6b883ac45fa55f1$var$wouldSubstitute(g.slice(0, 2), \"rphf\") || indicConfig.rephMode === \"Explicit\" && $c6b883ac45fa55f1$var$wouldSubstitute(g, \"rphf\")) {\n                limit += 2;\n                while(limit < end && $c6b883ac45fa55f1$var$isJoiner(glyphs[limit]))limit++;\n                base = start;\n                hasReph = true;\n            }\n        } else if (indicConfig.rephMode === \"Log_Repha\" && glyphs[start].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.Repha) {\n            limit++;\n            while(limit < end && $c6b883ac45fa55f1$var$isJoiner(glyphs[limit]))limit++;\n            base = start;\n            hasReph = true;\n        }\n        switch(indicConfig.basePos){\n            case \"Last\":\n                {\n                    // starting from the end of the syllable, move backwards\n                    let i = end;\n                    let seenBelow = false;\n                    do {\n                        let info = glyphs[--i].shaperInfo;\n                        // until a consonant is found\n                        if ($c6b883ac45fa55f1$var$isConsonant(glyphs[i])) {\n                            // that does not have a below-base or post-base form\n                            // (post-base forms have to follow below-base forms),\n                            if (info.position !== $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Below_C && (info.position !== $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Post_C || seenBelow)) {\n                                base = i;\n                                break;\n                            }\n                            // or that is not a pre-base reordering Ra,\n                            //\n                            // IMPLEMENTATION NOTES:\n                            //\n                            // Our pre-base reordering Ra's are marked POS_POST_C, so will be skipped\n                            // by the logic above already.\n                            //\n                            // or arrive at the first consonant. The consonant stopped at will\n                            // be the base.\n                            if (info.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Below_C) seenBelow = true;\n                            base = i;\n                        } else if (start < i && info.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.ZWJ && glyphs[i - 1].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.H) break;\n                    }while (i > limit);\n                    break;\n                }\n            case \"First\":\n                // The first consonant is always the base.\n                base = start;\n                // Mark all subsequent consonants as below.\n                for(let i = base + 1; i < end; i++)if ($c6b883ac45fa55f1$var$isConsonant(glyphs[i])) glyphs[i].shaperInfo.position = $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Below_C;\n        }\n        // If the syllable starts with Ra + Halant (in a script that has Reph)\n        // and has more than one consonant, Ra is excluded from candidates for\n        // base consonants.\n        //\n        //  Only do this for unforced Reph. (ie. not for Ra,H,ZWJ)\n        if (hasReph && base === start && limit - base <= 2) hasReph = false;\n        // 2. Decompose and reorder Matras:\n        //\n        // Each matra and any syllable modifier sign in the cluster are moved to the\n        // appropriate position relative to the consonant(s) in the cluster. The\n        // shaping engine decomposes two- or three-part matras into their constituent\n        // parts before any repositioning. Matra characters are classified by which\n        // consonant in a conjunct they have affinity for and are reordered to the\n        // following positions:\n        //\n        //   o Before first half form in the syllable\n        //   o After subjoined consonants\n        //   o After post-form consonant\n        //   o After main consonant (for above marks)\n        //\n        // IMPLEMENTATION NOTES:\n        //\n        // The normalize() routine has already decomposed matras for us, so we don't\n        // need to worry about that.\n        // 3.  Reorder marks to canonical order:\n        //\n        // Adjacent nukta and halant or nukta and vedic sign are always repositioned\n        // if necessary, so that the nukta is first.\n        //\n        // IMPLEMENTATION NOTES:\n        //\n        // We don't need to do this: the normalize() routine already did this for us.\n        // Reorder characters\n        for(let i1 = start; i1 < base; i1++){\n            let info = glyphs[i1].shaperInfo;\n            info.position = Math.min($b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Pre_C, info.position);\n        }\n        if (base < end) glyphs[base].shaperInfo.position = $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Base_C;\n        // Mark final consonants.  A final consonant is one appearing after a matra,\n        // like in Khmer.\n        for(let i2 = base + 1; i2 < end; i2++)if (glyphs[i2].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.M) {\n            for(let j = i2 + 1; j < end; j++)if ($c6b883ac45fa55f1$var$isConsonant(glyphs[j])) {\n                glyphs[j].shaperInfo.position = $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Final_C;\n                break;\n            }\n            break;\n        }\n        // Handle beginning Ra\n        if (hasReph) glyphs[start].shaperInfo.position = $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Ra_To_Become_Reph;\n        // For old-style Indic script tags, move the first post-base Halant after\n        // last consonant.\n        //\n        // Reports suggest that in some scripts Uniscribe does this only if there\n        // is *not* a Halant after last consonant already (eg. Kannada), while it\n        // does it unconditionally in other scripts (eg. Malayalam).  We don't\n        // currently know about other scripts, so we single out Malayalam for now.\n        //\n        // Kannada test case:\n        // U+0C9A,U+0CCD,U+0C9A,U+0CCD\n        // With some versions of Lohit Kannada.\n        // https://bugs.freedesktop.org/show_bug.cgi?id=59118\n        //\n        // Malayalam test case:\n        // U+0D38,U+0D4D,U+0D31,U+0D4D,U+0D31,U+0D4D\n        // With lohit-ttf-20121122/Lohit-Malayalam.ttf\n        if (plan.isOldSpec) {\n            let disallowDoubleHalants = plan.unicodeScript !== \"Malayalam\";\n            for(let i = base + 1; i < end; i++)if (glyphs[i].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.H) {\n                let j;\n                for(j = end - 1; j > i; j--){\n                    if ($c6b883ac45fa55f1$var$isConsonant(glyphs[j]) || disallowDoubleHalants && glyphs[j].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.H) break;\n                }\n                if (glyphs[j].shaperInfo.category !== $b9778c6b60232cf0$export$a513ea61a7bee91c.H && j > i) {\n                    // Move Halant to after last consonant.\n                    let t = glyphs[i];\n                    glyphs.splice(i, 0, ...glyphs.splice(i + 1, j - i));\n                    glyphs[j] = t;\n                }\n                break;\n            }\n        }\n        // Attach misc marks to previous char to move with them.\n        let lastPos = $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Start;\n        for(let i3 = start; i3 < end; i3++){\n            let info = glyphs[i3].shaperInfo;\n            if (info.category & ($b9778c6b60232cf0$export$bbcd928767338e0d | $b9778c6b60232cf0$export$a513ea61a7bee91c.N | $b9778c6b60232cf0$export$a513ea61a7bee91c.RS | $b9778c6b60232cf0$export$a513ea61a7bee91c.CM | $b9778c6b60232cf0$export$ca9599b2a300afc & info.category)) {\n                info.position = lastPos;\n                if (info.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.H && info.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Pre_M) {\n                    // Uniscribe doesn't move the Halant with Left Matra.\n                    // TEST: U+092B,U+093F,U+094DE\n                    // We follow.  This is important for the Sinhala\n                    // U+0DDA split matra since it decomposes to U+0DD9,U+0DCA\n                    // where U+0DD9 is a left matra and U+0DCA is the virama.\n                    // We don't want to move the virama with the left matra.\n                    // TEST: U+0D9A,U+0DDA\n                    for(let j = i3; j > start; j--)if (glyphs[j - 1].shaperInfo.position !== $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Pre_M) {\n                        info.position = glyphs[j - 1].shaperInfo.position;\n                        break;\n                    }\n                }\n            } else if (info.position !== $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.SMVD) lastPos = info.position;\n        }\n        // For post-base consonants let them own anything before them\n        // since the last consonant or matra.\n        let last = base;\n        for(let i4 = base + 1; i4 < end; i4++){\n            if ($c6b883ac45fa55f1$var$isConsonant(glyphs[i4])) {\n                for(let j = last + 1; j < i4; j++)if (glyphs[j].shaperInfo.position < $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.SMVD) glyphs[j].shaperInfo.position = glyphs[i4].shaperInfo.position;\n                last = i4;\n            } else if (glyphs[i4].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.M) last = i4;\n        }\n        let arr = glyphs.slice(start, end);\n        arr.sort((a, b)=>a.shaperInfo.position - b.shaperInfo.position);\n        glyphs.splice(start, arr.length, ...arr);\n        // Find base again\n        for(let i5 = start; i5 < end; i5++)if (glyphs[i5].shaperInfo.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Base_C) {\n            base = i5;\n            break;\n        }\n        // Setup features now\n        // Reph\n        for(let i6 = start; i6 < end && glyphs[i6].shaperInfo.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Ra_To_Become_Reph; i6++)glyphs[i6].features.rphf = true;\n        // Pre-base\n        let blwf = !plan.isOldSpec && indicConfig.blwfMode === \"Pre_And_Post\";\n        for(let i7 = start; i7 < base; i7++){\n            glyphs[i7].features.half = true;\n            if (blwf) glyphs[i7].features.blwf = true;\n        }\n        // Post-base\n        for(let i8 = base + 1; i8 < end; i8++){\n            glyphs[i8].features.abvf = true;\n            glyphs[i8].features.pstf = true;\n            glyphs[i8].features.blwf = true;\n        }\n        if (plan.isOldSpec && plan.unicodeScript === \"Devanagari\") {\n            // Old-spec eye-lash Ra needs special handling.  From the\n            // spec:\n            //\n            // \"The feature 'below-base form' is applied to consonants\n            // having below-base forms and following the base consonant.\n            // The exception is vattu, which may appear below half forms\n            // as well as below the base glyph. The feature 'below-base\n            // form' will be applied to all such occurrences of Ra as well.\"\n            //\n            // Test case: U+0924,U+094D,U+0930,U+094d,U+0915\n            // with Sanskrit 2003 font.\n            //\n            // However, note that Ra,Halant,ZWJ is the correct way to\n            // request eyelash form of Ra, so we wouldbn't inhibit it\n            // in that sequence.\n            //\n            // Test case: U+0924,U+094D,U+0930,U+094d,U+200D,U+0915\n            for(let i = start; i + 1 < base; i++)if (glyphs[i].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.Ra && glyphs[i + 1].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.H && (i + 1 === base || glyphs[i + 2].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.ZWJ)) {\n                glyphs[i].features.blwf = true;\n                glyphs[i + 1].features.blwf = true;\n            }\n        }\n        let prefLen = 2;\n        if (features.pref && base + prefLen < end) for(let i9 = base + 1; i9 + prefLen - 1 < end; i9++){\n            let g = [\n                glyphs[i9].copy(),\n                glyphs[i9 + 1].copy()\n            ];\n            if ($c6b883ac45fa55f1$var$wouldSubstitute(g, \"pref\")) {\n                for(let j = 0; j < prefLen; j++)glyphs[i9++].features.pref = true;\n                // Mark the subsequent stuff with 'cfar'.  Used in Khmer.\n                // Read the feature spec.\n                // This allows distinguishing the following cases with MS Khmer fonts:\n                // U+1784,U+17D2,U+179A,U+17D2,U+1782\n                // U+1784,U+17D2,U+1782,U+17D2,U+179A\n                if (features.cfar) for(; i9 < end; i9++)glyphs[i9].features.cfar = true;\n                break;\n            }\n        }\n        // Apply ZWJ/ZWNJ effects\n        for(let i10 = start + 1; i10 < end; i10++)if ($c6b883ac45fa55f1$var$isJoiner(glyphs[i10])) {\n            let nonJoiner = glyphs[i10].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.ZWNJ;\n            let j = i10;\n            do {\n                j--;\n                // ZWJ/ZWNJ should disable CJCT.  They do that by simply\n                // being there, since we don't skip them for the CJCT\n                // feature (ie. F_MANUAL_ZWJ)\n                // A ZWNJ disables HALF.\n                if (nonJoiner) delete glyphs[j].features.half;\n            }while (j > start && !$c6b883ac45fa55f1$var$isConsonant(glyphs[j]));\n        }\n    }\n}\nfunction $c6b883ac45fa55f1$var$finalReordering(font, glyphs, plan) {\n    let indicConfig = plan.indicConfig;\n    let features = font._layoutEngine.engine.GSUBProcessor.features;\n    for(let start = 0, end = $c6b883ac45fa55f1$var$nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = $c6b883ac45fa55f1$var$nextSyllable(glyphs, start)){\n        // 4. Final reordering:\n        //\n        // After the localized forms and basic shaping forms GSUB features have been\n        // applied (see below), the shaping engine performs some final glyph\n        // reordering before applying all the remaining font features to the entire\n        // cluster.\n        let tryPref = !!features.pref;\n        // Find base again\n        let base = start;\n        for(; base < end; base++)if (glyphs[base].shaperInfo.position >= $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Base_C) {\n            if (tryPref && base + 1 < end) {\n                for(let i = base + 1; i < end; i++)if (glyphs[i].features.pref) {\n                    if (!(glyphs[i].substituted && glyphs[i].isLigated && !glyphs[i].isMultiplied)) {\n                        // Ok, this was a 'pref' candidate but didn't form any.\n                        // Base is around here...\n                        base = i;\n                        while(base < end && $c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[base]))base++;\n                        glyphs[base].shaperInfo.position = $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.BASE_C;\n                        tryPref = false;\n                    }\n                    break;\n                }\n            }\n            // For Malayalam, skip over unformed below- (but NOT post-) forms.\n            if (plan.unicodeScript === \"Malayalam\") for(let i = base + 1; i < end; i++){\n                while(i < end && $c6b883ac45fa55f1$var$isJoiner(glyphs[i]))i++;\n                if (i === end || !$c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[i])) break;\n                i++; // Skip halant.\n                while(i < end && $c6b883ac45fa55f1$var$isJoiner(glyphs[i]))i++;\n                if (i < end && $c6b883ac45fa55f1$var$isConsonant(glyphs[i]) && glyphs[i].shaperInfo.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Below_C) {\n                    base = i;\n                    glyphs[base].shaperInfo.position = $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Base_C;\n                }\n            }\n            if (start < base && glyphs[base].shaperInfo.position > $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Base_C) base--;\n            break;\n        }\n        if (base === end && start < base && glyphs[base - 1].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.ZWJ) base--;\n        if (base < end) while(start < base && glyphs[base].shaperInfo.category & ($b9778c6b60232cf0$export$a513ea61a7bee91c.N | $b9778c6b60232cf0$export$ca9599b2a300afc))base--;\n        // o Reorder matras:\n        //\n        // If a pre-base matra character had been reordered before applying basic\n        // features, the glyph can be moved closer to the main consonant based on\n        // whether half-forms had been formed. Actual position for the matra is\n        // defined as “after last standalone halant glyph, after initial matra\n        // position and before the main consonant”. If ZWJ or ZWNJ follow this\n        // halant, position is moved after it.\n        //\n        if (start + 1 < end && start < base) {\n            // If we lost track of base, alas, position before last thingy.\n            let newPos = base === end ? base - 2 : base - 1;\n            // Malayalam / Tamil do not have \"half\" forms or explicit virama forms.\n            // The glyphs formed by 'half' are Chillus or ligated explicit viramas.\n            // We want to position matra after them.\n            if (plan.unicodeScript !== \"Malayalam\" && plan.unicodeScript !== \"Tamil\") {\n                while(newPos > start && !(glyphs[newPos].shaperInfo.category & ($b9778c6b60232cf0$export$a513ea61a7bee91c.M | $b9778c6b60232cf0$export$ca9599b2a300afc)))newPos--;\n                // If we found no Halant we are done.\n                // Otherwise only proceed if the Halant does\n                // not belong to the Matra itself!\n                if ($c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[newPos]) && glyphs[newPos].shaperInfo.position !== $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Pre_M) {\n                    if (newPos + 1 < end && $c6b883ac45fa55f1$var$isJoiner(glyphs[newPos + 1])) newPos++;\n                } else newPos = start; // No move.\n            }\n            if (start < newPos && glyphs[newPos].shaperInfo.position !== $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Pre_M) {\n                // Now go see if there's actually any matras...\n                for(let i = newPos; i > start; i--)if (glyphs[i - 1].shaperInfo.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Pre_M) {\n                    let oldPos = i - 1;\n                    if (oldPos < base && base <= newPos) base--;\n                    let tmp = glyphs[oldPos];\n                    glyphs.splice(oldPos, 0, ...glyphs.splice(oldPos + 1, newPos - oldPos));\n                    glyphs[newPos] = tmp;\n                    newPos--;\n                }\n            }\n        }\n        // o Reorder reph:\n        //\n        // Reph’s original position is always at the beginning of the syllable,\n        // (i.e. it is not reordered at the character reordering stage). However,\n        // it will be reordered according to the basic-forms shaping results.\n        // Possible positions for reph, depending on the script, are; after main,\n        // before post-base consonant forms, and after post-base consonant forms.\n        // Two cases:\n        //\n        // - If repha is encoded as a sequence of characters (Ra,H or Ra,H,ZWJ), then\n        //   we should only move it if the sequence ligated to the repha form.\n        //\n        // - If repha is encoded separately and in the logical position, we should only\n        //   move it if it did NOT ligate.  If it ligated, it's probably the font trying\n        //   to make it work without the reordering.\n        if (start + 1 < end && glyphs[start].shaperInfo.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Ra_To_Become_Reph && glyphs[start].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.Repha !== (glyphs[start].isLigated && !glyphs[start].isMultiplied)) {\n            let newRephPos;\n            let rephPos = indicConfig.rephPos;\n            let found = false;\n            // 1. If reph should be positioned after post-base consonant forms,\n            //    proceed to step 5.\n            if (rephPos !== $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Post) {\n                //  2. If the reph repositioning class is not after post-base: target\n                //     position is after the first explicit halant glyph between the\n                //     first post-reph consonant and last main consonant. If ZWJ or ZWNJ\n                //     are following this halant, position is moved after it. If such\n                //     position is found, this is the target position. Otherwise,\n                //     proceed to the next step.\n                //\n                //     Note: in old-implementation fonts, where classifications were\n                //     fixed in shaping engine, there was no case where reph position\n                //     will be found on this step.\n                newRephPos = start + 1;\n                while(newRephPos < base && !$c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[newRephPos]))newRephPos++;\n                if (newRephPos < base && $c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[newRephPos])) {\n                    // ->If ZWJ or ZWNJ are following this halant, position is moved after it.\n                    if (newRephPos + 1 < base && $c6b883ac45fa55f1$var$isJoiner(glyphs[newRephPos + 1])) newRephPos++;\n                    found = true;\n                }\n                // 3. If reph should be repositioned after the main consonant: find the\n                //    first consonant not ligated with main, or find the first\n                //    consonant that is not a potential pre-base reordering Ra.\n                if (!found && rephPos === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Main) {\n                    newRephPos = base;\n                    while(newRephPos + 1 < end && glyphs[newRephPos + 1].shaperInfo.position <= $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Main)newRephPos++;\n                    found = newRephPos < end;\n                }\n                // 4. If reph should be positioned before post-base consonant, find\n                //    first post-base classified consonant not ligated with main. If no\n                //    consonant is found, the target position should be before the\n                //    first matra, syllable modifier sign or vedic sign.\n                //\n                // This is our take on what step 4 is trying to say (and failing, BADLY).\n                if (!found && rephPos === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Sub) {\n                    newRephPos = base;\n                    while(newRephPos + 1 < end && !(glyphs[newRephPos + 1].shaperInfo.position & ($b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Post_C | $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Post | $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.SMVD)))newRephPos++;\n                    found = newRephPos < end;\n                }\n            }\n            //  5. If no consonant is found in steps 3 or 4, move reph to a position\n            //     immediately before the first post-base matra, syllable modifier\n            //     sign or vedic sign that has a reordering class after the intended\n            //     reph position. For example, if the reordering position for reph\n            //     is post-main, it will skip above-base matras that also have a\n            //     post-main position.\n            if (!found) {\n                // Copied from step 2.\n                newRephPos = start + 1;\n                while(newRephPos < base && !$c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[newRephPos]))newRephPos++;\n                if (newRephPos < base && $c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[newRephPos])) {\n                    // ->If ZWJ or ZWNJ are following this halant, position is moved after it.\n                    if (newRephPos + 1 < base && $c6b883ac45fa55f1$var$isJoiner(glyphs[newRephPos + 1])) newRephPos++;\n                    found = true;\n                }\n            }\n            // 6. Otherwise, reorder reph to the end of the syllable.\n            if (!found) {\n                newRephPos = end - 1;\n                while(newRephPos > start && glyphs[newRephPos].shaperInfo.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.SMVD)newRephPos--;\n                // If the Reph is to be ending up after a Matra,Halant sequence,\n                // position it before that Halant so it can interact with the Matra.\n                // However, if it's a plain Consonant,Halant we shouldn't do that.\n                // Uniscribe doesn't do this.\n                // TEST: U+0930,U+094D,U+0915,U+094B,U+094D\n                if ($c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[newRephPos])) {\n                    for(let i = base + 1; i < newRephPos; i++)if (glyphs[i].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.M) newRephPos--;\n                }\n            }\n            let reph = glyphs[start];\n            glyphs.splice(start, 0, ...glyphs.splice(start + 1, newRephPos - start));\n            glyphs[newRephPos] = reph;\n            if (start < base && base <= newRephPos) base--;\n        }\n        // o Reorder pre-base reordering consonants:\n        //\n        // If a pre-base reordering consonant is found, reorder it according to\n        // the following rules:\n        if (tryPref && base + 1 < end) {\n            for(let i = base + 1; i < end; i++)if (glyphs[i].features.pref) {\n                // 1. Only reorder a glyph produced by substitution during application\n                //    of the <pref> feature. (Note that a font may shape a Ra consonant with\n                //    the feature generally but block it in certain contexts.)\n                // Note: We just check that something got substituted.  We don't check that\n                // the <pref> feature actually did it...\n                //\n                // Reorder pref only if it ligated.\n                if (glyphs[i].isLigated && !glyphs[i].isMultiplied) {\n                    // 2. Try to find a target position the same way as for pre-base matra.\n                    //    If it is found, reorder pre-base consonant glyph.\n                    //\n                    // 3. If position is not found, reorder immediately before main\n                    //    consonant.\n                    let newPos = base;\n                    // Malayalam / Tamil do not have \"half\" forms or explicit virama forms.\n                    // The glyphs formed by 'half' are Chillus or ligated explicit viramas.\n                    // We want to position matra after them.\n                    if (plan.unicodeScript !== \"Malayalam\" && plan.unicodeScript !== \"Tamil\") {\n                        while(newPos > start && !(glyphs[newPos - 1].shaperInfo.category & ($b9778c6b60232cf0$export$a513ea61a7bee91c.M | $b9778c6b60232cf0$export$ca9599b2a300afc)))newPos--;\n                        // In Khmer coeng model, a H,Ra can go *after* matras.  If it goes after a\n                        // split matra, it should be reordered to *before* the left part of such matra.\n                        if (newPos > start && glyphs[newPos - 1].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.M) {\n                            let oldPos = i;\n                            for(let j = base + 1; j < oldPos; j++)if (glyphs[j].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.M) {\n                                newPos--;\n                                break;\n                            }\n                        }\n                    }\n                    if (newPos > start && $c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[newPos - 1])) {\n                        if (newPos < end && $c6b883ac45fa55f1$var$isJoiner(glyphs[newPos])) newPos++;\n                    }\n                    let oldPos = i;\n                    let tmp = glyphs[oldPos];\n                    glyphs.splice(newPos + 1, 0, ...glyphs.splice(newPos, oldPos - newPos));\n                    glyphs[newPos] = tmp;\n                    if (newPos <= base && base < oldPos) base++;\n                }\n                break;\n            }\n        }\n        // Apply 'init' to the Left Matra if it's a word start.\n        if (glyphs[start].shaperInfo.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Pre_M && (!start || !/Cf|Mn/.test(unicode_properties__WEBPACK_IMPORTED_MODULE_6__[\"default\"].getCategory(glyphs[start - 1].codePoints[0])))) glyphs[start].features.init = true;\n    }\n}\nfunction $c6b883ac45fa55f1$var$nextSyllable(glyphs, start) {\n    if (start >= glyphs.length) return start;\n    let syllable = glyphs[start].shaperInfo.syllable;\n    while(++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable);\n    return start;\n}\nvar $7eb6a55cb7a2526f$require$Buffer = buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer;\nconst { categories: $7eb6a55cb7a2526f$var$categories, decompositions: $7eb6a55cb7a2526f$var$decompositions } = /*@__PURE__*/ $parcel$interopDefault($f3bd27a8c88f3f53$exports);\nconst $7eb6a55cb7a2526f$var$trie = new unicode_trie__WEBPACK_IMPORTED_MODULE_7__($7eb6a55cb7a2526f$require$Buffer.from(\"AAACAAAAAADQqQAAAVEMrvPtnH+oHUcVx+fd99799W5e8mx+9NkYm7YUI2KtimkVDG3FWgVTFY1Fqa2VJirYB0IaUFLBaKGJViXir6oxKCSBoi0UTKtg2yA26h+milYNtMH+0WK1VQyvtBS/487hnncyMzuzu7N7n7kHPszu7OzMmTNzdmdmfzzfUmpiUqkemAMbwSZwKbjcxM1XEL4VvB28G3zAk+56cLMlfgdYADvBbvBF8GWwH9xl+CFLfwj8BPwU/MKS38/AMfA86v9ro9ucQcdR+CjCP4CT4EnwDPg3eAFMTik1A+bAPNgINoFLwGawZSpLfzXCrWAb+AjYDm4BO8FusAfsA/vBXeAgOALuNfv3g4fAcXACPAaeAE+B58Bp8NJUpnN7WqlZsHY629+A8GLwWvAG8BZwJXinOf5ehB8EN4AdYGE6q7dmF9uugs8hvz0V58nZK/L+Kva/BX4ADoN7prP6HgUPgkfA73L0eQzHnwBPgX+Y80+DF8FUW6lBO4tbjXA9uAi8pj3sS2/E9mawBVwNtoJt5pzrTXgzwk+B7awP7sT+7nY6WxFfQBlfAl8H3wU/Anezcu/D9s/BMRN3HOEJ8EdwMkC/J5HmmXZmq2fBIjgEVEepbieLX4Fw0MnSrzRxmrVsm7MB8ReDV4vjr3ekJy7rZGVPMb196Xm6oug83oRyt4CrwDVgK9gGPtzxn3uTOD6YPDPNJ5Hm0+AznazffJ7Z4KSnXncg3VfAN8EBhx42/z/UGdbrx52sr9yH8AFTrt5+2GzfnWPbKuw7ZszZyNh/xowZM2bMmDFjxsQyZ5lPNs3h9nBNYHuAfr9ic9ffiHnsJzznU91/j3P+2snWYf6G8O/gn+A0eMnEt7vQp5ulX4NwHmwEm7rZ8UsRXg6uMPvXIHwPuK7rLl+nu9FzfMyYMWPGpGVuslmarv+YMWPSkNq/d2D8uNDNngvdivA2y3jy9m72bF9v3ymOf2MExp8fG2TsAcfA2wJYBJetWBq3i+0fwPafwLmzSl0LFmZNPMLHZ4fpnsX2AdjgcXB+T6kPge+AG7D/vXYW/tLsc9r9M+MkVyLNR1m6g9g+ZfYvmMExcHCm+ftP0+T5y/e17Uw/PYLwHnC0m80TH+zG30/3mjSDnPS2/B4pUJ4rX3n+b5H3o92l6UjfvZ7y/oJzToGnu8O66XTPYf8/Jr8XWL6TPXf9bPnHtmVs+89AnxVgDVgPLgKvAg+Y/F6H7c1gC7jKHH8XeJ/x15vAjt4wvwVs7wKfBXvAPvA18G1wsJevj36f5gjS3etIq+ft9+PYQ73h/nFsn2D7f+5l75bo/VPYftpTblFb2/Jo2pdjfL0uXOX/qxfnp8vZVk2Xv9hbmu+LxvYt3A/7/WZsPoptPkr9bdCv1ya+d4TuMO8Tre5n4XkILwSbzP4l/WHazX1//r2O/z7cFHnvSYW8R/Vm02ZXIHxHze1Xdf9bbn7p0z2kDroNr2X9WL+7937sX9fP+v9h9n6jTrfI3jG9EfsfN3G35PR/G4uRfY3eMTwdkFa/C3hrf2kcfy/xYTOmprrfZsLbEe7rDPW/U9Rrv9k/ahmTL0cWWxP/YxRkgtES+zwNhZPs+FQgMj/liEsto2HxsZBQX2pZoLZqWc5riXDaQBLSt1L3hcnE+Vct7aYVKCEhbXk2+b7NZ84mmXAwCiL14Ne85S62MYPcXi5StM/YxlJF2lfabznZsC6/C807xvZV+yFve9d1KY//d3HNO8pKUXuTDh0Gpp7B852q6QFMgdWM2dfbAxOuEPQEfcEsO5fquJLZrMfyCtWP0heZF6oSdiH9u4aQvJRIJ/eL6BBynItLp5D2JRkY5L5u3xAf6lviXHWSZcfaKO/+5zvO/c9Xtq8uRXSObd+8bS0zJrS1rxTyX7k/a0nrk5D+mHeOC90uq1Q216X57lykfqHt62uTGJ2rat+i/kttyq/RSi29PlclZf2Xxq55ZeSV34T96d5X5PqZJ9I3ZX2lnkXt3xL1Kyrav/LutbZ6uGxuS6ss6V3pXOXY4kP7EBfyJT7+4TJQS9uf74f6n+3+6ZIi9bCtieatFfCxUMx4KMYfy/pzrB30vm88q9SZ11K+n9eeNN612UFKWX8uI9TmRca7TbWvKy2JvF6naF+b/0uRupZp35cZikhZvyniY2R/CbdB3vXynIC6hbRBHf4l1xps6w4x/lVEtxRtGZMuRA8uNh/jfYV8kdpsBUszcODrD7E2JT2KrB3V6XMhbdNjcXItxzaOJWkpf976/I5glQn1sbLP86U9FQvz4l0S28/lcWUJbbrE2l+Z/TlHvi4/kvZXLMyrmy1PW7x8hl6UFgvlmNM1Jq3aJ3Se0yJcpdwS6mOp/ZgLX5N1rdFKaIzH9ztquMbqq+/qCFRk+hRoyZvrTHuO8fNd/djmEzZJ3TdisN1bNQNl7y96DV/3mVkTtwasVdk1ai6ybGlDek8nT1fXc4M5tVSPvhqOsWQeXQs8L1n3IradU8OxCeVjK7dr7Dpl0cMHnUvt18TzfVsfb/pZY56fV2GnVPVIYaOi9xcZJ8cmKcu3wcuPsVHV5cdKFfZXNZefp5sWft+wzR1cczKCxh99NRx76HvwOpWNv6YZtAajt6WPyPswtVVs/VOJ7xpYx3VR31er7gMxNuV9Q443CDlW43KuYSXblsybfKYt58trfez7A1X7Tdm+V7TcoudL+LpVGf2khN63U5OyD5Af0NoUv06l7Jc0Rte+so4xL9Ayy3Rz+SufY5Jf267xcm7J4dd3kumIOrmk7Pl549bUY1puI91Gdb8Tpu+9tjmhXFdwtfVsTv5SQvXKW0cK4eXgPBO6iJ07NNVOHH7/tF1jyJdnWbrU/Uau3VNI156QZ2ZaZFu76i6vQXy9YJ2H9QZ97aF3p1xlx1yfuYRcd0Kl7NyaX190+pUOKI0tvus5j7/nSWKLo3FER8R3LHEx8gqwge1POgi1l1yfirV3zHpISHxs3vLeFXOellcG1DFGbGP00PPkeKEOaXIsqhzbruOh9Qk5L08nW2grJ0avsvWocv0zRh/fGCG0TV35hB4v0rds5Vddjm/sFCKx+aXSt2yalPZsolxXW46CDnXp0YQ0rdso9OUYPSYT6+yzuxxzlrVfFfavQ/LKqsP+dbVzE/0qRb8pKin6V9U6Fnn24pqHufLMWy90nV+0DkXmcrb0Uq+6pU7/qcs/67SHTeTaaBk9ipyXQvLqW1U7uPKpux/ESlP9umydR8H3UjzHoXxj0/J1Yr5ubHsPrWOJqxK+hk5r+EVtH3pe1XWIXa+1vQ9YJ/oZre1bGReh3xKWeX7BxfYstwh5errGJi59be8482cSsfUPQT4Xlc9K+XMmatcY0fo2+SxYQs/4XO8M03Ng/TxujYH+FRELSdH+6mtveu8itb1Cy7C9X8GfsVOcfN86RHg56wJ0ob5qOz/E/rIdq7YhF34/0cfoeWKVftJjIbWDbDfXeXR/prBOKWJ/3dd43+sr+32TvgEIEZ6/7Zt5/l7ghMm77u+ey4gcz5xfktA5vE9C5vy2Y3lpXeX40tHcLMX42qZHS/ltZluXiSlDxillt3VdIvufbc0j75wy5aWaOxWRUZmfl5nDSh3LzoWbXJOg8uumKkndp1PnH2IPfe+U33z7vjWhdPQuWMh4raqxWMh9X89RZtSZ7/JpyXs3NWQcETN3CZHU/lmVnstZB1+ZfM5A/1VJ2V9t8wTXN1S+f27mzaulbCxJHePwC1Tz/0K1/VdPvtOsba+vL7ZxM1/jakJ/V9/yfdtNx+i7bhVRRll/rrK+sk3qLt/3T0afH+tzz1HDfxzZ/HlGDduK1y/GL21zvKptQGWFSpVlFm0z+ZxD/vdAt9EqQ971NkRHW7qytog53+cfVfeFGLStfddfYka5x6dl+yi//4z6/559aUn4/+/k2pv8BqfM/0qVCnu+If2OJPRZUcyzJF/5RQm5xtM9ln+LRN+8U9+iMQS1Veg9q2z/TlV3Ett3/rLOIXOookidy/5X3GYD+S8a1z2e0vH695T9vhEqdbY//0dU3jWZ2rYq/cvCRT8r08/NLlT5/zySdSurv1ybLiup5tAp5+NNzfPJ5r61warapajItfTQNeK610/rWEMPyb+uOo/ierRNbGU01Z+rqneIPWNsT9t1rD+OYr8rm0eKvp/Ch1P4Yepyy+hWVD/f+VWXX5X+TZdfZZ+KLb9J+S8=\", \"base64\"));\nconst $7eb6a55cb7a2526f$var$stateMachine = new dfa__WEBPACK_IMPORTED_MODULE_8__(/*@__PURE__*/ $parcel$interopDefault($f3bd27a8c88f3f53$exports));\nclass $7eb6a55cb7a2526f$export$2e2bcd8739ae039 extends $5340de7a86f3ae85$export$2e2bcd8739ae039 {\n    static{\n        this.zeroMarkWidths = \"BEFORE_GPOS\";\n    }\n    static planFeatures(plan) {\n        plan.addStage($7eb6a55cb7a2526f$var$setupSyllables);\n        // Default glyph pre-processing group\n        plan.addStage([\n            \"locl\",\n            \"ccmp\",\n            \"nukt\",\n            \"akhn\"\n        ]);\n        // Reordering group\n        plan.addStage($7eb6a55cb7a2526f$var$clearSubstitutionFlags);\n        plan.addStage([\n            \"rphf\"\n        ], false);\n        plan.addStage($7eb6a55cb7a2526f$var$recordRphf);\n        plan.addStage($7eb6a55cb7a2526f$var$clearSubstitutionFlags);\n        plan.addStage([\n            \"pref\"\n        ]);\n        plan.addStage($7eb6a55cb7a2526f$var$recordPref);\n        // Orthographic unit shaping group\n        plan.addStage([\n            \"rkrf\",\n            \"abvf\",\n            \"blwf\",\n            \"half\",\n            \"pstf\",\n            \"vatu\",\n            \"cjct\"\n        ]);\n        plan.addStage($7eb6a55cb7a2526f$var$reorder);\n        // Topographical features\n        // Scripts that need this are handled by the Arabic shaper, not implemented here for now.\n        // plan.addStage(['isol', 'init', 'medi', 'fina', 'med2', 'fin2', 'fin3'], false);\n        // Standard topographic presentation and positional feature application\n        plan.addStage([\n            \"abvs\",\n            \"blws\",\n            \"pres\",\n            \"psts\",\n            \"dist\",\n            \"abvm\",\n            \"blwm\"\n        ]);\n    }\n    static assignFeatures(plan, glyphs) {\n        // Decompose split vowels\n        // TODO: do this in a more general unicode normalizer\n        for(let i = glyphs.length - 1; i >= 0; i--){\n            let codepoint = glyphs[i].codePoints[0];\n            if ($7eb6a55cb7a2526f$var$decompositions[codepoint]) {\n                let decomposed = $7eb6a55cb7a2526f$var$decompositions[codepoint].map((c)=>{\n                    let g = plan.font.glyphForCodePoint(c);\n                    return new $8cba766f534deddd$export$2e2bcd8739ae039(plan.font, g.id, [\n                        c\n                    ], glyphs[i].features);\n                });\n                glyphs.splice(i, 1, ...decomposed);\n            }\n        }\n    }\n}\nfunction $7eb6a55cb7a2526f$var$useCategory(glyph) {\n    return $7eb6a55cb7a2526f$var$trie.get(glyph.codePoints[0]);\n}\nclass $7eb6a55cb7a2526f$var$USEInfo {\n    constructor(category, syllableType, syllable){\n        this.category = category;\n        this.syllableType = syllableType;\n        this.syllable = syllable;\n    }\n}\nfunction $7eb6a55cb7a2526f$var$setupSyllables(font, glyphs) {\n    let syllable = 0;\n    for (let [start, end, tags] of $7eb6a55cb7a2526f$var$stateMachine.match(glyphs.map($7eb6a55cb7a2526f$var$useCategory))){\n        ++syllable;\n        // Create shaper info\n        for(let i = start; i <= end; i++)glyphs[i].shaperInfo = new $7eb6a55cb7a2526f$var$USEInfo($7eb6a55cb7a2526f$var$categories[$7eb6a55cb7a2526f$var$useCategory(glyphs[i])], tags[0], syllable);\n        // Assign rphf feature\n        let limit = glyphs[start].shaperInfo.category === \"R\" ? 1 : Math.min(3, end - start);\n        for(let i1 = start; i1 < start + limit; i1++)glyphs[i1].features.rphf = true;\n    }\n}\nfunction $7eb6a55cb7a2526f$var$clearSubstitutionFlags(font, glyphs) {\n    for (let glyph of glyphs)glyph.substituted = false;\n}\nfunction $7eb6a55cb7a2526f$var$recordRphf(font, glyphs) {\n    for (let glyph of glyphs)if (glyph.substituted && glyph.features.rphf) glyph.shaperInfo.category = \"R\";\n}\nfunction $7eb6a55cb7a2526f$var$recordPref(font, glyphs) {\n    for (let glyph of glyphs)if (glyph.substituted) glyph.shaperInfo.category = \"VPre\";\n}\nfunction $7eb6a55cb7a2526f$var$reorder(font, glyphs) {\n    let dottedCircle = font.glyphForCodePoint(0x25cc).id;\n    for(let start = 0, end = $7eb6a55cb7a2526f$var$nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = $7eb6a55cb7a2526f$var$nextSyllable(glyphs, start)){\n        let i, j;\n        let info = glyphs[start].shaperInfo;\n        let type = info.syllableType;\n        // Only a few syllable types need reordering.\n        if (type !== \"virama_terminated_cluster\" && type !== \"standard_cluster\" && type !== \"broken_cluster\") continue;\n        // Insert a dotted circle glyph in broken clusters.\n        if (type === \"broken_cluster\" && dottedCircle) {\n            let g = new $8cba766f534deddd$export$2e2bcd8739ae039(font, dottedCircle, [\n                0x25cc\n            ]);\n            g.shaperInfo = info;\n            // Insert after possible Repha.\n            for(i = start; i < end && glyphs[i].shaperInfo.category === \"R\"; i++);\n            glyphs.splice(++i, 0, g);\n            end++;\n        }\n        // Move things forward.\n        if (info.category === \"R\" && end - start > 1) for(i = start + 1; i < end; i++){\n            info = glyphs[i].shaperInfo;\n            if ($7eb6a55cb7a2526f$var$isBase(info) || $7eb6a55cb7a2526f$var$isHalant(glyphs[i])) {\n                // If we hit a halant, move before it; otherwise it's a base: move to it's\n                // place, and shift things in between backward.\n                if ($7eb6a55cb7a2526f$var$isHalant(glyphs[i])) i--;\n                glyphs.splice(start, 0, ...glyphs.splice(start + 1, i - start), glyphs[i]);\n                break;\n            }\n        }\n        // Move things back.\n        for(i = start, j = end; i < end; i++){\n            info = glyphs[i].shaperInfo;\n            if ($7eb6a55cb7a2526f$var$isBase(info) || $7eb6a55cb7a2526f$var$isHalant(glyphs[i])) // place, and shift things in between backward.\n            j = $7eb6a55cb7a2526f$var$isHalant(glyphs[i]) ? i + 1 : i;\n            else if ((info.category === \"VPre\" || info.category === \"VMPre\") && j < i) glyphs.splice(j, 1, glyphs[i], ...glyphs.splice(j, i - j));\n        }\n    }\n}\nfunction $7eb6a55cb7a2526f$var$nextSyllable(glyphs, start) {\n    if (start >= glyphs.length) return start;\n    let syllable = glyphs[start].shaperInfo.syllable;\n    while(++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable);\n    return start;\n}\nfunction $7eb6a55cb7a2526f$var$isHalant(glyph) {\n    return glyph.shaperInfo.category === \"H\" && !glyph.isLigated;\n}\nfunction $7eb6a55cb7a2526f$var$isBase(info) {\n    return info.category === \"B\" || info.category === \"GB\";\n}\nconst $a1d926e2c804f4db$var$SHAPERS = {\n    arab: $5cab828b3273a17c$export$2e2bcd8739ae039,\n    mong: $5cab828b3273a17c$export$2e2bcd8739ae039,\n    syrc: $5cab828b3273a17c$export$2e2bcd8739ae039,\n    \"nko \": $5cab828b3273a17c$export$2e2bcd8739ae039,\n    phag: $5cab828b3273a17c$export$2e2bcd8739ae039,\n    mand: $5cab828b3273a17c$export$2e2bcd8739ae039,\n    mani: $5cab828b3273a17c$export$2e2bcd8739ae039,\n    phlp: $5cab828b3273a17c$export$2e2bcd8739ae039,\n    hang: $ce39c5154631fd0c$export$2e2bcd8739ae039,\n    bng2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,\n    beng: $c6b883ac45fa55f1$export$2e2bcd8739ae039,\n    dev2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,\n    deva: $c6b883ac45fa55f1$export$2e2bcd8739ae039,\n    gjr2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,\n    gujr: $c6b883ac45fa55f1$export$2e2bcd8739ae039,\n    guru: $c6b883ac45fa55f1$export$2e2bcd8739ae039,\n    gur2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,\n    knda: $c6b883ac45fa55f1$export$2e2bcd8739ae039,\n    knd2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,\n    mlm2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,\n    mlym: $c6b883ac45fa55f1$export$2e2bcd8739ae039,\n    ory2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,\n    orya: $c6b883ac45fa55f1$export$2e2bcd8739ae039,\n    taml: $c6b883ac45fa55f1$export$2e2bcd8739ae039,\n    tml2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,\n    telu: $c6b883ac45fa55f1$export$2e2bcd8739ae039,\n    tel2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,\n    khmr: $c6b883ac45fa55f1$export$2e2bcd8739ae039,\n    bali: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n    batk: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n    brah: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n    bugi: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n    buhd: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n    cakm: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n    cham: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n    dupl: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n    egyp: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n    gran: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n    hano: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n    java: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n    kthi: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n    kali: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n    khar: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n    khoj: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n    sind: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n    lepc: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n    limb: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n    mahj: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n    // mand: UniversalShaper, // Mandaic\n    // mani: UniversalShaper, // Manichaean\n    mtei: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n    modi: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n    // mong: UniversalShaper, // Mongolian\n    // 'nko ': UniversalShaper, // N’Ko\n    hmng: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n    // phag: UniversalShaper, // Phags-pa\n    // phlp: UniversalShaper, // Psalter Pahlavi\n    rjng: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n    saur: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n    shrd: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n    sidd: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n    sinh: $c6b883ac45fa55f1$export$2e2bcd8739ae039,\n    sund: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n    sylo: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n    tglg: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n    tagb: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n    tale: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n    lana: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n    tavt: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n    takr: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n    tibt: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n    tfng: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n    tirh: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n    latn: $5340de7a86f3ae85$export$2e2bcd8739ae039,\n    DFLT: $5340de7a86f3ae85$export$2e2bcd8739ae039 // Default\n};\nfunction $a1d926e2c804f4db$export$7877a478dd30fd3d(script) {\n    if (!Array.isArray(script)) script = [\n        script\n    ];\n    for (let s of script){\n        let shaper = $a1d926e2c804f4db$var$SHAPERS[s];\n        if (shaper) return shaper;\n    }\n    return $5340de7a86f3ae85$export$2e2bcd8739ae039;\n}\nclass $ec0cc8d4808a62ff$export$2e2bcd8739ae039 extends $cffd0e0e7e88a6c6$export$2e2bcd8739ae039 {\n    applyLookup(lookupType, table) {\n        switch(lookupType){\n            case 1:\n                {\n                    let index = this.coverageIndex(table.coverage);\n                    if (index === -1) return false;\n                    let glyph = this.glyphIterator.cur;\n                    switch(table.version){\n                        case 1:\n                            glyph.id = glyph.id + table.deltaGlyphID & 0xffff;\n                            break;\n                        case 2:\n                            glyph.id = table.substitute.get(index);\n                            break;\n                    }\n                    return true;\n                }\n            case 2:\n                {\n                    let index = this.coverageIndex(table.coverage);\n                    if (index !== -1) {\n                        let sequence = table.sequences.get(index);\n                        if (sequence.length === 0) {\n                            // If the sequence length is zero, delete the glyph.\n                            // The OpenType spec disallows this, but seems like Harfbuzz and Uniscribe allow it.\n                            this.glyphs.splice(this.glyphIterator.index, 1);\n                            return true;\n                        }\n                        this.glyphIterator.cur.id = sequence[0];\n                        this.glyphIterator.cur.ligatureComponent = 0;\n                        let features = this.glyphIterator.cur.features;\n                        let curGlyph = this.glyphIterator.cur;\n                        let replacement = sequence.slice(1).map((gid, i)=>{\n                            let glyph = new $8cba766f534deddd$export$2e2bcd8739ae039(this.font, gid, undefined, features);\n                            glyph.shaperInfo = curGlyph.shaperInfo;\n                            glyph.isLigated = curGlyph.isLigated;\n                            glyph.ligatureComponent = i + 1;\n                            glyph.substituted = true;\n                            glyph.isMultiplied = true;\n                            return glyph;\n                        });\n                        this.glyphs.splice(this.glyphIterator.index + 1, 0, ...replacement);\n                        return true;\n                    }\n                    return false;\n                }\n            case 3:\n                {\n                    let index = this.coverageIndex(table.coverage);\n                    if (index !== -1) {\n                        let USER_INDEX = 0; // TODO\n                        this.glyphIterator.cur.id = table.alternateSet.get(index)[USER_INDEX];\n                        return true;\n                    }\n                    return false;\n                }\n            case 4:\n                {\n                    let index = this.coverageIndex(table.coverage);\n                    if (index === -1) return false;\n                    for (let ligature of table.ligatureSets.get(index)){\n                        let matched = this.sequenceMatchIndices(1, ligature.components);\n                        if (!matched) continue;\n                        let curGlyph = this.glyphIterator.cur;\n                        // Concatenate all of the characters the new ligature will represent\n                        let characters = curGlyph.codePoints.slice();\n                        for (let index of matched)characters.push(...this.glyphs[index].codePoints);\n                        // Create the replacement ligature glyph\n                        let ligatureGlyph = new $8cba766f534deddd$export$2e2bcd8739ae039(this.font, ligature.glyph, characters, curGlyph.features);\n                        ligatureGlyph.shaperInfo = curGlyph.shaperInfo;\n                        ligatureGlyph.isLigated = true;\n                        ligatureGlyph.substituted = true;\n                        // From Harfbuzz:\n                        // - If it *is* a mark ligature, we don't allocate a new ligature id, and leave\n                        //   the ligature to keep its old ligature id.  This will allow it to attach to\n                        //   a base ligature in GPOS.  Eg. if the sequence is: LAM,LAM,SHADDA,FATHA,HEH,\n                        //   and LAM,LAM,HEH for a ligature, they will leave SHADDA and FATHA with a\n                        //   ligature id and component value of 2.  Then if SHADDA,FATHA form a ligature\n                        //   later, we don't want them to lose their ligature id/component, otherwise\n                        //   GPOS will fail to correctly position the mark ligature on top of the\n                        //   LAM,LAM,HEH ligature. See https://bugzilla.gnome.org/show_bug.cgi?id=676343\n                        //\n                        // - If a ligature is formed of components that some of which are also ligatures\n                        //   themselves, and those ligature components had marks attached to *their*\n                        //   components, we have to attach the marks to the new ligature component\n                        //   positions!  Now *that*'s tricky!  And these marks may be following the\n                        //   last component of the whole sequence, so we should loop forward looking\n                        //   for them and update them.\n                        //\n                        //   Eg. the sequence is LAM,LAM,SHADDA,FATHA,HEH, and the font first forms a\n                        //   'calt' ligature of LAM,HEH, leaving the SHADDA and FATHA with a ligature\n                        //   id and component == 1.  Now, during 'liga', the LAM and the LAM-HEH ligature\n                        //   form a LAM-LAM-HEH ligature.  We need to reassign the SHADDA and FATHA to\n                        //   the new ligature with a component value of 2.\n                        //\n                        //   This in fact happened to a font...  See https://bugzilla.gnome.org/show_bug.cgi?id=437633\n                        let isMarkLigature = curGlyph.isMark;\n                        for(let i = 0; i < matched.length && isMarkLigature; i++)isMarkLigature = this.glyphs[matched[i]].isMark;\n                        ligatureGlyph.ligatureID = isMarkLigature ? null : this.ligatureID++;\n                        let lastLigID = curGlyph.ligatureID;\n                        let lastNumComps = curGlyph.codePoints.length;\n                        let curComps = lastNumComps;\n                        let idx = this.glyphIterator.index + 1;\n                        // Set ligatureID and ligatureComponent on glyphs that were skipped in the matched sequence.\n                        // This allows GPOS to attach marks to the correct ligature components.\n                        for (let matchIndex of matched){\n                            // Don't assign new ligature components for mark ligatures (see above)\n                            if (isMarkLigature) idx = matchIndex;\n                            else while(idx < matchIndex){\n                                var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[idx].ligatureComponent || 1, lastNumComps);\n                                this.glyphs[idx].ligatureID = ligatureGlyph.ligatureID;\n                                this.glyphs[idx].ligatureComponent = ligatureComponent;\n                                idx++;\n                            }\n                            lastLigID = this.glyphs[idx].ligatureID;\n                            lastNumComps = this.glyphs[idx].codePoints.length;\n                            curComps += lastNumComps;\n                            idx++; // skip base glyph\n                        }\n                        // Adjust ligature components for any marks following\n                        if (lastLigID && !isMarkLigature) for(let i1 = idx; i1 < this.glyphs.length; i1++){\n                            if (this.glyphs[i1].ligatureID === lastLigID) {\n                                var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[i1].ligatureComponent || 1, lastNumComps);\n                                this.glyphs[i1].ligatureComponent = ligatureComponent;\n                            } else break;\n                        }\n                        // Delete the matched glyphs, and replace the current glyph with the ligature glyph\n                        for(let i2 = matched.length - 1; i2 >= 0; i2--)this.glyphs.splice(matched[i2], 1);\n                        this.glyphs[this.glyphIterator.index] = ligatureGlyph;\n                        return true;\n                    }\n                    return false;\n                }\n            case 5:\n                return this.applyContext(table);\n            case 6:\n                return this.applyChainingContext(table);\n            case 7:\n                return this.applyLookup(table.lookupType, table.extension);\n            default:\n                throw new Error(`GSUB lookupType ${lookupType} is not supported`);\n        }\n    }\n}\nclass $d1645ec9e32ddac0$export$2e2bcd8739ae039 extends $cffd0e0e7e88a6c6$export$2e2bcd8739ae039 {\n    applyPositionValue(sequenceIndex, value) {\n        let position = this.positions[this.glyphIterator.peekIndex(sequenceIndex)];\n        if (value.xAdvance != null) position.xAdvance += value.xAdvance;\n        if (value.yAdvance != null) position.yAdvance += value.yAdvance;\n        if (value.xPlacement != null) position.xOffset += value.xPlacement;\n        if (value.yPlacement != null) position.yOffset += value.yPlacement;\n        // Adjustments for font variations\n        let variationProcessor = this.font._variationProcessor;\n        let variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;\n        if (variationProcessor && variationStore) {\n            if (value.xPlaDevice) position.xOffset += variationProcessor.getDelta(variationStore, value.xPlaDevice.a, value.xPlaDevice.b);\n            if (value.yPlaDevice) position.yOffset += variationProcessor.getDelta(variationStore, value.yPlaDevice.a, value.yPlaDevice.b);\n            if (value.xAdvDevice) position.xAdvance += variationProcessor.getDelta(variationStore, value.xAdvDevice.a, value.xAdvDevice.b);\n            if (value.yAdvDevice) position.yAdvance += variationProcessor.getDelta(variationStore, value.yAdvDevice.a, value.yAdvDevice.b);\n        }\n    // TODO: device tables\n    }\n    applyLookup(lookupType, table) {\n        switch(lookupType){\n            case 1:\n                {\n                    let index = this.coverageIndex(table.coverage);\n                    if (index === -1) return false;\n                    switch(table.version){\n                        case 1:\n                            this.applyPositionValue(0, table.value);\n                            break;\n                        case 2:\n                            this.applyPositionValue(0, table.values.get(index));\n                            break;\n                    }\n                    return true;\n                }\n            case 2:\n                {\n                    let nextGlyph = this.glyphIterator.peek();\n                    if (!nextGlyph) return false;\n                    let index = this.coverageIndex(table.coverage);\n                    if (index === -1) return false;\n                    switch(table.version){\n                        case 1:\n                            let set = table.pairSets.get(index);\n                            for (let pair of set)if (pair.secondGlyph === nextGlyph.id) {\n                                this.applyPositionValue(0, pair.value1);\n                                this.applyPositionValue(1, pair.value2);\n                                return true;\n                            }\n                            return false;\n                        case 2:\n                            let class1 = this.getClassID(this.glyphIterator.cur.id, table.classDef1);\n                            let class2 = this.getClassID(nextGlyph.id, table.classDef2);\n                            if (class1 === -1 || class2 === -1) return false;\n                            var pair1 = table.classRecords.get(class1).get(class2);\n                            this.applyPositionValue(0, pair1.value1);\n                            this.applyPositionValue(1, pair1.value2);\n                            return true;\n                    }\n                }\n            case 3:\n                {\n                    let nextIndex = this.glyphIterator.peekIndex();\n                    let nextGlyph = this.glyphs[nextIndex];\n                    if (!nextGlyph) return false;\n                    let curRecord = table.entryExitRecords[this.coverageIndex(table.coverage)];\n                    if (!curRecord || !curRecord.exitAnchor) return false;\n                    let nextRecord = table.entryExitRecords[this.coverageIndex(table.coverage, nextGlyph.id)];\n                    if (!nextRecord || !nextRecord.entryAnchor) return false;\n                    let entry = this.getAnchor(nextRecord.entryAnchor);\n                    let exit = this.getAnchor(curRecord.exitAnchor);\n                    let cur = this.positions[this.glyphIterator.index];\n                    let next = this.positions[nextIndex];\n                    let d;\n                    switch(this.direction){\n                        case \"ltr\":\n                            cur.xAdvance = exit.x + cur.xOffset;\n                            d = entry.x + next.xOffset;\n                            next.xAdvance -= d;\n                            next.xOffset -= d;\n                            break;\n                        case \"rtl\":\n                            d = exit.x + cur.xOffset;\n                            cur.xAdvance -= d;\n                            cur.xOffset -= d;\n                            next.xAdvance = entry.x + next.xOffset;\n                            break;\n                    }\n                    if (this.glyphIterator.flags.rightToLeft) {\n                        this.glyphIterator.cur.cursiveAttachment = nextIndex;\n                        cur.yOffset = entry.y - exit.y;\n                    } else {\n                        nextGlyph.cursiveAttachment = this.glyphIterator.index;\n                        cur.yOffset = exit.y - entry.y;\n                    }\n                    return true;\n                }\n            case 4:\n                {\n                    let markIndex = this.coverageIndex(table.markCoverage);\n                    if (markIndex === -1) return false;\n                    // search backward for a base glyph\n                    let baseGlyphIndex = this.glyphIterator.index;\n                    while(--baseGlyphIndex >= 0 && (this.glyphs[baseGlyphIndex].isMark || this.glyphs[baseGlyphIndex].ligatureComponent > 0));\n                    if (baseGlyphIndex < 0) return false;\n                    let baseIndex = this.coverageIndex(table.baseCoverage, this.glyphs[baseGlyphIndex].id);\n                    if (baseIndex === -1) return false;\n                    let markRecord = table.markArray[markIndex];\n                    let baseAnchor = table.baseArray[baseIndex][markRecord.class];\n                    this.applyAnchor(markRecord, baseAnchor, baseGlyphIndex);\n                    return true;\n                }\n            case 5:\n                {\n                    let markIndex = this.coverageIndex(table.markCoverage);\n                    if (markIndex === -1) return false;\n                    // search backward for a base glyph\n                    let baseGlyphIndex = this.glyphIterator.index;\n                    while(--baseGlyphIndex >= 0 && this.glyphs[baseGlyphIndex].isMark);\n                    if (baseGlyphIndex < 0) return false;\n                    let ligIndex = this.coverageIndex(table.ligatureCoverage, this.glyphs[baseGlyphIndex].id);\n                    if (ligIndex === -1) return false;\n                    let ligAttach = table.ligatureArray[ligIndex];\n                    let markGlyph = this.glyphIterator.cur;\n                    let ligGlyph = this.glyphs[baseGlyphIndex];\n                    let compIndex = ligGlyph.ligatureID && ligGlyph.ligatureID === markGlyph.ligatureID && markGlyph.ligatureComponent > 0 ? Math.min(markGlyph.ligatureComponent, ligGlyph.codePoints.length) - 1 : ligGlyph.codePoints.length - 1;\n                    let markRecord = table.markArray[markIndex];\n                    let baseAnchor = ligAttach[compIndex][markRecord.class];\n                    this.applyAnchor(markRecord, baseAnchor, baseGlyphIndex);\n                    return true;\n                }\n            case 6:\n                {\n                    let mark1Index = this.coverageIndex(table.mark1Coverage);\n                    if (mark1Index === -1) return false;\n                    // get the previous mark to attach to\n                    let prevIndex = this.glyphIterator.peekIndex(-1);\n                    let prev = this.glyphs[prevIndex];\n                    if (!prev || !prev.isMark) return false;\n                    let cur = this.glyphIterator.cur;\n                    // The following logic was borrowed from Harfbuzz\n                    let good = false;\n                    if (cur.ligatureID === prev.ligatureID) {\n                        if (!cur.ligatureID) good = true;\n                        else if (cur.ligatureComponent === prev.ligatureComponent) good = true;\n                    } else // itself is a ligature, in which case match.\n                    if (cur.ligatureID && !cur.ligatureComponent || prev.ligatureID && !prev.ligatureComponent) good = true;\n                    if (!good) return false;\n                    let mark2Index = this.coverageIndex(table.mark2Coverage, prev.id);\n                    if (mark2Index === -1) return false;\n                    let markRecord = table.mark1Array[mark1Index];\n                    let baseAnchor = table.mark2Array[mark2Index][markRecord.class];\n                    this.applyAnchor(markRecord, baseAnchor, prevIndex);\n                    return true;\n                }\n            case 7:\n                return this.applyContext(table);\n            case 8:\n                return this.applyChainingContext(table);\n            case 9:\n                return this.applyLookup(table.lookupType, table.extension);\n            default:\n                throw new Error(`Unsupported GPOS table: ${lookupType}`);\n        }\n    }\n    applyAnchor(markRecord, baseAnchor, baseGlyphIndex) {\n        let baseCoords = this.getAnchor(baseAnchor);\n        let markCoords = this.getAnchor(markRecord.markAnchor);\n        let basePos = this.positions[baseGlyphIndex];\n        let markPos = this.positions[this.glyphIterator.index];\n        markPos.xOffset = baseCoords.x - markCoords.x;\n        markPos.yOffset = baseCoords.y - markCoords.y;\n        this.glyphIterator.cur.markAttachment = baseGlyphIndex;\n    }\n    getAnchor(anchor) {\n        // TODO: contour point, device tables\n        let x = anchor.xCoordinate;\n        let y = anchor.yCoordinate;\n        // Adjustments for font variations\n        let variationProcessor = this.font._variationProcessor;\n        let variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;\n        if (variationProcessor && variationStore) {\n            if (anchor.xDeviceTable) x += variationProcessor.getDelta(variationStore, anchor.xDeviceTable.a, anchor.xDeviceTable.b);\n            if (anchor.yDeviceTable) y += variationProcessor.getDelta(variationStore, anchor.yDeviceTable.a, anchor.yDeviceTable.b);\n        }\n        return {\n            x: x,\n            y: y\n        };\n    }\n    applyFeatures(userFeatures, glyphs, advances) {\n        super.applyFeatures(userFeatures, glyphs, advances);\n        for(var i = 0; i < this.glyphs.length; i++)this.fixCursiveAttachment(i);\n        this.fixMarkAttachment();\n    }\n    fixCursiveAttachment(i) {\n        let glyph = this.glyphs[i];\n        if (glyph.cursiveAttachment != null) {\n            let j = glyph.cursiveAttachment;\n            glyph.cursiveAttachment = null;\n            this.fixCursiveAttachment(j);\n            this.positions[i].yOffset += this.positions[j].yOffset;\n        }\n    }\n    fixMarkAttachment() {\n        for(let i = 0; i < this.glyphs.length; i++){\n            let glyph = this.glyphs[i];\n            if (glyph.markAttachment != null) {\n                let j = glyph.markAttachment;\n                this.positions[i].xOffset += this.positions[j].xOffset;\n                this.positions[i].yOffset += this.positions[j].yOffset;\n                if (this.direction === \"ltr\") for(let k = j; k < i; k++){\n                    this.positions[i].xOffset -= this.positions[k].xAdvance;\n                    this.positions[i].yOffset -= this.positions[k].yAdvance;\n                }\n                else for(let k1 = j + 1; k1 < i + 1; k1++){\n                    this.positions[i].xOffset += this.positions[k1].xAdvance;\n                    this.positions[i].yOffset += this.positions[k1].yAdvance;\n                }\n            }\n        }\n    }\n}\nclass $805414ed4cd3125e$export$2e2bcd8739ae039 {\n    constructor(font){\n        this.font = font;\n        this.glyphInfos = null;\n        this.plan = null;\n        this.GSUBProcessor = null;\n        this.GPOSProcessor = null;\n        this.fallbackPosition = true;\n        if (font.GSUB) this.GSUBProcessor = new $ec0cc8d4808a62ff$export$2e2bcd8739ae039(font, font.GSUB);\n        if (font.GPOS) this.GPOSProcessor = new $d1645ec9e32ddac0$export$2e2bcd8739ae039(font, font.GPOS);\n    }\n    setup(glyphRun) {\n        // Map glyphs to GlyphInfo objects so data can be passed between\n        // GSUB and GPOS without mutating the real (shared) Glyph objects.\n        this.glyphInfos = glyphRun.glyphs.map((glyph)=>new $8cba766f534deddd$export$2e2bcd8739ae039(this.font, glyph.id, [\n                ...glyph.codePoints\n            ]));\n        // Select a script based on what is available in GSUB/GPOS.\n        let script = null;\n        if (this.GPOSProcessor) script = this.GPOSProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);\n        if (this.GSUBProcessor) script = this.GSUBProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);\n        // Choose a shaper based on the script, and setup a shaping plan.\n        // This determines which features to apply to which glyphs.\n        this.shaper = $a1d926e2c804f4db$export$7877a478dd30fd3d(script);\n        this.plan = new $d208953d14e55e3c$export$2e2bcd8739ae039(this.font, script, glyphRun.direction);\n        this.shaper.plan(this.plan, this.glyphInfos, glyphRun.features);\n        // Assign chosen features to output glyph run\n        for(let key in this.plan.allFeatures)glyphRun.features[key] = true;\n    }\n    substitute(glyphRun) {\n        if (this.GSUBProcessor) {\n            this.plan.process(this.GSUBProcessor, this.glyphInfos);\n            // Map glyph infos back to normal Glyph objects\n            glyphRun.glyphs = this.glyphInfos.map((glyphInfo)=>this.font.getGlyph(glyphInfo.id, glyphInfo.codePoints));\n        }\n    }\n    position(glyphRun) {\n        if (this.shaper.zeroMarkWidths === \"BEFORE_GPOS\") this.zeroMarkAdvances(glyphRun.positions);\n        if (this.GPOSProcessor) this.plan.process(this.GPOSProcessor, this.glyphInfos, glyphRun.positions);\n        if (this.shaper.zeroMarkWidths === \"AFTER_GPOS\") this.zeroMarkAdvances(glyphRun.positions);\n        // Reverse the glyphs and positions if the script is right-to-left\n        if (glyphRun.direction === \"rtl\") {\n            glyphRun.glyphs.reverse();\n            glyphRun.positions.reverse();\n        }\n        return this.GPOSProcessor && this.GPOSProcessor.features;\n    }\n    zeroMarkAdvances(positions) {\n        for(let i = 0; i < this.glyphInfos.length; i++)if (this.glyphInfos[i].isMark) {\n            positions[i].xAdvance = 0;\n            positions[i].yAdvance = 0;\n        }\n    }\n    cleanup() {\n        this.glyphInfos = null;\n        this.plan = null;\n        this.shaper = null;\n    }\n    getAvailableFeatures(script, language) {\n        let features = [];\n        if (this.GSUBProcessor) {\n            this.GSUBProcessor.selectScript(script, language);\n            features.push(...Object.keys(this.GSUBProcessor.features));\n        }\n        if (this.GPOSProcessor) {\n            this.GPOSProcessor.selectScript(script, language);\n            features.push(...Object.keys(this.GPOSProcessor.features));\n        }\n        return features;\n    }\n}\nclass $2df783177c3b5db5$export$2e2bcd8739ae039 {\n    constructor(font){\n        this.font = font;\n        this.unicodeLayoutEngine = null;\n        this.kernProcessor = null;\n        // Choose an advanced layout engine. We try the AAT morx table first since more\n        // scripts are currently supported because the shaping logic is built into the font.\n        if (this.font.morx) this.engine = new $9273c77bc46b13e0$export$2e2bcd8739ae039(this.font);\n        else if (this.font.GSUB || this.font.GPOS) this.engine = new $805414ed4cd3125e$export$2e2bcd8739ae039(this.font);\n    }\n    layout(string, features, script, language, direction) {\n        // Make the features parameter optional\n        if (typeof features === \"string\") {\n            direction = language;\n            language = script;\n            script = features;\n            features = [];\n        }\n        // Map string to glyphs if needed\n        if (typeof string === \"string\") {\n            // Attempt to detect the script from the string if not provided.\n            if (script == null) script = $a5878e4f4663c9e2$export$e5cb25e204fb8450(string);\n            var glyphs = this.font.glyphsForString(string);\n        } else {\n            // Attempt to detect the script from the glyph code points if not provided.\n            if (script == null) {\n                let codePoints = [];\n                for (let glyph of string)codePoints.push(...glyph.codePoints);\n                script = $a5878e4f4663c9e2$export$16fab0757cfc223d(codePoints);\n            }\n            var glyphs = string;\n        }\n        let glyphRun = new $5a6ae00fa7e614b0$export$2e2bcd8739ae039(glyphs, features, script, language, direction);\n        // Return early if there are no glyphs\n        if (glyphs.length === 0) {\n            glyphRun.positions = [];\n            return glyphRun;\n        }\n        // Setup the advanced layout engine\n        if (this.engine && this.engine.setup) this.engine.setup(glyphRun);\n        // Substitute and position the glyphs\n        this.substitute(glyphRun);\n        this.position(glyphRun);\n        this.hideDefaultIgnorables(glyphRun.glyphs, glyphRun.positions);\n        // Let the layout engine clean up any state it might have\n        if (this.engine && this.engine.cleanup) this.engine.cleanup();\n        return glyphRun;\n    }\n    substitute(glyphRun) {\n        // Call the advanced layout engine to make substitutions\n        if (this.engine && this.engine.substitute) this.engine.substitute(glyphRun);\n    }\n    position(glyphRun) {\n        // Get initial glyph positions\n        glyphRun.positions = glyphRun.glyphs.map((glyph)=>new $4bff5f854806c785$export$2e2bcd8739ae039(glyph.advanceWidth));\n        let positioned = null;\n        // Call the advanced layout engine. Returns the features applied.\n        if (this.engine && this.engine.position) positioned = this.engine.position(glyphRun);\n        // if there is no GPOS table, use unicode properties to position marks.\n        if (!positioned && (!this.engine || this.engine.fallbackPosition)) {\n            if (!this.unicodeLayoutEngine) this.unicodeLayoutEngine = new $e4967fef9afc586a$export$2e2bcd8739ae039(this.font);\n            this.unicodeLayoutEngine.positionGlyphs(glyphRun.glyphs, glyphRun.positions);\n        }\n        // if kerning is not supported by GPOS, do kerning with the TrueType/AAT kern table\n        if ((!positioned || !positioned.kern) && glyphRun.features.kern !== false && this.font.kern) {\n            if (!this.kernProcessor) this.kernProcessor = new $8526e21034212dc1$export$2e2bcd8739ae039(this.font);\n            this.kernProcessor.process(glyphRun.glyphs, glyphRun.positions);\n            glyphRun.features.kern = true;\n        }\n    }\n    hideDefaultIgnorables(glyphs, positions) {\n        let space = this.font.glyphForCodePoint(0x20);\n        for(let i = 0; i < glyphs.length; i++)if (this.isDefaultIgnorable(glyphs[i].codePoints[0])) {\n            glyphs[i] = space;\n            positions[i].xAdvance = 0;\n            positions[i].yAdvance = 0;\n        }\n    }\n    isDefaultIgnorable(ch) {\n        // From DerivedCoreProperties.txt in the Unicode database,\n        // minus U+115F, U+1160, U+3164 and U+FFA0, which is what\n        // Harfbuzz and Uniscribe do.\n        let plane = ch >> 16;\n        if (plane === 0) switch(ch >> 8){\n            case 0x00:\n                return ch === 0x00AD;\n            case 0x03:\n                return ch === 0x034F;\n            case 0x06:\n                return ch === 0x061C;\n            case 0x17:\n                return 0x17B4 <= ch && ch <= 0x17B5;\n            case 0x18:\n                return 0x180B <= ch && ch <= 0x180E;\n            case 0x20:\n                return 0x200B <= ch && ch <= 0x200F || 0x202A <= ch && ch <= 0x202E || 0x2060 <= ch && ch <= 0x206F;\n            case 0xFE:\n                return 0xFE00 <= ch && ch <= 0xFE0F || ch === 0xFEFF;\n            case 0xFF:\n                return 0xFFF0 <= ch && ch <= 0xFFF8;\n            default:\n                return false;\n        }\n        else switch(plane){\n            case 0x01:\n                return 0x1BCA0 <= ch && ch <= 0x1BCA3 || 0x1D173 <= ch && ch <= 0x1D17A;\n            case 0x0E:\n                return 0xE0000 <= ch && ch <= 0xE0FFF;\n            default:\n                return false;\n        }\n    }\n    getAvailableFeatures(script, language) {\n        let features = [];\n        if (this.engine) features.push(...this.engine.getAvailableFeatures(script, language));\n        if (this.font.kern && features.indexOf(\"kern\") === -1) features.push(\"kern\");\n        return features;\n    }\n    stringsForGlyph(gid) {\n        let result = new Set;\n        let codePoints = this.font._cmapProcessor.codePointsForGlyph(gid);\n        for (let codePoint of codePoints)result.add(String.fromCodePoint(codePoint));\n        if (this.engine && this.engine.stringsForGlyph) for (let string of this.engine.stringsForGlyph(gid))result.add(string);\n        return Array.from(result);\n    }\n}\nconst $af5e1fcddefe17a2$var$SVG_COMMANDS = {\n    moveTo: \"M\",\n    lineTo: \"L\",\n    quadraticCurveTo: \"Q\",\n    bezierCurveTo: \"C\",\n    closePath: \"Z\"\n};\nclass $af5e1fcddefe17a2$export$2e2bcd8739ae039 {\n    constructor(){\n        this.commands = [];\n        this._bbox = null;\n        this._cbox = null;\n    }\n    /**\n   * Compiles the path to a JavaScript function that can be applied with\n   * a graphics context in order to render the path.\n   * @return {string}\n   */ toFunction() {\n        return (ctx)=>{\n            this.commands.forEach((c)=>{\n                return ctx[c.command].apply(ctx, c.args);\n            });\n        };\n    }\n    /**\n   * Converts the path to an SVG path data string\n   * @return {string}\n   */ toSVG() {\n        let cmds = this.commands.map((c)=>{\n            let args = c.args.map((arg)=>Math.round(arg * 100) / 100);\n            return `${$af5e1fcddefe17a2$var$SVG_COMMANDS[c.command]}${args.join(\" \")}`;\n        });\n        return cmds.join(\"\");\n    }\n    /**\n   * Gets the \"control box\" of a path.\n   * This is like the bounding box, but it includes all points including\n   * control points of bezier segments and is much faster to compute than\n   * the real bounding box.\n   * @type {BBox}\n   */ get cbox() {\n        if (!this._cbox) {\n            let cbox = new $fcb46e14b01ea01f$export$2e2bcd8739ae039;\n            for (let command1 of this.commands)for(let i = 0; i < command1.args.length; i += 2)cbox.addPoint(command1.args[i], command1.args[i + 1]);\n            this._cbox = Object.freeze(cbox);\n        }\n        return this._cbox;\n    }\n    /**\n   * Gets the exact bounding box of the path by evaluating curve segments.\n   * Slower to compute than the control box, but more accurate.\n   * @type {BBox}\n   */ get bbox() {\n        if (this._bbox) return this._bbox;\n        let bbox = new $fcb46e14b01ea01f$export$2e2bcd8739ae039;\n        let cx = 0, cy = 0;\n        let f = (t)=>Math.pow(1 - t, 3) * p0[i] + 3 * Math.pow(1 - t, 2) * t * p1[i] + 3 * (1 - t) * Math.pow(t, 2) * p2[i] + Math.pow(t, 3) * p3[i];\n        for (let c of this.commands)switch(c.command){\n            case \"moveTo\":\n            case \"lineTo\":\n                let [x, y] = c.args;\n                bbox.addPoint(x, y);\n                cx = x;\n                cy = y;\n                break;\n            case \"quadraticCurveTo\":\n            case \"bezierCurveTo\":\n                if (c.command === \"quadraticCurveTo\") {\n                    // http://fontforge.org/bezier.html\n                    var [qp1x, qp1y, p3x, p3y] = c.args;\n                    var cp1x = cx + 2 / 3 * (qp1x - cx); // CP1 = QP0 + 2/3 * (QP1-QP0)\n                    var cp1y = cy + 2 / 3 * (qp1y - cy);\n                    var cp2x = p3x + 2 / 3 * (qp1x - p3x); // CP2 = QP2 + 2/3 * (QP1-QP2)\n                    var cp2y = p3y + 2 / 3 * (qp1y - p3y);\n                } else var [cp1x, cp1y, cp2x, cp2y, p3x, p3y] = c.args;\n                // http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n                bbox.addPoint(p3x, p3y);\n                var p0 = [\n                    cx,\n                    cy\n                ];\n                var p1 = [\n                    cp1x,\n                    cp1y\n                ];\n                var p2 = [\n                    cp2x,\n                    cp2y\n                ];\n                var p3 = [\n                    p3x,\n                    p3y\n                ];\n                for(var i = 0; i <= 1; i++){\n                    let b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];\n                    let a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];\n                    c = 3 * p1[i] - 3 * p0[i];\n                    if (a === 0) {\n                        if (b === 0) continue;\n                        let t = -c / b;\n                        if (0 < t && t < 1) {\n                            if (i === 0) bbox.addPoint(f(t), bbox.maxY);\n                            else if (i === 1) bbox.addPoint(bbox.maxX, f(t));\n                        }\n                        continue;\n                    }\n                    let b2ac = Math.pow(b, 2) - 4 * c * a;\n                    if (b2ac < 0) continue;\n                    let t1 = (-b + Math.sqrt(b2ac)) / (2 * a);\n                    if (0 < t1 && t1 < 1) {\n                        if (i === 0) bbox.addPoint(f(t1), bbox.maxY);\n                        else if (i === 1) bbox.addPoint(bbox.maxX, f(t1));\n                    }\n                    let t2 = (-b - Math.sqrt(b2ac)) / (2 * a);\n                    if (0 < t2 && t2 < 1) {\n                        if (i === 0) bbox.addPoint(f(t2), bbox.maxY);\n                        else if (i === 1) bbox.addPoint(bbox.maxX, f(t2));\n                    }\n                }\n                cx = p3x;\n                cy = p3y;\n                break;\n        }\n        return this._bbox = Object.freeze(bbox);\n    }\n    /**\n   * Applies a mapping function to each point in the path.\n   * @param {function} fn\n   * @return {Path}\n   */ mapPoints(fn) {\n        let path = new $af5e1fcddefe17a2$export$2e2bcd8739ae039;\n        for (let c of this.commands){\n            let args = [];\n            for(let i = 0; i < c.args.length; i += 2){\n                let [x, y] = fn(c.args[i], c.args[i + 1]);\n                args.push(x, y);\n            }\n            path[c.command](...args);\n        }\n        return path;\n    }\n    /**\n   * Transforms the path by the given matrix.\n   */ transform(m0, m1, m2, m3, m4, m5) {\n        return this.mapPoints((x, y)=>{\n            const tx = m0 * x + m2 * y + m4;\n            const ty = m1 * x + m3 * y + m5;\n            return [\n                tx,\n                ty\n            ];\n        });\n    }\n    /**\n   * Translates the path by the given offset.\n   */ translate(x, y) {\n        return this.transform(1, 0, 0, 1, x, y);\n    }\n    /**\n   * Rotates the path by the given angle (in radians).\n   */ rotate(angle) {\n        let cos = Math.cos(angle);\n        let sin = Math.sin(angle);\n        return this.transform(cos, sin, -sin, cos, 0, 0);\n    }\n    /**\n   * Scales the path.\n   */ scale(scaleX, scaleY = scaleX) {\n        return this.transform(scaleX, 0, 0, scaleY, 0, 0);\n    }\n}\nfor (let command of [\n    \"moveTo\",\n    \"lineTo\",\n    \"quadraticCurveTo\",\n    \"bezierCurveTo\",\n    \"closePath\"\n])$af5e1fcddefe17a2$export$2e2bcd8739ae039.prototype[command] = function(...args) {\n    this._bbox = this._cbox = null;\n    this.commands.push({\n        command: command,\n        args: args\n    });\n    return this;\n};\nvar $c55d37cb83b3ceea$export$2e2bcd8739ae039 = [\n    \".notdef\",\n    \".null\",\n    \"nonmarkingreturn\",\n    \"space\",\n    \"exclam\",\n    \"quotedbl\",\n    \"numbersign\",\n    \"dollar\",\n    \"percent\",\n    \"ampersand\",\n    \"quotesingle\",\n    \"parenleft\",\n    \"parenright\",\n    \"asterisk\",\n    \"plus\",\n    \"comma\",\n    \"hyphen\",\n    \"period\",\n    \"slash\",\n    \"zero\",\n    \"one\",\n    \"two\",\n    \"three\",\n    \"four\",\n    \"five\",\n    \"six\",\n    \"seven\",\n    \"eight\",\n    \"nine\",\n    \"colon\",\n    \"semicolon\",\n    \"less\",\n    \"equal\",\n    \"greater\",\n    \"question\",\n    \"at\",\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\",\n    \"E\",\n    \"F\",\n    \"G\",\n    \"H\",\n    \"I\",\n    \"J\",\n    \"K\",\n    \"L\",\n    \"M\",\n    \"N\",\n    \"O\",\n    \"P\",\n    \"Q\",\n    \"R\",\n    \"S\",\n    \"T\",\n    \"U\",\n    \"V\",\n    \"W\",\n    \"X\",\n    \"Y\",\n    \"Z\",\n    \"bracketleft\",\n    \"backslash\",\n    \"bracketright\",\n    \"asciicircum\",\n    \"underscore\",\n    \"grave\",\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\",\n    \"h\",\n    \"i\",\n    \"j\",\n    \"k\",\n    \"l\",\n    \"m\",\n    \"n\",\n    \"o\",\n    \"p\",\n    \"q\",\n    \"r\",\n    \"s\",\n    \"t\",\n    \"u\",\n    \"v\",\n    \"w\",\n    \"x\",\n    \"y\",\n    \"z\",\n    \"braceleft\",\n    \"bar\",\n    \"braceright\",\n    \"asciitilde\",\n    \"Adieresis\",\n    \"Aring\",\n    \"Ccedilla\",\n    \"Eacute\",\n    \"Ntilde\",\n    \"Odieresis\",\n    \"Udieresis\",\n    \"aacute\",\n    \"agrave\",\n    \"acircumflex\",\n    \"adieresis\",\n    \"atilde\",\n    \"aring\",\n    \"ccedilla\",\n    \"eacute\",\n    \"egrave\",\n    \"ecircumflex\",\n    \"edieresis\",\n    \"iacute\",\n    \"igrave\",\n    \"icircumflex\",\n    \"idieresis\",\n    \"ntilde\",\n    \"oacute\",\n    \"ograve\",\n    \"ocircumflex\",\n    \"odieresis\",\n    \"otilde\",\n    \"uacute\",\n    \"ugrave\",\n    \"ucircumflex\",\n    \"udieresis\",\n    \"dagger\",\n    \"degree\",\n    \"cent\",\n    \"sterling\",\n    \"section\",\n    \"bullet\",\n    \"paragraph\",\n    \"germandbls\",\n    \"registered\",\n    \"copyright\",\n    \"trademark\",\n    \"acute\",\n    \"dieresis\",\n    \"notequal\",\n    \"AE\",\n    \"Oslash\",\n    \"infinity\",\n    \"plusminus\",\n    \"lessequal\",\n    \"greaterequal\",\n    \"yen\",\n    \"mu\",\n    \"partialdiff\",\n    \"summation\",\n    \"product\",\n    \"pi\",\n    \"integral\",\n    \"ordfeminine\",\n    \"ordmasculine\",\n    \"Omega\",\n    \"ae\",\n    \"oslash\",\n    \"questiondown\",\n    \"exclamdown\",\n    \"logicalnot\",\n    \"radical\",\n    \"florin\",\n    \"approxequal\",\n    \"Delta\",\n    \"guillemotleft\",\n    \"guillemotright\",\n    \"ellipsis\",\n    \"nonbreakingspace\",\n    \"Agrave\",\n    \"Atilde\",\n    \"Otilde\",\n    \"OE\",\n    \"oe\",\n    \"endash\",\n    \"emdash\",\n    \"quotedblleft\",\n    \"quotedblright\",\n    \"quoteleft\",\n    \"quoteright\",\n    \"divide\",\n    \"lozenge\",\n    \"ydieresis\",\n    \"Ydieresis\",\n    \"fraction\",\n    \"currency\",\n    \"guilsinglleft\",\n    \"guilsinglright\",\n    \"fi\",\n    \"fl\",\n    \"daggerdbl\",\n    \"periodcentered\",\n    \"quotesinglbase\",\n    \"quotedblbase\",\n    \"perthousand\",\n    \"Acircumflex\",\n    \"Ecircumflex\",\n    \"Aacute\",\n    \"Edieresis\",\n    \"Egrave\",\n    \"Iacute\",\n    \"Icircumflex\",\n    \"Idieresis\",\n    \"Igrave\",\n    \"Oacute\",\n    \"Ocircumflex\",\n    \"apple\",\n    \"Ograve\",\n    \"Uacute\",\n    \"Ucircumflex\",\n    \"Ugrave\",\n    \"dotlessi\",\n    \"circumflex\",\n    \"tilde\",\n    \"macron\",\n    \"breve\",\n    \"dotaccent\",\n    \"ring\",\n    \"cedilla\",\n    \"hungarumlaut\",\n    \"ogonek\",\n    \"caron\",\n    \"Lslash\",\n    \"lslash\",\n    \"Scaron\",\n    \"scaron\",\n    \"Zcaron\",\n    \"zcaron\",\n    \"brokenbar\",\n    \"Eth\",\n    \"eth\",\n    \"Yacute\",\n    \"yacute\",\n    \"Thorn\",\n    \"thorn\",\n    \"minus\",\n    \"multiply\",\n    \"onesuperior\",\n    \"twosuperior\",\n    \"threesuperior\",\n    \"onehalf\",\n    \"onequarter\",\n    \"threequarters\",\n    \"franc\",\n    \"Gbreve\",\n    \"gbreve\",\n    \"Idotaccent\",\n    \"Scedilla\",\n    \"scedilla\",\n    \"Cacute\",\n    \"cacute\",\n    \"Ccaron\",\n    \"ccaron\",\n    \"dcroat\"\n];\nvar _class;\nlet $e1a34a692932ba79$export$2e2bcd8739ae039 = (_class = class $e1a34a692932ba79$export$2e2bcd8739ae039 {\n    constructor(id, codePoints, font){\n        /**\n     * The glyph id in the font\n     * @type {number}\n     */ this.id = id;\n        /**\n     * An array of unicode code points that are represented by this glyph.\n     * There can be multiple code points in the case of ligatures and other glyphs\n     * that represent multiple visual characters.\n     * @type {number[]}\n     */ this.codePoints = codePoints;\n        this._font = font;\n        // TODO: get this info from GDEF if available\n        this.isMark = this.codePoints.length > 0 && this.codePoints.every(unicode_properties__WEBPACK_IMPORTED_MODULE_6__[\"default\"].isMark);\n        this.isLigature = this.codePoints.length > 1;\n    }\n    _getPath() {\n        return new $af5e1fcddefe17a2$export$2e2bcd8739ae039();\n    }\n    _getCBox() {\n        return this.path.cbox;\n    }\n    _getBBox() {\n        return this.path.bbox;\n    }\n    _getTableMetrics(table) {\n        if (this.id < table.metrics.length) return table.metrics.get(this.id);\n        let metric = table.metrics.get(table.metrics.length - 1);\n        let res = {\n            advance: metric ? metric.advance : 0,\n            bearing: table.bearings.get(this.id - table.metrics.length) || 0\n        };\n        return res;\n    }\n    _getMetrics(cbox) {\n        if (this._metrics) return this._metrics;\n        let { advance: advanceWidth, bearing: leftBearing } = this._getTableMetrics(this._font.hmtx);\n        // For vertical metrics, use vmtx if available, or fall back to global data from OS/2 or hhea\n        if (this._font.vmtx) var { advance: advanceHeight, bearing: topBearing } = this._getTableMetrics(this._font.vmtx);\n        else {\n            let os2;\n            if (typeof cbox === \"undefined\" || cbox === null) ({ cbox: cbox } = this);\n            if ((os2 = this._font[\"OS/2\"]) && os2.version > 0) {\n                var advanceHeight = Math.abs(os2.typoAscender - os2.typoDescender);\n                var topBearing = os2.typoAscender - cbox.maxY;\n            } else {\n                let { hhea: hhea } = this._font;\n                var advanceHeight = Math.abs(hhea.ascent - hhea.descent);\n                var topBearing = hhea.ascent - cbox.maxY;\n            }\n        }\n        if (this._font._variationProcessor && this._font.HVAR) advanceWidth += this._font._variationProcessor.getAdvanceAdjustment(this.id, this._font.HVAR);\n        return this._metrics = {\n            advanceWidth: advanceWidth,\n            advanceHeight: advanceHeight,\n            leftBearing: leftBearing,\n            topBearing: topBearing\n        };\n    }\n    /**\n   * The glyph’s control box.\n   * This is often the same as the bounding box, but is faster to compute.\n   * Because of the way bezier curves are defined, some of the control points\n   * can be outside of the bounding box. Where `bbox` takes this into account,\n   * `cbox` does not. Thus, cbox is less accurate, but faster to compute.\n   * See [here](http://www.freetype.org/freetype2/docs/glyphs/glyphs-6.html#section-2)\n   * for a more detailed description.\n   *\n   * @type {BBox}\n   */ get cbox() {\n        return this._getCBox();\n    }\n    /**\n   * The glyph’s bounding box, i.e. the rectangle that encloses the\n   * glyph outline as tightly as possible.\n   * @type {BBox}\n   */ get bbox() {\n        return this._getBBox();\n    }\n    /**\n   * A vector Path object representing the glyph outline.\n   * @type {Path}\n   */ get path() {\n        // Cache the path so we only decode it once\n        // Decoding is actually performed by subclasses\n        return this._getPath();\n    }\n    /**\n   * Returns a path scaled to the given font size.\n   * @param {number} size\n   * @return {Path}\n   */ getScaledPath(size) {\n        let scale = 1 / this._font.unitsPerEm * size;\n        return this.path.scale(scale);\n    }\n    /**\n   * The glyph's advance width.\n   * @type {number}\n   */ get advanceWidth() {\n        return this._getMetrics().advanceWidth;\n    }\n    /**\n   * The glyph's advance height.\n   * @type {number}\n   */ get advanceHeight() {\n        return this._getMetrics().advanceHeight;\n    }\n    get ligatureCaretPositions() {}\n    _getName() {\n        let { post: post } = this._font;\n        if (!post) return null;\n        switch(post.version){\n            case 1:\n                return $c55d37cb83b3ceea$export$2e2bcd8739ae039[this.id];\n            case 2:\n                let id = post.glyphNameIndex[this.id];\n                if (id < $c55d37cb83b3ceea$export$2e2bcd8739ae039.length) return $c55d37cb83b3ceea$export$2e2bcd8739ae039[id];\n                return post.names[id - $c55d37cb83b3ceea$export$2e2bcd8739ae039.length];\n            case 2.5:\n                return $c55d37cb83b3ceea$export$2e2bcd8739ae039[this.id + post.offsets[this.id]];\n            case 4:\n                return String.fromCharCode(post.map[this.id]);\n        }\n    }\n    /**\n   * The glyph's name\n   * @type {string}\n   */ get name() {\n        return this._getName();\n    }\n    /**\n   * Renders the glyph to the given graphics context, at the specified font size.\n   * @param {CanvasRenderingContext2d} ctx\n   * @param {number} size\n   */ render(ctx, size) {\n        ctx.save();\n        let scale = 1 / this._font.head.unitsPerEm * size;\n        ctx.scale(scale, scale);\n        let fn = this.path.toFunction();\n        fn(ctx);\n        ctx.fill();\n        ctx.restore();\n    }\n}, (0,_swc_helpers__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(_class.prototype, \"cbox\", [\n    $df9bc573962369ff$export$69a3209f1a06c04d\n], Object.getOwnPropertyDescriptor(_class.prototype, \"cbox\"), _class.prototype), (0,_swc_helpers__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(_class.prototype, \"bbox\", [\n    $df9bc573962369ff$export$69a3209f1a06c04d\n], Object.getOwnPropertyDescriptor(_class.prototype, \"bbox\"), _class.prototype), (0,_swc_helpers__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(_class.prototype, \"path\", [\n    $df9bc573962369ff$export$69a3209f1a06c04d\n], Object.getOwnPropertyDescriptor(_class.prototype, \"path\"), _class.prototype), (0,_swc_helpers__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(_class.prototype, \"advanceWidth\", [\n    $df9bc573962369ff$export$69a3209f1a06c04d\n], Object.getOwnPropertyDescriptor(_class.prototype, \"advanceWidth\"), _class.prototype), (0,_swc_helpers__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(_class.prototype, \"advanceHeight\", [\n    $df9bc573962369ff$export$69a3209f1a06c04d\n], Object.getOwnPropertyDescriptor(_class.prototype, \"advanceHeight\"), _class.prototype), (0,_swc_helpers__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(_class.prototype, \"name\", [\n    $df9bc573962369ff$export$69a3209f1a06c04d\n], Object.getOwnPropertyDescriptor(_class.prototype, \"name\"), _class.prototype), _class);\n// The header for both simple and composite glyphs\nlet $e20fdd09923e4c19$var$GlyfHeader = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    numberOfContours: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    xMin: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    yMin: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    xMax: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    yMax: restructure__WEBPACK_IMPORTED_MODULE_0__.int16\n});\n// Flags for simple glyphs\nconst $e20fdd09923e4c19$var$ON_CURVE = 1;\nconst $e20fdd09923e4c19$var$X_SHORT_VECTOR = 2;\nconst $e20fdd09923e4c19$var$Y_SHORT_VECTOR = 4;\nconst $e20fdd09923e4c19$var$REPEAT = 8;\nconst $e20fdd09923e4c19$var$SAME_X = 16;\nconst $e20fdd09923e4c19$var$SAME_Y = 32;\n// Flags for composite glyphs\nconst $e20fdd09923e4c19$var$ARG_1_AND_2_ARE_WORDS = 1;\nconst $e20fdd09923e4c19$var$ARGS_ARE_XY_VALUES = 2;\nconst $e20fdd09923e4c19$var$ROUND_XY_TO_GRID = 4;\nconst $e20fdd09923e4c19$var$WE_HAVE_A_SCALE = 8;\nconst $e20fdd09923e4c19$var$MORE_COMPONENTS = 32;\nconst $e20fdd09923e4c19$var$WE_HAVE_AN_X_AND_Y_SCALE = 64;\nconst $e20fdd09923e4c19$var$WE_HAVE_A_TWO_BY_TWO = 128;\nconst $e20fdd09923e4c19$var$WE_HAVE_INSTRUCTIONS = 256;\nconst $e20fdd09923e4c19$var$USE_MY_METRICS = 512;\nconst $e20fdd09923e4c19$var$OVERLAP_COMPOUND = 1024;\nconst $e20fdd09923e4c19$var$SCALED_COMPONENT_OFFSET = 2048;\nconst $e20fdd09923e4c19$var$UNSCALED_COMPONENT_OFFSET = 4096;\nclass $e20fdd09923e4c19$export$baf26146a414f24a {\n    constructor(onCurve, endContour, x = 0, y = 0){\n        this.onCurve = onCurve;\n        this.endContour = endContour;\n        this.x = x;\n        this.y = y;\n    }\n    copy() {\n        return new $e20fdd09923e4c19$export$baf26146a414f24a(this.onCurve, this.endContour, this.x, this.y);\n    }\n}\n// Represents a component in a composite glyph\nclass $e20fdd09923e4c19$var$Component {\n    constructor(glyphID, dx, dy){\n        this.glyphID = glyphID;\n        this.dx = dx;\n        this.dy = dy;\n        this.pos = 0;\n        this.scaleX = this.scaleY = 1;\n        this.scale01 = this.scale10 = 0;\n    }\n}\nclass $e20fdd09923e4c19$export$2e2bcd8739ae039 extends $e1a34a692932ba79$export$2e2bcd8739ae039 {\n    // Parses just the glyph header and returns the bounding box\n    _getCBox(internal) {\n        // We need to decode the glyph if variation processing is requested,\n        // so it's easier just to recompute the path's cbox after decoding.\n        if (this._font._variationProcessor && !internal) return this.path.cbox;\n        let stream = this._font._getTableStream(\"glyf\");\n        stream.pos += this._font.loca.offsets[this.id];\n        let glyph = $e20fdd09923e4c19$var$GlyfHeader.decode(stream);\n        let cbox = new $fcb46e14b01ea01f$export$2e2bcd8739ae039(glyph.xMin, glyph.yMin, glyph.xMax, glyph.yMax);\n        return Object.freeze(cbox);\n    }\n    // Parses a single glyph coordinate\n    _parseGlyphCoord(stream, prev, short, same) {\n        if (short) {\n            var val = stream.readUInt8();\n            if (!same) val = -val;\n            val += prev;\n        } else if (same) var val = prev;\n        else var val = prev + stream.readInt16BE();\n        return val;\n    }\n    // Decodes the glyph data into points for simple glyphs,\n    // or components for composite glyphs\n    _decode() {\n        let glyfPos = this._font.loca.offsets[this.id];\n        let nextPos = this._font.loca.offsets[this.id + 1];\n        // Nothing to do if there is no data for this glyph\n        if (glyfPos === nextPos) return null;\n        let stream = this._font._getTableStream(\"glyf\");\n        stream.pos += glyfPos;\n        let startPos = stream.pos;\n        let glyph = $e20fdd09923e4c19$var$GlyfHeader.decode(stream);\n        if (glyph.numberOfContours > 0) this._decodeSimple(glyph, stream);\n        else if (glyph.numberOfContours < 0) this._decodeComposite(glyph, stream, startPos);\n        return glyph;\n    }\n    _decodeSimple(glyph, stream) {\n        // this is a simple glyph\n        glyph.points = [];\n        let endPtsOfContours = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, glyph.numberOfContours).decode(stream);\n        glyph.instructions = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16).decode(stream);\n        let flags = [];\n        let numCoords = endPtsOfContours[endPtsOfContours.length - 1] + 1;\n        while(flags.length < numCoords){\n            var flag = stream.readUInt8();\n            flags.push(flag);\n            // check for repeat flag\n            if (flag & $e20fdd09923e4c19$var$REPEAT) {\n                let count = stream.readUInt8();\n                for(let j = 0; j < count; j++)flags.push(flag);\n            }\n        }\n        for(var i = 0; i < flags.length; i++){\n            var flag = flags[i];\n            let point = new $e20fdd09923e4c19$export$baf26146a414f24a(!!(flag & $e20fdd09923e4c19$var$ON_CURVE), endPtsOfContours.indexOf(i) >= 0, 0, 0);\n            glyph.points.push(point);\n        }\n        let px = 0;\n        for(var i = 0; i < flags.length; i++){\n            var flag = flags[i];\n            glyph.points[i].x = px = this._parseGlyphCoord(stream, px, flag & $e20fdd09923e4c19$var$X_SHORT_VECTOR, flag & $e20fdd09923e4c19$var$SAME_X);\n        }\n        let py = 0;\n        for(var i = 0; i < flags.length; i++){\n            var flag = flags[i];\n            glyph.points[i].y = py = this._parseGlyphCoord(stream, py, flag & $e20fdd09923e4c19$var$Y_SHORT_VECTOR, flag & $e20fdd09923e4c19$var$SAME_Y);\n        }\n        if (this._font._variationProcessor) {\n            let points = glyph.points.slice();\n            points.push(...this._getPhantomPoints(glyph));\n            this._font._variationProcessor.transformPoints(this.id, points);\n            glyph.phantomPoints = points.slice(-4);\n        }\n        return;\n    }\n    _decodeComposite(glyph, stream, offset = 0) {\n        // this is a composite glyph\n        glyph.components = [];\n        let haveInstructions = false;\n        let flags = $e20fdd09923e4c19$var$MORE_COMPONENTS;\n        while(flags & $e20fdd09923e4c19$var$MORE_COMPONENTS){\n            flags = stream.readUInt16BE();\n            let gPos = stream.pos - offset;\n            let glyphID = stream.readUInt16BE();\n            if (!haveInstructions) haveInstructions = (flags & $e20fdd09923e4c19$var$WE_HAVE_INSTRUCTIONS) !== 0;\n            if (flags & $e20fdd09923e4c19$var$ARG_1_AND_2_ARE_WORDS) {\n                var dx = stream.readInt16BE();\n                var dy = stream.readInt16BE();\n            } else {\n                var dx = stream.readInt8();\n                var dy = stream.readInt8();\n            }\n            var component = new $e20fdd09923e4c19$var$Component(glyphID, dx, dy);\n            component.pos = gPos;\n            if (flags & $e20fdd09923e4c19$var$WE_HAVE_A_SCALE) component.scaleX = component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n            else if (flags & $e20fdd09923e4c19$var$WE_HAVE_AN_X_AND_Y_SCALE) {\n                component.scaleX = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n                component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n            } else if (flags & $e20fdd09923e4c19$var$WE_HAVE_A_TWO_BY_TWO) {\n                component.scaleX = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n                component.scale01 = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n                component.scale10 = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n                component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n            }\n            glyph.components.push(component);\n        }\n        if (this._font._variationProcessor) {\n            let points = [];\n            for(let j = 0; j < glyph.components.length; j++){\n                var component = glyph.components[j];\n                points.push(new $e20fdd09923e4c19$export$baf26146a414f24a(true, true, component.dx, component.dy));\n            }\n            points.push(...this._getPhantomPoints(glyph));\n            this._font._variationProcessor.transformPoints(this.id, points);\n            glyph.phantomPoints = points.splice(-4, 4);\n            for(let i = 0; i < points.length; i++){\n                let point = points[i];\n                glyph.components[i].dx = point.x;\n                glyph.components[i].dy = point.y;\n            }\n        }\n        return haveInstructions;\n    }\n    _getPhantomPoints(glyph) {\n        let cbox = this._getCBox(true);\n        if (this._metrics == null) this._metrics = $e1a34a692932ba79$export$2e2bcd8739ae039.prototype._getMetrics.call(this, cbox);\n        let { advanceWidth: advanceWidth, advanceHeight: advanceHeight, leftBearing: leftBearing, topBearing: topBearing } = this._metrics;\n        return [\n            new $e20fdd09923e4c19$export$baf26146a414f24a(false, true, glyph.xMin - leftBearing, 0),\n            new $e20fdd09923e4c19$export$baf26146a414f24a(false, true, glyph.xMin - leftBearing + advanceWidth, 0),\n            new $e20fdd09923e4c19$export$baf26146a414f24a(false, true, 0, glyph.yMax + topBearing),\n            new $e20fdd09923e4c19$export$baf26146a414f24a(false, true, 0, glyph.yMax + topBearing + advanceHeight)\n        ];\n    }\n    // Decodes font data, resolves composite glyphs, and returns an array of contours\n    _getContours() {\n        let glyph = this._decode();\n        if (!glyph) return [];\n        let points = [];\n        if (glyph.numberOfContours < 0) for (let component of glyph.components){\n            let contours = this._font.getGlyph(component.glyphID)._getContours();\n            for(let i = 0; i < contours.length; i++){\n                let contour = contours[i];\n                for(let j = 0; j < contour.length; j++){\n                    let point = contour[j];\n                    let x = point.x * component.scaleX + point.y * component.scale01 + component.dx;\n                    let y = point.y * component.scaleY + point.x * component.scale10 + component.dy;\n                    points.push(new $e20fdd09923e4c19$export$baf26146a414f24a(point.onCurve, point.endContour, x, y));\n                }\n            }\n        }\n        else points = glyph.points || [];\n        // Recompute and cache metrics if we performed variation processing, and don't have an HVAR table\n        if (glyph.phantomPoints && !this._font.directory.tables.HVAR) {\n            this._metrics.advanceWidth = glyph.phantomPoints[1].x - glyph.phantomPoints[0].x;\n            this._metrics.advanceHeight = glyph.phantomPoints[3].y - glyph.phantomPoints[2].y;\n            this._metrics.leftBearing = glyph.xMin - glyph.phantomPoints[0].x;\n            this._metrics.topBearing = glyph.phantomPoints[2].y - glyph.yMax;\n        }\n        let contours = [];\n        let cur = [];\n        for(let k = 0; k < points.length; k++){\n            var point = points[k];\n            cur.push(point);\n            if (point.endContour) {\n                contours.push(cur);\n                cur = [];\n            }\n        }\n        return contours;\n    }\n    _getMetrics() {\n        if (this._metrics) return this._metrics;\n        let cbox = this._getCBox(true);\n        super._getMetrics(cbox);\n        if (this._font._variationProcessor && !this._font.HVAR) this.path;\n        return this._metrics;\n    }\n    // Converts contours to a Path object that can be rendered\n    _getPath() {\n        let contours = this._getContours();\n        let path = new $af5e1fcddefe17a2$export$2e2bcd8739ae039;\n        for(let i = 0; i < contours.length; i++){\n            let contour = contours[i];\n            let firstPt = contour[0];\n            let lastPt = contour[contour.length - 1];\n            let start = 0;\n            if (firstPt.onCurve) {\n                // The first point will be consumed by the moveTo command, so skip in the loop\n                var curvePt = null;\n                start = 1;\n            } else {\n                if (lastPt.onCurve) firstPt = lastPt;\n                else firstPt = new $e20fdd09923e4c19$export$baf26146a414f24a(false, false, (firstPt.x + lastPt.x) / 2, (firstPt.y + lastPt.y) / 2);\n                var curvePt = firstPt;\n            }\n            path.moveTo(firstPt.x, firstPt.y);\n            for(let j = start; j < contour.length; j++){\n                let pt = contour[j];\n                let prevPt = j === 0 ? firstPt : contour[j - 1];\n                if (prevPt.onCurve && pt.onCurve) path.lineTo(pt.x, pt.y);\n                else if (prevPt.onCurve && !pt.onCurve) var curvePt = pt;\n                else if (!prevPt.onCurve && !pt.onCurve) {\n                    let midX = (prevPt.x + pt.x) / 2;\n                    let midY = (prevPt.y + pt.y) / 2;\n                    path.quadraticCurveTo(prevPt.x, prevPt.y, midX, midY);\n                    var curvePt = pt;\n                } else if (!prevPt.onCurve && pt.onCurve) {\n                    path.quadraticCurveTo(curvePt.x, curvePt.y, pt.x, pt.y);\n                    var curvePt = null;\n                } else throw new Error(\"Unknown TTF path state\");\n            }\n            // Connect the first and last points\n            if (curvePt) path.quadraticCurveTo(curvePt.x, curvePt.y, firstPt.x, firstPt.y);\n            path.closePath();\n        }\n        return path;\n    }\n    constructor(...args){\n        super(...args);\n        this.type = \"TTF\";\n    }\n}\nclass $efcf21464e1e0f88$export$2e2bcd8739ae039 extends $e1a34a692932ba79$export$2e2bcd8739ae039 {\n    _getName() {\n        if (this._font.CFF2) return super._getName();\n        return this._font[\"CFF \"].getGlyphName(this.id);\n    }\n    bias(s) {\n        if (s.length < 1240) return 107;\n        else if (s.length < 33900) return 1131;\n        else return 32768;\n    }\n    _getPath() {\n        let cff = this._font.CFF2 || this._font[\"CFF \"];\n        let { stream: stream } = cff;\n        let str = cff.topDict.CharStrings[this.id];\n        let end = str.offset + str.length;\n        stream.pos = str.offset;\n        let path = new $af5e1fcddefe17a2$export$2e2bcd8739ae039;\n        let stack = [];\n        let trans = [];\n        let width = null;\n        let nStems = 0;\n        let x1 = 0, y1 = 0;\n        let usedGsubrs;\n        let usedSubrs;\n        let open = false;\n        this._usedGsubrs = usedGsubrs = {};\n        this._usedSubrs = usedSubrs = {};\n        let gsubrs = cff.globalSubrIndex || [];\n        let gsubrsBias = this.bias(gsubrs);\n        let privateDict = cff.privateDictForGlyph(this.id) || {};\n        let subrs = privateDict.Subrs || [];\n        let subrsBias = this.bias(subrs);\n        let vstore = cff.topDict.vstore && cff.topDict.vstore.itemVariationStore;\n        let vsindex = privateDict.vsindex;\n        let variationProcessor = this._font._variationProcessor;\n        function checkWidth() {\n            if (width == null) width = stack.shift() + privateDict.nominalWidthX;\n        }\n        function parseStems() {\n            if (stack.length % 2 !== 0) checkWidth();\n            nStems += stack.length >> 1;\n            return stack.length = 0;\n        }\n        function moveTo(x, y) {\n            if (open) path.closePath();\n            path.moveTo(x, y);\n            open = true;\n        }\n        let parse = function() {\n            while(stream.pos < end){\n                let op = stream.readUInt8();\n                if (op < 32) {\n                    let index, subr, phase;\n                    switch(op){\n                        case 1:\n                        case 3:\n                        case 18:\n                        case 23:\n                            parseStems();\n                            break;\n                        case 4:\n                            if (stack.length > 1) checkWidth();\n                            y1 += stack.shift();\n                            moveTo(x1, y1);\n                            break;\n                        case 5:\n                            while(stack.length >= 2){\n                                x1 += stack.shift();\n                                y1 += stack.shift();\n                                path.lineTo(x1, y1);\n                            }\n                            break;\n                        case 6:\n                        case 7:\n                            phase = op === 6;\n                            while(stack.length >= 1){\n                                if (phase) x1 += stack.shift();\n                                else y1 += stack.shift();\n                                path.lineTo(x1, y1);\n                                phase = !phase;\n                            }\n                            break;\n                        case 8:\n                            while(stack.length > 0){\n                                var c1x = x1 + stack.shift();\n                                var c1y = y1 + stack.shift();\n                                var c2x = c1x + stack.shift();\n                                var c2y = c1y + stack.shift();\n                                x1 = c2x + stack.shift();\n                                y1 = c2y + stack.shift();\n                                path.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);\n                            }\n                            break;\n                        case 10:\n                            index = stack.pop() + subrsBias;\n                            subr = subrs[index];\n                            if (subr) {\n                                usedSubrs[index] = true;\n                                var p = stream.pos;\n                                var e = end;\n                                stream.pos = subr.offset;\n                                end = subr.offset + subr.length;\n                                parse();\n                                stream.pos = p;\n                                end = e;\n                            }\n                            break;\n                        case 11:\n                            if (cff.version >= 2) break;\n                            return;\n                        case 14:\n                            if (cff.version >= 2) break;\n                            if (stack.length > 0) checkWidth();\n                            if (open) {\n                                path.closePath();\n                                open = false;\n                            }\n                            break;\n                        case 15:\n                            if (cff.version < 2) throw new Error(\"vsindex operator not supported in CFF v1\");\n                            vsindex = stack.pop();\n                            break;\n                        case 16:\n                            {\n                                if (cff.version < 2) throw new Error(\"blend operator not supported in CFF v1\");\n                                if (!variationProcessor) throw new Error(\"blend operator in non-variation font\");\n                                let blendVector = variationProcessor.getBlendVector(vstore, vsindex);\n                                let numBlends = stack.pop();\n                                let numOperands = numBlends * blendVector.length;\n                                let delta = stack.length - numOperands;\n                                let base = delta - numBlends;\n                                for(let i = 0; i < numBlends; i++){\n                                    let sum = stack[base + i];\n                                    for(let j = 0; j < blendVector.length; j++)sum += blendVector[j] * stack[delta++];\n                                    stack[base + i] = sum;\n                                }\n                                while(numOperands--)stack.pop();\n                                break;\n                            }\n                        case 19:\n                        case 20:\n                            parseStems();\n                            stream.pos += nStems + 7 >> 3;\n                            break;\n                        case 21:\n                            if (stack.length > 2) checkWidth();\n                            x1 += stack.shift();\n                            y1 += stack.shift();\n                            moveTo(x1, y1);\n                            break;\n                        case 22:\n                            if (stack.length > 1) checkWidth();\n                            x1 += stack.shift();\n                            moveTo(x1, y1);\n                            break;\n                        case 24:\n                            while(stack.length >= 8){\n                                var c1x = x1 + stack.shift();\n                                var c1y = y1 + stack.shift();\n                                var c2x = c1x + stack.shift();\n                                var c2y = c1y + stack.shift();\n                                x1 = c2x + stack.shift();\n                                y1 = c2y + stack.shift();\n                                path.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);\n                            }\n                            x1 += stack.shift();\n                            y1 += stack.shift();\n                            path.lineTo(x1, y1);\n                            break;\n                        case 25:\n                            while(stack.length >= 8){\n                                x1 += stack.shift();\n                                y1 += stack.shift();\n                                path.lineTo(x1, y1);\n                            }\n                            var c1x = x1 + stack.shift();\n                            var c1y = y1 + stack.shift();\n                            var c2x = c1x + stack.shift();\n                            var c2y = c1y + stack.shift();\n                            x1 = c2x + stack.shift();\n                            y1 = c2y + stack.shift();\n                            path.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);\n                            break;\n                        case 26:\n                            if (stack.length % 2) x1 += stack.shift();\n                            while(stack.length >= 4){\n                                c1x = x1;\n                                c1y = y1 + stack.shift();\n                                c2x = c1x + stack.shift();\n                                c2y = c1y + stack.shift();\n                                x1 = c2x;\n                                y1 = c2y + stack.shift();\n                                path.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);\n                            }\n                            break;\n                        case 27:\n                            if (stack.length % 2) y1 += stack.shift();\n                            while(stack.length >= 4){\n                                c1x = x1 + stack.shift();\n                                c1y = y1;\n                                c2x = c1x + stack.shift();\n                                c2y = c1y + stack.shift();\n                                x1 = c2x + stack.shift();\n                                y1 = c2y;\n                                path.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);\n                            }\n                            break;\n                        case 28:\n                            stack.push(stream.readInt16BE());\n                            break;\n                        case 29:\n                            index = stack.pop() + gsubrsBias;\n                            subr = gsubrs[index];\n                            if (subr) {\n                                usedGsubrs[index] = true;\n                                var p = stream.pos;\n                                var e = end;\n                                stream.pos = subr.offset;\n                                end = subr.offset + subr.length;\n                                parse();\n                                stream.pos = p;\n                                end = e;\n                            }\n                            break;\n                        case 30:\n                        case 31:\n                            phase = op === 31;\n                            while(stack.length >= 4){\n                                if (phase) {\n                                    c1x = x1 + stack.shift();\n                                    c1y = y1;\n                                    c2x = c1x + stack.shift();\n                                    c2y = c1y + stack.shift();\n                                    y1 = c2y + stack.shift();\n                                    x1 = c2x + (stack.length === 1 ? stack.shift() : 0);\n                                } else {\n                                    c1x = x1;\n                                    c1y = y1 + stack.shift();\n                                    c2x = c1x + stack.shift();\n                                    c2y = c1y + stack.shift();\n                                    x1 = c2x + stack.shift();\n                                    y1 = c2y + (stack.length === 1 ? stack.shift() : 0);\n                                }\n                                path.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);\n                                phase = !phase;\n                            }\n                            break;\n                        case 12:\n                            op = stream.readUInt8();\n                            switch(op){\n                                case 3:\n                                    let a = stack.pop();\n                                    let b = stack.pop();\n                                    stack.push(a && b ? 1 : 0);\n                                    break;\n                                case 4:\n                                    a = stack.pop();\n                                    b = stack.pop();\n                                    stack.push(a || b ? 1 : 0);\n                                    break;\n                                case 5:\n                                    a = stack.pop();\n                                    stack.push(a ? 0 : 1);\n                                    break;\n                                case 9:\n                                    a = stack.pop();\n                                    stack.push(Math.abs(a));\n                                    break;\n                                case 10:\n                                    a = stack.pop();\n                                    b = stack.pop();\n                                    stack.push(a + b);\n                                    break;\n                                case 11:\n                                    a = stack.pop();\n                                    b = stack.pop();\n                                    stack.push(a - b);\n                                    break;\n                                case 12:\n                                    a = stack.pop();\n                                    b = stack.pop();\n                                    stack.push(a / b);\n                                    break;\n                                case 14:\n                                    a = stack.pop();\n                                    stack.push(-a);\n                                    break;\n                                case 15:\n                                    a = stack.pop();\n                                    b = stack.pop();\n                                    stack.push(a === b ? 1 : 0);\n                                    break;\n                                case 18:\n                                    stack.pop();\n                                    break;\n                                case 20:\n                                    let val = stack.pop();\n                                    let idx = stack.pop();\n                                    trans[idx] = val;\n                                    break;\n                                case 21:\n                                    idx = stack.pop();\n                                    stack.push(trans[idx] || 0);\n                                    break;\n                                case 22:\n                                    let s1 = stack.pop();\n                                    let s2 = stack.pop();\n                                    let v1 = stack.pop();\n                                    let v2 = stack.pop();\n                                    stack.push(v1 <= v2 ? s1 : s2);\n                                    break;\n                                case 23:\n                                    stack.push(Math.random());\n                                    break;\n                                case 24:\n                                    a = stack.pop();\n                                    b = stack.pop();\n                                    stack.push(a * b);\n                                    break;\n                                case 26:\n                                    a = stack.pop();\n                                    stack.push(Math.sqrt(a));\n                                    break;\n                                case 27:\n                                    a = stack.pop();\n                                    stack.push(a, a);\n                                    break;\n                                case 28:\n                                    a = stack.pop();\n                                    b = stack.pop();\n                                    stack.push(b, a);\n                                    break;\n                                case 29:\n                                    idx = stack.pop();\n                                    if (idx < 0) idx = 0;\n                                    else if (idx > stack.length - 1) idx = stack.length - 1;\n                                    stack.push(stack[idx]);\n                                    break;\n                                case 30:\n                                    let n = stack.pop();\n                                    let j = stack.pop();\n                                    if (j >= 0) while(j > 0){\n                                        var t = stack[n - 1];\n                                        for(let i = n - 2; i >= 0; i--)stack[i + 1] = stack[i];\n                                        stack[0] = t;\n                                        j--;\n                                    }\n                                    else while(j < 0){\n                                        var t = stack[0];\n                                        for(let i = 0; i <= n; i++)stack[i] = stack[i + 1];\n                                        stack[n - 1] = t;\n                                        j++;\n                                    }\n                                    break;\n                                case 34:\n                                    c1x = x1 + stack.shift();\n                                    c1y = y1;\n                                    c2x = c1x + stack.shift();\n                                    c2y = c1y + stack.shift();\n                                    let c3x = c2x + stack.shift();\n                                    let c3y = c2y;\n                                    let c4x = c3x + stack.shift();\n                                    let c4y = c3y;\n                                    let c5x = c4x + stack.shift();\n                                    let c5y = c4y;\n                                    let c6x = c5x + stack.shift();\n                                    let c6y = c5y;\n                                    x1 = c6x;\n                                    y1 = c6y;\n                                    path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);\n                                    path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);\n                                    break;\n                                case 35:\n                                    let pts = [];\n                                    for(let i = 0; i <= 5; i++){\n                                        x1 += stack.shift();\n                                        y1 += stack.shift();\n                                        pts.push(x1, y1);\n                                    }\n                                    path.bezierCurveTo(...pts.slice(0, 6));\n                                    path.bezierCurveTo(...pts.slice(6));\n                                    stack.shift(); // fd\n                                    break;\n                                case 36:\n                                    c1x = x1 + stack.shift();\n                                    c1y = y1 + stack.shift();\n                                    c2x = c1x + stack.shift();\n                                    c2y = c1y + stack.shift();\n                                    c3x = c2x + stack.shift();\n                                    c3y = c2y;\n                                    c4x = c3x + stack.shift();\n                                    c4y = c3y;\n                                    c5x = c4x + stack.shift();\n                                    c5y = c4y + stack.shift();\n                                    c6x = c5x + stack.shift();\n                                    c6y = c5y;\n                                    x1 = c6x;\n                                    y1 = c6y;\n                                    path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);\n                                    path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);\n                                    break;\n                                case 37:\n                                    let startx = x1;\n                                    let starty = y1;\n                                    pts = [];\n                                    for(let i1 = 0; i1 <= 4; i1++){\n                                        x1 += stack.shift();\n                                        y1 += stack.shift();\n                                        pts.push(x1, y1);\n                                    }\n                                    if (Math.abs(x1 - startx) > Math.abs(y1 - starty)) {\n                                        x1 += stack.shift();\n                                        y1 = starty;\n                                    } else {\n                                        x1 = startx;\n                                        y1 += stack.shift();\n                                    }\n                                    pts.push(x1, y1);\n                                    path.bezierCurveTo(...pts.slice(0, 6));\n                                    path.bezierCurveTo(...pts.slice(6));\n                                    break;\n                                default:\n                                    throw new Error(`Unknown op: 12 ${op}`);\n                            }\n                            break;\n                        default:\n                            throw new Error(`Unknown op: ${op}`);\n                    }\n                } else if (op < 247) stack.push(op - 139);\n                else if (op < 251) {\n                    var b1 = stream.readUInt8();\n                    stack.push((op - 247) * 256 + b1 + 108);\n                } else if (op < 255) {\n                    var b1 = stream.readUInt8();\n                    stack.push(-(op - 251) * 256 - b1 - 108);\n                } else stack.push(stream.readInt32BE() / 65536);\n            }\n        };\n        parse();\n        if (open) path.closePath();\n        return path;\n    }\n    constructor(...args){\n        super(...args);\n        this.type = \"CFF\";\n    }\n}\nlet $df50792647a3d5cf$var$SBIXImage = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    originX: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    originY: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    type: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    data: new restructure__WEBPACK_IMPORTED_MODULE_0__.Buffer((t)=>t.parent.buflen - t._currentOffset)\n});\nclass $df50792647a3d5cf$export$2e2bcd8739ae039 extends $e20fdd09923e4c19$export$2e2bcd8739ae039 {\n    /**\n   * Returns an object representing a glyph image at the given point size.\n   * The object has a data property with a Buffer containing the actual image data,\n   * along with the image type, and origin.\n   *\n   * @param {number} size\n   * @return {object}\n   */ getImageForSize(size) {\n        for(let i = 0; i < this._font.sbix.imageTables.length; i++){\n            var table = this._font.sbix.imageTables[i];\n            if (table.ppem >= size) break;\n        }\n        let offsets = table.imageOffsets;\n        let start = offsets[this.id];\n        let end = offsets[this.id + 1];\n        if (start === end) return null;\n        this._font.stream.pos = start;\n        return $df50792647a3d5cf$var$SBIXImage.decode(this._font.stream, {\n            buflen: end - start\n        });\n    }\n    render(ctx, size) {\n        let img = this.getImageForSize(size);\n        if (img != null) {\n            let scale = size / this._font.unitsPerEm;\n            ctx.image(img.data, {\n                height: size,\n                x: img.originX,\n                y: (this.bbox.minY - img.originY) * scale\n            });\n        }\n        if (this._font.sbix.flags.renderOutlines) super.render(ctx, size);\n    }\n    constructor(...args){\n        super(...args);\n        this.type = \"SBIX\";\n    }\n}\nclass $729b375ce67e8a00$var$COLRLayer {\n    constructor(glyph, color){\n        this.glyph = glyph;\n        this.color = color;\n    }\n}\nclass $729b375ce67e8a00$export$2e2bcd8739ae039 extends $e1a34a692932ba79$export$2e2bcd8739ae039 {\n    _getBBox() {\n        let bbox = new $fcb46e14b01ea01f$export$2e2bcd8739ae039;\n        for(let i = 0; i < this.layers.length; i++){\n            let layer = this.layers[i];\n            let b = layer.glyph.bbox;\n            bbox.addPoint(b.minX, b.minY);\n            bbox.addPoint(b.maxX, b.maxY);\n        }\n        return bbox;\n    }\n    /**\n   * Returns an array of objects containing the glyph and color for\n   * each layer in the composite color glyph.\n   * @type {object[]}\n   */ get layers() {\n        let cpal = this._font.CPAL;\n        let colr = this._font.COLR;\n        let low = 0;\n        let high = colr.baseGlyphRecord.length - 1;\n        while(low <= high){\n            let mid = low + high >> 1;\n            var rec = colr.baseGlyphRecord[mid];\n            if (this.id < rec.gid) high = mid - 1;\n            else if (this.id > rec.gid) low = mid + 1;\n            else {\n                var baseLayer = rec;\n                break;\n            }\n        }\n        // if base glyph not found in COLR table,\n        // default to normal glyph from glyf or CFF\n        if (baseLayer == null) {\n            var g = this._font._getBaseGlyph(this.id);\n            var color = {\n                red: 0,\n                green: 0,\n                blue: 0,\n                alpha: 255\n            };\n            return [\n                new $729b375ce67e8a00$var$COLRLayer(g, color)\n            ];\n        }\n        // otherwise, return an array of all the layers\n        let layers = [];\n        for(let i = baseLayer.firstLayerIndex; i < baseLayer.firstLayerIndex + baseLayer.numLayers; i++){\n            var rec = colr.layerRecords[i];\n            var color = cpal.colorRecords[rec.paletteIndex];\n            var g = this._font._getBaseGlyph(rec.gid);\n            layers.push(new $729b375ce67e8a00$var$COLRLayer(g, color));\n        }\n        return layers;\n    }\n    render(ctx, size) {\n        for (let { glyph: glyph, color: color } of this.layers){\n            ctx.fillColor([\n                color.red,\n                color.green,\n                color.blue\n            ], color.alpha / 255 * 100);\n            glyph.render(ctx, size);\n        }\n        return;\n    }\n    constructor(...args){\n        super(...args);\n        this.type = \"COLR\";\n    }\n}\nconst $62b2d77b45b438f3$var$TUPLES_SHARE_POINT_NUMBERS = 0x8000;\nconst $62b2d77b45b438f3$var$TUPLE_COUNT_MASK = 0x0fff;\nconst $62b2d77b45b438f3$var$EMBEDDED_TUPLE_COORD = 0x8000;\nconst $62b2d77b45b438f3$var$INTERMEDIATE_TUPLE = 0x4000;\nconst $62b2d77b45b438f3$var$PRIVATE_POINT_NUMBERS = 0x2000;\nconst $62b2d77b45b438f3$var$TUPLE_INDEX_MASK = 0x0fff;\nconst $62b2d77b45b438f3$var$POINTS_ARE_WORDS = 0x80;\nconst $62b2d77b45b438f3$var$POINT_RUN_COUNT_MASK = 0x7f;\nconst $62b2d77b45b438f3$var$DELTAS_ARE_ZERO = 0x80;\nconst $62b2d77b45b438f3$var$DELTAS_ARE_WORDS = 0x40;\nconst $62b2d77b45b438f3$var$DELTA_RUN_COUNT_MASK = 0x3f;\nclass $62b2d77b45b438f3$export$2e2bcd8739ae039 {\n    constructor(font, coords){\n        this.font = font;\n        this.normalizedCoords = this.normalizeCoords(coords);\n        this.blendVectors = new Map;\n    }\n    normalizeCoords(coords) {\n        // the default mapping is linear along each axis, in two segments:\n        // from the minValue to defaultValue, and from defaultValue to maxValue.\n        let normalized = [];\n        for(var i = 0; i < this.font.fvar.axis.length; i++){\n            let axis = this.font.fvar.axis[i];\n            if (coords[i] < axis.defaultValue) normalized.push((coords[i] - axis.defaultValue + Number.EPSILON) / (axis.defaultValue - axis.minValue + Number.EPSILON));\n            else normalized.push((coords[i] - axis.defaultValue + Number.EPSILON) / (axis.maxValue - axis.defaultValue + Number.EPSILON));\n        }\n        // if there is an avar table, the normalized value is calculated\n        // by interpolating between the two nearest mapped values.\n        if (this.font.avar) for(var i = 0; i < this.font.avar.segment.length; i++){\n            let segment = this.font.avar.segment[i];\n            for(let j = 0; j < segment.correspondence.length; j++){\n                let pair = segment.correspondence[j];\n                if (j >= 1 && normalized[i] < pair.fromCoord) {\n                    let prev = segment.correspondence[j - 1];\n                    normalized[i] = ((normalized[i] - prev.fromCoord) * (pair.toCoord - prev.toCoord) + Number.EPSILON) / (pair.fromCoord - prev.fromCoord + Number.EPSILON) + prev.toCoord;\n                    break;\n                }\n            }\n        }\n        return normalized;\n    }\n    transformPoints(gid, glyphPoints) {\n        if (!this.font.fvar || !this.font.gvar) return;\n        let { gvar: gvar } = this.font;\n        if (gid >= gvar.glyphCount) return;\n        let offset = gvar.offsets[gid];\n        if (offset === gvar.offsets[gid + 1]) return;\n        // Read the gvar data for this glyph\n        let { stream: stream } = this.font;\n        stream.pos = offset;\n        if (stream.pos >= stream.length) return;\n        let tupleCount = stream.readUInt16BE();\n        let offsetToData = offset + stream.readUInt16BE();\n        if (tupleCount & $62b2d77b45b438f3$var$TUPLES_SHARE_POINT_NUMBERS) {\n            var here = stream.pos;\n            stream.pos = offsetToData;\n            var sharedPoints = this.decodePoints();\n            offsetToData = stream.pos;\n            stream.pos = here;\n        }\n        let origPoints = glyphPoints.map((pt)=>pt.copy());\n        tupleCount &= $62b2d77b45b438f3$var$TUPLE_COUNT_MASK;\n        for(let i = 0; i < tupleCount; i++){\n            let tupleDataSize = stream.readUInt16BE();\n            let tupleIndex = stream.readUInt16BE();\n            if (tupleIndex & $62b2d77b45b438f3$var$EMBEDDED_TUPLE_COORD) {\n                var tupleCoords = [];\n                for(let a = 0; a < gvar.axisCount; a++)tupleCoords.push(stream.readInt16BE() / 16384);\n            } else {\n                if ((tupleIndex & $62b2d77b45b438f3$var$TUPLE_INDEX_MASK) >= gvar.globalCoordCount) throw new Error(\"Invalid gvar table\");\n                var tupleCoords = gvar.globalCoords[tupleIndex & $62b2d77b45b438f3$var$TUPLE_INDEX_MASK];\n            }\n            if (tupleIndex & $62b2d77b45b438f3$var$INTERMEDIATE_TUPLE) {\n                var startCoords = [];\n                for(let a = 0; a < gvar.axisCount; a++)startCoords.push(stream.readInt16BE() / 16384);\n                var endCoords = [];\n                for(let a1 = 0; a1 < gvar.axisCount; a1++)endCoords.push(stream.readInt16BE() / 16384);\n            }\n            // Get the factor at which to apply this tuple\n            let factor = this.tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords);\n            if (factor === 0) {\n                offsetToData += tupleDataSize;\n                continue;\n            }\n            var here = stream.pos;\n            stream.pos = offsetToData;\n            if (tupleIndex & $62b2d77b45b438f3$var$PRIVATE_POINT_NUMBERS) var points = this.decodePoints();\n            else var points = sharedPoints;\n            // points.length = 0 means there are deltas for all points\n            let nPoints = points.length === 0 ? glyphPoints.length : points.length;\n            let xDeltas = this.decodeDeltas(nPoints);\n            let yDeltas = this.decodeDeltas(nPoints);\n            if (points.length === 0) for(let i = 0; i < glyphPoints.length; i++){\n                var point = glyphPoints[i];\n                point.x += Math.round(xDeltas[i] * factor);\n                point.y += Math.round(yDeltas[i] * factor);\n            }\n            else {\n                let outPoints = origPoints.map((pt)=>pt.copy());\n                let hasDelta = glyphPoints.map(()=>false);\n                for(let i = 0; i < points.length; i++){\n                    let idx = points[i];\n                    if (idx < glyphPoints.length) {\n                        let point = outPoints[idx];\n                        hasDelta[idx] = true;\n                        point.x += Math.round(xDeltas[i] * factor);\n                        point.y += Math.round(yDeltas[i] * factor);\n                    }\n                }\n                this.interpolateMissingDeltas(outPoints, origPoints, hasDelta);\n                for(let i1 = 0; i1 < glyphPoints.length; i1++){\n                    let deltaX = outPoints[i1].x - origPoints[i1].x;\n                    let deltaY = outPoints[i1].y - origPoints[i1].y;\n                    glyphPoints[i1].x += deltaX;\n                    glyphPoints[i1].y += deltaY;\n                }\n            }\n            offsetToData += tupleDataSize;\n            stream.pos = here;\n        }\n    }\n    decodePoints() {\n        let stream = this.font.stream;\n        let count = stream.readUInt8();\n        if (count & $62b2d77b45b438f3$var$POINTS_ARE_WORDS) count = (count & $62b2d77b45b438f3$var$POINT_RUN_COUNT_MASK) << 8 | stream.readUInt8();\n        let points = new Uint16Array(count);\n        let i = 0;\n        let point = 0;\n        while(i < count){\n            let run = stream.readUInt8();\n            let runCount = (run & $62b2d77b45b438f3$var$POINT_RUN_COUNT_MASK) + 1;\n            let fn = run & $62b2d77b45b438f3$var$POINTS_ARE_WORDS ? stream.readUInt16 : stream.readUInt8;\n            for(let j = 0; j < runCount && i < count; j++){\n                point += fn.call(stream);\n                points[i++] = point;\n            }\n        }\n        return points;\n    }\n    decodeDeltas(count) {\n        let stream = this.font.stream;\n        let i = 0;\n        let deltas = new Int16Array(count);\n        while(i < count){\n            let run = stream.readUInt8();\n            let runCount = (run & $62b2d77b45b438f3$var$DELTA_RUN_COUNT_MASK) + 1;\n            if (run & $62b2d77b45b438f3$var$DELTAS_ARE_ZERO) i += runCount;\n            else {\n                let fn = run & $62b2d77b45b438f3$var$DELTAS_ARE_WORDS ? stream.readInt16BE : stream.readInt8;\n                for(let j = 0; j < runCount && i < count; j++)deltas[i++] = fn.call(stream);\n            }\n        }\n        return deltas;\n    }\n    tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords) {\n        let normalized = this.normalizedCoords;\n        let { gvar: gvar } = this.font;\n        let factor = 1;\n        for(let i = 0; i < gvar.axisCount; i++){\n            if (tupleCoords[i] === 0) continue;\n            if (normalized[i] === 0) return 0;\n            if ((tupleIndex & $62b2d77b45b438f3$var$INTERMEDIATE_TUPLE) === 0) {\n                if (normalized[i] < Math.min(0, tupleCoords[i]) || normalized[i] > Math.max(0, tupleCoords[i])) return 0;\n                factor = (factor * normalized[i] + Number.EPSILON) / (tupleCoords[i] + Number.EPSILON);\n            } else {\n                if (normalized[i] < startCoords[i] || normalized[i] > endCoords[i]) return 0;\n                else if (normalized[i] < tupleCoords[i]) factor = factor * (normalized[i] - startCoords[i] + Number.EPSILON) / (tupleCoords[i] - startCoords[i] + Number.EPSILON);\n                else factor = factor * (endCoords[i] - normalized[i] + Number.EPSILON) / (endCoords[i] - tupleCoords[i] + Number.EPSILON);\n            }\n        }\n        return factor;\n    }\n    // Interpolates points without delta values.\n    // Needed for the Ø and Q glyphs in Skia.\n    // Algorithm from Freetype.\n    interpolateMissingDeltas(points, inPoints, hasDelta) {\n        if (points.length === 0) return;\n        let point = 0;\n        while(point < points.length){\n            let firstPoint = point;\n            // find the end point of the contour\n            let endPoint = point;\n            let pt = points[endPoint];\n            while(!pt.endContour)pt = points[++endPoint];\n            // find the first point that has a delta\n            while(point <= endPoint && !hasDelta[point])point++;\n            if (point > endPoint) continue;\n            let firstDelta = point;\n            let curDelta = point;\n            point++;\n            while(point <= endPoint){\n                // find the next point with a delta, and interpolate intermediate points\n                if (hasDelta[point]) {\n                    this.deltaInterpolate(curDelta + 1, point - 1, curDelta, point, inPoints, points);\n                    curDelta = point;\n                }\n                point++;\n            }\n            // shift contour if we only have a single delta\n            if (curDelta === firstDelta) this.deltaShift(firstPoint, endPoint, curDelta, inPoints, points);\n            else {\n                // otherwise, handle the remaining points at the end and beginning of the contour\n                this.deltaInterpolate(curDelta + 1, endPoint, curDelta, firstDelta, inPoints, points);\n                if (firstDelta > 0) this.deltaInterpolate(firstPoint, firstDelta - 1, curDelta, firstDelta, inPoints, points);\n            }\n            point = endPoint + 1;\n        }\n    }\n    deltaInterpolate(p1, p2, ref1, ref2, inPoints, outPoints) {\n        if (p1 > p2) return;\n        let iterable = [\n            \"x\",\n            \"y\"\n        ];\n        for(let i = 0; i < iterable.length; i++){\n            let k = iterable[i];\n            if (inPoints[ref1][k] > inPoints[ref2][k]) {\n                var p = ref1;\n                ref1 = ref2;\n                ref2 = p;\n            }\n            let in1 = inPoints[ref1][k];\n            let in2 = inPoints[ref2][k];\n            let out1 = outPoints[ref1][k];\n            let out2 = outPoints[ref2][k];\n            // If the reference points have the same coordinate but different\n            // delta, inferred delta is zero.  Otherwise interpolate.\n            if (in1 !== in2 || out1 === out2) {\n                let scale = in1 === in2 ? 0 : (out2 - out1) / (in2 - in1);\n                for(let p = p1; p <= p2; p++){\n                    let out = inPoints[p][k];\n                    if (out <= in1) out += out1 - in1;\n                    else if (out >= in2) out += out2 - in2;\n                    else out = out1 + (out - in1) * scale;\n                    outPoints[p][k] = out;\n                }\n            }\n        }\n    }\n    deltaShift(p1, p2, ref, inPoints, outPoints) {\n        let deltaX = outPoints[ref].x - inPoints[ref].x;\n        let deltaY = outPoints[ref].y - inPoints[ref].y;\n        if (deltaX === 0 && deltaY === 0) return;\n        for(let p = p1; p <= p2; p++)if (p !== ref) {\n            outPoints[p].x += deltaX;\n            outPoints[p].y += deltaY;\n        }\n    }\n    getAdvanceAdjustment(gid, table) {\n        let outerIndex, innerIndex;\n        if (table.advanceWidthMapping) {\n            let idx = gid;\n            if (idx >= table.advanceWidthMapping.mapCount) idx = table.advanceWidthMapping.mapCount - 1;\n            let entryFormat = table.advanceWidthMapping.entryFormat;\n            ({ outerIndex: outerIndex, innerIndex: innerIndex } = table.advanceWidthMapping.mapData[idx]);\n        } else {\n            outerIndex = 0;\n            innerIndex = gid;\n        }\n        return this.getDelta(table.itemVariationStore, outerIndex, innerIndex);\n    }\n    // See pseudo code from `Font Variations Overview'\n    // in the OpenType specification.\n    getDelta(itemStore, outerIndex, innerIndex) {\n        if (outerIndex >= itemStore.itemVariationData.length) return 0;\n        let varData = itemStore.itemVariationData[outerIndex];\n        if (innerIndex >= varData.deltaSets.length) return 0;\n        let deltaSet = varData.deltaSets[innerIndex];\n        let blendVector = this.getBlendVector(itemStore, outerIndex);\n        let netAdjustment = 0;\n        for(let master = 0; master < varData.regionIndexCount; master++)netAdjustment += deltaSet.deltas[master] * blendVector[master];\n        return netAdjustment;\n    }\n    getBlendVector(itemStore, outerIndex) {\n        let varData = itemStore.itemVariationData[outerIndex];\n        if (this.blendVectors.has(varData)) return this.blendVectors.get(varData);\n        let normalizedCoords = this.normalizedCoords;\n        let blendVector = [];\n        // outer loop steps through master designs to be blended\n        for(let master = 0; master < varData.regionIndexCount; master++){\n            let scalar = 1;\n            let regionIndex = varData.regionIndexes[master];\n            let axes = itemStore.variationRegionList.variationRegions[regionIndex];\n            // inner loop steps through axes in this region\n            for(let j = 0; j < axes.length; j++){\n                let axis = axes[j];\n                let axisScalar;\n                // compute the scalar contribution of this axis\n                // ignore invalid ranges\n                if (axis.startCoord > axis.peakCoord || axis.peakCoord > axis.endCoord) axisScalar = 1;\n                else if (axis.startCoord < 0 && axis.endCoord > 0 && axis.peakCoord !== 0) axisScalar = 1;\n                else if (axis.peakCoord === 0) axisScalar = 1;\n                else if (normalizedCoords[j] < axis.startCoord || normalizedCoords[j] > axis.endCoord) axisScalar = 0;\n                else {\n                    if (normalizedCoords[j] === axis.peakCoord) axisScalar = 1;\n                    else if (normalizedCoords[j] < axis.peakCoord) axisScalar = (normalizedCoords[j] - axis.startCoord + Number.EPSILON) / (axis.peakCoord - axis.startCoord + Number.EPSILON);\n                    else axisScalar = (axis.endCoord - normalizedCoords[j] + Number.EPSILON) / (axis.endCoord - axis.peakCoord + Number.EPSILON);\n                }\n                // take product of all the axis scalars\n                scalar *= axisScalar;\n            }\n            blendVector[master] = scalar;\n        }\n        this.blendVectors.set(varData, blendVector);\n        return blendVector;\n    }\n}\nconst $7768c4d2aa7d03a3$var$resolved = Promise.resolve();\nclass $7768c4d2aa7d03a3$export$2e2bcd8739ae039 {\n    constructor(font){\n        this.font = font;\n        this.glyphs = [];\n        this.mapping = {};\n        // always include the missing glyph\n        this.includeGlyph(0);\n    }\n    includeGlyph(glyph) {\n        if (typeof glyph === \"object\") glyph = glyph.id;\n        if (this.mapping[glyph] == null) {\n            this.glyphs.push(glyph);\n            this.mapping[glyph] = this.glyphs.length - 1;\n        }\n        return this.mapping[glyph];\n    }\n    encodeStream() {\n        let s = new restructure__WEBPACK_IMPORTED_MODULE_0__.EncodeStream();\n        $7768c4d2aa7d03a3$var$resolved.then(()=>{\n            this.encode(s);\n            return s.end();\n        });\n        return s;\n    }\n}\n// Flags for simple glyphs\nconst $681deff774310865$var$ON_CURVE = 1;\nconst $681deff774310865$var$X_SHORT_VECTOR = 2;\nconst $681deff774310865$var$Y_SHORT_VECTOR = 4;\nconst $681deff774310865$var$REPEAT = 8;\nconst $681deff774310865$var$SAME_X = 16;\nconst $681deff774310865$var$SAME_Y = 32;\nclass $681deff774310865$var$Point {\n    static size(val) {\n        return val >= 0 && val <= 255 ? 1 : 2;\n    }\n    static encode(stream, value) {\n        if (value >= 0 && value <= 255) stream.writeUInt8(value);\n        else stream.writeInt16BE(value);\n    }\n}\nlet $681deff774310865$var$Glyf = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    numberOfContours: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    xMin: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    yMin: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    xMax: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    yMax: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    endPtsOfContours: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"numberOfContours\"),\n    instructions: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16),\n    flags: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, 0),\n    xPoints: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($681deff774310865$var$Point, 0),\n    yPoints: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($681deff774310865$var$Point, 0)\n});\nclass $681deff774310865$export$2e2bcd8739ae039 {\n    encodeSimple(path, instructions = []) {\n        let endPtsOfContours = [];\n        let xPoints = [];\n        let yPoints = [];\n        let flags = [];\n        let same = 0;\n        let lastX = 0, lastY = 0, lastFlag = 0;\n        let pointCount = 0;\n        for(let i = 0; i < path.commands.length; i++){\n            let c = path.commands[i];\n            for(let j = 0; j < c.args.length; j += 2){\n                let x = c.args[j];\n                let y = c.args[j + 1];\n                let flag = 0;\n                // If the ending point of a quadratic curve is the midpoint\n                // between the control point and the control point of the next\n                // quadratic curve, we can omit the ending point.\n                if (c.command === \"quadraticCurveTo\" && j === 2) {\n                    let next = path.commands[i + 1];\n                    if (next && next.command === \"quadraticCurveTo\") {\n                        let midX = (lastX + next.args[0]) / 2;\n                        let midY = (lastY + next.args[1]) / 2;\n                        if (x === midX && y === midY) continue;\n                    }\n                }\n                // All points except control points are on curve.\n                if (!(c.command === \"quadraticCurveTo\" && j === 0)) flag |= $681deff774310865$var$ON_CURVE;\n                flag = this._encodePoint(x, lastX, xPoints, flag, $681deff774310865$var$X_SHORT_VECTOR, $681deff774310865$var$SAME_X);\n                flag = this._encodePoint(y, lastY, yPoints, flag, $681deff774310865$var$Y_SHORT_VECTOR, $681deff774310865$var$SAME_Y);\n                if (flag === lastFlag && same < 255) {\n                    flags[flags.length - 1] |= $681deff774310865$var$REPEAT;\n                    same++;\n                } else {\n                    if (same > 0) {\n                        flags.push(same);\n                        same = 0;\n                    }\n                    flags.push(flag);\n                    lastFlag = flag;\n                }\n                lastX = x;\n                lastY = y;\n                pointCount++;\n            }\n            if (c.command === \"closePath\") endPtsOfContours.push(pointCount - 1);\n        }\n        // Close the path if the last command didn't already\n        if (path.commands.length > 1 && path.commands[path.commands.length - 1].command !== \"closePath\") endPtsOfContours.push(pointCount - 1);\n        let bbox = path.bbox;\n        let glyf = {\n            numberOfContours: endPtsOfContours.length,\n            xMin: bbox.minX,\n            yMin: bbox.minY,\n            xMax: bbox.maxX,\n            yMax: bbox.maxY,\n            endPtsOfContours: endPtsOfContours,\n            instructions: instructions,\n            flags: flags,\n            xPoints: xPoints,\n            yPoints: yPoints\n        };\n        let size = $681deff774310865$var$Glyf.size(glyf);\n        let tail = 4 - size % 4;\n        let stream = new restructure__WEBPACK_IMPORTED_MODULE_0__.EncodeStream(size + tail);\n        $681deff774310865$var$Glyf.encode(stream, glyf);\n        // Align to 4-byte length\n        if (tail !== 0) stream.fill(0, tail);\n        return stream.buffer;\n    }\n    _encodePoint(value, last, points, flag, shortFlag, sameFlag) {\n        let diff = value - last;\n        if (value === last) flag |= sameFlag;\n        else {\n            if (-255 <= diff && diff <= 255) {\n                flag |= shortFlag;\n                if (diff < 0) diff = -diff;\n                else flag |= sameFlag;\n            }\n            points.push(diff);\n        }\n        return flag;\n    }\n}\nvar $06433914835b8dd7$require$Buffer = buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer;\nclass $06433914835b8dd7$export$2e2bcd8739ae039 extends $7768c4d2aa7d03a3$export$2e2bcd8739ae039 {\n    constructor(font){\n        super(font);\n        this.glyphEncoder = new $681deff774310865$export$2e2bcd8739ae039;\n    }\n    _addGlyph(gid) {\n        let glyph = this.font.getGlyph(gid);\n        let glyf = glyph._decode();\n        // get the offset to the glyph from the loca table\n        let curOffset = this.font.loca.offsets[gid];\n        let nextOffset = this.font.loca.offsets[gid + 1];\n        let stream = this.font._getTableStream(\"glyf\");\n        stream.pos += curOffset;\n        let buffer = stream.readBuffer(nextOffset - curOffset);\n        // if it is a compound glyph, include its components\n        if (glyf && glyf.numberOfContours < 0) {\n            buffer = $06433914835b8dd7$require$Buffer.from(buffer);\n            for (let component of glyf.components){\n                gid = this.includeGlyph(component.glyphID);\n                buffer.writeUInt16BE(gid, component.pos);\n            }\n        } else if (glyf && this.font._variationProcessor) buffer = this.glyphEncoder.encodeSimple(glyph.path, glyf.instructions);\n        this.glyf.push(buffer);\n        this.loca.offsets.push(this.offset);\n        this.hmtx.metrics.push({\n            advance: glyph.advanceWidth,\n            bearing: glyph._getMetrics().leftBearing\n        });\n        this.offset += buffer.length;\n        return this.glyf.length - 1;\n    }\n    encode(stream) {\n        // tables required by PDF spec:\n        //   head, hhea, loca, maxp, cvt , prep, glyf, hmtx, fpgm\n        //\n        // additional tables required for standalone fonts:\n        //   name, cmap, OS/2, post\n        this.glyf = [];\n        this.offset = 0;\n        this.loca = {\n            offsets: [],\n            version: this.font.loca.version\n        };\n        this.hmtx = {\n            metrics: [],\n            bearings: []\n        };\n        // include all the glyphs\n        // not using a for loop because we need to support adding more\n        // glyphs to the array as we go, and CoffeeScript caches the length.\n        let i = 0;\n        while(i < this.glyphs.length)this._addGlyph(this.glyphs[i++]);\n        let maxp = clone__WEBPACK_IMPORTED_MODULE_9__(this.font.maxp);\n        maxp.numGlyphs = this.glyf.length;\n        this.loca.offsets.push(this.offset);\n        let head = clone__WEBPACK_IMPORTED_MODULE_9__(this.font.head);\n        head.indexToLocFormat = this.loca.version;\n        let hhea = clone__WEBPACK_IMPORTED_MODULE_9__(this.font.hhea);\n        hhea.numberOfMetrics = this.hmtx.metrics.length;\n        // map = []\n        // for index in [0...256]\n        //     if index < @numGlyphs\n        //         map[index] = index\n        //     else\n        //         map[index] = 0\n        //\n        // cmapTable =\n        //     version: 0\n        //     length: 262\n        //     language: 0\n        //     codeMap: map\n        //\n        // cmap =\n        //     version: 0\n        //     numSubtables: 1\n        //     tables: [\n        //         platformID: 1\n        //         encodingID: 0\n        //         table: cmapTable\n        //     ]\n        // TODO: subset prep, cvt, fpgm?\n        $d5e01a2298150c9a$export$2e2bcd8739ae039.encode(stream, {\n            tables: {\n                head: head,\n                hhea: hhea,\n                loca: this.loca,\n                maxp: maxp,\n                \"cvt \": this.font[\"cvt \"],\n                prep: this.font.prep,\n                glyf: this.glyf,\n                hmtx: this.hmtx,\n                fpgm: this.font.fpgm\n            }\n        });\n    }\n}\nvar $2d910ac31fc0baf3$require$Buffer = buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer;\nclass $2d910ac31fc0baf3$export$2e2bcd8739ae039 extends $7768c4d2aa7d03a3$export$2e2bcd8739ae039 {\n    constructor(font){\n        super(font);\n        this.cff = this.font[\"CFF \"];\n        if (!this.cff) throw new Error(\"Not a CFF Font\");\n    }\n    subsetCharstrings() {\n        this.charstrings = [];\n        let gsubrs = {};\n        for (let gid of this.glyphs){\n            this.charstrings.push(this.cff.getCharString(gid));\n            let glyph = this.font.getGlyph(gid);\n            let path = glyph.path; // this causes the glyph to be parsed\n            for(let subr in glyph._usedGsubrs)gsubrs[subr] = true;\n        }\n        this.gsubrs = this.subsetSubrs(this.cff.globalSubrIndex, gsubrs);\n    }\n    subsetSubrs(subrs, used) {\n        let res = [];\n        for(let i = 0; i < subrs.length; i++){\n            let subr = subrs[i];\n            if (used[i]) {\n                this.cff.stream.pos = subr.offset;\n                res.push(this.cff.stream.readBuffer(subr.length));\n            } else res.push($2d910ac31fc0baf3$require$Buffer.from([\n                11\n            ])); // return\n        }\n        return res;\n    }\n    subsetFontdict(topDict) {\n        topDict.FDArray = [];\n        topDict.FDSelect = {\n            version: 0,\n            fds: []\n        };\n        let used_fds = {};\n        let used_subrs = [];\n        let fd_select = {};\n        for (let gid of this.glyphs){\n            let fd = this.cff.fdForGlyph(gid);\n            if (fd == null) continue;\n            if (!used_fds[fd]) {\n                topDict.FDArray.push(Object.assign({}, this.cff.topDict.FDArray[fd]));\n                used_subrs.push({});\n                fd_select[fd] = topDict.FDArray.length - 1;\n            }\n            used_fds[fd] = true;\n            topDict.FDSelect.fds.push(fd_select[fd]);\n            let glyph = this.font.getGlyph(gid);\n            let path = glyph.path; // this causes the glyph to be parsed\n            for(let subr in glyph._usedSubrs)used_subrs[fd_select[fd]][subr] = true;\n        }\n        for(let i = 0; i < topDict.FDArray.length; i++){\n            let dict = topDict.FDArray[i];\n            delete dict.FontName;\n            if (dict.Private && dict.Private.Subrs) {\n                dict.Private = Object.assign({}, dict.Private);\n                dict.Private.Subrs = this.subsetSubrs(dict.Private.Subrs, used_subrs[i]);\n            }\n        }\n        return;\n    }\n    createCIDFontdict(topDict) {\n        let used_subrs = {};\n        for (let gid of this.glyphs){\n            let glyph = this.font.getGlyph(gid);\n            let path = glyph.path; // this causes the glyph to be parsed\n            for(let subr in glyph._usedSubrs)used_subrs[subr] = true;\n        }\n        let privateDict = Object.assign({}, this.cff.topDict.Private);\n        if (this.cff.topDict.Private && this.cff.topDict.Private.Subrs) privateDict.Subrs = this.subsetSubrs(this.cff.topDict.Private.Subrs, used_subrs);\n        topDict.FDArray = [\n            {\n                Private: privateDict\n            }\n        ];\n        return topDict.FDSelect = {\n            version: 3,\n            nRanges: 1,\n            ranges: [\n                {\n                    first: 0,\n                    fd: 0\n                }\n            ],\n            sentinel: this.charstrings.length\n        };\n    }\n    addString(string) {\n        if (!string) return null;\n        if (!this.strings) this.strings = [];\n        this.strings.push(string);\n        return $276d3ff37a4362c9$export$2e2bcd8739ae039.length + this.strings.length - 1;\n    }\n    encode(stream) {\n        this.subsetCharstrings();\n        let charset = {\n            version: this.charstrings.length > 255 ? 2 : 1,\n            ranges: [\n                {\n                    first: 1,\n                    nLeft: this.charstrings.length - 2\n                }\n            ]\n        };\n        let topDict = Object.assign({}, this.cff.topDict);\n        topDict.Private = null;\n        topDict.charset = charset;\n        topDict.Encoding = null;\n        topDict.CharStrings = this.charstrings;\n        for (let key of [\n            \"version\",\n            \"Notice\",\n            \"Copyright\",\n            \"FullName\",\n            \"FamilyName\",\n            \"Weight\",\n            \"PostScript\",\n            \"BaseFontName\",\n            \"FontName\"\n        ])topDict[key] = this.addString(this.cff.string(topDict[key]));\n        topDict.ROS = [\n            this.addString(\"Adobe\"),\n            this.addString(\"Identity\"),\n            0\n        ];\n        topDict.CIDCount = this.charstrings.length;\n        if (this.cff.isCIDFont) this.subsetFontdict(topDict);\n        else this.createCIDFontdict(topDict);\n        let top = {\n            version: 1,\n            hdrSize: this.cff.hdrSize,\n            offSize: 4,\n            header: this.cff.header,\n            nameIndex: [\n                this.cff.postscriptName\n            ],\n            topDictIndex: [\n                topDict\n            ],\n            stringIndex: this.strings,\n            globalSubrIndex: this.gsubrs\n        };\n        $3e41cd50e8921098$export$2e2bcd8739ae039.encode(stream, top);\n    }\n}\nvar _class;\nlet $7de97f725b51e05a$export$2e2bcd8739ae039 = (_class = class $7de97f725b51e05a$export$2e2bcd8739ae039 {\n    static probe(buffer) {\n        let format = buffer.toString(\"ascii\", 0, 4);\n        return format === \"true\" || format === \"OTTO\" || format === String.fromCharCode(0, 1, 0, 0);\n    }\n    constructor(stream, variationCoords = null){\n        this.type = \"TTF\";\n        this.defaultLanguage = null;\n        this.stream = stream;\n        this.variationCoords = variationCoords;\n        this._directoryPos = this.stream.pos;\n        this._tables = {};\n        this._glyphs = {};\n        this._decodeDirectory();\n        // define properties for each table to lazily parse\n        for(let tag in this.directory.tables){\n            let table = this.directory.tables[tag];\n            if ($60d88718e7e1fa97$export$2e2bcd8739ae039[tag] && table.length > 0) Object.defineProperty(this, tag, {\n                get: this._getTable.bind(this, table)\n            });\n        }\n    }\n    setDefaultLanguage(lang = null) {\n        this.defaultLanguage = lang;\n    }\n    _getTable(table) {\n        if (!(table.tag in this._tables)) try {\n            this._tables[table.tag] = this._decodeTable(table);\n        } catch (e) {\n            if ($8857867ee3ddfad5$export$bd5c5d8b8dcafd78) {\n                console.error(`Error decoding table ${table.tag}`);\n                console.error(e.stack);\n            }\n        }\n        return this._tables[table.tag];\n    }\n    _getTableStream(tag) {\n        let table = this.directory.tables[tag];\n        if (table) {\n            this.stream.pos = table.offset;\n            return this.stream;\n        }\n        return null;\n    }\n    _decodeDirectory() {\n        return this.directory = $d5e01a2298150c9a$export$2e2bcd8739ae039.decode(this.stream, {\n            _startOffset: 0\n        });\n    }\n    _decodeTable(table) {\n        let pos = this.stream.pos;\n        let stream = this._getTableStream(table.tag);\n        let result = $60d88718e7e1fa97$export$2e2bcd8739ae039[table.tag].decode(stream, this, table.length);\n        this.stream.pos = pos;\n        return result;\n    }\n    /**\n   * Gets a string from the font's `name` table\n   * `lang` is a BCP-47 language code.\n   * @return {string}\n   */ getName(key, lang = this.defaultLanguage || $8857867ee3ddfad5$export$42940898df819940) {\n        let record = this.name && this.name.records[key];\n        if (record) return record[lang] || record[this.defaultLanguage] || record[$8857867ee3ddfad5$export$42940898df819940] || record[\"en\"] || record[Object.keys(record)[0]] // Seriously, ANY language would be fine\n         || null;\n        return null;\n    }\n    /**\n   * The unique PostScript name for this font, e.g. \"Helvetica-Bold\"\n   * @type {string}\n   */ get postscriptName() {\n        return this.getName(\"postscriptName\");\n    }\n    /**\n   * The font's full name, e.g. \"Helvetica Bold\"\n   * @type {string}\n   */ get fullName() {\n        return this.getName(\"fullName\");\n    }\n    /**\n   * The font's family name, e.g. \"Helvetica\"\n   * @type {string}\n   */ get familyName() {\n        return this.getName(\"fontFamily\");\n    }\n    /**\n   * The font's sub-family, e.g. \"Bold\".\n   * @type {string}\n   */ get subfamilyName() {\n        return this.getName(\"fontSubfamily\");\n    }\n    /**\n   * The font's copyright information\n   * @type {string}\n   */ get copyright() {\n        return this.getName(\"copyright\");\n    }\n    /**\n   * The font's version number\n   * @type {string}\n   */ get version() {\n        return this.getName(\"version\");\n    }\n    /**\n   * The font’s [ascender](https://en.wikipedia.org/wiki/Ascender_(typography))\n   * @type {number}\n   */ get ascent() {\n        return this.hhea.ascent;\n    }\n    /**\n   * The font’s [descender](https://en.wikipedia.org/wiki/Descender)\n   * @type {number}\n   */ get descent() {\n        return this.hhea.descent;\n    }\n    /**\n   * The amount of space that should be included between lines\n   * @type {number}\n   */ get lineGap() {\n        return this.hhea.lineGap;\n    }\n    /**\n   * The offset from the normal underline position that should be used\n   * @type {number}\n   */ get underlinePosition() {\n        return this.post.underlinePosition;\n    }\n    /**\n   * The weight of the underline that should be used\n   * @type {number}\n   */ get underlineThickness() {\n        return this.post.underlineThickness;\n    }\n    /**\n   * If this is an italic font, the angle the cursor should be drawn at to match the font design\n   * @type {number}\n   */ get italicAngle() {\n        return this.post.italicAngle;\n    }\n    /**\n   * The height of capital letters above the baseline.\n   * See [here](https://en.wikipedia.org/wiki/Cap_height) for more details.\n   * @type {number}\n   */ get capHeight() {\n        let os2 = this[\"OS/2\"];\n        return os2 ? os2.capHeight : this.ascent;\n    }\n    /**\n   * The height of lower case letters in the font.\n   * See [here](https://en.wikipedia.org/wiki/X-height) for more details.\n   * @type {number}\n   */ get xHeight() {\n        let os2 = this[\"OS/2\"];\n        return os2 ? os2.xHeight : 0;\n    }\n    /**\n   * The number of glyphs in the font.\n   * @type {number}\n   */ get numGlyphs() {\n        return this.maxp.numGlyphs;\n    }\n    /**\n   * The size of the font’s internal coordinate grid\n   * @type {number}\n   */ get unitsPerEm() {\n        return this.head.unitsPerEm;\n    }\n    /**\n   * The font’s bounding box, i.e. the box that encloses all glyphs in the font.\n   * @type {BBox}\n   */ get bbox() {\n        return Object.freeze(new $fcb46e14b01ea01f$export$2e2bcd8739ae039(this.head.xMin, this.head.yMin, this.head.xMax, this.head.yMax));\n    }\n    get _cmapProcessor() {\n        return new $5d24cfe1a4cd83bb$export$2e2bcd8739ae039(this.cmap);\n    }\n    /**\n   * An array of all of the unicode code points supported by the font.\n   * @type {number[]}\n   */ get characterSet() {\n        return this._cmapProcessor.getCharacterSet();\n    }\n    /**\n   * Returns whether there is glyph in the font for the given unicode code point.\n   *\n   * @param {number} codePoint\n   * @return {boolean}\n   */ hasGlyphForCodePoint(codePoint) {\n        return !!this._cmapProcessor.lookup(codePoint);\n    }\n    /**\n   * Maps a single unicode code point to a Glyph object.\n   * Does not perform any advanced substitutions (there is no context to do so).\n   *\n   * @param {number} codePoint\n   * @return {Glyph}\n   */ glyphForCodePoint(codePoint) {\n        return this.getGlyph(this._cmapProcessor.lookup(codePoint), [\n            codePoint\n        ]);\n    }\n    /**\n   * Returns an array of Glyph objects for the given string.\n   * This is only a one-to-one mapping from characters to glyphs.\n   * For most uses, you should use font.layout (described below), which\n   * provides a much more advanced mapping supporting AAT and OpenType shaping.\n   *\n   * @param {string} string\n   * @return {Glyph[]}\n   */ glyphsForString(string) {\n        let glyphs = [];\n        let len = string.length;\n        let idx = 0;\n        let last = -1;\n        let state = -1;\n        while(idx <= len){\n            let code = 0;\n            let nextState = 0;\n            if (idx < len) {\n                // Decode the next codepoint from UTF 16\n                code = string.charCodeAt(idx++);\n                if (0xd800 <= code && code <= 0xdbff && idx < len) {\n                    let next = string.charCodeAt(idx);\n                    if (0xdc00 <= next && next <= 0xdfff) {\n                        idx++;\n                        code = ((code & 0x3ff) << 10) + (next & 0x3ff) + 0x10000;\n                    }\n                }\n                // Compute the next state: 1 if the next codepoint is a variation selector, 0 otherwise.\n                nextState = 0xfe00 <= code && code <= 0xfe0f || 0xe0100 <= code && code <= 0xe01ef ? 1 : 0;\n            } else idx++;\n            if (state === 0 && nextState === 1) glyphs.push(this.getGlyph(this._cmapProcessor.lookup(last, code), [\n                last,\n                code\n            ]));\n            else if (state === 0 && nextState === 0) glyphs.push(this.glyphForCodePoint(last));\n            last = code;\n            state = nextState;\n        }\n        return glyphs;\n    }\n    get _layoutEngine() {\n        return new $2df783177c3b5db5$export$2e2bcd8739ae039(this);\n    }\n    /**\n   * Returns a GlyphRun object, which includes an array of Glyphs and GlyphPositions for the given string.\n   *\n   * @param {string} string\n   * @param {string[]} [userFeatures]\n   * @param {string} [script]\n   * @param {string} [language]\n   * @param {string} [direction]\n   * @return {GlyphRun}\n   */ layout(string, userFeatures, script, language, direction) {\n        return this._layoutEngine.layout(string, userFeatures, script, language, direction);\n    }\n    /**\n   * Returns an array of strings that map to the given glyph id.\n   * @param {number} gid - glyph id\n   */ stringsForGlyph(gid) {\n        return this._layoutEngine.stringsForGlyph(gid);\n    }\n    /**\n   * An array of all [OpenType feature tags](https://www.microsoft.com/typography/otspec/featuretags.htm)\n   * (or mapped AAT tags) supported by the font.\n   * The features parameter is an array of OpenType feature tags to be applied in addition to the default set.\n   * If this is an AAT font, the OpenType feature tags are mapped to AAT features.\n   *\n   * @type {string[]}\n   */ get availableFeatures() {\n        return this._layoutEngine.getAvailableFeatures();\n    }\n    getAvailableFeatures(script, language) {\n        return this._layoutEngine.getAvailableFeatures(script, language);\n    }\n    _getBaseGlyph(glyph, characters = []) {\n        if (!this._glyphs[glyph]) {\n            if (this.directory.tables.glyf) this._glyphs[glyph] = new $e20fdd09923e4c19$export$2e2bcd8739ae039(glyph, characters, this);\n            else if (this.directory.tables[\"CFF \"] || this.directory.tables.CFF2) this._glyphs[glyph] = new $efcf21464e1e0f88$export$2e2bcd8739ae039(glyph, characters, this);\n        }\n        return this._glyphs[glyph] || null;\n    }\n    /**\n   * Returns a glyph object for the given glyph id.\n   * You can pass the array of code points this glyph represents for\n   * your use later, and it will be stored in the glyph object.\n   *\n   * @param {number} glyph\n   * @param {number[]} characters\n   * @return {Glyph}\n   */ getGlyph(glyph, characters = []) {\n        if (!this._glyphs[glyph]) {\n            if (this.directory.tables.sbix) this._glyphs[glyph] = new $df50792647a3d5cf$export$2e2bcd8739ae039(glyph, characters, this);\n            else if (this.directory.tables.COLR && this.directory.tables.CPAL) this._glyphs[glyph] = new $729b375ce67e8a00$export$2e2bcd8739ae039(glyph, characters, this);\n            else this._getBaseGlyph(glyph, characters);\n        }\n        return this._glyphs[glyph] || null;\n    }\n    /**\n   * Returns a Subset for this font.\n   * @return {Subset}\n   */ createSubset() {\n        if (this.directory.tables[\"CFF \"]) return new $2d910ac31fc0baf3$export$2e2bcd8739ae039(this);\n        return new $06433914835b8dd7$export$2e2bcd8739ae039(this);\n    }\n    /**\n   * Returns an object describing the available variation axes\n   * that this font supports. Keys are setting tags, and values\n   * contain the axis name, range, and default value.\n   *\n   * @type {object}\n   */ get variationAxes() {\n        let res = {};\n        if (!this.fvar) return res;\n        for (let axis of this.fvar.axis)res[axis.axisTag.trim()] = {\n            name: axis.name.en,\n            min: axis.minValue,\n            default: axis.defaultValue,\n            max: axis.maxValue\n        };\n        return res;\n    }\n    /**\n   * Returns an object describing the named variation instances\n   * that the font designer has specified. Keys are variation names\n   * and values are the variation settings for this instance.\n   *\n   * @type {object}\n   */ get namedVariations() {\n        let res = {};\n        if (!this.fvar) return res;\n        for (let instance of this.fvar.instance){\n            let settings = {};\n            for(let i = 0; i < this.fvar.axis.length; i++){\n                let axis = this.fvar.axis[i];\n                settings[axis.axisTag.trim()] = instance.coord[i];\n            }\n            res[instance.name.en] = settings;\n        }\n        return res;\n    }\n    /**\n   * Returns a new font with the given variation settings applied.\n   * Settings can either be an instance name, or an object containing\n   * variation tags as specified by the `variationAxes` property.\n   *\n   * @param {object} settings\n   * @return {TTFFont}\n   */ getVariation(settings) {\n        if (!(this.directory.tables.fvar && (this.directory.tables.gvar && this.directory.tables.glyf || this.directory.tables.CFF2))) throw new Error(\"Variations require a font with the fvar, gvar and glyf, or CFF2 tables.\");\n        if (typeof settings === \"string\") settings = this.namedVariations[settings];\n        if (typeof settings !== \"object\") throw new Error(\"Variation settings must be either a variation name or settings object.\");\n        // normalize the coordinates\n        let coords = this.fvar.axis.map((axis, i)=>{\n            let axisTag = axis.axisTag.trim();\n            if (axisTag in settings) return Math.max(axis.minValue, Math.min(axis.maxValue, settings[axisTag]));\n            else return axis.defaultValue;\n        });\n        let stream = new restructure__WEBPACK_IMPORTED_MODULE_0__.DecodeStream(this.stream.buffer);\n        stream.pos = this._directoryPos;\n        let font = new $7de97f725b51e05a$export$2e2bcd8739ae039(stream, coords);\n        font._tables = this._tables;\n        return font;\n    }\n    get _variationProcessor() {\n        if (!this.fvar) return null;\n        let variationCoords = this.variationCoords;\n        // Ignore if no variation coords and not CFF2\n        if (!variationCoords && !this.CFF2) return null;\n        if (!variationCoords) variationCoords = this.fvar.axis.map((axis)=>axis.defaultValue);\n        return new $62b2d77b45b438f3$export$2e2bcd8739ae039(this, variationCoords);\n    }\n    // Standardized format plugin API\n    getFont(name) {\n        return this.getVariation(name);\n    }\n}, (0,_swc_helpers__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(_class.prototype, \"bbox\", [\n    $df9bc573962369ff$export$69a3209f1a06c04d\n], Object.getOwnPropertyDescriptor(_class.prototype, \"bbox\"), _class.prototype), (0,_swc_helpers__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(_class.prototype, \"_cmapProcessor\", [\n    $df9bc573962369ff$export$69a3209f1a06c04d\n], Object.getOwnPropertyDescriptor(_class.prototype, \"_cmapProcessor\"), _class.prototype), (0,_swc_helpers__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(_class.prototype, \"characterSet\", [\n    $df9bc573962369ff$export$69a3209f1a06c04d\n], Object.getOwnPropertyDescriptor(_class.prototype, \"characterSet\"), _class.prototype), (0,_swc_helpers__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(_class.prototype, \"_layoutEngine\", [\n    $df9bc573962369ff$export$69a3209f1a06c04d\n], Object.getOwnPropertyDescriptor(_class.prototype, \"_layoutEngine\"), _class.prototype), (0,_swc_helpers__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(_class.prototype, \"variationAxes\", [\n    $df9bc573962369ff$export$69a3209f1a06c04d\n], Object.getOwnPropertyDescriptor(_class.prototype, \"variationAxes\"), _class.prototype), (0,_swc_helpers__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(_class.prototype, \"namedVariations\", [\n    $df9bc573962369ff$export$69a3209f1a06c04d\n], Object.getOwnPropertyDescriptor(_class.prototype, \"namedVariations\"), _class.prototype), (0,_swc_helpers__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(_class.prototype, \"_variationProcessor\", [\n    $df9bc573962369ff$export$69a3209f1a06c04d\n], Object.getOwnPropertyDescriptor(_class.prototype, \"_variationProcessor\"), _class.prototype), _class);\nlet $ab5f467accf33238$var$WOFFDirectoryEntry = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    offset: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, \"void\", {\n        type: \"global\"\n    }),\n    compLength: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    origChecksum: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32\n});\nlet $ab5f467accf33238$var$WOFFDirectory = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    flavor: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    numTables: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16),\n    totalSfntSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    majorVersion: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    minorVersion: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    metaOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    metaLength: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    metaOrigLength: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    privOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    privLength: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    tables: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($ab5f467accf33238$var$WOFFDirectoryEntry, \"numTables\")\n});\n$ab5f467accf33238$var$WOFFDirectory.process = function() {\n    let tables = {};\n    for (let table of this.tables)tables[table.tag] = table;\n    this.tables = tables;\n};\nvar $ab5f467accf33238$export$2e2bcd8739ae039 = $ab5f467accf33238$var$WOFFDirectory;\nvar $fce99fef0398d8c8$require$Buffer = buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer;\nclass $fce99fef0398d8c8$export$2e2bcd8739ae039 extends $7de97f725b51e05a$export$2e2bcd8739ae039 {\n    static probe(buffer) {\n        return buffer.toString(\"ascii\", 0, 4) === \"wOFF\";\n    }\n    _decodeDirectory() {\n        this.directory = $ab5f467accf33238$export$2e2bcd8739ae039.decode(this.stream, {\n            _startOffset: 0\n        });\n    }\n    _getTableStream(tag) {\n        let table = this.directory.tables[tag];\n        if (table) {\n            this.stream.pos = table.offset;\n            if (table.compLength < table.length) {\n                this.stream.pos += 2; // skip deflate header\n                let outBuffer = $fce99fef0398d8c8$require$Buffer.alloc(table.length);\n                let buf = tiny_inflate__WEBPACK_IMPORTED_MODULE_10__(this.stream.readBuffer(table.compLength - 2), outBuffer);\n                return new restructure__WEBPACK_IMPORTED_MODULE_0__.DecodeStream(buf);\n            } else return this.stream;\n        }\n        return null;\n    }\n    constructor(...args){\n        super(...args);\n        this.type = \"WOFF\";\n    }\n}\nclass $f6f1feff1ba0de68$export$2e2bcd8739ae039 extends $e20fdd09923e4c19$export$2e2bcd8739ae039 {\n    _decode() {\n        // We have to decode in advance (in WOFF2Font), so just return the pre-decoded data.\n        return this._font._transformedGlyphs[this.id];\n    }\n    _getCBox() {\n        return this.path.bbox;\n    }\n    constructor(...args){\n        super(...args);\n        this.type = \"WOFF2\";\n    }\n}\nconst $4965cf368c868bf6$var$Base128 = {\n    decode (stream) {\n        let result = 0;\n        let iterable = [\n            0,\n            1,\n            2,\n            3,\n            4\n        ];\n        for(let j = 0; j < iterable.length; j++){\n            let i = iterable[j];\n            let code = stream.readUInt8();\n            // If any of the top seven bits are set then we're about to overflow.\n            if (result & 0xe0000000) throw new Error(\"Overflow\");\n            result = result << 7 | code & 0x7f;\n            if ((code & 0x80) === 0) return result;\n        }\n        throw new Error(\"Bad base 128 number\");\n    }\n};\nlet $4965cf368c868bf6$var$knownTags = [\n    \"cmap\",\n    \"head\",\n    \"hhea\",\n    \"hmtx\",\n    \"maxp\",\n    \"name\",\n    \"OS/2\",\n    \"post\",\n    \"cvt \",\n    \"fpgm\",\n    \"glyf\",\n    \"loca\",\n    \"prep\",\n    \"CFF \",\n    \"VORG\",\n    \"EBDT\",\n    \"EBLC\",\n    \"gasp\",\n    \"hdmx\",\n    \"kern\",\n    \"LTSH\",\n    \"PCLT\",\n    \"VDMX\",\n    \"vhea\",\n    \"vmtx\",\n    \"BASE\",\n    \"GDEF\",\n    \"GPOS\",\n    \"GSUB\",\n    \"EBSC\",\n    \"JSTF\",\n    \"MATH\",\n    \"CBDT\",\n    \"CBLC\",\n    \"COLR\",\n    \"CPAL\",\n    \"SVG \",\n    \"sbix\",\n    \"acnt\",\n    \"avar\",\n    \"bdat\",\n    \"bloc\",\n    \"bsln\",\n    \"cvar\",\n    \"fdsc\",\n    \"feat\",\n    \"fmtx\",\n    \"fvar\",\n    \"gvar\",\n    \"hsty\",\n    \"just\",\n    \"lcar\",\n    \"mort\",\n    \"morx\",\n    \"opbd\",\n    \"prop\",\n    \"trak\",\n    \"Zapf\",\n    \"Silf\",\n    \"Glat\",\n    \"Gloc\",\n    \"Feat\",\n    \"Sill\"\n];\nlet $4965cf368c868bf6$var$WOFF2DirectoryEntry = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    flags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    customTag: new restructure__WEBPACK_IMPORTED_MODULE_0__.Optional(new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4), (t)=>(t.flags & 0x3f) === 0x3f),\n    tag: (t)=>t.customTag || $4965cf368c868bf6$var$knownTags[t.flags & 0x3f],\n    length: $4965cf368c868bf6$var$Base128,\n    transformVersion: (t)=>t.flags >>> 6 & 0x03,\n    transformed: (t)=>t.tag === \"glyf\" || t.tag === \"loca\" ? t.transformVersion === 0 : t.transformVersion !== 0,\n    transformLength: new restructure__WEBPACK_IMPORTED_MODULE_0__.Optional($4965cf368c868bf6$var$Base128, (t)=>t.transformed)\n});\nlet $4965cf368c868bf6$var$WOFF2Directory = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    flavor: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    numTables: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16),\n    totalSfntSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    totalCompressedSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    majorVersion: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    minorVersion: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    metaOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    metaLength: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    metaOrigLength: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    privOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    privLength: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    tables: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($4965cf368c868bf6$var$WOFF2DirectoryEntry, \"numTables\")\n});\n$4965cf368c868bf6$var$WOFF2Directory.process = function() {\n    let tables = {};\n    for(let i = 0; i < this.tables.length; i++){\n        let table = this.tables[i];\n        tables[table.tag] = table;\n    }\n    return this.tables = tables;\n};\nvar $4965cf368c868bf6$export$2e2bcd8739ae039 = $4965cf368c868bf6$var$WOFF2Directory;\nvar $b6deb9db8685274b$require$Buffer = buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer;\nclass $b6deb9db8685274b$export$2e2bcd8739ae039 extends $7de97f725b51e05a$export$2e2bcd8739ae039 {\n    static probe(buffer) {\n        return buffer.toString(\"ascii\", 0, 4) === \"wOF2\";\n    }\n    _decodeDirectory() {\n        this.directory = $4965cf368c868bf6$export$2e2bcd8739ae039.decode(this.stream);\n        this._dataPos = this.stream.pos;\n    }\n    _decompress() {\n        // decompress data and setup table offsets if we haven't already\n        if (!this._decompressed) {\n            this.stream.pos = this._dataPos;\n            let buffer = this.stream.readBuffer(this.directory.totalCompressedSize);\n            let decompressedSize = 0;\n            for(let tag in this.directory.tables){\n                let entry = this.directory.tables[tag];\n                entry.offset = decompressedSize;\n                decompressedSize += entry.transformLength != null ? entry.transformLength : entry.length;\n            }\n            let decompressed = brotli_decompress_js__WEBPACK_IMPORTED_MODULE_11__(buffer, decompressedSize);\n            if (!decompressed) throw new Error(\"Error decoding compressed data in WOFF2\");\n            this.stream = new restructure__WEBPACK_IMPORTED_MODULE_0__.DecodeStream($b6deb9db8685274b$require$Buffer.from(decompressed));\n            this._decompressed = true;\n        }\n    }\n    _decodeTable(table) {\n        this._decompress();\n        return super._decodeTable(table);\n    }\n    // Override this method to get a glyph and return our\n    // custom subclass if there is a glyf table.\n    _getBaseGlyph(glyph, characters = []) {\n        if (!this._glyphs[glyph]) {\n            if (this.directory.tables.glyf && this.directory.tables.glyf.transformed) {\n                if (!this._transformedGlyphs) this._transformGlyfTable();\n                return this._glyphs[glyph] = new $f6f1feff1ba0de68$export$2e2bcd8739ae039(glyph, characters, this);\n            } else return super._getBaseGlyph(glyph, characters);\n        }\n    }\n    _transformGlyfTable() {\n        this._decompress();\n        this.stream.pos = this.directory.tables.glyf.offset;\n        let table = $b6deb9db8685274b$var$GlyfTable.decode(this.stream);\n        let glyphs = [];\n        for(let index = 0; index < table.numGlyphs; index++){\n            let glyph = {};\n            let nContours = table.nContours.readInt16BE();\n            glyph.numberOfContours = nContours;\n            if (nContours > 0) {\n                let nPoints = [];\n                let totalPoints = 0;\n                for(let i = 0; i < nContours; i++){\n                    let r = $b6deb9db8685274b$var$read255UInt16(table.nPoints);\n                    totalPoints += r;\n                    nPoints.push(totalPoints);\n                }\n                glyph.points = $b6deb9db8685274b$var$decodeTriplet(table.flags, table.glyphs, totalPoints);\n                for(let i1 = 0; i1 < nContours; i1++)glyph.points[nPoints[i1] - 1].endContour = true;\n                var instructionSize = $b6deb9db8685274b$var$read255UInt16(table.glyphs);\n            } else if (nContours < 0) {\n                let haveInstructions = $e20fdd09923e4c19$export$2e2bcd8739ae039.prototype._decodeComposite.call({\n                    _font: this\n                }, glyph, table.composites);\n                if (haveInstructions) var instructionSize = $b6deb9db8685274b$var$read255UInt16(table.glyphs);\n            }\n            glyphs.push(glyph);\n        }\n        this._transformedGlyphs = glyphs;\n    }\n    constructor(...args){\n        super(...args);\n        this.type = \"WOFF2\";\n    }\n}\n// Special class that accepts a length and returns a sub-stream for that data\nclass $b6deb9db8685274b$var$Substream {\n    constructor(length){\n        this.length = length;\n        this._buf = new restructure__WEBPACK_IMPORTED_MODULE_0__.Buffer(length);\n    }\n    decode(stream, parent) {\n        return new restructure__WEBPACK_IMPORTED_MODULE_0__.DecodeStream(this._buf.decode(stream, parent));\n    }\n}\n// This struct represents the entire glyf table\nlet $b6deb9db8685274b$var$GlyfTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    numGlyphs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    indexFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    nContourStreamSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    nPointsStreamSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    flagStreamSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    glyphStreamSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    compositeStreamSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    bboxStreamSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    instructionStreamSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    nContours: new $b6deb9db8685274b$var$Substream(\"nContourStreamSize\"),\n    nPoints: new $b6deb9db8685274b$var$Substream(\"nPointsStreamSize\"),\n    flags: new $b6deb9db8685274b$var$Substream(\"flagStreamSize\"),\n    glyphs: new $b6deb9db8685274b$var$Substream(\"glyphStreamSize\"),\n    composites: new $b6deb9db8685274b$var$Substream(\"compositeStreamSize\"),\n    bboxes: new $b6deb9db8685274b$var$Substream(\"bboxStreamSize\"),\n    instructions: new $b6deb9db8685274b$var$Substream(\"instructionStreamSize\")\n});\nconst $b6deb9db8685274b$var$WORD_CODE = 253;\nconst $b6deb9db8685274b$var$ONE_MORE_BYTE_CODE2 = 254;\nconst $b6deb9db8685274b$var$ONE_MORE_BYTE_CODE1 = 255;\nconst $b6deb9db8685274b$var$LOWEST_U_CODE = 253;\nfunction $b6deb9db8685274b$var$read255UInt16(stream) {\n    let code = stream.readUInt8();\n    if (code === $b6deb9db8685274b$var$WORD_CODE) return stream.readUInt16BE();\n    if (code === $b6deb9db8685274b$var$ONE_MORE_BYTE_CODE1) return stream.readUInt8() + $b6deb9db8685274b$var$LOWEST_U_CODE;\n    if (code === $b6deb9db8685274b$var$ONE_MORE_BYTE_CODE2) return stream.readUInt8() + $b6deb9db8685274b$var$LOWEST_U_CODE * 2;\n    return code;\n}\nfunction $b6deb9db8685274b$var$withSign(flag, baseval) {\n    return flag & 1 ? baseval : -baseval;\n}\nfunction $b6deb9db8685274b$var$decodeTriplet(flags, glyphs, nPoints) {\n    let y;\n    let x = y = 0;\n    let res = [];\n    for(let i = 0; i < nPoints; i++){\n        let dx = 0, dy = 0;\n        let flag = flags.readUInt8();\n        let onCurve = !(flag >> 7);\n        flag &= 0x7f;\n        if (flag < 10) {\n            dx = 0;\n            dy = $b6deb9db8685274b$var$withSign(flag, ((flag & 14) << 7) + glyphs.readUInt8());\n        } else if (flag < 20) {\n            dx = $b6deb9db8685274b$var$withSign(flag, ((flag - 10 & 14) << 7) + glyphs.readUInt8());\n            dy = 0;\n        } else if (flag < 84) {\n            var b0 = flag - 20;\n            var b1 = glyphs.readUInt8();\n            dx = $b6deb9db8685274b$var$withSign(flag, 1 + (b0 & 0x30) + (b1 >> 4));\n            dy = $b6deb9db8685274b$var$withSign(flag >> 1, 1 + ((b0 & 0x0c) << 2) + (b1 & 0x0f));\n        } else if (flag < 120) {\n            var b0 = flag - 84;\n            dx = $b6deb9db8685274b$var$withSign(flag, 1 + (b0 / 12 << 8) + glyphs.readUInt8());\n            dy = $b6deb9db8685274b$var$withSign(flag >> 1, 1 + (b0 % 12 >> 2 << 8) + glyphs.readUInt8());\n        } else if (flag < 124) {\n            var b1 = glyphs.readUInt8();\n            let b2 = glyphs.readUInt8();\n            dx = $b6deb9db8685274b$var$withSign(flag, (b1 << 4) + (b2 >> 4));\n            dy = $b6deb9db8685274b$var$withSign(flag >> 1, ((b2 & 0x0f) << 8) + glyphs.readUInt8());\n        } else {\n            dx = $b6deb9db8685274b$var$withSign(flag, glyphs.readUInt16BE());\n            dy = $b6deb9db8685274b$var$withSign(flag >> 1, glyphs.readUInt16BE());\n        }\n        x += dx;\n        y += dy;\n        res.push(new $e20fdd09923e4c19$export$baf26146a414f24a(onCurve, false, x, y));\n    }\n    return res;\n}\nvar $313c698c6d2649a4$require$Buffer = buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer;\nlet $313c698c6d2649a4$var$TTCHeader = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, {\n    0x00010000: {\n        numFonts: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        offsets: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, \"numFonts\")\n    },\n    0x00020000: {\n        numFonts: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        offsets: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, \"numFonts\"),\n        dsigTag: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        dsigLength: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        dsigOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32\n    }\n});\nclass $313c698c6d2649a4$export$2e2bcd8739ae039 {\n    static probe(buffer) {\n        return buffer.toString(\"ascii\", 0, 4) === \"ttcf\";\n    }\n    constructor(stream){\n        this.type = \"TTC\";\n        this.stream = stream;\n        if (stream.readString(4) !== \"ttcf\") throw new Error(\"Not a TrueType collection\");\n        this.header = $313c698c6d2649a4$var$TTCHeader.decode(stream);\n    }\n    getFont(name) {\n        for (let offset of this.header.offsets){\n            let stream = new restructure__WEBPACK_IMPORTED_MODULE_0__.DecodeStream(this.stream.buffer);\n            stream.pos = offset;\n            let font = new $7de97f725b51e05a$export$2e2bcd8739ae039(stream);\n            if ($313c698c6d2649a4$require$Buffer.isBuffer(font.postscriptName) && font.postscriptName.equals(name) || font.postscriptName === name) return font;\n        }\n        return null;\n    }\n    get fonts() {\n        let fonts = [];\n        for (let offset of this.header.offsets){\n            let stream = new restructure__WEBPACK_IMPORTED_MODULE_0__.DecodeStream(this.stream.buffer);\n            stream.pos = offset;\n            fonts.push(new $7de97f725b51e05a$export$2e2bcd8739ae039(stream));\n        }\n        return fonts;\n    }\n}\nvar $7db119589c227f03$require$Buffer = buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer;\nlet $7db119589c227f03$var$DFontName = new restructure__WEBPACK_IMPORTED_MODULE_0__.String(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8);\nlet $7db119589c227f03$var$DFontData = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    len: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    buf: new restructure__WEBPACK_IMPORTED_MODULE_0__.Buffer(\"len\")\n});\nlet $7db119589c227f03$var$Ref = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    id: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    nameOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    attr: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    dataOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint24,\n    handle: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32\n});\nlet $7db119589c227f03$var$Type = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    name: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    maxTypeIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    refList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($7db119589c227f03$var$Ref, (t)=>t.maxTypeIndex + 1), {\n        type: \"parent\"\n    })\n});\nlet $7db119589c227f03$var$TypeList = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    types: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($7db119589c227f03$var$Type, (t)=>t.length + 1)\n});\nlet $7db119589c227f03$var$DFontMap = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, 24),\n    typeList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7db119589c227f03$var$TypeList),\n    nameListOffset: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"void\")\n});\nlet $7db119589c227f03$var$DFontHeader = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    dataOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    map: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $7db119589c227f03$var$DFontMap),\n    dataLength: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    mapLength: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32\n});\nclass $7db119589c227f03$export$2e2bcd8739ae039 {\n    static probe(buffer) {\n        let stream = new restructure__WEBPACK_IMPORTED_MODULE_0__.DecodeStream(buffer);\n        try {\n            var header = $7db119589c227f03$var$DFontHeader.decode(stream);\n        } catch (e) {\n            return false;\n        }\n        for (let type of header.map.typeList.types){\n            if (type.name === \"sfnt\") return true;\n        }\n        return false;\n    }\n    constructor(stream){\n        this.type = \"DFont\";\n        this.stream = stream;\n        this.header = $7db119589c227f03$var$DFontHeader.decode(this.stream);\n        for (let type of this.header.map.typeList.types){\n            for (let ref of type.refList)if (ref.nameOffset >= 0) {\n                this.stream.pos = ref.nameOffset + this.header.map.nameListOffset;\n                ref.name = $7db119589c227f03$var$DFontName.decode(this.stream);\n            } else ref.name = null;\n            if (type.name === \"sfnt\") this.sfnt = type;\n        }\n    }\n    getFont(name) {\n        if (!this.sfnt) return null;\n        for (let ref of this.sfnt.refList){\n            let pos = this.header.dataOffset + ref.dataOffset + 4;\n            let stream = new restructure__WEBPACK_IMPORTED_MODULE_0__.DecodeStream(this.stream.buffer.slice(pos));\n            let font = new $7de97f725b51e05a$export$2e2bcd8739ae039(stream);\n            if ($7db119589c227f03$require$Buffer.isBuffer(font.postscriptName) && font.postscriptName.equals(name) || font.postscriptName === name) return font;\n        }\n        return null;\n    }\n    get fonts() {\n        let fonts = [];\n        for (let ref of this.sfnt.refList){\n            let pos = this.header.dataOffset + ref.dataOffset + 4;\n            let stream = new restructure__WEBPACK_IMPORTED_MODULE_0__.DecodeStream(this.stream.buffer.slice(pos));\n            fonts.push(new $7de97f725b51e05a$export$2e2bcd8739ae039(stream));\n        }\n        return fonts;\n    }\n}\n// Register font formats\n$8857867ee3ddfad5$export$36b2f24e97d43be($7de97f725b51e05a$export$2e2bcd8739ae039);\n$8857867ee3ddfad5$export$36b2f24e97d43be($fce99fef0398d8c8$export$2e2bcd8739ae039);\n$8857867ee3ddfad5$export$36b2f24e97d43be($b6deb9db8685274b$export$2e2bcd8739ae039);\n$8857867ee3ddfad5$export$36b2f24e97d43be($313c698c6d2649a4$export$2e2bcd8739ae039);\n$8857867ee3ddfad5$export$36b2f24e97d43be($7db119589c227f03$export$2e2bcd8739ae039);\nvar $cf838c15c8b009ba$export$2e2bcd8739ae039 = {\n    registerFormat: $8857867ee3ddfad5$export$36b2f24e97d43be,\n    openSync: $8857867ee3ddfad5$export$fa5499edb1ab414a,\n    open: $8857867ee3ddfad5$export$3ce6949f20cea765,\n    create: $8857867ee3ddfad5$export$185802fd694ee1f5,\n    defaultLanguage: $8857867ee3ddfad5$export$42940898df819940,\n    setDefaultLanguage: $8857867ee3ddfad5$export$5157e7780d44cc36\n};\n //# sourceMappingURL=module.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fontkit/dist/module.mjs\n");

/***/ })

};
;