"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pdfkit";
exports.ids = ["vendor-chunks/pdfkit"];
exports.modules = {

/***/ "(rsc)/./node_modules/pdfkit/js/pdfkit.es5.js":
/*!**********************************************!*\
  !*** ./node_modules/pdfkit/js/pdfkit.es5.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(stream__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var zlib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zlib */ \"zlib\");\n/* harmony import */ var zlib__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(zlib__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var crypto_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! crypto-js */ \"(rsc)/./node_modules/crypto-js/index.js\");\n/* harmony import */ var crypto_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(crypto_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var fontkit__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! fontkit */ \"(rsc)/./node_modules/fontkit/dist/module.mjs\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var linebreak__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! linebreak */ \"(rsc)/./node_modules/linebreak/dist/module.mjs\");\n/* harmony import */ var png_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! png-js */ \"(rsc)/./node_modules/png-js/png-node.js\");\n/* harmony import */ var png_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(png_js__WEBPACK_IMPORTED_MODULE_7__);\n\n\n\n\n\n\n\n\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread2(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _iterableToArrayLimit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n    var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n    if (!it) {\n        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n            if (it) o = it;\n            var i = 0;\n            var F = function() {};\n            return {\n                s: F,\n                n: function() {\n                    if (i >= o.length) return {\n                        done: true\n                    };\n                    return {\n                        done: false,\n                        value: o[i++]\n                    };\n                },\n                e: function(e) {\n                    throw e;\n                },\n                f: F\n            };\n        }\n        throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n    var normalCompletion = true, didErr = false, err;\n    return {\n        s: function() {\n            it = it.call(o);\n        },\n        n: function() {\n            var step = it.next();\n            normalCompletion = step.done;\n            return step;\n        },\n        e: function(e) {\n            didErr = true;\n            err = e;\n        },\n        f: function() {\n            try {\n                if (!normalCompletion && it.return != null) it.return();\n            } finally{\n                if (didErr) throw err;\n            }\n        }\n    };\n}\n/*\r\nPDFAbstractReference - abstract class for PDF reference\r\n*/ var PDFAbstractReference = /*#__PURE__*/ function() {\n    function PDFAbstractReference() {\n        _classCallCheck(this, PDFAbstractReference);\n    }\n    _createClass(PDFAbstractReference, [\n        {\n            key: \"toString\",\n            value: function toString() {\n                throw new Error(\"Must be implemented by subclasses\");\n            }\n        }\n    ]);\n    return PDFAbstractReference;\n}();\nvar PDFTree = /*#__PURE__*/ function() {\n    function PDFTree() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        _classCallCheck(this, PDFTree);\n        this._items = {}; // disable /Limits output for this tree\n        this.limits = typeof options.limits === \"boolean\" ? options.limits : true;\n    }\n    _createClass(PDFTree, [\n        {\n            key: \"add\",\n            value: function add(key, val) {\n                return this._items[key] = val;\n            }\n        },\n        {\n            key: \"get\",\n            value: function get(key) {\n                return this._items[key];\n            }\n        },\n        {\n            key: \"toString\",\n            value: function toString() {\n                var _this = this;\n                // Needs to be sorted by key\n                var sortedKeys = Object.keys(this._items).sort(function(a, b) {\n                    return _this._compareKeys(a, b);\n                });\n                var out = [\n                    \"<<\"\n                ];\n                if (this.limits && sortedKeys.length > 1) {\n                    var first = sortedKeys[0], last = sortedKeys[sortedKeys.length - 1];\n                    out.push(\"  /Limits \".concat(PDFObject.convert([\n                        this._dataForKey(first),\n                        this._dataForKey(last)\n                    ])));\n                }\n                out.push(\"  /\".concat(this._keysName(), \" [\"));\n                var _iterator = _createForOfIteratorHelper(sortedKeys), _step;\n                try {\n                    for(_iterator.s(); !(_step = _iterator.n()).done;){\n                        var key = _step.value;\n                        out.push(\"    \".concat(PDFObject.convert(this._dataForKey(key)), \" \").concat(PDFObject.convert(this._items[key])));\n                    }\n                } catch (err) {\n                    _iterator.e(err);\n                } finally{\n                    _iterator.f();\n                }\n                out.push(\"]\");\n                out.push(\">>\");\n                return out.join(\"\\n\");\n            }\n        },\n        {\n            key: \"_compareKeys\",\n            value: function _compareKeys() {\n                throw new Error(\"Must be implemented by subclasses\");\n            }\n        },\n        {\n            key: \"_keysName\",\n            value: function _keysName() {\n                throw new Error(\"Must be implemented by subclasses\");\n            }\n        },\n        {\n            key: \"_dataForKey\",\n            value: function _dataForKey() {\n                throw new Error(\"Must be implemented by subclasses\");\n            }\n        }\n    ]);\n    return PDFTree;\n}();\nvar pad = function pad(str, length) {\n    return (Array(length + 1).join(\"0\") + str).slice(-length);\n};\nvar escapableRe = /[\\n\\r\\t\\b\\f()\\\\]/g;\nvar escapable = {\n    \"\\n\": \"\\\\n\",\n    \"\\r\": \"\\\\r\",\n    \"\t\": \"\\\\t\",\n    \"\\b\": \"\\\\b\",\n    \"\\f\": \"\\\\f\",\n    \"\\\\\": \"\\\\\\\\\",\n    \"(\": \"\\\\(\",\n    \")\": \"\\\\)\"\n}; // Convert little endian UTF-16 to big endian\nvar swapBytes = function swapBytes(buff) {\n    var l = buff.length;\n    if (l & 0x01) {\n        throw new Error(\"Buffer length must be even\");\n    } else {\n        for(var i = 0, end = l - 1; i < end; i += 2){\n            var a = buff[i];\n            buff[i] = buff[i + 1];\n            buff[i + 1] = a;\n        }\n    }\n    return buff;\n};\nvar PDFObject = /*#__PURE__*/ function() {\n    function PDFObject() {\n        _classCallCheck(this, PDFObject);\n    }\n    _createClass(PDFObject, null, [\n        {\n            key: \"convert\",\n            value: function convert(object) {\n                var encryptFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n                // String literals are converted to the PDF name type\n                if (typeof object === \"string\") {\n                    return \"/\".concat(object); // String objects are converted to PDF strings (UTF-16)\n                } else if (object instanceof String) {\n                    var string = object; // Detect if this is a unicode string\n                    var isUnicode = false;\n                    for(var i = 0, end = string.length; i < end; i++){\n                        if (string.charCodeAt(i) > 0x7f) {\n                            isUnicode = true;\n                            break;\n                        }\n                    } // If so, encode it as big endian UTF-16\n                    var stringBuffer;\n                    if (isUnicode) {\n                        stringBuffer = swapBytes(Buffer.from(\"\\uFEFF\".concat(string), \"utf16le\"));\n                    } else {\n                        stringBuffer = Buffer.from(string.valueOf(), \"ascii\");\n                    } // Encrypt the string when necessary\n                    if (encryptFn) {\n                        string = encryptFn(stringBuffer).toString(\"binary\");\n                    } else {\n                        string = stringBuffer.toString(\"binary\");\n                    } // Escape characters as required by the spec\n                    string = string.replace(escapableRe, function(c) {\n                        return escapable[c];\n                    });\n                    return \"(\".concat(string, \")\"); // Buffers are converted to PDF hex strings\n                } else if (Buffer.isBuffer(object)) {\n                    return \"<\".concat(object.toString(\"hex\"), \">\");\n                } else if (object instanceof PDFAbstractReference || object instanceof PDFTree) {\n                    return object.toString();\n                } else if (object instanceof Date) {\n                    var _string = \"D:\".concat(pad(object.getUTCFullYear(), 4)) + pad(object.getUTCMonth() + 1, 2) + pad(object.getUTCDate(), 2) + pad(object.getUTCHours(), 2) + pad(object.getUTCMinutes(), 2) + pad(object.getUTCSeconds(), 2) + \"Z\"; // Encrypt the string when necessary\n                    if (encryptFn) {\n                        _string = encryptFn(Buffer.from(_string, \"ascii\")).toString(\"binary\"); // Escape characters as required by the spec\n                        _string = _string.replace(escapableRe, function(c) {\n                            return escapable[c];\n                        });\n                    }\n                    return \"(\".concat(_string, \")\");\n                } else if (Array.isArray(object)) {\n                    var items = object.map(function(e) {\n                        return PDFObject.convert(e, encryptFn);\n                    }).join(\" \");\n                    return \"[\".concat(items, \"]\");\n                } else if (({}).toString.call(object) === \"[object Object]\") {\n                    var out = [\n                        \"<<\"\n                    ];\n                    for(var key in object){\n                        var val = object[key];\n                        out.push(\"/\".concat(key, \" \").concat(PDFObject.convert(val, encryptFn)));\n                    }\n                    out.push(\">>\");\n                    return out.join(\"\\n\");\n                } else if (typeof object === \"number\") {\n                    return PDFObject.number(object);\n                } else {\n                    return \"\".concat(object);\n                }\n            }\n        },\n        {\n            key: \"number\",\n            value: function number(n) {\n                if (n > -1e21 && n < 1e21) {\n                    return Math.round(n * 1e6) / 1e6;\n                }\n                throw new Error(\"unsupported number: \".concat(n));\n            }\n        }\n    ]);\n    return PDFObject;\n}();\nvar PDFReference = /*#__PURE__*/ function(_PDFAbstractReference) {\n    _inherits(PDFReference, _PDFAbstractReference);\n    var _super = _createSuper(PDFReference);\n    function PDFReference(document, id) {\n        var _this;\n        var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        _classCallCheck(this, PDFReference);\n        _this = _super.call(this);\n        _this.document = document;\n        _this.id = id;\n        _this.data = data;\n        _this.gen = 0;\n        _this.compress = _this.document.compress && !_this.data.Filter;\n        _this.uncompressedLength = 0;\n        _this.buffer = [];\n        return _this;\n    }\n    _createClass(PDFReference, [\n        {\n            key: \"write\",\n            value: function write(chunk) {\n                if (!Buffer.isBuffer(chunk)) {\n                    chunk = Buffer.from(chunk + \"\\n\", \"binary\");\n                }\n                this.uncompressedLength += chunk.length;\n                if (this.data.Length == null) {\n                    this.data.Length = 0;\n                }\n                this.buffer.push(chunk);\n                this.data.Length += chunk.length;\n                if (this.compress) {\n                    return this.data.Filter = \"FlateDecode\";\n                }\n            }\n        },\n        {\n            key: \"end\",\n            value: function end(chunk) {\n                if (chunk) {\n                    this.write(chunk);\n                }\n                return this.finalize();\n            }\n        },\n        {\n            key: \"finalize\",\n            value: function finalize() {\n                this.offset = this.document._offset;\n                var encryptFn = this.document._security ? this.document._security.getEncryptFn(this.id, this.gen) : null;\n                if (this.buffer.length) {\n                    this.buffer = Buffer.concat(this.buffer);\n                    if (this.compress) {\n                        this.buffer = zlib__WEBPACK_IMPORTED_MODULE_2___default().deflateSync(this.buffer);\n                    }\n                    if (encryptFn) {\n                        this.buffer = encryptFn(this.buffer);\n                    }\n                    this.data.Length = this.buffer.length;\n                }\n                this.document._write(\"\".concat(this.id, \" \").concat(this.gen, \" obj\"));\n                this.document._write(PDFObject.convert(this.data, encryptFn));\n                if (this.buffer.length) {\n                    this.document._write(\"stream\");\n                    this.document._write(this.buffer);\n                    this.buffer = []; // free up memory\n                    this.document._write(\"\\nendstream\");\n                }\n                this.document._write(\"endobj\");\n                this.document._refEnd(this);\n            }\n        },\n        {\n            key: \"toString\",\n            value: function toString() {\n                return \"\".concat(this.id, \" \").concat(this.gen, \" R\");\n            }\n        }\n    ]);\n    return PDFReference;\n}(PDFAbstractReference);\n/*\r\nPDFPage - represents a single page in the PDF document\r\nBy Devon Govett\r\n*/ var DEFAULT_MARGINS = {\n    top: 72,\n    left: 72,\n    bottom: 72,\n    right: 72\n};\nvar SIZES = {\n    \"4A0\": [\n        4767.87,\n        6740.79\n    ],\n    \"2A0\": [\n        3370.39,\n        4767.87\n    ],\n    A0: [\n        2383.94,\n        3370.39\n    ],\n    A1: [\n        1683.78,\n        2383.94\n    ],\n    A2: [\n        1190.55,\n        1683.78\n    ],\n    A3: [\n        841.89,\n        1190.55\n    ],\n    A4: [\n        595.28,\n        841.89\n    ],\n    A5: [\n        419.53,\n        595.28\n    ],\n    A6: [\n        297.64,\n        419.53\n    ],\n    A7: [\n        209.76,\n        297.64\n    ],\n    A8: [\n        147.4,\n        209.76\n    ],\n    A9: [\n        104.88,\n        147.4\n    ],\n    A10: [\n        73.7,\n        104.88\n    ],\n    B0: [\n        2834.65,\n        4008.19\n    ],\n    B1: [\n        2004.09,\n        2834.65\n    ],\n    B2: [\n        1417.32,\n        2004.09\n    ],\n    B3: [\n        1000.63,\n        1417.32\n    ],\n    B4: [\n        708.66,\n        1000.63\n    ],\n    B5: [\n        498.9,\n        708.66\n    ],\n    B6: [\n        354.33,\n        498.9\n    ],\n    B7: [\n        249.45,\n        354.33\n    ],\n    B8: [\n        175.75,\n        249.45\n    ],\n    B9: [\n        124.72,\n        175.75\n    ],\n    B10: [\n        87.87,\n        124.72\n    ],\n    C0: [\n        2599.37,\n        3676.54\n    ],\n    C1: [\n        1836.85,\n        2599.37\n    ],\n    C2: [\n        1298.27,\n        1836.85\n    ],\n    C3: [\n        918.43,\n        1298.27\n    ],\n    C4: [\n        649.13,\n        918.43\n    ],\n    C5: [\n        459.21,\n        649.13\n    ],\n    C6: [\n        323.15,\n        459.21\n    ],\n    C7: [\n        229.61,\n        323.15\n    ],\n    C8: [\n        161.57,\n        229.61\n    ],\n    C9: [\n        113.39,\n        161.57\n    ],\n    C10: [\n        79.37,\n        113.39\n    ],\n    RA0: [\n        2437.8,\n        3458.27\n    ],\n    RA1: [\n        1729.13,\n        2437.8\n    ],\n    RA2: [\n        1218.9,\n        1729.13\n    ],\n    RA3: [\n        864.57,\n        1218.9\n    ],\n    RA4: [\n        609.45,\n        864.57\n    ],\n    SRA0: [\n        2551.18,\n        3628.35\n    ],\n    SRA1: [\n        1814.17,\n        2551.18\n    ],\n    SRA2: [\n        1275.59,\n        1814.17\n    ],\n    SRA3: [\n        907.09,\n        1275.59\n    ],\n    SRA4: [\n        637.8,\n        907.09\n    ],\n    EXECUTIVE: [\n        521.86,\n        756.0\n    ],\n    FOLIO: [\n        612.0,\n        936.0\n    ],\n    LEGAL: [\n        612.0,\n        1008.0\n    ],\n    LETTER: [\n        612.0,\n        792.0\n    ],\n    TABLOID: [\n        792.0,\n        1224.0\n    ]\n};\nvar PDFPage = /*#__PURE__*/ function() {\n    function PDFPage(document) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        _classCallCheck(this, PDFPage);\n        this.document = document;\n        this.size = options.size || \"letter\";\n        this.layout = options.layout || \"portrait\"; // process margins\n        if (typeof options.margin === \"number\") {\n            this.margins = {\n                top: options.margin,\n                left: options.margin,\n                bottom: options.margin,\n                right: options.margin\n            }; // default to 1 inch margins\n        } else {\n            this.margins = options.margins || DEFAULT_MARGINS;\n        } // calculate page dimensions\n        var dimensions = Array.isArray(this.size) ? this.size : SIZES[this.size.toUpperCase()];\n        this.width = dimensions[this.layout === \"portrait\" ? 0 : 1];\n        this.height = dimensions[this.layout === \"portrait\" ? 1 : 0];\n        this.content = this.document.ref(); // Initialize the Font, XObject, and ExtGState dictionaries\n        this.resources = this.document.ref({\n            ProcSet: [\n                \"PDF\",\n                \"Text\",\n                \"ImageB\",\n                \"ImageC\",\n                \"ImageI\"\n            ]\n        }); // The page dictionary\n        this.dictionary = this.document.ref({\n            Type: \"Page\",\n            Parent: this.document._root.data.Pages,\n            MediaBox: [\n                0,\n                0,\n                this.width,\n                this.height\n            ],\n            Contents: this.content,\n            Resources: this.resources\n        });\n        this.markings = [];\n    } // Lazily create these objects\n    _createClass(PDFPage, [\n        {\n            key: \"fonts\",\n            get: function get() {\n                var data = this.resources.data;\n                return data.Font != null ? data.Font : data.Font = {};\n            }\n        },\n        {\n            key: \"xobjects\",\n            get: function get() {\n                var data = this.resources.data;\n                return data.XObject != null ? data.XObject : data.XObject = {};\n            }\n        },\n        {\n            key: \"ext_gstates\",\n            get: function get() {\n                var data = this.resources.data;\n                return data.ExtGState != null ? data.ExtGState : data.ExtGState = {};\n            }\n        },\n        {\n            key: \"patterns\",\n            get: function get() {\n                var data = this.resources.data;\n                return data.Pattern != null ? data.Pattern : data.Pattern = {};\n            }\n        },\n        {\n            key: \"colorSpaces\",\n            get: function get() {\n                var data = this.resources.data;\n                return data.ColorSpace || (data.ColorSpace = {});\n            }\n        },\n        {\n            key: \"annotations\",\n            get: function get() {\n                var data = this.dictionary.data;\n                return data.Annots != null ? data.Annots : data.Annots = [];\n            }\n        },\n        {\n            key: \"structParentTreeKey\",\n            get: function get() {\n                var data = this.dictionary.data;\n                return data.StructParents != null ? data.StructParents : data.StructParents = this.document.createStructParentTreeNextKey();\n            }\n        },\n        {\n            key: \"maxY\",\n            value: function maxY() {\n                return this.height - this.margins.bottom;\n            }\n        },\n        {\n            key: \"write\",\n            value: function write(chunk) {\n                return this.content.write(chunk);\n            }\n        },\n        {\n            key: \"end\",\n            value: function end() {\n                this.dictionary.end();\n                this.resources.end();\n                return this.content.end();\n            }\n        }\n    ]);\n    return PDFPage;\n}();\nvar PDFNameTree = /*#__PURE__*/ function(_PDFTree) {\n    _inherits(PDFNameTree, _PDFTree);\n    var _super = _createSuper(PDFNameTree);\n    function PDFNameTree() {\n        _classCallCheck(this, PDFNameTree);\n        return _super.apply(this, arguments);\n    }\n    _createClass(PDFNameTree, [\n        {\n            key: \"_compareKeys\",\n            value: function _compareKeys(a, b) {\n                return a.localeCompare(b);\n            }\n        },\n        {\n            key: \"_keysName\",\n            value: function _keysName() {\n                return \"Names\";\n            }\n        },\n        {\n            key: \"_dataForKey\",\n            value: function _dataForKey(k) {\n                return new String(k);\n            }\n        }\n    ]);\n    return PDFNameTree;\n}(PDFTree);\n/**\r\n * Check if value is in a range group.\r\n * @param {number} value\r\n * @param {number[]} rangeGroup\r\n * @returns {boolean}\r\n */ function inRange(value, rangeGroup) {\n    if (value < rangeGroup[0]) return false;\n    var startRange = 0;\n    var endRange = rangeGroup.length / 2;\n    while(startRange <= endRange){\n        var middleRange = Math.floor((startRange + endRange) / 2); // actual array index\n        var arrayIndex = middleRange * 2; // Check if value is in range pointed by actual index\n        if (value >= rangeGroup[arrayIndex] && value <= rangeGroup[arrayIndex + 1]) {\n            return true;\n        }\n        if (value > rangeGroup[arrayIndex + 1]) {\n            // Search Right Side Of Array\n            startRange = middleRange + 1;\n        } else {\n            // Search Left Side Of Array\n            endRange = middleRange - 1;\n        }\n    }\n    return false;\n}\n/**\r\n * A.1 Unassigned code points in Unicode 3.2\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-A.1\r\n */ var unassigned_code_points = [\n    0x0221,\n    0x0221,\n    0x0234,\n    0x024f,\n    0x02ae,\n    0x02af,\n    0x02ef,\n    0x02ff,\n    0x0350,\n    0x035f,\n    0x0370,\n    0x0373,\n    0x0376,\n    0x0379,\n    0x037b,\n    0x037d,\n    0x037f,\n    0x0383,\n    0x038b,\n    0x038b,\n    0x038d,\n    0x038d,\n    0x03a2,\n    0x03a2,\n    0x03cf,\n    0x03cf,\n    0x03f7,\n    0x03ff,\n    0x0487,\n    0x0487,\n    0x04cf,\n    0x04cf,\n    0x04f6,\n    0x04f7,\n    0x04fa,\n    0x04ff,\n    0x0510,\n    0x0530,\n    0x0557,\n    0x0558,\n    0x0560,\n    0x0560,\n    0x0588,\n    0x0588,\n    0x058b,\n    0x0590,\n    0x05a2,\n    0x05a2,\n    0x05ba,\n    0x05ba,\n    0x05c5,\n    0x05cf,\n    0x05eb,\n    0x05ef,\n    0x05f5,\n    0x060b,\n    0x060d,\n    0x061a,\n    0x061c,\n    0x061e,\n    0x0620,\n    0x0620,\n    0x063b,\n    0x063f,\n    0x0656,\n    0x065f,\n    0x06ee,\n    0x06ef,\n    0x06ff,\n    0x06ff,\n    0x070e,\n    0x070e,\n    0x072d,\n    0x072f,\n    0x074b,\n    0x077f,\n    0x07b2,\n    0x0900,\n    0x0904,\n    0x0904,\n    0x093a,\n    0x093b,\n    0x094e,\n    0x094f,\n    0x0955,\n    0x0957,\n    0x0971,\n    0x0980,\n    0x0984,\n    0x0984,\n    0x098d,\n    0x098e,\n    0x0991,\n    0x0992,\n    0x09a9,\n    0x09a9,\n    0x09b1,\n    0x09b1,\n    0x09b3,\n    0x09b5,\n    0x09ba,\n    0x09bb,\n    0x09bd,\n    0x09bd,\n    0x09c5,\n    0x09c6,\n    0x09c9,\n    0x09ca,\n    0x09ce,\n    0x09d6,\n    0x09d8,\n    0x09db,\n    0x09de,\n    0x09de,\n    0x09e4,\n    0x09e5,\n    0x09fb,\n    0x0a01,\n    0x0a03,\n    0x0a04,\n    0x0a0b,\n    0x0a0e,\n    0x0a11,\n    0x0a12,\n    0x0a29,\n    0x0a29,\n    0x0a31,\n    0x0a31,\n    0x0a34,\n    0x0a34,\n    0x0a37,\n    0x0a37,\n    0x0a3a,\n    0x0a3b,\n    0x0a3d,\n    0x0a3d,\n    0x0a43,\n    0x0a46,\n    0x0a49,\n    0x0a4a,\n    0x0a4e,\n    0x0a58,\n    0x0a5d,\n    0x0a5d,\n    0x0a5f,\n    0x0a65,\n    0x0a75,\n    0x0a80,\n    0x0a84,\n    0x0a84,\n    0x0a8c,\n    0x0a8c,\n    0x0a8e,\n    0x0a8e,\n    0x0a92,\n    0x0a92,\n    0x0aa9,\n    0x0aa9,\n    0x0ab1,\n    0x0ab1,\n    0x0ab4,\n    0x0ab4,\n    0x0aba,\n    0x0abb,\n    0x0ac6,\n    0x0ac6,\n    0x0aca,\n    0x0aca,\n    0x0ace,\n    0x0acf,\n    0x0ad1,\n    0x0adf,\n    0x0ae1,\n    0x0ae5,\n    0x0af0,\n    0x0b00,\n    0x0b04,\n    0x0b04,\n    0x0b0d,\n    0x0b0e,\n    0x0b11,\n    0x0b12,\n    0x0b29,\n    0x0b29,\n    0x0b31,\n    0x0b31,\n    0x0b34,\n    0x0b35,\n    0x0b3a,\n    0x0b3b,\n    0x0b44,\n    0x0b46,\n    0x0b49,\n    0x0b4a,\n    0x0b4e,\n    0x0b55,\n    0x0b58,\n    0x0b5b,\n    0x0b5e,\n    0x0b5e,\n    0x0b62,\n    0x0b65,\n    0x0b71,\n    0x0b81,\n    0x0b84,\n    0x0b84,\n    0x0b8b,\n    0x0b8d,\n    0x0b91,\n    0x0b91,\n    0x0b96,\n    0x0b98,\n    0x0b9b,\n    0x0b9b,\n    0x0b9d,\n    0x0b9d,\n    0x0ba0,\n    0x0ba2,\n    0x0ba5,\n    0x0ba7,\n    0x0bab,\n    0x0bad,\n    0x0bb6,\n    0x0bb6,\n    0x0bba,\n    0x0bbd,\n    0x0bc3,\n    0x0bc5,\n    0x0bc9,\n    0x0bc9,\n    0x0bce,\n    0x0bd6,\n    0x0bd8,\n    0x0be6,\n    0x0bf3,\n    0x0c00,\n    0x0c04,\n    0x0c04,\n    0x0c0d,\n    0x0c0d,\n    0x0c11,\n    0x0c11,\n    0x0c29,\n    0x0c29,\n    0x0c34,\n    0x0c34,\n    0x0c3a,\n    0x0c3d,\n    0x0c45,\n    0x0c45,\n    0x0c49,\n    0x0c49,\n    0x0c4e,\n    0x0c54,\n    0x0c57,\n    0x0c5f,\n    0x0c62,\n    0x0c65,\n    0x0c70,\n    0x0c81,\n    0x0c84,\n    0x0c84,\n    0x0c8d,\n    0x0c8d,\n    0x0c91,\n    0x0c91,\n    0x0ca9,\n    0x0ca9,\n    0x0cb4,\n    0x0cb4,\n    0x0cba,\n    0x0cbd,\n    0x0cc5,\n    0x0cc5,\n    0x0cc9,\n    0x0cc9,\n    0x0cce,\n    0x0cd4,\n    0x0cd7,\n    0x0cdd,\n    0x0cdf,\n    0x0cdf,\n    0x0ce2,\n    0x0ce5,\n    0x0cf0,\n    0x0d01,\n    0x0d04,\n    0x0d04,\n    0x0d0d,\n    0x0d0d,\n    0x0d11,\n    0x0d11,\n    0x0d29,\n    0x0d29,\n    0x0d3a,\n    0x0d3d,\n    0x0d44,\n    0x0d45,\n    0x0d49,\n    0x0d49,\n    0x0d4e,\n    0x0d56,\n    0x0d58,\n    0x0d5f,\n    0x0d62,\n    0x0d65,\n    0x0d70,\n    0x0d81,\n    0x0d84,\n    0x0d84,\n    0x0d97,\n    0x0d99,\n    0x0db2,\n    0x0db2,\n    0x0dbc,\n    0x0dbc,\n    0x0dbe,\n    0x0dbf,\n    0x0dc7,\n    0x0dc9,\n    0x0dcb,\n    0x0dce,\n    0x0dd5,\n    0x0dd5,\n    0x0dd7,\n    0x0dd7,\n    0x0de0,\n    0x0df1,\n    0x0df5,\n    0x0e00,\n    0x0e3b,\n    0x0e3e,\n    0x0e5c,\n    0x0e80,\n    0x0e83,\n    0x0e83,\n    0x0e85,\n    0x0e86,\n    0x0e89,\n    0x0e89,\n    0x0e8b,\n    0x0e8c,\n    0x0e8e,\n    0x0e93,\n    0x0e98,\n    0x0e98,\n    0x0ea0,\n    0x0ea0,\n    0x0ea4,\n    0x0ea4,\n    0x0ea6,\n    0x0ea6,\n    0x0ea8,\n    0x0ea9,\n    0x0eac,\n    0x0eac,\n    0x0eba,\n    0x0eba,\n    0x0ebe,\n    0x0ebf,\n    0x0ec5,\n    0x0ec5,\n    0x0ec7,\n    0x0ec7,\n    0x0ece,\n    0x0ecf,\n    0x0eda,\n    0x0edb,\n    0x0ede,\n    0x0eff,\n    0x0f48,\n    0x0f48,\n    0x0f6b,\n    0x0f70,\n    0x0f8c,\n    0x0f8f,\n    0x0f98,\n    0x0f98,\n    0x0fbd,\n    0x0fbd,\n    0x0fcd,\n    0x0fce,\n    0x0fd0,\n    0x0fff,\n    0x1022,\n    0x1022,\n    0x1028,\n    0x1028,\n    0x102b,\n    0x102b,\n    0x1033,\n    0x1035,\n    0x103a,\n    0x103f,\n    0x105a,\n    0x109f,\n    0x10c6,\n    0x10cf,\n    0x10f9,\n    0x10fa,\n    0x10fc,\n    0x10ff,\n    0x115a,\n    0x115e,\n    0x11a3,\n    0x11a7,\n    0x11fa,\n    0x11ff,\n    0x1207,\n    0x1207,\n    0x1247,\n    0x1247,\n    0x1249,\n    0x1249,\n    0x124e,\n    0x124f,\n    0x1257,\n    0x1257,\n    0x1259,\n    0x1259,\n    0x125e,\n    0x125f,\n    0x1287,\n    0x1287,\n    0x1289,\n    0x1289,\n    0x128e,\n    0x128f,\n    0x12af,\n    0x12af,\n    0x12b1,\n    0x12b1,\n    0x12b6,\n    0x12b7,\n    0x12bf,\n    0x12bf,\n    0x12c1,\n    0x12c1,\n    0x12c6,\n    0x12c7,\n    0x12cf,\n    0x12cf,\n    0x12d7,\n    0x12d7,\n    0x12ef,\n    0x12ef,\n    0x130f,\n    0x130f,\n    0x1311,\n    0x1311,\n    0x1316,\n    0x1317,\n    0x131f,\n    0x131f,\n    0x1347,\n    0x1347,\n    0x135b,\n    0x1360,\n    0x137d,\n    0x139f,\n    0x13f5,\n    0x1400,\n    0x1677,\n    0x167f,\n    0x169d,\n    0x169f,\n    0x16f1,\n    0x16ff,\n    0x170d,\n    0x170d,\n    0x1715,\n    0x171f,\n    0x1737,\n    0x173f,\n    0x1754,\n    0x175f,\n    0x176d,\n    0x176d,\n    0x1771,\n    0x1771,\n    0x1774,\n    0x177f,\n    0x17dd,\n    0x17df,\n    0x17ea,\n    0x17ff,\n    0x180f,\n    0x180f,\n    0x181a,\n    0x181f,\n    0x1878,\n    0x187f,\n    0x18aa,\n    0x1dff,\n    0x1e9c,\n    0x1e9f,\n    0x1efa,\n    0x1eff,\n    0x1f16,\n    0x1f17,\n    0x1f1e,\n    0x1f1f,\n    0x1f46,\n    0x1f47,\n    0x1f4e,\n    0x1f4f,\n    0x1f58,\n    0x1f58,\n    0x1f5a,\n    0x1f5a,\n    0x1f5c,\n    0x1f5c,\n    0x1f5e,\n    0x1f5e,\n    0x1f7e,\n    0x1f7f,\n    0x1fb5,\n    0x1fb5,\n    0x1fc5,\n    0x1fc5,\n    0x1fd4,\n    0x1fd5,\n    0x1fdc,\n    0x1fdc,\n    0x1ff0,\n    0x1ff1,\n    0x1ff5,\n    0x1ff5,\n    0x1fff,\n    0x1fff,\n    0x2053,\n    0x2056,\n    0x2058,\n    0x205e,\n    0x2064,\n    0x2069,\n    0x2072,\n    0x2073,\n    0x208f,\n    0x209f,\n    0x20b2,\n    0x20cf,\n    0x20eb,\n    0x20ff,\n    0x213b,\n    0x213c,\n    0x214c,\n    0x2152,\n    0x2184,\n    0x218f,\n    0x23cf,\n    0x23ff,\n    0x2427,\n    0x243f,\n    0x244b,\n    0x245f,\n    0x24ff,\n    0x24ff,\n    0x2614,\n    0x2615,\n    0x2618,\n    0x2618,\n    0x267e,\n    0x267f,\n    0x268a,\n    0x2700,\n    0x2705,\n    0x2705,\n    0x270a,\n    0x270b,\n    0x2728,\n    0x2728,\n    0x274c,\n    0x274c,\n    0x274e,\n    0x274e,\n    0x2753,\n    0x2755,\n    0x2757,\n    0x2757,\n    0x275f,\n    0x2760,\n    0x2795,\n    0x2797,\n    0x27b0,\n    0x27b0,\n    0x27bf,\n    0x27cf,\n    0x27ec,\n    0x27ef,\n    0x2b00,\n    0x2e7f,\n    0x2e9a,\n    0x2e9a,\n    0x2ef4,\n    0x2eff,\n    0x2fd6,\n    0x2fef,\n    0x2ffc,\n    0x2fff,\n    0x3040,\n    0x3040,\n    0x3097,\n    0x3098,\n    0x3100,\n    0x3104,\n    0x312d,\n    0x3130,\n    0x318f,\n    0x318f,\n    0x31b8,\n    0x31ef,\n    0x321d,\n    0x321f,\n    0x3244,\n    0x3250,\n    0x327c,\n    0x327e,\n    0x32cc,\n    0x32cf,\n    0x32ff,\n    0x32ff,\n    0x3377,\n    0x337a,\n    0x33de,\n    0x33df,\n    0x33ff,\n    0x33ff,\n    0x4db6,\n    0x4dff,\n    0x9fa6,\n    0x9fff,\n    0xa48d,\n    0xa48f,\n    0xa4c7,\n    0xabff,\n    0xd7a4,\n    0xd7ff,\n    0xfa2e,\n    0xfa2f,\n    0xfa6b,\n    0xfaff,\n    0xfb07,\n    0xfb12,\n    0xfb18,\n    0xfb1c,\n    0xfb37,\n    0xfb37,\n    0xfb3d,\n    0xfb3d,\n    0xfb3f,\n    0xfb3f,\n    0xfb42,\n    0xfb42,\n    0xfb45,\n    0xfb45,\n    0xfbb2,\n    0xfbd2,\n    0xfd40,\n    0xfd4f,\n    0xfd90,\n    0xfd91,\n    0xfdc8,\n    0xfdcf,\n    0xfdfd,\n    0xfdff,\n    0xfe10,\n    0xfe1f,\n    0xfe24,\n    0xfe2f,\n    0xfe47,\n    0xfe48,\n    0xfe53,\n    0xfe53,\n    0xfe67,\n    0xfe67,\n    0xfe6c,\n    0xfe6f,\n    0xfe75,\n    0xfe75,\n    0xfefd,\n    0xfefe,\n    0xff00,\n    0xff00,\n    0xffbf,\n    0xffc1,\n    0xffc8,\n    0xffc9,\n    0xffd0,\n    0xffd1,\n    0xffd8,\n    0xffd9,\n    0xffdd,\n    0xffdf,\n    0xffe7,\n    0xffe7,\n    0xffef,\n    0xfff8,\n    0x10000,\n    0x102ff,\n    0x1031f,\n    0x1031f,\n    0x10324,\n    0x1032f,\n    0x1034b,\n    0x103ff,\n    0x10426,\n    0x10427,\n    0x1044e,\n    0x1cfff,\n    0x1d0f6,\n    0x1d0ff,\n    0x1d127,\n    0x1d129,\n    0x1d1de,\n    0x1d3ff,\n    0x1d455,\n    0x1d455,\n    0x1d49d,\n    0x1d49d,\n    0x1d4a0,\n    0x1d4a1,\n    0x1d4a3,\n    0x1d4a4,\n    0x1d4a7,\n    0x1d4a8,\n    0x1d4ad,\n    0x1d4ad,\n    0x1d4ba,\n    0x1d4ba,\n    0x1d4bc,\n    0x1d4bc,\n    0x1d4c1,\n    0x1d4c1,\n    0x1d4c4,\n    0x1d4c4,\n    0x1d506,\n    0x1d506,\n    0x1d50b,\n    0x1d50c,\n    0x1d515,\n    0x1d515,\n    0x1d51d,\n    0x1d51d,\n    0x1d53a,\n    0x1d53a,\n    0x1d53f,\n    0x1d53f,\n    0x1d545,\n    0x1d545,\n    0x1d547,\n    0x1d549,\n    0x1d551,\n    0x1d551,\n    0x1d6a4,\n    0x1d6a7,\n    0x1d7ca,\n    0x1d7cd,\n    0x1d800,\n    0x1fffd,\n    0x2a6d7,\n    0x2f7ff,\n    0x2fa1e,\n    0x2fffd,\n    0x30000,\n    0x3fffd,\n    0x40000,\n    0x4fffd,\n    0x50000,\n    0x5fffd,\n    0x60000,\n    0x6fffd,\n    0x70000,\n    0x7fffd,\n    0x80000,\n    0x8fffd,\n    0x90000,\n    0x9fffd,\n    0xa0000,\n    0xafffd,\n    0xb0000,\n    0xbfffd,\n    0xc0000,\n    0xcfffd,\n    0xd0000,\n    0xdfffd,\n    0xe0000,\n    0xe0000,\n    0xe0002,\n    0xe001f,\n    0xe0080,\n    0xefffd\n]; // prettier-ignore-end\nvar isUnassignedCodePoint = function isUnassignedCodePoint(character) {\n    return inRange(character, unassigned_code_points);\n}; // prettier-ignore-start\n/**\r\n * B.1 Commonly mapped to nothing\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-B.1\r\n */ var commonly_mapped_to_nothing = [\n    0x00ad,\n    0x00ad,\n    0x034f,\n    0x034f,\n    0x1806,\n    0x1806,\n    0x180b,\n    0x180b,\n    0x180c,\n    0x180c,\n    0x180d,\n    0x180d,\n    0x200b,\n    0x200b,\n    0x200c,\n    0x200c,\n    0x200d,\n    0x200d,\n    0x2060,\n    0x2060,\n    0xfe00,\n    0xfe00,\n    0xfe01,\n    0xfe01,\n    0xfe02,\n    0xfe02,\n    0xfe03,\n    0xfe03,\n    0xfe04,\n    0xfe04,\n    0xfe05,\n    0xfe05,\n    0xfe06,\n    0xfe06,\n    0xfe07,\n    0xfe07,\n    0xfe08,\n    0xfe08,\n    0xfe09,\n    0xfe09,\n    0xfe0a,\n    0xfe0a,\n    0xfe0b,\n    0xfe0b,\n    0xfe0c,\n    0xfe0c,\n    0xfe0d,\n    0xfe0d,\n    0xfe0e,\n    0xfe0e,\n    0xfe0f,\n    0xfe0f,\n    0xfeff,\n    0xfeff\n]; // prettier-ignore-end\nvar isCommonlyMappedToNothing = function isCommonlyMappedToNothing(character) {\n    return inRange(character, commonly_mapped_to_nothing);\n}; // prettier-ignore-start\n/**\r\n * C.1.2 Non-ASCII space characters\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-C.1.2\r\n */ var non_ASCII_space_characters = [\n    0x00a0,\n    0x00a0,\n    0x1680,\n    0x1680,\n    0x2000,\n    0x2000,\n    0x2001,\n    0x2001,\n    0x2002,\n    0x2002,\n    0x2003,\n    0x2003,\n    0x2004,\n    0x2004,\n    0x2005,\n    0x2005,\n    0x2006,\n    0x2006,\n    0x2007,\n    0x2007,\n    0x2008,\n    0x2008,\n    0x2009,\n    0x2009,\n    0x200a,\n    0x200a,\n    0x200b,\n    0x200b,\n    0x202f,\n    0x202f,\n    0x205f,\n    0x205f,\n    0x3000,\n    0x3000\n]; // prettier-ignore-end\nvar isNonASCIISpaceCharacter = function isNonASCIISpaceCharacter(character) {\n    return inRange(character, non_ASCII_space_characters);\n}; // prettier-ignore-start\nvar non_ASCII_controls_characters = [\n    /**\r\n * C.2.2 Non-ASCII control characters\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-C.2.2\r\n */ 0x0080,\n    0x009f,\n    0x06dd,\n    0x06dd,\n    0x070f,\n    0x070f,\n    0x180e,\n    0x180e,\n    0x200c,\n    0x200c,\n    0x200d,\n    0x200d,\n    0x2028,\n    0x2028,\n    0x2029,\n    0x2029,\n    0x2060,\n    0x2060,\n    0x2061,\n    0x2061,\n    0x2062,\n    0x2062,\n    0x2063,\n    0x2063,\n    0x206a,\n    0x206f,\n    0xfeff,\n    0xfeff,\n    0xfff9,\n    0xfffc,\n    0x1d173,\n    0x1d17a\n];\nvar non_character_codepoints = [\n    /**\r\n * C.4 Non-character code points\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-C.4\r\n */ 0xfdd0,\n    0xfdef,\n    0xfffe,\n    0xffff,\n    0x1fffe,\n    0x1ffff,\n    0x2fffe,\n    0x2ffff,\n    0x3fffe,\n    0x3ffff,\n    0x4fffe,\n    0x4ffff,\n    0x5fffe,\n    0x5ffff,\n    0x6fffe,\n    0x6ffff,\n    0x7fffe,\n    0x7ffff,\n    0x8fffe,\n    0x8ffff,\n    0x9fffe,\n    0x9ffff,\n    0xafffe,\n    0xaffff,\n    0xbfffe,\n    0xbffff,\n    0xcfffe,\n    0xcffff,\n    0xdfffe,\n    0xdffff,\n    0xefffe,\n    0xeffff,\n    0x10fffe,\n    0x10ffff\n];\n/**\r\n * 2.3.  Prohibited Output\r\n */ var prohibited_characters = [\n    /**\r\n * C.2.1 ASCII control characters\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-C.2.1\r\n */ 0,\n    0x001f,\n    0x007f,\n    0x007f,\n    /**\r\n * C.8 Change display properties or are deprecated\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-C.8\r\n */ 0x0340,\n    0x0340,\n    0x0341,\n    0x0341,\n    0x200e,\n    0x200e,\n    0x200f,\n    0x200f,\n    0x202a,\n    0x202a,\n    0x202b,\n    0x202b,\n    0x202c,\n    0x202c,\n    0x202d,\n    0x202d,\n    0x202e,\n    0x202e,\n    0x206a,\n    0x206a,\n    0x206b,\n    0x206b,\n    0x206c,\n    0x206c,\n    0x206d,\n    0x206d,\n    0x206e,\n    0x206e,\n    0x206f,\n    0x206f,\n    /**\r\n * C.7 Inappropriate for canonical representation\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-C.7\r\n */ 0x2ff0,\n    0x2ffb,\n    /**\r\n * C.5 Surrogate codes\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-C.5\r\n */ 0xd800,\n    0xdfff,\n    /**\r\n * C.3 Private use\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-C.3\r\n */ 0xe000,\n    0xf8ff,\n    /**\r\n * C.6 Inappropriate for plain text\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-C.6\r\n */ 0xfff9,\n    0xfff9,\n    0xfffa,\n    0xfffa,\n    0xfffb,\n    0xfffb,\n    0xfffc,\n    0xfffc,\n    0xfffd,\n    0xfffd,\n    /**\r\n * C.9 Tagging characters\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-C.9\r\n */ 0xe0001,\n    0xe0001,\n    0xe0020,\n    0xe007f,\n    /**\r\n * C.3 Private use\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-C.3\r\n */ 0xf0000,\n    0xffffd,\n    0x100000,\n    0x10fffd\n]; // prettier-ignore-end\nvar isProhibitedCharacter = function isProhibitedCharacter(character) {\n    return inRange(character, non_ASCII_space_characters) || inRange(character, prohibited_characters) || inRange(character, non_ASCII_controls_characters) || inRange(character, non_character_codepoints);\n}; // prettier-ignore-start\n/**\r\n * D.1 Characters with bidirectional property \"R\" or \"AL\"\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-D.1\r\n */ var bidirectional_r_al = [\n    0x05be,\n    0x05be,\n    0x05c0,\n    0x05c0,\n    0x05c3,\n    0x05c3,\n    0x05d0,\n    0x05ea,\n    0x05f0,\n    0x05f4,\n    0x061b,\n    0x061b,\n    0x061f,\n    0x061f,\n    0x0621,\n    0x063a,\n    0x0640,\n    0x064a,\n    0x066d,\n    0x066f,\n    0x0671,\n    0x06d5,\n    0x06dd,\n    0x06dd,\n    0x06e5,\n    0x06e6,\n    0x06fa,\n    0x06fe,\n    0x0700,\n    0x070d,\n    0x0710,\n    0x0710,\n    0x0712,\n    0x072c,\n    0x0780,\n    0x07a5,\n    0x07b1,\n    0x07b1,\n    0x200f,\n    0x200f,\n    0xfb1d,\n    0xfb1d,\n    0xfb1f,\n    0xfb28,\n    0xfb2a,\n    0xfb36,\n    0xfb38,\n    0xfb3c,\n    0xfb3e,\n    0xfb3e,\n    0xfb40,\n    0xfb41,\n    0xfb43,\n    0xfb44,\n    0xfb46,\n    0xfbb1,\n    0xfbd3,\n    0xfd3d,\n    0xfd50,\n    0xfd8f,\n    0xfd92,\n    0xfdc7,\n    0xfdf0,\n    0xfdfc,\n    0xfe70,\n    0xfe74,\n    0xfe76,\n    0xfefc\n]; // prettier-ignore-end\nvar isBidirectionalRAL = function isBidirectionalRAL(character) {\n    return inRange(character, bidirectional_r_al);\n}; // prettier-ignore-start\n/**\r\n * D.2 Characters with bidirectional property \"L\"\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-D.2\r\n */ var bidirectional_l = [\n    0x0041,\n    0x005a,\n    0x0061,\n    0x007a,\n    0x00aa,\n    0x00aa,\n    0x00b5,\n    0x00b5,\n    0x00ba,\n    0x00ba,\n    0x00c0,\n    0x00d6,\n    0x00d8,\n    0x00f6,\n    0x00f8,\n    0x0220,\n    0x0222,\n    0x0233,\n    0x0250,\n    0x02ad,\n    0x02b0,\n    0x02b8,\n    0x02bb,\n    0x02c1,\n    0x02d0,\n    0x02d1,\n    0x02e0,\n    0x02e4,\n    0x02ee,\n    0x02ee,\n    0x037a,\n    0x037a,\n    0x0386,\n    0x0386,\n    0x0388,\n    0x038a,\n    0x038c,\n    0x038c,\n    0x038e,\n    0x03a1,\n    0x03a3,\n    0x03ce,\n    0x03d0,\n    0x03f5,\n    0x0400,\n    0x0482,\n    0x048a,\n    0x04ce,\n    0x04d0,\n    0x04f5,\n    0x04f8,\n    0x04f9,\n    0x0500,\n    0x050f,\n    0x0531,\n    0x0556,\n    0x0559,\n    0x055f,\n    0x0561,\n    0x0587,\n    0x0589,\n    0x0589,\n    0x0903,\n    0x0903,\n    0x0905,\n    0x0939,\n    0x093d,\n    0x0940,\n    0x0949,\n    0x094c,\n    0x0950,\n    0x0950,\n    0x0958,\n    0x0961,\n    0x0964,\n    0x0970,\n    0x0982,\n    0x0983,\n    0x0985,\n    0x098c,\n    0x098f,\n    0x0990,\n    0x0993,\n    0x09a8,\n    0x09aa,\n    0x09b0,\n    0x09b2,\n    0x09b2,\n    0x09b6,\n    0x09b9,\n    0x09be,\n    0x09c0,\n    0x09c7,\n    0x09c8,\n    0x09cb,\n    0x09cc,\n    0x09d7,\n    0x09d7,\n    0x09dc,\n    0x09dd,\n    0x09df,\n    0x09e1,\n    0x09e6,\n    0x09f1,\n    0x09f4,\n    0x09fa,\n    0x0a05,\n    0x0a0a,\n    0x0a0f,\n    0x0a10,\n    0x0a13,\n    0x0a28,\n    0x0a2a,\n    0x0a30,\n    0x0a32,\n    0x0a33,\n    0x0a35,\n    0x0a36,\n    0x0a38,\n    0x0a39,\n    0x0a3e,\n    0x0a40,\n    0x0a59,\n    0x0a5c,\n    0x0a5e,\n    0x0a5e,\n    0x0a66,\n    0x0a6f,\n    0x0a72,\n    0x0a74,\n    0x0a83,\n    0x0a83,\n    0x0a85,\n    0x0a8b,\n    0x0a8d,\n    0x0a8d,\n    0x0a8f,\n    0x0a91,\n    0x0a93,\n    0x0aa8,\n    0x0aaa,\n    0x0ab0,\n    0x0ab2,\n    0x0ab3,\n    0x0ab5,\n    0x0ab9,\n    0x0abd,\n    0x0ac0,\n    0x0ac9,\n    0x0ac9,\n    0x0acb,\n    0x0acc,\n    0x0ad0,\n    0x0ad0,\n    0x0ae0,\n    0x0ae0,\n    0x0ae6,\n    0x0aef,\n    0x0b02,\n    0x0b03,\n    0x0b05,\n    0x0b0c,\n    0x0b0f,\n    0x0b10,\n    0x0b13,\n    0x0b28,\n    0x0b2a,\n    0x0b30,\n    0x0b32,\n    0x0b33,\n    0x0b36,\n    0x0b39,\n    0x0b3d,\n    0x0b3e,\n    0x0b40,\n    0x0b40,\n    0x0b47,\n    0x0b48,\n    0x0b4b,\n    0x0b4c,\n    0x0b57,\n    0x0b57,\n    0x0b5c,\n    0x0b5d,\n    0x0b5f,\n    0x0b61,\n    0x0b66,\n    0x0b70,\n    0x0b83,\n    0x0b83,\n    0x0b85,\n    0x0b8a,\n    0x0b8e,\n    0x0b90,\n    0x0b92,\n    0x0b95,\n    0x0b99,\n    0x0b9a,\n    0x0b9c,\n    0x0b9c,\n    0x0b9e,\n    0x0b9f,\n    0x0ba3,\n    0x0ba4,\n    0x0ba8,\n    0x0baa,\n    0x0bae,\n    0x0bb5,\n    0x0bb7,\n    0x0bb9,\n    0x0bbe,\n    0x0bbf,\n    0x0bc1,\n    0x0bc2,\n    0x0bc6,\n    0x0bc8,\n    0x0bca,\n    0x0bcc,\n    0x0bd7,\n    0x0bd7,\n    0x0be7,\n    0x0bf2,\n    0x0c01,\n    0x0c03,\n    0x0c05,\n    0x0c0c,\n    0x0c0e,\n    0x0c10,\n    0x0c12,\n    0x0c28,\n    0x0c2a,\n    0x0c33,\n    0x0c35,\n    0x0c39,\n    0x0c41,\n    0x0c44,\n    0x0c60,\n    0x0c61,\n    0x0c66,\n    0x0c6f,\n    0x0c82,\n    0x0c83,\n    0x0c85,\n    0x0c8c,\n    0x0c8e,\n    0x0c90,\n    0x0c92,\n    0x0ca8,\n    0x0caa,\n    0x0cb3,\n    0x0cb5,\n    0x0cb9,\n    0x0cbe,\n    0x0cbe,\n    0x0cc0,\n    0x0cc4,\n    0x0cc7,\n    0x0cc8,\n    0x0cca,\n    0x0ccb,\n    0x0cd5,\n    0x0cd6,\n    0x0cde,\n    0x0cde,\n    0x0ce0,\n    0x0ce1,\n    0x0ce6,\n    0x0cef,\n    0x0d02,\n    0x0d03,\n    0x0d05,\n    0x0d0c,\n    0x0d0e,\n    0x0d10,\n    0x0d12,\n    0x0d28,\n    0x0d2a,\n    0x0d39,\n    0x0d3e,\n    0x0d40,\n    0x0d46,\n    0x0d48,\n    0x0d4a,\n    0x0d4c,\n    0x0d57,\n    0x0d57,\n    0x0d60,\n    0x0d61,\n    0x0d66,\n    0x0d6f,\n    0x0d82,\n    0x0d83,\n    0x0d85,\n    0x0d96,\n    0x0d9a,\n    0x0db1,\n    0x0db3,\n    0x0dbb,\n    0x0dbd,\n    0x0dbd,\n    0x0dc0,\n    0x0dc6,\n    0x0dcf,\n    0x0dd1,\n    0x0dd8,\n    0x0ddf,\n    0x0df2,\n    0x0df4,\n    0x0e01,\n    0x0e30,\n    0x0e32,\n    0x0e33,\n    0x0e40,\n    0x0e46,\n    0x0e4f,\n    0x0e5b,\n    0x0e81,\n    0x0e82,\n    0x0e84,\n    0x0e84,\n    0x0e87,\n    0x0e88,\n    0x0e8a,\n    0x0e8a,\n    0x0e8d,\n    0x0e8d,\n    0x0e94,\n    0x0e97,\n    0x0e99,\n    0x0e9f,\n    0x0ea1,\n    0x0ea3,\n    0x0ea5,\n    0x0ea5,\n    0x0ea7,\n    0x0ea7,\n    0x0eaa,\n    0x0eab,\n    0x0ead,\n    0x0eb0,\n    0x0eb2,\n    0x0eb3,\n    0x0ebd,\n    0x0ebd,\n    0x0ec0,\n    0x0ec4,\n    0x0ec6,\n    0x0ec6,\n    0x0ed0,\n    0x0ed9,\n    0x0edc,\n    0x0edd,\n    0x0f00,\n    0x0f17,\n    0x0f1a,\n    0x0f34,\n    0x0f36,\n    0x0f36,\n    0x0f38,\n    0x0f38,\n    0x0f3e,\n    0x0f47,\n    0x0f49,\n    0x0f6a,\n    0x0f7f,\n    0x0f7f,\n    0x0f85,\n    0x0f85,\n    0x0f88,\n    0x0f8b,\n    0x0fbe,\n    0x0fc5,\n    0x0fc7,\n    0x0fcc,\n    0x0fcf,\n    0x0fcf,\n    0x1000,\n    0x1021,\n    0x1023,\n    0x1027,\n    0x1029,\n    0x102a,\n    0x102c,\n    0x102c,\n    0x1031,\n    0x1031,\n    0x1038,\n    0x1038,\n    0x1040,\n    0x1057,\n    0x10a0,\n    0x10c5,\n    0x10d0,\n    0x10f8,\n    0x10fb,\n    0x10fb,\n    0x1100,\n    0x1159,\n    0x115f,\n    0x11a2,\n    0x11a8,\n    0x11f9,\n    0x1200,\n    0x1206,\n    0x1208,\n    0x1246,\n    0x1248,\n    0x1248,\n    0x124a,\n    0x124d,\n    0x1250,\n    0x1256,\n    0x1258,\n    0x1258,\n    0x125a,\n    0x125d,\n    0x1260,\n    0x1286,\n    0x1288,\n    0x1288,\n    0x128a,\n    0x128d,\n    0x1290,\n    0x12ae,\n    0x12b0,\n    0x12b0,\n    0x12b2,\n    0x12b5,\n    0x12b8,\n    0x12be,\n    0x12c0,\n    0x12c0,\n    0x12c2,\n    0x12c5,\n    0x12c8,\n    0x12ce,\n    0x12d0,\n    0x12d6,\n    0x12d8,\n    0x12ee,\n    0x12f0,\n    0x130e,\n    0x1310,\n    0x1310,\n    0x1312,\n    0x1315,\n    0x1318,\n    0x131e,\n    0x1320,\n    0x1346,\n    0x1348,\n    0x135a,\n    0x1361,\n    0x137c,\n    0x13a0,\n    0x13f4,\n    0x1401,\n    0x1676,\n    0x1681,\n    0x169a,\n    0x16a0,\n    0x16f0,\n    0x1700,\n    0x170c,\n    0x170e,\n    0x1711,\n    0x1720,\n    0x1731,\n    0x1735,\n    0x1736,\n    0x1740,\n    0x1751,\n    0x1760,\n    0x176c,\n    0x176e,\n    0x1770,\n    0x1780,\n    0x17b6,\n    0x17be,\n    0x17c5,\n    0x17c7,\n    0x17c8,\n    0x17d4,\n    0x17da,\n    0x17dc,\n    0x17dc,\n    0x17e0,\n    0x17e9,\n    0x1810,\n    0x1819,\n    0x1820,\n    0x1877,\n    0x1880,\n    0x18a8,\n    0x1e00,\n    0x1e9b,\n    0x1ea0,\n    0x1ef9,\n    0x1f00,\n    0x1f15,\n    0x1f18,\n    0x1f1d,\n    0x1f20,\n    0x1f45,\n    0x1f48,\n    0x1f4d,\n    0x1f50,\n    0x1f57,\n    0x1f59,\n    0x1f59,\n    0x1f5b,\n    0x1f5b,\n    0x1f5d,\n    0x1f5d,\n    0x1f5f,\n    0x1f7d,\n    0x1f80,\n    0x1fb4,\n    0x1fb6,\n    0x1fbc,\n    0x1fbe,\n    0x1fbe,\n    0x1fc2,\n    0x1fc4,\n    0x1fc6,\n    0x1fcc,\n    0x1fd0,\n    0x1fd3,\n    0x1fd6,\n    0x1fdb,\n    0x1fe0,\n    0x1fec,\n    0x1ff2,\n    0x1ff4,\n    0x1ff6,\n    0x1ffc,\n    0x200e,\n    0x200e,\n    0x2071,\n    0x2071,\n    0x207f,\n    0x207f,\n    0x2102,\n    0x2102,\n    0x2107,\n    0x2107,\n    0x210a,\n    0x2113,\n    0x2115,\n    0x2115,\n    0x2119,\n    0x211d,\n    0x2124,\n    0x2124,\n    0x2126,\n    0x2126,\n    0x2128,\n    0x2128,\n    0x212a,\n    0x212d,\n    0x212f,\n    0x2131,\n    0x2133,\n    0x2139,\n    0x213d,\n    0x213f,\n    0x2145,\n    0x2149,\n    0x2160,\n    0x2183,\n    0x2336,\n    0x237a,\n    0x2395,\n    0x2395,\n    0x249c,\n    0x24e9,\n    0x3005,\n    0x3007,\n    0x3021,\n    0x3029,\n    0x3031,\n    0x3035,\n    0x3038,\n    0x303c,\n    0x3041,\n    0x3096,\n    0x309d,\n    0x309f,\n    0x30a1,\n    0x30fa,\n    0x30fc,\n    0x30ff,\n    0x3105,\n    0x312c,\n    0x3131,\n    0x318e,\n    0x3190,\n    0x31b7,\n    0x31f0,\n    0x321c,\n    0x3220,\n    0x3243,\n    0x3260,\n    0x327b,\n    0x327f,\n    0x32b0,\n    0x32c0,\n    0x32cb,\n    0x32d0,\n    0x32fe,\n    0x3300,\n    0x3376,\n    0x337b,\n    0x33dd,\n    0x33e0,\n    0x33fe,\n    0x3400,\n    0x4db5,\n    0x4e00,\n    0x9fa5,\n    0xa000,\n    0xa48c,\n    0xac00,\n    0xd7a3,\n    0xd800,\n    0xfa2d,\n    0xfa30,\n    0xfa6a,\n    0xfb00,\n    0xfb06,\n    0xfb13,\n    0xfb17,\n    0xff21,\n    0xff3a,\n    0xff41,\n    0xff5a,\n    0xff66,\n    0xffbe,\n    0xffc2,\n    0xffc7,\n    0xffca,\n    0xffcf,\n    0xffd2,\n    0xffd7,\n    0xffda,\n    0xffdc,\n    0x10300,\n    0x1031e,\n    0x10320,\n    0x10323,\n    0x10330,\n    0x1034a,\n    0x10400,\n    0x10425,\n    0x10428,\n    0x1044d,\n    0x1d000,\n    0x1d0f5,\n    0x1d100,\n    0x1d126,\n    0x1d12a,\n    0x1d166,\n    0x1d16a,\n    0x1d172,\n    0x1d183,\n    0x1d184,\n    0x1d18c,\n    0x1d1a9,\n    0x1d1ae,\n    0x1d1dd,\n    0x1d400,\n    0x1d454,\n    0x1d456,\n    0x1d49c,\n    0x1d49e,\n    0x1d49f,\n    0x1d4a2,\n    0x1d4a2,\n    0x1d4a5,\n    0x1d4a6,\n    0x1d4a9,\n    0x1d4ac,\n    0x1d4ae,\n    0x1d4b9,\n    0x1d4bb,\n    0x1d4bb,\n    0x1d4bd,\n    0x1d4c0,\n    0x1d4c2,\n    0x1d4c3,\n    0x1d4c5,\n    0x1d505,\n    0x1d507,\n    0x1d50a,\n    0x1d50d,\n    0x1d514,\n    0x1d516,\n    0x1d51c,\n    0x1d51e,\n    0x1d539,\n    0x1d53b,\n    0x1d53e,\n    0x1d540,\n    0x1d544,\n    0x1d546,\n    0x1d546,\n    0x1d54a,\n    0x1d550,\n    0x1d552,\n    0x1d6a3,\n    0x1d6a8,\n    0x1d7c9,\n    0x20000,\n    0x2a6d6,\n    0x2f800,\n    0x2fa1d,\n    0xf0000,\n    0xffffd,\n    0x100000,\n    0x10fffd\n]; // prettier-ignore-end\nvar isBidirectionalL = function isBidirectionalL(character) {\n    return inRange(character, bidirectional_l);\n};\n/**\r\n * non-ASCII space characters [StringPrep, C.1.2] that can be\r\n * mapped to SPACE (U+0020)\r\n */ var mapping2space = isNonASCIISpaceCharacter;\n/**\r\n * the \"commonly mapped to nothing\" characters [StringPrep, B.1]\r\n * that can be mapped to nothing.\r\n */ var mapping2nothing = isCommonlyMappedToNothing; // utils\nvar getCodePoint = function getCodePoint(character) {\n    return character.codePointAt(0);\n};\nvar first = function first(x) {\n    return x[0];\n};\nvar last = function last(x) {\n    return x[x.length - 1];\n};\n/**\r\n * Convert provided string into an array of Unicode Code Points.\r\n * Based on https://stackoverflow.com/a/21409165/1556249\r\n * and https://www.npmjs.com/package/code-point-at.\r\n * @param {string} input\r\n * @returns {number[]}\r\n */ function toCodePoints(input) {\n    var codepoints = [];\n    var size = input.length;\n    for(var i = 0; i < size; i += 1){\n        var before = input.charCodeAt(i);\n        if (before >= 0xd800 && before <= 0xdbff && size > i + 1) {\n            var next = input.charCodeAt(i + 1);\n            if (next >= 0xdc00 && next <= 0xdfff) {\n                codepoints.push((before - 0xd800) * 0x400 + next - 0xdc00 + 0x10000);\n                i += 1;\n                continue;\n            }\n        }\n        codepoints.push(before);\n    }\n    return codepoints;\n}\n/**\r\n * SASLprep.\r\n * @param {string} input\r\n * @param {Object} opts\r\n * @param {boolean} opts.allowUnassigned\r\n * @returns {string}\r\n */ function saslprep(input) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (typeof input !== \"string\") {\n        throw new TypeError(\"Expected string.\");\n    }\n    if (input.length === 0) {\n        return \"\";\n    } // 1. Map\n    var mapped_input = toCodePoints(input) // 1.1 mapping to space\n    .map(function(character) {\n        return mapping2space(character) ? 0x20 : character;\n    }) // 1.2 mapping to nothing\n    .filter(function(character) {\n        return !mapping2nothing(character);\n    }); // 2. Normalize\n    var normalized_input = String.fromCodePoint.apply(null, mapped_input).normalize(\"NFKC\");\n    var normalized_map = toCodePoints(normalized_input); // 3. Prohibit\n    var hasProhibited = normalized_map.some(isProhibitedCharacter);\n    if (hasProhibited) {\n        throw new Error(\"Prohibited character, see https://tools.ietf.org/html/rfc4013#section-2.3\");\n    } // Unassigned Code Points\n    if (opts.allowUnassigned !== true) {\n        var hasUnassigned = normalized_map.some(isUnassignedCodePoint);\n        if (hasUnassigned) {\n            throw new Error(\"Unassigned code point, see https://tools.ietf.org/html/rfc4013#section-2.5\");\n        }\n    } // 4. check bidi\n    var hasBidiRAL = normalized_map.some(isBidirectionalRAL);\n    var hasBidiL = normalized_map.some(isBidirectionalL); // 4.1 If a string contains any RandALCat character, the string MUST NOT\n    // contain any LCat character.\n    if (hasBidiRAL && hasBidiL) {\n        throw new Error(\"String must not contain RandALCat and LCat at the same time,\" + \" see https://tools.ietf.org/html/rfc3454#section-6\");\n    }\n    /**\r\n   * 4.2 If a string contains any RandALCat character, a RandALCat\r\n   * character MUST be the first character of the string, and a\r\n   * RandALCat character MUST be the last character of the string.\r\n   */ var isFirstBidiRAL = isBidirectionalRAL(getCodePoint(first(normalized_input)));\n    var isLastBidiRAL = isBidirectionalRAL(getCodePoint(last(normalized_input)));\n    if (hasBidiRAL && !(isFirstBidiRAL && isLastBidiRAL)) {\n        throw new Error(\"Bidirectional RandALCat character must be the first and the last\" + \" character of the string, see https://tools.ietf.org/html/rfc3454#section-6\");\n    }\n    return normalized_input;\n}\nvar PDFSecurity = /*#__PURE__*/ function() {\n    function PDFSecurity(document) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        _classCallCheck(this, PDFSecurity);\n        if (!options.ownerPassword && !options.userPassword) {\n            throw new Error(\"None of owner password and user password is defined.\");\n        }\n        this.document = document;\n        this._setupEncryption(options);\n    }\n    _createClass(PDFSecurity, [\n        {\n            key: \"_setupEncryption\",\n            value: function _setupEncryption(options) {\n                switch(options.pdfVersion){\n                    case \"1.4\":\n                    case \"1.5\":\n                        this.version = 2;\n                        break;\n                    case \"1.6\":\n                    case \"1.7\":\n                        this.version = 4;\n                        break;\n                    case \"1.7ext3\":\n                        this.version = 5;\n                        break;\n                    default:\n                        this.version = 1;\n                        break;\n                }\n                var encDict = {\n                    Filter: \"Standard\"\n                };\n                switch(this.version){\n                    case 1:\n                    case 2:\n                    case 4:\n                        this._setupEncryptionV1V2V4(this.version, encDict, options);\n                        break;\n                    case 5:\n                        this._setupEncryptionV5(encDict, options);\n                        break;\n                }\n                this.dictionary = this.document.ref(encDict);\n            }\n        },\n        {\n            key: \"_setupEncryptionV1V2V4\",\n            value: function _setupEncryptionV1V2V4(v, encDict, options) {\n                var r, permissions;\n                switch(v){\n                    case 1:\n                        r = 2;\n                        this.keyBits = 40;\n                        permissions = getPermissionsR2(options.permissions);\n                        break;\n                    case 2:\n                        r = 3;\n                        this.keyBits = 128;\n                        permissions = getPermissionsR3(options.permissions);\n                        break;\n                    case 4:\n                        r = 4;\n                        this.keyBits = 128;\n                        permissions = getPermissionsR3(options.permissions);\n                        break;\n                }\n                var paddedUserPassword = processPasswordR2R3R4(options.userPassword);\n                var paddedOwnerPassword = options.ownerPassword ? processPasswordR2R3R4(options.ownerPassword) : paddedUserPassword;\n                var ownerPasswordEntry = getOwnerPasswordR2R3R4(r, this.keyBits, paddedUserPassword, paddedOwnerPassword);\n                this.encryptionKey = getEncryptionKeyR2R3R4(r, this.keyBits, this.document._id, paddedUserPassword, ownerPasswordEntry, permissions);\n                var userPasswordEntry;\n                if (r === 2) {\n                    userPasswordEntry = getUserPasswordR2(this.encryptionKey);\n                } else {\n                    userPasswordEntry = getUserPasswordR3R4(this.document._id, this.encryptionKey);\n                }\n                encDict.V = v;\n                if (v >= 2) {\n                    encDict.Length = this.keyBits;\n                }\n                if (v === 4) {\n                    encDict.CF = {\n                        StdCF: {\n                            AuthEvent: \"DocOpen\",\n                            CFM: \"AESV2\",\n                            Length: this.keyBits / 8\n                        }\n                    };\n                    encDict.StmF = \"StdCF\";\n                    encDict.StrF = \"StdCF\";\n                }\n                encDict.R = r;\n                encDict.O = wordArrayToBuffer(ownerPasswordEntry);\n                encDict.U = wordArrayToBuffer(userPasswordEntry);\n                encDict.P = permissions;\n            }\n        },\n        {\n            key: \"_setupEncryptionV5\",\n            value: function _setupEncryptionV5(encDict, options) {\n                this.keyBits = 256;\n                var permissions = getPermissionsR3(options.permissions);\n                var processedUserPassword = processPasswordR5(options.userPassword);\n                var processedOwnerPassword = options.ownerPassword ? processPasswordR5(options.ownerPassword) : processedUserPassword;\n                this.encryptionKey = getEncryptionKeyR5(PDFSecurity.generateRandomWordArray);\n                var userPasswordEntry = getUserPasswordR5(processedUserPassword, PDFSecurity.generateRandomWordArray);\n                var userKeySalt = crypto_js__WEBPACK_IMPORTED_MODULE_3___default().lib.WordArray.create(userPasswordEntry.words.slice(10, 12), 8);\n                var userEncryptionKeyEntry = getUserEncryptionKeyR5(processedUserPassword, userKeySalt, this.encryptionKey);\n                var ownerPasswordEntry = getOwnerPasswordR5(processedOwnerPassword, userPasswordEntry, PDFSecurity.generateRandomWordArray);\n                var ownerKeySalt = crypto_js__WEBPACK_IMPORTED_MODULE_3___default().lib.WordArray.create(ownerPasswordEntry.words.slice(10, 12), 8);\n                var ownerEncryptionKeyEntry = getOwnerEncryptionKeyR5(processedOwnerPassword, ownerKeySalt, userPasswordEntry, this.encryptionKey);\n                var permsEntry = getEncryptedPermissionsR5(permissions, this.encryptionKey, PDFSecurity.generateRandomWordArray);\n                encDict.V = 5;\n                encDict.Length = this.keyBits;\n                encDict.CF = {\n                    StdCF: {\n                        AuthEvent: \"DocOpen\",\n                        CFM: \"AESV3\",\n                        Length: this.keyBits / 8\n                    }\n                };\n                encDict.StmF = \"StdCF\";\n                encDict.StrF = \"StdCF\";\n                encDict.R = 5;\n                encDict.O = wordArrayToBuffer(ownerPasswordEntry);\n                encDict.OE = wordArrayToBuffer(ownerEncryptionKeyEntry);\n                encDict.U = wordArrayToBuffer(userPasswordEntry);\n                encDict.UE = wordArrayToBuffer(userEncryptionKeyEntry);\n                encDict.P = permissions;\n                encDict.Perms = wordArrayToBuffer(permsEntry);\n            }\n        },\n        {\n            key: \"getEncryptFn\",\n            value: function getEncryptFn(obj, gen) {\n                var digest;\n                if (this.version < 5) {\n                    digest = this.encryptionKey.clone().concat(crypto_js__WEBPACK_IMPORTED_MODULE_3___default().lib.WordArray.create([\n                        (obj & 0xff) << 24 | (obj & 0xff00) << 8 | obj >> 8 & 0xff00 | gen & 0xff,\n                        (gen & 0xff00) << 16\n                    ], 5));\n                }\n                if (this.version === 1 || this.version === 2) {\n                    var _key = crypto_js__WEBPACK_IMPORTED_MODULE_3___default().MD5(digest);\n                    _key.sigBytes = Math.min(16, this.keyBits / 8 + 5);\n                    return function(buffer) {\n                        return wordArrayToBuffer(crypto_js__WEBPACK_IMPORTED_MODULE_3___default().RC4.encrypt(crypto_js__WEBPACK_IMPORTED_MODULE_3___default().lib.WordArray.create(buffer), _key).ciphertext);\n                    };\n                }\n                var key;\n                if (this.version === 4) {\n                    key = crypto_js__WEBPACK_IMPORTED_MODULE_3___default().MD5(digest.concat(crypto_js__WEBPACK_IMPORTED_MODULE_3___default().lib.WordArray.create([\n                        0x73416c54\n                    ], 4)));\n                } else {\n                    key = this.encryptionKey;\n                }\n                var iv = PDFSecurity.generateRandomWordArray(16);\n                var options = {\n                    mode: (crypto_js__WEBPACK_IMPORTED_MODULE_3___default().mode).CBC,\n                    padding: (crypto_js__WEBPACK_IMPORTED_MODULE_3___default().pad).Pkcs7,\n                    iv: iv\n                };\n                return function(buffer) {\n                    return wordArrayToBuffer(iv.clone().concat(crypto_js__WEBPACK_IMPORTED_MODULE_3___default().AES.encrypt(crypto_js__WEBPACK_IMPORTED_MODULE_3___default().lib.WordArray.create(buffer), key, options).ciphertext));\n                };\n            }\n        },\n        {\n            key: \"end\",\n            value: function end() {\n                this.dictionary.end();\n            }\n        }\n    ], [\n        {\n            key: \"generateFileID\",\n            value: function generateFileID() {\n                var info = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n                var infoStr = \"\".concat(info.CreationDate.getTime(), \"\\n\");\n                for(var key in info){\n                    // eslint-disable-next-line no-prototype-builtins\n                    if (!info.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    infoStr += \"\".concat(key, \": \").concat(info[key].valueOf(), \"\\n\");\n                }\n                return wordArrayToBuffer(crypto_js__WEBPACK_IMPORTED_MODULE_3___default().MD5(infoStr));\n            }\n        },\n        {\n            key: \"generateRandomWordArray\",\n            value: function generateRandomWordArray(bytes) {\n                return crypto_js__WEBPACK_IMPORTED_MODULE_3___default().lib.WordArray.random(bytes);\n            }\n        },\n        {\n            key: \"create\",\n            value: function create(document) {\n                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                if (!options.ownerPassword && !options.userPassword) {\n                    return null;\n                }\n                return new PDFSecurity(document, options);\n            }\n        }\n    ]);\n    return PDFSecurity;\n}();\nfunction getPermissionsR2() {\n    var permissionObject = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var permissions = 0xffffffc0 >> 0;\n    if (permissionObject.printing) {\n        permissions |= 4;\n    }\n    if (permissionObject.modifying) {\n        permissions |= 8;\n    }\n    if (permissionObject.copying) {\n        permissions |= 16;\n    }\n    if (permissionObject.annotating) {\n        permissions |= 32;\n    }\n    return permissions;\n}\nfunction getPermissionsR3() {\n    var permissionObject = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var permissions = 0xfffff0c0 >> 0;\n    if (permissionObject.printing === \"lowResolution\") {\n        permissions |= 4;\n    }\n    if (permissionObject.printing === \"highResolution\") {\n        permissions |= 2052;\n    }\n    if (permissionObject.modifying) {\n        permissions |= 8;\n    }\n    if (permissionObject.copying) {\n        permissions |= 16;\n    }\n    if (permissionObject.annotating) {\n        permissions |= 32;\n    }\n    if (permissionObject.fillingForms) {\n        permissions |= 256;\n    }\n    if (permissionObject.contentAccessibility) {\n        permissions |= 512;\n    }\n    if (permissionObject.documentAssembly) {\n        permissions |= 1024;\n    }\n    return permissions;\n}\nfunction getUserPasswordR2(encryptionKey) {\n    return crypto_js__WEBPACK_IMPORTED_MODULE_3___default().RC4.encrypt(processPasswordR2R3R4(), encryptionKey).ciphertext;\n}\nfunction getUserPasswordR3R4(documentId, encryptionKey) {\n    var key = encryptionKey.clone();\n    var cipher = crypto_js__WEBPACK_IMPORTED_MODULE_3___default().MD5(processPasswordR2R3R4().concat(crypto_js__WEBPACK_IMPORTED_MODULE_3___default().lib.WordArray.create(documentId)));\n    for(var i = 0; i < 20; i++){\n        var xorRound = Math.ceil(key.sigBytes / 4);\n        for(var j = 0; j < xorRound; j++){\n            key.words[j] = encryptionKey.words[j] ^ (i | i << 8 | i << 16 | i << 24);\n        }\n        cipher = crypto_js__WEBPACK_IMPORTED_MODULE_3___default().RC4.encrypt(cipher, key).ciphertext;\n    }\n    return cipher.concat(crypto_js__WEBPACK_IMPORTED_MODULE_3___default().lib.WordArray.create(null, 16));\n}\nfunction getOwnerPasswordR2R3R4(r, keyBits, paddedUserPassword, paddedOwnerPassword) {\n    var digest = paddedOwnerPassword;\n    var round = r >= 3 ? 51 : 1;\n    for(var i = 0; i < round; i++){\n        digest = crypto_js__WEBPACK_IMPORTED_MODULE_3___default().MD5(digest);\n    }\n    var key = digest.clone();\n    key.sigBytes = keyBits / 8;\n    var cipher = paddedUserPassword;\n    round = r >= 3 ? 20 : 1;\n    for(var _i = 0; _i < round; _i++){\n        var xorRound = Math.ceil(key.sigBytes / 4);\n        for(var j = 0; j < xorRound; j++){\n            key.words[j] = digest.words[j] ^ (_i | _i << 8 | _i << 16 | _i << 24);\n        }\n        cipher = crypto_js__WEBPACK_IMPORTED_MODULE_3___default().RC4.encrypt(cipher, key).ciphertext;\n    }\n    return cipher;\n}\nfunction getEncryptionKeyR2R3R4(r, keyBits, documentId, paddedUserPassword, ownerPasswordEntry, permissions) {\n    var key = paddedUserPassword.clone().concat(ownerPasswordEntry).concat(crypto_js__WEBPACK_IMPORTED_MODULE_3___default().lib.WordArray.create([\n        lsbFirstWord(permissions)\n    ], 4)).concat(crypto_js__WEBPACK_IMPORTED_MODULE_3___default().lib.WordArray.create(documentId));\n    var round = r >= 3 ? 51 : 1;\n    for(var i = 0; i < round; i++){\n        key = crypto_js__WEBPACK_IMPORTED_MODULE_3___default().MD5(key);\n        key.sigBytes = keyBits / 8;\n    }\n    return key;\n}\nfunction getUserPasswordR5(processedUserPassword, generateRandomWordArray) {\n    var validationSalt = generateRandomWordArray(8);\n    var keySalt = generateRandomWordArray(8);\n    return crypto_js__WEBPACK_IMPORTED_MODULE_3___default().SHA256(processedUserPassword.clone().concat(validationSalt)).concat(validationSalt).concat(keySalt);\n}\nfunction getUserEncryptionKeyR5(processedUserPassword, userKeySalt, encryptionKey) {\n    var key = crypto_js__WEBPACK_IMPORTED_MODULE_3___default().SHA256(processedUserPassword.clone().concat(userKeySalt));\n    var options = {\n        mode: (crypto_js__WEBPACK_IMPORTED_MODULE_3___default().mode).CBC,\n        padding: (crypto_js__WEBPACK_IMPORTED_MODULE_3___default().pad).NoPadding,\n        iv: crypto_js__WEBPACK_IMPORTED_MODULE_3___default().lib.WordArray.create(null, 16)\n    };\n    return crypto_js__WEBPACK_IMPORTED_MODULE_3___default().AES.encrypt(encryptionKey, key, options).ciphertext;\n}\nfunction getOwnerPasswordR5(processedOwnerPassword, userPasswordEntry, generateRandomWordArray) {\n    var validationSalt = generateRandomWordArray(8);\n    var keySalt = generateRandomWordArray(8);\n    return crypto_js__WEBPACK_IMPORTED_MODULE_3___default().SHA256(processedOwnerPassword.clone().concat(validationSalt).concat(userPasswordEntry)).concat(validationSalt).concat(keySalt);\n}\nfunction getOwnerEncryptionKeyR5(processedOwnerPassword, ownerKeySalt, userPasswordEntry, encryptionKey) {\n    var key = crypto_js__WEBPACK_IMPORTED_MODULE_3___default().SHA256(processedOwnerPassword.clone().concat(ownerKeySalt).concat(userPasswordEntry));\n    var options = {\n        mode: (crypto_js__WEBPACK_IMPORTED_MODULE_3___default().mode).CBC,\n        padding: (crypto_js__WEBPACK_IMPORTED_MODULE_3___default().pad).NoPadding,\n        iv: crypto_js__WEBPACK_IMPORTED_MODULE_3___default().lib.WordArray.create(null, 16)\n    };\n    return crypto_js__WEBPACK_IMPORTED_MODULE_3___default().AES.encrypt(encryptionKey, key, options).ciphertext;\n}\nfunction getEncryptionKeyR5(generateRandomWordArray) {\n    return generateRandomWordArray(32);\n}\nfunction getEncryptedPermissionsR5(permissions, encryptionKey, generateRandomWordArray) {\n    var cipher = crypto_js__WEBPACK_IMPORTED_MODULE_3___default().lib.WordArray.create([\n        lsbFirstWord(permissions),\n        0xffffffff,\n        0x54616462\n    ], 12).concat(generateRandomWordArray(4));\n    var options = {\n        mode: (crypto_js__WEBPACK_IMPORTED_MODULE_3___default().mode).ECB,\n        padding: (crypto_js__WEBPACK_IMPORTED_MODULE_3___default().pad).NoPadding\n    };\n    return crypto_js__WEBPACK_IMPORTED_MODULE_3___default().AES.encrypt(cipher, encryptionKey, options).ciphertext;\n}\nfunction processPasswordR2R3R4() {\n    var password = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    var out = Buffer.alloc(32);\n    var length = password.length;\n    var index = 0;\n    while(index < length && index < 32){\n        var code = password.charCodeAt(index);\n        if (code > 0xff) {\n            throw new Error(\"Password contains one or more invalid characters.\");\n        }\n        out[index] = code;\n        index++;\n    }\n    while(index < 32){\n        out[index] = PASSWORD_PADDING[index - length];\n        index++;\n    }\n    return crypto_js__WEBPACK_IMPORTED_MODULE_3___default().lib.WordArray.create(out);\n}\nfunction processPasswordR5() {\n    var password = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    password = unescape(encodeURIComponent(saslprep(password)));\n    var length = Math.min(127, password.length);\n    var out = Buffer.alloc(length);\n    for(var i = 0; i < length; i++){\n        out[i] = password.charCodeAt(i);\n    }\n    return crypto_js__WEBPACK_IMPORTED_MODULE_3___default().lib.WordArray.create(out);\n}\nfunction lsbFirstWord(data) {\n    return (data & 0xff) << 24 | (data & 0xff00) << 8 | data >> 8 & 0xff00 | data >> 24 & 0xff;\n}\nfunction wordArrayToBuffer(wordArray) {\n    var byteArray = [];\n    for(var i = 0; i < wordArray.sigBytes; i++){\n        byteArray.push(wordArray.words[Math.floor(i / 4)] >> 8 * (3 - i % 4) & 0xff);\n    }\n    return Buffer.from(byteArray);\n}\nvar PASSWORD_PADDING = [\n    0x28,\n    0xbf,\n    0x4e,\n    0x5e,\n    0x4e,\n    0x75,\n    0x8a,\n    0x41,\n    0x64,\n    0x00,\n    0x4e,\n    0x56,\n    0xff,\n    0xfa,\n    0x01,\n    0x08,\n    0x2e,\n    0x2e,\n    0x00,\n    0xb6,\n    0xd0,\n    0x68,\n    0x3e,\n    0x80,\n    0x2f,\n    0x0c,\n    0xa9,\n    0xfe,\n    0x64,\n    0x53,\n    0x69,\n    0x7a\n];\nvar number = PDFObject.number;\nvar PDFGradient = /*#__PURE__*/ function() {\n    function PDFGradient(doc) {\n        _classCallCheck(this, PDFGradient);\n        this.doc = doc;\n        this.stops = [];\n        this.embedded = false;\n        this.transform = [\n            1,\n            0,\n            0,\n            1,\n            0,\n            0\n        ];\n    }\n    _createClass(PDFGradient, [\n        {\n            key: \"stop\",\n            value: function stop(pos, color, opacity) {\n                if (opacity == null) {\n                    opacity = 1;\n                }\n                color = this.doc._normalizeColor(color);\n                if (this.stops.length === 0) {\n                    if (color.length === 3) {\n                        this._colorSpace = \"DeviceRGB\";\n                    } else if (color.length === 4) {\n                        this._colorSpace = \"DeviceCMYK\";\n                    } else if (color.length === 1) {\n                        this._colorSpace = \"DeviceGray\";\n                    } else {\n                        throw new Error(\"Unknown color space\");\n                    }\n                } else if (this._colorSpace === \"DeviceRGB\" && color.length !== 3 || this._colorSpace === \"DeviceCMYK\" && color.length !== 4 || this._colorSpace === \"DeviceGray\" && color.length !== 1) {\n                    throw new Error(\"All gradient stops must use the same color space\");\n                }\n                opacity = Math.max(0, Math.min(1, opacity));\n                this.stops.push([\n                    pos,\n                    color,\n                    opacity\n                ]);\n                return this;\n            }\n        },\n        {\n            key: \"setTransform\",\n            value: function setTransform(m11, m12, m21, m22, dx, dy) {\n                this.transform = [\n                    m11,\n                    m12,\n                    m21,\n                    m22,\n                    dx,\n                    dy\n                ];\n                return this;\n            }\n        },\n        {\n            key: \"embed\",\n            value: function embed(m) {\n                var fn;\n                var stopsLength = this.stops.length;\n                if (stopsLength === 0) {\n                    return;\n                }\n                this.embedded = true;\n                this.matrix = m; // if the last stop comes before 100%, add a copy at 100%\n                var last = this.stops[stopsLength - 1];\n                if (last[0] < 1) {\n                    this.stops.push([\n                        1,\n                        last[1],\n                        last[2]\n                    ]);\n                }\n                var bounds = [];\n                var encode = [];\n                var stops = [];\n                for(var i = 0; i < stopsLength - 1; i++){\n                    encode.push(0, 1);\n                    if (i + 2 !== stopsLength) {\n                        bounds.push(this.stops[i + 1][0]);\n                    }\n                    fn = this.doc.ref({\n                        FunctionType: 2,\n                        Domain: [\n                            0,\n                            1\n                        ],\n                        C0: this.stops[i + 0][1],\n                        C1: this.stops[i + 1][1],\n                        N: 1\n                    });\n                    stops.push(fn);\n                    fn.end();\n                } // if there are only two stops, we don't need a stitching function\n                if (stopsLength === 1) {\n                    fn = stops[0];\n                } else {\n                    fn = this.doc.ref({\n                        FunctionType: 3,\n                        // stitching function\n                        Domain: [\n                            0,\n                            1\n                        ],\n                        Functions: stops,\n                        Bounds: bounds,\n                        Encode: encode\n                    });\n                    fn.end();\n                }\n                this.id = \"Sh\".concat(++this.doc._gradCount);\n                var shader = this.shader(fn);\n                shader.end();\n                var pattern = this.doc.ref({\n                    Type: \"Pattern\",\n                    PatternType: 2,\n                    Shading: shader,\n                    Matrix: this.matrix.map(number)\n                });\n                pattern.end();\n                if (this.stops.some(function(stop) {\n                    return stop[2] < 1;\n                })) {\n                    var grad = this.opacityGradient();\n                    grad._colorSpace = \"DeviceGray\";\n                    var _iterator = _createForOfIteratorHelper(this.stops), _step;\n                    try {\n                        for(_iterator.s(); !(_step = _iterator.n()).done;){\n                            var stop = _step.value;\n                            grad.stop(stop[0], [\n                                stop[2]\n                            ]);\n                        }\n                    } catch (err) {\n                        _iterator.e(err);\n                    } finally{\n                        _iterator.f();\n                    }\n                    grad = grad.embed(this.matrix);\n                    var pageBBox = [\n                        0,\n                        0,\n                        this.doc.page.width,\n                        this.doc.page.height\n                    ];\n                    var form = this.doc.ref({\n                        Type: \"XObject\",\n                        Subtype: \"Form\",\n                        FormType: 1,\n                        BBox: pageBBox,\n                        Group: {\n                            Type: \"Group\",\n                            S: \"Transparency\",\n                            CS: \"DeviceGray\"\n                        },\n                        Resources: {\n                            ProcSet: [\n                                \"PDF\",\n                                \"Text\",\n                                \"ImageB\",\n                                \"ImageC\",\n                                \"ImageI\"\n                            ],\n                            Pattern: {\n                                Sh1: grad\n                            }\n                        }\n                    });\n                    form.write(\"/Pattern cs /Sh1 scn\");\n                    form.end(\"\".concat(pageBBox.join(\" \"), \" re f\"));\n                    var gstate = this.doc.ref({\n                        Type: \"ExtGState\",\n                        SMask: {\n                            Type: \"Mask\",\n                            S: \"Luminosity\",\n                            G: form\n                        }\n                    });\n                    gstate.end();\n                    var opacityPattern = this.doc.ref({\n                        Type: \"Pattern\",\n                        PatternType: 1,\n                        PaintType: 1,\n                        TilingType: 2,\n                        BBox: pageBBox,\n                        XStep: pageBBox[2],\n                        YStep: pageBBox[3],\n                        Resources: {\n                            ProcSet: [\n                                \"PDF\",\n                                \"Text\",\n                                \"ImageB\",\n                                \"ImageC\",\n                                \"ImageI\"\n                            ],\n                            Pattern: {\n                                Sh1: pattern\n                            },\n                            ExtGState: {\n                                Gs1: gstate\n                            }\n                        }\n                    });\n                    opacityPattern.write(\"/Gs1 gs /Pattern cs /Sh1 scn\");\n                    opacityPattern.end(\"\".concat(pageBBox.join(\" \"), \" re f\"));\n                    this.doc.page.patterns[this.id] = opacityPattern;\n                } else {\n                    this.doc.page.patterns[this.id] = pattern;\n                }\n                return pattern;\n            }\n        },\n        {\n            key: \"apply\",\n            value: function apply(stroke) {\n                // apply gradient transform to existing document ctm\n                var _this$doc$_ctm = _slicedToArray(this.doc._ctm, 6), m0 = _this$doc$_ctm[0], m1 = _this$doc$_ctm[1], m2 = _this$doc$_ctm[2], m3 = _this$doc$_ctm[3], m4 = _this$doc$_ctm[4], m5 = _this$doc$_ctm[5];\n                var _this$transform = _slicedToArray(this.transform, 6), m11 = _this$transform[0], m12 = _this$transform[1], m21 = _this$transform[2], m22 = _this$transform[3], dx = _this$transform[4], dy = _this$transform[5];\n                var m = [\n                    m0 * m11 + m2 * m12,\n                    m1 * m11 + m3 * m12,\n                    m0 * m21 + m2 * m22,\n                    m1 * m21 + m3 * m22,\n                    m0 * dx + m2 * dy + m4,\n                    m1 * dx + m3 * dy + m5\n                ];\n                if (!this.embedded || m.join(\" \") !== this.matrix.join(\" \")) {\n                    this.embed(m);\n                }\n                this.doc._setColorSpace(\"Pattern\", stroke);\n                var op = stroke ? \"SCN\" : \"scn\";\n                return this.doc.addContent(\"/\".concat(this.id, \" \").concat(op));\n            }\n        }\n    ]);\n    return PDFGradient;\n}();\nvar PDFLinearGradient = /*#__PURE__*/ function(_PDFGradient) {\n    _inherits(PDFLinearGradient, _PDFGradient);\n    var _super = _createSuper(PDFLinearGradient);\n    function PDFLinearGradient(doc, x1, y1, x2, y2) {\n        var _this;\n        _classCallCheck(this, PDFLinearGradient);\n        _this = _super.call(this, doc);\n        _this.x1 = x1;\n        _this.y1 = y1;\n        _this.x2 = x2;\n        _this.y2 = y2;\n        return _this;\n    }\n    _createClass(PDFLinearGradient, [\n        {\n            key: \"shader\",\n            value: function shader(fn) {\n                return this.doc.ref({\n                    ShadingType: 2,\n                    ColorSpace: this._colorSpace,\n                    Coords: [\n                        this.x1,\n                        this.y1,\n                        this.x2,\n                        this.y2\n                    ],\n                    Function: fn,\n                    Extend: [\n                        true,\n                        true\n                    ]\n                });\n            }\n        },\n        {\n            key: \"opacityGradient\",\n            value: function opacityGradient() {\n                return new PDFLinearGradient(this.doc, this.x1, this.y1, this.x2, this.y2);\n            }\n        }\n    ]);\n    return PDFLinearGradient;\n}(PDFGradient);\nvar PDFRadialGradient = /*#__PURE__*/ function(_PDFGradient2) {\n    _inherits(PDFRadialGradient, _PDFGradient2);\n    var _super2 = _createSuper(PDFRadialGradient);\n    function PDFRadialGradient(doc, x1, y1, r1, x2, y2, r2) {\n        var _this2;\n        _classCallCheck(this, PDFRadialGradient);\n        _this2 = _super2.call(this, doc);\n        _this2.doc = doc;\n        _this2.x1 = x1;\n        _this2.y1 = y1;\n        _this2.r1 = r1;\n        _this2.x2 = x2;\n        _this2.y2 = y2;\n        _this2.r2 = r2;\n        return _this2;\n    }\n    _createClass(PDFRadialGradient, [\n        {\n            key: \"shader\",\n            value: function shader(fn) {\n                return this.doc.ref({\n                    ShadingType: 3,\n                    ColorSpace: this._colorSpace,\n                    Coords: [\n                        this.x1,\n                        this.y1,\n                        this.r1,\n                        this.x2,\n                        this.y2,\n                        this.r2\n                    ],\n                    Function: fn,\n                    Extend: [\n                        true,\n                        true\n                    ]\n                });\n            }\n        },\n        {\n            key: \"opacityGradient\",\n            value: function opacityGradient() {\n                return new PDFRadialGradient(this.doc, this.x1, this.y1, this.r1, this.x2, this.y2, this.r2);\n            }\n        }\n    ]);\n    return PDFRadialGradient;\n}(PDFGradient);\nvar Gradient = {\n    PDFGradient: PDFGradient,\n    PDFLinearGradient: PDFLinearGradient,\n    PDFRadialGradient: PDFRadialGradient\n};\n/*\r\nPDF tiling pattern support. Uncolored only.\r\n */ var underlyingColorSpaces = [\n    \"DeviceCMYK\",\n    \"DeviceRGB\"\n];\nvar PDFTilingPattern = /*#__PURE__*/ function() {\n    function PDFTilingPattern(doc, bBox, xStep, yStep, stream) {\n        _classCallCheck(this, PDFTilingPattern);\n        this.doc = doc;\n        this.bBox = bBox;\n        this.xStep = xStep;\n        this.yStep = yStep;\n        this.stream = stream;\n    }\n    _createClass(PDFTilingPattern, [\n        {\n            key: \"createPattern\",\n            value: function createPattern() {\n                // no resources needed for our current usage\n                // required entry\n                var resources = this.doc.ref();\n                resources.end(); // apply default transform matrix (flipped in the default doc._ctm)\n                // see document.js & gradient.js\n                var _this$doc$_ctm = _slicedToArray(this.doc._ctm, 6), m0 = _this$doc$_ctm[0], m1 = _this$doc$_ctm[1], m2 = _this$doc$_ctm[2], m3 = _this$doc$_ctm[3], m4 = _this$doc$_ctm[4], m5 = _this$doc$_ctm[5];\n                var m11 = 1, m12 = 0, m21 = 0, m22 = 1, dx = 0, dy = 0;\n                var m = [\n                    m0 * m11 + m2 * m12,\n                    m1 * m11 + m3 * m12,\n                    m0 * m21 + m2 * m22,\n                    m1 * m21 + m3 * m22,\n                    m0 * dx + m2 * dy + m4,\n                    m1 * dx + m3 * dy + m5\n                ];\n                var pattern = this.doc.ref({\n                    Type: \"Pattern\",\n                    PatternType: 1,\n                    // tiling\n                    PaintType: 2,\n                    // 1-colored, 2-uncolored\n                    TilingType: 2,\n                    // 2-no distortion\n                    BBox: this.bBox,\n                    XStep: this.xStep,\n                    YStep: this.yStep,\n                    Matrix: m.map(function(v) {\n                        return +v.toFixed(5);\n                    }),\n                    Resources: resources\n                });\n                pattern.end(this.stream);\n                return pattern;\n            }\n        },\n        {\n            key: \"embedPatternColorSpaces\",\n            value: function embedPatternColorSpaces() {\n                var _this = this;\n                // map each pattern to an underlying color space\n                // and embed on each page\n                underlyingColorSpaces.forEach(function(csName) {\n                    var csId = _this.getPatternColorSpaceId(csName);\n                    if (_this.doc.page.colorSpaces[csId]) return;\n                    var cs = _this.doc.ref([\n                        \"Pattern\",\n                        csName\n                    ]);\n                    cs.end();\n                    _this.doc.page.colorSpaces[csId] = cs;\n                });\n            }\n        },\n        {\n            key: \"getPatternColorSpaceId\",\n            value: function getPatternColorSpaceId(underlyingColorspace) {\n                return \"CsP\".concat(underlyingColorspace);\n            }\n        },\n        {\n            key: \"embed\",\n            value: function embed() {\n                if (!this.id) {\n                    this.doc._patternCount = this.doc._patternCount + 1;\n                    this.id = \"P\" + this.doc._patternCount;\n                    this.pattern = this.createPattern();\n                } // patterns are embedded in each page\n                if (!this.doc.page.patterns[this.id]) {\n                    this.doc.page.patterns[this.id] = this.pattern;\n                }\n            }\n        },\n        {\n            key: \"apply\",\n            value: function apply(stroke, patternColor) {\n                // do any embedding/creating that might be needed\n                this.embedPatternColorSpaces();\n                this.embed();\n                var normalizedColor = this.doc._normalizeColor(patternColor);\n                if (!normalizedColor) throw Error(\"invalid pattern color. (value: \".concat(patternColor, \")\")); // select one of the pattern color spaces\n                var csId = this.getPatternColorSpaceId(this.doc._getColorSpace(normalizedColor));\n                this.doc._setColorSpace(csId, stroke); // stroke/fill using the pattern and color (in the above underlying color space)\n                var op = stroke ? \"SCN\" : \"scn\";\n                return this.doc.addContent(\"\".concat(normalizedColor.join(\" \"), \" /\").concat(this.id, \" \").concat(op));\n            }\n        }\n    ]);\n    return PDFTilingPattern;\n}();\nvar pattern = {\n    PDFTilingPattern: PDFTilingPattern\n};\nvar PDFGradient$1 = Gradient.PDFGradient, PDFLinearGradient$1 = Gradient.PDFLinearGradient, PDFRadialGradient$1 = Gradient.PDFRadialGradient;\nvar PDFTilingPattern$1 = pattern.PDFTilingPattern;\nvar ColorMixin = {\n    initColor: function initColor() {\n        // The opacity dictionaries\n        this._opacityRegistry = {};\n        this._opacityCount = 0;\n        this._patternCount = 0;\n        return this._gradCount = 0;\n    },\n    _normalizeColor: function _normalizeColor(color) {\n        if (typeof color === \"string\") {\n            if (color.charAt(0) === \"#\") {\n                if (color.length === 4) {\n                    color = color.replace(/#([0-9A-F])([0-9A-F])([0-9A-F])/i, \"#$1$1$2$2$3$3\");\n                }\n                var hex = parseInt(color.slice(1), 16);\n                color = [\n                    hex >> 16,\n                    hex >> 8 & 0xff,\n                    hex & 0xff\n                ];\n            } else if (namedColors[color]) {\n                color = namedColors[color];\n            }\n        }\n        if (Array.isArray(color)) {\n            // RGB\n            if (color.length === 3) {\n                color = color.map(function(part) {\n                    return part / 255;\n                }); // CMYK\n            } else if (color.length === 4) {\n                color = color.map(function(part) {\n                    return part / 100;\n                });\n            }\n            return color;\n        }\n        return null;\n    },\n    _setColor: function _setColor(color, stroke) {\n        if (color instanceof PDFGradient$1) {\n            color.apply(stroke);\n            return true; // see if tiling pattern, decode & apply it it\n        } else if (Array.isArray(color) && color[0] instanceof PDFTilingPattern$1) {\n            color[0].apply(stroke, color[1]);\n            return true;\n        } // any other case should be a normal color and not a pattern\n        return this._setColorCore(color, stroke);\n    },\n    _setColorCore: function _setColorCore(color, stroke) {\n        color = this._normalizeColor(color);\n        if (!color) {\n            return false;\n        }\n        var op = stroke ? \"SCN\" : \"scn\";\n        var space = this._getColorSpace(color);\n        this._setColorSpace(space, stroke);\n        color = color.join(\" \");\n        this.addContent(\"\".concat(color, \" \").concat(op));\n        return true;\n    },\n    _setColorSpace: function _setColorSpace(space, stroke) {\n        var op = stroke ? \"CS\" : \"cs\";\n        return this.addContent(\"/\".concat(space, \" \").concat(op));\n    },\n    _getColorSpace: function _getColorSpace(color) {\n        return color.length === 4 ? \"DeviceCMYK\" : \"DeviceRGB\";\n    },\n    fillColor: function fillColor(color, opacity) {\n        var set = this._setColor(color, false);\n        if (set) {\n            this.fillOpacity(opacity);\n        } // save this for text wrapper, which needs to reset\n        // the fill color on new pages\n        this._fillColor = [\n            color,\n            opacity\n        ];\n        return this;\n    },\n    strokeColor: function strokeColor(color, opacity) {\n        var set = this._setColor(color, true);\n        if (set) {\n            this.strokeOpacity(opacity);\n        }\n        return this;\n    },\n    opacity: function opacity(_opacity) {\n        this._doOpacity(_opacity, _opacity);\n        return this;\n    },\n    fillOpacity: function fillOpacity(opacity) {\n        this._doOpacity(opacity, null);\n        return this;\n    },\n    strokeOpacity: function strokeOpacity(opacity) {\n        this._doOpacity(null, opacity);\n        return this;\n    },\n    _doOpacity: function _doOpacity(fillOpacity, strokeOpacity) {\n        var dictionary, name;\n        if (fillOpacity == null && strokeOpacity == null) {\n            return;\n        }\n        if (fillOpacity != null) {\n            fillOpacity = Math.max(0, Math.min(1, fillOpacity));\n        }\n        if (strokeOpacity != null) {\n            strokeOpacity = Math.max(0, Math.min(1, strokeOpacity));\n        }\n        var key = \"\".concat(fillOpacity, \"_\").concat(strokeOpacity);\n        if (this._opacityRegistry[key]) {\n            var _this$_opacityRegistr = _slicedToArray(this._opacityRegistry[key], 2);\n            dictionary = _this$_opacityRegistr[0];\n            name = _this$_opacityRegistr[1];\n        } else {\n            dictionary = {\n                Type: \"ExtGState\"\n            };\n            if (fillOpacity != null) {\n                dictionary.ca = fillOpacity;\n            }\n            if (strokeOpacity != null) {\n                dictionary.CA = strokeOpacity;\n            }\n            dictionary = this.ref(dictionary);\n            dictionary.end();\n            var id = ++this._opacityCount;\n            name = \"Gs\".concat(id);\n            this._opacityRegistry[key] = [\n                dictionary,\n                name\n            ];\n        }\n        this.page.ext_gstates[name] = dictionary;\n        return this.addContent(\"/\".concat(name, \" gs\"));\n    },\n    linearGradient: function linearGradient(x1, y1, x2, y2) {\n        return new PDFLinearGradient$1(this, x1, y1, x2, y2);\n    },\n    radialGradient: function radialGradient(x1, y1, r1, x2, y2, r2) {\n        return new PDFRadialGradient$1(this, x1, y1, r1, x2, y2, r2);\n    },\n    pattern: function pattern(bbox, xStep, yStep, stream) {\n        return new PDFTilingPattern$1(this, bbox, xStep, yStep, stream);\n    }\n};\nvar namedColors = {\n    aliceblue: [\n        240,\n        248,\n        255\n    ],\n    antiquewhite: [\n        250,\n        235,\n        215\n    ],\n    aqua: [\n        0,\n        255,\n        255\n    ],\n    aquamarine: [\n        127,\n        255,\n        212\n    ],\n    azure: [\n        240,\n        255,\n        255\n    ],\n    beige: [\n        245,\n        245,\n        220\n    ],\n    bisque: [\n        255,\n        228,\n        196\n    ],\n    black: [\n        0,\n        0,\n        0\n    ],\n    blanchedalmond: [\n        255,\n        235,\n        205\n    ],\n    blue: [\n        0,\n        0,\n        255\n    ],\n    blueviolet: [\n        138,\n        43,\n        226\n    ],\n    brown: [\n        165,\n        42,\n        42\n    ],\n    burlywood: [\n        222,\n        184,\n        135\n    ],\n    cadetblue: [\n        95,\n        158,\n        160\n    ],\n    chartreuse: [\n        127,\n        255,\n        0\n    ],\n    chocolate: [\n        210,\n        105,\n        30\n    ],\n    coral: [\n        255,\n        127,\n        80\n    ],\n    cornflowerblue: [\n        100,\n        149,\n        237\n    ],\n    cornsilk: [\n        255,\n        248,\n        220\n    ],\n    crimson: [\n        220,\n        20,\n        60\n    ],\n    cyan: [\n        0,\n        255,\n        255\n    ],\n    darkblue: [\n        0,\n        0,\n        139\n    ],\n    darkcyan: [\n        0,\n        139,\n        139\n    ],\n    darkgoldenrod: [\n        184,\n        134,\n        11\n    ],\n    darkgray: [\n        169,\n        169,\n        169\n    ],\n    darkgreen: [\n        0,\n        100,\n        0\n    ],\n    darkgrey: [\n        169,\n        169,\n        169\n    ],\n    darkkhaki: [\n        189,\n        183,\n        107\n    ],\n    darkmagenta: [\n        139,\n        0,\n        139\n    ],\n    darkolivegreen: [\n        85,\n        107,\n        47\n    ],\n    darkorange: [\n        255,\n        140,\n        0\n    ],\n    darkorchid: [\n        153,\n        50,\n        204\n    ],\n    darkred: [\n        139,\n        0,\n        0\n    ],\n    darksalmon: [\n        233,\n        150,\n        122\n    ],\n    darkseagreen: [\n        143,\n        188,\n        143\n    ],\n    darkslateblue: [\n        72,\n        61,\n        139\n    ],\n    darkslategray: [\n        47,\n        79,\n        79\n    ],\n    darkslategrey: [\n        47,\n        79,\n        79\n    ],\n    darkturquoise: [\n        0,\n        206,\n        209\n    ],\n    darkviolet: [\n        148,\n        0,\n        211\n    ],\n    deeppink: [\n        255,\n        20,\n        147\n    ],\n    deepskyblue: [\n        0,\n        191,\n        255\n    ],\n    dimgray: [\n        105,\n        105,\n        105\n    ],\n    dimgrey: [\n        105,\n        105,\n        105\n    ],\n    dodgerblue: [\n        30,\n        144,\n        255\n    ],\n    firebrick: [\n        178,\n        34,\n        34\n    ],\n    floralwhite: [\n        255,\n        250,\n        240\n    ],\n    forestgreen: [\n        34,\n        139,\n        34\n    ],\n    fuchsia: [\n        255,\n        0,\n        255\n    ],\n    gainsboro: [\n        220,\n        220,\n        220\n    ],\n    ghostwhite: [\n        248,\n        248,\n        255\n    ],\n    gold: [\n        255,\n        215,\n        0\n    ],\n    goldenrod: [\n        218,\n        165,\n        32\n    ],\n    gray: [\n        128,\n        128,\n        128\n    ],\n    grey: [\n        128,\n        128,\n        128\n    ],\n    green: [\n        0,\n        128,\n        0\n    ],\n    greenyellow: [\n        173,\n        255,\n        47\n    ],\n    honeydew: [\n        240,\n        255,\n        240\n    ],\n    hotpink: [\n        255,\n        105,\n        180\n    ],\n    indianred: [\n        205,\n        92,\n        92\n    ],\n    indigo: [\n        75,\n        0,\n        130\n    ],\n    ivory: [\n        255,\n        255,\n        240\n    ],\n    khaki: [\n        240,\n        230,\n        140\n    ],\n    lavender: [\n        230,\n        230,\n        250\n    ],\n    lavenderblush: [\n        255,\n        240,\n        245\n    ],\n    lawngreen: [\n        124,\n        252,\n        0\n    ],\n    lemonchiffon: [\n        255,\n        250,\n        205\n    ],\n    lightblue: [\n        173,\n        216,\n        230\n    ],\n    lightcoral: [\n        240,\n        128,\n        128\n    ],\n    lightcyan: [\n        224,\n        255,\n        255\n    ],\n    lightgoldenrodyellow: [\n        250,\n        250,\n        210\n    ],\n    lightgray: [\n        211,\n        211,\n        211\n    ],\n    lightgreen: [\n        144,\n        238,\n        144\n    ],\n    lightgrey: [\n        211,\n        211,\n        211\n    ],\n    lightpink: [\n        255,\n        182,\n        193\n    ],\n    lightsalmon: [\n        255,\n        160,\n        122\n    ],\n    lightseagreen: [\n        32,\n        178,\n        170\n    ],\n    lightskyblue: [\n        135,\n        206,\n        250\n    ],\n    lightslategray: [\n        119,\n        136,\n        153\n    ],\n    lightslategrey: [\n        119,\n        136,\n        153\n    ],\n    lightsteelblue: [\n        176,\n        196,\n        222\n    ],\n    lightyellow: [\n        255,\n        255,\n        224\n    ],\n    lime: [\n        0,\n        255,\n        0\n    ],\n    limegreen: [\n        50,\n        205,\n        50\n    ],\n    linen: [\n        250,\n        240,\n        230\n    ],\n    magenta: [\n        255,\n        0,\n        255\n    ],\n    maroon: [\n        128,\n        0,\n        0\n    ],\n    mediumaquamarine: [\n        102,\n        205,\n        170\n    ],\n    mediumblue: [\n        0,\n        0,\n        205\n    ],\n    mediumorchid: [\n        186,\n        85,\n        211\n    ],\n    mediumpurple: [\n        147,\n        112,\n        219\n    ],\n    mediumseagreen: [\n        60,\n        179,\n        113\n    ],\n    mediumslateblue: [\n        123,\n        104,\n        238\n    ],\n    mediumspringgreen: [\n        0,\n        250,\n        154\n    ],\n    mediumturquoise: [\n        72,\n        209,\n        204\n    ],\n    mediumvioletred: [\n        199,\n        21,\n        133\n    ],\n    midnightblue: [\n        25,\n        25,\n        112\n    ],\n    mintcream: [\n        245,\n        255,\n        250\n    ],\n    mistyrose: [\n        255,\n        228,\n        225\n    ],\n    moccasin: [\n        255,\n        228,\n        181\n    ],\n    navajowhite: [\n        255,\n        222,\n        173\n    ],\n    navy: [\n        0,\n        0,\n        128\n    ],\n    oldlace: [\n        253,\n        245,\n        230\n    ],\n    olive: [\n        128,\n        128,\n        0\n    ],\n    olivedrab: [\n        107,\n        142,\n        35\n    ],\n    orange: [\n        255,\n        165,\n        0\n    ],\n    orangered: [\n        255,\n        69,\n        0\n    ],\n    orchid: [\n        218,\n        112,\n        214\n    ],\n    palegoldenrod: [\n        238,\n        232,\n        170\n    ],\n    palegreen: [\n        152,\n        251,\n        152\n    ],\n    paleturquoise: [\n        175,\n        238,\n        238\n    ],\n    palevioletred: [\n        219,\n        112,\n        147\n    ],\n    papayawhip: [\n        255,\n        239,\n        213\n    ],\n    peachpuff: [\n        255,\n        218,\n        185\n    ],\n    peru: [\n        205,\n        133,\n        63\n    ],\n    pink: [\n        255,\n        192,\n        203\n    ],\n    plum: [\n        221,\n        160,\n        221\n    ],\n    powderblue: [\n        176,\n        224,\n        230\n    ],\n    purple: [\n        128,\n        0,\n        128\n    ],\n    red: [\n        255,\n        0,\n        0\n    ],\n    rosybrown: [\n        188,\n        143,\n        143\n    ],\n    royalblue: [\n        65,\n        105,\n        225\n    ],\n    saddlebrown: [\n        139,\n        69,\n        19\n    ],\n    salmon: [\n        250,\n        128,\n        114\n    ],\n    sandybrown: [\n        244,\n        164,\n        96\n    ],\n    seagreen: [\n        46,\n        139,\n        87\n    ],\n    seashell: [\n        255,\n        245,\n        238\n    ],\n    sienna: [\n        160,\n        82,\n        45\n    ],\n    silver: [\n        192,\n        192,\n        192\n    ],\n    skyblue: [\n        135,\n        206,\n        235\n    ],\n    slateblue: [\n        106,\n        90,\n        205\n    ],\n    slategray: [\n        112,\n        128,\n        144\n    ],\n    slategrey: [\n        112,\n        128,\n        144\n    ],\n    snow: [\n        255,\n        250,\n        250\n    ],\n    springgreen: [\n        0,\n        255,\n        127\n    ],\n    steelblue: [\n        70,\n        130,\n        180\n    ],\n    tan: [\n        210,\n        180,\n        140\n    ],\n    teal: [\n        0,\n        128,\n        128\n    ],\n    thistle: [\n        216,\n        191,\n        216\n    ],\n    tomato: [\n        255,\n        99,\n        71\n    ],\n    turquoise: [\n        64,\n        224,\n        208\n    ],\n    violet: [\n        238,\n        130,\n        238\n    ],\n    wheat: [\n        245,\n        222,\n        179\n    ],\n    white: [\n        255,\n        255,\n        255\n    ],\n    whitesmoke: [\n        245,\n        245,\n        245\n    ],\n    yellow: [\n        255,\n        255,\n        0\n    ],\n    yellowgreen: [\n        154,\n        205,\n        50\n    ]\n};\nvar cx, cy, px, py, sx, sy;\ncx = cy = px = py = sx = sy = 0;\nvar parameters = {\n    A: 7,\n    a: 7,\n    C: 6,\n    c: 6,\n    H: 1,\n    h: 1,\n    L: 2,\n    l: 2,\n    M: 2,\n    m: 2,\n    Q: 4,\n    q: 4,\n    S: 4,\n    s: 4,\n    T: 2,\n    t: 2,\n    V: 1,\n    v: 1,\n    Z: 0,\n    z: 0\n};\nvar parse = function parse(path) {\n    var cmd;\n    var ret = [];\n    var args = [];\n    var curArg = \"\";\n    var foundDecimal = false;\n    var params = 0;\n    var _iterator = _createForOfIteratorHelper(path), _step;\n    try {\n        for(_iterator.s(); !(_step = _iterator.n()).done;){\n            var c = _step.value;\n            if (parameters[c] != null) {\n                params = parameters[c];\n                if (cmd) {\n                    // save existing command\n                    if (curArg.length > 0) {\n                        args[args.length] = +curArg;\n                    }\n                    ret[ret.length] = {\n                        cmd: cmd,\n                        args: args\n                    };\n                    args = [];\n                    curArg = \"\";\n                    foundDecimal = false;\n                }\n                cmd = c;\n            } else if ([\n                \" \",\n                \",\"\n            ].includes(c) || c === \"-\" && curArg.length > 0 && curArg[curArg.length - 1] !== \"e\" || c === \".\" && foundDecimal) {\n                if (curArg.length === 0) {\n                    continue;\n                }\n                if (args.length === params) {\n                    // handle reused commands\n                    ret[ret.length] = {\n                        cmd: cmd,\n                        args: args\n                    };\n                    args = [\n                        +curArg\n                    ]; // handle assumed commands\n                    if (cmd === \"M\") {\n                        cmd = \"L\";\n                    }\n                    if (cmd === \"m\") {\n                        cmd = \"l\";\n                    }\n                } else {\n                    args[args.length] = +curArg;\n                }\n                foundDecimal = c === \".\"; // fix for negative numbers or repeated decimals with no delimeter between commands\n                curArg = [\n                    \"-\",\n                    \".\"\n                ].includes(c) ? c : \"\";\n            } else {\n                curArg += c;\n                if (c === \".\") {\n                    foundDecimal = true;\n                }\n            }\n        } // add the last command\n    } catch (err) {\n        _iterator.e(err);\n    } finally{\n        _iterator.f();\n    }\n    if (curArg.length > 0) {\n        if (args.length === params) {\n            // handle reused commands\n            ret[ret.length] = {\n                cmd: cmd,\n                args: args\n            };\n            args = [\n                +curArg\n            ]; // handle assumed commands\n            if (cmd === \"M\") {\n                cmd = \"L\";\n            }\n            if (cmd === \"m\") {\n                cmd = \"l\";\n            }\n        } else {\n            args[args.length] = +curArg;\n        }\n    }\n    ret[ret.length] = {\n        cmd: cmd,\n        args: args\n    };\n    return ret;\n};\nvar _apply = function apply(commands, doc) {\n    // current point, control point, and subpath starting point\n    cx = cy = px = py = sx = sy = 0; // run the commands\n    for(var i = 0; i < commands.length; i++){\n        var c = commands[i];\n        if (typeof runners[c.cmd] === \"function\") {\n            runners[c.cmd](doc, c.args);\n        }\n    }\n};\nvar runners = {\n    M: function M(doc, a) {\n        cx = a[0];\n        cy = a[1];\n        px = py = null;\n        sx = cx;\n        sy = cy;\n        return doc.moveTo(cx, cy);\n    },\n    m: function m(doc, a) {\n        cx += a[0];\n        cy += a[1];\n        px = py = null;\n        sx = cx;\n        sy = cy;\n        return doc.moveTo(cx, cy);\n    },\n    C: function C(doc, a) {\n        cx = a[4];\n        cy = a[5];\n        px = a[2];\n        py = a[3];\n        return doc.bezierCurveTo.apply(doc, _toConsumableArray(a));\n    },\n    c: function c(doc, a) {\n        doc.bezierCurveTo(a[0] + cx, a[1] + cy, a[2] + cx, a[3] + cy, a[4] + cx, a[5] + cy);\n        px = cx + a[2];\n        py = cy + a[3];\n        cx += a[4];\n        return cy += a[5];\n    },\n    S: function S(doc, a) {\n        if (px === null) {\n            px = cx;\n            py = cy;\n        }\n        doc.bezierCurveTo(cx - (px - cx), cy - (py - cy), a[0], a[1], a[2], a[3]);\n        px = a[0];\n        py = a[1];\n        cx = a[2];\n        return cy = a[3];\n    },\n    s: function s(doc, a) {\n        if (px === null) {\n            px = cx;\n            py = cy;\n        }\n        doc.bezierCurveTo(cx - (px - cx), cy - (py - cy), cx + a[0], cy + a[1], cx + a[2], cy + a[3]);\n        px = cx + a[0];\n        py = cy + a[1];\n        cx += a[2];\n        return cy += a[3];\n    },\n    Q: function Q(doc, a) {\n        px = a[0];\n        py = a[1];\n        cx = a[2];\n        cy = a[3];\n        return doc.quadraticCurveTo(a[0], a[1], cx, cy);\n    },\n    q: function q(doc, a) {\n        doc.quadraticCurveTo(a[0] + cx, a[1] + cy, a[2] + cx, a[3] + cy);\n        px = cx + a[0];\n        py = cy + a[1];\n        cx += a[2];\n        return cy += a[3];\n    },\n    T: function T(doc, a) {\n        if (px === null) {\n            px = cx;\n            py = cy;\n        } else {\n            px = cx - (px - cx);\n            py = cy - (py - cy);\n        }\n        doc.quadraticCurveTo(px, py, a[0], a[1]);\n        px = cx - (px - cx);\n        py = cy - (py - cy);\n        cx = a[0];\n        return cy = a[1];\n    },\n    t: function t(doc, a) {\n        if (px === null) {\n            px = cx;\n            py = cy;\n        } else {\n            px = cx - (px - cx);\n            py = cy - (py - cy);\n        }\n        doc.quadraticCurveTo(px, py, cx + a[0], cy + a[1]);\n        cx += a[0];\n        return cy += a[1];\n    },\n    A: function A(doc, a) {\n        solveArc(doc, cx, cy, a);\n        cx = a[5];\n        return cy = a[6];\n    },\n    a: function a(doc, _a) {\n        _a[5] += cx;\n        _a[6] += cy;\n        solveArc(doc, cx, cy, _a);\n        cx = _a[5];\n        return cy = _a[6];\n    },\n    L: function L(doc, a) {\n        cx = a[0];\n        cy = a[1];\n        px = py = null;\n        return doc.lineTo(cx, cy);\n    },\n    l: function l(doc, a) {\n        cx += a[0];\n        cy += a[1];\n        px = py = null;\n        return doc.lineTo(cx, cy);\n    },\n    H: function H(doc, a) {\n        cx = a[0];\n        px = py = null;\n        return doc.lineTo(cx, cy);\n    },\n    h: function h(doc, a) {\n        cx += a[0];\n        px = py = null;\n        return doc.lineTo(cx, cy);\n    },\n    V: function V(doc, a) {\n        cy = a[0];\n        px = py = null;\n        return doc.lineTo(cx, cy);\n    },\n    v: function v(doc, a) {\n        cy += a[0];\n        px = py = null;\n        return doc.lineTo(cx, cy);\n    },\n    Z: function Z(doc) {\n        doc.closePath();\n        cx = sx;\n        return cy = sy;\n    },\n    z: function z(doc) {\n        doc.closePath();\n        cx = sx;\n        return cy = sy;\n    }\n};\nvar solveArc = function solveArc(doc, x, y, coords) {\n    var _coords = _slicedToArray(coords, 7), rx = _coords[0], ry = _coords[1], rot = _coords[2], large = _coords[3], sweep = _coords[4], ex = _coords[5], ey = _coords[6];\n    var segs = arcToSegments(ex, ey, rx, ry, large, sweep, rot, x, y);\n    var _iterator2 = _createForOfIteratorHelper(segs), _step2;\n    try {\n        for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){\n            var seg = _step2.value;\n            var bez = segmentToBezier.apply(void 0, _toConsumableArray(seg));\n            doc.bezierCurveTo.apply(doc, _toConsumableArray(bez));\n        }\n    } catch (err) {\n        _iterator2.e(err);\n    } finally{\n        _iterator2.f();\n    }\n}; // from Inkscape svgtopdf, thanks!\nvar arcToSegments = function arcToSegments(x, y, rx, ry, large, sweep, rotateX, ox, oy) {\n    var th = rotateX * (Math.PI / 180);\n    var sin_th = Math.sin(th);\n    var cos_th = Math.cos(th);\n    rx = Math.abs(rx);\n    ry = Math.abs(ry);\n    px = cos_th * (ox - x) * 0.5 + sin_th * (oy - y) * 0.5;\n    py = cos_th * (oy - y) * 0.5 - sin_th * (ox - x) * 0.5;\n    var pl = px * px / (rx * rx) + py * py / (ry * ry);\n    if (pl > 1) {\n        pl = Math.sqrt(pl);\n        rx *= pl;\n        ry *= pl;\n    }\n    var a00 = cos_th / rx;\n    var a01 = sin_th / rx;\n    var a10 = -sin_th / ry;\n    var a11 = cos_th / ry;\n    var x0 = a00 * ox + a01 * oy;\n    var y0 = a10 * ox + a11 * oy;\n    var x1 = a00 * x + a01 * y;\n    var y1 = a10 * x + a11 * y;\n    var d = (x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0);\n    var sfactor_sq = 1 / d - 0.25;\n    if (sfactor_sq < 0) {\n        sfactor_sq = 0;\n    }\n    var sfactor = Math.sqrt(sfactor_sq);\n    if (sweep === large) {\n        sfactor = -sfactor;\n    }\n    var xc = 0.5 * (x0 + x1) - sfactor * (y1 - y0);\n    var yc = 0.5 * (y0 + y1) + sfactor * (x1 - x0);\n    var th0 = Math.atan2(y0 - yc, x0 - xc);\n    var th1 = Math.atan2(y1 - yc, x1 - xc);\n    var th_arc = th1 - th0;\n    if (th_arc < 0 && sweep === 1) {\n        th_arc += 2 * Math.PI;\n    } else if (th_arc > 0 && sweep === 0) {\n        th_arc -= 2 * Math.PI;\n    }\n    var segments = Math.ceil(Math.abs(th_arc / (Math.PI * 0.5 + 0.001)));\n    var result = [];\n    for(var i = 0; i < segments; i++){\n        var th2 = th0 + i * th_arc / segments;\n        var th3 = th0 + (i + 1) * th_arc / segments;\n        result[i] = [\n            xc,\n            yc,\n            th2,\n            th3,\n            rx,\n            ry,\n            sin_th,\n            cos_th\n        ];\n    }\n    return result;\n};\nvar segmentToBezier = function segmentToBezier(cx, cy, th0, th1, rx, ry, sin_th, cos_th) {\n    var a00 = cos_th * rx;\n    var a01 = -sin_th * ry;\n    var a10 = sin_th * rx;\n    var a11 = cos_th * ry;\n    var th_half = 0.5 * (th1 - th0);\n    var t = 8 / 3 * Math.sin(th_half * 0.5) * Math.sin(th_half * 0.5) / Math.sin(th_half);\n    var x1 = cx + Math.cos(th0) - t * Math.sin(th0);\n    var y1 = cy + Math.sin(th0) + t * Math.cos(th0);\n    var x3 = cx + Math.cos(th1);\n    var y3 = cy + Math.sin(th1);\n    var x2 = x3 + t * Math.sin(th1);\n    var y2 = y3 - t * Math.cos(th1);\n    return [\n        a00 * x1 + a01 * y1,\n        a10 * x1 + a11 * y1,\n        a00 * x2 + a01 * y2,\n        a10 * x2 + a11 * y2,\n        a00 * x3 + a01 * y3,\n        a10 * x3 + a11 * y3\n    ];\n};\nvar SVGPath = /*#__PURE__*/ function() {\n    function SVGPath() {\n        _classCallCheck(this, SVGPath);\n    }\n    _createClass(SVGPath, null, [\n        {\n            key: \"apply\",\n            value: function apply(doc, path) {\n                var commands = parse(path);\n                _apply(commands, doc);\n            }\n        }\n    ]);\n    return SVGPath;\n}();\nvar number$1 = PDFObject.number; // This constant is used to approximate a symmetrical arc using a cubic\n// Bezier curve.\nvar KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);\nvar VectorMixin = {\n    initVector: function initVector() {\n        this._ctm = [\n            1,\n            0,\n            0,\n            1,\n            0,\n            0\n        ]; // current transformation matrix\n        return this._ctmStack = [];\n    },\n    save: function save() {\n        this._ctmStack.push(this._ctm.slice()); // TODO: save/restore colorspace and styles so not setting it unnessesarily all the time?\n        return this.addContent(\"q\");\n    },\n    restore: function restore() {\n        this._ctm = this._ctmStack.pop() || [\n            1,\n            0,\n            0,\n            1,\n            0,\n            0\n        ];\n        return this.addContent(\"Q\");\n    },\n    closePath: function closePath() {\n        return this.addContent(\"h\");\n    },\n    lineWidth: function lineWidth(w) {\n        return this.addContent(\"\".concat(number$1(w), \" w\"));\n    },\n    _CAP_STYLES: {\n        BUTT: 0,\n        ROUND: 1,\n        SQUARE: 2\n    },\n    lineCap: function lineCap(c) {\n        if (typeof c === \"string\") {\n            c = this._CAP_STYLES[c.toUpperCase()];\n        }\n        return this.addContent(\"\".concat(c, \" J\"));\n    },\n    _JOIN_STYLES: {\n        MITER: 0,\n        ROUND: 1,\n        BEVEL: 2\n    },\n    lineJoin: function lineJoin(j) {\n        if (typeof j === \"string\") {\n            j = this._JOIN_STYLES[j.toUpperCase()];\n        }\n        return this.addContent(\"\".concat(j, \" j\"));\n    },\n    miterLimit: function miterLimit(m) {\n        return this.addContent(\"\".concat(number$1(m), \" M\"));\n    },\n    dash: function dash(length) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var originalLength = length;\n        if (!Array.isArray(length)) {\n            length = [\n                length,\n                options.space || length\n            ];\n        }\n        var valid = length.every(function(x) {\n            return Number.isFinite(x) && x > 0;\n        });\n        if (!valid) {\n            throw new Error(\"dash(\".concat(JSON.stringify(originalLength), \", \").concat(JSON.stringify(options), \") invalid, lengths must be numeric and greater than zero\"));\n        }\n        length = length.map(number$1).join(\" \");\n        return this.addContent(\"[\".concat(length, \"] \").concat(number$1(options.phase || 0), \" d\"));\n    },\n    undash: function undash() {\n        return this.addContent(\"[] 0 d\");\n    },\n    moveTo: function moveTo(x, y) {\n        return this.addContent(\"\".concat(number$1(x), \" \").concat(number$1(y), \" m\"));\n    },\n    lineTo: function lineTo(x, y) {\n        return this.addContent(\"\".concat(number$1(x), \" \").concat(number$1(y), \" l\"));\n    },\n    bezierCurveTo: function bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {\n        return this.addContent(\"\".concat(number$1(cp1x), \" \").concat(number$1(cp1y), \" \").concat(number$1(cp2x), \" \").concat(number$1(cp2y), \" \").concat(number$1(x), \" \").concat(number$1(y), \" c\"));\n    },\n    quadraticCurveTo: function quadraticCurveTo(cpx, cpy, x, y) {\n        return this.addContent(\"\".concat(number$1(cpx), \" \").concat(number$1(cpy), \" \").concat(number$1(x), \" \").concat(number$1(y), \" v\"));\n    },\n    rect: function rect(x, y, w, h) {\n        return this.addContent(\"\".concat(number$1(x), \" \").concat(number$1(y), \" \").concat(number$1(w), \" \").concat(number$1(h), \" re\"));\n    },\n    roundedRect: function roundedRect(x, y, w, h, r) {\n        if (r == null) {\n            r = 0;\n        }\n        r = Math.min(r, 0.5 * w, 0.5 * h); // amount to inset control points from corners (see `ellipse`)\n        var c = r * (1.0 - KAPPA);\n        this.moveTo(x + r, y);\n        this.lineTo(x + w - r, y);\n        this.bezierCurveTo(x + w - c, y, x + w, y + c, x + w, y + r);\n        this.lineTo(x + w, y + h - r);\n        this.bezierCurveTo(x + w, y + h - c, x + w - c, y + h, x + w - r, y + h);\n        this.lineTo(x + r, y + h);\n        this.bezierCurveTo(x + c, y + h, x, y + h - c, x, y + h - r);\n        this.lineTo(x, y + r);\n        this.bezierCurveTo(x, y + c, x + c, y, x + r, y);\n        return this.closePath();\n    },\n    ellipse: function ellipse(x, y, r1, r2) {\n        // based on http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas/2173084#2173084\n        if (r2 == null) {\n            r2 = r1;\n        }\n        x -= r1;\n        y -= r2;\n        var ox = r1 * KAPPA;\n        var oy = r2 * KAPPA;\n        var xe = x + r1 * 2;\n        var ye = y + r2 * 2;\n        var xm = x + r1;\n        var ym = y + r2;\n        this.moveTo(x, ym);\n        this.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\n        this.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\n        this.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\n        this.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\n        return this.closePath();\n    },\n    circle: function circle(x, y, radius) {\n        return this.ellipse(x, y, radius);\n    },\n    arc: function arc(x, y, radius, startAngle, endAngle, anticlockwise) {\n        if (anticlockwise == null) {\n            anticlockwise = false;\n        }\n        var TWO_PI = 2.0 * Math.PI;\n        var HALF_PI = 0.5 * Math.PI;\n        var deltaAng = endAngle - startAngle;\n        if (Math.abs(deltaAng) > TWO_PI) {\n            // draw only full circle if more than that is specified\n            deltaAng = TWO_PI;\n        } else if (deltaAng !== 0 && anticlockwise !== deltaAng < 0) {\n            // necessary to flip direction of rendering\n            var dir = anticlockwise ? -1 : 1;\n            deltaAng = dir * TWO_PI + deltaAng;\n        }\n        var numSegs = Math.ceil(Math.abs(deltaAng) / HALF_PI);\n        var segAng = deltaAng / numSegs;\n        var handleLen = segAng / HALF_PI * KAPPA * radius;\n        var curAng = startAngle; // component distances between anchor point and control point\n        var deltaCx = -Math.sin(curAng) * handleLen;\n        var deltaCy = Math.cos(curAng) * handleLen; // anchor point\n        var ax = x + Math.cos(curAng) * radius;\n        var ay = y + Math.sin(curAng) * radius; // calculate and render segments\n        this.moveTo(ax, ay);\n        for(var segIdx = 0; segIdx < numSegs; segIdx++){\n            // starting control point\n            var cp1x = ax + deltaCx;\n            var cp1y = ay + deltaCy; // step angle\n            curAng += segAng; // next anchor point\n            ax = x + Math.cos(curAng) * radius;\n            ay = y + Math.sin(curAng) * radius; // next control point delta\n            deltaCx = -Math.sin(curAng) * handleLen;\n            deltaCy = Math.cos(curAng) * handleLen; // ending control point\n            var cp2x = ax - deltaCx;\n            var cp2y = ay - deltaCy; // render segment\n            this.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, ax, ay);\n        }\n        return this;\n    },\n    polygon: function polygon() {\n        for(var _len = arguments.length, points = new Array(_len), _key = 0; _key < _len; _key++){\n            points[_key] = arguments[_key];\n        }\n        this.moveTo.apply(this, _toConsumableArray(points.shift() || []));\n        for(var _i = 0, _points = points; _i < _points.length; _i++){\n            var point = _points[_i];\n            this.lineTo.apply(this, _toConsumableArray(point || []));\n        }\n        return this.closePath();\n    },\n    path: function path(_path) {\n        SVGPath.apply(this, _path);\n        return this;\n    },\n    _windingRule: function _windingRule(rule) {\n        if (/even-?odd/.test(rule)) {\n            return \"*\";\n        }\n        return \"\";\n    },\n    fill: function fill(color, rule) {\n        if (/(even-?odd)|(non-?zero)/.test(color)) {\n            rule = color;\n            color = null;\n        }\n        if (color) {\n            this.fillColor(color);\n        }\n        return this.addContent(\"f\".concat(this._windingRule(rule)));\n    },\n    stroke: function stroke(color) {\n        if (color) {\n            this.strokeColor(color);\n        }\n        return this.addContent(\"S\");\n    },\n    fillAndStroke: function fillAndStroke(fillColor, strokeColor, rule) {\n        if (strokeColor == null) {\n            strokeColor = fillColor;\n        }\n        var isFillRule = /(even-?odd)|(non-?zero)/;\n        if (isFillRule.test(fillColor)) {\n            rule = fillColor;\n            fillColor = null;\n        }\n        if (isFillRule.test(strokeColor)) {\n            rule = strokeColor;\n            strokeColor = fillColor;\n        }\n        if (fillColor) {\n            this.fillColor(fillColor);\n            this.strokeColor(strokeColor);\n        }\n        return this.addContent(\"B\".concat(this._windingRule(rule)));\n    },\n    clip: function clip(rule) {\n        return this.addContent(\"W\".concat(this._windingRule(rule), \" n\"));\n    },\n    transform: function transform(m11, m12, m21, m22, dx, dy) {\n        // keep track of the current transformation matrix\n        var m = this._ctm;\n        var _m = _slicedToArray(m, 6), m0 = _m[0], m1 = _m[1], m2 = _m[2], m3 = _m[3], m4 = _m[4], m5 = _m[5];\n        m[0] = m0 * m11 + m2 * m12;\n        m[1] = m1 * m11 + m3 * m12;\n        m[2] = m0 * m21 + m2 * m22;\n        m[3] = m1 * m21 + m3 * m22;\n        m[4] = m0 * dx + m2 * dy + m4;\n        m[5] = m1 * dx + m3 * dy + m5;\n        var values = [\n            m11,\n            m12,\n            m21,\n            m22,\n            dx,\n            dy\n        ].map(function(v) {\n            return number$1(v);\n        }).join(\" \");\n        return this.addContent(\"\".concat(values, \" cm\"));\n    },\n    translate: function translate(x, y) {\n        return this.transform(1, 0, 0, 1, x, y);\n    },\n    rotate: function rotate(angle) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var y;\n        var rad = angle * Math.PI / 180;\n        var cos = Math.cos(rad);\n        var sin = Math.sin(rad);\n        var x = y = 0;\n        if (options.origin != null) {\n            var _options$origin = _slicedToArray(options.origin, 2);\n            x = _options$origin[0];\n            y = _options$origin[1];\n            var x1 = x * cos - y * sin;\n            var y1 = x * sin + y * cos;\n            x -= x1;\n            y -= y1;\n        }\n        return this.transform(cos, sin, -sin, cos, x, y);\n    },\n    scale: function scale(xFactor, yFactor) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        var y;\n        if (yFactor == null) {\n            yFactor = xFactor;\n        }\n        if (typeof yFactor === \"object\") {\n            options = yFactor;\n            yFactor = xFactor;\n        }\n        var x = y = 0;\n        if (options.origin != null) {\n            var _options$origin2 = _slicedToArray(options.origin, 2);\n            x = _options$origin2[0];\n            y = _options$origin2[1];\n            x -= xFactor * x;\n            y -= yFactor * y;\n        }\n        return this.transform(xFactor, 0, 0, yFactor, x, y);\n    }\n};\nvar WIN_ANSI_MAP = {\n    402: 131,\n    8211: 150,\n    8212: 151,\n    8216: 145,\n    8217: 146,\n    8218: 130,\n    8220: 147,\n    8221: 148,\n    8222: 132,\n    8224: 134,\n    8225: 135,\n    8226: 149,\n    8230: 133,\n    8364: 128,\n    8240: 137,\n    8249: 139,\n    8250: 155,\n    710: 136,\n    8482: 153,\n    338: 140,\n    339: 156,\n    732: 152,\n    352: 138,\n    353: 154,\n    376: 159,\n    381: 142,\n    382: 158\n};\nvar characters = \".notdef       .notdef        .notdef        .notdef\\n.notdef       .notdef        .notdef        .notdef\\n.notdef       .notdef        .notdef        .notdef\\n.notdef       .notdef        .notdef        .notdef\\n.notdef       .notdef        .notdef        .notdef\\n.notdef       .notdef        .notdef        .notdef\\n.notdef       .notdef        .notdef        .notdef\\n.notdef       .notdef        .notdef        .notdef\\n  \\nspace         exclam         quotedbl       numbersign\\ndollar        percent        ampersand      quotesingle\\nparenleft     parenright     asterisk       plus\\ncomma         hyphen         period         slash\\nzero          one            two            three\\nfour          five           six            seven\\neight         nine           colon          semicolon\\nless          equal          greater        question\\n  \\nat            A              B              C\\nD             E              F              G\\nH             I              J              K\\nL             M              N              O\\nP             Q              R              S\\nT             U              V              W\\nX             Y              Z              bracketleft\\nbackslash     bracketright   asciicircum    underscore\\n  \\ngrave         a              b              c\\nd             e              f              g\\nh             i              j              k\\nl             m              n              o\\np             q              r              s\\nt             u              v              w\\nx             y              z              braceleft\\nbar           braceright     asciitilde     .notdef\\n  \\nEuro          .notdef        quotesinglbase florin\\nquotedblbase  ellipsis       dagger         daggerdbl\\ncircumflex    perthousand    Scaron         guilsinglleft\\nOE            .notdef        Zcaron         .notdef\\n.notdef       quoteleft      quoteright     quotedblleft\\nquotedblright bullet         endash         emdash\\ntilde         trademark      scaron         guilsinglright\\noe            .notdef        zcaron         ydieresis\\n  \\nspace         exclamdown     cent           sterling\\ncurrency      yen            brokenbar      section\\ndieresis      copyright      ordfeminine    guillemotleft\\nlogicalnot    hyphen         registered     macron\\ndegree        plusminus      twosuperior    threesuperior\\nacute         mu             paragraph      periodcentered\\ncedilla       onesuperior    ordmasculine   guillemotright\\nonequarter    onehalf        threequarters  questiondown\\n  \\nAgrave        Aacute         Acircumflex    Atilde\\nAdieresis     Aring          AE             Ccedilla\\nEgrave        Eacute         Ecircumflex    Edieresis\\nIgrave        Iacute         Icircumflex    Idieresis\\nEth           Ntilde         Ograve         Oacute\\nOcircumflex   Otilde         Odieresis      multiply\\nOslash        Ugrave         Uacute         Ucircumflex\\nUdieresis     Yacute         Thorn          germandbls\\n  \\nagrave        aacute         acircumflex    atilde\\nadieresis     aring          ae             ccedilla\\negrave        eacute         ecircumflex    edieresis\\nigrave        iacute         icircumflex    idieresis\\neth           ntilde         ograve         oacute\\nocircumflex   otilde         odieresis      divide\\noslash        ugrave         uacute         ucircumflex\\nudieresis     yacute         thorn          ydieresis\".split(/\\s+/);\nvar AFMFont = /*#__PURE__*/ function() {\n    function AFMFont(contents) {\n        _classCallCheck(this, AFMFont);\n        this.contents = contents;\n        this.attributes = {};\n        this.glyphWidths = {};\n        this.boundingBoxes = {};\n        this.kernPairs = {};\n        this.parse(); // todo: remove charWidths since appears to not be used\n        this.charWidths = new Array(256);\n        for(var char = 0; char <= 255; char++){\n            this.charWidths[char] = this.glyphWidths[characters[char]];\n        }\n        this.bbox = this.attributes[\"FontBBox\"].split(/\\s+/).map(function(e) {\n            return +e;\n        });\n        this.ascender = +(this.attributes[\"Ascender\"] || 0);\n        this.descender = +(this.attributes[\"Descender\"] || 0);\n        this.xHeight = +(this.attributes[\"XHeight\"] || 0);\n        this.capHeight = +(this.attributes[\"CapHeight\"] || 0);\n        this.lineGap = this.bbox[3] - this.bbox[1] - (this.ascender - this.descender);\n    }\n    _createClass(AFMFont, [\n        {\n            key: \"parse\",\n            value: function parse() {\n                var section = \"\";\n                var _iterator = _createForOfIteratorHelper(this.contents.split(\"\\n\")), _step;\n                try {\n                    for(_iterator.s(); !(_step = _iterator.n()).done;){\n                        var line = _step.value;\n                        var match;\n                        var a;\n                        if (match = line.match(/^Start(\\w+)/)) {\n                            section = match[1];\n                            continue;\n                        } else if (match = line.match(/^End(\\w+)/)) {\n                            section = \"\";\n                            continue;\n                        }\n                        switch(section){\n                            case \"FontMetrics\":\n                                match = line.match(/(^\\w+)\\s+(.*)/);\n                                var key = match[1];\n                                var value = match[2];\n                                if (a = this.attributes[key]) {\n                                    if (!Array.isArray(a)) {\n                                        a = this.attributes[key] = [\n                                            a\n                                        ];\n                                    }\n                                    a.push(value);\n                                } else {\n                                    this.attributes[key] = value;\n                                }\n                                break;\n                            case \"CharMetrics\":\n                                if (!/^CH?\\s/.test(line)) {\n                                    continue;\n                                }\n                                var name = line.match(/\\bN\\s+(\\.?\\w+)\\s*;/)[1];\n                                this.glyphWidths[name] = +line.match(/\\bWX\\s+(\\d+)\\s*;/)[1];\n                                break;\n                            case \"KernPairs\":\n                                match = line.match(/^KPX\\s+(\\.?\\w+)\\s+(\\.?\\w+)\\s+(-?\\d+)/);\n                                if (match) {\n                                    this.kernPairs[match[1] + \"\\x00\" + match[2]] = parseInt(match[3]);\n                                }\n                                break;\n                        }\n                    }\n                } catch (err) {\n                    _iterator.e(err);\n                } finally{\n                    _iterator.f();\n                }\n            }\n        },\n        {\n            key: \"encodeText\",\n            value: function encodeText(text) {\n                var res = [];\n                for(var i = 0, len = text.length; i < len; i++){\n                    var char = text.charCodeAt(i);\n                    char = WIN_ANSI_MAP[char] || char;\n                    res.push(char.toString(16));\n                }\n                return res;\n            }\n        },\n        {\n            key: \"glyphsForString\",\n            value: function glyphsForString(string) {\n                var glyphs = [];\n                for(var i = 0, len = string.length; i < len; i++){\n                    var charCode = string.charCodeAt(i);\n                    glyphs.push(this.characterToGlyph(charCode));\n                }\n                return glyphs;\n            }\n        },\n        {\n            key: \"characterToGlyph\",\n            value: function characterToGlyph(character) {\n                return characters[WIN_ANSI_MAP[character] || character] || \".notdef\";\n            }\n        },\n        {\n            key: \"widthOfGlyph\",\n            value: function widthOfGlyph(glyph) {\n                return this.glyphWidths[glyph] || 0;\n            }\n        },\n        {\n            key: \"getKernPair\",\n            value: function getKernPair(left, right) {\n                return this.kernPairs[left + \"\\x00\" + right] || 0;\n            }\n        },\n        {\n            key: \"advancesForGlyphs\",\n            value: function advancesForGlyphs(glyphs) {\n                var advances = [];\n                for(var index = 0; index < glyphs.length; index++){\n                    var left = glyphs[index];\n                    var right = glyphs[index + 1];\n                    advances.push(this.widthOfGlyph(left) + this.getKernPair(left, right));\n                }\n                return advances;\n            }\n        }\n    ], [\n        {\n            key: \"open\",\n            value: function open(filename) {\n                return new AFMFont(fs__WEBPACK_IMPORTED_MODULE_1___default().readFileSync(filename, \"utf8\"));\n            }\n        }\n    ]);\n    return AFMFont;\n}();\nvar PDFFont = /*#__PURE__*/ function() {\n    function PDFFont() {\n        _classCallCheck(this, PDFFont);\n    }\n    _createClass(PDFFont, [\n        {\n            key: \"encode\",\n            value: function encode() {\n                throw new Error(\"Must be implemented by subclasses\");\n            }\n        },\n        {\n            key: \"widthOfString\",\n            value: function widthOfString() {\n                throw new Error(\"Must be implemented by subclasses\");\n            }\n        },\n        {\n            key: \"ref\",\n            value: function ref() {\n                return this.dictionary != null ? this.dictionary : this.dictionary = this.document.ref();\n            }\n        },\n        {\n            key: \"finalize\",\n            value: function finalize() {\n                if (this.embedded || this.dictionary == null) {\n                    return;\n                }\n                this.embed();\n                return this.embedded = true;\n            }\n        },\n        {\n            key: \"embed\",\n            value: function embed() {\n                throw new Error(\"Must be implemented by subclasses\");\n            }\n        },\n        {\n            key: \"lineHeight\",\n            value: function lineHeight(size, includeGap) {\n                if (includeGap == null) {\n                    includeGap = false;\n                }\n                var gap = includeGap ? this.lineGap : 0;\n                return (this.ascender + gap - this.descender) / 1000 * size;\n            }\n        }\n    ]);\n    return PDFFont;\n}();\nvar STANDARD_FONTS = {\n    Courier: function Courier() {\n        return fs__WEBPACK_IMPORTED_MODULE_1___default().readFileSync(__dirname + \"/data/Courier.afm\", \"utf8\");\n    },\n    \"Courier-Bold\": function CourierBold() {\n        return fs__WEBPACK_IMPORTED_MODULE_1___default().readFileSync(__dirname + \"/data/Courier-Bold.afm\", \"utf8\");\n    },\n    \"Courier-Oblique\": function CourierOblique() {\n        return fs__WEBPACK_IMPORTED_MODULE_1___default().readFileSync(__dirname + \"/data/Courier-Oblique.afm\", \"utf8\");\n    },\n    \"Courier-BoldOblique\": function CourierBoldOblique() {\n        return fs__WEBPACK_IMPORTED_MODULE_1___default().readFileSync(__dirname + \"/data/Courier-BoldOblique.afm\", \"utf8\");\n    },\n    Helvetica: function Helvetica() {\n        return fs__WEBPACK_IMPORTED_MODULE_1___default().readFileSync(__dirname + \"/data/Helvetica.afm\", \"utf8\");\n    },\n    \"Helvetica-Bold\": function HelveticaBold() {\n        return fs__WEBPACK_IMPORTED_MODULE_1___default().readFileSync(__dirname + \"/data/Helvetica-Bold.afm\", \"utf8\");\n    },\n    \"Helvetica-Oblique\": function HelveticaOblique() {\n        return fs__WEBPACK_IMPORTED_MODULE_1___default().readFileSync(__dirname + \"/data/Helvetica-Oblique.afm\", \"utf8\");\n    },\n    \"Helvetica-BoldOblique\": function HelveticaBoldOblique() {\n        return fs__WEBPACK_IMPORTED_MODULE_1___default().readFileSync(__dirname + \"/data/Helvetica-BoldOblique.afm\", \"utf8\");\n    },\n    \"Times-Roman\": function TimesRoman() {\n        return fs__WEBPACK_IMPORTED_MODULE_1___default().readFileSync(__dirname + \"/data/Times-Roman.afm\", \"utf8\");\n    },\n    \"Times-Bold\": function TimesBold() {\n        return fs__WEBPACK_IMPORTED_MODULE_1___default().readFileSync(__dirname + \"/data/Times-Bold.afm\", \"utf8\");\n    },\n    \"Times-Italic\": function TimesItalic() {\n        return fs__WEBPACK_IMPORTED_MODULE_1___default().readFileSync(__dirname + \"/data/Times-Italic.afm\", \"utf8\");\n    },\n    \"Times-BoldItalic\": function TimesBoldItalic() {\n        return fs__WEBPACK_IMPORTED_MODULE_1___default().readFileSync(__dirname + \"/data/Times-BoldItalic.afm\", \"utf8\");\n    },\n    Symbol: function Symbol1() {\n        return fs__WEBPACK_IMPORTED_MODULE_1___default().readFileSync(__dirname + \"/data/Symbol.afm\", \"utf8\");\n    },\n    ZapfDingbats: function ZapfDingbats() {\n        return fs__WEBPACK_IMPORTED_MODULE_1___default().readFileSync(__dirname + \"/data/ZapfDingbats.afm\", \"utf8\");\n    }\n};\nvar StandardFont = /*#__PURE__*/ function(_PDFFont) {\n    _inherits(StandardFont, _PDFFont);\n    var _super = _createSuper(StandardFont);\n    function StandardFont(document, name, id) {\n        var _this;\n        _classCallCheck(this, StandardFont);\n        _this = _super.call(this);\n        _this.document = document;\n        _this.name = name;\n        _this.id = id;\n        _this.font = new AFMFont(STANDARD_FONTS[_this.name]());\n        var _this$font = _this.font;\n        _this.ascender = _this$font.ascender;\n        _this.descender = _this$font.descender;\n        _this.bbox = _this$font.bbox;\n        _this.lineGap = _this$font.lineGap;\n        _this.xHeight = _this$font.xHeight;\n        _this.capHeight = _this$font.capHeight;\n        return _this;\n    }\n    _createClass(StandardFont, [\n        {\n            key: \"embed\",\n            value: function embed() {\n                this.dictionary.data = {\n                    Type: \"Font\",\n                    BaseFont: this.name,\n                    Subtype: \"Type1\",\n                    Encoding: \"WinAnsiEncoding\"\n                };\n                return this.dictionary.end();\n            }\n        },\n        {\n            key: \"encode\",\n            value: function encode(text) {\n                var encoded = this.font.encodeText(text);\n                var glyphs = this.font.glyphsForString(\"\".concat(text));\n                var advances = this.font.advancesForGlyphs(glyphs);\n                var positions = [];\n                for(var i = 0; i < glyphs.length; i++){\n                    var glyph = glyphs[i];\n                    positions.push({\n                        xAdvance: advances[i],\n                        yAdvance: 0,\n                        xOffset: 0,\n                        yOffset: 0,\n                        advanceWidth: this.font.widthOfGlyph(glyph)\n                    });\n                }\n                return [\n                    encoded,\n                    positions\n                ];\n            }\n        },\n        {\n            key: \"widthOfString\",\n            value: function widthOfString(string, size) {\n                var glyphs = this.font.glyphsForString(\"\".concat(string));\n                var advances = this.font.advancesForGlyphs(glyphs);\n                var width = 0;\n                var _iterator = _createForOfIteratorHelper(advances), _step;\n                try {\n                    for(_iterator.s(); !(_step = _iterator.n()).done;){\n                        var advance = _step.value;\n                        width += advance;\n                    }\n                } catch (err) {\n                    _iterator.e(err);\n                } finally{\n                    _iterator.f();\n                }\n                var scale = size / 1000;\n                return width * scale;\n            }\n        }\n    ], [\n        {\n            key: \"isStandardFont\",\n            value: function isStandardFont(name) {\n                return name in STANDARD_FONTS;\n            }\n        }\n    ]);\n    return StandardFont;\n}(PDFFont);\nvar toHex = function toHex(num) {\n    return \"0000\".concat(num.toString(16)).slice(-4);\n};\nvar EmbeddedFont = /*#__PURE__*/ function(_PDFFont) {\n    _inherits(EmbeddedFont, _PDFFont);\n    var _super = _createSuper(EmbeddedFont);\n    function EmbeddedFont(document, font, id) {\n        var _this;\n        _classCallCheck(this, EmbeddedFont);\n        _this = _super.call(this);\n        _this.document = document;\n        _this.font = font;\n        _this.id = id;\n        _this.subset = _this.font.createSubset();\n        _this.unicode = [\n            [\n                0\n            ]\n        ];\n        _this.widths = [\n            _this.font.getGlyph(0).advanceWidth\n        ];\n        _this.name = _this.font.postscriptName;\n        _this.scale = 1000 / _this.font.unitsPerEm;\n        _this.ascender = _this.font.ascent * _this.scale;\n        _this.descender = _this.font.descent * _this.scale;\n        _this.xHeight = _this.font.xHeight * _this.scale;\n        _this.capHeight = _this.font.capHeight * _this.scale;\n        _this.lineGap = _this.font.lineGap * _this.scale;\n        _this.bbox = _this.font.bbox;\n        if (document.options.fontLayoutCache !== false) {\n            _this.layoutCache = Object.create(null);\n        }\n        return _this;\n    }\n    _createClass(EmbeddedFont, [\n        {\n            key: \"layoutRun\",\n            value: function layoutRun(text, features) {\n                var run = this.font.layout(text, features); // Normalize position values\n                for(var i = 0; i < run.positions.length; i++){\n                    var position = run.positions[i];\n                    for(var key in position){\n                        position[key] *= this.scale;\n                    }\n                    position.advanceWidth = run.glyphs[i].advanceWidth * this.scale;\n                }\n                return run;\n            }\n        },\n        {\n            key: \"layoutCached\",\n            value: function layoutCached(text) {\n                if (!this.layoutCache) {\n                    return this.layoutRun(text);\n                }\n                var cached;\n                if (cached = this.layoutCache[text]) {\n                    return cached;\n                }\n                var run = this.layoutRun(text);\n                this.layoutCache[text] = run;\n                return run;\n            }\n        },\n        {\n            key: \"layout\",\n            value: function layout(text, features, onlyWidth) {\n                // Skip the cache if any user defined features are applied\n                if (features) {\n                    return this.layoutRun(text, features);\n                }\n                var glyphs = onlyWidth ? null : [];\n                var positions = onlyWidth ? null : [];\n                var advanceWidth = 0; // Split the string by words to increase cache efficiency.\n                // For this purpose, spaces and tabs are a good enough delimeter.\n                var last = 0;\n                var index = 0;\n                while(index <= text.length){\n                    var needle;\n                    if (index === text.length && last < index || (needle = text.charAt(index), [\n                        \" \",\n                        \"\t\"\n                    ].includes(needle))) {\n                        var run = this.layoutCached(text.slice(last, ++index));\n                        if (!onlyWidth) {\n                            glyphs = glyphs.concat(run.glyphs);\n                            positions = positions.concat(run.positions);\n                        }\n                        advanceWidth += run.advanceWidth;\n                        last = index;\n                    } else {\n                        index++;\n                    }\n                }\n                return {\n                    glyphs: glyphs,\n                    positions: positions,\n                    advanceWidth: advanceWidth\n                };\n            }\n        },\n        {\n            key: \"encode\",\n            value: function encode(text, features) {\n                var _this$layout = this.layout(text, features), glyphs = _this$layout.glyphs, positions = _this$layout.positions;\n                var res = [];\n                for(var i = 0; i < glyphs.length; i++){\n                    var glyph = glyphs[i];\n                    var gid = this.subset.includeGlyph(glyph.id);\n                    res.push(\"0000\".concat(gid.toString(16)).slice(-4));\n                    if (this.widths[gid] == null) {\n                        this.widths[gid] = glyph.advanceWidth * this.scale;\n                    }\n                    if (this.unicode[gid] == null) {\n                        this.unicode[gid] = glyph.codePoints;\n                    }\n                }\n                return [\n                    res,\n                    positions\n                ];\n            }\n        },\n        {\n            key: \"widthOfString\",\n            value: function widthOfString(string, size, features) {\n                var width = this.layout(string, features, true).advanceWidth;\n                var scale = size / 1000;\n                return width * scale;\n            }\n        },\n        {\n            key: \"embed\",\n            value: function embed() {\n                var _this2 = this;\n                var isCFF = this.subset.cff != null;\n                var fontFile = this.document.ref();\n                if (isCFF) {\n                    fontFile.data.Subtype = \"CIDFontType0C\";\n                }\n                this.subset.encodeStream().on(\"data\", function(data) {\n                    return fontFile.write(data);\n                }).on(\"end\", function() {\n                    return fontFile.end();\n                });\n                var familyClass = ((this.font[\"OS/2\"] != null ? this.font[\"OS/2\"].sFamilyClass : undefined) || 0) >> 8;\n                var flags = 0;\n                if (this.font.post.isFixedPitch) {\n                    flags |= 1 << 0;\n                }\n                if (1 <= familyClass && familyClass <= 7) {\n                    flags |= 1 << 1;\n                }\n                flags |= 1 << 2; // assume the font uses non-latin characters\n                if (familyClass === 10) {\n                    flags |= 1 << 3;\n                }\n                if (this.font.head.macStyle.italic) {\n                    flags |= 1 << 6;\n                } // generate a tag (6 uppercase letters. 17 is the char code offset from '0' to 'A'. 73 will map to 'Z')\n                var tag = [\n                    1,\n                    2,\n                    3,\n                    4,\n                    5,\n                    6\n                ].map(function(i) {\n                    return String.fromCharCode((_this2.id.charCodeAt(i) || 73) + 17);\n                }).join(\"\");\n                var name = tag + \"+\" + this.font.postscriptName;\n                var bbox = this.font.bbox;\n                var descriptor = this.document.ref({\n                    Type: \"FontDescriptor\",\n                    FontName: name,\n                    Flags: flags,\n                    FontBBox: [\n                        bbox.minX * this.scale,\n                        bbox.minY * this.scale,\n                        bbox.maxX * this.scale,\n                        bbox.maxY * this.scale\n                    ],\n                    ItalicAngle: this.font.italicAngle,\n                    Ascent: this.ascender,\n                    Descent: this.descender,\n                    CapHeight: (this.font.capHeight || this.font.ascent) * this.scale,\n                    XHeight: (this.font.xHeight || 0) * this.scale,\n                    StemV: 0\n                }); // not sure how to calculate this\n                if (isCFF) {\n                    descriptor.data.FontFile3 = fontFile;\n                } else {\n                    descriptor.data.FontFile2 = fontFile;\n                }\n                descriptor.end();\n                var descendantFontData = {\n                    Type: \"Font\",\n                    Subtype: \"CIDFontType0\",\n                    BaseFont: name,\n                    CIDSystemInfo: {\n                        Registry: new String(\"Adobe\"),\n                        Ordering: new String(\"Identity\"),\n                        Supplement: 0\n                    },\n                    FontDescriptor: descriptor,\n                    W: [\n                        0,\n                        this.widths\n                    ]\n                };\n                if (!isCFF) {\n                    descendantFontData.Subtype = \"CIDFontType2\";\n                    descendantFontData.CIDToGIDMap = \"Identity\";\n                }\n                var descendantFont = this.document.ref(descendantFontData);\n                descendantFont.end();\n                this.dictionary.data = {\n                    Type: \"Font\",\n                    Subtype: \"Type0\",\n                    BaseFont: name,\n                    Encoding: \"Identity-H\",\n                    DescendantFonts: [\n                        descendantFont\n                    ],\n                    ToUnicode: this.toUnicodeCmap()\n                };\n                return this.dictionary.end();\n            } // Maps the glyph ids encoded in the PDF back to unicode strings\n        },\n        {\n            key: \"toUnicodeCmap\",\n            value: function toUnicodeCmap() {\n                var cmap = this.document.ref();\n                var entries = [];\n                var _iterator = _createForOfIteratorHelper(this.unicode), _step;\n                try {\n                    for(_iterator.s(); !(_step = _iterator.n()).done;){\n                        var codePoints = _step.value;\n                        var encoded = []; // encode codePoints to utf16\n                        var _iterator2 = _createForOfIteratorHelper(codePoints), _step2;\n                        try {\n                            for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){\n                                var value = _step2.value;\n                                if (value > 0xffff) {\n                                    value -= 0x10000;\n                                    encoded.push(toHex(value >>> 10 & 0x3ff | 0xd800));\n                                    value = 0xdc00 | value & 0x3ff;\n                                }\n                                encoded.push(toHex(value));\n                            }\n                        } catch (err) {\n                            _iterator2.e(err);\n                        } finally{\n                            _iterator2.f();\n                        }\n                        entries.push(\"<\".concat(encoded.join(\" \"), \">\"));\n                    }\n                } catch (err) {\n                    _iterator.e(err);\n                } finally{\n                    _iterator.f();\n                }\n                cmap.end(\"/CIDInit /ProcSet findresource begin\\n12 dict begin\\nbegincmap\\n/CIDSystemInfo <<\\n  /Registry (Adobe)\\n  /Ordering (UCS)\\n  /Supplement 0\\n>> def\\n/CMapName /Adobe-Identity-UCS def\\n/CMapType 2 def\\n1 begincodespacerange\\n<0000><ffff>\\nendcodespacerange\\n1 beginbfrange\\n<0000> <\".concat(toHex(entries.length - 1), \"> [\").concat(entries.join(\" \"), \"]\\nendbfrange\\nendcmap\\nCMapName currentdict /CMap defineresource pop\\nend\\nend\"));\n                return cmap;\n            }\n        }\n    ]);\n    return EmbeddedFont;\n}(PDFFont);\nvar PDFFontFactory = /*#__PURE__*/ function() {\n    function PDFFontFactory() {\n        _classCallCheck(this, PDFFontFactory);\n    }\n    _createClass(PDFFontFactory, null, [\n        {\n            key: \"open\",\n            value: function open(document, src, family, id) {\n                var font;\n                if (typeof src === \"string\") {\n                    if (StandardFont.isStandardFont(src)) {\n                        return new StandardFont(document, src, id);\n                    }\n                    src = fs__WEBPACK_IMPORTED_MODULE_1___default().readFileSync(src);\n                }\n                if (Buffer.isBuffer(src)) {\n                    font = fontkit__WEBPACK_IMPORTED_MODULE_4__[\"default\"].create(src, family);\n                } else if (src instanceof Uint8Array) {\n                    font = fontkit__WEBPACK_IMPORTED_MODULE_4__[\"default\"].create(Buffer.from(src), family);\n                } else if (src instanceof ArrayBuffer) {\n                    font = fontkit__WEBPACK_IMPORTED_MODULE_4__[\"default\"].create(Buffer.from(new Uint8Array(src)), family);\n                }\n                if (font == null) {\n                    throw new Error(\"Not a supported font format or standard PDF font.\");\n                }\n                return new EmbeddedFont(document, font, id);\n            }\n        }\n    ]);\n    return PDFFontFactory;\n}();\nvar FontsMixin = {\n    initFonts: function initFonts() {\n        var defaultFont = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"Helvetica\";\n        // Lookup table for embedded fonts\n        this._fontFamilies = {};\n        this._fontCount = 0; // Font state\n        this._fontSize = 12;\n        this._font = null;\n        this._registeredFonts = {}; // Set the default font\n        if (defaultFont) {\n            this.font(defaultFont);\n        }\n    },\n    font: function font(src, family, size) {\n        var cacheKey, font;\n        if (typeof family === \"number\") {\n            size = family;\n            family = null;\n        } // check registered fonts if src is a string\n        if (typeof src === \"string\" && this._registeredFonts[src]) {\n            cacheKey = src;\n            var _this$_registeredFont = this._registeredFonts[src];\n            src = _this$_registeredFont.src;\n            family = _this$_registeredFont.family;\n        } else {\n            cacheKey = family || src;\n            if (typeof cacheKey !== \"string\") {\n                cacheKey = null;\n            }\n        }\n        if (size != null) {\n            this.fontSize(size);\n        } // fast path: check if the font is already in the PDF\n        if (font = this._fontFamilies[cacheKey]) {\n            this._font = font;\n            return this;\n        } // load the font\n        var id = \"F\".concat(++this._fontCount);\n        this._font = PDFFontFactory.open(this, src, family, id); // check for existing font familes with the same name already in the PDF\n        // useful if the font was passed as a buffer\n        if (font = this._fontFamilies[this._font.name]) {\n            this._font = font;\n            return this;\n        } // save the font for reuse later\n        if (cacheKey) {\n            this._fontFamilies[cacheKey] = this._font;\n        }\n        if (this._font.name) {\n            this._fontFamilies[this._font.name] = this._font;\n        }\n        return this;\n    },\n    fontSize: function fontSize(_fontSize) {\n        this._fontSize = _fontSize;\n        return this;\n    },\n    currentLineHeight: function currentLineHeight(includeGap) {\n        if (includeGap == null) {\n            includeGap = false;\n        }\n        return this._font.lineHeight(this._fontSize, includeGap);\n    },\n    registerFont: function registerFont(name, src, family) {\n        this._registeredFonts[name] = {\n            src: src,\n            family: family\n        };\n        return this;\n    }\n};\nvar LineWrapper = /*#__PURE__*/ function(_EventEmitter) {\n    _inherits(LineWrapper, _EventEmitter);\n    var _super = _createSuper(LineWrapper);\n    function LineWrapper(document, options) {\n        var _this;\n        _classCallCheck(this, LineWrapper);\n        _this = _super.call(this);\n        _this.document = document;\n        _this.indent = options.indent || 0;\n        _this.characterSpacing = options.characterSpacing || 0;\n        _this.wordSpacing = options.wordSpacing === 0;\n        _this.columns = options.columns || 1;\n        _this.columnGap = options.columnGap != null ? options.columnGap : 18; // 1/4 inch\n        _this.lineWidth = (options.width - _this.columnGap * (_this.columns - 1)) / _this.columns;\n        _this.spaceLeft = _this.lineWidth;\n        _this.startX = _this.document.x;\n        _this.startY = _this.document.y;\n        _this.column = 1;\n        _this.ellipsis = options.ellipsis;\n        _this.continuedX = 0;\n        _this.features = options.features; // calculate the maximum Y position the text can appear at\n        if (options.height != null) {\n            _this.height = options.height;\n            _this.maxY = _this.startY + options.height;\n        } else {\n            _this.maxY = _this.document.page.maxY();\n        } // handle paragraph indents\n        _this.on(\"firstLine\", function(options) {\n            // if this is the first line of the text segment, and\n            // we're continuing where we left off, indent that much\n            // otherwise use the user specified indent option\n            var indent = _this.continuedX || _this.indent;\n            _this.document.x += indent;\n            _this.lineWidth -= indent;\n            return _this.once(\"line\", function() {\n                _this.document.x -= indent;\n                _this.lineWidth += indent;\n                if (options.continued && !_this.continuedX) {\n                    _this.continuedX = _this.indent;\n                }\n                if (!options.continued) {\n                    return _this.continuedX = 0;\n                }\n            });\n        }); // handle left aligning last lines of paragraphs\n        _this.on(\"lastLine\", function(options) {\n            var align = options.align;\n            if (align === \"justify\") {\n                options.align = \"left\";\n            }\n            _this.lastLine = true;\n            return _this.once(\"line\", function() {\n                _this.document.y += options.paragraphGap || 0;\n                options.align = align;\n                return _this.lastLine = false;\n            });\n        });\n        return _this;\n    }\n    _createClass(LineWrapper, [\n        {\n            key: \"wordWidth\",\n            value: function wordWidth(word) {\n                return this.document.widthOfString(word, this) + this.characterSpacing + this.wordSpacing;\n            }\n        },\n        {\n            key: \"eachWord\",\n            value: function eachWord(text, fn) {\n                // setup a unicode line breaker\n                var bk;\n                var breaker = new linebreak__WEBPACK_IMPORTED_MODULE_6__[\"default\"](text);\n                var last = null;\n                var wordWidths = Object.create(null);\n                while(bk = breaker.nextBreak()){\n                    var shouldContinue;\n                    var word = text.slice((last != null ? last.position : undefined) || 0, bk.position);\n                    var w = wordWidths[word] != null ? wordWidths[word] : wordWidths[word] = this.wordWidth(word); // if the word is longer than the whole line, chop it up\n                    // TODO: break by grapheme clusters, not JS string characters\n                    if (w > this.lineWidth + this.continuedX) {\n                        // make some fake break objects\n                        var lbk = last;\n                        var fbk = {};\n                        while(word.length){\n                            // fit as much of the word as possible into the space we have\n                            var l, mightGrow;\n                            if (w > this.spaceLeft) {\n                                // start our check at the end of our available space - this method is faster than a loop of each character and it resolves\n                                // an issue with long loops when processing massive words, such as a huge number of spaces\n                                l = Math.ceil(this.spaceLeft / (w / word.length));\n                                w = this.wordWidth(word.slice(0, l));\n                                mightGrow = w <= this.spaceLeft && l < word.length;\n                            } else {\n                                l = word.length;\n                            }\n                            var mustShrink = w > this.spaceLeft && l > 0; // shrink or grow word as necessary after our near-guess above\n                            while(mustShrink || mightGrow){\n                                if (mustShrink) {\n                                    w = this.wordWidth(word.slice(0, --l));\n                                    mustShrink = w > this.spaceLeft && l > 0;\n                                } else {\n                                    w = this.wordWidth(word.slice(0, ++l));\n                                    mustShrink = w > this.spaceLeft && l > 0;\n                                    mightGrow = w <= this.spaceLeft && l < word.length;\n                                }\n                            } // check for the edge case where a single character cannot fit into a line.\n                            if (l === 0 && this.spaceLeft === this.lineWidth) {\n                                l = 1;\n                            } // send a required break unless this is the last piece and a linebreak is not specified\n                            fbk.required = bk.required || l < word.length;\n                            shouldContinue = fn(word.slice(0, l), w, fbk, lbk);\n                            lbk = {\n                                required: false\n                            }; // get the remaining piece of the word\n                            word = word.slice(l);\n                            w = this.wordWidth(word);\n                            if (shouldContinue === false) {\n                                break;\n                            }\n                        }\n                    } else {\n                        // otherwise just emit the break as it was given to us\n                        shouldContinue = fn(word, w, bk, last);\n                    }\n                    if (shouldContinue === false) {\n                        break;\n                    }\n                    last = bk;\n                }\n            }\n        },\n        {\n            key: \"wrap\",\n            value: function wrap(text, options) {\n                var _this2 = this;\n                // override options from previous continued fragments\n                if (options.indent != null) {\n                    this.indent = options.indent;\n                }\n                if (options.characterSpacing != null) {\n                    this.characterSpacing = options.characterSpacing;\n                }\n                if (options.wordSpacing != null) {\n                    this.wordSpacing = options.wordSpacing;\n                }\n                if (options.ellipsis != null) {\n                    this.ellipsis = options.ellipsis;\n                } // make sure we're actually on the page\n                // and that the first line of is never by\n                // itself at the bottom of a page (orphans)\n                var nextY = this.document.y + this.document.currentLineHeight(true);\n                if (this.document.y > this.maxY || nextY > this.maxY) {\n                    this.nextSection();\n                }\n                var buffer = \"\";\n                var textWidth = 0;\n                var wc = 0;\n                var lc = 0;\n                var y = this.document.y; // used to reset Y pos if options.continued (below)\n                var emitLine = function emitLine() {\n                    options.textWidth = textWidth + _this2.wordSpacing * (wc - 1);\n                    options.wordCount = wc;\n                    options.lineWidth = _this2.lineWidth;\n                    y = _this2.document.y;\n                    _this2.emit(\"line\", buffer, options, _this2);\n                    return lc++;\n                };\n                this.emit(\"sectionStart\", options, this);\n                this.eachWord(text, function(word, w, bk, last) {\n                    if (last == null || last.required) {\n                        _this2.emit(\"firstLine\", options, _this2);\n                        _this2.spaceLeft = _this2.lineWidth;\n                    }\n                    if (w <= _this2.spaceLeft) {\n                        buffer += word;\n                        textWidth += w;\n                        wc++;\n                    }\n                    if (bk.required || w > _this2.spaceLeft) {\n                        // if the user specified a max height and an ellipsis, and is about to pass the\n                        // max height and max columns after the next line, append the ellipsis\n                        var lh = _this2.document.currentLineHeight(true);\n                        if (_this2.height != null && _this2.ellipsis && _this2.document.y + lh * 2 > _this2.maxY && _this2.column >= _this2.columns) {\n                            if (_this2.ellipsis === true) {\n                                _this2.ellipsis = \"…\";\n                            } // map default ellipsis character\n                            buffer = buffer.replace(/\\s+$/, \"\");\n                            textWidth = _this2.wordWidth(buffer + _this2.ellipsis); // remove characters from the buffer until the ellipsis fits\n                            // to avoid infinite loop need to stop while-loop if buffer is empty string\n                            while(buffer && textWidth > _this2.lineWidth){\n                                buffer = buffer.slice(0, -1).replace(/\\s+$/, \"\");\n                                textWidth = _this2.wordWidth(buffer + _this2.ellipsis);\n                            } // need to add ellipsis only if there is enough space for it\n                            if (textWidth <= _this2.lineWidth) {\n                                buffer = buffer + _this2.ellipsis;\n                            }\n                            textWidth = _this2.wordWidth(buffer);\n                        }\n                        if (bk.required) {\n                            if (w > _this2.spaceLeft) {\n                                emitLine();\n                                buffer = word;\n                                textWidth = w;\n                                wc = 1;\n                            }\n                            _this2.emit(\"lastLine\", options, _this2);\n                        }\n                        emitLine(); // if we've reached the edge of the page,\n                        // continue on a new page or column\n                        if (_this2.document.y + lh > _this2.maxY) {\n                            var shouldContinue = _this2.nextSection(); // stop if we reached the maximum height\n                            if (!shouldContinue) {\n                                wc = 0;\n                                buffer = \"\";\n                                return false;\n                            }\n                        } // reset the space left and buffer\n                        if (bk.required) {\n                            _this2.spaceLeft = _this2.lineWidth;\n                            buffer = \"\";\n                            textWidth = 0;\n                            return wc = 0;\n                        } else {\n                            // reset the space left and buffer\n                            _this2.spaceLeft = _this2.lineWidth - w;\n                            buffer = word;\n                            textWidth = w;\n                            return wc = 1;\n                        }\n                    } else {\n                        return _this2.spaceLeft -= w;\n                    }\n                });\n                if (wc > 0) {\n                    this.emit(\"lastLine\", options, this);\n                    emitLine();\n                }\n                this.emit(\"sectionEnd\", options, this); // if the wrap is set to be continued, save the X position\n                // to start the first line of the next segment at, and reset\n                // the y position\n                if (options.continued === true) {\n                    if (lc > 1) {\n                        this.continuedX = 0;\n                    }\n                    this.continuedX += options.textWidth || 0;\n                    return this.document.y = y;\n                } else {\n                    return this.document.x = this.startX;\n                }\n            }\n        },\n        {\n            key: \"nextSection\",\n            value: function nextSection(options) {\n                this.emit(\"sectionEnd\", options, this);\n                if (++this.column > this.columns) {\n                    // if a max height was specified by the user, we're done.\n                    // otherwise, the default is to make a new page at the bottom.\n                    if (this.height != null) {\n                        return false;\n                    }\n                    this.document.continueOnNewPage();\n                    this.column = 1;\n                    this.startY = this.document.page.margins.top;\n                    this.maxY = this.document.page.maxY();\n                    this.document.x = this.startX;\n                    if (this.document._fillColor) {\n                        var _this$document;\n                        (_this$document = this.document).fillColor.apply(_this$document, _toConsumableArray(this.document._fillColor));\n                    }\n                    this.emit(\"pageBreak\", options, this);\n                } else {\n                    this.document.x += this.lineWidth + this.columnGap;\n                    this.document.y = this.startY;\n                    this.emit(\"columnBreak\", options, this);\n                }\n                this.emit(\"sectionStart\", options, this);\n                return true;\n            }\n        }\n    ]);\n    return LineWrapper;\n}(events__WEBPACK_IMPORTED_MODULE_5__.EventEmitter);\nvar number$2 = PDFObject.number;\nvar TextMixin = {\n    initText: function initText() {\n        this._line = this._line.bind(this); // Current coordinates\n        this.x = 0;\n        this.y = 0;\n        return this._lineGap = 0;\n    },\n    lineGap: function lineGap(_lineGap) {\n        this._lineGap = _lineGap;\n        return this;\n    },\n    moveDown: function moveDown(lines) {\n        if (lines == null) {\n            lines = 1;\n        }\n        this.y += this.currentLineHeight(true) * lines + this._lineGap;\n        return this;\n    },\n    moveUp: function moveUp(lines) {\n        if (lines == null) {\n            lines = 1;\n        }\n        this.y -= this.currentLineHeight(true) * lines + this._lineGap;\n        return this;\n    },\n    _text: function _text(text, x, y, options, lineCallback) {\n        var _this = this;\n        options = this._initOptions(x, y, options); // Convert text to a string\n        text = text == null ? \"\" : \"\".concat(text); // if the wordSpacing option is specified, remove multiple consecutive spaces\n        if (options.wordSpacing) {\n            text = text.replace(/\\s{2,}/g, \" \");\n        }\n        var addStructure = function addStructure() {\n            if (options.structParent) {\n                options.structParent.add(_this.struct(options.structType || \"P\", [\n                    _this.markStructureContent(options.structType || \"P\")\n                ]));\n            }\n        }; // word wrapping\n        if (options.width) {\n            var wrapper = this._wrapper;\n            if (!wrapper) {\n                wrapper = new LineWrapper(this, options);\n                wrapper.on(\"line\", lineCallback);\n                wrapper.on(\"firstLine\", addStructure);\n            }\n            this._wrapper = options.continued ? wrapper : null;\n            this._textOptions = options.continued ? options : null;\n            wrapper.wrap(text, options); // render paragraphs as single lines\n        } else {\n            var _iterator = _createForOfIteratorHelper(text.split(\"\\n\")), _step;\n            try {\n                for(_iterator.s(); !(_step = _iterator.n()).done;){\n                    var line = _step.value;\n                    addStructure();\n                    lineCallback(line, options);\n                }\n            } catch (err) {\n                _iterator.e(err);\n            } finally{\n                _iterator.f();\n            }\n        }\n        return this;\n    },\n    text: function text(_text2, x, y, options) {\n        return this._text(_text2, x, y, options, this._line);\n    },\n    widthOfString: function widthOfString(string) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return this._font.widthOfString(string, this._fontSize, options.features) + (options.characterSpacing || 0) * (string.length - 1);\n    },\n    heightOfString: function heightOfString(text, options) {\n        var _this2 = this;\n        var x = this.x, y = this.y;\n        options = this._initOptions(options);\n        options.height = Infinity; // don't break pages\n        var lineGap = options.lineGap || this._lineGap || 0;\n        this._text(text, this.x, this.y, options, function() {\n            return _this2.y += _this2.currentLineHeight(true) + lineGap;\n        });\n        var height = this.y - y;\n        this.x = x;\n        this.y = y;\n        return height;\n    },\n    list: function list(_list, x, y, options, wrapper) {\n        var _this3 = this;\n        options = this._initOptions(x, y, options);\n        var listType = options.listType || \"bullet\";\n        var unit = Math.round(this._font.ascender / 1000 * this._fontSize);\n        var midLine = unit / 2;\n        var r = options.bulletRadius || unit / 3;\n        var indent = options.textIndent || (listType === \"bullet\" ? r * 5 : unit * 2);\n        var itemIndent = options.bulletIndent || (listType === \"bullet\" ? r * 8 : unit * 2);\n        var level = 1;\n        var items = [];\n        var levels = [];\n        var numbers = [];\n        var flatten = function flatten(list) {\n            var n = 1;\n            for(var _i = 0; _i < list.length; _i++){\n                var item = list[_i];\n                if (Array.isArray(item)) {\n                    level++;\n                    flatten(item);\n                    level--;\n                } else {\n                    items.push(item);\n                    levels.push(level);\n                    if (listType !== \"bullet\") {\n                        numbers.push(n++);\n                    }\n                }\n            }\n        };\n        flatten(_list);\n        var label = function label(n) {\n            switch(listType){\n                case \"numbered\":\n                    return \"\".concat(n, \".\");\n                case \"lettered\":\n                    var letter = String.fromCharCode((n - 1) % 26 + 65);\n                    var times = Math.floor((n - 1) / 26 + 1);\n                    var text = Array(times + 1).join(letter);\n                    return \"\".concat(text, \".\");\n            }\n        };\n        wrapper = new LineWrapper(this, options);\n        wrapper.on(\"line\", this._line);\n        level = 1;\n        var i = 0;\n        wrapper.on(\"firstLine\", function() {\n            var item, itemType, labelType, bodyType;\n            if (options.structParent) {\n                if (options.structTypes) {\n                    var _options$structTypes = _slicedToArray(options.structTypes, 3);\n                    itemType = _options$structTypes[0];\n                    labelType = _options$structTypes[1];\n                    bodyType = _options$structTypes[2];\n                } else {\n                    itemType = \"LI\";\n                    labelType = \"Lbl\";\n                    bodyType = \"LBody\";\n                }\n            }\n            if (itemType) {\n                item = _this3.struct(itemType);\n                options.structParent.add(item);\n            } else if (options.structParent) {\n                item = options.structParent;\n            }\n            var l;\n            if ((l = levels[i++]) !== level) {\n                var diff = itemIndent * (l - level);\n                _this3.x += diff;\n                wrapper.lineWidth -= diff;\n                level = l;\n            }\n            if (item && (labelType || bodyType)) {\n                item.add(_this3.struct(labelType || bodyType, [\n                    _this3.markStructureContent(labelType || bodyType)\n                ]));\n            }\n            switch(listType){\n                case \"bullet\":\n                    _this3.circle(_this3.x - indent + r, _this3.y + midLine, r);\n                    _this3.fill();\n                    break;\n                case \"numbered\":\n                case \"lettered\":\n                    var text = label(numbers[i - 1]);\n                    _this3._fragment(text, _this3.x - indent, _this3.y, options);\n                    break;\n            }\n            if (item && labelType && bodyType) {\n                item.add(_this3.struct(bodyType, [\n                    _this3.markStructureContent(bodyType)\n                ]));\n            }\n            if (item && item !== options.structParent) {\n                item.end();\n            }\n        });\n        wrapper.on(\"sectionStart\", function() {\n            var pos = indent + itemIndent * (level - 1);\n            _this3.x += pos;\n            return wrapper.lineWidth -= pos;\n        });\n        wrapper.on(\"sectionEnd\", function() {\n            var pos = indent + itemIndent * (level - 1);\n            _this3.x -= pos;\n            return wrapper.lineWidth += pos;\n        });\n        wrapper.wrap(items.join(\"\\n\"), options);\n        return this;\n    },\n    _initOptions: function _initOptions() {\n        var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var y = arguments.length > 1 ? arguments[1] : undefined;\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        if (typeof x === \"object\") {\n            options = x;\n            x = null;\n        } // clone options object\n        var result = Object.assign({}, options); // extend options with previous values for continued text\n        if (this._textOptions) {\n            for(var key in this._textOptions){\n                var val = this._textOptions[key];\n                if (key !== \"continued\") {\n                    if (result[key] === undefined) {\n                        result[key] = val;\n                    }\n                }\n            }\n        } // Update the current position\n        if (x != null) {\n            this.x = x;\n        }\n        if (y != null) {\n            this.y = y;\n        } // wrap to margins if no x or y position passed\n        if (result.lineBreak !== false) {\n            if (result.width == null) {\n                result.width = this.page.width - this.x - this.page.margins.right;\n            }\n            result.width = Math.max(result.width, 0);\n        }\n        if (!result.columns) {\n            result.columns = 0;\n        }\n        if (result.columnGap == null) {\n            result.columnGap = 18;\n        } // 1/4 inch\n        return result;\n    },\n    _line: function _line(text) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var wrapper = arguments.length > 2 ? arguments[2] : undefined;\n        this._fragment(text, this.x, this.y, options);\n        var lineGap = options.lineGap || this._lineGap || 0;\n        if (!wrapper) {\n            return this.x += this.widthOfString(text);\n        } else {\n            return this.y += this.currentLineHeight(true) + lineGap;\n        }\n    },\n    _fragment: function _fragment(text, x, y, options) {\n        var _this4 = this;\n        var dy, encoded, i, positions, textWidth, words;\n        text = \"\".concat(text).replace(/\\n/g, \"\");\n        if (text.length === 0) {\n            return;\n        } // handle options\n        var align = options.align || \"left\";\n        var wordSpacing = options.wordSpacing || 0;\n        var characterSpacing = options.characterSpacing || 0; // text alignments\n        if (options.width) {\n            switch(align){\n                case \"right\":\n                    textWidth = this.widthOfString(text.replace(/\\s+$/, \"\"), options);\n                    x += options.lineWidth - textWidth;\n                    break;\n                case \"center\":\n                    x += options.lineWidth / 2 - options.textWidth / 2;\n                    break;\n                case \"justify\":\n                    // calculate the word spacing value\n                    words = text.trim().split(/\\s+/);\n                    textWidth = this.widthOfString(text.replace(/\\s+/g, \"\"), options);\n                    var spaceWidth = this.widthOfString(\" \") + characterSpacing;\n                    wordSpacing = Math.max(0, (options.lineWidth - textWidth) / Math.max(1, words.length - 1) - spaceWidth);\n                    break;\n            }\n        } // text baseline alignments based on http://wiki.apache.org/xmlgraphics-fop/LineLayout/AlignmentHandling\n        if (typeof options.baseline === \"number\") {\n            dy = -options.baseline;\n        } else {\n            switch(options.baseline){\n                case \"svg-middle\":\n                    dy = 0.5 * this._font.xHeight;\n                    break;\n                case \"middle\":\n                case \"svg-central\":\n                    dy = 0.5 * (this._font.descender + this._font.ascender);\n                    break;\n                case \"bottom\":\n                case \"ideographic\":\n                    dy = this._font.descender;\n                    break;\n                case \"alphabetic\":\n                    dy = 0;\n                    break;\n                case \"mathematical\":\n                    dy = 0.5 * this._font.ascender;\n                    break;\n                case \"hanging\":\n                    dy = 0.8 * this._font.ascender;\n                    break;\n                case \"top\":\n                    dy = this._font.ascender;\n                    break;\n                default:\n                    dy = this._font.ascender;\n            }\n            dy = dy / 1000 * this._fontSize;\n        } // calculate the actual rendered width of the string after word and character spacing\n        var renderedWidth = options.textWidth + wordSpacing * (options.wordCount - 1) + characterSpacing * (text.length - 1); // create link annotations if the link option is given\n        if (options.link != null) {\n            this.link(x, y, renderedWidth, this.currentLineHeight(), options.link);\n        }\n        if (options.goTo != null) {\n            this.goTo(x, y, renderedWidth, this.currentLineHeight(), options.goTo);\n        }\n        if (options.destination != null) {\n            this.addNamedDestination(options.destination, \"XYZ\", x, y, null);\n        } // create underline\n        if (options.underline) {\n            this.save();\n            if (!options.stroke) {\n                this.strokeColor.apply(this, _toConsumableArray(this._fillColor || []));\n            }\n            var lineWidth = this._fontSize < 10 ? 0.5 : Math.floor(this._fontSize / 10);\n            this.lineWidth(lineWidth);\n            var lineY = y + this.currentLineHeight() - lineWidth;\n            this.moveTo(x, lineY);\n            this.lineTo(x + renderedWidth, lineY);\n            this.stroke();\n            this.restore();\n        } // create strikethrough line\n        if (options.strike) {\n            this.save();\n            if (!options.stroke) {\n                this.strokeColor.apply(this, _toConsumableArray(this._fillColor || []));\n            }\n            var _lineWidth = this._fontSize < 10 ? 0.5 : Math.floor(this._fontSize / 10);\n            this.lineWidth(_lineWidth);\n            var _lineY = y + this.currentLineHeight() / 2;\n            this.moveTo(x, _lineY);\n            this.lineTo(x + renderedWidth, _lineY);\n            this.stroke();\n            this.restore();\n        }\n        this.save(); // oblique (angle in degrees or boolean)\n        if (options.oblique) {\n            var skew;\n            if (typeof options.oblique === \"number\") {\n                skew = -Math.tan(options.oblique * Math.PI / 180);\n            } else {\n                skew = -0.25;\n            }\n            this.transform(1, 0, 0, 1, x, y);\n            this.transform(1, 0, skew, 1, -skew * dy, 0);\n            this.transform(1, 0, 0, 1, -x, -y);\n        } // flip coordinate system\n        this.transform(1, 0, 0, -1, 0, this.page.height);\n        y = this.page.height - y - dy; // add current font to page if necessary\n        if (this.page.fonts[this._font.id] == null) {\n            this.page.fonts[this._font.id] = this._font.ref();\n        } // begin the text object\n        this.addContent(\"BT\"); // text position\n        this.addContent(\"1 0 0 1 \".concat(number$2(x), \" \").concat(number$2(y), \" Tm\")); // font and font size\n        this.addContent(\"/\".concat(this._font.id, \" \").concat(number$2(this._fontSize), \" Tf\")); // rendering mode\n        var mode = options.fill && options.stroke ? 2 : options.stroke ? 1 : 0;\n        if (mode) {\n            this.addContent(\"\".concat(mode, \" Tr\"));\n        } // Character spacing\n        if (characterSpacing) {\n            this.addContent(\"\".concat(number$2(characterSpacing), \" Tc\"));\n        } // Add the actual text\n        // If we have a word spacing value, we need to encode each word separately\n        // since the normal Tw operator only works on character code 32, which isn't\n        // used for embedded fonts.\n        if (wordSpacing) {\n            words = text.trim().split(/\\s+/);\n            wordSpacing += this.widthOfString(\" \") + characterSpacing;\n            wordSpacing *= 1000 / this._fontSize;\n            encoded = [];\n            positions = [];\n            var _iterator2 = _createForOfIteratorHelper(words), _step2;\n            try {\n                for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){\n                    var word = _step2.value;\n                    var _this$_font$encode = this._font.encode(word, options.features), _this$_font$encode2 = _slicedToArray(_this$_font$encode, 2), encodedWord = _this$_font$encode2[0], positionsWord = _this$_font$encode2[1];\n                    encoded = encoded.concat(encodedWord);\n                    positions = positions.concat(positionsWord); // add the word spacing to the end of the word\n                    // clone object because of cache\n                    var space = {};\n                    var object = positions[positions.length - 1];\n                    for(var key in object){\n                        var val = object[key];\n                        space[key] = val;\n                    }\n                    space.xAdvance += wordSpacing;\n                    positions[positions.length - 1] = space;\n                }\n            } catch (err) {\n                _iterator2.e(err);\n            } finally{\n                _iterator2.f();\n            }\n        } else {\n            var _this$_font$encode3 = this._font.encode(text, options.features);\n            var _this$_font$encode4 = _slicedToArray(_this$_font$encode3, 2);\n            encoded = _this$_font$encode4[0];\n            positions = _this$_font$encode4[1];\n        }\n        var scale = this._fontSize / 1000;\n        var commands = [];\n        var last = 0;\n        var hadOffset = false; // Adds a segment of text to the TJ command buffer\n        var addSegment = function addSegment(cur) {\n            if (last < cur) {\n                var hex = encoded.slice(last, cur).join(\"\");\n                var advance = positions[cur - 1].xAdvance - positions[cur - 1].advanceWidth;\n                commands.push(\"<\".concat(hex, \"> \").concat(number$2(-advance)));\n            }\n            return last = cur;\n        }; // Flushes the current TJ commands to the output stream\n        var flush = function flush(i) {\n            addSegment(i);\n            if (commands.length > 0) {\n                _this4.addContent(\"[\".concat(commands.join(\" \"), \"] TJ\"));\n                return commands.length = 0;\n            }\n        };\n        for(i = 0; i < positions.length; i++){\n            // If we have an x or y offset, we have to break out of the current TJ command\n            // so we can move the text position.\n            var pos = positions[i];\n            if (pos.xOffset || pos.yOffset) {\n                // Flush the current buffer\n                flush(i); // Move the text position and flush just the current character\n                this.addContent(\"1 0 0 1 \".concat(number$2(x + pos.xOffset * scale), \" \").concat(number$2(y + pos.yOffset * scale), \" Tm\"));\n                flush(i + 1);\n                hadOffset = true;\n            } else {\n                // If the last character had an offset, reset the text position\n                if (hadOffset) {\n                    this.addContent(\"1 0 0 1 \".concat(number$2(x), \" \").concat(number$2(y), \" Tm\"));\n                    hadOffset = false;\n                } // Group segments that don't have any advance adjustments\n                if (pos.xAdvance - pos.advanceWidth !== 0) {\n                    addSegment(i + 1);\n                }\n            }\n            x += pos.xAdvance * scale;\n        } // Flush any remaining commands\n        flush(i); // end the text object\n        this.addContent(\"ET\"); // restore flipped coordinate system\n        return this.restore();\n    }\n};\nvar MARKERS = [\n    0xffc0,\n    0xffc1,\n    0xffc2,\n    0xffc3,\n    0xffc5,\n    0xffc6,\n    0xffc7,\n    0xffc8,\n    0xffc9,\n    0xffca,\n    0xffcb,\n    0xffcc,\n    0xffcd,\n    0xffce,\n    0xffcf\n];\nvar COLOR_SPACE_MAP = {\n    1: \"DeviceGray\",\n    3: \"DeviceRGB\",\n    4: \"DeviceCMYK\"\n};\nvar JPEG = /*#__PURE__*/ function() {\n    function JPEG(data, label) {\n        _classCallCheck(this, JPEG);\n        var marker;\n        this.data = data;\n        this.label = label;\n        if (this.data.readUInt16BE(0) !== 0xffd8) {\n            throw \"SOI not found in JPEG\";\n        }\n        var pos = 2;\n        while(pos < this.data.length){\n            marker = this.data.readUInt16BE(pos);\n            pos += 2;\n            if (MARKERS.includes(marker)) {\n                break;\n            }\n            pos += this.data.readUInt16BE(pos);\n        }\n        if (!MARKERS.includes(marker)) {\n            throw \"Invalid JPEG.\";\n        }\n        pos += 2;\n        this.bits = this.data[pos++];\n        this.height = this.data.readUInt16BE(pos);\n        pos += 2;\n        this.width = this.data.readUInt16BE(pos);\n        pos += 2;\n        var channels = this.data[pos++];\n        this.colorSpace = COLOR_SPACE_MAP[channels];\n        this.obj = null;\n    }\n    _createClass(JPEG, [\n        {\n            key: \"embed\",\n            value: function embed(document) {\n                if (this.obj) {\n                    return;\n                }\n                this.obj = document.ref({\n                    Type: \"XObject\",\n                    Subtype: \"Image\",\n                    BitsPerComponent: this.bits,\n                    Width: this.width,\n                    Height: this.height,\n                    ColorSpace: this.colorSpace,\n                    Filter: \"DCTDecode\"\n                }); // add extra decode params for CMYK images. By swapping the\n                // min and max values from the default, we invert the colors. See\n                // section 4.8.4 of the spec.\n                if (this.colorSpace === \"DeviceCMYK\") {\n                    this.obj.data[\"Decode\"] = [\n                        1.0,\n                        0.0,\n                        1.0,\n                        0.0,\n                        1.0,\n                        0.0,\n                        1.0,\n                        0.0\n                    ];\n                }\n                this.obj.end(this.data); // free memory\n                return this.data = null;\n            }\n        }\n    ]);\n    return JPEG;\n}();\nvar PNGImage = /*#__PURE__*/ function() {\n    function PNGImage(data, label) {\n        _classCallCheck(this, PNGImage);\n        this.label = label;\n        this.image = new (png_js__WEBPACK_IMPORTED_MODULE_7___default())(data);\n        this.width = this.image.width;\n        this.height = this.image.height;\n        this.imgData = this.image.imgData;\n        this.obj = null;\n    }\n    _createClass(PNGImage, [\n        {\n            key: \"embed\",\n            value: function embed(document) {\n                var dataDecoded = false;\n                this.document = document;\n                if (this.obj) {\n                    return;\n                }\n                var hasAlphaChannel = this.image.hasAlphaChannel;\n                var isInterlaced = this.image.interlaceMethod === 1;\n                this.obj = this.document.ref({\n                    Type: \"XObject\",\n                    Subtype: \"Image\",\n                    BitsPerComponent: hasAlphaChannel ? 8 : this.image.bits,\n                    Width: this.width,\n                    Height: this.height,\n                    Filter: \"FlateDecode\"\n                });\n                if (!hasAlphaChannel) {\n                    var params = this.document.ref({\n                        Predictor: isInterlaced ? 1 : 15,\n                        Colors: this.image.colors,\n                        BitsPerComponent: this.image.bits,\n                        Columns: this.width\n                    });\n                    this.obj.data[\"DecodeParms\"] = params;\n                    params.end();\n                }\n                if (this.image.palette.length === 0) {\n                    this.obj.data[\"ColorSpace\"] = this.image.colorSpace;\n                } else {\n                    // embed the color palette in the PDF as an object stream\n                    var palette = this.document.ref();\n                    palette.end(Buffer.from(this.image.palette)); // build the color space array for the image\n                    this.obj.data[\"ColorSpace\"] = [\n                        \"Indexed\",\n                        \"DeviceRGB\",\n                        this.image.palette.length / 3 - 1,\n                        palette\n                    ];\n                } // For PNG color types 0, 2 and 3, the transparency data is stored in\n                // a dedicated PNG chunk.\n                if (this.image.transparency.grayscale != null) {\n                    // Use Color Key Masking (spec section 4.8.5)\n                    // An array with N elements, where N is two times the number of color components.\n                    var val = this.image.transparency.grayscale;\n                    this.obj.data[\"Mask\"] = [\n                        val,\n                        val\n                    ];\n                } else if (this.image.transparency.rgb) {\n                    // Use Color Key Masking (spec section 4.8.5)\n                    // An array with N elements, where N is two times the number of color components.\n                    var rgb = this.image.transparency.rgb;\n                    var mask = [];\n                    var _iterator = _createForOfIteratorHelper(rgb), _step;\n                    try {\n                        for(_iterator.s(); !(_step = _iterator.n()).done;){\n                            var x = _step.value;\n                            mask.push(x, x);\n                        }\n                    } catch (err) {\n                        _iterator.e(err);\n                    } finally{\n                        _iterator.f();\n                    }\n                    this.obj.data[\"Mask\"] = mask;\n                } else if (this.image.transparency.indexed) {\n                    // Create a transparency SMask for the image based on the data\n                    // in the PLTE and tRNS sections. See below for details on SMasks.\n                    dataDecoded = true;\n                    return this.loadIndexedAlphaChannel();\n                } else if (hasAlphaChannel) {\n                    // For PNG color types 4 and 6, the transparency data is stored as a alpha\n                    // channel mixed in with the main image data. Separate this data out into an\n                    // SMask object and store it separately in the PDF.\n                    dataDecoded = true;\n                    return this.splitAlphaChannel();\n                }\n                if (isInterlaced && !dataDecoded) {\n                    return this.decodeData();\n                }\n                this.finalize();\n            }\n        },\n        {\n            key: \"finalize\",\n            value: function finalize() {\n                if (this.alphaChannel) {\n                    var sMask = this.document.ref({\n                        Type: \"XObject\",\n                        Subtype: \"Image\",\n                        Height: this.height,\n                        Width: this.width,\n                        BitsPerComponent: 8,\n                        Filter: \"FlateDecode\",\n                        ColorSpace: \"DeviceGray\",\n                        Decode: [\n                            0,\n                            1\n                        ]\n                    });\n                    sMask.end(this.alphaChannel);\n                    this.obj.data[\"SMask\"] = sMask;\n                } // add the actual image data\n                this.obj.end(this.imgData); // free memory\n                this.image = null;\n                return this.imgData = null;\n            }\n        },\n        {\n            key: \"splitAlphaChannel\",\n            value: function splitAlphaChannel() {\n                var _this = this;\n                return this.image.decodePixels(function(pixels) {\n                    var a, p;\n                    var colorCount = _this.image.colors;\n                    var pixelCount = _this.width * _this.height;\n                    var imgData = Buffer.alloc(pixelCount * colorCount);\n                    var alphaChannel = Buffer.alloc(pixelCount);\n                    var i = p = a = 0;\n                    var len = pixels.length; // For 16bit images copy only most significant byte (MSB) - PNG data is always stored in network byte order (MSB first)\n                    var skipByteCount = _this.image.bits === 16 ? 1 : 0;\n                    while(i < len){\n                        for(var colorIndex = 0; colorIndex < colorCount; colorIndex++){\n                            imgData[p++] = pixels[i++];\n                            i += skipByteCount;\n                        }\n                        alphaChannel[a++] = pixels[i++];\n                        i += skipByteCount;\n                    }\n                    _this.imgData = zlib__WEBPACK_IMPORTED_MODULE_2___default().deflateSync(imgData);\n                    _this.alphaChannel = zlib__WEBPACK_IMPORTED_MODULE_2___default().deflateSync(alphaChannel);\n                    return _this.finalize();\n                });\n            }\n        },\n        {\n            key: \"loadIndexedAlphaChannel\",\n            value: function loadIndexedAlphaChannel() {\n                var _this2 = this;\n                var transparency = this.image.transparency.indexed;\n                return this.image.decodePixels(function(pixels) {\n                    var alphaChannel = Buffer.alloc(_this2.width * _this2.height);\n                    var i = 0;\n                    for(var j = 0, end = pixels.length; j < end; j++){\n                        alphaChannel[i++] = transparency[pixels[j]];\n                    }\n                    _this2.alphaChannel = zlib__WEBPACK_IMPORTED_MODULE_2___default().deflateSync(alphaChannel);\n                    return _this2.finalize();\n                });\n            }\n        },\n        {\n            key: \"decodeData\",\n            value: function decodeData() {\n                var _this3 = this;\n                this.image.decodePixels(function(pixels) {\n                    _this3.imgData = zlib__WEBPACK_IMPORTED_MODULE_2___default().deflateSync(pixels);\n                    _this3.finalize();\n                });\n            }\n        }\n    ]);\n    return PNGImage;\n}();\nvar PDFImage = /*#__PURE__*/ function() {\n    function PDFImage() {\n        _classCallCheck(this, PDFImage);\n    }\n    _createClass(PDFImage, null, [\n        {\n            key: \"open\",\n            value: function open(src, label) {\n                var data;\n                if (Buffer.isBuffer(src)) {\n                    data = src;\n                } else if (src instanceof ArrayBuffer) {\n                    data = Buffer.from(new Uint8Array(src));\n                } else {\n                    var match;\n                    if (match = /^data:.+;base64,(.*)$/.exec(src)) {\n                        data = Buffer.from(match[1], \"base64\");\n                    } else {\n                        data = fs__WEBPACK_IMPORTED_MODULE_1___default().readFileSync(src);\n                        if (!data) {\n                            return;\n                        }\n                    }\n                }\n                if (data[0] === 0xff && data[1] === 0xd8) {\n                    return new JPEG(data, label);\n                } else if (data[0] === 0x89 && data.toString(\"ascii\", 1, 4) === \"PNG\") {\n                    return new PNGImage(data, label);\n                } else {\n                    throw new Error(\"Unknown image format.\");\n                }\n            }\n        }\n    ]);\n    return PDFImage;\n}();\nvar ImagesMixin = {\n    initImages: function initImages() {\n        this._imageRegistry = {};\n        return this._imageCount = 0;\n    },\n    image: function image(src, x, y) {\n        var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n        var bh, bp, bw, image, ip, left, left1;\n        if (typeof x === \"object\") {\n            options = x;\n            x = null;\n        }\n        x = (left = x != null ? x : options.x) != null ? left : this.x;\n        y = (left1 = y != null ? y : options.y) != null ? left1 : this.y;\n        if (typeof src === \"string\") {\n            image = this._imageRegistry[src];\n        }\n        if (!image) {\n            if (src.width && src.height) {\n                image = src;\n            } else {\n                image = this.openImage(src);\n            }\n        }\n        if (!image.obj) {\n            image.embed(this);\n        }\n        if (this.page.xobjects[image.label] == null) {\n            this.page.xobjects[image.label] = image.obj;\n        }\n        var w = options.width || image.width;\n        var h = options.height || image.height;\n        if (options.width && !options.height) {\n            var wp = w / image.width;\n            w = image.width * wp;\n            h = image.height * wp;\n        } else if (options.height && !options.width) {\n            var hp = h / image.height;\n            w = image.width * hp;\n            h = image.height * hp;\n        } else if (options.scale) {\n            w = image.width * options.scale;\n            h = image.height * options.scale;\n        } else if (options.fit) {\n            var _options$fit = _slicedToArray(options.fit, 2);\n            bw = _options$fit[0];\n            bh = _options$fit[1];\n            bp = bw / bh;\n            ip = image.width / image.height;\n            if (ip > bp) {\n                w = bw;\n                h = bw / ip;\n            } else {\n                h = bh;\n                w = bh * ip;\n            }\n        } else if (options.cover) {\n            var _options$cover = _slicedToArray(options.cover, 2);\n            bw = _options$cover[0];\n            bh = _options$cover[1];\n            bp = bw / bh;\n            ip = image.width / image.height;\n            if (ip > bp) {\n                h = bh;\n                w = bh * ip;\n            } else {\n                w = bw;\n                h = bw / ip;\n            }\n        }\n        if (options.fit || options.cover) {\n            if (options.align === \"center\") {\n                x = x + bw / 2 - w / 2;\n            } else if (options.align === \"right\") {\n                x = x + bw - w;\n            }\n            if (options.valign === \"center\") {\n                y = y + bh / 2 - h / 2;\n            } else if (options.valign === \"bottom\") {\n                y = y + bh - h;\n            }\n        } // create link annotations if the link option is given\n        if (options.link != null) {\n            this.link(x, y, w, h, options.link);\n        }\n        if (options.goTo != null) {\n            this.goTo(x, y, w, h, options.goTo);\n        }\n        if (options.destination != null) {\n            this.addNamedDestination(options.destination, \"XYZ\", x, y, null);\n        } // Set the current y position to below the image if it is in the document flow\n        if (this.y === y) {\n            this.y += h;\n        }\n        this.save();\n        this.transform(w, 0, 0, -h, x, y + h);\n        this.addContent(\"/\".concat(image.label, \" Do\"));\n        this.restore();\n        return this;\n    },\n    openImage: function openImage(src) {\n        var image;\n        if (typeof src === \"string\") {\n            image = this._imageRegistry[src];\n        }\n        if (!image) {\n            image = PDFImage.open(src, \"I\".concat(++this._imageCount));\n            if (typeof src === \"string\") {\n                this._imageRegistry[src] = image;\n            }\n        }\n        return image;\n    }\n};\nvar AnnotationsMixin = {\n    annotate: function annotate(x, y, w, h, options) {\n        options.Type = \"Annot\";\n        options.Rect = this._convertRect(x, y, w, h);\n        options.Border = [\n            0,\n            0,\n            0\n        ];\n        if (options.Subtype === \"Link\" && typeof options.F === \"undefined\") {\n            options.F = 1 << 2; // Print Annotation Flag\n        }\n        if (options.Subtype !== \"Link\") {\n            if (options.C == null) {\n                options.C = this._normalizeColor(options.color || [\n                    0,\n                    0,\n                    0\n                ]);\n            }\n        } // convert colors\n        delete options.color;\n        if (typeof options.Dest === \"string\") {\n            options.Dest = new String(options.Dest);\n        } // Capitalize keys\n        for(var key in options){\n            var val = options[key];\n            options[key[0].toUpperCase() + key.slice(1)] = val;\n        }\n        var ref = this.ref(options);\n        this.page.annotations.push(ref);\n        ref.end();\n        return this;\n    },\n    note: function note(x, y, w, h, contents) {\n        var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n        options.Subtype = \"Text\";\n        options.Contents = new String(contents);\n        options.Name = \"Comment\";\n        if (options.color == null) {\n            options.color = [\n                243,\n                223,\n                92\n            ];\n        }\n        return this.annotate(x, y, w, h, options);\n    },\n    goTo: function goTo(x, y, w, h, name) {\n        var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n        options.Subtype = \"Link\";\n        options.A = this.ref({\n            S: \"GoTo\",\n            D: new String(name)\n        });\n        options.A.end();\n        return this.annotate(x, y, w, h, options);\n    },\n    link: function link(x, y, w, h, url) {\n        var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n        options.Subtype = \"Link\";\n        if (typeof url === \"number\") {\n            // Link to a page in the document (the page must already exist)\n            var pages = this._root.data.Pages.data;\n            if (url >= 0 && url < pages.Kids.length) {\n                options.A = this.ref({\n                    S: \"GoTo\",\n                    D: [\n                        pages.Kids[url],\n                        \"XYZ\",\n                        null,\n                        null,\n                        null\n                    ]\n                });\n                options.A.end();\n            } else {\n                throw new Error(\"The document has no page \".concat(url));\n            }\n        } else {\n            // Link to an external url\n            options.A = this.ref({\n                S: \"URI\",\n                URI: new String(url)\n            });\n            options.A.end();\n        }\n        return this.annotate(x, y, w, h, options);\n    },\n    _markup: function _markup(x, y, w, h) {\n        var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n        var _this$_convertRect = this._convertRect(x, y, w, h), _this$_convertRect2 = _slicedToArray(_this$_convertRect, 4), x1 = _this$_convertRect2[0], y1 = _this$_convertRect2[1], x2 = _this$_convertRect2[2], y2 = _this$_convertRect2[3];\n        options.QuadPoints = [\n            x1,\n            y2,\n            x2,\n            y2,\n            x1,\n            y1,\n            x2,\n            y1\n        ];\n        options.Contents = new String();\n        return this.annotate(x, y, w, h, options);\n    },\n    highlight: function highlight(x, y, w, h) {\n        var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n        options.Subtype = \"Highlight\";\n        if (options.color == null) {\n            options.color = [\n                241,\n                238,\n                148\n            ];\n        }\n        return this._markup(x, y, w, h, options);\n    },\n    underline: function underline(x, y, w, h) {\n        var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n        options.Subtype = \"Underline\";\n        return this._markup(x, y, w, h, options);\n    },\n    strike: function strike(x, y, w, h) {\n        var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n        options.Subtype = \"StrikeOut\";\n        return this._markup(x, y, w, h, options);\n    },\n    lineAnnotation: function lineAnnotation(x1, y1, x2, y2) {\n        var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n        options.Subtype = \"Line\";\n        options.Contents = new String();\n        options.L = [\n            x1,\n            this.page.height - y1,\n            x2,\n            this.page.height - y2\n        ];\n        return this.annotate(x1, y1, x2, y2, options);\n    },\n    rectAnnotation: function rectAnnotation(x, y, w, h) {\n        var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n        options.Subtype = \"Square\";\n        options.Contents = new String();\n        return this.annotate(x, y, w, h, options);\n    },\n    ellipseAnnotation: function ellipseAnnotation(x, y, w, h) {\n        var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n        options.Subtype = \"Circle\";\n        options.Contents = new String();\n        return this.annotate(x, y, w, h, options);\n    },\n    textAnnotation: function textAnnotation(x, y, w, h, text) {\n        var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n        options.Subtype = \"FreeText\";\n        options.Contents = new String(text);\n        options.DA = new String();\n        return this.annotate(x, y, w, h, options);\n    },\n    fileAnnotation: function fileAnnotation(x, y, w, h) {\n        var file = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n        var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n        // create hidden file\n        var filespec = this.file(file.src, Object.assign({\n            hidden: true\n        }, file));\n        options.Subtype = \"FileAttachment\";\n        options.FS = filespec; // add description from filespec unless description (Contents) has already been set\n        if (options.Contents) {\n            options.Contents = new String(options.Contents);\n        } else if (filespec.data.Desc) {\n            options.Contents = filespec.data.Desc;\n        }\n        return this.annotate(x, y, w, h, options);\n    },\n    _convertRect: function _convertRect(x1, y1, w, h) {\n        // flip y1 and y2\n        var y2 = y1;\n        y1 += h; // make x2\n        var x2 = x1 + w; // apply current transformation matrix to points\n        var _this$_ctm = _slicedToArray(this._ctm, 6), m0 = _this$_ctm[0], m1 = _this$_ctm[1], m2 = _this$_ctm[2], m3 = _this$_ctm[3], m4 = _this$_ctm[4], m5 = _this$_ctm[5];\n        x1 = m0 * x1 + m2 * y1 + m4;\n        y1 = m1 * x1 + m3 * y1 + m5;\n        x2 = m0 * x2 + m2 * y2 + m4;\n        y2 = m1 * x2 + m3 * y2 + m5;\n        return [\n            x1,\n            y1,\n            x2,\n            y2\n        ];\n    }\n};\nvar PDFOutline = /*#__PURE__*/ function() {\n    function PDFOutline(document, parent, title, dest) {\n        var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {\n            expanded: false\n        };\n        _classCallCheck(this, PDFOutline);\n        this.document = document;\n        this.options = options;\n        this.outlineData = {};\n        if (dest !== null) {\n            this.outlineData[\"Dest\"] = [\n                dest.dictionary,\n                \"Fit\"\n            ];\n        }\n        if (parent !== null) {\n            this.outlineData[\"Parent\"] = parent;\n        }\n        if (title !== null) {\n            this.outlineData[\"Title\"] = new String(title);\n        }\n        this.dictionary = this.document.ref(this.outlineData);\n        this.children = [];\n    }\n    _createClass(PDFOutline, [\n        {\n            key: \"addItem\",\n            value: function addItem(title) {\n                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n                    expanded: false\n                };\n                var result = new PDFOutline(this.document, this.dictionary, title, this.document.page, options);\n                this.children.push(result);\n                return result;\n            }\n        },\n        {\n            key: \"endOutline\",\n            value: function endOutline() {\n                if (this.children.length > 0) {\n                    if (this.options.expanded) {\n                        this.outlineData.Count = this.children.length;\n                    }\n                    var first = this.children[0], last = this.children[this.children.length - 1];\n                    this.outlineData.First = first.dictionary;\n                    this.outlineData.Last = last.dictionary;\n                    for(var i = 0, len = this.children.length; i < len; i++){\n                        var child = this.children[i];\n                        if (i > 0) {\n                            child.outlineData.Prev = this.children[i - 1].dictionary;\n                        }\n                        if (i < this.children.length - 1) {\n                            child.outlineData.Next = this.children[i + 1].dictionary;\n                        }\n                        child.endOutline();\n                    }\n                }\n                return this.dictionary.end();\n            }\n        }\n    ]);\n    return PDFOutline;\n}();\nvar OutlineMixin = {\n    initOutline: function initOutline() {\n        return this.outline = new PDFOutline(this, null, null, null);\n    },\n    endOutline: function endOutline() {\n        this.outline.endOutline();\n        if (this.outline.children.length > 0) {\n            this._root.data.Outlines = this.outline.dictionary;\n            return this._root.data.PageMode = \"UseOutlines\";\n        }\n    }\n};\n/*\r\nPDFStructureContent - a reference to a marked structure content\r\nBy Ben Schmidt\r\n*/ var PDFStructureContent = /*#__PURE__*/ function() {\n    function PDFStructureContent(pageRef, mcid) {\n        _classCallCheck(this, PDFStructureContent);\n        this.refs = [\n            {\n                pageRef: pageRef,\n                mcid: mcid\n            }\n        ];\n    }\n    _createClass(PDFStructureContent, [\n        {\n            key: \"push\",\n            value: function push(structContent) {\n                var _this = this;\n                structContent.refs.forEach(function(ref) {\n                    return _this.refs.push(ref);\n                });\n            }\n        }\n    ]);\n    return PDFStructureContent;\n}();\nvar PDFStructureElement = /*#__PURE__*/ function() {\n    function PDFStructureElement(document, type) {\n        var _this = this;\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        var children = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n        _classCallCheck(this, PDFStructureElement);\n        this.document = document;\n        this._attached = false;\n        this._ended = false;\n        this._flushed = false;\n        this.dictionary = document.ref({\n            // Type: \"StructElem\",\n            S: type\n        });\n        var data = this.dictionary.data;\n        if (Array.isArray(options) || this._isValidChild(options)) {\n            children = options;\n            options = {};\n        }\n        if (typeof options.title !== \"undefined\") {\n            data.T = new String(options.title);\n        }\n        if (typeof options.lang !== \"undefined\") {\n            data.Lang = new String(options.lang);\n        }\n        if (typeof options.alt !== \"undefined\") {\n            data.Alt = new String(options.alt);\n        }\n        if (typeof options.expanded !== \"undefined\") {\n            data.E = new String(options.expanded);\n        }\n        if (typeof options.actual !== \"undefined\") {\n            data.ActualText = new String(options.actual);\n        }\n        this._children = [];\n        if (children) {\n            if (!Array.isArray(children)) {\n                children = [\n                    children\n                ];\n            }\n            children.forEach(function(child) {\n                return _this.add(child);\n            });\n            this.end();\n        }\n    }\n    _createClass(PDFStructureElement, [\n        {\n            key: \"add\",\n            value: function add(child) {\n                if (this._ended) {\n                    throw new Error(\"Cannot add child to already-ended structure element\");\n                }\n                if (!this._isValidChild(child)) {\n                    throw new Error(\"Invalid structure element child\");\n                }\n                if (child instanceof PDFStructureElement) {\n                    child.setParent(this.dictionary);\n                    if (this._attached) {\n                        child.setAttached();\n                    }\n                }\n                if (child instanceof PDFStructureContent) {\n                    this._addContentToParentTree(child);\n                }\n                if (typeof child === \"function\" && this._attached) {\n                    // _contentForClosure() adds the content to the parent tree\n                    child = this._contentForClosure(child);\n                }\n                this._children.push(child);\n                return this;\n            }\n        },\n        {\n            key: \"_addContentToParentTree\",\n            value: function _addContentToParentTree(content) {\n                var _this2 = this;\n                content.refs.forEach(function(_ref) {\n                    var pageRef = _ref.pageRef, mcid = _ref.mcid;\n                    var pageStructParents = _this2.document.getStructParentTree().get(pageRef.data.StructParents);\n                    pageStructParents[mcid] = _this2.dictionary;\n                });\n            }\n        },\n        {\n            key: \"setParent\",\n            value: function setParent(parentRef) {\n                if (this.dictionary.data.P) {\n                    throw new Error(\"Structure element added to more than one parent\");\n                }\n                this.dictionary.data.P = parentRef;\n                this._flush();\n            }\n        },\n        {\n            key: \"setAttached\",\n            value: function setAttached() {\n                var _this3 = this;\n                if (this._attached) {\n                    return;\n                }\n                this._children.forEach(function(child, index) {\n                    if (child instanceof PDFStructureElement) {\n                        child.setAttached();\n                    }\n                    if (typeof child === \"function\") {\n                        _this3._children[index] = _this3._contentForClosure(child);\n                    }\n                });\n                this._attached = true;\n                this._flush();\n            }\n        },\n        {\n            key: \"end\",\n            value: function end() {\n                if (this._ended) {\n                    return;\n                }\n                this._children.filter(function(child) {\n                    return child instanceof PDFStructureElement;\n                }).forEach(function(child) {\n                    return child.end();\n                });\n                this._ended = true;\n                this._flush();\n            }\n        },\n        {\n            key: \"_isValidChild\",\n            value: function _isValidChild(child) {\n                return child instanceof PDFStructureElement || child instanceof PDFStructureContent || typeof child === \"function\";\n            }\n        },\n        {\n            key: \"_contentForClosure\",\n            value: function _contentForClosure(closure) {\n                var content = this.document.markStructureContent(this.dictionary.data.S);\n                closure();\n                this.document.endMarkedContent();\n                this._addContentToParentTree(content);\n                return content;\n            }\n        },\n        {\n            key: \"_isFlushable\",\n            value: function _isFlushable() {\n                if (!this.dictionary.data.P || !this._ended) {\n                    return false;\n                }\n                return this._children.every(function(child) {\n                    if (typeof child === \"function\") {\n                        return false;\n                    }\n                    if (child instanceof PDFStructureElement) {\n                        return child._isFlushable();\n                    }\n                    return true;\n                });\n            }\n        },\n        {\n            key: \"_flush\",\n            value: function _flush() {\n                var _this4 = this;\n                if (this._flushed || !this._isFlushable()) {\n                    return;\n                }\n                this.dictionary.data.K = [];\n                this._children.forEach(function(child) {\n                    return _this4._flushChild(child);\n                });\n                this.dictionary.end(); // free memory used by children; the dictionary itself may still be\n                // referenced by a parent structure element or root, but we can\n                // at least trim the tree here\n                this._children = [];\n                this.dictionary.data.K = null;\n                this._flushed = true;\n            }\n        },\n        {\n            key: \"_flushChild\",\n            value: function _flushChild(child) {\n                var _this5 = this;\n                if (child instanceof PDFStructureElement) {\n                    this.dictionary.data.K.push(child.dictionary);\n                }\n                if (child instanceof PDFStructureContent) {\n                    child.refs.forEach(function(_ref2) {\n                        var pageRef = _ref2.pageRef, mcid = _ref2.mcid;\n                        if (!_this5.dictionary.data.Pg) {\n                            _this5.dictionary.data.Pg = pageRef;\n                        }\n                        if (_this5.dictionary.data.Pg === pageRef) {\n                            _this5.dictionary.data.K.push(mcid);\n                        } else {\n                            _this5.dictionary.data.K.push({\n                                Type: \"MCR\",\n                                Pg: pageRef,\n                                MCID: mcid\n                            });\n                        }\n                    });\n                }\n            }\n        }\n    ]);\n    return PDFStructureElement;\n}();\nvar PDFNumberTree = /*#__PURE__*/ function(_PDFTree) {\n    _inherits(PDFNumberTree, _PDFTree);\n    var _super = _createSuper(PDFNumberTree);\n    function PDFNumberTree() {\n        _classCallCheck(this, PDFNumberTree);\n        return _super.apply(this, arguments);\n    }\n    _createClass(PDFNumberTree, [\n        {\n            key: \"_compareKeys\",\n            value: function _compareKeys(a, b) {\n                return parseInt(a) - parseInt(b);\n            }\n        },\n        {\n            key: \"_keysName\",\n            value: function _keysName() {\n                return \"Nums\";\n            }\n        },\n        {\n            key: \"_dataForKey\",\n            value: function _dataForKey(k) {\n                return parseInt(k);\n            }\n        }\n    ]);\n    return PDFNumberTree;\n}(PDFTree);\nvar MarkingsMixin = {\n    initMarkings: function initMarkings(options) {\n        this.structChildren = [];\n        if (options.tagged) {\n            this.getMarkInfoDictionary().data.Marked = true;\n            this.getStructTreeRoot();\n        }\n    },\n    markContent: function markContent(tag) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        if (tag === \"Artifact\" || options && options.mcid) {\n            var toClose = 0;\n            this.page.markings.forEach(function(marking) {\n                if (toClose || marking.structContent || marking.tag === \"Artifact\") {\n                    toClose++;\n                }\n            });\n            while(toClose--){\n                this.endMarkedContent();\n            }\n        }\n        if (!options) {\n            this.page.markings.push({\n                tag: tag\n            });\n            this.addContent(\"/\".concat(tag, \" BMC\"));\n            return this;\n        }\n        this.page.markings.push({\n            tag: tag,\n            options: options\n        });\n        var dictionary = {};\n        if (typeof options.mcid !== \"undefined\") {\n            dictionary.MCID = options.mcid;\n        }\n        if (tag === \"Artifact\") {\n            if (typeof options.type === \"string\") {\n                dictionary.Type = options.type;\n            }\n            if (Array.isArray(options.bbox)) {\n                dictionary.BBox = [\n                    options.bbox[0],\n                    this.page.height - options.bbox[3],\n                    options.bbox[2],\n                    this.page.height - options.bbox[1]\n                ];\n            }\n            if (Array.isArray(options.attached) && options.attached.every(function(val) {\n                return typeof val === \"string\";\n            })) {\n                dictionary.Attached = options.attached;\n            }\n        }\n        if (tag === \"Span\") {\n            if (options.lang) {\n                dictionary.Lang = new String(options.lang);\n            }\n            if (options.alt) {\n                dictionary.Alt = new String(options.alt);\n            }\n            if (options.expanded) {\n                dictionary.E = new String(options.expanded);\n            }\n            if (options.actual) {\n                dictionary.ActualText = new String(options.actual);\n            }\n        }\n        this.addContent(\"/\".concat(tag, \" \").concat(PDFObject.convert(dictionary), \" BDC\"));\n        return this;\n    },\n    markStructureContent: function markStructureContent(tag) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var pageStructParents = this.getStructParentTree().get(this.page.structParentTreeKey);\n        var mcid = pageStructParents.length;\n        pageStructParents.push(null);\n        this.markContent(tag, _objectSpread2(_objectSpread2({}, options), {}, {\n            mcid: mcid\n        }));\n        var structContent = new PDFStructureContent(this.page.dictionary, mcid);\n        this.page.markings.slice(-1)[0].structContent = structContent;\n        return structContent;\n    },\n    endMarkedContent: function endMarkedContent() {\n        this.page.markings.pop();\n        this.addContent(\"EMC\");\n        return this;\n    },\n    struct: function struct(type) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n        return new PDFStructureElement(this, type, options, children);\n    },\n    addStructure: function addStructure(structElem) {\n        var structTreeRoot = this.getStructTreeRoot();\n        structElem.setParent(structTreeRoot);\n        structElem.setAttached();\n        this.structChildren.push(structElem);\n        if (!structTreeRoot.data.K) {\n            structTreeRoot.data.K = [];\n        }\n        structTreeRoot.data.K.push(structElem.dictionary);\n        return this;\n    },\n    initPageMarkings: function initPageMarkings(pageMarkings) {\n        var _this = this;\n        pageMarkings.forEach(function(marking) {\n            if (marking.structContent) {\n                var structContent = marking.structContent;\n                var newStructContent = _this.markStructureContent(marking.tag, marking.options);\n                structContent.push(newStructContent);\n                _this.page.markings.slice(-1)[0].structContent = structContent;\n            } else {\n                _this.markContent(marking.tag, marking.options);\n            }\n        });\n    },\n    endPageMarkings: function endPageMarkings(page) {\n        var pageMarkings = page.markings;\n        pageMarkings.forEach(function() {\n            return page.write(\"EMC\");\n        });\n        page.markings = [];\n        return pageMarkings;\n    },\n    getMarkInfoDictionary: function getMarkInfoDictionary() {\n        if (!this._root.data.MarkInfo) {\n            this._root.data.MarkInfo = this.ref({});\n        }\n        return this._root.data.MarkInfo;\n    },\n    getStructTreeRoot: function getStructTreeRoot() {\n        if (!this._root.data.StructTreeRoot) {\n            this._root.data.StructTreeRoot = this.ref({\n                Type: \"StructTreeRoot\",\n                ParentTree: new PDFNumberTree(),\n                ParentTreeNextKey: 0\n            });\n        }\n        return this._root.data.StructTreeRoot;\n    },\n    getStructParentTree: function getStructParentTree() {\n        return this.getStructTreeRoot().data.ParentTree;\n    },\n    createStructParentTreeNextKey: function createStructParentTreeNextKey() {\n        // initialise the MarkInfo dictionary\n        this.getMarkInfoDictionary();\n        var structTreeRoot = this.getStructTreeRoot();\n        var key = structTreeRoot.data.ParentTreeNextKey++;\n        structTreeRoot.data.ParentTree.add(key, []);\n        return key;\n    },\n    endMarkings: function endMarkings() {\n        var structTreeRoot = this._root.data.StructTreeRoot;\n        if (structTreeRoot) {\n            structTreeRoot.end();\n            this.structChildren.forEach(function(structElem) {\n                return structElem.end();\n            });\n        }\n        if (this._root.data.MarkInfo) {\n            this._root.data.MarkInfo.end();\n        }\n    }\n};\nvar FIELD_FLAGS = {\n    readOnly: 1,\n    required: 2,\n    noExport: 4,\n    multiline: 0x1000,\n    password: 0x2000,\n    toggleToOffButton: 0x4000,\n    radioButton: 0x8000,\n    pushButton: 0x10000,\n    combo: 0x20000,\n    edit: 0x40000,\n    sort: 0x80000,\n    multiSelect: 0x200000,\n    noSpell: 0x400000\n};\nvar FIELD_JUSTIFY = {\n    left: 0,\n    center: 1,\n    right: 2\n};\nvar VALUE_MAP = {\n    value: \"V\",\n    defaultValue: \"DV\"\n};\nvar FORMAT_SPECIAL = {\n    zip: \"0\",\n    zipPlus4: \"1\",\n    zip4: \"1\",\n    phone: \"2\",\n    ssn: \"3\"\n};\nvar FORMAT_DEFAULT = {\n    number: {\n        nDec: 0,\n        sepComma: false,\n        negStyle: \"MinusBlack\",\n        currency: \"\",\n        currencyPrepend: true\n    },\n    percent: {\n        nDec: 0,\n        sepComma: false\n    }\n};\nvar AcroFormMixin = {\n    /**\r\n   * Must call if adding AcroForms to a document. Must also call font() before\r\n   * this method to set the default font.\r\n   */ initForm: function initForm() {\n        if (!this._font) {\n            throw new Error(\"Must set a font before calling initForm method\");\n        }\n        this._acroform = {\n            fonts: {},\n            defaultFont: this._font.name\n        };\n        this._acroform.fonts[this._font.id] = this._font.ref();\n        var data = {\n            Fields: [],\n            NeedAppearances: true,\n            DA: new String(\"/\".concat(this._font.id, \" 0 Tf 0 g\")),\n            DR: {\n                Font: {}\n            }\n        };\n        data.DR.Font[this._font.id] = this._font.ref();\n        var AcroForm = this.ref(data);\n        this._root.data.AcroForm = AcroForm;\n        return this;\n    },\n    /**\r\n   * Called automatically by document.js\r\n   */ endAcroForm: function endAcroForm() {\n        var _this = this;\n        if (this._root.data.AcroForm) {\n            if (!Object.keys(this._acroform.fonts).length && !this._acroform.defaultFont) {\n                throw new Error(\"No fonts specified for PDF form\");\n            }\n            var fontDict = this._root.data.AcroForm.data.DR.Font;\n            Object.keys(this._acroform.fonts).forEach(function(name) {\n                fontDict[name] = _this._acroform.fonts[name];\n            });\n            this._root.data.AcroForm.data.Fields.forEach(function(fieldRef) {\n                _this._endChild(fieldRef);\n            });\n            this._root.data.AcroForm.end();\n        }\n        return this;\n    },\n    _endChild: function _endChild(ref) {\n        var _this2 = this;\n        if (Array.isArray(ref.data.Kids)) {\n            ref.data.Kids.forEach(function(childRef) {\n                _this2._endChild(childRef);\n            });\n            ref.end();\n        }\n        return this;\n    },\n    /**\r\n   * Creates and adds a form field to the document. Form fields are intermediate\r\n   * nodes in a PDF form that are used to specify form name heirarchy and form\r\n   * value defaults.\r\n   * @param {string} name - field name (T attribute in field dictionary)\r\n   * @param {object} options  - other attributes to include in field dictionary\r\n   */ formField: function formField(name) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var fieldDict = this._fieldDict(name, null, options);\n        var fieldRef = this.ref(fieldDict);\n        this._addToParent(fieldRef);\n        return fieldRef;\n    },\n    /**\r\n   * Creates and adds a Form Annotation to the document. Form annotations are\r\n   * called Widget annotations internally within a PDF file.\r\n   * @param {string} name - form field name (T attribute of widget annotation\r\n   * dictionary)\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} w\r\n   * @param {number} h\r\n   * @param {object} options\r\n   */ formAnnotation: function formAnnotation(name, type, x, y, w, h) {\n        var options = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};\n        var fieldDict = this._fieldDict(name, type, options);\n        fieldDict.Subtype = \"Widget\";\n        if (fieldDict.F === undefined) {\n            fieldDict.F = 4; // print the annotation\n        } // Add Field annot to page, and get it's ref\n        this.annotate(x, y, w, h, fieldDict);\n        var annotRef = this.page.annotations[this.page.annotations.length - 1];\n        return this._addToParent(annotRef);\n    },\n    formText: function formText(name, x, y, w, h) {\n        var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n        return this.formAnnotation(name, \"text\", x, y, w, h, options);\n    },\n    formPushButton: function formPushButton(name, x, y, w, h) {\n        var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n        return this.formAnnotation(name, \"pushButton\", x, y, w, h, options);\n    },\n    formCombo: function formCombo(name, x, y, w, h) {\n        var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n        return this.formAnnotation(name, \"combo\", x, y, w, h, options);\n    },\n    formList: function formList(name, x, y, w, h) {\n        var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n        return this.formAnnotation(name, \"list\", x, y, w, h, options);\n    },\n    formRadioButton: function formRadioButton(name, x, y, w, h) {\n        var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n        return this.formAnnotation(name, \"radioButton\", x, y, w, h, options);\n    },\n    formCheckbox: function formCheckbox(name, x, y, w, h) {\n        var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n        return this.formAnnotation(name, \"checkbox\", x, y, w, h, options);\n    },\n    _addToParent: function _addToParent(fieldRef) {\n        var parent = fieldRef.data.Parent;\n        if (parent) {\n            if (!parent.data.Kids) {\n                parent.data.Kids = [];\n            }\n            parent.data.Kids.push(fieldRef);\n        } else {\n            this._root.data.AcroForm.data.Fields.push(fieldRef);\n        }\n        return this;\n    },\n    _fieldDict: function _fieldDict(name, type) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        if (!this._acroform) {\n            throw new Error(\"Call document.initForms() method before adding form elements to document\");\n        }\n        var opts = Object.assign({}, options);\n        if (type !== null) {\n            opts = this._resolveType(type, options);\n        }\n        opts = this._resolveFlags(opts);\n        opts = this._resolveJustify(opts);\n        opts = this._resolveFont(opts);\n        opts = this._resolveStrings(opts);\n        opts = this._resolveColors(opts);\n        opts = this._resolveFormat(opts);\n        opts.T = new String(name);\n        if (opts.parent) {\n            opts.Parent = opts.parent;\n            delete opts.parent;\n        }\n        return opts;\n    },\n    _resolveType: function _resolveType(type, opts) {\n        if (type === \"text\") {\n            opts.FT = \"Tx\";\n        } else if (type === \"pushButton\") {\n            opts.FT = \"Btn\";\n            opts.pushButton = true;\n        } else if (type === \"radioButton\") {\n            opts.FT = \"Btn\";\n            opts.radioButton = true;\n        } else if (type === \"checkbox\") {\n            opts.FT = \"Btn\";\n        } else if (type === \"combo\") {\n            opts.FT = \"Ch\";\n            opts.combo = true;\n        } else if (type === \"list\") {\n            opts.FT = \"Ch\";\n        } else {\n            throw new Error(\"Invalid form annotation type '\".concat(type, \"'\"));\n        }\n        return opts;\n    },\n    _resolveFormat: function _resolveFormat(opts) {\n        var f = opts.format;\n        if (f && f.type) {\n            var fnKeystroke;\n            var fnFormat;\n            var params = \"\";\n            if (FORMAT_SPECIAL[f.type] !== undefined) {\n                fnKeystroke = \"AFSpecial_Keystroke\";\n                fnFormat = \"AFSpecial_Format\";\n                params = FORMAT_SPECIAL[f.type];\n            } else {\n                var format = f.type.charAt(0).toUpperCase() + f.type.slice(1);\n                fnKeystroke = \"AF\".concat(format, \"_Keystroke\");\n                fnFormat = \"AF\".concat(format, \"_Format\");\n                if (f.type === \"date\") {\n                    fnKeystroke += \"Ex\";\n                    params = String(f.param);\n                } else if (f.type === \"time\") {\n                    params = String(f.param);\n                } else if (f.type === \"number\") {\n                    var p = Object.assign({}, FORMAT_DEFAULT.number, f);\n                    params = String([\n                        String(p.nDec),\n                        p.sepComma ? \"0\" : \"1\",\n                        '\"' + p.negStyle + '\"',\n                        \"null\",\n                        '\"' + p.currency + '\"',\n                        String(p.currencyPrepend)\n                    ].join(\",\"));\n                } else if (f.type === \"percent\") {\n                    var _p = Object.assign({}, FORMAT_DEFAULT.percent, f);\n                    params = String([\n                        String(_p.nDec),\n                        _p.sepComma ? \"0\" : \"1\"\n                    ].join(\",\"));\n                }\n            }\n            opts.AA = opts.AA ? opts.AA : {};\n            opts.AA.K = {\n                S: \"JavaScript\",\n                JS: new String(\"\".concat(fnKeystroke, \"(\").concat(params, \");\"))\n            };\n            opts.AA.F = {\n                S: \"JavaScript\",\n                JS: new String(\"\".concat(fnFormat, \"(\").concat(params, \");\"))\n            };\n        }\n        delete opts.format;\n        return opts;\n    },\n    _resolveColors: function _resolveColors(opts) {\n        var color = this._normalizeColor(opts.backgroundColor);\n        if (color) {\n            if (!opts.MK) {\n                opts.MK = {};\n            }\n            opts.MK.BG = color;\n        }\n        color = this._normalizeColor(opts.borderColor);\n        if (color) {\n            if (!opts.MK) {\n                opts.MK = {};\n            }\n            opts.MK.BC = color;\n        }\n        delete opts.backgroundColor;\n        delete opts.borderColor;\n        return opts;\n    },\n    _resolveFlags: function _resolveFlags(options) {\n        var result = 0;\n        Object.keys(options).forEach(function(key) {\n            if (FIELD_FLAGS[key]) {\n                result |= FIELD_FLAGS[key];\n                delete options[key];\n            }\n        });\n        if (result !== 0) {\n            options.Ff = options.Ff ? options.Ff : 0;\n            options.Ff |= result;\n        }\n        return options;\n    },\n    _resolveJustify: function _resolveJustify(options) {\n        var result = 0;\n        if (options.align !== undefined) {\n            if (typeof FIELD_JUSTIFY[options.align] === \"number\") {\n                result = FIELD_JUSTIFY[options.align];\n            }\n            delete options.align;\n        }\n        if (result !== 0) {\n            options.Q = result; // default\n        }\n        return options;\n    },\n    _resolveFont: function _resolveFont(options) {\n        // add current font to document-level AcroForm dict if necessary\n        if (this._acroform.fonts[this._font.id] === null) {\n            this._acroform.fonts[this._font.id] = this._font.ref();\n        } // add current font to field's resource dict (RD) if not the default acroform font\n        if (this._acroform.defaultFont !== this._font.name) {\n            options.DR = {\n                Font: {}\n            }; // Get the fontSize option. If not set use auto sizing\n            var fontSize = options.fontSize || 0;\n            options.DR.Font[this._font.id] = this._font.ref();\n            options.DA = new String(\"/\".concat(this._font.id, \" \").concat(fontSize, \" Tf 0 g\"));\n        }\n        return options;\n    },\n    _resolveStrings: function _resolveStrings(options) {\n        var select = [];\n        function appendChoices(a) {\n            if (Array.isArray(a)) {\n                for(var idx = 0; idx < a.length; idx++){\n                    if (typeof a[idx] === \"string\") {\n                        select.push(new String(a[idx]));\n                    } else {\n                        select.push(a[idx]);\n                    }\n                }\n            }\n        }\n        appendChoices(options.Opt);\n        if (options.select) {\n            appendChoices(options.select);\n            delete options.select;\n        }\n        if (select.length) {\n            options.Opt = select;\n        }\n        Object.keys(VALUE_MAP).forEach(function(key) {\n            if (options[key] !== undefined) {\n                options[VALUE_MAP[key]] = options[key];\n                delete options[key];\n            }\n        });\n        [\n            \"V\",\n            \"DV\"\n        ].forEach(function(key) {\n            if (typeof options[key] === \"string\") {\n                options[key] = new String(options[key]);\n            }\n        });\n        if (options.MK && options.MK.CA) {\n            options.MK.CA = new String(options.MK.CA);\n        }\n        if (options.label) {\n            options.MK = options.MK ? options.MK : {};\n            options.MK.CA = new String(options.label);\n            delete options.label;\n        }\n        return options;\n    }\n};\nvar AttachmentsMixin = {\n    /**\r\n   * Embed contents of `src` in PDF\r\n   * @param {Buffer | ArrayBuffer | string} src input Buffer, ArrayBuffer, base64 encoded string or path to file\r\n   * @param {object} options\r\n   *  * options.name: filename to be shown in PDF, will use `src` if none set\r\n   *  * options.type: filetype to be shown in PDF\r\n   *  * options.description: description to be shown in PDF\r\n   *  * options.hidden: if true, do not add attachment to EmbeddedFiles dictionary. Useful for file attachment annotations\r\n   *  * options.creationDate: override creation date\r\n   *  * options.modifiedDate: override modified date\r\n   * @returns filespec reference\r\n   */ file: function file(src) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        options.name = options.name || src;\n        var refBody = {\n            Type: \"EmbeddedFile\",\n            Params: {}\n        };\n        var data;\n        if (!src) {\n            throw new Error(\"No src specified\");\n        }\n        if (Buffer.isBuffer(src)) {\n            data = src;\n        } else if (src instanceof ArrayBuffer) {\n            data = Buffer.from(new Uint8Array(src));\n        } else {\n            var match;\n            if (match = /^data:(.*);base64,(.*)$/.exec(src)) {\n                if (match[1]) {\n                    refBody.Subtype = match[1].replace(\"/\", \"#2F\");\n                }\n                data = Buffer.from(match[2], \"base64\");\n            } else {\n                data = fs__WEBPACK_IMPORTED_MODULE_1___default().readFileSync(src);\n                if (!data) {\n                    throw new Error(\"Could not read contents of file at filepath \".concat(src));\n                } // update CreationDate and ModDate\n                var _fs$statSync = fs__WEBPACK_IMPORTED_MODULE_1___default().statSync(src), birthtime = _fs$statSync.birthtime, ctime = _fs$statSync.ctime;\n                refBody.Params.CreationDate = birthtime;\n                refBody.Params.ModDate = ctime;\n            }\n        } // override creation date and modified date\n        if (options.creationDate instanceof Date) {\n            refBody.Params.CreationDate = options.creationDate;\n        }\n        if (options.modifiedDate instanceof Date) {\n            refBody.Params.ModDate = options.modifiedDate;\n        } // add optional subtype\n        if (options.type) {\n            refBody.Subtype = options.type.replace(\"/\", \"#2F\");\n        } // add checksum and size information\n        var checksum = crypto_js__WEBPACK_IMPORTED_MODULE_3___default().MD5(crypto_js__WEBPACK_IMPORTED_MODULE_3___default().lib.WordArray.create(new Uint8Array(data)));\n        refBody.Params.CheckSum = new String(checksum);\n        refBody.Params.Size = data.byteLength; // save some space when embedding the same file again\n        // if a file with the same name and metadata exists, reuse its reference\n        var ref;\n        if (!this._fileRegistry) this._fileRegistry = {};\n        var file = this._fileRegistry[options.name];\n        if (file && isEqual(refBody, file)) {\n            ref = file.ref;\n        } else {\n            ref = this.ref(refBody);\n            ref.end(data);\n            this._fileRegistry[options.name] = _objectSpread2(_objectSpread2({}, refBody), {}, {\n                ref: ref\n            });\n        } // add filespec for embedded file\n        var fileSpecBody = {\n            Type: \"Filespec\",\n            F: new String(options.name),\n            EF: {\n                F: ref\n            },\n            UF: new String(options.name)\n        };\n        if (options.description) {\n            fileSpecBody.Desc = new String(options.description);\n        }\n        var filespec = this.ref(fileSpecBody);\n        filespec.end();\n        if (!options.hidden) {\n            this.addNamedEmbeddedFile(options.name, filespec);\n        }\n        return filespec;\n    }\n};\n/** check two embedded file metadata objects for equality */ function isEqual(a, b) {\n    return a.Subtype === b.Subtype && a.Params.CheckSum.toString() === b.Params.CheckSum.toString() && a.Params.Size === b.Params.Size && a.Params.CreationDate === b.Params.CreationDate && a.Params.ModDate === b.Params.ModDate;\n}\nvar PDFDocument = /*#__PURE__*/ function(_stream$Readable) {\n    _inherits(PDFDocument, _stream$Readable);\n    var _super = _createSuper(PDFDocument);\n    function PDFDocument() {\n        var _this;\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        _classCallCheck(this, PDFDocument);\n        _this = _super.call(this, options);\n        _this.options = options; // PDF version\n        switch(options.pdfVersion){\n            case \"1.4\":\n                _this.version = 1.4;\n                break;\n            case \"1.5\":\n                _this.version = 1.5;\n                break;\n            case \"1.6\":\n                _this.version = 1.6;\n                break;\n            case \"1.7\":\n            case \"1.7ext3\":\n                _this.version = 1.7;\n                break;\n            default:\n                _this.version = 1.3;\n                break;\n        } // Whether streams should be compressed\n        _this.compress = _this.options.compress != null ? _this.options.compress : true;\n        _this._pageBuffer = [];\n        _this._pageBufferStart = 0; // The PDF object store\n        _this._offsets = [];\n        _this._waiting = 0;\n        _this._ended = false;\n        _this._offset = 0;\n        var Pages = _this.ref({\n            Type: \"Pages\",\n            Count: 0,\n            Kids: []\n        });\n        var Names = _this.ref({\n            Dests: new PDFNameTree()\n        });\n        _this._root = _this.ref({\n            Type: \"Catalog\",\n            Pages: Pages,\n            Names: Names\n        });\n        if (_this.options.lang) {\n            _this._root.data.Lang = new String(_this.options.lang);\n        } // The current page\n        _this.page = null; // Initialize mixins\n        _this.initColor();\n        _this.initVector();\n        _this.initFonts(options.font);\n        _this.initText();\n        _this.initImages();\n        _this.initOutline();\n        _this.initMarkings(options); // Initialize the metadata\n        _this.info = {\n            Producer: \"PDFKit\",\n            Creator: \"PDFKit\",\n            CreationDate: new Date()\n        };\n        if (_this.options.info) {\n            for(var key in _this.options.info){\n                var val = _this.options.info[key];\n                _this.info[key] = val;\n            }\n        }\n        if (_this.options.displayTitle) {\n            _this._root.data.ViewerPreferences = _this.ref({\n                DisplayDocTitle: true\n            });\n        } // Generate file ID\n        _this._id = PDFSecurity.generateFileID(_this.info); // Initialize security settings\n        _this._security = PDFSecurity.create(_assertThisInitialized(_this), options); // Write the header\n        // PDF version\n        _this._write(\"%PDF-\".concat(_this.version)); // 4 binary chars, as recommended by the spec\n        _this._write(\"%\\xff\\xff\\xff\\xff\"); // Add the first page\n        if (_this.options.autoFirstPage !== false) {\n            _this.addPage();\n        }\n        return _this;\n    }\n    _createClass(PDFDocument, [\n        {\n            key: \"addPage\",\n            value: function addPage(options) {\n                if (options == null) {\n                    options = this.options;\n                } // end the current page if needed\n                if (!this.options.bufferPages) {\n                    this.flushPages();\n                } // create a page object\n                this.page = new PDFPage(this, options);\n                this._pageBuffer.push(this.page); // add the page to the object store\n                var pages = this._root.data.Pages.data;\n                pages.Kids.push(this.page.dictionary);\n                pages.Count++; // reset x and y coordinates\n                this.x = this.page.margins.left;\n                this.y = this.page.margins.top; // flip PDF coordinate system so that the origin is in\n                // the top left rather than the bottom left\n                this._ctm = [\n                    1,\n                    0,\n                    0,\n                    1,\n                    0,\n                    0\n                ];\n                this.transform(1, 0, 0, -1, 0, this.page.height);\n                this.emit(\"pageAdded\");\n                return this;\n            }\n        },\n        {\n            key: \"continueOnNewPage\",\n            value: function continueOnNewPage(options) {\n                var pageMarkings = this.endPageMarkings(this.page);\n                this.addPage(options);\n                this.initPageMarkings(pageMarkings);\n                return this;\n            }\n        },\n        {\n            key: \"bufferedPageRange\",\n            value: function bufferedPageRange() {\n                return {\n                    start: this._pageBufferStart,\n                    count: this._pageBuffer.length\n                };\n            }\n        },\n        {\n            key: \"switchToPage\",\n            value: function switchToPage(n) {\n                var page;\n                if (!(page = this._pageBuffer[n - this._pageBufferStart])) {\n                    throw new Error(\"switchToPage(\".concat(n, \") out of bounds, current buffer covers pages \").concat(this._pageBufferStart, \" to \").concat(this._pageBufferStart + this._pageBuffer.length - 1));\n                }\n                return this.page = page;\n            }\n        },\n        {\n            key: \"flushPages\",\n            value: function flushPages() {\n                // this local variable exists so we're future-proof against\n                // reentrant calls to flushPages.\n                var pages = this._pageBuffer;\n                this._pageBuffer = [];\n                this._pageBufferStart += pages.length;\n                var _iterator = _createForOfIteratorHelper(pages), _step;\n                try {\n                    for(_iterator.s(); !(_step = _iterator.n()).done;){\n                        var page = _step.value;\n                        this.endPageMarkings(page);\n                        page.end();\n                    }\n                } catch (err) {\n                    _iterator.e(err);\n                } finally{\n                    _iterator.f();\n                }\n            }\n        },\n        {\n            key: \"addNamedDestination\",\n            value: function addNamedDestination(name) {\n                for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                    args[_key - 1] = arguments[_key];\n                }\n                if (args.length === 0) {\n                    args = [\n                        \"XYZ\",\n                        null,\n                        null,\n                        null\n                    ];\n                }\n                if (args[0] === \"XYZ\" && args[2] !== null) {\n                    args[2] = this.page.height - args[2];\n                }\n                args.unshift(this.page.dictionary);\n                this._root.data.Names.data.Dests.add(name, args);\n            }\n        },\n        {\n            key: \"addNamedEmbeddedFile\",\n            value: function addNamedEmbeddedFile(name, ref) {\n                if (!this._root.data.Names.data.EmbeddedFiles) {\n                    // disabling /Limits for this tree fixes attachments not showing in Adobe Reader\n                    this._root.data.Names.data.EmbeddedFiles = new PDFNameTree({\n                        limits: false\n                    });\n                } // add filespec to EmbeddedFiles\n                this._root.data.Names.data.EmbeddedFiles.add(name, ref);\n            }\n        },\n        {\n            key: \"addNamedJavaScript\",\n            value: function addNamedJavaScript(name, js) {\n                if (!this._root.data.Names.data.JavaScript) {\n                    this._root.data.Names.data.JavaScript = new PDFNameTree();\n                }\n                var data = {\n                    JS: new String(js),\n                    S: \"JavaScript\"\n                };\n                this._root.data.Names.data.JavaScript.add(name, data);\n            }\n        },\n        {\n            key: \"ref\",\n            value: function ref(data) {\n                var ref = new PDFReference(this, this._offsets.length + 1, data);\n                this._offsets.push(null); // placeholder for this object's offset once it is finalized\n                this._waiting++;\n                return ref;\n            }\n        },\n        {\n            key: \"_read\",\n            value: function _read() {} // do nothing, but this method is required by node\n        },\n        {\n            key: \"_write\",\n            value: function _write(data) {\n                if (!Buffer.isBuffer(data)) {\n                    data = Buffer.from(data + \"\\n\", \"binary\");\n                }\n                this.push(data);\n                return this._offset += data.length;\n            }\n        },\n        {\n            key: \"addContent\",\n            value: function addContent(data) {\n                this.page.write(data);\n                return this;\n            }\n        },\n        {\n            key: \"_refEnd\",\n            value: function _refEnd(ref) {\n                this._offsets[ref.id - 1] = ref.offset;\n                if (--this._waiting === 0 && this._ended) {\n                    this._finalize();\n                    return this._ended = false;\n                }\n            }\n        },\n        {\n            key: \"write\",\n            value: function write(filename, fn) {\n                // print a deprecation warning with a stacktrace\n                var err = new Error(\"PDFDocument#write is deprecated, and will be removed in a future version of PDFKit. Please pipe the document into a Node stream.\");\n                console.warn(err.stack);\n                this.pipe(fs__WEBPACK_IMPORTED_MODULE_1___default().createWriteStream(filename));\n                this.end();\n                return this.once(\"end\", fn);\n            }\n        },\n        {\n            key: \"end\",\n            value: function end() {\n                this.flushPages();\n                this._info = this.ref();\n                for(var key in this.info){\n                    var val = this.info[key];\n                    if (typeof val === \"string\") {\n                        val = new String(val);\n                    }\n                    var entry = this.ref(val);\n                    entry.end();\n                    this._info.data[key] = entry;\n                }\n                this._info.end();\n                for(var name in this._fontFamilies){\n                    var font = this._fontFamilies[name];\n                    font.finalize();\n                }\n                this.endOutline();\n                this.endMarkings();\n                this._root.end();\n                this._root.data.Pages.end();\n                this._root.data.Names.end();\n                this.endAcroForm();\n                if (this._root.data.ViewerPreferences) {\n                    this._root.data.ViewerPreferences.end();\n                }\n                if (this._security) {\n                    this._security.end();\n                }\n                if (this._waiting === 0) {\n                    return this._finalize();\n                } else {\n                    return this._ended = true;\n                }\n            }\n        },\n        {\n            key: \"_finalize\",\n            value: function _finalize() {\n                // generate xref\n                var xRefOffset = this._offset;\n                this._write(\"xref\");\n                this._write(\"0 \".concat(this._offsets.length + 1));\n                this._write(\"0000000000 65535 f \");\n                var _iterator2 = _createForOfIteratorHelper(this._offsets), _step2;\n                try {\n                    for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){\n                        var offset = _step2.value;\n                        offset = \"0000000000\".concat(offset).slice(-10);\n                        this._write(offset + \" 00000 n \");\n                    } // trailer\n                } catch (err) {\n                    _iterator2.e(err);\n                } finally{\n                    _iterator2.f();\n                }\n                var trailer = {\n                    Size: this._offsets.length + 1,\n                    Root: this._root,\n                    Info: this._info,\n                    ID: [\n                        this._id,\n                        this._id\n                    ]\n                };\n                if (this._security) {\n                    trailer.Encrypt = this._security.dictionary;\n                }\n                this._write(\"trailer\");\n                this._write(PDFObject.convert(trailer));\n                this._write(\"startxref\");\n                this._write(\"\".concat(xRefOffset));\n                this._write(\"%%EOF\"); // end the stream\n                return this.push(null);\n            }\n        },\n        {\n            key: \"toString\",\n            value: function toString() {\n                return \"[object PDFDocument]\";\n            }\n        }\n    ]);\n    return PDFDocument;\n}((stream__WEBPACK_IMPORTED_MODULE_0___default().Readable));\nvar mixin = function mixin(methods) {\n    Object.assign(PDFDocument.prototype, methods);\n};\nmixin(ColorMixin);\nmixin(VectorMixin);\nmixin(FontsMixin);\nmixin(TextMixin);\nmixin(ImagesMixin);\nmixin(AnnotationsMixin);\nmixin(OutlineMixin);\nmixin(MarkingsMixin);\nmixin(AcroFormMixin);\nmixin(AttachmentsMixin);\nPDFDocument.LineWrapper = LineWrapper;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PDFDocument); //# sourceMappingURL=pdfkit.es5.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pdfkit/js/pdfkit.es5.js\n");

/***/ })

};
;