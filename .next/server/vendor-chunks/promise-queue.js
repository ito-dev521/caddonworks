/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/promise-queue";
exports.ids = ["vendor-chunks/promise-queue"];
exports.modules = {

/***/ "(rsc)/./node_modules/promise-queue/index.js":
/*!*********************************************!*\
  !*** ./node_modules/promise-queue/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = process.env.PROMISE_QUEUE_COVERAGE ? __webpack_require__(/*! ./lib-cov */ \"(rsc)/./node_modules/promise-queue/lib-cov/index.js\") : __webpack_require__(/*! ./lib */ \"(rsc)/./node_modules/promise-queue/lib/index.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcHJvbWlzZS1xdWV1ZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQUEsT0FBT0MsT0FBTyxHQUFHQyxRQUFRQyxHQUFHLENBQUNDLHNCQUFzQixHQUMvQ0MsbUJBQU9BLENBQUMsMEVBQ1JBLG1CQUFPQSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2l2aWwtZW5naW5lZXJpbmctcGxhdGZvcm0vLi9ub2RlX21vZHVsZXMvcHJvbWlzZS1xdWV1ZS9pbmRleC5qcz81MzVmIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcHJvY2Vzcy5lbnYuUFJPTUlTRV9RVUVVRV9DT1ZFUkFHRSA/XG4gICAgcmVxdWlyZSgnLi9saWItY292JykgOlxuICAgIHJlcXVpcmUoJy4vbGliJyk7XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInByb2Nlc3MiLCJlbnYiLCJQUk9NSVNFX1FVRVVFX0NPVkVSQUdFIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/promise-queue/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/promise-queue/lib-cov/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/promise-queue/lib-cov/index.js ***!
  \*****************************************************/
/***/ (() => {

eval("//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIocnNjKS8uL25vZGVfbW9kdWxlcy9wcm9taXNlLXF1ZXVlL2xpYi1jb3YvaW5kZXguanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/promise-queue/lib-cov/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/promise-queue/lib/index.js":
/*!*************************************************!*\
  !*** ./node_modules/promise-queue/lib/index.js ***!
  \*************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/* global define, Promise */ (function(root, factory) {\n    \"use strict\";\n    if ( true && module.exports && \"function\" === \"function\") {\n        // CommonJS\n        module.exports = factory();\n    } else if (true) {\n        // AMD. Register as an anonymous module.\n        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n})(this, function() {\n    \"use strict\";\n    /**\n     * @return {Object}\n     */ var LocalPromise = typeof Promise !== \"undefined\" ? Promise : function() {\n        return {\n            then: function() {\n                throw new Error(\"Queue.configure() before use Queue\");\n            }\n        };\n    };\n    var noop = function() {};\n    /**\n     * @param {*} value\n     * @returns {LocalPromise}\n     */ var resolveWith = function(value) {\n        if (value && typeof value.then === \"function\") {\n            return value;\n        }\n        return new LocalPromise(function(resolve) {\n            resolve(value);\n        });\n    };\n    /**\n     * It limits concurrently executed promises\n     *\n     * @param {Number} [maxPendingPromises=Infinity] max number of concurrently executed promises\n     * @param {Number} [maxQueuedPromises=Infinity]  max number of queued promises\n     * @constructor\n     *\n     * @example\n     *\n     * var queue = new Queue(1);\n     *\n     * queue.add(function () {\n     *     // resolve of this promise will resume next request\n     *     return downloadTarballFromGithub(url, file);\n     * })\n     * .then(function (file) {\n     *     doStuffWith(file);\n     * });\n     *\n     * queue.add(function () {\n     *     return downloadTarballFromGithub(url, file);\n     * })\n     * // This request will be paused\n     * .then(function (file) {\n     *     doStuffWith(file);\n     * });\n     */ function Queue(maxPendingPromises, maxQueuedPromises, options) {\n        this.options = options = options || {};\n        this.pendingPromises = 0;\n        this.maxPendingPromises = typeof maxPendingPromises !== \"undefined\" ? maxPendingPromises : Infinity;\n        this.maxQueuedPromises = typeof maxQueuedPromises !== \"undefined\" ? maxQueuedPromises : Infinity;\n        this.queue = [];\n    }\n    /**\n     * Defines promise promiseFactory\n     * @param {Function} GlobalPromise\n     */ Queue.configure = function(GlobalPromise) {\n        LocalPromise = GlobalPromise;\n    };\n    /**\n     * @param {Function} promiseGenerator\n     * @return {LocalPromise}\n     */ Queue.prototype.add = function(promiseGenerator) {\n        var self = this;\n        return new LocalPromise(function(resolve, reject, notify) {\n            // Do not queue to much promises\n            if (self.queue.length >= self.maxQueuedPromises) {\n                reject(new Error(\"Queue limit reached\"));\n                return;\n            }\n            // Add to queue\n            self.queue.push({\n                promiseGenerator: promiseGenerator,\n                resolve: resolve,\n                reject: reject,\n                notify: notify || noop\n            });\n            self._dequeue();\n        });\n    };\n    /**\n     * Number of simultaneously running promises (which are resolving)\n     *\n     * @return {number}\n     */ Queue.prototype.getPendingLength = function() {\n        return this.pendingPromises;\n    };\n    /**\n     * Number of queued promises (which are waiting)\n     *\n     * @return {number}\n     */ Queue.prototype.getQueueLength = function() {\n        return this.queue.length;\n    };\n    /**\n     * @returns {boolean} true if first item removed from queue\n     * @private\n     */ Queue.prototype._dequeue = function() {\n        var self = this;\n        if (this.pendingPromises >= this.maxPendingPromises) {\n            return false;\n        }\n        // Remove from queue\n        var item = this.queue.shift();\n        if (!item) {\n            if (this.options.onEmpty) {\n                this.options.onEmpty();\n            }\n            return false;\n        }\n        try {\n            this.pendingPromises++;\n            resolveWith(item.promiseGenerator())// Forward all stuff\n            .then(function(value) {\n                // It is not pending now\n                self.pendingPromises--;\n                // It should pass values\n                item.resolve(value);\n                self._dequeue();\n            }, function(err) {\n                // It is not pending now\n                self.pendingPromises--;\n                // It should not mask errors\n                item.reject(err);\n                self._dequeue();\n            }, function(message) {\n                // It should pass notifications\n                item.notify(message);\n            });\n        } catch (err) {\n            self.pendingPromises--;\n            item.reject(err);\n            self._dequeue();\n        }\n        return true;\n    };\n    return Queue;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/promise-queue/lib/index.js\n");

/***/ })

};
;