"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ast-types";
exports.ids = ["vendor-chunks/ast-types"];
exports.modules = {

/***/ "(rsc)/./node_modules/ast-types/def/babel-core.js":
/*!**************************************************!*\
  !*** ./node_modules/ast-types/def/babel-core.js ***!
  \**************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nvar types_1 = tslib_1.__importDefault(__webpack_require__(/*! ../lib/types */ \"(rsc)/./node_modules/ast-types/lib/types.js\"));\nvar shared_1 = tslib_1.__importDefault(__webpack_require__(/*! ../lib/shared */ \"(rsc)/./node_modules/ast-types/lib/shared.js\"));\nvar es7_1 = tslib_1.__importDefault(__webpack_require__(/*! ./es7 */ \"(rsc)/./node_modules/ast-types/def/es7.js\"));\nfunction default_1(fork) {\n    fork.use(es7_1.default);\n    var types = fork.use(types_1.default);\n    var defaults = fork.use(shared_1.default).defaults;\n    var def = types.Type.def;\n    var or = types.Type.or;\n    def(\"Noop\").bases(\"Statement\").build();\n    def(\"DoExpression\").bases(\"Expression\").build(\"body\").field(\"body\", [\n        def(\"Statement\")\n    ]);\n    def(\"Super\").bases(\"Expression\").build();\n    def(\"BindExpression\").bases(\"Expression\").build(\"object\", \"callee\").field(\"object\", or(def(\"Expression\"), null)).field(\"callee\", def(\"Expression\"));\n    def(\"Decorator\").bases(\"Node\").build(\"expression\").field(\"expression\", def(\"Expression\"));\n    def(\"Property\").field(\"decorators\", or([\n        def(\"Decorator\")\n    ], null), defaults[\"null\"]);\n    def(\"MethodDefinition\").field(\"decorators\", or([\n        def(\"Decorator\")\n    ], null), defaults[\"null\"]);\n    def(\"MetaProperty\").bases(\"Expression\").build(\"meta\", \"property\").field(\"meta\", def(\"Identifier\")).field(\"property\", def(\"Identifier\"));\n    def(\"ParenthesizedExpression\").bases(\"Expression\").build(\"expression\").field(\"expression\", def(\"Expression\"));\n    def(\"ImportSpecifier\").bases(\"ModuleSpecifier\").build(\"imported\", \"local\").field(\"imported\", def(\"Identifier\"));\n    def(\"ImportDefaultSpecifier\").bases(\"ModuleSpecifier\").build(\"local\");\n    def(\"ImportNamespaceSpecifier\").bases(\"ModuleSpecifier\").build(\"local\");\n    def(\"ExportDefaultDeclaration\").bases(\"Declaration\").build(\"declaration\").field(\"declaration\", or(def(\"Declaration\"), def(\"Expression\")));\n    def(\"ExportNamedDeclaration\").bases(\"Declaration\").build(\"declaration\", \"specifiers\", \"source\").field(\"declaration\", or(def(\"Declaration\"), null)).field(\"specifiers\", [\n        def(\"ExportSpecifier\")\n    ], defaults.emptyArray).field(\"source\", or(def(\"Literal\"), null), defaults[\"null\"]);\n    def(\"ExportSpecifier\").bases(\"ModuleSpecifier\").build(\"local\", \"exported\").field(\"exported\", def(\"Identifier\"));\n    def(\"ExportNamespaceSpecifier\").bases(\"Specifier\").build(\"exported\").field(\"exported\", def(\"Identifier\"));\n    def(\"ExportDefaultSpecifier\").bases(\"Specifier\").build(\"exported\").field(\"exported\", def(\"Identifier\"));\n    def(\"ExportAllDeclaration\").bases(\"Declaration\").build(\"exported\", \"source\").field(\"exported\", or(def(\"Identifier\"), null)).field(\"source\", def(\"Literal\"));\n    def(\"CommentBlock\").bases(\"Comment\").build(\"value\", /*optional:*/ \"leading\", \"trailing\");\n    def(\"CommentLine\").bases(\"Comment\").build(\"value\", /*optional:*/ \"leading\", \"trailing\");\n    def(\"Directive\").bases(\"Node\").build(\"value\").field(\"value\", def(\"DirectiveLiteral\"));\n    def(\"DirectiveLiteral\").bases(\"Node\", \"Expression\").build(\"value\").field(\"value\", String, defaults[\"use strict\"]);\n    def(\"InterpreterDirective\").bases(\"Node\").build(\"value\").field(\"value\", String);\n    def(\"BlockStatement\").bases(\"Statement\").build(\"body\").field(\"body\", [\n        def(\"Statement\")\n    ]).field(\"directives\", [\n        def(\"Directive\")\n    ], defaults.emptyArray);\n    def(\"Program\").bases(\"Node\").build(\"body\").field(\"body\", [\n        def(\"Statement\")\n    ]).field(\"directives\", [\n        def(\"Directive\")\n    ], defaults.emptyArray).field(\"interpreter\", or(def(\"InterpreterDirective\"), null), defaults[\"null\"]);\n    // Split Literal\n    def(\"StringLiteral\").bases(\"Literal\").build(\"value\").field(\"value\", String);\n    def(\"NumericLiteral\").bases(\"Literal\").build(\"value\").field(\"value\", Number).field(\"raw\", or(String, null), defaults[\"null\"]).field(\"extra\", {\n        rawValue: Number,\n        raw: String\n    }, function getDefault() {\n        return {\n            rawValue: this.value,\n            raw: this.value + \"\"\n        };\n    });\n    def(\"BigIntLiteral\").bases(\"Literal\").build(\"value\")// Only String really seems appropriate here, since BigInt values\n    // often exceed the limits of JS numbers.\n    .field(\"value\", or(String, Number)).field(\"extra\", {\n        rawValue: String,\n        raw: String\n    }, function getDefault() {\n        return {\n            rawValue: String(this.value),\n            raw: this.value + \"n\"\n        };\n    });\n    def(\"NullLiteral\").bases(\"Literal\").build().field(\"value\", null, defaults[\"null\"]);\n    def(\"BooleanLiteral\").bases(\"Literal\").build(\"value\").field(\"value\", Boolean);\n    def(\"RegExpLiteral\").bases(\"Literal\").build(\"pattern\", \"flags\").field(\"pattern\", String).field(\"flags\", String).field(\"value\", RegExp, function() {\n        return new RegExp(this.pattern, this.flags);\n    });\n    var ObjectExpressionProperty = or(def(\"Property\"), def(\"ObjectMethod\"), def(\"ObjectProperty\"), def(\"SpreadProperty\"), def(\"SpreadElement\"));\n    // Split Property -> ObjectProperty and ObjectMethod\n    def(\"ObjectExpression\").bases(\"Expression\").build(\"properties\").field(\"properties\", [\n        ObjectExpressionProperty\n    ]);\n    // ObjectMethod hoist .value properties to own properties\n    def(\"ObjectMethod\").bases(\"Node\", \"Function\").build(\"kind\", \"key\", \"params\", \"body\", \"computed\").field(\"kind\", or(\"method\", \"get\", \"set\")).field(\"key\", or(def(\"Literal\"), def(\"Identifier\"), def(\"Expression\"))).field(\"params\", [\n        def(\"Pattern\")\n    ]).field(\"body\", def(\"BlockStatement\")).field(\"computed\", Boolean, defaults[\"false\"]).field(\"generator\", Boolean, defaults[\"false\"]).field(\"async\", Boolean, defaults[\"false\"]).field(\"accessibility\", or(def(\"Literal\"), null), defaults[\"null\"]).field(\"decorators\", or([\n        def(\"Decorator\")\n    ], null), defaults[\"null\"]);\n    def(\"ObjectProperty\").bases(\"Node\").build(\"key\", \"value\").field(\"key\", or(def(\"Literal\"), def(\"Identifier\"), def(\"Expression\"))).field(\"value\", or(def(\"Expression\"), def(\"Pattern\"))).field(\"accessibility\", or(def(\"Literal\"), null), defaults[\"null\"]).field(\"computed\", Boolean, defaults[\"false\"]);\n    var ClassBodyElement = or(def(\"MethodDefinition\"), def(\"VariableDeclarator\"), def(\"ClassPropertyDefinition\"), def(\"ClassProperty\"), def(\"ClassPrivateProperty\"), def(\"ClassMethod\"), def(\"ClassPrivateMethod\"));\n    // MethodDefinition -> ClassMethod\n    def(\"ClassBody\").bases(\"Declaration\").build(\"body\").field(\"body\", [\n        ClassBodyElement\n    ]);\n    def(\"ClassMethod\").bases(\"Declaration\", \"Function\").build(\"kind\", \"key\", \"params\", \"body\", \"computed\", \"static\").field(\"key\", or(def(\"Literal\"), def(\"Identifier\"), def(\"Expression\")));\n    def(\"ClassPrivateMethod\").bases(\"Declaration\", \"Function\").build(\"key\", \"params\", \"body\", \"kind\", \"computed\", \"static\").field(\"key\", def(\"PrivateName\"));\n    [\n        \"ClassMethod\",\n        \"ClassPrivateMethod\"\n    ].forEach(function(typeName) {\n        def(typeName).field(\"kind\", or(\"get\", \"set\", \"method\", \"constructor\"), function() {\n            return \"method\";\n        }).field(\"body\", def(\"BlockStatement\")).field(\"computed\", Boolean, defaults[\"false\"]).field(\"static\", or(Boolean, null), defaults[\"null\"]).field(\"abstract\", or(Boolean, null), defaults[\"null\"]).field(\"access\", or(\"public\", \"private\", \"protected\", null), defaults[\"null\"]).field(\"accessibility\", or(\"public\", \"private\", \"protected\", null), defaults[\"null\"]).field(\"decorators\", or([\n            def(\"Decorator\")\n        ], null), defaults[\"null\"]).field(\"optional\", or(Boolean, null), defaults[\"null\"]);\n    });\n    def(\"ClassPrivateProperty\").bases(\"ClassProperty\").build(\"key\", \"value\").field(\"key\", def(\"PrivateName\")).field(\"value\", or(def(\"Expression\"), null), defaults[\"null\"]);\n    def(\"PrivateName\").bases(\"Expression\", \"Pattern\").build(\"id\").field(\"id\", def(\"Identifier\"));\n    var ObjectPatternProperty = or(def(\"Property\"), def(\"PropertyPattern\"), def(\"SpreadPropertyPattern\"), def(\"SpreadProperty\"), def(\"ObjectProperty\"), def(\"RestProperty\") // Babel 6\n    );\n    // Split into RestProperty and SpreadProperty\n    def(\"ObjectPattern\").bases(\"Pattern\").build(\"properties\").field(\"properties\", [\n        ObjectPatternProperty\n    ]).field(\"decorators\", or([\n        def(\"Decorator\")\n    ], null), defaults[\"null\"]);\n    def(\"SpreadProperty\").bases(\"Node\").build(\"argument\").field(\"argument\", def(\"Expression\"));\n    def(\"RestProperty\").bases(\"Node\").build(\"argument\").field(\"argument\", def(\"Expression\"));\n    def(\"ForAwaitStatement\").bases(\"Statement\").build(\"left\", \"right\", \"body\").field(\"left\", or(def(\"VariableDeclaration\"), def(\"Expression\"))).field(\"right\", def(\"Expression\")).field(\"body\", def(\"Statement\"));\n    // The callee node of a dynamic import(...) expression.\n    def(\"Import\").bases(\"Expression\").build();\n}\nexports[\"default\"] = default_1;\nmodule.exports = exports[\"default\"];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ast-types/def/babel-core.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ast-types/def/babel.js":
/*!*********************************************!*\
  !*** ./node_modules/ast-types/def/babel.js ***!
  \*********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nvar babel_core_1 = tslib_1.__importDefault(__webpack_require__(/*! ./babel-core */ \"(rsc)/./node_modules/ast-types/def/babel-core.js\"));\nvar flow_1 = tslib_1.__importDefault(__webpack_require__(/*! ./flow */ \"(rsc)/./node_modules/ast-types/def/flow.js\"));\nfunction default_1(fork) {\n    fork.use(babel_core_1.default);\n    fork.use(flow_1.default);\n}\nexports[\"default\"] = default_1;\nmodule.exports = exports[\"default\"];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYXN0LXR5cGVzL2RlZi9iYWJlbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsSUFBSUMsVUFBVUMsbUJBQU9BLENBQUMsdURBQU87QUFDN0IsSUFBSUMsZUFBZUYsUUFBUUcsZUFBZSxDQUFDRixtQkFBT0EsQ0FBQyxzRUFBYztBQUNqRSxJQUFJRyxTQUFTSixRQUFRRyxlQUFlLENBQUNGLG1CQUFPQSxDQUFDLDBEQUFRO0FBQ3JELFNBQVNJLFVBQVVDLElBQUk7SUFDbkJBLEtBQUtDLEdBQUcsQ0FBQ0wsYUFBYU0sT0FBTztJQUM3QkYsS0FBS0MsR0FBRyxDQUFDSCxPQUFPSSxPQUFPO0FBQzNCO0FBQ0FWLGtCQUFlLEdBQUdPO0FBQ2xCSSxPQUFPWCxPQUFPLEdBQUdBLE9BQU8sQ0FBQyxVQUFVIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2l2aWwtZW5naW5lZXJpbmctcGxhdGZvcm0vLi9ub2RlX21vZHVsZXMvYXN0LXR5cGVzL2RlZi9iYWJlbC5qcz81ZGY4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiOztcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xudmFyIGJhYmVsX2NvcmVfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2JhYmVsLWNvcmVcIikpO1xudmFyIGZsb3dfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2Zsb3dcIikpO1xuZnVuY3Rpb24gZGVmYXVsdF8xKGZvcmspIHtcbiAgICBmb3JrLnVzZShiYWJlbF9jb3JlXzEuZGVmYXVsdCk7XG4gICAgZm9yay51c2UoZmxvd18xLmRlZmF1bHQpO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gZGVmYXVsdF8xO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRzbGliXzEiLCJyZXF1aXJlIiwiYmFiZWxfY29yZV8xIiwiX19pbXBvcnREZWZhdWx0IiwiZmxvd18xIiwiZGVmYXVsdF8xIiwiZm9yayIsInVzZSIsImRlZmF1bHQiLCJtb2R1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ast-types/def/babel.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ast-types/def/core.js":
/*!********************************************!*\
  !*** ./node_modules/ast-types/def/core.js ***!
  \********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nvar types_1 = tslib_1.__importDefault(__webpack_require__(/*! ../lib/types */ \"(rsc)/./node_modules/ast-types/lib/types.js\"));\nvar shared_1 = tslib_1.__importDefault(__webpack_require__(/*! ../lib/shared */ \"(rsc)/./node_modules/ast-types/lib/shared.js\"));\nfunction default_1(fork) {\n    var types = fork.use(types_1.default);\n    var Type = types.Type;\n    var def = Type.def;\n    var or = Type.or;\n    var shared = fork.use(shared_1.default);\n    var defaults = shared.defaults;\n    var geq = shared.geq;\n    // Abstract supertype of all syntactic entities that are allowed to have a\n    // .loc field.\n    def(\"Printable\").field(\"loc\", or(def(\"SourceLocation\"), null), defaults[\"null\"], true);\n    def(\"Node\").bases(\"Printable\").field(\"type\", String).field(\"comments\", or([\n        def(\"Comment\")\n    ], null), defaults[\"null\"], true);\n    def(\"SourceLocation\").field(\"start\", def(\"Position\")).field(\"end\", def(\"Position\")).field(\"source\", or(String, null), defaults[\"null\"]);\n    def(\"Position\").field(\"line\", geq(1)).field(\"column\", geq(0));\n    def(\"File\").bases(\"Node\").build(\"program\", \"name\").field(\"program\", def(\"Program\")).field(\"name\", or(String, null), defaults[\"null\"]);\n    def(\"Program\").bases(\"Node\").build(\"body\").field(\"body\", [\n        def(\"Statement\")\n    ]);\n    def(\"Function\").bases(\"Node\").field(\"id\", or(def(\"Identifier\"), null), defaults[\"null\"]).field(\"params\", [\n        def(\"Pattern\")\n    ]).field(\"body\", def(\"BlockStatement\")).field(\"generator\", Boolean, defaults[\"false\"]).field(\"async\", Boolean, defaults[\"false\"]);\n    def(\"Statement\").bases(\"Node\");\n    // The empty .build() here means that an EmptyStatement can be constructed\n    // (i.e. it's not abstract) but that it needs no arguments.\n    def(\"EmptyStatement\").bases(\"Statement\").build();\n    def(\"BlockStatement\").bases(\"Statement\").build(\"body\").field(\"body\", [\n        def(\"Statement\")\n    ]);\n    // TODO Figure out how to silently coerce Expressions to\n    // ExpressionStatements where a Statement was expected.\n    def(\"ExpressionStatement\").bases(\"Statement\").build(\"expression\").field(\"expression\", def(\"Expression\"));\n    def(\"IfStatement\").bases(\"Statement\").build(\"test\", \"consequent\", \"alternate\").field(\"test\", def(\"Expression\")).field(\"consequent\", def(\"Statement\")).field(\"alternate\", or(def(\"Statement\"), null), defaults[\"null\"]);\n    def(\"LabeledStatement\").bases(\"Statement\").build(\"label\", \"body\").field(\"label\", def(\"Identifier\")).field(\"body\", def(\"Statement\"));\n    def(\"BreakStatement\").bases(\"Statement\").build(\"label\").field(\"label\", or(def(\"Identifier\"), null), defaults[\"null\"]);\n    def(\"ContinueStatement\").bases(\"Statement\").build(\"label\").field(\"label\", or(def(\"Identifier\"), null), defaults[\"null\"]);\n    def(\"WithStatement\").bases(\"Statement\").build(\"object\", \"body\").field(\"object\", def(\"Expression\")).field(\"body\", def(\"Statement\"));\n    def(\"SwitchStatement\").bases(\"Statement\").build(\"discriminant\", \"cases\", \"lexical\").field(\"discriminant\", def(\"Expression\")).field(\"cases\", [\n        def(\"SwitchCase\")\n    ]).field(\"lexical\", Boolean, defaults[\"false\"]);\n    def(\"ReturnStatement\").bases(\"Statement\").build(\"argument\").field(\"argument\", or(def(\"Expression\"), null));\n    def(\"ThrowStatement\").bases(\"Statement\").build(\"argument\").field(\"argument\", def(\"Expression\"));\n    def(\"TryStatement\").bases(\"Statement\").build(\"block\", \"handler\", \"finalizer\").field(\"block\", def(\"BlockStatement\")).field(\"handler\", or(def(\"CatchClause\"), null), function() {\n        return this.handlers && this.handlers[0] || null;\n    }).field(\"handlers\", [\n        def(\"CatchClause\")\n    ], function() {\n        return this.handler ? [\n            this.handler\n        ] : [];\n    }, true) // Indicates this field is hidden from eachField iteration.\n    .field(\"guardedHandlers\", [\n        def(\"CatchClause\")\n    ], defaults.emptyArray).field(\"finalizer\", or(def(\"BlockStatement\"), null), defaults[\"null\"]);\n    def(\"CatchClause\").bases(\"Node\").build(\"param\", \"guard\", \"body\")// https://github.com/tc39/proposal-optional-catch-binding\n    .field(\"param\", or(def(\"Pattern\"), null), defaults[\"null\"]).field(\"guard\", or(def(\"Expression\"), null), defaults[\"null\"]).field(\"body\", def(\"BlockStatement\"));\n    def(\"WhileStatement\").bases(\"Statement\").build(\"test\", \"body\").field(\"test\", def(\"Expression\")).field(\"body\", def(\"Statement\"));\n    def(\"DoWhileStatement\").bases(\"Statement\").build(\"body\", \"test\").field(\"body\", def(\"Statement\")).field(\"test\", def(\"Expression\"));\n    def(\"ForStatement\").bases(\"Statement\").build(\"init\", \"test\", \"update\", \"body\").field(\"init\", or(def(\"VariableDeclaration\"), def(\"Expression\"), null)).field(\"test\", or(def(\"Expression\"), null)).field(\"update\", or(def(\"Expression\"), null)).field(\"body\", def(\"Statement\"));\n    def(\"ForInStatement\").bases(\"Statement\").build(\"left\", \"right\", \"body\").field(\"left\", or(def(\"VariableDeclaration\"), def(\"Expression\"))).field(\"right\", def(\"Expression\")).field(\"body\", def(\"Statement\"));\n    def(\"DebuggerStatement\").bases(\"Statement\").build();\n    def(\"Declaration\").bases(\"Statement\");\n    def(\"FunctionDeclaration\").bases(\"Function\", \"Declaration\").build(\"id\", \"params\", \"body\").field(\"id\", def(\"Identifier\"));\n    def(\"FunctionExpression\").bases(\"Function\", \"Expression\").build(\"id\", \"params\", \"body\");\n    def(\"VariableDeclaration\").bases(\"Declaration\").build(\"kind\", \"declarations\").field(\"kind\", or(\"var\", \"let\", \"const\")).field(\"declarations\", [\n        def(\"VariableDeclarator\")\n    ]);\n    def(\"VariableDeclarator\").bases(\"Node\").build(\"id\", \"init\").field(\"id\", def(\"Pattern\")).field(\"init\", or(def(\"Expression\"), null), defaults[\"null\"]);\n    def(\"Expression\").bases(\"Node\");\n    def(\"ThisExpression\").bases(\"Expression\").build();\n    def(\"ArrayExpression\").bases(\"Expression\").build(\"elements\").field(\"elements\", [\n        or(def(\"Expression\"), null)\n    ]);\n    def(\"ObjectExpression\").bases(\"Expression\").build(\"properties\").field(\"properties\", [\n        def(\"Property\")\n    ]);\n    // TODO Not in the Mozilla Parser API, but used by Esprima.\n    def(\"Property\").bases(\"Node\") // Want to be able to visit Property Nodes.\n    .build(\"kind\", \"key\", \"value\").field(\"kind\", or(\"init\", \"get\", \"set\")).field(\"key\", or(def(\"Literal\"), def(\"Identifier\"))).field(\"value\", def(\"Expression\"));\n    def(\"SequenceExpression\").bases(\"Expression\").build(\"expressions\").field(\"expressions\", [\n        def(\"Expression\")\n    ]);\n    var UnaryOperator = or(\"-\", \"+\", \"!\", \"~\", \"typeof\", \"void\", \"delete\");\n    def(\"UnaryExpression\").bases(\"Expression\").build(\"operator\", \"argument\", \"prefix\").field(\"operator\", UnaryOperator).field(\"argument\", def(\"Expression\"))// Esprima doesn't bother with this field, presumably because it's\n    // always true for unary operators.\n    .field(\"prefix\", Boolean, defaults[\"true\"]);\n    var BinaryOperator = or(\"==\", \"!=\", \"===\", \"!==\", \"<\", \"<=\", \">\", \">=\", \"<<\", \">>\", \">>>\", \"+\", \"-\", \"*\", \"/\", \"%\", \"**\", \"&\", \"|\", \"^\", \"in\", \"instanceof\");\n    def(\"BinaryExpression\").bases(\"Expression\").build(\"operator\", \"left\", \"right\").field(\"operator\", BinaryOperator).field(\"left\", def(\"Expression\")).field(\"right\", def(\"Expression\"));\n    var AssignmentOperator = or(\"=\", \"+=\", \"-=\", \"*=\", \"/=\", \"%=\", \"<<=\", \">>=\", \">>>=\", \"|=\", \"^=\", \"&=\");\n    def(\"AssignmentExpression\").bases(\"Expression\").build(\"operator\", \"left\", \"right\").field(\"operator\", AssignmentOperator).field(\"left\", or(def(\"Pattern\"), def(\"MemberExpression\"))).field(\"right\", def(\"Expression\"));\n    var UpdateOperator = or(\"++\", \"--\");\n    def(\"UpdateExpression\").bases(\"Expression\").build(\"operator\", \"argument\", \"prefix\").field(\"operator\", UpdateOperator).field(\"argument\", def(\"Expression\")).field(\"prefix\", Boolean);\n    var LogicalOperator = or(\"||\", \"&&\");\n    def(\"LogicalExpression\").bases(\"Expression\").build(\"operator\", \"left\", \"right\").field(\"operator\", LogicalOperator).field(\"left\", def(\"Expression\")).field(\"right\", def(\"Expression\"));\n    def(\"ConditionalExpression\").bases(\"Expression\").build(\"test\", \"consequent\", \"alternate\").field(\"test\", def(\"Expression\")).field(\"consequent\", def(\"Expression\")).field(\"alternate\", def(\"Expression\"));\n    def(\"NewExpression\").bases(\"Expression\").build(\"callee\", \"arguments\").field(\"callee\", def(\"Expression\"))// The Mozilla Parser API gives this type as [or(def(\"Expression\"),\n    // null)], but null values don't really make sense at the call site.\n    // TODO Report this nonsense.\n    .field(\"arguments\", [\n        def(\"Expression\")\n    ]);\n    def(\"CallExpression\").bases(\"Expression\").build(\"callee\", \"arguments\").field(\"callee\", def(\"Expression\"))// See comment for NewExpression above.\n    .field(\"arguments\", [\n        def(\"Expression\")\n    ]);\n    def(\"MemberExpression\").bases(\"Expression\").build(\"object\", \"property\", \"computed\").field(\"object\", def(\"Expression\")).field(\"property\", or(def(\"Identifier\"), def(\"Expression\"))).field(\"computed\", Boolean, function() {\n        var type = this.property.type;\n        if (type === \"Literal\" || type === \"MemberExpression\" || type === \"BinaryExpression\") {\n            return true;\n        }\n        return false;\n    });\n    def(\"Pattern\").bases(\"Node\");\n    def(\"SwitchCase\").bases(\"Node\").build(\"test\", \"consequent\").field(\"test\", or(def(\"Expression\"), null)).field(\"consequent\", [\n        def(\"Statement\")\n    ]);\n    def(\"Identifier\").bases(\"Expression\", \"Pattern\").build(\"name\").field(\"name\", String).field(\"optional\", Boolean, defaults[\"false\"]);\n    def(\"Literal\").bases(\"Expression\").build(\"value\").field(\"value\", or(String, Boolean, null, Number, RegExp)).field(\"regex\", or({\n        pattern: String,\n        flags: String\n    }, null), function() {\n        if (this.value instanceof RegExp) {\n            var flags = \"\";\n            if (this.value.ignoreCase) flags += \"i\";\n            if (this.value.multiline) flags += \"m\";\n            if (this.value.global) flags += \"g\";\n            return {\n                pattern: this.value.source,\n                flags: flags\n            };\n        }\n        return null;\n    });\n    // Abstract (non-buildable) comment supertype. Not a Node.\n    def(\"Comment\").bases(\"Printable\").field(\"value\", String)// A .leading comment comes before the node, whereas a .trailing\n    // comment comes after it. These two fields should not both be true,\n    // but they might both be false when the comment falls inside a node\n    // and the node has no children for the comment to lead or trail,\n    // e.g. { /*dangling*/ }.\n    .field(\"leading\", Boolean, defaults[\"true\"]).field(\"trailing\", Boolean, defaults[\"false\"]);\n}\nexports[\"default\"] = default_1;\nmodule.exports = exports[\"default\"];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ast-types/def/core.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ast-types/def/es-proposals.js":
/*!****************************************************!*\
  !*** ./node_modules/ast-types/def/es-proposals.js ***!
  \****************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nvar types_1 = tslib_1.__importDefault(__webpack_require__(/*! ../lib/types */ \"(rsc)/./node_modules/ast-types/lib/types.js\"));\nvar shared_1 = tslib_1.__importDefault(__webpack_require__(/*! ../lib/shared */ \"(rsc)/./node_modules/ast-types/lib/shared.js\"));\nvar core_1 = tslib_1.__importDefault(__webpack_require__(/*! ./core */ \"(rsc)/./node_modules/ast-types/def/core.js\"));\nfunction default_1(fork) {\n    fork.use(core_1.default);\n    var types = fork.use(types_1.default);\n    var Type = types.Type;\n    var def = types.Type.def;\n    var or = Type.or;\n    var shared = fork.use(shared_1.default);\n    var defaults = shared.defaults;\n    // https://github.com/tc39/proposal-optional-chaining\n    // `a?.b` as per https://github.com/estree/estree/issues/146\n    def(\"OptionalMemberExpression\").bases(\"MemberExpression\").build(\"object\", \"property\", \"computed\", \"optional\").field(\"optional\", Boolean, defaults[\"true\"]);\n    // a?.b()\n    def(\"OptionalCallExpression\").bases(\"CallExpression\").build(\"callee\", \"arguments\", \"optional\").field(\"optional\", Boolean, defaults[\"true\"]);\n    // https://github.com/tc39/proposal-nullish-coalescing\n    // `a ?? b` as per https://github.com/babel/babylon/pull/761/files\n    var LogicalOperator = or(\"||\", \"&&\", \"??\");\n    def(\"LogicalExpression\").field(\"operator\", LogicalOperator);\n}\nexports[\"default\"] = default_1;\nmodule.exports = exports[\"default\"];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYXN0LXR5cGVzL2RlZi9lcy1wcm9wb3NhbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELElBQUlDLFVBQVVDLG1CQUFPQSxDQUFDLHVEQUFPO0FBQzdCLElBQUlDLFVBQVVGLFFBQVFHLGVBQWUsQ0FBQ0YsbUJBQU9BLENBQUMsaUVBQWM7QUFDNUQsSUFBSUcsV0FBV0osUUFBUUcsZUFBZSxDQUFDRixtQkFBT0EsQ0FBQyxtRUFBZTtBQUM5RCxJQUFJSSxTQUFTTCxRQUFRRyxlQUFlLENBQUNGLG1CQUFPQSxDQUFDLDBEQUFRO0FBQ3JELFNBQVNLLFVBQVVDLElBQUk7SUFDbkJBLEtBQUtDLEdBQUcsQ0FBQ0gsT0FBT0ksT0FBTztJQUN2QixJQUFJQyxRQUFRSCxLQUFLQyxHQUFHLENBQUNOLFFBQVFPLE9BQU87SUFDcEMsSUFBSUUsT0FBT0QsTUFBTUMsSUFBSTtJQUNyQixJQUFJQyxNQUFNRixNQUFNQyxJQUFJLENBQUNDLEdBQUc7SUFDeEIsSUFBSUMsS0FBS0YsS0FBS0UsRUFBRTtJQUNoQixJQUFJQyxTQUFTUCxLQUFLQyxHQUFHLENBQUNKLFNBQVNLLE9BQU87SUFDdEMsSUFBSU0sV0FBV0QsT0FBT0MsUUFBUTtJQUM5QixxREFBcUQ7SUFDckQsNERBQTREO0lBQzVESCxJQUFJLDRCQUNDSSxLQUFLLENBQUMsb0JBQ05DLEtBQUssQ0FBQyxVQUFVLFlBQVksWUFBWSxZQUN4Q0MsS0FBSyxDQUFDLFlBQVlDLFNBQVNKLFFBQVEsQ0FBQyxPQUFPO0lBQ2hELFNBQVM7SUFDVEgsSUFBSSwwQkFDQ0ksS0FBSyxDQUFDLGtCQUNOQyxLQUFLLENBQUMsVUFBVSxhQUFhLFlBQzdCQyxLQUFLLENBQUMsWUFBWUMsU0FBU0osUUFBUSxDQUFDLE9BQU87SUFDaEQsc0RBQXNEO0lBQ3RELGtFQUFrRTtJQUNsRSxJQUFJSyxrQkFBa0JQLEdBQUcsTUFBTSxNQUFNO0lBQ3JDRCxJQUFJLHFCQUNDTSxLQUFLLENBQUMsWUFBWUU7QUFDM0I7QUFDQXRCLGtCQUFlLEdBQUdRO0FBQ2xCZSxPQUFPdkIsT0FBTyxHQUFHQSxPQUFPLENBQUMsVUFBVSIsInNvdXJjZXMiOlsid2VicGFjazovL2NpdmlsLWVuZ2luZWVyaW5nLXBsYXRmb3JtLy4vbm9kZV9tb2R1bGVzL2FzdC10eXBlcy9kZWYvZXMtcHJvcG9zYWxzLmpzP2UyMWUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG52YXIgdHlwZXNfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9saWIvdHlwZXNcIikpO1xudmFyIHNoYXJlZF8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL2xpYi9zaGFyZWRcIikpO1xudmFyIGNvcmVfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2NvcmVcIikpO1xuZnVuY3Rpb24gZGVmYXVsdF8xKGZvcmspIHtcbiAgICBmb3JrLnVzZShjb3JlXzEuZGVmYXVsdCk7XG4gICAgdmFyIHR5cGVzID0gZm9yay51c2UodHlwZXNfMS5kZWZhdWx0KTtcbiAgICB2YXIgVHlwZSA9IHR5cGVzLlR5cGU7XG4gICAgdmFyIGRlZiA9IHR5cGVzLlR5cGUuZGVmO1xuICAgIHZhciBvciA9IFR5cGUub3I7XG4gICAgdmFyIHNoYXJlZCA9IGZvcmsudXNlKHNoYXJlZF8xLmRlZmF1bHQpO1xuICAgIHZhciBkZWZhdWx0cyA9IHNoYXJlZC5kZWZhdWx0cztcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vcHRpb25hbC1jaGFpbmluZ1xuICAgIC8vIGBhPy5iYCBhcyBwZXIgaHR0cHM6Ly9naXRodWIuY29tL2VzdHJlZS9lc3RyZWUvaXNzdWVzLzE0NlxuICAgIGRlZihcIk9wdGlvbmFsTWVtYmVyRXhwcmVzc2lvblwiKVxuICAgICAgICAuYmFzZXMoXCJNZW1iZXJFeHByZXNzaW9uXCIpXG4gICAgICAgIC5idWlsZChcIm9iamVjdFwiLCBcInByb3BlcnR5XCIsIFwiY29tcHV0ZWRcIiwgXCJvcHRpb25hbFwiKVxuICAgICAgICAuZmllbGQoXCJvcHRpb25hbFwiLCBCb29sZWFuLCBkZWZhdWx0c1tcInRydWVcIl0pO1xuICAgIC8vIGE/LmIoKVxuICAgIGRlZihcIk9wdGlvbmFsQ2FsbEV4cHJlc3Npb25cIilcbiAgICAgICAgLmJhc2VzKFwiQ2FsbEV4cHJlc3Npb25cIilcbiAgICAgICAgLmJ1aWxkKFwiY2FsbGVlXCIsIFwiYXJndW1lbnRzXCIsIFwib3B0aW9uYWxcIilcbiAgICAgICAgLmZpZWxkKFwib3B0aW9uYWxcIiwgQm9vbGVhbiwgZGVmYXVsdHNbXCJ0cnVlXCJdKTtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1udWxsaXNoLWNvYWxlc2NpbmdcbiAgICAvLyBgYSA/PyBiYCBhcyBwZXIgaHR0cHM6Ly9naXRodWIuY29tL2JhYmVsL2JhYnlsb24vcHVsbC83NjEvZmlsZXNcbiAgICB2YXIgTG9naWNhbE9wZXJhdG9yID0gb3IoXCJ8fFwiLCBcIiYmXCIsIFwiPz9cIik7XG4gICAgZGVmKFwiTG9naWNhbEV4cHJlc3Npb25cIilcbiAgICAgICAgLmZpZWxkKFwib3BlcmF0b3JcIiwgTG9naWNhbE9wZXJhdG9yKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGRlZmF1bHRfMTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ0c2xpYl8xIiwicmVxdWlyZSIsInR5cGVzXzEiLCJfX2ltcG9ydERlZmF1bHQiLCJzaGFyZWRfMSIsImNvcmVfMSIsImRlZmF1bHRfMSIsImZvcmsiLCJ1c2UiLCJkZWZhdWx0IiwidHlwZXMiLCJUeXBlIiwiZGVmIiwib3IiLCJzaGFyZWQiLCJkZWZhdWx0cyIsImJhc2VzIiwiYnVpbGQiLCJmaWVsZCIsIkJvb2xlYW4iLCJMb2dpY2FsT3BlcmF0b3IiLCJtb2R1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ast-types/def/es-proposals.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ast-types/def/es2020.js":
/*!**********************************************!*\
  !*** ./node_modules/ast-types/def/es2020.js ***!
  \**********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nvar es7_1 = tslib_1.__importDefault(__webpack_require__(/*! ./es7 */ \"(rsc)/./node_modules/ast-types/def/es7.js\"));\nvar types_1 = tslib_1.__importDefault(__webpack_require__(/*! ../lib/types */ \"(rsc)/./node_modules/ast-types/lib/types.js\"));\nfunction default_1(fork) {\n    fork.use(es7_1.default);\n    var types = fork.use(types_1.default);\n    var def = types.Type.def;\n    def(\"ImportExpression\").bases(\"Expression\").build(\"source\").field(\"source\", def(\"Expression\"));\n}\nexports[\"default\"] = default_1;\nmodule.exports = exports[\"default\"];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYXN0LXR5cGVzL2RlZi9lczIwMjAuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELElBQUlDLFVBQVVDLG1CQUFPQSxDQUFDLHVEQUFPO0FBQzdCLElBQUlDLFFBQVFGLFFBQVFHLGVBQWUsQ0FBQ0YsbUJBQU9BLENBQUMsd0RBQU87QUFDbkQsSUFBSUcsVUFBVUosUUFBUUcsZUFBZSxDQUFDRixtQkFBT0EsQ0FBQyxpRUFBYztBQUM1RCxTQUFTSSxVQUFVQyxJQUFJO0lBQ25CQSxLQUFLQyxHQUFHLENBQUNMLE1BQU1NLE9BQU87SUFDdEIsSUFBSUMsUUFBUUgsS0FBS0MsR0FBRyxDQUFDSCxRQUFRSSxPQUFPO0lBQ3BDLElBQUlFLE1BQU1ELE1BQU1FLElBQUksQ0FBQ0QsR0FBRztJQUN4QkEsSUFBSSxvQkFDQ0UsS0FBSyxDQUFDLGNBQ05DLEtBQUssQ0FBQyxVQUNOQyxLQUFLLENBQUMsVUFBVUosSUFBSTtBQUM3QjtBQUNBWixrQkFBZSxHQUFHTztBQUNsQlUsT0FBT2pCLE9BQU8sR0FBR0EsT0FBTyxDQUFDLFVBQVUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaXZpbC1lbmdpbmVlcmluZy1wbGF0Zm9ybS8uL25vZGVfbW9kdWxlcy9hc3QtdHlwZXMvZGVmL2VzMjAyMC5qcz82NDBhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiOztcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xudmFyIGVzN18xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vZXM3XCIpKTtcbnZhciB0eXBlc18xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL2xpYi90eXBlc1wiKSk7XG5mdW5jdGlvbiBkZWZhdWx0XzEoZm9yaykge1xuICAgIGZvcmsudXNlKGVzN18xLmRlZmF1bHQpO1xuICAgIHZhciB0eXBlcyA9IGZvcmsudXNlKHR5cGVzXzEuZGVmYXVsdCk7XG4gICAgdmFyIGRlZiA9IHR5cGVzLlR5cGUuZGVmO1xuICAgIGRlZihcIkltcG9ydEV4cHJlc3Npb25cIilcbiAgICAgICAgLmJhc2VzKFwiRXhwcmVzc2lvblwiKVxuICAgICAgICAuYnVpbGQoXCJzb3VyY2VcIilcbiAgICAgICAgLmZpZWxkKFwic291cmNlXCIsIGRlZihcIkV4cHJlc3Npb25cIikpO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gZGVmYXVsdF8xO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRzbGliXzEiLCJyZXF1aXJlIiwiZXM3XzEiLCJfX2ltcG9ydERlZmF1bHQiLCJ0eXBlc18xIiwiZGVmYXVsdF8xIiwiZm9yayIsInVzZSIsImRlZmF1bHQiLCJ0eXBlcyIsImRlZiIsIlR5cGUiLCJiYXNlcyIsImJ1aWxkIiwiZmllbGQiLCJtb2R1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ast-types/def/es2020.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ast-types/def/es6.js":
/*!*******************************************!*\
  !*** ./node_modules/ast-types/def/es6.js ***!
  \*******************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nvar core_1 = tslib_1.__importDefault(__webpack_require__(/*! ./core */ \"(rsc)/./node_modules/ast-types/def/core.js\"));\nvar types_1 = tslib_1.__importDefault(__webpack_require__(/*! ../lib/types */ \"(rsc)/./node_modules/ast-types/lib/types.js\"));\nvar shared_1 = tslib_1.__importDefault(__webpack_require__(/*! ../lib/shared */ \"(rsc)/./node_modules/ast-types/lib/shared.js\"));\nfunction default_1(fork) {\n    fork.use(core_1.default);\n    var types = fork.use(types_1.default);\n    var def = types.Type.def;\n    var or = types.Type.or;\n    var defaults = fork.use(shared_1.default).defaults;\n    def(\"Function\").field(\"generator\", Boolean, defaults[\"false\"]).field(\"expression\", Boolean, defaults[\"false\"]).field(\"defaults\", [\n        or(def(\"Expression\"), null)\n    ], defaults.emptyArray)// TODO This could be represented as a RestElement in .params.\n    .field(\"rest\", or(def(\"Identifier\"), null), defaults[\"null\"]);\n    // The ESTree way of representing a ...rest parameter.\n    def(\"RestElement\").bases(\"Pattern\").build(\"argument\").field(\"argument\", def(\"Pattern\")).field(\"typeAnnotation\", or(def(\"TypeAnnotation\"), def(\"TSTypeAnnotation\"), null), defaults[\"null\"]);\n    def(\"SpreadElementPattern\").bases(\"Pattern\").build(\"argument\").field(\"argument\", def(\"Pattern\"));\n    def(\"FunctionDeclaration\").build(\"id\", \"params\", \"body\", \"generator\", \"expression\");\n    def(\"FunctionExpression\").build(\"id\", \"params\", \"body\", \"generator\", \"expression\");\n    // The Parser API calls this ArrowExpression, but Esprima and all other\n    // actual parsers use ArrowFunctionExpression.\n    def(\"ArrowFunctionExpression\").bases(\"Function\", \"Expression\").build(\"params\", \"body\", \"expression\")// The forced null value here is compatible with the overridden\n    // definition of the \"id\" field in the Function interface.\n    .field(\"id\", null, defaults[\"null\"])// Arrow function bodies are allowed to be expressions.\n    .field(\"body\", or(def(\"BlockStatement\"), def(\"Expression\")))// The current spec forbids arrow generators, so I have taken the\n    // liberty of enforcing that. TODO Report this.\n    .field(\"generator\", false, defaults[\"false\"]);\n    def(\"ForOfStatement\").bases(\"Statement\").build(\"left\", \"right\", \"body\").field(\"left\", or(def(\"VariableDeclaration\"), def(\"Pattern\"))).field(\"right\", def(\"Expression\")).field(\"body\", def(\"Statement\"));\n    def(\"YieldExpression\").bases(\"Expression\").build(\"argument\", \"delegate\").field(\"argument\", or(def(\"Expression\"), null)).field(\"delegate\", Boolean, defaults[\"false\"]);\n    def(\"GeneratorExpression\").bases(\"Expression\").build(\"body\", \"blocks\", \"filter\").field(\"body\", def(\"Expression\")).field(\"blocks\", [\n        def(\"ComprehensionBlock\")\n    ]).field(\"filter\", or(def(\"Expression\"), null));\n    def(\"ComprehensionExpression\").bases(\"Expression\").build(\"body\", \"blocks\", \"filter\").field(\"body\", def(\"Expression\")).field(\"blocks\", [\n        def(\"ComprehensionBlock\")\n    ]).field(\"filter\", or(def(\"Expression\"), null));\n    def(\"ComprehensionBlock\").bases(\"Node\").build(\"left\", \"right\", \"each\").field(\"left\", def(\"Pattern\")).field(\"right\", def(\"Expression\")).field(\"each\", Boolean);\n    def(\"Property\").field(\"key\", or(def(\"Literal\"), def(\"Identifier\"), def(\"Expression\"))).field(\"value\", or(def(\"Expression\"), def(\"Pattern\"))).field(\"method\", Boolean, defaults[\"false\"]).field(\"shorthand\", Boolean, defaults[\"false\"]).field(\"computed\", Boolean, defaults[\"false\"]);\n    def(\"ObjectProperty\").field(\"shorthand\", Boolean, defaults[\"false\"]);\n    def(\"PropertyPattern\").bases(\"Pattern\").build(\"key\", \"pattern\").field(\"key\", or(def(\"Literal\"), def(\"Identifier\"), def(\"Expression\"))).field(\"pattern\", def(\"Pattern\")).field(\"computed\", Boolean, defaults[\"false\"]);\n    def(\"ObjectPattern\").bases(\"Pattern\").build(\"properties\").field(\"properties\", [\n        or(def(\"PropertyPattern\"), def(\"Property\"))\n    ]);\n    def(\"ArrayPattern\").bases(\"Pattern\").build(\"elements\").field(\"elements\", [\n        or(def(\"Pattern\"), null)\n    ]);\n    def(\"MethodDefinition\").bases(\"Declaration\").build(\"kind\", \"key\", \"value\", \"static\").field(\"kind\", or(\"constructor\", \"method\", \"get\", \"set\")).field(\"key\", def(\"Expression\")).field(\"value\", def(\"Function\")).field(\"computed\", Boolean, defaults[\"false\"]).field(\"static\", Boolean, defaults[\"false\"]);\n    def(\"SpreadElement\").bases(\"Node\").build(\"argument\").field(\"argument\", def(\"Expression\"));\n    def(\"ArrayExpression\").field(\"elements\", [\n        or(def(\"Expression\"), def(\"SpreadElement\"), def(\"RestElement\"), null)\n    ]);\n    def(\"NewExpression\").field(\"arguments\", [\n        or(def(\"Expression\"), def(\"SpreadElement\"))\n    ]);\n    def(\"CallExpression\").field(\"arguments\", [\n        or(def(\"Expression\"), def(\"SpreadElement\"))\n    ]);\n    // Note: this node type is *not* an AssignmentExpression with a Pattern on\n    // the left-hand side! The existing AssignmentExpression type already\n    // supports destructuring assignments. AssignmentPattern nodes may appear\n    // wherever a Pattern is allowed, and the right-hand side represents a\n    // default value to be destructured against the left-hand side, if no\n    // value is otherwise provided. For example: default parameter values.\n    def(\"AssignmentPattern\").bases(\"Pattern\").build(\"left\", \"right\").field(\"left\", def(\"Pattern\")).field(\"right\", def(\"Expression\"));\n    var ClassBodyElement = or(def(\"MethodDefinition\"), def(\"VariableDeclarator\"), def(\"ClassPropertyDefinition\"), def(\"ClassProperty\"));\n    def(\"ClassProperty\").bases(\"Declaration\").build(\"key\").field(\"key\", or(def(\"Literal\"), def(\"Identifier\"), def(\"Expression\"))).field(\"computed\", Boolean, defaults[\"false\"]);\n    def(\"ClassPropertyDefinition\") // static property\n    .bases(\"Declaration\").build(\"definition\")// Yes, Virginia, circular definitions are permitted.\n    .field(\"definition\", ClassBodyElement);\n    def(\"ClassBody\").bases(\"Declaration\").build(\"body\").field(\"body\", [\n        ClassBodyElement\n    ]);\n    def(\"ClassDeclaration\").bases(\"Declaration\").build(\"id\", \"body\", \"superClass\").field(\"id\", or(def(\"Identifier\"), null)).field(\"body\", def(\"ClassBody\")).field(\"superClass\", or(def(\"Expression\"), null), defaults[\"null\"]);\n    def(\"ClassExpression\").bases(\"Expression\").build(\"id\", \"body\", \"superClass\").field(\"id\", or(def(\"Identifier\"), null), defaults[\"null\"]).field(\"body\", def(\"ClassBody\")).field(\"superClass\", or(def(\"Expression\"), null), defaults[\"null\"]);\n    // Specifier and ModuleSpecifier are abstract non-standard types\n    // introduced for definitional convenience.\n    def(\"Specifier\").bases(\"Node\");\n    // This supertype is shared/abused by both def/babel.js and\n    // def/esprima.js. In the future, it will be possible to load only one set\n    // of definitions appropriate for a given parser, but until then we must\n    // rely on default functions to reconcile the conflicting AST formats.\n    def(\"ModuleSpecifier\").bases(\"Specifier\")// This local field is used by Babel/Acorn. It should not technically\n    // be optional in the Babel/Acorn AST format, but it must be optional\n    // in the Esprima AST format.\n    .field(\"local\", or(def(\"Identifier\"), null), defaults[\"null\"])// The id and name fields are used by Esprima. The id field should not\n    // technically be optional in the Esprima AST format, but it must be\n    // optional in the Babel/Acorn AST format.\n    .field(\"id\", or(def(\"Identifier\"), null), defaults[\"null\"]).field(\"name\", or(def(\"Identifier\"), null), defaults[\"null\"]);\n    // Like ModuleSpecifier, except type:\"ImportSpecifier\" and buildable.\n    // import {<id [as name]>} from ...;\n    def(\"ImportSpecifier\").bases(\"ModuleSpecifier\").build(\"id\", \"name\");\n    // import <* as id> from ...;\n    def(\"ImportNamespaceSpecifier\").bases(\"ModuleSpecifier\").build(\"id\");\n    // import <id> from ...;\n    def(\"ImportDefaultSpecifier\").bases(\"ModuleSpecifier\").build(\"id\");\n    def(\"ImportDeclaration\").bases(\"Declaration\").build(\"specifiers\", \"source\", \"importKind\").field(\"specifiers\", [\n        or(def(\"ImportSpecifier\"), def(\"ImportNamespaceSpecifier\"), def(\"ImportDefaultSpecifier\"))\n    ], defaults.emptyArray).field(\"source\", def(\"Literal\")).field(\"importKind\", or(\"value\", \"type\"), function() {\n        return \"value\";\n    });\n    def(\"TaggedTemplateExpression\").bases(\"Expression\").build(\"tag\", \"quasi\").field(\"tag\", def(\"Expression\")).field(\"quasi\", def(\"TemplateLiteral\"));\n    def(\"TemplateLiteral\").bases(\"Expression\").build(\"quasis\", \"expressions\").field(\"quasis\", [\n        def(\"TemplateElement\")\n    ]).field(\"expressions\", [\n        def(\"Expression\")\n    ]);\n    def(\"TemplateElement\").bases(\"Node\").build(\"value\", \"tail\").field(\"value\", {\n        \"cooked\": String,\n        \"raw\": String\n    }).field(\"tail\", Boolean);\n}\nexports[\"default\"] = default_1;\nmodule.exports = exports[\"default\"];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ast-types/def/es6.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ast-types/def/es7.js":
/*!*******************************************!*\
  !*** ./node_modules/ast-types/def/es7.js ***!
  \*******************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nvar es6_1 = tslib_1.__importDefault(__webpack_require__(/*! ./es6 */ \"(rsc)/./node_modules/ast-types/def/es6.js\"));\nvar types_1 = tslib_1.__importDefault(__webpack_require__(/*! ../lib/types */ \"(rsc)/./node_modules/ast-types/lib/types.js\"));\nvar shared_1 = tslib_1.__importDefault(__webpack_require__(/*! ../lib/shared */ \"(rsc)/./node_modules/ast-types/lib/shared.js\"));\nfunction default_1(fork) {\n    fork.use(es6_1.default);\n    var types = fork.use(types_1.default);\n    var def = types.Type.def;\n    var or = types.Type.or;\n    var defaults = fork.use(shared_1.default).defaults;\n    def(\"Function\").field(\"async\", Boolean, defaults[\"false\"]);\n    def(\"SpreadProperty\").bases(\"Node\").build(\"argument\").field(\"argument\", def(\"Expression\"));\n    def(\"ObjectExpression\").field(\"properties\", [\n        or(def(\"Property\"), def(\"SpreadProperty\"), def(\"SpreadElement\"))\n    ]);\n    def(\"SpreadPropertyPattern\").bases(\"Pattern\").build(\"argument\").field(\"argument\", def(\"Pattern\"));\n    def(\"ObjectPattern\").field(\"properties\", [\n        or(def(\"Property\"), def(\"PropertyPattern\"), def(\"SpreadPropertyPattern\"))\n    ]);\n    def(\"AwaitExpression\").bases(\"Expression\").build(\"argument\", \"all\").field(\"argument\", or(def(\"Expression\"), null)).field(\"all\", Boolean, defaults[\"false\"]);\n}\nexports[\"default\"] = default_1;\nmodule.exports = exports[\"default\"];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYXN0LXR5cGVzL2RlZi9lczcuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELElBQUlDLFVBQVVDLG1CQUFPQSxDQUFDLHVEQUFPO0FBQzdCLElBQUlDLFFBQVFGLFFBQVFHLGVBQWUsQ0FBQ0YsbUJBQU9BLENBQUMsd0RBQU87QUFDbkQsSUFBSUcsVUFBVUosUUFBUUcsZUFBZSxDQUFDRixtQkFBT0EsQ0FBQyxpRUFBYztBQUM1RCxJQUFJSSxXQUFXTCxRQUFRRyxlQUFlLENBQUNGLG1CQUFPQSxDQUFDLG1FQUFlO0FBQzlELFNBQVNLLFVBQVVDLElBQUk7SUFDbkJBLEtBQUtDLEdBQUcsQ0FBQ04sTUFBTU8sT0FBTztJQUN0QixJQUFJQyxRQUFRSCxLQUFLQyxHQUFHLENBQUNKLFFBQVFLLE9BQU87SUFDcEMsSUFBSUUsTUFBTUQsTUFBTUUsSUFBSSxDQUFDRCxHQUFHO0lBQ3hCLElBQUlFLEtBQUtILE1BQU1FLElBQUksQ0FBQ0MsRUFBRTtJQUN0QixJQUFJQyxXQUFXUCxLQUFLQyxHQUFHLENBQUNILFNBQVNJLE9BQU8sRUFBRUssUUFBUTtJQUNsREgsSUFBSSxZQUNDSSxLQUFLLENBQUMsU0FBU0MsU0FBU0YsUUFBUSxDQUFDLFFBQVE7SUFDOUNILElBQUksa0JBQ0NNLEtBQUssQ0FBQyxRQUNOQyxLQUFLLENBQUMsWUFDTkgsS0FBSyxDQUFDLFlBQVlKLElBQUk7SUFDM0JBLElBQUksb0JBQ0NJLEtBQUssQ0FBQyxjQUFjO1FBQUNGLEdBQUdGLElBQUksYUFBYUEsSUFBSSxtQkFBbUJBLElBQUk7S0FBa0I7SUFDM0ZBLElBQUkseUJBQ0NNLEtBQUssQ0FBQyxXQUNOQyxLQUFLLENBQUMsWUFDTkgsS0FBSyxDQUFDLFlBQVlKLElBQUk7SUFDM0JBLElBQUksaUJBQ0NJLEtBQUssQ0FBQyxjQUFjO1FBQUNGLEdBQUdGLElBQUksYUFBYUEsSUFBSSxvQkFBb0JBLElBQUk7S0FBMEI7SUFDcEdBLElBQUksbUJBQ0NNLEtBQUssQ0FBQyxjQUNOQyxLQUFLLENBQUMsWUFBWSxPQUNsQkgsS0FBSyxDQUFDLFlBQVlGLEdBQUdGLElBQUksZUFBZSxPQUN4Q0ksS0FBSyxDQUFDLE9BQU9DLFNBQVNGLFFBQVEsQ0FBQyxRQUFRO0FBQ2hEO0FBQ0FoQixrQkFBZSxHQUFHUTtBQUNsQmEsT0FBT3JCLE9BQU8sR0FBR0EsT0FBTyxDQUFDLFVBQVUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaXZpbC1lbmdpbmVlcmluZy1wbGF0Zm9ybS8uL25vZGVfbW9kdWxlcy9hc3QtdHlwZXMvZGVmL2VzNy5qcz9hYzViIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiOztcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xudmFyIGVzNl8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vZXM2XCIpKTtcbnZhciB0eXBlc18xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL2xpYi90eXBlc1wiKSk7XG52YXIgc2hhcmVkXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vbGliL3NoYXJlZFwiKSk7XG5mdW5jdGlvbiBkZWZhdWx0XzEoZm9yaykge1xuICAgIGZvcmsudXNlKGVzNl8xLmRlZmF1bHQpO1xuICAgIHZhciB0eXBlcyA9IGZvcmsudXNlKHR5cGVzXzEuZGVmYXVsdCk7XG4gICAgdmFyIGRlZiA9IHR5cGVzLlR5cGUuZGVmO1xuICAgIHZhciBvciA9IHR5cGVzLlR5cGUub3I7XG4gICAgdmFyIGRlZmF1bHRzID0gZm9yay51c2Uoc2hhcmVkXzEuZGVmYXVsdCkuZGVmYXVsdHM7XG4gICAgZGVmKFwiRnVuY3Rpb25cIilcbiAgICAgICAgLmZpZWxkKFwiYXN5bmNcIiwgQm9vbGVhbiwgZGVmYXVsdHNbXCJmYWxzZVwiXSk7XG4gICAgZGVmKFwiU3ByZWFkUHJvcGVydHlcIilcbiAgICAgICAgLmJhc2VzKFwiTm9kZVwiKVxuICAgICAgICAuYnVpbGQoXCJhcmd1bWVudFwiKVxuICAgICAgICAuZmllbGQoXCJhcmd1bWVudFwiLCBkZWYoXCJFeHByZXNzaW9uXCIpKTtcbiAgICBkZWYoXCJPYmplY3RFeHByZXNzaW9uXCIpXG4gICAgICAgIC5maWVsZChcInByb3BlcnRpZXNcIiwgW29yKGRlZihcIlByb3BlcnR5XCIpLCBkZWYoXCJTcHJlYWRQcm9wZXJ0eVwiKSwgZGVmKFwiU3ByZWFkRWxlbWVudFwiKSldKTtcbiAgICBkZWYoXCJTcHJlYWRQcm9wZXJ0eVBhdHRlcm5cIilcbiAgICAgICAgLmJhc2VzKFwiUGF0dGVyblwiKVxuICAgICAgICAuYnVpbGQoXCJhcmd1bWVudFwiKVxuICAgICAgICAuZmllbGQoXCJhcmd1bWVudFwiLCBkZWYoXCJQYXR0ZXJuXCIpKTtcbiAgICBkZWYoXCJPYmplY3RQYXR0ZXJuXCIpXG4gICAgICAgIC5maWVsZChcInByb3BlcnRpZXNcIiwgW29yKGRlZihcIlByb3BlcnR5XCIpLCBkZWYoXCJQcm9wZXJ0eVBhdHRlcm5cIiksIGRlZihcIlNwcmVhZFByb3BlcnR5UGF0dGVyblwiKSldKTtcbiAgICBkZWYoXCJBd2FpdEV4cHJlc3Npb25cIilcbiAgICAgICAgLmJhc2VzKFwiRXhwcmVzc2lvblwiKVxuICAgICAgICAuYnVpbGQoXCJhcmd1bWVudFwiLCBcImFsbFwiKVxuICAgICAgICAuZmllbGQoXCJhcmd1bWVudFwiLCBvcihkZWYoXCJFeHByZXNzaW9uXCIpLCBudWxsKSlcbiAgICAgICAgLmZpZWxkKFwiYWxsXCIsIEJvb2xlYW4sIGRlZmF1bHRzW1wiZmFsc2VcIl0pO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gZGVmYXVsdF8xO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRzbGliXzEiLCJyZXF1aXJlIiwiZXM2XzEiLCJfX2ltcG9ydERlZmF1bHQiLCJ0eXBlc18xIiwic2hhcmVkXzEiLCJkZWZhdWx0XzEiLCJmb3JrIiwidXNlIiwiZGVmYXVsdCIsInR5cGVzIiwiZGVmIiwiVHlwZSIsIm9yIiwiZGVmYXVsdHMiLCJmaWVsZCIsIkJvb2xlYW4iLCJiYXNlcyIsImJ1aWxkIiwibW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ast-types/def/es7.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ast-types/def/esprima.js":
/*!***********************************************!*\
  !*** ./node_modules/ast-types/def/esprima.js ***!
  \***********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nvar es7_1 = tslib_1.__importDefault(__webpack_require__(/*! ./es7 */ \"(rsc)/./node_modules/ast-types/def/es7.js\"));\nvar types_1 = tslib_1.__importDefault(__webpack_require__(/*! ../lib/types */ \"(rsc)/./node_modules/ast-types/lib/types.js\"));\nvar shared_1 = tslib_1.__importDefault(__webpack_require__(/*! ../lib/shared */ \"(rsc)/./node_modules/ast-types/lib/shared.js\"));\nfunction default_1(fork) {\n    fork.use(es7_1.default);\n    var types = fork.use(types_1.default);\n    var defaults = fork.use(shared_1.default).defaults;\n    var def = types.Type.def;\n    var or = types.Type.or;\n    def(\"VariableDeclaration\").field(\"declarations\", [\n        or(def(\"VariableDeclarator\"), def(\"Identifier\") // Esprima deviation.\n        )\n    ]);\n    def(\"Property\").field(\"value\", or(def(\"Expression\"), def(\"Pattern\") // Esprima deviation.\n    ));\n    def(\"ArrayPattern\").field(\"elements\", [\n        or(def(\"Pattern\"), def(\"SpreadElement\"), null)\n    ]);\n    def(\"ObjectPattern\").field(\"properties\", [\n        or(def(\"Property\"), def(\"PropertyPattern\"), def(\"SpreadPropertyPattern\"), def(\"SpreadProperty\") // Used by Esprima.\n        )\n    ]);\n    // Like ModuleSpecifier, except type:\"ExportSpecifier\" and buildable.\n    // export {<id [as name]>} [from ...];\n    def(\"ExportSpecifier\").bases(\"ModuleSpecifier\").build(\"id\", \"name\");\n    // export <*> from ...;\n    def(\"ExportBatchSpecifier\").bases(\"Specifier\").build();\n    def(\"ExportDeclaration\").bases(\"Declaration\").build(\"default\", \"declaration\", \"specifiers\", \"source\").field(\"default\", Boolean).field(\"declaration\", or(def(\"Declaration\"), def(\"Expression\"), null)).field(\"specifiers\", [\n        or(def(\"ExportSpecifier\"), def(\"ExportBatchSpecifier\"))\n    ], defaults.emptyArray).field(\"source\", or(def(\"Literal\"), null), defaults[\"null\"]);\n    def(\"Block\").bases(\"Comment\").build(\"value\", /*optional:*/ \"leading\", \"trailing\");\n    def(\"Line\").bases(\"Comment\").build(\"value\", /*optional:*/ \"leading\", \"trailing\");\n}\nexports[\"default\"] = default_1;\nmodule.exports = exports[\"default\"];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYXN0LXR5cGVzL2RlZi9lc3ByaW1hLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxJQUFJQyxVQUFVQyxtQkFBT0EsQ0FBQyx1REFBTztBQUM3QixJQUFJQyxRQUFRRixRQUFRRyxlQUFlLENBQUNGLG1CQUFPQSxDQUFDLHdEQUFPO0FBQ25ELElBQUlHLFVBQVVKLFFBQVFHLGVBQWUsQ0FBQ0YsbUJBQU9BLENBQUMsaUVBQWM7QUFDNUQsSUFBSUksV0FBV0wsUUFBUUcsZUFBZSxDQUFDRixtQkFBT0EsQ0FBQyxtRUFBZTtBQUM5RCxTQUFTSyxVQUFVQyxJQUFJO0lBQ25CQSxLQUFLQyxHQUFHLENBQUNOLE1BQU1PLE9BQU87SUFDdEIsSUFBSUMsUUFBUUgsS0FBS0MsR0FBRyxDQUFDSixRQUFRSyxPQUFPO0lBQ3BDLElBQUlFLFdBQVdKLEtBQUtDLEdBQUcsQ0FBQ0gsU0FBU0ksT0FBTyxFQUFFRSxRQUFRO0lBQ2xELElBQUlDLE1BQU1GLE1BQU1HLElBQUksQ0FBQ0QsR0FBRztJQUN4QixJQUFJRSxLQUFLSixNQUFNRyxJQUFJLENBQUNDLEVBQUU7SUFDdEJGLElBQUksdUJBQ0NHLEtBQUssQ0FBQyxnQkFBZ0I7UUFBQ0QsR0FBR0YsSUFBSSx1QkFBdUJBLElBQUksY0FBYyxxQkFBcUI7O0tBQzNGO0lBQ05BLElBQUksWUFDQ0csS0FBSyxDQUFDLFNBQVNELEdBQUdGLElBQUksZUFBZUEsSUFBSSxXQUFXLHFCQUFxQjs7SUFFOUVBLElBQUksZ0JBQ0NHLEtBQUssQ0FBQyxZQUFZO1FBQUNELEdBQUdGLElBQUksWUFBWUEsSUFBSSxrQkFBa0I7S0FBTTtJQUN2RUEsSUFBSSxpQkFDQ0csS0FBSyxDQUFDLGNBQWM7UUFBQ0QsR0FBR0YsSUFBSSxhQUFhQSxJQUFJLG9CQUFvQkEsSUFBSSwwQkFBMEJBLElBQUksa0JBQWtCLG1CQUFtQjs7S0FDdkk7SUFDTixxRUFBcUU7SUFDckUsc0NBQXNDO0lBQ3RDQSxJQUFJLG1CQUNDSSxLQUFLLENBQUMsbUJBQ05DLEtBQUssQ0FBQyxNQUFNO0lBQ2pCLHVCQUF1QjtJQUN2QkwsSUFBSSx3QkFDQ0ksS0FBSyxDQUFDLGFBQ05DLEtBQUs7SUFDVkwsSUFBSSxxQkFDQ0ksS0FBSyxDQUFDLGVBQ05DLEtBQUssQ0FBQyxXQUFXLGVBQWUsY0FBYyxVQUM5Q0YsS0FBSyxDQUFDLFdBQVdHLFNBQ2pCSCxLQUFLLENBQUMsZUFBZUQsR0FBR0YsSUFBSSxnQkFBZ0JBLElBQUksZUFDckQsT0FDS0csS0FBSyxDQUFDLGNBQWM7UUFBQ0QsR0FBR0YsSUFBSSxvQkFBb0JBLElBQUk7S0FBeUIsRUFBRUQsU0FBU1EsVUFBVSxFQUNsR0osS0FBSyxDQUFDLFVBQVVELEdBQUdGLElBQUksWUFBWSxPQUFPRCxRQUFRLENBQUMsT0FBTztJQUMvREMsSUFBSSxTQUNDSSxLQUFLLENBQUMsV0FDTkMsS0FBSyxDQUFDLFNBQVMsV0FBVyxHQUFHLFdBQVc7SUFDN0NMLElBQUksUUFDQ0ksS0FBSyxDQUFDLFdBQ05DLEtBQUssQ0FBQyxTQUFTLFdBQVcsR0FBRyxXQUFXO0FBQ2pEO0FBQ0FuQixrQkFBZSxHQUFHUTtBQUNsQmMsT0FBT3RCLE9BQU8sR0FBR0EsT0FBTyxDQUFDLFVBQVUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaXZpbC1lbmdpbmVlcmluZy1wbGF0Zm9ybS8uL25vZGVfbW9kdWxlcy9hc3QtdHlwZXMvZGVmL2VzcHJpbWEuanM/ODllMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjs7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbnZhciBlczdfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2VzN1wiKSk7XG52YXIgdHlwZXNfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9saWIvdHlwZXNcIikpO1xudmFyIHNoYXJlZF8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL2xpYi9zaGFyZWRcIikpO1xuZnVuY3Rpb24gZGVmYXVsdF8xKGZvcmspIHtcbiAgICBmb3JrLnVzZShlczdfMS5kZWZhdWx0KTtcbiAgICB2YXIgdHlwZXMgPSBmb3JrLnVzZSh0eXBlc18xLmRlZmF1bHQpO1xuICAgIHZhciBkZWZhdWx0cyA9IGZvcmsudXNlKHNoYXJlZF8xLmRlZmF1bHQpLmRlZmF1bHRzO1xuICAgIHZhciBkZWYgPSB0eXBlcy5UeXBlLmRlZjtcbiAgICB2YXIgb3IgPSB0eXBlcy5UeXBlLm9yO1xuICAgIGRlZihcIlZhcmlhYmxlRGVjbGFyYXRpb25cIilcbiAgICAgICAgLmZpZWxkKFwiZGVjbGFyYXRpb25zXCIsIFtvcihkZWYoXCJWYXJpYWJsZURlY2xhcmF0b3JcIiksIGRlZihcIklkZW50aWZpZXJcIikgLy8gRXNwcmltYSBkZXZpYXRpb24uXG4gICAgICAgICldKTtcbiAgICBkZWYoXCJQcm9wZXJ0eVwiKVxuICAgICAgICAuZmllbGQoXCJ2YWx1ZVwiLCBvcihkZWYoXCJFeHByZXNzaW9uXCIpLCBkZWYoXCJQYXR0ZXJuXCIpIC8vIEVzcHJpbWEgZGV2aWF0aW9uLlxuICAgICkpO1xuICAgIGRlZihcIkFycmF5UGF0dGVyblwiKVxuICAgICAgICAuZmllbGQoXCJlbGVtZW50c1wiLCBbb3IoZGVmKFwiUGF0dGVyblwiKSwgZGVmKFwiU3ByZWFkRWxlbWVudFwiKSwgbnVsbCldKTtcbiAgICBkZWYoXCJPYmplY3RQYXR0ZXJuXCIpXG4gICAgICAgIC5maWVsZChcInByb3BlcnRpZXNcIiwgW29yKGRlZihcIlByb3BlcnR5XCIpLCBkZWYoXCJQcm9wZXJ0eVBhdHRlcm5cIiksIGRlZihcIlNwcmVhZFByb3BlcnR5UGF0dGVyblwiKSwgZGVmKFwiU3ByZWFkUHJvcGVydHlcIikgLy8gVXNlZCBieSBFc3ByaW1hLlxuICAgICAgICApXSk7XG4gICAgLy8gTGlrZSBNb2R1bGVTcGVjaWZpZXIsIGV4Y2VwdCB0eXBlOlwiRXhwb3J0U3BlY2lmaWVyXCIgYW5kIGJ1aWxkYWJsZS5cbiAgICAvLyBleHBvcnQgezxpZCBbYXMgbmFtZV0+fSBbZnJvbSAuLi5dO1xuICAgIGRlZihcIkV4cG9ydFNwZWNpZmllclwiKVxuICAgICAgICAuYmFzZXMoXCJNb2R1bGVTcGVjaWZpZXJcIilcbiAgICAgICAgLmJ1aWxkKFwiaWRcIiwgXCJuYW1lXCIpO1xuICAgIC8vIGV4cG9ydCA8Kj4gZnJvbSAuLi47XG4gICAgZGVmKFwiRXhwb3J0QmF0Y2hTcGVjaWZpZXJcIilcbiAgICAgICAgLmJhc2VzKFwiU3BlY2lmaWVyXCIpXG4gICAgICAgIC5idWlsZCgpO1xuICAgIGRlZihcIkV4cG9ydERlY2xhcmF0aW9uXCIpXG4gICAgICAgIC5iYXNlcyhcIkRlY2xhcmF0aW9uXCIpXG4gICAgICAgIC5idWlsZChcImRlZmF1bHRcIiwgXCJkZWNsYXJhdGlvblwiLCBcInNwZWNpZmllcnNcIiwgXCJzb3VyY2VcIilcbiAgICAgICAgLmZpZWxkKFwiZGVmYXVsdFwiLCBCb29sZWFuKVxuICAgICAgICAuZmllbGQoXCJkZWNsYXJhdGlvblwiLCBvcihkZWYoXCJEZWNsYXJhdGlvblwiKSwgZGVmKFwiRXhwcmVzc2lvblwiKSwgLy8gSW1wbGllcyBkZWZhdWx0LlxuICAgIG51bGwpKVxuICAgICAgICAuZmllbGQoXCJzcGVjaWZpZXJzXCIsIFtvcihkZWYoXCJFeHBvcnRTcGVjaWZpZXJcIiksIGRlZihcIkV4cG9ydEJhdGNoU3BlY2lmaWVyXCIpKV0sIGRlZmF1bHRzLmVtcHR5QXJyYXkpXG4gICAgICAgIC5maWVsZChcInNvdXJjZVwiLCBvcihkZWYoXCJMaXRlcmFsXCIpLCBudWxsKSwgZGVmYXVsdHNbXCJudWxsXCJdKTtcbiAgICBkZWYoXCJCbG9ja1wiKVxuICAgICAgICAuYmFzZXMoXCJDb21tZW50XCIpXG4gICAgICAgIC5idWlsZChcInZhbHVlXCIsIC8qb3B0aW9uYWw6Ki8gXCJsZWFkaW5nXCIsIFwidHJhaWxpbmdcIik7XG4gICAgZGVmKFwiTGluZVwiKVxuICAgICAgICAuYmFzZXMoXCJDb21tZW50XCIpXG4gICAgICAgIC5idWlsZChcInZhbHVlXCIsIC8qb3B0aW9uYWw6Ki8gXCJsZWFkaW5nXCIsIFwidHJhaWxpbmdcIik7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBkZWZhdWx0XzE7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidHNsaWJfMSIsInJlcXVpcmUiLCJlczdfMSIsIl9faW1wb3J0RGVmYXVsdCIsInR5cGVzXzEiLCJzaGFyZWRfMSIsImRlZmF1bHRfMSIsImZvcmsiLCJ1c2UiLCJkZWZhdWx0IiwidHlwZXMiLCJkZWZhdWx0cyIsImRlZiIsIlR5cGUiLCJvciIsImZpZWxkIiwiYmFzZXMiLCJidWlsZCIsIkJvb2xlYW4iLCJlbXB0eUFycmF5IiwibW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ast-types/def/esprima.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ast-types/def/flow.js":
/*!********************************************!*\
  !*** ./node_modules/ast-types/def/flow.js ***!
  \********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nvar es7_1 = tslib_1.__importDefault(__webpack_require__(/*! ./es7 */ \"(rsc)/./node_modules/ast-types/def/es7.js\"));\nvar type_annotations_1 = tslib_1.__importDefault(__webpack_require__(/*! ./type-annotations */ \"(rsc)/./node_modules/ast-types/def/type-annotations.js\"));\nvar types_1 = tslib_1.__importDefault(__webpack_require__(/*! ../lib/types */ \"(rsc)/./node_modules/ast-types/lib/types.js\"));\nvar shared_1 = tslib_1.__importDefault(__webpack_require__(/*! ../lib/shared */ \"(rsc)/./node_modules/ast-types/lib/shared.js\"));\nfunction default_1(fork) {\n    fork.use(es7_1.default);\n    fork.use(type_annotations_1.default);\n    var types = fork.use(types_1.default);\n    var def = types.Type.def;\n    var or = types.Type.or;\n    var defaults = fork.use(shared_1.default).defaults;\n    // Base types\n    def(\"Flow\").bases(\"Node\");\n    def(\"FlowType\").bases(\"Flow\");\n    // Type annotations\n    def(\"AnyTypeAnnotation\").bases(\"FlowType\").build();\n    def(\"EmptyTypeAnnotation\").bases(\"FlowType\").build();\n    def(\"MixedTypeAnnotation\").bases(\"FlowType\").build();\n    def(\"VoidTypeAnnotation\").bases(\"FlowType\").build();\n    def(\"NumberTypeAnnotation\").bases(\"FlowType\").build();\n    def(\"NumberLiteralTypeAnnotation\").bases(\"FlowType\").build(\"value\", \"raw\").field(\"value\", Number).field(\"raw\", String);\n    // Babylon 6 differs in AST from Flow\n    // same as NumberLiteralTypeAnnotation\n    def(\"NumericLiteralTypeAnnotation\").bases(\"FlowType\").build(\"value\", \"raw\").field(\"value\", Number).field(\"raw\", String);\n    def(\"StringTypeAnnotation\").bases(\"FlowType\").build();\n    def(\"StringLiteralTypeAnnotation\").bases(\"FlowType\").build(\"value\", \"raw\").field(\"value\", String).field(\"raw\", String);\n    def(\"BooleanTypeAnnotation\").bases(\"FlowType\").build();\n    def(\"BooleanLiteralTypeAnnotation\").bases(\"FlowType\").build(\"value\", \"raw\").field(\"value\", Boolean).field(\"raw\", String);\n    def(\"TypeAnnotation\").bases(\"Node\").build(\"typeAnnotation\").field(\"typeAnnotation\", def(\"FlowType\"));\n    def(\"NullableTypeAnnotation\").bases(\"FlowType\").build(\"typeAnnotation\").field(\"typeAnnotation\", def(\"FlowType\"));\n    def(\"NullLiteralTypeAnnotation\").bases(\"FlowType\").build();\n    def(\"NullTypeAnnotation\").bases(\"FlowType\").build();\n    def(\"ThisTypeAnnotation\").bases(\"FlowType\").build();\n    def(\"ExistsTypeAnnotation\").bases(\"FlowType\").build();\n    def(\"ExistentialTypeParam\").bases(\"FlowType\").build();\n    def(\"FunctionTypeAnnotation\").bases(\"FlowType\").build(\"params\", \"returnType\", \"rest\", \"typeParameters\").field(\"params\", [\n        def(\"FunctionTypeParam\")\n    ]).field(\"returnType\", def(\"FlowType\")).field(\"rest\", or(def(\"FunctionTypeParam\"), null)).field(\"typeParameters\", or(def(\"TypeParameterDeclaration\"), null));\n    def(\"FunctionTypeParam\").bases(\"Node\").build(\"name\", \"typeAnnotation\", \"optional\").field(\"name\", def(\"Identifier\")).field(\"typeAnnotation\", def(\"FlowType\")).field(\"optional\", Boolean);\n    def(\"ArrayTypeAnnotation\").bases(\"FlowType\").build(\"elementType\").field(\"elementType\", def(\"FlowType\"));\n    def(\"ObjectTypeAnnotation\").bases(\"FlowType\").build(\"properties\", \"indexers\", \"callProperties\").field(\"properties\", [\n        or(def(\"ObjectTypeProperty\"), def(\"ObjectTypeSpreadProperty\"))\n    ]).field(\"indexers\", [\n        def(\"ObjectTypeIndexer\")\n    ], defaults.emptyArray).field(\"callProperties\", [\n        def(\"ObjectTypeCallProperty\")\n    ], defaults.emptyArray).field(\"inexact\", or(Boolean, void 0), defaults[\"undefined\"]).field(\"exact\", Boolean, defaults[\"false\"]).field(\"internalSlots\", [\n        def(\"ObjectTypeInternalSlot\")\n    ], defaults.emptyArray);\n    def(\"Variance\").bases(\"Node\").build(\"kind\").field(\"kind\", or(\"plus\", \"minus\"));\n    var LegacyVariance = or(def(\"Variance\"), \"plus\", \"minus\", null);\n    def(\"ObjectTypeProperty\").bases(\"Node\").build(\"key\", \"value\", \"optional\").field(\"key\", or(def(\"Literal\"), def(\"Identifier\"))).field(\"value\", def(\"FlowType\")).field(\"optional\", Boolean).field(\"variance\", LegacyVariance, defaults[\"null\"]);\n    def(\"ObjectTypeIndexer\").bases(\"Node\").build(\"id\", \"key\", \"value\").field(\"id\", def(\"Identifier\")).field(\"key\", def(\"FlowType\")).field(\"value\", def(\"FlowType\")).field(\"variance\", LegacyVariance, defaults[\"null\"]);\n    def(\"ObjectTypeCallProperty\").bases(\"Node\").build(\"value\").field(\"value\", def(\"FunctionTypeAnnotation\")).field(\"static\", Boolean, defaults[\"false\"]);\n    def(\"QualifiedTypeIdentifier\").bases(\"Node\").build(\"qualification\", \"id\").field(\"qualification\", or(def(\"Identifier\"), def(\"QualifiedTypeIdentifier\"))).field(\"id\", def(\"Identifier\"));\n    def(\"GenericTypeAnnotation\").bases(\"FlowType\").build(\"id\", \"typeParameters\").field(\"id\", or(def(\"Identifier\"), def(\"QualifiedTypeIdentifier\"))).field(\"typeParameters\", or(def(\"TypeParameterInstantiation\"), null));\n    def(\"MemberTypeAnnotation\").bases(\"FlowType\").build(\"object\", \"property\").field(\"object\", def(\"Identifier\")).field(\"property\", or(def(\"MemberTypeAnnotation\"), def(\"GenericTypeAnnotation\")));\n    def(\"UnionTypeAnnotation\").bases(\"FlowType\").build(\"types\").field(\"types\", [\n        def(\"FlowType\")\n    ]);\n    def(\"IntersectionTypeAnnotation\").bases(\"FlowType\").build(\"types\").field(\"types\", [\n        def(\"FlowType\")\n    ]);\n    def(\"TypeofTypeAnnotation\").bases(\"FlowType\").build(\"argument\").field(\"argument\", def(\"FlowType\"));\n    def(\"ObjectTypeSpreadProperty\").bases(\"Node\").build(\"argument\").field(\"argument\", def(\"FlowType\"));\n    def(\"ObjectTypeInternalSlot\").bases(\"Node\").build(\"id\", \"value\", \"optional\", \"static\", \"method\").field(\"id\", def(\"Identifier\")).field(\"value\", def(\"FlowType\")).field(\"optional\", Boolean).field(\"static\", Boolean).field(\"method\", Boolean);\n    def(\"TypeParameterDeclaration\").bases(\"Node\").build(\"params\").field(\"params\", [\n        def(\"TypeParameter\")\n    ]);\n    def(\"TypeParameterInstantiation\").bases(\"Node\").build(\"params\").field(\"params\", [\n        def(\"FlowType\")\n    ]);\n    def(\"TypeParameter\").bases(\"FlowType\").build(\"name\", \"variance\", \"bound\").field(\"name\", String).field(\"variance\", LegacyVariance, defaults[\"null\"]).field(\"bound\", or(def(\"TypeAnnotation\"), null), defaults[\"null\"]);\n    def(\"ClassProperty\").field(\"variance\", LegacyVariance, defaults[\"null\"]);\n    def(\"ClassImplements\").bases(\"Node\").build(\"id\").field(\"id\", def(\"Identifier\")).field(\"superClass\", or(def(\"Expression\"), null), defaults[\"null\"]).field(\"typeParameters\", or(def(\"TypeParameterInstantiation\"), null), defaults[\"null\"]);\n    def(\"InterfaceTypeAnnotation\").bases(\"FlowType\").build(\"body\", \"extends\").field(\"body\", def(\"ObjectTypeAnnotation\")).field(\"extends\", or([\n        def(\"InterfaceExtends\")\n    ], null), defaults[\"null\"]);\n    def(\"InterfaceDeclaration\").bases(\"Declaration\").build(\"id\", \"body\", \"extends\").field(\"id\", def(\"Identifier\")).field(\"typeParameters\", or(def(\"TypeParameterDeclaration\"), null), defaults[\"null\"]).field(\"body\", def(\"ObjectTypeAnnotation\")).field(\"extends\", [\n        def(\"InterfaceExtends\")\n    ]);\n    def(\"DeclareInterface\").bases(\"InterfaceDeclaration\").build(\"id\", \"body\", \"extends\");\n    def(\"InterfaceExtends\").bases(\"Node\").build(\"id\").field(\"id\", def(\"Identifier\")).field(\"typeParameters\", or(def(\"TypeParameterInstantiation\"), null), defaults[\"null\"]);\n    def(\"TypeAlias\").bases(\"Declaration\").build(\"id\", \"typeParameters\", \"right\").field(\"id\", def(\"Identifier\")).field(\"typeParameters\", or(def(\"TypeParameterDeclaration\"), null)).field(\"right\", def(\"FlowType\"));\n    def(\"OpaqueType\").bases(\"Declaration\").build(\"id\", \"typeParameters\", \"impltype\", \"supertype\").field(\"id\", def(\"Identifier\")).field(\"typeParameters\", or(def(\"TypeParameterDeclaration\"), null)).field(\"impltype\", def(\"FlowType\")).field(\"supertype\", def(\"FlowType\"));\n    def(\"DeclareTypeAlias\").bases(\"TypeAlias\").build(\"id\", \"typeParameters\", \"right\");\n    def(\"DeclareOpaqueType\").bases(\"TypeAlias\").build(\"id\", \"typeParameters\", \"supertype\");\n    def(\"TypeCastExpression\").bases(\"Expression\").build(\"expression\", \"typeAnnotation\").field(\"expression\", def(\"Expression\")).field(\"typeAnnotation\", def(\"TypeAnnotation\"));\n    def(\"TupleTypeAnnotation\").bases(\"FlowType\").build(\"types\").field(\"types\", [\n        def(\"FlowType\")\n    ]);\n    def(\"DeclareVariable\").bases(\"Statement\").build(\"id\").field(\"id\", def(\"Identifier\"));\n    def(\"DeclareFunction\").bases(\"Statement\").build(\"id\").field(\"id\", def(\"Identifier\"));\n    def(\"DeclareClass\").bases(\"InterfaceDeclaration\").build(\"id\");\n    def(\"DeclareModule\").bases(\"Statement\").build(\"id\", \"body\").field(\"id\", or(def(\"Identifier\"), def(\"Literal\"))).field(\"body\", def(\"BlockStatement\"));\n    def(\"DeclareModuleExports\").bases(\"Statement\").build(\"typeAnnotation\").field(\"typeAnnotation\", def(\"TypeAnnotation\"));\n    def(\"DeclareExportDeclaration\").bases(\"Declaration\").build(\"default\", \"declaration\", \"specifiers\", \"source\").field(\"default\", Boolean).field(\"declaration\", or(def(\"DeclareVariable\"), def(\"DeclareFunction\"), def(\"DeclareClass\"), def(\"FlowType\"), null)).field(\"specifiers\", [\n        or(def(\"ExportSpecifier\"), def(\"ExportBatchSpecifier\"))\n    ], defaults.emptyArray).field(\"source\", or(def(\"Literal\"), null), defaults[\"null\"]);\n    def(\"DeclareExportAllDeclaration\").bases(\"Declaration\").build(\"source\").field(\"source\", or(def(\"Literal\"), null), defaults[\"null\"]);\n    def(\"FlowPredicate\").bases(\"Flow\");\n    def(\"InferredPredicate\").bases(\"FlowPredicate\").build();\n    def(\"DeclaredPredicate\").bases(\"FlowPredicate\").build(\"value\").field(\"value\", def(\"Expression\"));\n    def(\"CallExpression\").field(\"typeArguments\", or(null, def(\"TypeParameterInstantiation\")), defaults[\"null\"]);\n    def(\"NewExpression\").field(\"typeArguments\", or(null, def(\"TypeParameterInstantiation\")), defaults[\"null\"]);\n}\nexports[\"default\"] = default_1;\nmodule.exports = exports[\"default\"];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ast-types/def/flow.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ast-types/def/jsx.js":
/*!*******************************************!*\
  !*** ./node_modules/ast-types/def/jsx.js ***!
  \*******************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nvar es7_1 = tslib_1.__importDefault(__webpack_require__(/*! ./es7 */ \"(rsc)/./node_modules/ast-types/def/es7.js\"));\nvar types_1 = tslib_1.__importDefault(__webpack_require__(/*! ../lib/types */ \"(rsc)/./node_modules/ast-types/lib/types.js\"));\nvar shared_1 = tslib_1.__importDefault(__webpack_require__(/*! ../lib/shared */ \"(rsc)/./node_modules/ast-types/lib/shared.js\"));\nfunction default_1(fork) {\n    fork.use(es7_1.default);\n    var types = fork.use(types_1.default);\n    var def = types.Type.def;\n    var or = types.Type.or;\n    var defaults = fork.use(shared_1.default).defaults;\n    def(\"JSXAttribute\").bases(\"Node\").build(\"name\", \"value\").field(\"name\", or(def(\"JSXIdentifier\"), def(\"JSXNamespacedName\"))).field(\"value\", or(def(\"Literal\"), def(\"JSXExpressionContainer\"), null // attr= or just attr\n    ), defaults[\"null\"]);\n    def(\"JSXIdentifier\").bases(\"Identifier\").build(\"name\").field(\"name\", String);\n    def(\"JSXNamespacedName\").bases(\"Node\").build(\"namespace\", \"name\").field(\"namespace\", def(\"JSXIdentifier\")).field(\"name\", def(\"JSXIdentifier\"));\n    def(\"JSXMemberExpression\").bases(\"MemberExpression\").build(\"object\", \"property\").field(\"object\", or(def(\"JSXIdentifier\"), def(\"JSXMemberExpression\"))).field(\"property\", def(\"JSXIdentifier\")).field(\"computed\", Boolean, defaults.false);\n    var JSXElementName = or(def(\"JSXIdentifier\"), def(\"JSXNamespacedName\"), def(\"JSXMemberExpression\"));\n    def(\"JSXSpreadAttribute\").bases(\"Node\").build(\"argument\").field(\"argument\", def(\"Expression\"));\n    var JSXAttributes = [\n        or(def(\"JSXAttribute\"), def(\"JSXSpreadAttribute\"))\n    ];\n    def(\"JSXExpressionContainer\").bases(\"Expression\").build(\"expression\").field(\"expression\", def(\"Expression\"));\n    def(\"JSXElement\").bases(\"Expression\").build(\"openingElement\", \"closingElement\", \"children\").field(\"openingElement\", def(\"JSXOpeningElement\")).field(\"closingElement\", or(def(\"JSXClosingElement\"), null), defaults[\"null\"]).field(\"children\", [\n        or(def(\"JSXElement\"), def(\"JSXExpressionContainer\"), def(\"JSXFragment\"), def(\"JSXText\"), def(\"Literal\") // TODO Esprima should return JSXText instead.\n        )\n    ], defaults.emptyArray).field(\"name\", JSXElementName, function() {\n        // Little-known fact: the `this` object inside a default function\n        // is none other than the partially-built object itself, and any\n        // fields initialized directly from builder function arguments\n        // (like openingElement, closingElement, and children) are\n        // guaranteed to be available.\n        return this.openingElement.name;\n    }, true) // hidden from traversal\n    .field(\"selfClosing\", Boolean, function() {\n        return this.openingElement.selfClosing;\n    }, true) // hidden from traversal\n    .field(\"attributes\", JSXAttributes, function() {\n        return this.openingElement.attributes;\n    }, true); // hidden from traversal\n    def(\"JSXOpeningElement\").bases(\"Node\") // TODO Does this make sense? Can't really be an JSXElement.\n    .build(\"name\", \"attributes\", \"selfClosing\").field(\"name\", JSXElementName).field(\"attributes\", JSXAttributes, defaults.emptyArray).field(\"selfClosing\", Boolean, defaults[\"false\"]);\n    def(\"JSXClosingElement\").bases(\"Node\") // TODO Same concern.\n    .build(\"name\").field(\"name\", JSXElementName);\n    def(\"JSXFragment\").bases(\"Expression\").build(\"openingElement\", \"closingElement\", \"children\").field(\"openingElement\", def(\"JSXOpeningFragment\")).field(\"closingElement\", def(\"JSXClosingFragment\")).field(\"children\", [\n        or(def(\"JSXElement\"), def(\"JSXExpressionContainer\"), def(\"JSXFragment\"), def(\"JSXText\"), def(\"Literal\") // TODO Esprima should return JSXText instead.\n        )\n    ], defaults.emptyArray);\n    def(\"JSXOpeningFragment\").bases(\"Node\") // TODO Same concern.\n    .build();\n    def(\"JSXClosingFragment\").bases(\"Node\") // TODO Same concern.\n    .build();\n    def(\"JSXText\").bases(\"Literal\").build(\"value\").field(\"value\", String);\n    def(\"JSXEmptyExpression\").bases(\"Expression\").build();\n    // This PR has caused many people issues, but supporting it seems like a\n    // good idea anyway: https://github.com/babel/babel/pull/4988\n    def(\"JSXSpreadChild\").bases(\"Expression\").build(\"expression\").field(\"expression\", def(\"Expression\"));\n}\nexports[\"default\"] = default_1;\nmodule.exports = exports[\"default\"];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ast-types/def/jsx.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ast-types/def/type-annotations.js":
/*!********************************************************!*\
  !*** ./node_modules/ast-types/def/type-annotations.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n;\n/**\n * Type annotation defs shared between Flow and TypeScript.\n * These defs could not be defined in ./flow.ts or ./typescript.ts directly\n * because they use the same name.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nvar types_1 = tslib_1.__importDefault(__webpack_require__(/*! ../lib/types */ \"(rsc)/./node_modules/ast-types/lib/types.js\"));\nvar shared_1 = tslib_1.__importDefault(__webpack_require__(/*! ../lib/shared */ \"(rsc)/./node_modules/ast-types/lib/shared.js\"));\nfunction default_1(fork) {\n    var types = fork.use(types_1.default);\n    var def = types.Type.def;\n    var or = types.Type.or;\n    var defaults = fork.use(shared_1.default).defaults;\n    var TypeAnnotation = or(def(\"TypeAnnotation\"), def(\"TSTypeAnnotation\"), null);\n    var TypeParamDecl = or(def(\"TypeParameterDeclaration\"), def(\"TSTypeParameterDeclaration\"), null);\n    def(\"Identifier\").field(\"typeAnnotation\", TypeAnnotation, defaults[\"null\"]);\n    def(\"ObjectPattern\").field(\"typeAnnotation\", TypeAnnotation, defaults[\"null\"]);\n    def(\"Function\").field(\"returnType\", TypeAnnotation, defaults[\"null\"]).field(\"typeParameters\", TypeParamDecl, defaults[\"null\"]);\n    def(\"ClassProperty\").build(\"key\", \"value\", \"typeAnnotation\", \"static\").field(\"value\", or(def(\"Expression\"), null)).field(\"static\", Boolean, defaults[\"false\"]).field(\"typeAnnotation\", TypeAnnotation, defaults[\"null\"]);\n    [\n        \"ClassDeclaration\",\n        \"ClassExpression\"\n    ].forEach(function(typeName) {\n        def(typeName).field(\"typeParameters\", TypeParamDecl, defaults[\"null\"]).field(\"superTypeParameters\", or(def(\"TypeParameterInstantiation\"), def(\"TSTypeParameterInstantiation\"), null), defaults[\"null\"]).field(\"implements\", or([\n            def(\"ClassImplements\")\n        ], [\n            def(\"TSExpressionWithTypeArguments\")\n        ]), defaults.emptyArray);\n    });\n}\nexports[\"default\"] = default_1;\nmodule.exports = exports[\"default\"];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYXN0LXR5cGVzL2RlZi90eXBlLWFubm90YXRpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUNiOzs7O0NBSUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsSUFBSUMsVUFBVUMsbUJBQU9BLENBQUMsdURBQU87QUFDN0IsSUFBSUMsVUFBVUYsUUFBUUcsZUFBZSxDQUFDRixtQkFBT0EsQ0FBQyxpRUFBYztBQUM1RCxJQUFJRyxXQUFXSixRQUFRRyxlQUFlLENBQUNGLG1CQUFPQSxDQUFDLG1FQUFlO0FBQzlELFNBQVNJLFVBQVVDLElBQUk7SUFDbkIsSUFBSUMsUUFBUUQsS0FBS0UsR0FBRyxDQUFDTixRQUFRTyxPQUFPO0lBQ3BDLElBQUlDLE1BQU1ILE1BQU1JLElBQUksQ0FBQ0QsR0FBRztJQUN4QixJQUFJRSxLQUFLTCxNQUFNSSxJQUFJLENBQUNDLEVBQUU7SUFDdEIsSUFBSUMsV0FBV1AsS0FBS0UsR0FBRyxDQUFDSixTQUFTSyxPQUFPLEVBQUVJLFFBQVE7SUFDbEQsSUFBSUMsaUJBQWlCRixHQUFHRixJQUFJLG1CQUFtQkEsSUFBSSxxQkFBcUI7SUFDeEUsSUFBSUssZ0JBQWdCSCxHQUFHRixJQUFJLDZCQUE2QkEsSUFBSSwrQkFBK0I7SUFDM0ZBLElBQUksY0FDQ00sS0FBSyxDQUFDLGtCQUFrQkYsZ0JBQWdCRCxRQUFRLENBQUMsT0FBTztJQUM3REgsSUFBSSxpQkFDQ00sS0FBSyxDQUFDLGtCQUFrQkYsZ0JBQWdCRCxRQUFRLENBQUMsT0FBTztJQUM3REgsSUFBSSxZQUNDTSxLQUFLLENBQUMsY0FBY0YsZ0JBQWdCRCxRQUFRLENBQUMsT0FBTyxFQUNwREcsS0FBSyxDQUFDLGtCQUFrQkQsZUFBZUYsUUFBUSxDQUFDLE9BQU87SUFDNURILElBQUksaUJBQ0NPLEtBQUssQ0FBQyxPQUFPLFNBQVMsa0JBQWtCLFVBQ3hDRCxLQUFLLENBQUMsU0FBU0osR0FBR0YsSUFBSSxlQUFlLE9BQ3JDTSxLQUFLLENBQUMsVUFBVUUsU0FBU0wsUUFBUSxDQUFDLFFBQVEsRUFDMUNHLEtBQUssQ0FBQyxrQkFBa0JGLGdCQUFnQkQsUUFBUSxDQUFDLE9BQU87SUFDN0Q7UUFBQztRQUNHO0tBQ0gsQ0FBQ00sT0FBTyxDQUFDLFNBQVVDLFFBQVE7UUFDeEJWLElBQUlVLFVBQ0NKLEtBQUssQ0FBQyxrQkFBa0JELGVBQWVGLFFBQVEsQ0FBQyxPQUFPLEVBQ3ZERyxLQUFLLENBQUMsdUJBQXVCSixHQUFHRixJQUFJLCtCQUErQkEsSUFBSSxpQ0FBaUMsT0FBT0csUUFBUSxDQUFDLE9BQU8sRUFDL0hHLEtBQUssQ0FBQyxjQUFjSixHQUFHO1lBQUNGLElBQUk7U0FBbUIsRUFBRTtZQUFDQSxJQUFJO1NBQWlDLEdBQUdHLFNBQVNRLFVBQVU7SUFDdEg7QUFDSjtBQUNBdkIsa0JBQWUsR0FBR087QUFDbEJpQixPQUFPeEIsT0FBTyxHQUFHQSxPQUFPLENBQUMsVUFBVSIsInNvdXJjZXMiOlsid2VicGFjazovL2NpdmlsLWVuZ2luZWVyaW5nLXBsYXRmb3JtLy4vbm9kZV9tb2R1bGVzL2FzdC10eXBlcy9kZWYvdHlwZS1hbm5vdGF0aW9ucy5qcz9mMDA4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiOztcbi8qKlxuICogVHlwZSBhbm5vdGF0aW9uIGRlZnMgc2hhcmVkIGJldHdlZW4gRmxvdyBhbmQgVHlwZVNjcmlwdC5cbiAqIFRoZXNlIGRlZnMgY291bGQgbm90IGJlIGRlZmluZWQgaW4gLi9mbG93LnRzIG9yIC4vdHlwZXNjcmlwdC50cyBkaXJlY3RseVxuICogYmVjYXVzZSB0aGV5IHVzZSB0aGUgc2FtZSBuYW1lLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbnZhciB0eXBlc18xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL2xpYi90eXBlc1wiKSk7XG52YXIgc2hhcmVkXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vbGliL3NoYXJlZFwiKSk7XG5mdW5jdGlvbiBkZWZhdWx0XzEoZm9yaykge1xuICAgIHZhciB0eXBlcyA9IGZvcmsudXNlKHR5cGVzXzEuZGVmYXVsdCk7XG4gICAgdmFyIGRlZiA9IHR5cGVzLlR5cGUuZGVmO1xuICAgIHZhciBvciA9IHR5cGVzLlR5cGUub3I7XG4gICAgdmFyIGRlZmF1bHRzID0gZm9yay51c2Uoc2hhcmVkXzEuZGVmYXVsdCkuZGVmYXVsdHM7XG4gICAgdmFyIFR5cGVBbm5vdGF0aW9uID0gb3IoZGVmKFwiVHlwZUFubm90YXRpb25cIiksIGRlZihcIlRTVHlwZUFubm90YXRpb25cIiksIG51bGwpO1xuICAgIHZhciBUeXBlUGFyYW1EZWNsID0gb3IoZGVmKFwiVHlwZVBhcmFtZXRlckRlY2xhcmF0aW9uXCIpLCBkZWYoXCJUU1R5cGVQYXJhbWV0ZXJEZWNsYXJhdGlvblwiKSwgbnVsbCk7XG4gICAgZGVmKFwiSWRlbnRpZmllclwiKVxuICAgICAgICAuZmllbGQoXCJ0eXBlQW5ub3RhdGlvblwiLCBUeXBlQW5ub3RhdGlvbiwgZGVmYXVsdHNbXCJudWxsXCJdKTtcbiAgICBkZWYoXCJPYmplY3RQYXR0ZXJuXCIpXG4gICAgICAgIC5maWVsZChcInR5cGVBbm5vdGF0aW9uXCIsIFR5cGVBbm5vdGF0aW9uLCBkZWZhdWx0c1tcIm51bGxcIl0pO1xuICAgIGRlZihcIkZ1bmN0aW9uXCIpXG4gICAgICAgIC5maWVsZChcInJldHVyblR5cGVcIiwgVHlwZUFubm90YXRpb24sIGRlZmF1bHRzW1wibnVsbFwiXSlcbiAgICAgICAgLmZpZWxkKFwidHlwZVBhcmFtZXRlcnNcIiwgVHlwZVBhcmFtRGVjbCwgZGVmYXVsdHNbXCJudWxsXCJdKTtcbiAgICBkZWYoXCJDbGFzc1Byb3BlcnR5XCIpXG4gICAgICAgIC5idWlsZChcImtleVwiLCBcInZhbHVlXCIsIFwidHlwZUFubm90YXRpb25cIiwgXCJzdGF0aWNcIilcbiAgICAgICAgLmZpZWxkKFwidmFsdWVcIiwgb3IoZGVmKFwiRXhwcmVzc2lvblwiKSwgbnVsbCkpXG4gICAgICAgIC5maWVsZChcInN0YXRpY1wiLCBCb29sZWFuLCBkZWZhdWx0c1tcImZhbHNlXCJdKVxuICAgICAgICAuZmllbGQoXCJ0eXBlQW5ub3RhdGlvblwiLCBUeXBlQW5ub3RhdGlvbiwgZGVmYXVsdHNbXCJudWxsXCJdKTtcbiAgICBbXCJDbGFzc0RlY2xhcmF0aW9uXCIsXG4gICAgICAgIFwiQ2xhc3NFeHByZXNzaW9uXCIsXG4gICAgXS5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlTmFtZSkge1xuICAgICAgICBkZWYodHlwZU5hbWUpXG4gICAgICAgICAgICAuZmllbGQoXCJ0eXBlUGFyYW1ldGVyc1wiLCBUeXBlUGFyYW1EZWNsLCBkZWZhdWx0c1tcIm51bGxcIl0pXG4gICAgICAgICAgICAuZmllbGQoXCJzdXBlclR5cGVQYXJhbWV0ZXJzXCIsIG9yKGRlZihcIlR5cGVQYXJhbWV0ZXJJbnN0YW50aWF0aW9uXCIpLCBkZWYoXCJUU1R5cGVQYXJhbWV0ZXJJbnN0YW50aWF0aW9uXCIpLCBudWxsKSwgZGVmYXVsdHNbXCJudWxsXCJdKVxuICAgICAgICAgICAgLmZpZWxkKFwiaW1wbGVtZW50c1wiLCBvcihbZGVmKFwiQ2xhc3NJbXBsZW1lbnRzXCIpXSwgW2RlZihcIlRTRXhwcmVzc2lvbldpdGhUeXBlQXJndW1lbnRzXCIpXSksIGRlZmF1bHRzLmVtcHR5QXJyYXkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gZGVmYXVsdF8xO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRzbGliXzEiLCJyZXF1aXJlIiwidHlwZXNfMSIsIl9faW1wb3J0RGVmYXVsdCIsInNoYXJlZF8xIiwiZGVmYXVsdF8xIiwiZm9yayIsInR5cGVzIiwidXNlIiwiZGVmYXVsdCIsImRlZiIsIlR5cGUiLCJvciIsImRlZmF1bHRzIiwiVHlwZUFubm90YXRpb24iLCJUeXBlUGFyYW1EZWNsIiwiZmllbGQiLCJidWlsZCIsIkJvb2xlYW4iLCJmb3JFYWNoIiwidHlwZU5hbWUiLCJlbXB0eUFycmF5IiwibW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ast-types/def/type-annotations.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ast-types/def/typescript.js":
/*!**************************************************!*\
  !*** ./node_modules/ast-types/def/typescript.js ***!
  \**************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nvar babel_core_1 = tslib_1.__importDefault(__webpack_require__(/*! ./babel-core */ \"(rsc)/./node_modules/ast-types/def/babel-core.js\"));\nvar type_annotations_1 = tslib_1.__importDefault(__webpack_require__(/*! ./type-annotations */ \"(rsc)/./node_modules/ast-types/def/type-annotations.js\"));\nvar types_1 = tslib_1.__importDefault(__webpack_require__(/*! ../lib/types */ \"(rsc)/./node_modules/ast-types/lib/types.js\"));\nvar shared_1 = tslib_1.__importDefault(__webpack_require__(/*! ../lib/shared */ \"(rsc)/./node_modules/ast-types/lib/shared.js\"));\nfunction default_1(fork) {\n    // Since TypeScript is parsed by Babylon, include the core Babylon types\n    // but omit the Flow-related types.\n    fork.use(babel_core_1.default);\n    fork.use(type_annotations_1.default);\n    var types = fork.use(types_1.default);\n    var n = types.namedTypes;\n    var def = types.Type.def;\n    var or = types.Type.or;\n    var defaults = fork.use(shared_1.default).defaults;\n    var StringLiteral = types.Type.from(function(value, deep) {\n        if (n.StringLiteral && n.StringLiteral.check(value, deep)) {\n            return true;\n        }\n        if (n.Literal && n.Literal.check(value, deep) && typeof value.value === \"string\") {\n            return true;\n        }\n        return false;\n    }, \"StringLiteral\");\n    def(\"TSType\").bases(\"Node\");\n    var TSEntityName = or(def(\"Identifier\"), def(\"TSQualifiedName\"));\n    def(\"TSTypeReference\").bases(\"TSType\", \"TSHasOptionalTypeParameterInstantiation\").build(\"typeName\", \"typeParameters\").field(\"typeName\", TSEntityName);\n    // An abstract (non-buildable) base type that provide a commonly-needed\n    // optional .typeParameters field.\n    def(\"TSHasOptionalTypeParameterInstantiation\").field(\"typeParameters\", or(def(\"TSTypeParameterInstantiation\"), null), defaults[\"null\"]);\n    // An abstract (non-buildable) base type that provide a commonly-needed\n    // optional .typeParameters field.\n    def(\"TSHasOptionalTypeParameters\").field(\"typeParameters\", or(def(\"TSTypeParameterDeclaration\"), null, void 0), defaults[\"null\"]);\n    // An abstract (non-buildable) base type that provide a commonly-needed\n    // optional .typeAnnotation field.\n    def(\"TSHasOptionalTypeAnnotation\").field(\"typeAnnotation\", or(def(\"TSTypeAnnotation\"), null), defaults[\"null\"]);\n    def(\"TSQualifiedName\").bases(\"Node\").build(\"left\", \"right\").field(\"left\", TSEntityName).field(\"right\", TSEntityName);\n    def(\"TSAsExpression\").bases(\"Expression\", \"Pattern\").build(\"expression\", \"typeAnnotation\").field(\"expression\", def(\"Expression\")).field(\"typeAnnotation\", def(\"TSType\")).field(\"extra\", or({\n        parenthesized: Boolean\n    }, null), defaults[\"null\"]);\n    def(\"TSNonNullExpression\").bases(\"Expression\", \"Pattern\").build(\"expression\").field(\"expression\", def(\"Expression\"));\n    [\n        \"TSAnyKeyword\",\n        \"TSBigIntKeyword\",\n        \"TSBooleanKeyword\",\n        \"TSNeverKeyword\",\n        \"TSNullKeyword\",\n        \"TSNumberKeyword\",\n        \"TSObjectKeyword\",\n        \"TSStringKeyword\",\n        \"TSSymbolKeyword\",\n        \"TSUndefinedKeyword\",\n        \"TSUnknownKeyword\",\n        \"TSVoidKeyword\",\n        \"TSThisType\"\n    ].forEach(function(keywordType) {\n        def(keywordType).bases(\"TSType\").build();\n    });\n    def(\"TSArrayType\").bases(\"TSType\").build(\"elementType\").field(\"elementType\", def(\"TSType\"));\n    def(\"TSLiteralType\").bases(\"TSType\").build(\"literal\").field(\"literal\", or(def(\"NumericLiteral\"), def(\"StringLiteral\"), def(\"BooleanLiteral\"), def(\"TemplateLiteral\"), def(\"UnaryExpression\")));\n    [\n        \"TSUnionType\",\n        \"TSIntersectionType\"\n    ].forEach(function(typeName) {\n        def(typeName).bases(\"TSType\").build(\"types\").field(\"types\", [\n            def(\"TSType\")\n        ]);\n    });\n    def(\"TSConditionalType\").bases(\"TSType\").build(\"checkType\", \"extendsType\", \"trueType\", \"falseType\").field(\"checkType\", def(\"TSType\")).field(\"extendsType\", def(\"TSType\")).field(\"trueType\", def(\"TSType\")).field(\"falseType\", def(\"TSType\"));\n    def(\"TSInferType\").bases(\"TSType\").build(\"typeParameter\").field(\"typeParameter\", def(\"TSTypeParameter\"));\n    def(\"TSParenthesizedType\").bases(\"TSType\").build(\"typeAnnotation\").field(\"typeAnnotation\", def(\"TSType\"));\n    var ParametersType = [\n        or(def(\"Identifier\"), def(\"RestElement\"), def(\"ArrayPattern\"), def(\"ObjectPattern\"))\n    ];\n    [\n        \"TSFunctionType\",\n        \"TSConstructorType\"\n    ].forEach(function(typeName) {\n        def(typeName).bases(\"TSType\", \"TSHasOptionalTypeParameters\", \"TSHasOptionalTypeAnnotation\").build(\"parameters\").field(\"parameters\", ParametersType);\n    });\n    def(\"TSDeclareFunction\").bases(\"Declaration\", \"TSHasOptionalTypeParameters\").build(\"id\", \"params\", \"returnType\").field(\"declare\", Boolean, defaults[\"false\"]).field(\"async\", Boolean, defaults[\"false\"]).field(\"generator\", Boolean, defaults[\"false\"]).field(\"id\", or(def(\"Identifier\"), null), defaults[\"null\"]).field(\"params\", [\n        def(\"Pattern\")\n    ])// tSFunctionTypeAnnotationCommon\n    .field(\"returnType\", or(def(\"TSTypeAnnotation\"), def(\"Noop\"), null), defaults[\"null\"]);\n    def(\"TSDeclareMethod\").bases(\"Declaration\", \"TSHasOptionalTypeParameters\").build(\"key\", \"params\", \"returnType\").field(\"async\", Boolean, defaults[\"false\"]).field(\"generator\", Boolean, defaults[\"false\"]).field(\"params\", [\n        def(\"Pattern\")\n    ])// classMethodOrPropertyCommon\n    .field(\"abstract\", Boolean, defaults[\"false\"]).field(\"accessibility\", or(\"public\", \"private\", \"protected\", void 0), defaults[\"undefined\"]).field(\"static\", Boolean, defaults[\"false\"]).field(\"computed\", Boolean, defaults[\"false\"]).field(\"optional\", Boolean, defaults[\"false\"]).field(\"key\", or(def(\"Identifier\"), def(\"StringLiteral\"), def(\"NumericLiteral\"), // Only allowed if .computed is true.\n    def(\"Expression\")))// classMethodOrDeclareMethodCommon\n    .field(\"kind\", or(\"get\", \"set\", \"method\", \"constructor\"), function getDefault() {\n        return \"method\";\n    }).field(\"access\", or(\"public\", \"private\", \"protected\", void 0), defaults[\"undefined\"]).field(\"decorators\", or([\n        def(\"Decorator\")\n    ], null), defaults[\"null\"])// tSFunctionTypeAnnotationCommon\n    .field(\"returnType\", or(def(\"TSTypeAnnotation\"), def(\"Noop\"), null), defaults[\"null\"]);\n    def(\"TSMappedType\").bases(\"TSType\").build(\"typeParameter\", \"typeAnnotation\").field(\"readonly\", or(Boolean, \"+\", \"-\"), defaults[\"false\"]).field(\"typeParameter\", def(\"TSTypeParameter\")).field(\"optional\", or(Boolean, \"+\", \"-\"), defaults[\"false\"]).field(\"typeAnnotation\", or(def(\"TSType\"), null), defaults[\"null\"]);\n    def(\"TSTupleType\").bases(\"TSType\").build(\"elementTypes\").field(\"elementTypes\", [\n        or(def(\"TSType\"), def(\"TSNamedTupleMember\"))\n    ]);\n    def(\"TSNamedTupleMember\").bases(\"TSType\").build(\"label\", \"elementType\", \"optional\").field(\"label\", def(\"Identifier\")).field(\"optional\", Boolean, defaults[\"false\"]).field(\"elementType\", def(\"TSType\"));\n    def(\"TSRestType\").bases(\"TSType\").build(\"typeAnnotation\").field(\"typeAnnotation\", def(\"TSType\"));\n    def(\"TSOptionalType\").bases(\"TSType\").build(\"typeAnnotation\").field(\"typeAnnotation\", def(\"TSType\"));\n    def(\"TSIndexedAccessType\").bases(\"TSType\").build(\"objectType\", \"indexType\").field(\"objectType\", def(\"TSType\")).field(\"indexType\", def(\"TSType\"));\n    def(\"TSTypeOperator\").bases(\"TSType\").build(\"operator\").field(\"operator\", String).field(\"typeAnnotation\", def(\"TSType\"));\n    def(\"TSTypeAnnotation\").bases(\"Node\").build(\"typeAnnotation\").field(\"typeAnnotation\", or(def(\"TSType\"), def(\"TSTypeAnnotation\")));\n    def(\"TSIndexSignature\").bases(\"Declaration\", \"TSHasOptionalTypeAnnotation\").build(\"parameters\", \"typeAnnotation\").field(\"parameters\", [\n        def(\"Identifier\")\n    ]) // Length === 1\n    .field(\"readonly\", Boolean, defaults[\"false\"]);\n    def(\"TSPropertySignature\").bases(\"Declaration\", \"TSHasOptionalTypeAnnotation\").build(\"key\", \"typeAnnotation\", \"optional\").field(\"key\", def(\"Expression\")).field(\"computed\", Boolean, defaults[\"false\"]).field(\"readonly\", Boolean, defaults[\"false\"]).field(\"optional\", Boolean, defaults[\"false\"]).field(\"initializer\", or(def(\"Expression\"), null), defaults[\"null\"]);\n    def(\"TSMethodSignature\").bases(\"Declaration\", \"TSHasOptionalTypeParameters\", \"TSHasOptionalTypeAnnotation\").build(\"key\", \"parameters\", \"typeAnnotation\").field(\"key\", def(\"Expression\")).field(\"computed\", Boolean, defaults[\"false\"]).field(\"optional\", Boolean, defaults[\"false\"]).field(\"parameters\", ParametersType);\n    def(\"TSTypePredicate\").bases(\"TSTypeAnnotation\", \"TSType\").build(\"parameterName\", \"typeAnnotation\", \"asserts\").field(\"parameterName\", or(def(\"Identifier\"), def(\"TSThisType\"))).field(\"typeAnnotation\", or(def(\"TSTypeAnnotation\"), null), defaults[\"null\"]).field(\"asserts\", Boolean, defaults[\"false\"]);\n    [\n        \"TSCallSignatureDeclaration\",\n        \"TSConstructSignatureDeclaration\"\n    ].forEach(function(typeName) {\n        def(typeName).bases(\"Declaration\", \"TSHasOptionalTypeParameters\", \"TSHasOptionalTypeAnnotation\").build(\"parameters\", \"typeAnnotation\").field(\"parameters\", ParametersType);\n    });\n    def(\"TSEnumMember\").bases(\"Node\").build(\"id\", \"initializer\").field(\"id\", or(def(\"Identifier\"), StringLiteral)).field(\"initializer\", or(def(\"Expression\"), null), defaults[\"null\"]);\n    def(\"TSTypeQuery\").bases(\"TSType\").build(\"exprName\").field(\"exprName\", or(TSEntityName, def(\"TSImportType\")));\n    // Inferred from Babylon's tsParseTypeMember method.\n    var TSTypeMember = or(def(\"TSCallSignatureDeclaration\"), def(\"TSConstructSignatureDeclaration\"), def(\"TSIndexSignature\"), def(\"TSMethodSignature\"), def(\"TSPropertySignature\"));\n    def(\"TSTypeLiteral\").bases(\"TSType\").build(\"members\").field(\"members\", [\n        TSTypeMember\n    ]);\n    def(\"TSTypeParameter\").bases(\"Identifier\").build(\"name\", \"constraint\", \"default\").field(\"name\", String).field(\"constraint\", or(def(\"TSType\"), void 0), defaults[\"undefined\"]).field(\"default\", or(def(\"TSType\"), void 0), defaults[\"undefined\"]);\n    def(\"TSTypeAssertion\").bases(\"Expression\", \"Pattern\").build(\"typeAnnotation\", \"expression\").field(\"typeAnnotation\", def(\"TSType\")).field(\"expression\", def(\"Expression\")).field(\"extra\", or({\n        parenthesized: Boolean\n    }, null), defaults[\"null\"]);\n    def(\"TSTypeParameterDeclaration\").bases(\"Declaration\").build(\"params\").field(\"params\", [\n        def(\"TSTypeParameter\")\n    ]);\n    def(\"TSTypeParameterInstantiation\").bases(\"Node\").build(\"params\").field(\"params\", [\n        def(\"TSType\")\n    ]);\n    def(\"TSEnumDeclaration\").bases(\"Declaration\").build(\"id\", \"members\").field(\"id\", def(\"Identifier\")).field(\"const\", Boolean, defaults[\"false\"]).field(\"declare\", Boolean, defaults[\"false\"]).field(\"members\", [\n        def(\"TSEnumMember\")\n    ]).field(\"initializer\", or(def(\"Expression\"), null), defaults[\"null\"]);\n    def(\"TSTypeAliasDeclaration\").bases(\"Declaration\", \"TSHasOptionalTypeParameters\").build(\"id\", \"typeAnnotation\").field(\"id\", def(\"Identifier\")).field(\"declare\", Boolean, defaults[\"false\"]).field(\"typeAnnotation\", def(\"TSType\"));\n    def(\"TSModuleBlock\").bases(\"Node\").build(\"body\").field(\"body\", [\n        def(\"Statement\")\n    ]);\n    def(\"TSModuleDeclaration\").bases(\"Declaration\").build(\"id\", \"body\").field(\"id\", or(StringLiteral, TSEntityName)).field(\"declare\", Boolean, defaults[\"false\"]).field(\"global\", Boolean, defaults[\"false\"]).field(\"body\", or(def(\"TSModuleBlock\"), def(\"TSModuleDeclaration\"), null), defaults[\"null\"]);\n    def(\"TSImportType\").bases(\"TSType\", \"TSHasOptionalTypeParameterInstantiation\").build(\"argument\", \"qualifier\", \"typeParameters\").field(\"argument\", StringLiteral).field(\"qualifier\", or(TSEntityName, void 0), defaults[\"undefined\"]);\n    def(\"TSImportEqualsDeclaration\").bases(\"Declaration\").build(\"id\", \"moduleReference\").field(\"id\", def(\"Identifier\")).field(\"isExport\", Boolean, defaults[\"false\"]).field(\"moduleReference\", or(TSEntityName, def(\"TSExternalModuleReference\")));\n    def(\"TSExternalModuleReference\").bases(\"Declaration\").build(\"expression\").field(\"expression\", StringLiteral);\n    def(\"TSExportAssignment\").bases(\"Statement\").build(\"expression\").field(\"expression\", def(\"Expression\"));\n    def(\"TSNamespaceExportDeclaration\").bases(\"Declaration\").build(\"id\").field(\"id\", def(\"Identifier\"));\n    def(\"TSInterfaceBody\").bases(\"Node\").build(\"body\").field(\"body\", [\n        TSTypeMember\n    ]);\n    def(\"TSExpressionWithTypeArguments\").bases(\"TSType\", \"TSHasOptionalTypeParameterInstantiation\").build(\"expression\", \"typeParameters\").field(\"expression\", TSEntityName);\n    def(\"TSInterfaceDeclaration\").bases(\"Declaration\", \"TSHasOptionalTypeParameters\").build(\"id\", \"body\").field(\"id\", TSEntityName).field(\"declare\", Boolean, defaults[\"false\"]).field(\"extends\", or([\n        def(\"TSExpressionWithTypeArguments\")\n    ], null), defaults[\"null\"]).field(\"body\", def(\"TSInterfaceBody\"));\n    def(\"TSParameterProperty\").bases(\"Pattern\").build(\"parameter\").field(\"accessibility\", or(\"public\", \"private\", \"protected\", void 0), defaults[\"undefined\"]).field(\"readonly\", Boolean, defaults[\"false\"]).field(\"parameter\", or(def(\"Identifier\"), def(\"AssignmentPattern\")));\n    def(\"ClassProperty\").field(\"access\", or(\"public\", \"private\", \"protected\", void 0), defaults[\"undefined\"]);\n    // Defined already in es6 and babel-core.\n    def(\"ClassBody\").field(\"body\", [\n        or(def(\"MethodDefinition\"), def(\"VariableDeclarator\"), def(\"ClassPropertyDefinition\"), def(\"ClassProperty\"), def(\"ClassPrivateProperty\"), def(\"ClassMethod\"), def(\"ClassPrivateMethod\"), // Just need to add these types:\n        def(\"TSDeclareMethod\"), TSTypeMember)\n    ]);\n}\nexports[\"default\"] = default_1;\nmodule.exports = exports[\"default\"];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYXN0LXR5cGVzL2RlZi90eXBlc2NyaXB0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxJQUFJQyxVQUFVQyxtQkFBT0EsQ0FBQyx1REFBTztBQUM3QixJQUFJQyxlQUFlRixRQUFRRyxlQUFlLENBQUNGLG1CQUFPQSxDQUFDLHNFQUFjO0FBQ2pFLElBQUlHLHFCQUFxQkosUUFBUUcsZUFBZSxDQUFDRixtQkFBT0EsQ0FBQyxrRkFBb0I7QUFDN0UsSUFBSUksVUFBVUwsUUFBUUcsZUFBZSxDQUFDRixtQkFBT0EsQ0FBQyxpRUFBYztBQUM1RCxJQUFJSyxXQUFXTixRQUFRRyxlQUFlLENBQUNGLG1CQUFPQSxDQUFDLG1FQUFlO0FBQzlELFNBQVNNLFVBQVVDLElBQUk7SUFDbkIsd0VBQXdFO0lBQ3hFLG1DQUFtQztJQUNuQ0EsS0FBS0MsR0FBRyxDQUFDUCxhQUFhUSxPQUFPO0lBQzdCRixLQUFLQyxHQUFHLENBQUNMLG1CQUFtQk0sT0FBTztJQUNuQyxJQUFJQyxRQUFRSCxLQUFLQyxHQUFHLENBQUNKLFFBQVFLLE9BQU87SUFDcEMsSUFBSUUsSUFBSUQsTUFBTUUsVUFBVTtJQUN4QixJQUFJQyxNQUFNSCxNQUFNSSxJQUFJLENBQUNELEdBQUc7SUFDeEIsSUFBSUUsS0FBS0wsTUFBTUksSUFBSSxDQUFDQyxFQUFFO0lBQ3RCLElBQUlDLFdBQVdULEtBQUtDLEdBQUcsQ0FBQ0gsU0FBU0ksT0FBTyxFQUFFTyxRQUFRO0lBQ2xELElBQUlDLGdCQUFnQlAsTUFBTUksSUFBSSxDQUFDSSxJQUFJLENBQUMsU0FBVXBCLEtBQUssRUFBRXFCLElBQUk7UUFDckQsSUFBSVIsRUFBRU0sYUFBYSxJQUNmTixFQUFFTSxhQUFhLENBQUNHLEtBQUssQ0FBQ3RCLE9BQU9xQixPQUFPO1lBQ3BDLE9BQU87UUFDWDtRQUNBLElBQUlSLEVBQUVVLE9BQU8sSUFDVFYsRUFBRVUsT0FBTyxDQUFDRCxLQUFLLENBQUN0QixPQUFPcUIsU0FDdkIsT0FBT3JCLE1BQU1BLEtBQUssS0FBSyxVQUFVO1lBQ2pDLE9BQU87UUFDWDtRQUNBLE9BQU87SUFDWCxHQUFHO0lBQ0hlLElBQUksVUFDQ1MsS0FBSyxDQUFDO0lBQ1gsSUFBSUMsZUFBZVIsR0FBR0YsSUFBSSxlQUFlQSxJQUFJO0lBQzdDQSxJQUFJLG1CQUNDUyxLQUFLLENBQUMsVUFBVSwyQ0FDaEJFLEtBQUssQ0FBQyxZQUFZLGtCQUNsQkMsS0FBSyxDQUFDLFlBQVlGO0lBQ3ZCLHVFQUF1RTtJQUN2RSxrQ0FBa0M7SUFDbENWLElBQUksMkNBQ0NZLEtBQUssQ0FBQyxrQkFBa0JWLEdBQUdGLElBQUksaUNBQWlDLE9BQU9HLFFBQVEsQ0FBQyxPQUFPO0lBQzVGLHVFQUF1RTtJQUN2RSxrQ0FBa0M7SUFDbENILElBQUksK0JBQ0NZLEtBQUssQ0FBQyxrQkFBa0JWLEdBQUdGLElBQUksK0JBQStCLE1BQU0sS0FBSyxJQUFJRyxRQUFRLENBQUMsT0FBTztJQUNsRyx1RUFBdUU7SUFDdkUsa0NBQWtDO0lBQ2xDSCxJQUFJLCtCQUNDWSxLQUFLLENBQUMsa0JBQWtCVixHQUFHRixJQUFJLHFCQUFxQixPQUFPRyxRQUFRLENBQUMsT0FBTztJQUNoRkgsSUFBSSxtQkFDQ1MsS0FBSyxDQUFDLFFBQ05FLEtBQUssQ0FBQyxRQUFRLFNBQ2RDLEtBQUssQ0FBQyxRQUFRRixjQUNkRSxLQUFLLENBQUMsU0FBU0Y7SUFDcEJWLElBQUksa0JBQ0NTLEtBQUssQ0FBQyxjQUFjLFdBQ3BCRSxLQUFLLENBQUMsY0FBYyxrQkFDcEJDLEtBQUssQ0FBQyxjQUFjWixJQUFJLGVBQ3hCWSxLQUFLLENBQUMsa0JBQWtCWixJQUFJLFdBQzVCWSxLQUFLLENBQUMsU0FBU1YsR0FBRztRQUFFVyxlQUFlQztJQUFRLEdBQUcsT0FBT1gsUUFBUSxDQUFDLE9BQU87SUFDMUVILElBQUksdUJBQ0NTLEtBQUssQ0FBQyxjQUFjLFdBQ3BCRSxLQUFLLENBQUMsY0FDTkMsS0FBSyxDQUFDLGNBQWNaLElBQUk7SUFDN0I7UUFDSTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtLQUNILENBQUNlLE9BQU8sQ0FBQyxTQUFVQyxXQUFXO1FBQzNCaEIsSUFBSWdCLGFBQ0NQLEtBQUssQ0FBQyxVQUNORSxLQUFLO0lBQ2Q7SUFDQVgsSUFBSSxlQUNDUyxLQUFLLENBQUMsVUFDTkUsS0FBSyxDQUFDLGVBQ05DLEtBQUssQ0FBQyxlQUFlWixJQUFJO0lBQzlCQSxJQUFJLGlCQUNDUyxLQUFLLENBQUMsVUFDTkUsS0FBSyxDQUFDLFdBQ05DLEtBQUssQ0FBQyxXQUFXVixHQUFHRixJQUFJLG1CQUFtQkEsSUFBSSxrQkFBa0JBLElBQUksbUJBQW1CQSxJQUFJLG9CQUFvQkEsSUFBSTtJQUN6SDtRQUFDO1FBQ0c7S0FDSCxDQUFDZSxPQUFPLENBQUMsU0FBVUUsUUFBUTtRQUN4QmpCLElBQUlpQixVQUNDUixLQUFLLENBQUMsVUFDTkUsS0FBSyxDQUFDLFNBQ05DLEtBQUssQ0FBQyxTQUFTO1lBQUNaLElBQUk7U0FBVTtJQUN2QztJQUNBQSxJQUFJLHFCQUNDUyxLQUFLLENBQUMsVUFDTkUsS0FBSyxDQUFDLGFBQWEsZUFBZSxZQUFZLGFBQzlDQyxLQUFLLENBQUMsYUFBYVosSUFBSSxXQUN2QlksS0FBSyxDQUFDLGVBQWVaLElBQUksV0FDekJZLEtBQUssQ0FBQyxZQUFZWixJQUFJLFdBQ3RCWSxLQUFLLENBQUMsYUFBYVosSUFBSTtJQUM1QkEsSUFBSSxlQUNDUyxLQUFLLENBQUMsVUFDTkUsS0FBSyxDQUFDLGlCQUNOQyxLQUFLLENBQUMsaUJBQWlCWixJQUFJO0lBQ2hDQSxJQUFJLHVCQUNDUyxLQUFLLENBQUMsVUFDTkUsS0FBSyxDQUFDLGtCQUNOQyxLQUFLLENBQUMsa0JBQWtCWixJQUFJO0lBQ2pDLElBQUlrQixpQkFBaUI7UUFBQ2hCLEdBQUdGLElBQUksZUFBZUEsSUFBSSxnQkFBZ0JBLElBQUksaUJBQWlCQSxJQUFJO0tBQWtCO0lBQzNHO1FBQUM7UUFDRztLQUNILENBQUNlLE9BQU8sQ0FBQyxTQUFVRSxRQUFRO1FBQ3hCakIsSUFBSWlCLFVBQ0NSLEtBQUssQ0FBQyxVQUFVLCtCQUErQiwrQkFDL0NFLEtBQUssQ0FBQyxjQUNOQyxLQUFLLENBQUMsY0FBY007SUFDN0I7SUFDQWxCLElBQUkscUJBQ0NTLEtBQUssQ0FBQyxlQUFlLCtCQUNyQkUsS0FBSyxDQUFDLE1BQU0sVUFBVSxjQUN0QkMsS0FBSyxDQUFDLFdBQVdFLFNBQVNYLFFBQVEsQ0FBQyxRQUFRLEVBQzNDUyxLQUFLLENBQUMsU0FBU0UsU0FBU1gsUUFBUSxDQUFDLFFBQVEsRUFDekNTLEtBQUssQ0FBQyxhQUFhRSxTQUFTWCxRQUFRLENBQUMsUUFBUSxFQUM3Q1MsS0FBSyxDQUFDLE1BQU1WLEdBQUdGLElBQUksZUFBZSxPQUFPRyxRQUFRLENBQUMsT0FBTyxFQUN6RFMsS0FBSyxDQUFDLFVBQVU7UUFBQ1osSUFBSTtLQUFXLENBQ2pDLGlDQUFpQztLQUNoQ1ksS0FBSyxDQUFDLGNBQWNWLEdBQUdGLElBQUkscUJBQXFCQSxJQUFJLFNBQ3pELE9BQU9HLFFBQVEsQ0FBQyxPQUFPO0lBQ3ZCSCxJQUFJLG1CQUNDUyxLQUFLLENBQUMsZUFBZSwrQkFDckJFLEtBQUssQ0FBQyxPQUFPLFVBQVUsY0FDdkJDLEtBQUssQ0FBQyxTQUFTRSxTQUFTWCxRQUFRLENBQUMsUUFBUSxFQUN6Q1MsS0FBSyxDQUFDLGFBQWFFLFNBQVNYLFFBQVEsQ0FBQyxRQUFRLEVBQzdDUyxLQUFLLENBQUMsVUFBVTtRQUFDWixJQUFJO0tBQVcsQ0FDakMsOEJBQThCO0tBQzdCWSxLQUFLLENBQUMsWUFBWUUsU0FBU1gsUUFBUSxDQUFDLFFBQVEsRUFDNUNTLEtBQUssQ0FBQyxpQkFBaUJWLEdBQUcsVUFBVSxXQUFXLGFBQWEsS0FBSyxJQUFJQyxRQUFRLENBQUMsWUFBWSxFQUMxRlMsS0FBSyxDQUFDLFVBQVVFLFNBQVNYLFFBQVEsQ0FBQyxRQUFRLEVBQzFDUyxLQUFLLENBQUMsWUFBWUUsU0FBU1gsUUFBUSxDQUFDLFFBQVEsRUFDNUNTLEtBQUssQ0FBQyxZQUFZRSxTQUFTWCxRQUFRLENBQUMsUUFBUSxFQUM1Q1MsS0FBSyxDQUFDLE9BQU9WLEdBQUdGLElBQUksZUFBZUEsSUFBSSxrQkFBa0JBLElBQUksbUJBQ2xFLHFDQUFxQztJQUNyQ0EsSUFBSSxlQUNBLG1DQUFtQztLQUNsQ1ksS0FBSyxDQUFDLFFBQVFWLEdBQUcsT0FBTyxPQUFPLFVBQVUsZ0JBQWdCLFNBQVNpQjtRQUFlLE9BQU87SUFBVSxHQUNsR1AsS0FBSyxDQUFDLFVBQ1hWLEdBQUcsVUFBVSxXQUFXLGFBQWEsS0FBSyxJQUFJQyxRQUFRLENBQUMsWUFBWSxFQUM5RFMsS0FBSyxDQUFDLGNBQWNWLEdBQUc7UUFBQ0YsSUFBSTtLQUFhLEVBQUUsT0FBT0csUUFBUSxDQUFDLE9BQU8sQ0FDbkUsaUNBQWlDO0tBQ2hDUyxLQUFLLENBQUMsY0FBY1YsR0FBR0YsSUFBSSxxQkFBcUJBLElBQUksU0FDekQsT0FBT0csUUFBUSxDQUFDLE9BQU87SUFDdkJILElBQUksZ0JBQ0NTLEtBQUssQ0FBQyxVQUNORSxLQUFLLENBQUMsaUJBQWlCLGtCQUN2QkMsS0FBSyxDQUFDLFlBQVlWLEdBQUdZLFNBQVMsS0FBSyxNQUFNWCxRQUFRLENBQUMsUUFBUSxFQUMxRFMsS0FBSyxDQUFDLGlCQUFpQlosSUFBSSxvQkFDM0JZLEtBQUssQ0FBQyxZQUFZVixHQUFHWSxTQUFTLEtBQUssTUFBTVgsUUFBUSxDQUFDLFFBQVEsRUFDMURTLEtBQUssQ0FBQyxrQkFBa0JWLEdBQUdGLElBQUksV0FBVyxPQUFPRyxRQUFRLENBQUMsT0FBTztJQUN0RUgsSUFBSSxlQUNDUyxLQUFLLENBQUMsVUFDTkUsS0FBSyxDQUFDLGdCQUNOQyxLQUFLLENBQUMsZ0JBQWdCO1FBQUNWLEdBQUdGLElBQUksV0FBV0EsSUFBSTtLQUF1QjtJQUN6RUEsSUFBSSxzQkFDQ1MsS0FBSyxDQUFDLFVBQ05FLEtBQUssQ0FBQyxTQUFTLGVBQWUsWUFDOUJDLEtBQUssQ0FBQyxTQUFTWixJQUFJLGVBQ25CWSxLQUFLLENBQUMsWUFBWUUsU0FBU1gsUUFBUSxDQUFDLFFBQVEsRUFDNUNTLEtBQUssQ0FBQyxlQUFlWixJQUFJO0lBQzlCQSxJQUFJLGNBQ0NTLEtBQUssQ0FBQyxVQUNORSxLQUFLLENBQUMsa0JBQ05DLEtBQUssQ0FBQyxrQkFBa0JaLElBQUk7SUFDakNBLElBQUksa0JBQ0NTLEtBQUssQ0FBQyxVQUNORSxLQUFLLENBQUMsa0JBQ05DLEtBQUssQ0FBQyxrQkFBa0JaLElBQUk7SUFDakNBLElBQUksdUJBQ0NTLEtBQUssQ0FBQyxVQUNORSxLQUFLLENBQUMsY0FBYyxhQUNwQkMsS0FBSyxDQUFDLGNBQWNaLElBQUksV0FDeEJZLEtBQUssQ0FBQyxhQUFhWixJQUFJO0lBQzVCQSxJQUFJLGtCQUNDUyxLQUFLLENBQUMsVUFDTkUsS0FBSyxDQUFDLFlBQ05DLEtBQUssQ0FBQyxZQUFZUSxRQUNsQlIsS0FBSyxDQUFDLGtCQUFrQlosSUFBSTtJQUNqQ0EsSUFBSSxvQkFDQ1MsS0FBSyxDQUFDLFFBQ05FLEtBQUssQ0FBQyxrQkFDTkMsS0FBSyxDQUFDLGtCQUFrQlYsR0FBR0YsSUFBSSxXQUFXQSxJQUFJO0lBQ25EQSxJQUFJLG9CQUNDUyxLQUFLLENBQUMsZUFBZSwrQkFDckJFLEtBQUssQ0FBQyxjQUFjLGtCQUNwQkMsS0FBSyxDQUFDLGNBQWM7UUFBQ1osSUFBSTtLQUFjLEVBQUUsZUFBZTtLQUN4RFksS0FBSyxDQUFDLFlBQVlFLFNBQVNYLFFBQVEsQ0FBQyxRQUFRO0lBQ2pESCxJQUFJLHVCQUNDUyxLQUFLLENBQUMsZUFBZSwrQkFDckJFLEtBQUssQ0FBQyxPQUFPLGtCQUFrQixZQUMvQkMsS0FBSyxDQUFDLE9BQU9aLElBQUksZUFDakJZLEtBQUssQ0FBQyxZQUFZRSxTQUFTWCxRQUFRLENBQUMsUUFBUSxFQUM1Q1MsS0FBSyxDQUFDLFlBQVlFLFNBQVNYLFFBQVEsQ0FBQyxRQUFRLEVBQzVDUyxLQUFLLENBQUMsWUFBWUUsU0FBU1gsUUFBUSxDQUFDLFFBQVEsRUFDNUNTLEtBQUssQ0FBQyxlQUFlVixHQUFHRixJQUFJLGVBQWUsT0FBT0csUUFBUSxDQUFDLE9BQU87SUFDdkVILElBQUkscUJBQ0NTLEtBQUssQ0FBQyxlQUFlLCtCQUErQiwrQkFDcERFLEtBQUssQ0FBQyxPQUFPLGNBQWMsa0JBQzNCQyxLQUFLLENBQUMsT0FBT1osSUFBSSxlQUNqQlksS0FBSyxDQUFDLFlBQVlFLFNBQVNYLFFBQVEsQ0FBQyxRQUFRLEVBQzVDUyxLQUFLLENBQUMsWUFBWUUsU0FBU1gsUUFBUSxDQUFDLFFBQVEsRUFDNUNTLEtBQUssQ0FBQyxjQUFjTTtJQUN6QmxCLElBQUksbUJBQ0NTLEtBQUssQ0FBQyxvQkFBb0IsVUFDMUJFLEtBQUssQ0FBQyxpQkFBaUIsa0JBQWtCLFdBQ3pDQyxLQUFLLENBQUMsaUJBQWlCVixHQUFHRixJQUFJLGVBQWVBLElBQUksZ0JBQ2pEWSxLQUFLLENBQUMsa0JBQWtCVixHQUFHRixJQUFJLHFCQUFxQixPQUFPRyxRQUFRLENBQUMsT0FBTyxFQUMzRVMsS0FBSyxDQUFDLFdBQVdFLFNBQVNYLFFBQVEsQ0FBQyxRQUFRO0lBQ2hEO1FBQUM7UUFDRztLQUNILENBQUNZLE9BQU8sQ0FBQyxTQUFVRSxRQUFRO1FBQ3hCakIsSUFBSWlCLFVBQ0NSLEtBQUssQ0FBQyxlQUFlLCtCQUErQiwrQkFDcERFLEtBQUssQ0FBQyxjQUFjLGtCQUNwQkMsS0FBSyxDQUFDLGNBQWNNO0lBQzdCO0lBQ0FsQixJQUFJLGdCQUNDUyxLQUFLLENBQUMsUUFDTkUsS0FBSyxDQUFDLE1BQU0sZUFDWkMsS0FBSyxDQUFDLE1BQU1WLEdBQUdGLElBQUksZUFBZUksZ0JBQ2xDUSxLQUFLLENBQUMsZUFBZVYsR0FBR0YsSUFBSSxlQUFlLE9BQU9HLFFBQVEsQ0FBQyxPQUFPO0lBQ3ZFSCxJQUFJLGVBQ0NTLEtBQUssQ0FBQyxVQUNORSxLQUFLLENBQUMsWUFDTkMsS0FBSyxDQUFDLFlBQVlWLEdBQUdRLGNBQWNWLElBQUk7SUFDNUMsb0RBQW9EO0lBQ3BELElBQUlxQixlQUFlbkIsR0FBR0YsSUFBSSwrQkFBK0JBLElBQUksb0NBQW9DQSxJQUFJLHFCQUFxQkEsSUFBSSxzQkFBc0JBLElBQUk7SUFDeEpBLElBQUksaUJBQ0NTLEtBQUssQ0FBQyxVQUNORSxLQUFLLENBQUMsV0FDTkMsS0FBSyxDQUFDLFdBQVc7UUFBQ1M7S0FBYTtJQUNwQ3JCLElBQUksbUJBQ0NTLEtBQUssQ0FBQyxjQUNORSxLQUFLLENBQUMsUUFBUSxjQUFjLFdBQzVCQyxLQUFLLENBQUMsUUFBUVEsUUFDZFIsS0FBSyxDQUFDLGNBQWNWLEdBQUdGLElBQUksV0FBVyxLQUFLLElBQUlHLFFBQVEsQ0FBQyxZQUFZLEVBQ3BFUyxLQUFLLENBQUMsV0FBV1YsR0FBR0YsSUFBSSxXQUFXLEtBQUssSUFBSUcsUUFBUSxDQUFDLFlBQVk7SUFDdEVILElBQUksbUJBQ0NTLEtBQUssQ0FBQyxjQUFjLFdBQ3BCRSxLQUFLLENBQUMsa0JBQWtCLGNBQ3hCQyxLQUFLLENBQUMsa0JBQWtCWixJQUFJLFdBQzVCWSxLQUFLLENBQUMsY0FBY1osSUFBSSxlQUN4QlksS0FBSyxDQUFDLFNBQVNWLEdBQUc7UUFBRVcsZUFBZUM7SUFBUSxHQUFHLE9BQU9YLFFBQVEsQ0FBQyxPQUFPO0lBQzFFSCxJQUFJLDhCQUNDUyxLQUFLLENBQUMsZUFDTkUsS0FBSyxDQUFDLFVBQ05DLEtBQUssQ0FBQyxVQUFVO1FBQUNaLElBQUk7S0FBbUI7SUFDN0NBLElBQUksZ0NBQ0NTLEtBQUssQ0FBQyxRQUNORSxLQUFLLENBQUMsVUFDTkMsS0FBSyxDQUFDLFVBQVU7UUFBQ1osSUFBSTtLQUFVO0lBQ3BDQSxJQUFJLHFCQUNDUyxLQUFLLENBQUMsZUFDTkUsS0FBSyxDQUFDLE1BQU0sV0FDWkMsS0FBSyxDQUFDLE1BQU1aLElBQUksZUFDaEJZLEtBQUssQ0FBQyxTQUFTRSxTQUFTWCxRQUFRLENBQUMsUUFBUSxFQUN6Q1MsS0FBSyxDQUFDLFdBQVdFLFNBQVNYLFFBQVEsQ0FBQyxRQUFRLEVBQzNDUyxLQUFLLENBQUMsV0FBVztRQUFDWixJQUFJO0tBQWdCLEVBQ3RDWSxLQUFLLENBQUMsZUFBZVYsR0FBR0YsSUFBSSxlQUFlLE9BQU9HLFFBQVEsQ0FBQyxPQUFPO0lBQ3ZFSCxJQUFJLDBCQUNDUyxLQUFLLENBQUMsZUFBZSwrQkFDckJFLEtBQUssQ0FBQyxNQUFNLGtCQUNaQyxLQUFLLENBQUMsTUFBTVosSUFBSSxlQUNoQlksS0FBSyxDQUFDLFdBQVdFLFNBQVNYLFFBQVEsQ0FBQyxRQUFRLEVBQzNDUyxLQUFLLENBQUMsa0JBQWtCWixJQUFJO0lBQ2pDQSxJQUFJLGlCQUNDUyxLQUFLLENBQUMsUUFDTkUsS0FBSyxDQUFDLFFBQ05DLEtBQUssQ0FBQyxRQUFRO1FBQUNaLElBQUk7S0FBYTtJQUNyQ0EsSUFBSSx1QkFDQ1MsS0FBSyxDQUFDLGVBQ05FLEtBQUssQ0FBQyxNQUFNLFFBQ1pDLEtBQUssQ0FBQyxNQUFNVixHQUFHRSxlQUFlTSxlQUM5QkUsS0FBSyxDQUFDLFdBQVdFLFNBQVNYLFFBQVEsQ0FBQyxRQUFRLEVBQzNDUyxLQUFLLENBQUMsVUFBVUUsU0FBU1gsUUFBUSxDQUFDLFFBQVEsRUFDMUNTLEtBQUssQ0FBQyxRQUFRVixHQUFHRixJQUFJLGtCQUFrQkEsSUFBSSx3QkFBd0IsT0FBT0csUUFBUSxDQUFDLE9BQU87SUFDL0ZILElBQUksZ0JBQ0NTLEtBQUssQ0FBQyxVQUFVLDJDQUNoQkUsS0FBSyxDQUFDLFlBQVksYUFBYSxrQkFDL0JDLEtBQUssQ0FBQyxZQUFZUixlQUNsQlEsS0FBSyxDQUFDLGFBQWFWLEdBQUdRLGNBQWMsS0FBSyxJQUFJUCxRQUFRLENBQUMsWUFBWTtJQUN2RUgsSUFBSSw2QkFDQ1MsS0FBSyxDQUFDLGVBQ05FLEtBQUssQ0FBQyxNQUFNLG1CQUNaQyxLQUFLLENBQUMsTUFBTVosSUFBSSxlQUNoQlksS0FBSyxDQUFDLFlBQVlFLFNBQVNYLFFBQVEsQ0FBQyxRQUFRLEVBQzVDUyxLQUFLLENBQUMsbUJBQW1CVixHQUFHUSxjQUFjVixJQUFJO0lBQ25EQSxJQUFJLDZCQUNDUyxLQUFLLENBQUMsZUFDTkUsS0FBSyxDQUFDLGNBQ05DLEtBQUssQ0FBQyxjQUFjUjtJQUN6QkosSUFBSSxzQkFDQ1MsS0FBSyxDQUFDLGFBQ05FLEtBQUssQ0FBQyxjQUNOQyxLQUFLLENBQUMsY0FBY1osSUFBSTtJQUM3QkEsSUFBSSxnQ0FDQ1MsS0FBSyxDQUFDLGVBQ05FLEtBQUssQ0FBQyxNQUNOQyxLQUFLLENBQUMsTUFBTVosSUFBSTtJQUNyQkEsSUFBSSxtQkFDQ1MsS0FBSyxDQUFDLFFBQ05FLEtBQUssQ0FBQyxRQUNOQyxLQUFLLENBQUMsUUFBUTtRQUFDUztLQUFhO0lBQ2pDckIsSUFBSSxpQ0FDQ1MsS0FBSyxDQUFDLFVBQVUsMkNBQ2hCRSxLQUFLLENBQUMsY0FBYyxrQkFDcEJDLEtBQUssQ0FBQyxjQUFjRjtJQUN6QlYsSUFBSSwwQkFDQ1MsS0FBSyxDQUFDLGVBQWUsK0JBQ3JCRSxLQUFLLENBQUMsTUFBTSxRQUNaQyxLQUFLLENBQUMsTUFBTUYsY0FDWkUsS0FBSyxDQUFDLFdBQVdFLFNBQVNYLFFBQVEsQ0FBQyxRQUFRLEVBQzNDUyxLQUFLLENBQUMsV0FBV1YsR0FBRztRQUFDRixJQUFJO0tBQWlDLEVBQUUsT0FBT0csUUFBUSxDQUFDLE9BQU8sRUFDbkZTLEtBQUssQ0FBQyxRQUFRWixJQUFJO0lBQ3ZCQSxJQUFJLHVCQUNDUyxLQUFLLENBQUMsV0FDTkUsS0FBSyxDQUFDLGFBQ05DLEtBQUssQ0FBQyxpQkFBaUJWLEdBQUcsVUFBVSxXQUFXLGFBQWEsS0FBSyxJQUFJQyxRQUFRLENBQUMsWUFBWSxFQUMxRlMsS0FBSyxDQUFDLFlBQVlFLFNBQVNYLFFBQVEsQ0FBQyxRQUFRLEVBQzVDUyxLQUFLLENBQUMsYUFBYVYsR0FBR0YsSUFBSSxlQUFlQSxJQUFJO0lBQ2xEQSxJQUFJLGlCQUNDWSxLQUFLLENBQUMsVUFDWFYsR0FBRyxVQUFVLFdBQVcsYUFBYSxLQUFLLElBQUlDLFFBQVEsQ0FBQyxZQUFZO0lBQ25FLHlDQUF5QztJQUN6Q0gsSUFBSSxhQUNDWSxLQUFLLENBQUMsUUFBUTtRQUFDVixHQUFHRixJQUFJLHFCQUFxQkEsSUFBSSx1QkFBdUJBLElBQUksNEJBQTRCQSxJQUFJLGtCQUFrQkEsSUFBSSx5QkFBeUJBLElBQUksZ0JBQWdCQSxJQUFJLHVCQUNsTCxnQ0FBZ0M7UUFDaENBLElBQUksb0JBQW9CcUI7S0FBYztBQUM5QztBQUNBckMsa0JBQWUsR0FBR1M7QUFDbEI2QixPQUFPdEMsT0FBTyxHQUFHQSxPQUFPLENBQUMsVUFBVSIsInNvdXJjZXMiOlsid2VicGFjazovL2NpdmlsLWVuZ2luZWVyaW5nLXBsYXRmb3JtLy4vbm9kZV9tb2R1bGVzL2FzdC10eXBlcy9kZWYvdHlwZXNjcmlwdC5qcz9kOTZkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiOztcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xudmFyIGJhYmVsX2NvcmVfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2JhYmVsLWNvcmVcIikpO1xudmFyIHR5cGVfYW5ub3RhdGlvbnNfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3R5cGUtYW5ub3RhdGlvbnNcIikpO1xudmFyIHR5cGVzXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vbGliL3R5cGVzXCIpKTtcbnZhciBzaGFyZWRfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9saWIvc2hhcmVkXCIpKTtcbmZ1bmN0aW9uIGRlZmF1bHRfMShmb3JrKSB7XG4gICAgLy8gU2luY2UgVHlwZVNjcmlwdCBpcyBwYXJzZWQgYnkgQmFieWxvbiwgaW5jbHVkZSB0aGUgY29yZSBCYWJ5bG9uIHR5cGVzXG4gICAgLy8gYnV0IG9taXQgdGhlIEZsb3ctcmVsYXRlZCB0eXBlcy5cbiAgICBmb3JrLnVzZShiYWJlbF9jb3JlXzEuZGVmYXVsdCk7XG4gICAgZm9yay51c2UodHlwZV9hbm5vdGF0aW9uc18xLmRlZmF1bHQpO1xuICAgIHZhciB0eXBlcyA9IGZvcmsudXNlKHR5cGVzXzEuZGVmYXVsdCk7XG4gICAgdmFyIG4gPSB0eXBlcy5uYW1lZFR5cGVzO1xuICAgIHZhciBkZWYgPSB0eXBlcy5UeXBlLmRlZjtcbiAgICB2YXIgb3IgPSB0eXBlcy5UeXBlLm9yO1xuICAgIHZhciBkZWZhdWx0cyA9IGZvcmsudXNlKHNoYXJlZF8xLmRlZmF1bHQpLmRlZmF1bHRzO1xuICAgIHZhciBTdHJpbmdMaXRlcmFsID0gdHlwZXMuVHlwZS5mcm9tKGZ1bmN0aW9uICh2YWx1ZSwgZGVlcCkge1xuICAgICAgICBpZiAobi5TdHJpbmdMaXRlcmFsICYmXG4gICAgICAgICAgICBuLlN0cmluZ0xpdGVyYWwuY2hlY2sodmFsdWUsIGRlZXApKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobi5MaXRlcmFsICYmXG4gICAgICAgICAgICBuLkxpdGVyYWwuY2hlY2sodmFsdWUsIGRlZXApICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUudmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LCBcIlN0cmluZ0xpdGVyYWxcIik7XG4gICAgZGVmKFwiVFNUeXBlXCIpXG4gICAgICAgIC5iYXNlcyhcIk5vZGVcIik7XG4gICAgdmFyIFRTRW50aXR5TmFtZSA9IG9yKGRlZihcIklkZW50aWZpZXJcIiksIGRlZihcIlRTUXVhbGlmaWVkTmFtZVwiKSk7XG4gICAgZGVmKFwiVFNUeXBlUmVmZXJlbmNlXCIpXG4gICAgICAgIC5iYXNlcyhcIlRTVHlwZVwiLCBcIlRTSGFzT3B0aW9uYWxUeXBlUGFyYW1ldGVySW5zdGFudGlhdGlvblwiKVxuICAgICAgICAuYnVpbGQoXCJ0eXBlTmFtZVwiLCBcInR5cGVQYXJhbWV0ZXJzXCIpXG4gICAgICAgIC5maWVsZChcInR5cGVOYW1lXCIsIFRTRW50aXR5TmFtZSk7XG4gICAgLy8gQW4gYWJzdHJhY3QgKG5vbi1idWlsZGFibGUpIGJhc2UgdHlwZSB0aGF0IHByb3ZpZGUgYSBjb21tb25seS1uZWVkZWRcbiAgICAvLyBvcHRpb25hbCAudHlwZVBhcmFtZXRlcnMgZmllbGQuXG4gICAgZGVmKFwiVFNIYXNPcHRpb25hbFR5cGVQYXJhbWV0ZXJJbnN0YW50aWF0aW9uXCIpXG4gICAgICAgIC5maWVsZChcInR5cGVQYXJhbWV0ZXJzXCIsIG9yKGRlZihcIlRTVHlwZVBhcmFtZXRlckluc3RhbnRpYXRpb25cIiksIG51bGwpLCBkZWZhdWx0c1tcIm51bGxcIl0pO1xuICAgIC8vIEFuIGFic3RyYWN0IChub24tYnVpbGRhYmxlKSBiYXNlIHR5cGUgdGhhdCBwcm92aWRlIGEgY29tbW9ubHktbmVlZGVkXG4gICAgLy8gb3B0aW9uYWwgLnR5cGVQYXJhbWV0ZXJzIGZpZWxkLlxuICAgIGRlZihcIlRTSGFzT3B0aW9uYWxUeXBlUGFyYW1ldGVyc1wiKVxuICAgICAgICAuZmllbGQoXCJ0eXBlUGFyYW1ldGVyc1wiLCBvcihkZWYoXCJUU1R5cGVQYXJhbWV0ZXJEZWNsYXJhdGlvblwiKSwgbnVsbCwgdm9pZCAwKSwgZGVmYXVsdHNbXCJudWxsXCJdKTtcbiAgICAvLyBBbiBhYnN0cmFjdCAobm9uLWJ1aWxkYWJsZSkgYmFzZSB0eXBlIHRoYXQgcHJvdmlkZSBhIGNvbW1vbmx5LW5lZWRlZFxuICAgIC8vIG9wdGlvbmFsIC50eXBlQW5ub3RhdGlvbiBmaWVsZC5cbiAgICBkZWYoXCJUU0hhc09wdGlvbmFsVHlwZUFubm90YXRpb25cIilcbiAgICAgICAgLmZpZWxkKFwidHlwZUFubm90YXRpb25cIiwgb3IoZGVmKFwiVFNUeXBlQW5ub3RhdGlvblwiKSwgbnVsbCksIGRlZmF1bHRzW1wibnVsbFwiXSk7XG4gICAgZGVmKFwiVFNRdWFsaWZpZWROYW1lXCIpXG4gICAgICAgIC5iYXNlcyhcIk5vZGVcIilcbiAgICAgICAgLmJ1aWxkKFwibGVmdFwiLCBcInJpZ2h0XCIpXG4gICAgICAgIC5maWVsZChcImxlZnRcIiwgVFNFbnRpdHlOYW1lKVxuICAgICAgICAuZmllbGQoXCJyaWdodFwiLCBUU0VudGl0eU5hbWUpO1xuICAgIGRlZihcIlRTQXNFeHByZXNzaW9uXCIpXG4gICAgICAgIC5iYXNlcyhcIkV4cHJlc3Npb25cIiwgXCJQYXR0ZXJuXCIpXG4gICAgICAgIC5idWlsZChcImV4cHJlc3Npb25cIiwgXCJ0eXBlQW5ub3RhdGlvblwiKVxuICAgICAgICAuZmllbGQoXCJleHByZXNzaW9uXCIsIGRlZihcIkV4cHJlc3Npb25cIikpXG4gICAgICAgIC5maWVsZChcInR5cGVBbm5vdGF0aW9uXCIsIGRlZihcIlRTVHlwZVwiKSlcbiAgICAgICAgLmZpZWxkKFwiZXh0cmFcIiwgb3IoeyBwYXJlbnRoZXNpemVkOiBCb29sZWFuIH0sIG51bGwpLCBkZWZhdWx0c1tcIm51bGxcIl0pO1xuICAgIGRlZihcIlRTTm9uTnVsbEV4cHJlc3Npb25cIilcbiAgICAgICAgLmJhc2VzKFwiRXhwcmVzc2lvblwiLCBcIlBhdHRlcm5cIilcbiAgICAgICAgLmJ1aWxkKFwiZXhwcmVzc2lvblwiKVxuICAgICAgICAuZmllbGQoXCJleHByZXNzaW9uXCIsIGRlZihcIkV4cHJlc3Npb25cIikpO1xuICAgIFtcbiAgICAgICAgXCJUU0FueUtleXdvcmRcIixcbiAgICAgICAgXCJUU0JpZ0ludEtleXdvcmRcIixcbiAgICAgICAgXCJUU0Jvb2xlYW5LZXl3b3JkXCIsXG4gICAgICAgIFwiVFNOZXZlcktleXdvcmRcIixcbiAgICAgICAgXCJUU051bGxLZXl3b3JkXCIsXG4gICAgICAgIFwiVFNOdW1iZXJLZXl3b3JkXCIsXG4gICAgICAgIFwiVFNPYmplY3RLZXl3b3JkXCIsXG4gICAgICAgIFwiVFNTdHJpbmdLZXl3b3JkXCIsXG4gICAgICAgIFwiVFNTeW1ib2xLZXl3b3JkXCIsXG4gICAgICAgIFwiVFNVbmRlZmluZWRLZXl3b3JkXCIsXG4gICAgICAgIFwiVFNVbmtub3duS2V5d29yZFwiLFxuICAgICAgICBcIlRTVm9pZEtleXdvcmRcIixcbiAgICAgICAgXCJUU1RoaXNUeXBlXCIsXG4gICAgXS5mb3JFYWNoKGZ1bmN0aW9uIChrZXl3b3JkVHlwZSkge1xuICAgICAgICBkZWYoa2V5d29yZFR5cGUpXG4gICAgICAgICAgICAuYmFzZXMoXCJUU1R5cGVcIilcbiAgICAgICAgICAgIC5idWlsZCgpO1xuICAgIH0pO1xuICAgIGRlZihcIlRTQXJyYXlUeXBlXCIpXG4gICAgICAgIC5iYXNlcyhcIlRTVHlwZVwiKVxuICAgICAgICAuYnVpbGQoXCJlbGVtZW50VHlwZVwiKVxuICAgICAgICAuZmllbGQoXCJlbGVtZW50VHlwZVwiLCBkZWYoXCJUU1R5cGVcIikpO1xuICAgIGRlZihcIlRTTGl0ZXJhbFR5cGVcIilcbiAgICAgICAgLmJhc2VzKFwiVFNUeXBlXCIpXG4gICAgICAgIC5idWlsZChcImxpdGVyYWxcIilcbiAgICAgICAgLmZpZWxkKFwibGl0ZXJhbFwiLCBvcihkZWYoXCJOdW1lcmljTGl0ZXJhbFwiKSwgZGVmKFwiU3RyaW5nTGl0ZXJhbFwiKSwgZGVmKFwiQm9vbGVhbkxpdGVyYWxcIiksIGRlZihcIlRlbXBsYXRlTGl0ZXJhbFwiKSwgZGVmKFwiVW5hcnlFeHByZXNzaW9uXCIpKSk7XG4gICAgW1wiVFNVbmlvblR5cGVcIixcbiAgICAgICAgXCJUU0ludGVyc2VjdGlvblR5cGVcIixcbiAgICBdLmZvckVhY2goZnVuY3Rpb24gKHR5cGVOYW1lKSB7XG4gICAgICAgIGRlZih0eXBlTmFtZSlcbiAgICAgICAgICAgIC5iYXNlcyhcIlRTVHlwZVwiKVxuICAgICAgICAgICAgLmJ1aWxkKFwidHlwZXNcIilcbiAgICAgICAgICAgIC5maWVsZChcInR5cGVzXCIsIFtkZWYoXCJUU1R5cGVcIildKTtcbiAgICB9KTtcbiAgICBkZWYoXCJUU0NvbmRpdGlvbmFsVHlwZVwiKVxuICAgICAgICAuYmFzZXMoXCJUU1R5cGVcIilcbiAgICAgICAgLmJ1aWxkKFwiY2hlY2tUeXBlXCIsIFwiZXh0ZW5kc1R5cGVcIiwgXCJ0cnVlVHlwZVwiLCBcImZhbHNlVHlwZVwiKVxuICAgICAgICAuZmllbGQoXCJjaGVja1R5cGVcIiwgZGVmKFwiVFNUeXBlXCIpKVxuICAgICAgICAuZmllbGQoXCJleHRlbmRzVHlwZVwiLCBkZWYoXCJUU1R5cGVcIikpXG4gICAgICAgIC5maWVsZChcInRydWVUeXBlXCIsIGRlZihcIlRTVHlwZVwiKSlcbiAgICAgICAgLmZpZWxkKFwiZmFsc2VUeXBlXCIsIGRlZihcIlRTVHlwZVwiKSk7XG4gICAgZGVmKFwiVFNJbmZlclR5cGVcIilcbiAgICAgICAgLmJhc2VzKFwiVFNUeXBlXCIpXG4gICAgICAgIC5idWlsZChcInR5cGVQYXJhbWV0ZXJcIilcbiAgICAgICAgLmZpZWxkKFwidHlwZVBhcmFtZXRlclwiLCBkZWYoXCJUU1R5cGVQYXJhbWV0ZXJcIikpO1xuICAgIGRlZihcIlRTUGFyZW50aGVzaXplZFR5cGVcIilcbiAgICAgICAgLmJhc2VzKFwiVFNUeXBlXCIpXG4gICAgICAgIC5idWlsZChcInR5cGVBbm5vdGF0aW9uXCIpXG4gICAgICAgIC5maWVsZChcInR5cGVBbm5vdGF0aW9uXCIsIGRlZihcIlRTVHlwZVwiKSk7XG4gICAgdmFyIFBhcmFtZXRlcnNUeXBlID0gW29yKGRlZihcIklkZW50aWZpZXJcIiksIGRlZihcIlJlc3RFbGVtZW50XCIpLCBkZWYoXCJBcnJheVBhdHRlcm5cIiksIGRlZihcIk9iamVjdFBhdHRlcm5cIikpXTtcbiAgICBbXCJUU0Z1bmN0aW9uVHlwZVwiLFxuICAgICAgICBcIlRTQ29uc3RydWN0b3JUeXBlXCIsXG4gICAgXS5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlTmFtZSkge1xuICAgICAgICBkZWYodHlwZU5hbWUpXG4gICAgICAgICAgICAuYmFzZXMoXCJUU1R5cGVcIiwgXCJUU0hhc09wdGlvbmFsVHlwZVBhcmFtZXRlcnNcIiwgXCJUU0hhc09wdGlvbmFsVHlwZUFubm90YXRpb25cIilcbiAgICAgICAgICAgIC5idWlsZChcInBhcmFtZXRlcnNcIilcbiAgICAgICAgICAgIC5maWVsZChcInBhcmFtZXRlcnNcIiwgUGFyYW1ldGVyc1R5cGUpO1xuICAgIH0pO1xuICAgIGRlZihcIlRTRGVjbGFyZUZ1bmN0aW9uXCIpXG4gICAgICAgIC5iYXNlcyhcIkRlY2xhcmF0aW9uXCIsIFwiVFNIYXNPcHRpb25hbFR5cGVQYXJhbWV0ZXJzXCIpXG4gICAgICAgIC5idWlsZChcImlkXCIsIFwicGFyYW1zXCIsIFwicmV0dXJuVHlwZVwiKVxuICAgICAgICAuZmllbGQoXCJkZWNsYXJlXCIsIEJvb2xlYW4sIGRlZmF1bHRzW1wiZmFsc2VcIl0pXG4gICAgICAgIC5maWVsZChcImFzeW5jXCIsIEJvb2xlYW4sIGRlZmF1bHRzW1wiZmFsc2VcIl0pXG4gICAgICAgIC5maWVsZChcImdlbmVyYXRvclwiLCBCb29sZWFuLCBkZWZhdWx0c1tcImZhbHNlXCJdKVxuICAgICAgICAuZmllbGQoXCJpZFwiLCBvcihkZWYoXCJJZGVudGlmaWVyXCIpLCBudWxsKSwgZGVmYXVsdHNbXCJudWxsXCJdKVxuICAgICAgICAuZmllbGQoXCJwYXJhbXNcIiwgW2RlZihcIlBhdHRlcm5cIildKVxuICAgICAgICAvLyB0U0Z1bmN0aW9uVHlwZUFubm90YXRpb25Db21tb25cbiAgICAgICAgLmZpZWxkKFwicmV0dXJuVHlwZVwiLCBvcihkZWYoXCJUU1R5cGVBbm5vdGF0aW9uXCIpLCBkZWYoXCJOb29wXCIpLCAvLyBTdGlsbCB1c2VkP1xuICAgIG51bGwpLCBkZWZhdWx0c1tcIm51bGxcIl0pO1xuICAgIGRlZihcIlRTRGVjbGFyZU1ldGhvZFwiKVxuICAgICAgICAuYmFzZXMoXCJEZWNsYXJhdGlvblwiLCBcIlRTSGFzT3B0aW9uYWxUeXBlUGFyYW1ldGVyc1wiKVxuICAgICAgICAuYnVpbGQoXCJrZXlcIiwgXCJwYXJhbXNcIiwgXCJyZXR1cm5UeXBlXCIpXG4gICAgICAgIC5maWVsZChcImFzeW5jXCIsIEJvb2xlYW4sIGRlZmF1bHRzW1wiZmFsc2VcIl0pXG4gICAgICAgIC5maWVsZChcImdlbmVyYXRvclwiLCBCb29sZWFuLCBkZWZhdWx0c1tcImZhbHNlXCJdKVxuICAgICAgICAuZmllbGQoXCJwYXJhbXNcIiwgW2RlZihcIlBhdHRlcm5cIildKVxuICAgICAgICAvLyBjbGFzc01ldGhvZE9yUHJvcGVydHlDb21tb25cbiAgICAgICAgLmZpZWxkKFwiYWJzdHJhY3RcIiwgQm9vbGVhbiwgZGVmYXVsdHNbXCJmYWxzZVwiXSlcbiAgICAgICAgLmZpZWxkKFwiYWNjZXNzaWJpbGl0eVwiLCBvcihcInB1YmxpY1wiLCBcInByaXZhdGVcIiwgXCJwcm90ZWN0ZWRcIiwgdm9pZCAwKSwgZGVmYXVsdHNbXCJ1bmRlZmluZWRcIl0pXG4gICAgICAgIC5maWVsZChcInN0YXRpY1wiLCBCb29sZWFuLCBkZWZhdWx0c1tcImZhbHNlXCJdKVxuICAgICAgICAuZmllbGQoXCJjb21wdXRlZFwiLCBCb29sZWFuLCBkZWZhdWx0c1tcImZhbHNlXCJdKVxuICAgICAgICAuZmllbGQoXCJvcHRpb25hbFwiLCBCb29sZWFuLCBkZWZhdWx0c1tcImZhbHNlXCJdKVxuICAgICAgICAuZmllbGQoXCJrZXlcIiwgb3IoZGVmKFwiSWRlbnRpZmllclwiKSwgZGVmKFwiU3RyaW5nTGl0ZXJhbFwiKSwgZGVmKFwiTnVtZXJpY0xpdGVyYWxcIiksIFxuICAgIC8vIE9ubHkgYWxsb3dlZCBpZiAuY29tcHV0ZWQgaXMgdHJ1ZS5cbiAgICBkZWYoXCJFeHByZXNzaW9uXCIpKSlcbiAgICAgICAgLy8gY2xhc3NNZXRob2RPckRlY2xhcmVNZXRob2RDb21tb25cbiAgICAgICAgLmZpZWxkKFwia2luZFwiLCBvcihcImdldFwiLCBcInNldFwiLCBcIm1ldGhvZFwiLCBcImNvbnN0cnVjdG9yXCIpLCBmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gXCJtZXRob2RcIjsgfSlcbiAgICAgICAgLmZpZWxkKFwiYWNjZXNzXCIsIC8vIE5vdCBcImFjY2Vzc2liaWxpdHlcIj9cbiAgICBvcihcInB1YmxpY1wiLCBcInByaXZhdGVcIiwgXCJwcm90ZWN0ZWRcIiwgdm9pZCAwKSwgZGVmYXVsdHNbXCJ1bmRlZmluZWRcIl0pXG4gICAgICAgIC5maWVsZChcImRlY29yYXRvcnNcIiwgb3IoW2RlZihcIkRlY29yYXRvclwiKV0sIG51bGwpLCBkZWZhdWx0c1tcIm51bGxcIl0pXG4gICAgICAgIC8vIHRTRnVuY3Rpb25UeXBlQW5ub3RhdGlvbkNvbW1vblxuICAgICAgICAuZmllbGQoXCJyZXR1cm5UeXBlXCIsIG9yKGRlZihcIlRTVHlwZUFubm90YXRpb25cIiksIGRlZihcIk5vb3BcIiksIC8vIFN0aWxsIHVzZWQ/XG4gICAgbnVsbCksIGRlZmF1bHRzW1wibnVsbFwiXSk7XG4gICAgZGVmKFwiVFNNYXBwZWRUeXBlXCIpXG4gICAgICAgIC5iYXNlcyhcIlRTVHlwZVwiKVxuICAgICAgICAuYnVpbGQoXCJ0eXBlUGFyYW1ldGVyXCIsIFwidHlwZUFubm90YXRpb25cIilcbiAgICAgICAgLmZpZWxkKFwicmVhZG9ubHlcIiwgb3IoQm9vbGVhbiwgXCIrXCIsIFwiLVwiKSwgZGVmYXVsdHNbXCJmYWxzZVwiXSlcbiAgICAgICAgLmZpZWxkKFwidHlwZVBhcmFtZXRlclwiLCBkZWYoXCJUU1R5cGVQYXJhbWV0ZXJcIikpXG4gICAgICAgIC5maWVsZChcIm9wdGlvbmFsXCIsIG9yKEJvb2xlYW4sIFwiK1wiLCBcIi1cIiksIGRlZmF1bHRzW1wiZmFsc2VcIl0pXG4gICAgICAgIC5maWVsZChcInR5cGVBbm5vdGF0aW9uXCIsIG9yKGRlZihcIlRTVHlwZVwiKSwgbnVsbCksIGRlZmF1bHRzW1wibnVsbFwiXSk7XG4gICAgZGVmKFwiVFNUdXBsZVR5cGVcIilcbiAgICAgICAgLmJhc2VzKFwiVFNUeXBlXCIpXG4gICAgICAgIC5idWlsZChcImVsZW1lbnRUeXBlc1wiKVxuICAgICAgICAuZmllbGQoXCJlbGVtZW50VHlwZXNcIiwgW29yKGRlZihcIlRTVHlwZVwiKSwgZGVmKFwiVFNOYW1lZFR1cGxlTWVtYmVyXCIpKV0pO1xuICAgIGRlZihcIlRTTmFtZWRUdXBsZU1lbWJlclwiKVxuICAgICAgICAuYmFzZXMoXCJUU1R5cGVcIilcbiAgICAgICAgLmJ1aWxkKFwibGFiZWxcIiwgXCJlbGVtZW50VHlwZVwiLCBcIm9wdGlvbmFsXCIpXG4gICAgICAgIC5maWVsZChcImxhYmVsXCIsIGRlZihcIklkZW50aWZpZXJcIikpXG4gICAgICAgIC5maWVsZChcIm9wdGlvbmFsXCIsIEJvb2xlYW4sIGRlZmF1bHRzW1wiZmFsc2VcIl0pXG4gICAgICAgIC5maWVsZChcImVsZW1lbnRUeXBlXCIsIGRlZihcIlRTVHlwZVwiKSk7XG4gICAgZGVmKFwiVFNSZXN0VHlwZVwiKVxuICAgICAgICAuYmFzZXMoXCJUU1R5cGVcIilcbiAgICAgICAgLmJ1aWxkKFwidHlwZUFubm90YXRpb25cIilcbiAgICAgICAgLmZpZWxkKFwidHlwZUFubm90YXRpb25cIiwgZGVmKFwiVFNUeXBlXCIpKTtcbiAgICBkZWYoXCJUU09wdGlvbmFsVHlwZVwiKVxuICAgICAgICAuYmFzZXMoXCJUU1R5cGVcIilcbiAgICAgICAgLmJ1aWxkKFwidHlwZUFubm90YXRpb25cIilcbiAgICAgICAgLmZpZWxkKFwidHlwZUFubm90YXRpb25cIiwgZGVmKFwiVFNUeXBlXCIpKTtcbiAgICBkZWYoXCJUU0luZGV4ZWRBY2Nlc3NUeXBlXCIpXG4gICAgICAgIC5iYXNlcyhcIlRTVHlwZVwiKVxuICAgICAgICAuYnVpbGQoXCJvYmplY3RUeXBlXCIsIFwiaW5kZXhUeXBlXCIpXG4gICAgICAgIC5maWVsZChcIm9iamVjdFR5cGVcIiwgZGVmKFwiVFNUeXBlXCIpKVxuICAgICAgICAuZmllbGQoXCJpbmRleFR5cGVcIiwgZGVmKFwiVFNUeXBlXCIpKTtcbiAgICBkZWYoXCJUU1R5cGVPcGVyYXRvclwiKVxuICAgICAgICAuYmFzZXMoXCJUU1R5cGVcIilcbiAgICAgICAgLmJ1aWxkKFwib3BlcmF0b3JcIilcbiAgICAgICAgLmZpZWxkKFwib3BlcmF0b3JcIiwgU3RyaW5nKVxuICAgICAgICAuZmllbGQoXCJ0eXBlQW5ub3RhdGlvblwiLCBkZWYoXCJUU1R5cGVcIikpO1xuICAgIGRlZihcIlRTVHlwZUFubm90YXRpb25cIilcbiAgICAgICAgLmJhc2VzKFwiTm9kZVwiKVxuICAgICAgICAuYnVpbGQoXCJ0eXBlQW5ub3RhdGlvblwiKVxuICAgICAgICAuZmllbGQoXCJ0eXBlQW5ub3RhdGlvblwiLCBvcihkZWYoXCJUU1R5cGVcIiksIGRlZihcIlRTVHlwZUFubm90YXRpb25cIikpKTtcbiAgICBkZWYoXCJUU0luZGV4U2lnbmF0dXJlXCIpXG4gICAgICAgIC5iYXNlcyhcIkRlY2xhcmF0aW9uXCIsIFwiVFNIYXNPcHRpb25hbFR5cGVBbm5vdGF0aW9uXCIpXG4gICAgICAgIC5idWlsZChcInBhcmFtZXRlcnNcIiwgXCJ0eXBlQW5ub3RhdGlvblwiKVxuICAgICAgICAuZmllbGQoXCJwYXJhbWV0ZXJzXCIsIFtkZWYoXCJJZGVudGlmaWVyXCIpXSkgLy8gTGVuZ3RoID09PSAxXG4gICAgICAgIC5maWVsZChcInJlYWRvbmx5XCIsIEJvb2xlYW4sIGRlZmF1bHRzW1wiZmFsc2VcIl0pO1xuICAgIGRlZihcIlRTUHJvcGVydHlTaWduYXR1cmVcIilcbiAgICAgICAgLmJhc2VzKFwiRGVjbGFyYXRpb25cIiwgXCJUU0hhc09wdGlvbmFsVHlwZUFubm90YXRpb25cIilcbiAgICAgICAgLmJ1aWxkKFwia2V5XCIsIFwidHlwZUFubm90YXRpb25cIiwgXCJvcHRpb25hbFwiKVxuICAgICAgICAuZmllbGQoXCJrZXlcIiwgZGVmKFwiRXhwcmVzc2lvblwiKSlcbiAgICAgICAgLmZpZWxkKFwiY29tcHV0ZWRcIiwgQm9vbGVhbiwgZGVmYXVsdHNbXCJmYWxzZVwiXSlcbiAgICAgICAgLmZpZWxkKFwicmVhZG9ubHlcIiwgQm9vbGVhbiwgZGVmYXVsdHNbXCJmYWxzZVwiXSlcbiAgICAgICAgLmZpZWxkKFwib3B0aW9uYWxcIiwgQm9vbGVhbiwgZGVmYXVsdHNbXCJmYWxzZVwiXSlcbiAgICAgICAgLmZpZWxkKFwiaW5pdGlhbGl6ZXJcIiwgb3IoZGVmKFwiRXhwcmVzc2lvblwiKSwgbnVsbCksIGRlZmF1bHRzW1wibnVsbFwiXSk7XG4gICAgZGVmKFwiVFNNZXRob2RTaWduYXR1cmVcIilcbiAgICAgICAgLmJhc2VzKFwiRGVjbGFyYXRpb25cIiwgXCJUU0hhc09wdGlvbmFsVHlwZVBhcmFtZXRlcnNcIiwgXCJUU0hhc09wdGlvbmFsVHlwZUFubm90YXRpb25cIilcbiAgICAgICAgLmJ1aWxkKFwia2V5XCIsIFwicGFyYW1ldGVyc1wiLCBcInR5cGVBbm5vdGF0aW9uXCIpXG4gICAgICAgIC5maWVsZChcImtleVwiLCBkZWYoXCJFeHByZXNzaW9uXCIpKVxuICAgICAgICAuZmllbGQoXCJjb21wdXRlZFwiLCBCb29sZWFuLCBkZWZhdWx0c1tcImZhbHNlXCJdKVxuICAgICAgICAuZmllbGQoXCJvcHRpb25hbFwiLCBCb29sZWFuLCBkZWZhdWx0c1tcImZhbHNlXCJdKVxuICAgICAgICAuZmllbGQoXCJwYXJhbWV0ZXJzXCIsIFBhcmFtZXRlcnNUeXBlKTtcbiAgICBkZWYoXCJUU1R5cGVQcmVkaWNhdGVcIilcbiAgICAgICAgLmJhc2VzKFwiVFNUeXBlQW5ub3RhdGlvblwiLCBcIlRTVHlwZVwiKVxuICAgICAgICAuYnVpbGQoXCJwYXJhbWV0ZXJOYW1lXCIsIFwidHlwZUFubm90YXRpb25cIiwgXCJhc3NlcnRzXCIpXG4gICAgICAgIC5maWVsZChcInBhcmFtZXRlck5hbWVcIiwgb3IoZGVmKFwiSWRlbnRpZmllclwiKSwgZGVmKFwiVFNUaGlzVHlwZVwiKSkpXG4gICAgICAgIC5maWVsZChcInR5cGVBbm5vdGF0aW9uXCIsIG9yKGRlZihcIlRTVHlwZUFubm90YXRpb25cIiksIG51bGwpLCBkZWZhdWx0c1tcIm51bGxcIl0pXG4gICAgICAgIC5maWVsZChcImFzc2VydHNcIiwgQm9vbGVhbiwgZGVmYXVsdHNbXCJmYWxzZVwiXSk7XG4gICAgW1wiVFNDYWxsU2lnbmF0dXJlRGVjbGFyYXRpb25cIixcbiAgICAgICAgXCJUU0NvbnN0cnVjdFNpZ25hdHVyZURlY2xhcmF0aW9uXCIsXG4gICAgXS5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlTmFtZSkge1xuICAgICAgICBkZWYodHlwZU5hbWUpXG4gICAgICAgICAgICAuYmFzZXMoXCJEZWNsYXJhdGlvblwiLCBcIlRTSGFzT3B0aW9uYWxUeXBlUGFyYW1ldGVyc1wiLCBcIlRTSGFzT3B0aW9uYWxUeXBlQW5ub3RhdGlvblwiKVxuICAgICAgICAgICAgLmJ1aWxkKFwicGFyYW1ldGVyc1wiLCBcInR5cGVBbm5vdGF0aW9uXCIpXG4gICAgICAgICAgICAuZmllbGQoXCJwYXJhbWV0ZXJzXCIsIFBhcmFtZXRlcnNUeXBlKTtcbiAgICB9KTtcbiAgICBkZWYoXCJUU0VudW1NZW1iZXJcIilcbiAgICAgICAgLmJhc2VzKFwiTm9kZVwiKVxuICAgICAgICAuYnVpbGQoXCJpZFwiLCBcImluaXRpYWxpemVyXCIpXG4gICAgICAgIC5maWVsZChcImlkXCIsIG9yKGRlZihcIklkZW50aWZpZXJcIiksIFN0cmluZ0xpdGVyYWwpKVxuICAgICAgICAuZmllbGQoXCJpbml0aWFsaXplclwiLCBvcihkZWYoXCJFeHByZXNzaW9uXCIpLCBudWxsKSwgZGVmYXVsdHNbXCJudWxsXCJdKTtcbiAgICBkZWYoXCJUU1R5cGVRdWVyeVwiKVxuICAgICAgICAuYmFzZXMoXCJUU1R5cGVcIilcbiAgICAgICAgLmJ1aWxkKFwiZXhwck5hbWVcIilcbiAgICAgICAgLmZpZWxkKFwiZXhwck5hbWVcIiwgb3IoVFNFbnRpdHlOYW1lLCBkZWYoXCJUU0ltcG9ydFR5cGVcIikpKTtcbiAgICAvLyBJbmZlcnJlZCBmcm9tIEJhYnlsb24ncyB0c1BhcnNlVHlwZU1lbWJlciBtZXRob2QuXG4gICAgdmFyIFRTVHlwZU1lbWJlciA9IG9yKGRlZihcIlRTQ2FsbFNpZ25hdHVyZURlY2xhcmF0aW9uXCIpLCBkZWYoXCJUU0NvbnN0cnVjdFNpZ25hdHVyZURlY2xhcmF0aW9uXCIpLCBkZWYoXCJUU0luZGV4U2lnbmF0dXJlXCIpLCBkZWYoXCJUU01ldGhvZFNpZ25hdHVyZVwiKSwgZGVmKFwiVFNQcm9wZXJ0eVNpZ25hdHVyZVwiKSk7XG4gICAgZGVmKFwiVFNUeXBlTGl0ZXJhbFwiKVxuICAgICAgICAuYmFzZXMoXCJUU1R5cGVcIilcbiAgICAgICAgLmJ1aWxkKFwibWVtYmVyc1wiKVxuICAgICAgICAuZmllbGQoXCJtZW1iZXJzXCIsIFtUU1R5cGVNZW1iZXJdKTtcbiAgICBkZWYoXCJUU1R5cGVQYXJhbWV0ZXJcIilcbiAgICAgICAgLmJhc2VzKFwiSWRlbnRpZmllclwiKVxuICAgICAgICAuYnVpbGQoXCJuYW1lXCIsIFwiY29uc3RyYWludFwiLCBcImRlZmF1bHRcIilcbiAgICAgICAgLmZpZWxkKFwibmFtZVwiLCBTdHJpbmcpXG4gICAgICAgIC5maWVsZChcImNvbnN0cmFpbnRcIiwgb3IoZGVmKFwiVFNUeXBlXCIpLCB2b2lkIDApLCBkZWZhdWx0c1tcInVuZGVmaW5lZFwiXSlcbiAgICAgICAgLmZpZWxkKFwiZGVmYXVsdFwiLCBvcihkZWYoXCJUU1R5cGVcIiksIHZvaWQgMCksIGRlZmF1bHRzW1widW5kZWZpbmVkXCJdKTtcbiAgICBkZWYoXCJUU1R5cGVBc3NlcnRpb25cIilcbiAgICAgICAgLmJhc2VzKFwiRXhwcmVzc2lvblwiLCBcIlBhdHRlcm5cIilcbiAgICAgICAgLmJ1aWxkKFwidHlwZUFubm90YXRpb25cIiwgXCJleHByZXNzaW9uXCIpXG4gICAgICAgIC5maWVsZChcInR5cGVBbm5vdGF0aW9uXCIsIGRlZihcIlRTVHlwZVwiKSlcbiAgICAgICAgLmZpZWxkKFwiZXhwcmVzc2lvblwiLCBkZWYoXCJFeHByZXNzaW9uXCIpKVxuICAgICAgICAuZmllbGQoXCJleHRyYVwiLCBvcih7IHBhcmVudGhlc2l6ZWQ6IEJvb2xlYW4gfSwgbnVsbCksIGRlZmF1bHRzW1wibnVsbFwiXSk7XG4gICAgZGVmKFwiVFNUeXBlUGFyYW1ldGVyRGVjbGFyYXRpb25cIilcbiAgICAgICAgLmJhc2VzKFwiRGVjbGFyYXRpb25cIilcbiAgICAgICAgLmJ1aWxkKFwicGFyYW1zXCIpXG4gICAgICAgIC5maWVsZChcInBhcmFtc1wiLCBbZGVmKFwiVFNUeXBlUGFyYW1ldGVyXCIpXSk7XG4gICAgZGVmKFwiVFNUeXBlUGFyYW1ldGVySW5zdGFudGlhdGlvblwiKVxuICAgICAgICAuYmFzZXMoXCJOb2RlXCIpXG4gICAgICAgIC5idWlsZChcInBhcmFtc1wiKVxuICAgICAgICAuZmllbGQoXCJwYXJhbXNcIiwgW2RlZihcIlRTVHlwZVwiKV0pO1xuICAgIGRlZihcIlRTRW51bURlY2xhcmF0aW9uXCIpXG4gICAgICAgIC5iYXNlcyhcIkRlY2xhcmF0aW9uXCIpXG4gICAgICAgIC5idWlsZChcImlkXCIsIFwibWVtYmVyc1wiKVxuICAgICAgICAuZmllbGQoXCJpZFwiLCBkZWYoXCJJZGVudGlmaWVyXCIpKVxuICAgICAgICAuZmllbGQoXCJjb25zdFwiLCBCb29sZWFuLCBkZWZhdWx0c1tcImZhbHNlXCJdKVxuICAgICAgICAuZmllbGQoXCJkZWNsYXJlXCIsIEJvb2xlYW4sIGRlZmF1bHRzW1wiZmFsc2VcIl0pXG4gICAgICAgIC5maWVsZChcIm1lbWJlcnNcIiwgW2RlZihcIlRTRW51bU1lbWJlclwiKV0pXG4gICAgICAgIC5maWVsZChcImluaXRpYWxpemVyXCIsIG9yKGRlZihcIkV4cHJlc3Npb25cIiksIG51bGwpLCBkZWZhdWx0c1tcIm51bGxcIl0pO1xuICAgIGRlZihcIlRTVHlwZUFsaWFzRGVjbGFyYXRpb25cIilcbiAgICAgICAgLmJhc2VzKFwiRGVjbGFyYXRpb25cIiwgXCJUU0hhc09wdGlvbmFsVHlwZVBhcmFtZXRlcnNcIilcbiAgICAgICAgLmJ1aWxkKFwiaWRcIiwgXCJ0eXBlQW5ub3RhdGlvblwiKVxuICAgICAgICAuZmllbGQoXCJpZFwiLCBkZWYoXCJJZGVudGlmaWVyXCIpKVxuICAgICAgICAuZmllbGQoXCJkZWNsYXJlXCIsIEJvb2xlYW4sIGRlZmF1bHRzW1wiZmFsc2VcIl0pXG4gICAgICAgIC5maWVsZChcInR5cGVBbm5vdGF0aW9uXCIsIGRlZihcIlRTVHlwZVwiKSk7XG4gICAgZGVmKFwiVFNNb2R1bGVCbG9ja1wiKVxuICAgICAgICAuYmFzZXMoXCJOb2RlXCIpXG4gICAgICAgIC5idWlsZChcImJvZHlcIilcbiAgICAgICAgLmZpZWxkKFwiYm9keVwiLCBbZGVmKFwiU3RhdGVtZW50XCIpXSk7XG4gICAgZGVmKFwiVFNNb2R1bGVEZWNsYXJhdGlvblwiKVxuICAgICAgICAuYmFzZXMoXCJEZWNsYXJhdGlvblwiKVxuICAgICAgICAuYnVpbGQoXCJpZFwiLCBcImJvZHlcIilcbiAgICAgICAgLmZpZWxkKFwiaWRcIiwgb3IoU3RyaW5nTGl0ZXJhbCwgVFNFbnRpdHlOYW1lKSlcbiAgICAgICAgLmZpZWxkKFwiZGVjbGFyZVwiLCBCb29sZWFuLCBkZWZhdWx0c1tcImZhbHNlXCJdKVxuICAgICAgICAuZmllbGQoXCJnbG9iYWxcIiwgQm9vbGVhbiwgZGVmYXVsdHNbXCJmYWxzZVwiXSlcbiAgICAgICAgLmZpZWxkKFwiYm9keVwiLCBvcihkZWYoXCJUU01vZHVsZUJsb2NrXCIpLCBkZWYoXCJUU01vZHVsZURlY2xhcmF0aW9uXCIpLCBudWxsKSwgZGVmYXVsdHNbXCJudWxsXCJdKTtcbiAgICBkZWYoXCJUU0ltcG9ydFR5cGVcIilcbiAgICAgICAgLmJhc2VzKFwiVFNUeXBlXCIsIFwiVFNIYXNPcHRpb25hbFR5cGVQYXJhbWV0ZXJJbnN0YW50aWF0aW9uXCIpXG4gICAgICAgIC5idWlsZChcImFyZ3VtZW50XCIsIFwicXVhbGlmaWVyXCIsIFwidHlwZVBhcmFtZXRlcnNcIilcbiAgICAgICAgLmZpZWxkKFwiYXJndW1lbnRcIiwgU3RyaW5nTGl0ZXJhbClcbiAgICAgICAgLmZpZWxkKFwicXVhbGlmaWVyXCIsIG9yKFRTRW50aXR5TmFtZSwgdm9pZCAwKSwgZGVmYXVsdHNbXCJ1bmRlZmluZWRcIl0pO1xuICAgIGRlZihcIlRTSW1wb3J0RXF1YWxzRGVjbGFyYXRpb25cIilcbiAgICAgICAgLmJhc2VzKFwiRGVjbGFyYXRpb25cIilcbiAgICAgICAgLmJ1aWxkKFwiaWRcIiwgXCJtb2R1bGVSZWZlcmVuY2VcIilcbiAgICAgICAgLmZpZWxkKFwiaWRcIiwgZGVmKFwiSWRlbnRpZmllclwiKSlcbiAgICAgICAgLmZpZWxkKFwiaXNFeHBvcnRcIiwgQm9vbGVhbiwgZGVmYXVsdHNbXCJmYWxzZVwiXSlcbiAgICAgICAgLmZpZWxkKFwibW9kdWxlUmVmZXJlbmNlXCIsIG9yKFRTRW50aXR5TmFtZSwgZGVmKFwiVFNFeHRlcm5hbE1vZHVsZVJlZmVyZW5jZVwiKSkpO1xuICAgIGRlZihcIlRTRXh0ZXJuYWxNb2R1bGVSZWZlcmVuY2VcIilcbiAgICAgICAgLmJhc2VzKFwiRGVjbGFyYXRpb25cIilcbiAgICAgICAgLmJ1aWxkKFwiZXhwcmVzc2lvblwiKVxuICAgICAgICAuZmllbGQoXCJleHByZXNzaW9uXCIsIFN0cmluZ0xpdGVyYWwpO1xuICAgIGRlZihcIlRTRXhwb3J0QXNzaWdubWVudFwiKVxuICAgICAgICAuYmFzZXMoXCJTdGF0ZW1lbnRcIilcbiAgICAgICAgLmJ1aWxkKFwiZXhwcmVzc2lvblwiKVxuICAgICAgICAuZmllbGQoXCJleHByZXNzaW9uXCIsIGRlZihcIkV4cHJlc3Npb25cIikpO1xuICAgIGRlZihcIlRTTmFtZXNwYWNlRXhwb3J0RGVjbGFyYXRpb25cIilcbiAgICAgICAgLmJhc2VzKFwiRGVjbGFyYXRpb25cIilcbiAgICAgICAgLmJ1aWxkKFwiaWRcIilcbiAgICAgICAgLmZpZWxkKFwiaWRcIiwgZGVmKFwiSWRlbnRpZmllclwiKSk7XG4gICAgZGVmKFwiVFNJbnRlcmZhY2VCb2R5XCIpXG4gICAgICAgIC5iYXNlcyhcIk5vZGVcIilcbiAgICAgICAgLmJ1aWxkKFwiYm9keVwiKVxuICAgICAgICAuZmllbGQoXCJib2R5XCIsIFtUU1R5cGVNZW1iZXJdKTtcbiAgICBkZWYoXCJUU0V4cHJlc3Npb25XaXRoVHlwZUFyZ3VtZW50c1wiKVxuICAgICAgICAuYmFzZXMoXCJUU1R5cGVcIiwgXCJUU0hhc09wdGlvbmFsVHlwZVBhcmFtZXRlckluc3RhbnRpYXRpb25cIilcbiAgICAgICAgLmJ1aWxkKFwiZXhwcmVzc2lvblwiLCBcInR5cGVQYXJhbWV0ZXJzXCIpXG4gICAgICAgIC5maWVsZChcImV4cHJlc3Npb25cIiwgVFNFbnRpdHlOYW1lKTtcbiAgICBkZWYoXCJUU0ludGVyZmFjZURlY2xhcmF0aW9uXCIpXG4gICAgICAgIC5iYXNlcyhcIkRlY2xhcmF0aW9uXCIsIFwiVFNIYXNPcHRpb25hbFR5cGVQYXJhbWV0ZXJzXCIpXG4gICAgICAgIC5idWlsZChcImlkXCIsIFwiYm9keVwiKVxuICAgICAgICAuZmllbGQoXCJpZFwiLCBUU0VudGl0eU5hbWUpXG4gICAgICAgIC5maWVsZChcImRlY2xhcmVcIiwgQm9vbGVhbiwgZGVmYXVsdHNbXCJmYWxzZVwiXSlcbiAgICAgICAgLmZpZWxkKFwiZXh0ZW5kc1wiLCBvcihbZGVmKFwiVFNFeHByZXNzaW9uV2l0aFR5cGVBcmd1bWVudHNcIildLCBudWxsKSwgZGVmYXVsdHNbXCJudWxsXCJdKVxuICAgICAgICAuZmllbGQoXCJib2R5XCIsIGRlZihcIlRTSW50ZXJmYWNlQm9keVwiKSk7XG4gICAgZGVmKFwiVFNQYXJhbWV0ZXJQcm9wZXJ0eVwiKVxuICAgICAgICAuYmFzZXMoXCJQYXR0ZXJuXCIpXG4gICAgICAgIC5idWlsZChcInBhcmFtZXRlclwiKVxuICAgICAgICAuZmllbGQoXCJhY2Nlc3NpYmlsaXR5XCIsIG9yKFwicHVibGljXCIsIFwicHJpdmF0ZVwiLCBcInByb3RlY3RlZFwiLCB2b2lkIDApLCBkZWZhdWx0c1tcInVuZGVmaW5lZFwiXSlcbiAgICAgICAgLmZpZWxkKFwicmVhZG9ubHlcIiwgQm9vbGVhbiwgZGVmYXVsdHNbXCJmYWxzZVwiXSlcbiAgICAgICAgLmZpZWxkKFwicGFyYW1ldGVyXCIsIG9yKGRlZihcIklkZW50aWZpZXJcIiksIGRlZihcIkFzc2lnbm1lbnRQYXR0ZXJuXCIpKSk7XG4gICAgZGVmKFwiQ2xhc3NQcm9wZXJ0eVwiKVxuICAgICAgICAuZmllbGQoXCJhY2Nlc3NcIiwgLy8gTm90IFwiYWNjZXNzaWJpbGl0eVwiP1xuICAgIG9yKFwicHVibGljXCIsIFwicHJpdmF0ZVwiLCBcInByb3RlY3RlZFwiLCB2b2lkIDApLCBkZWZhdWx0c1tcInVuZGVmaW5lZFwiXSk7XG4gICAgLy8gRGVmaW5lZCBhbHJlYWR5IGluIGVzNiBhbmQgYmFiZWwtY29yZS5cbiAgICBkZWYoXCJDbGFzc0JvZHlcIilcbiAgICAgICAgLmZpZWxkKFwiYm9keVwiLCBbb3IoZGVmKFwiTWV0aG9kRGVmaW5pdGlvblwiKSwgZGVmKFwiVmFyaWFibGVEZWNsYXJhdG9yXCIpLCBkZWYoXCJDbGFzc1Byb3BlcnR5RGVmaW5pdGlvblwiKSwgZGVmKFwiQ2xhc3NQcm9wZXJ0eVwiKSwgZGVmKFwiQ2xhc3NQcml2YXRlUHJvcGVydHlcIiksIGRlZihcIkNsYXNzTWV0aG9kXCIpLCBkZWYoXCJDbGFzc1ByaXZhdGVNZXRob2RcIiksIFxuICAgICAgICAvLyBKdXN0IG5lZWQgdG8gYWRkIHRoZXNlIHR5cGVzOlxuICAgICAgICBkZWYoXCJUU0RlY2xhcmVNZXRob2RcIiksIFRTVHlwZU1lbWJlcildKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGRlZmF1bHRfMTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ0c2xpYl8xIiwicmVxdWlyZSIsImJhYmVsX2NvcmVfMSIsIl9faW1wb3J0RGVmYXVsdCIsInR5cGVfYW5ub3RhdGlvbnNfMSIsInR5cGVzXzEiLCJzaGFyZWRfMSIsImRlZmF1bHRfMSIsImZvcmsiLCJ1c2UiLCJkZWZhdWx0IiwidHlwZXMiLCJuIiwibmFtZWRUeXBlcyIsImRlZiIsIlR5cGUiLCJvciIsImRlZmF1bHRzIiwiU3RyaW5nTGl0ZXJhbCIsImZyb20iLCJkZWVwIiwiY2hlY2siLCJMaXRlcmFsIiwiYmFzZXMiLCJUU0VudGl0eU5hbWUiLCJidWlsZCIsImZpZWxkIiwicGFyZW50aGVzaXplZCIsIkJvb2xlYW4iLCJmb3JFYWNoIiwia2V5d29yZFR5cGUiLCJ0eXBlTmFtZSIsIlBhcmFtZXRlcnNUeXBlIiwiZ2V0RGVmYXVsdCIsIlN0cmluZyIsIlRTVHlwZU1lbWJlciIsIm1vZHVsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ast-types/def/typescript.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ast-types/fork.js":
/*!****************************************!*\
  !*** ./node_modules/ast-types/fork.js ***!
  \****************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nvar types_1 = tslib_1.__importDefault(__webpack_require__(/*! ./lib/types */ \"(rsc)/./node_modules/ast-types/lib/types.js\"));\nvar path_visitor_1 = tslib_1.__importDefault(__webpack_require__(/*! ./lib/path-visitor */ \"(rsc)/./node_modules/ast-types/lib/path-visitor.js\"));\nvar equiv_1 = tslib_1.__importDefault(__webpack_require__(/*! ./lib/equiv */ \"(rsc)/./node_modules/ast-types/lib/equiv.js\"));\nvar path_1 = tslib_1.__importDefault(__webpack_require__(/*! ./lib/path */ \"(rsc)/./node_modules/ast-types/lib/path.js\"));\nvar node_path_1 = tslib_1.__importDefault(__webpack_require__(/*! ./lib/node-path */ \"(rsc)/./node_modules/ast-types/lib/node-path.js\"));\nfunction default_1(defs) {\n    var fork = createFork();\n    var types = fork.use(types_1.default);\n    defs.forEach(fork.use);\n    types.finalize();\n    var PathVisitor = fork.use(path_visitor_1.default);\n    return {\n        Type: types.Type,\n        builtInTypes: types.builtInTypes,\n        namedTypes: types.namedTypes,\n        builders: types.builders,\n        defineMethod: types.defineMethod,\n        getFieldNames: types.getFieldNames,\n        getFieldValue: types.getFieldValue,\n        eachField: types.eachField,\n        someField: types.someField,\n        getSupertypeNames: types.getSupertypeNames,\n        getBuilderName: types.getBuilderName,\n        astNodesAreEquivalent: fork.use(equiv_1.default),\n        finalize: types.finalize,\n        Path: fork.use(path_1.default),\n        NodePath: fork.use(node_path_1.default),\n        PathVisitor: PathVisitor,\n        use: fork.use,\n        visit: PathVisitor.visit\n    };\n}\nexports[\"default\"] = default_1;\nfunction createFork() {\n    var used = [];\n    var usedResult = [];\n    function use(plugin) {\n        var idx = used.indexOf(plugin);\n        if (idx === -1) {\n            idx = used.length;\n            used.push(plugin);\n            usedResult[idx] = plugin(fork);\n        }\n        return usedResult[idx];\n    }\n    var fork = {\n        use: use\n    };\n    return fork;\n}\nmodule.exports = exports[\"default\"];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYXN0LXR5cGVzL2ZvcmsuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELElBQUlDLFVBQVVDLG1CQUFPQSxDQUFDLHVEQUFPO0FBQzdCLElBQUlDLFVBQVVGLFFBQVFHLGVBQWUsQ0FBQ0YsbUJBQU9BLENBQUMsZ0VBQWE7QUFDM0QsSUFBSUcsaUJBQWlCSixRQUFRRyxlQUFlLENBQUNGLG1CQUFPQSxDQUFDLDhFQUFvQjtBQUN6RSxJQUFJSSxVQUFVTCxRQUFRRyxlQUFlLENBQUNGLG1CQUFPQSxDQUFDLGdFQUFhO0FBQzNELElBQUlLLFNBQVNOLFFBQVFHLGVBQWUsQ0FBQ0YsbUJBQU9BLENBQUMsOERBQVk7QUFDekQsSUFBSU0sY0FBY1AsUUFBUUcsZUFBZSxDQUFDRixtQkFBT0EsQ0FBQyx3RUFBaUI7QUFDbkUsU0FBU08sVUFBVUMsSUFBSTtJQUNuQixJQUFJQyxPQUFPQztJQUNYLElBQUlDLFFBQVFGLEtBQUtHLEdBQUcsQ0FBQ1gsUUFBUVksT0FBTztJQUNwQ0wsS0FBS00sT0FBTyxDQUFDTCxLQUFLRyxHQUFHO0lBQ3JCRCxNQUFNSSxRQUFRO0lBQ2QsSUFBSUMsY0FBY1AsS0FBS0csR0FBRyxDQUFDVCxlQUFlVSxPQUFPO0lBQ2pELE9BQU87UUFDSEksTUFBTU4sTUFBTU0sSUFBSTtRQUNoQkMsY0FBY1AsTUFBTU8sWUFBWTtRQUNoQ0MsWUFBWVIsTUFBTVEsVUFBVTtRQUM1QkMsVUFBVVQsTUFBTVMsUUFBUTtRQUN4QkMsY0FBY1YsTUFBTVUsWUFBWTtRQUNoQ0MsZUFBZVgsTUFBTVcsYUFBYTtRQUNsQ0MsZUFBZVosTUFBTVksYUFBYTtRQUNsQ0MsV0FBV2IsTUFBTWEsU0FBUztRQUMxQkMsV0FBV2QsTUFBTWMsU0FBUztRQUMxQkMsbUJBQW1CZixNQUFNZSxpQkFBaUI7UUFDMUNDLGdCQUFnQmhCLE1BQU1nQixjQUFjO1FBQ3BDQyx1QkFBdUJuQixLQUFLRyxHQUFHLENBQUNSLFFBQVFTLE9BQU87UUFDL0NFLFVBQVVKLE1BQU1JLFFBQVE7UUFDeEJjLE1BQU1wQixLQUFLRyxHQUFHLENBQUNQLE9BQU9RLE9BQU87UUFDN0JpQixVQUFVckIsS0FBS0csR0FBRyxDQUFDTixZQUFZTyxPQUFPO1FBQ3RDRyxhQUFhQTtRQUNiSixLQUFLSCxLQUFLRyxHQUFHO1FBQ2JtQixPQUFPZixZQUFZZSxLQUFLO0lBQzVCO0FBQ0o7QUFDQWxDLGtCQUFlLEdBQUdVO0FBQ2xCLFNBQVNHO0lBQ0wsSUFBSXNCLE9BQU8sRUFBRTtJQUNiLElBQUlDLGFBQWEsRUFBRTtJQUNuQixTQUFTckIsSUFBSXNCLE1BQU07UUFDZixJQUFJQyxNQUFNSCxLQUFLSSxPQUFPLENBQUNGO1FBQ3ZCLElBQUlDLFFBQVEsQ0FBQyxHQUFHO1lBQ1pBLE1BQU1ILEtBQUtLLE1BQU07WUFDakJMLEtBQUtNLElBQUksQ0FBQ0o7WUFDVkQsVUFBVSxDQUFDRSxJQUFJLEdBQUdELE9BQU96QjtRQUM3QjtRQUNBLE9BQU93QixVQUFVLENBQUNFLElBQUk7SUFDMUI7SUFDQSxJQUFJMUIsT0FBTztRQUFFRyxLQUFLQTtJQUFJO0lBQ3RCLE9BQU9IO0FBQ1g7QUFDQThCLE9BQU8xQyxPQUFPLEdBQUdBLE9BQU8sQ0FBQyxVQUFVIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2l2aWwtZW5naW5lZXJpbmctcGxhdGZvcm0vLi9ub2RlX21vZHVsZXMvYXN0LXR5cGVzL2ZvcmsuanM/NTAxMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjs7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbnZhciB0eXBlc18xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbGliL3R5cGVzXCIpKTtcbnZhciBwYXRoX3Zpc2l0b3JfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9wYXRoLXZpc2l0b3JcIikpO1xudmFyIGVxdWl2XzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9saWIvZXF1aXZcIikpO1xudmFyIHBhdGhfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9wYXRoXCIpKTtcbnZhciBub2RlX3BhdGhfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9ub2RlLXBhdGhcIikpO1xuZnVuY3Rpb24gZGVmYXVsdF8xKGRlZnMpIHtcbiAgICB2YXIgZm9yayA9IGNyZWF0ZUZvcmsoKTtcbiAgICB2YXIgdHlwZXMgPSBmb3JrLnVzZSh0eXBlc18xLmRlZmF1bHQpO1xuICAgIGRlZnMuZm9yRWFjaChmb3JrLnVzZSk7XG4gICAgdHlwZXMuZmluYWxpemUoKTtcbiAgICB2YXIgUGF0aFZpc2l0b3IgPSBmb3JrLnVzZShwYXRoX3Zpc2l0b3JfMS5kZWZhdWx0KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBUeXBlOiB0eXBlcy5UeXBlLFxuICAgICAgICBidWlsdEluVHlwZXM6IHR5cGVzLmJ1aWx0SW5UeXBlcyxcbiAgICAgICAgbmFtZWRUeXBlczogdHlwZXMubmFtZWRUeXBlcyxcbiAgICAgICAgYnVpbGRlcnM6IHR5cGVzLmJ1aWxkZXJzLFxuICAgICAgICBkZWZpbmVNZXRob2Q6IHR5cGVzLmRlZmluZU1ldGhvZCxcbiAgICAgICAgZ2V0RmllbGROYW1lczogdHlwZXMuZ2V0RmllbGROYW1lcyxcbiAgICAgICAgZ2V0RmllbGRWYWx1ZTogdHlwZXMuZ2V0RmllbGRWYWx1ZSxcbiAgICAgICAgZWFjaEZpZWxkOiB0eXBlcy5lYWNoRmllbGQsXG4gICAgICAgIHNvbWVGaWVsZDogdHlwZXMuc29tZUZpZWxkLFxuICAgICAgICBnZXRTdXBlcnR5cGVOYW1lczogdHlwZXMuZ2V0U3VwZXJ0eXBlTmFtZXMsXG4gICAgICAgIGdldEJ1aWxkZXJOYW1lOiB0eXBlcy5nZXRCdWlsZGVyTmFtZSxcbiAgICAgICAgYXN0Tm9kZXNBcmVFcXVpdmFsZW50OiBmb3JrLnVzZShlcXVpdl8xLmRlZmF1bHQpLFxuICAgICAgICBmaW5hbGl6ZTogdHlwZXMuZmluYWxpemUsXG4gICAgICAgIFBhdGg6IGZvcmsudXNlKHBhdGhfMS5kZWZhdWx0KSxcbiAgICAgICAgTm9kZVBhdGg6IGZvcmsudXNlKG5vZGVfcGF0aF8xLmRlZmF1bHQpLFxuICAgICAgICBQYXRoVmlzaXRvcjogUGF0aFZpc2l0b3IsXG4gICAgICAgIHVzZTogZm9yay51c2UsXG4gICAgICAgIHZpc2l0OiBQYXRoVmlzaXRvci52aXNpdCxcbiAgICB9O1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gZGVmYXVsdF8xO1xuZnVuY3Rpb24gY3JlYXRlRm9yaygpIHtcbiAgICB2YXIgdXNlZCA9IFtdO1xuICAgIHZhciB1c2VkUmVzdWx0ID0gW107XG4gICAgZnVuY3Rpb24gdXNlKHBsdWdpbikge1xuICAgICAgICB2YXIgaWR4ID0gdXNlZC5pbmRleE9mKHBsdWdpbik7XG4gICAgICAgIGlmIChpZHggPT09IC0xKSB7XG4gICAgICAgICAgICBpZHggPSB1c2VkLmxlbmd0aDtcbiAgICAgICAgICAgIHVzZWQucHVzaChwbHVnaW4pO1xuICAgICAgICAgICAgdXNlZFJlc3VsdFtpZHhdID0gcGx1Z2luKGZvcmspO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1c2VkUmVzdWx0W2lkeF07XG4gICAgfVxuICAgIHZhciBmb3JrID0geyB1c2U6IHVzZSB9O1xuICAgIHJldHVybiBmb3JrO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRzbGliXzEiLCJyZXF1aXJlIiwidHlwZXNfMSIsIl9faW1wb3J0RGVmYXVsdCIsInBhdGhfdmlzaXRvcl8xIiwiZXF1aXZfMSIsInBhdGhfMSIsIm5vZGVfcGF0aF8xIiwiZGVmYXVsdF8xIiwiZGVmcyIsImZvcmsiLCJjcmVhdGVGb3JrIiwidHlwZXMiLCJ1c2UiLCJkZWZhdWx0IiwiZm9yRWFjaCIsImZpbmFsaXplIiwiUGF0aFZpc2l0b3IiLCJUeXBlIiwiYnVpbHRJblR5cGVzIiwibmFtZWRUeXBlcyIsImJ1aWxkZXJzIiwiZGVmaW5lTWV0aG9kIiwiZ2V0RmllbGROYW1lcyIsImdldEZpZWxkVmFsdWUiLCJlYWNoRmllbGQiLCJzb21lRmllbGQiLCJnZXRTdXBlcnR5cGVOYW1lcyIsImdldEJ1aWxkZXJOYW1lIiwiYXN0Tm9kZXNBcmVFcXVpdmFsZW50IiwiUGF0aCIsIk5vZGVQYXRoIiwidmlzaXQiLCJ1c2VkIiwidXNlZFJlc3VsdCIsInBsdWdpbiIsImlkeCIsImluZGV4T2YiLCJsZW5ndGgiLCJwdXNoIiwibW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ast-types/fork.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ast-types/gen/namedTypes.js":
/*!**************************************************!*\
  !*** ./node_modules/ast-types/gen/namedTypes.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.namedTypes = void 0;\nvar namedTypes;\n(function(namedTypes) {})(namedTypes = exports.namedTypes || (exports.namedTypes = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYXN0LXR5cGVzL2dlbi9uYW1lZFR5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxrQkFBa0IsR0FBRyxLQUFLO0FBQzFCLElBQUlFO0FBQ0gsVUFBVUEsVUFBVSxHQUNyQixHQUFHQSxhQUFhRixRQUFRRSxVQUFVLElBQUtGLENBQUFBLGtCQUFrQixHQUFHLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaXZpbC1lbmdpbmVlcmluZy1wbGF0Zm9ybS8uL25vZGVfbW9kdWxlcy9hc3QtdHlwZXMvZ2VuL25hbWVkVHlwZXMuanM/M2Y2MiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubmFtZWRUeXBlcyA9IHZvaWQgMDtcbnZhciBuYW1lZFR5cGVzO1xuKGZ1bmN0aW9uIChuYW1lZFR5cGVzKSB7XG59KShuYW1lZFR5cGVzID0gZXhwb3J0cy5uYW1lZFR5cGVzIHx8IChleHBvcnRzLm5hbWVkVHlwZXMgPSB7fSkpO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibmFtZWRUeXBlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ast-types/gen/namedTypes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ast-types/lib/equiv.js":
/*!*********************************************!*\
  !*** ./node_modules/ast-types/lib/equiv.js ***!
  \*********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nvar types_1 = tslib_1.__importDefault(__webpack_require__(/*! ./types */ \"(rsc)/./node_modules/ast-types/lib/types.js\"));\nfunction default_1(fork) {\n    var types = fork.use(types_1.default);\n    var getFieldNames = types.getFieldNames;\n    var getFieldValue = types.getFieldValue;\n    var isArray = types.builtInTypes.array;\n    var isObject = types.builtInTypes.object;\n    var isDate = types.builtInTypes.Date;\n    var isRegExp = types.builtInTypes.RegExp;\n    var hasOwn = Object.prototype.hasOwnProperty;\n    function astNodesAreEquivalent(a, b, problemPath) {\n        if (isArray.check(problemPath)) {\n            problemPath.length = 0;\n        } else {\n            problemPath = null;\n        }\n        return areEquivalent(a, b, problemPath);\n    }\n    astNodesAreEquivalent.assert = function(a, b) {\n        var problemPath = [];\n        if (!astNodesAreEquivalent(a, b, problemPath)) {\n            if (problemPath.length === 0) {\n                if (a !== b) {\n                    throw new Error(\"Nodes must be equal\");\n                }\n            } else {\n                throw new Error(\"Nodes differ in the following path: \" + problemPath.map(subscriptForProperty).join(\"\"));\n            }\n        }\n    };\n    function subscriptForProperty(property) {\n        if (/[_$a-z][_$a-z0-9]*/i.test(property)) {\n            return \".\" + property;\n        }\n        return \"[\" + JSON.stringify(property) + \"]\";\n    }\n    function areEquivalent(a, b, problemPath) {\n        if (a === b) {\n            return true;\n        }\n        if (isArray.check(a)) {\n            return arraysAreEquivalent(a, b, problemPath);\n        }\n        if (isObject.check(a)) {\n            return objectsAreEquivalent(a, b, problemPath);\n        }\n        if (isDate.check(a)) {\n            return isDate.check(b) && +a === +b;\n        }\n        if (isRegExp.check(a)) {\n            return isRegExp.check(b) && a.source === b.source && a.global === b.global && a.multiline === b.multiline && a.ignoreCase === b.ignoreCase;\n        }\n        return a == b;\n    }\n    function arraysAreEquivalent(a, b, problemPath) {\n        isArray.assert(a);\n        var aLength = a.length;\n        if (!isArray.check(b) || b.length !== aLength) {\n            if (problemPath) {\n                problemPath.push(\"length\");\n            }\n            return false;\n        }\n        for(var i = 0; i < aLength; ++i){\n            if (problemPath) {\n                problemPath.push(i);\n            }\n            if (i in a !== i in b) {\n                return false;\n            }\n            if (!areEquivalent(a[i], b[i], problemPath)) {\n                return false;\n            }\n            if (problemPath) {\n                var problemPathTail = problemPath.pop();\n                if (problemPathTail !== i) {\n                    throw new Error(\"\" + problemPathTail);\n                }\n            }\n        }\n        return true;\n    }\n    function objectsAreEquivalent(a, b, problemPath) {\n        isObject.assert(a);\n        if (!isObject.check(b)) {\n            return false;\n        }\n        // Fast path for a common property of AST nodes.\n        if (a.type !== b.type) {\n            if (problemPath) {\n                problemPath.push(\"type\");\n            }\n            return false;\n        }\n        var aNames = getFieldNames(a);\n        var aNameCount = aNames.length;\n        var bNames = getFieldNames(b);\n        var bNameCount = bNames.length;\n        if (aNameCount === bNameCount) {\n            for(var i = 0; i < aNameCount; ++i){\n                var name = aNames[i];\n                var aChild = getFieldValue(a, name);\n                var bChild = getFieldValue(b, name);\n                if (problemPath) {\n                    problemPath.push(name);\n                }\n                if (!areEquivalent(aChild, bChild, problemPath)) {\n                    return false;\n                }\n                if (problemPath) {\n                    var problemPathTail = problemPath.pop();\n                    if (problemPathTail !== name) {\n                        throw new Error(\"\" + problemPathTail);\n                    }\n                }\n            }\n            return true;\n        }\n        if (!problemPath) {\n            return false;\n        }\n        // Since aNameCount !== bNameCount, we need to find some name that's\n        // missing in aNames but present in bNames, or vice-versa.\n        var seenNames = Object.create(null);\n        for(i = 0; i < aNameCount; ++i){\n            seenNames[aNames[i]] = true;\n        }\n        for(i = 0; i < bNameCount; ++i){\n            name = bNames[i];\n            if (!hasOwn.call(seenNames, name)) {\n                problemPath.push(name);\n                return false;\n            }\n            delete seenNames[name];\n        }\n        for(name in seenNames){\n            problemPath.push(name);\n            break;\n        }\n        return false;\n    }\n    return astNodesAreEquivalent;\n}\nexports[\"default\"] = default_1;\nmodule.exports = exports[\"default\"];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ast-types/lib/equiv.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ast-types/lib/node-path.js":
/*!*************************************************!*\
  !*** ./node_modules/ast-types/lib/node-path.js ***!
  \*************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nvar types_1 = tslib_1.__importDefault(__webpack_require__(/*! ./types */ \"(rsc)/./node_modules/ast-types/lib/types.js\"));\nvar path_1 = tslib_1.__importDefault(__webpack_require__(/*! ./path */ \"(rsc)/./node_modules/ast-types/lib/path.js\"));\nvar scope_1 = tslib_1.__importDefault(__webpack_require__(/*! ./scope */ \"(rsc)/./node_modules/ast-types/lib/scope.js\"));\nfunction nodePathPlugin(fork) {\n    var types = fork.use(types_1.default);\n    var n = types.namedTypes;\n    var b = types.builders;\n    var isNumber = types.builtInTypes.number;\n    var isArray = types.builtInTypes.array;\n    var Path = fork.use(path_1.default);\n    var Scope = fork.use(scope_1.default);\n    var NodePath = function NodePath(value, parentPath, name) {\n        if (!(this instanceof NodePath)) {\n            throw new Error(\"NodePath constructor cannot be invoked without 'new'\");\n        }\n        Path.call(this, value, parentPath, name);\n    };\n    var NPp = NodePath.prototype = Object.create(Path.prototype, {\n        constructor: {\n            value: NodePath,\n            enumerable: false,\n            writable: true,\n            configurable: true\n        }\n    });\n    Object.defineProperties(NPp, {\n        node: {\n            get: function() {\n                Object.defineProperty(this, \"node\", {\n                    configurable: true,\n                    value: this._computeNode()\n                });\n                return this.node;\n            }\n        },\n        parent: {\n            get: function() {\n                Object.defineProperty(this, \"parent\", {\n                    configurable: true,\n                    value: this._computeParent()\n                });\n                return this.parent;\n            }\n        },\n        scope: {\n            get: function() {\n                Object.defineProperty(this, \"scope\", {\n                    configurable: true,\n                    value: this._computeScope()\n                });\n                return this.scope;\n            }\n        }\n    });\n    NPp.replace = function() {\n        delete this.node;\n        delete this.parent;\n        delete this.scope;\n        return Path.prototype.replace.apply(this, arguments);\n    };\n    NPp.prune = function() {\n        var remainingNodePath = this.parent;\n        this.replace();\n        return cleanUpNodesAfterPrune(remainingNodePath);\n    };\n    // The value of the first ancestor Path whose value is a Node.\n    NPp._computeNode = function() {\n        var value = this.value;\n        if (n.Node.check(value)) {\n            return value;\n        }\n        var pp = this.parentPath;\n        return pp && pp.node || null;\n    };\n    // The first ancestor Path whose value is a Node distinct from this.node.\n    NPp._computeParent = function() {\n        var value = this.value;\n        var pp = this.parentPath;\n        if (!n.Node.check(value)) {\n            while(pp && !n.Node.check(pp.value)){\n                pp = pp.parentPath;\n            }\n            if (pp) {\n                pp = pp.parentPath;\n            }\n        }\n        while(pp && !n.Node.check(pp.value)){\n            pp = pp.parentPath;\n        }\n        return pp || null;\n    };\n    // The closest enclosing scope that governs this node.\n    NPp._computeScope = function() {\n        var value = this.value;\n        var pp = this.parentPath;\n        var scope = pp && pp.scope;\n        if (n.Node.check(value) && Scope.isEstablishedBy(value)) {\n            scope = new Scope(this, scope);\n        }\n        return scope || null;\n    };\n    NPp.getValueProperty = function(name) {\n        return types.getFieldValue(this.value, name);\n    };\n    /**\n     * Determine whether this.node needs to be wrapped in parentheses in order\n     * for a parser to reproduce the same local AST structure.\n     *\n     * For instance, in the expression `(1 + 2) * 3`, the BinaryExpression\n     * whose operator is \"+\" needs parentheses, because `1 + 2 * 3` would\n     * parse differently.\n     *\n     * If assumeExpressionContext === true, we don't worry about edge cases\n     * like an anonymous FunctionExpression appearing lexically first in its\n     * enclosing statement and thus needing parentheses to avoid being parsed\n     * as a FunctionDeclaration with a missing name.\n     */ NPp.needsParens = function(assumeExpressionContext) {\n        var pp = this.parentPath;\n        if (!pp) {\n            return false;\n        }\n        var node = this.value;\n        // Only expressions need parentheses.\n        if (!n.Expression.check(node)) {\n            return false;\n        }\n        // Identifiers never need parentheses.\n        if (node.type === \"Identifier\") {\n            return false;\n        }\n        while(!n.Node.check(pp.value)){\n            pp = pp.parentPath;\n            if (!pp) {\n                return false;\n            }\n        }\n        var parent = pp.value;\n        switch(node.type){\n            case \"UnaryExpression\":\n            case \"SpreadElement\":\n            case \"SpreadProperty\":\n                return parent.type === \"MemberExpression\" && this.name === \"object\" && parent.object === node;\n            case \"BinaryExpression\":\n            case \"LogicalExpression\":\n                switch(parent.type){\n                    case \"CallExpression\":\n                        return this.name === \"callee\" && parent.callee === node;\n                    case \"UnaryExpression\":\n                    case \"SpreadElement\":\n                    case \"SpreadProperty\":\n                        return true;\n                    case \"MemberExpression\":\n                        return this.name === \"object\" && parent.object === node;\n                    case \"BinaryExpression\":\n                    case \"LogicalExpression\":\n                        {\n                            var n_1 = node;\n                            var po = parent.operator;\n                            var pp_1 = PRECEDENCE[po];\n                            var no = n_1.operator;\n                            var np = PRECEDENCE[no];\n                            if (pp_1 > np) {\n                                return true;\n                            }\n                            if (pp_1 === np && this.name === \"right\") {\n                                if (parent.right !== n_1) {\n                                    throw new Error(\"Nodes must be equal\");\n                                }\n                                return true;\n                            }\n                        }\n                    default:\n                        return false;\n                }\n            case \"SequenceExpression\":\n                switch(parent.type){\n                    case \"ForStatement\":\n                        // Although parentheses wouldn't hurt around sequence\n                        // expressions in the head of for loops, traditional style\n                        // dictates that e.g. i++, j++ should not be wrapped with\n                        // parentheses.\n                        return false;\n                    case \"ExpressionStatement\":\n                        return this.name !== \"expression\";\n                    default:\n                        // Otherwise err on the side of overparenthesization, adding\n                        // explicit exceptions above if this proves overzealous.\n                        return true;\n                }\n            case \"YieldExpression\":\n                switch(parent.type){\n                    case \"BinaryExpression\":\n                    case \"LogicalExpression\":\n                    case \"UnaryExpression\":\n                    case \"SpreadElement\":\n                    case \"SpreadProperty\":\n                    case \"CallExpression\":\n                    case \"MemberExpression\":\n                    case \"NewExpression\":\n                    case \"ConditionalExpression\":\n                    case \"YieldExpression\":\n                        return true;\n                    default:\n                        return false;\n                }\n            case \"Literal\":\n                return parent.type === \"MemberExpression\" && isNumber.check(node.value) && this.name === \"object\" && parent.object === node;\n            case \"AssignmentExpression\":\n            case \"ConditionalExpression\":\n                switch(parent.type){\n                    case \"UnaryExpression\":\n                    case \"SpreadElement\":\n                    case \"SpreadProperty\":\n                    case \"BinaryExpression\":\n                    case \"LogicalExpression\":\n                        return true;\n                    case \"CallExpression\":\n                        return this.name === \"callee\" && parent.callee === node;\n                    case \"ConditionalExpression\":\n                        return this.name === \"test\" && parent.test === node;\n                    case \"MemberExpression\":\n                        return this.name === \"object\" && parent.object === node;\n                    default:\n                        return false;\n                }\n            default:\n                if (parent.type === \"NewExpression\" && this.name === \"callee\" && parent.callee === node) {\n                    return containsCallExpression(node);\n                }\n        }\n        if (assumeExpressionContext !== true && !this.canBeFirstInStatement() && this.firstInStatement()) return true;\n        return false;\n    };\n    function isBinary(node) {\n        return n.BinaryExpression.check(node) || n.LogicalExpression.check(node);\n    }\n    // @ts-ignore 'isUnaryLike' is declared but its value is never read. [6133]\n    function isUnaryLike(node) {\n        return n.UnaryExpression.check(node) || n.SpreadElement && n.SpreadElement.check(node) || n.SpreadProperty && n.SpreadProperty.check(node);\n    }\n    var PRECEDENCE = {};\n    [\n        [\n            \"||\"\n        ],\n        [\n            \"&&\"\n        ],\n        [\n            \"|\"\n        ],\n        [\n            \"^\"\n        ],\n        [\n            \"&\"\n        ],\n        [\n            \"==\",\n            \"===\",\n            \"!=\",\n            \"!==\"\n        ],\n        [\n            \"<\",\n            \">\",\n            \"<=\",\n            \">=\",\n            \"in\",\n            \"instanceof\"\n        ],\n        [\n            \">>\",\n            \"<<\",\n            \">>>\"\n        ],\n        [\n            \"+\",\n            \"-\"\n        ],\n        [\n            \"*\",\n            \"/\",\n            \"%\"\n        ]\n    ].forEach(function(tier, i) {\n        tier.forEach(function(op) {\n            PRECEDENCE[op] = i;\n        });\n    });\n    function containsCallExpression(node) {\n        if (n.CallExpression.check(node)) {\n            return true;\n        }\n        if (isArray.check(node)) {\n            return node.some(containsCallExpression);\n        }\n        if (n.Node.check(node)) {\n            return types.someField(node, function(_name, child) {\n                return containsCallExpression(child);\n            });\n        }\n        return false;\n    }\n    NPp.canBeFirstInStatement = function() {\n        var node = this.node;\n        return !n.FunctionExpression.check(node) && !n.ObjectExpression.check(node);\n    };\n    NPp.firstInStatement = function() {\n        return firstInStatement(this);\n    };\n    function firstInStatement(path) {\n        for(var node, parent; path.parent; path = path.parent){\n            node = path.node;\n            parent = path.parent.node;\n            if (n.BlockStatement.check(parent) && path.parent.name === \"body\" && path.name === 0) {\n                if (parent.body[0] !== node) {\n                    throw new Error(\"Nodes must be equal\");\n                }\n                return true;\n            }\n            if (n.ExpressionStatement.check(parent) && path.name === \"expression\") {\n                if (parent.expression !== node) {\n                    throw new Error(\"Nodes must be equal\");\n                }\n                return true;\n            }\n            if (n.SequenceExpression.check(parent) && path.parent.name === \"expressions\" && path.name === 0) {\n                if (parent.expressions[0] !== node) {\n                    throw new Error(\"Nodes must be equal\");\n                }\n                continue;\n            }\n            if (n.CallExpression.check(parent) && path.name === \"callee\") {\n                if (parent.callee !== node) {\n                    throw new Error(\"Nodes must be equal\");\n                }\n                continue;\n            }\n            if (n.MemberExpression.check(parent) && path.name === \"object\") {\n                if (parent.object !== node) {\n                    throw new Error(\"Nodes must be equal\");\n                }\n                continue;\n            }\n            if (n.ConditionalExpression.check(parent) && path.name === \"test\") {\n                if (parent.test !== node) {\n                    throw new Error(\"Nodes must be equal\");\n                }\n                continue;\n            }\n            if (isBinary(parent) && path.name === \"left\") {\n                if (parent.left !== node) {\n                    throw new Error(\"Nodes must be equal\");\n                }\n                continue;\n            }\n            if (n.UnaryExpression.check(parent) && !parent.prefix && path.name === \"argument\") {\n                if (parent.argument !== node) {\n                    throw new Error(\"Nodes must be equal\");\n                }\n                continue;\n            }\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Pruning certain nodes will result in empty or incomplete nodes, here we clean those nodes up.\n     */ function cleanUpNodesAfterPrune(remainingNodePath) {\n        if (n.VariableDeclaration.check(remainingNodePath.node)) {\n            var declarations = remainingNodePath.get(\"declarations\").value;\n            if (!declarations || declarations.length === 0) {\n                return remainingNodePath.prune();\n            }\n        } else if (n.ExpressionStatement.check(remainingNodePath.node)) {\n            if (!remainingNodePath.get(\"expression\").value) {\n                return remainingNodePath.prune();\n            }\n        } else if (n.IfStatement.check(remainingNodePath.node)) {\n            cleanUpIfStatementAfterPrune(remainingNodePath);\n        }\n        return remainingNodePath;\n    }\n    function cleanUpIfStatementAfterPrune(ifStatement) {\n        var testExpression = ifStatement.get(\"test\").value;\n        var alternate = ifStatement.get(\"alternate\").value;\n        var consequent = ifStatement.get(\"consequent\").value;\n        if (!consequent && !alternate) {\n            var testExpressionStatement = b.expressionStatement(testExpression);\n            ifStatement.replace(testExpressionStatement);\n        } else if (!consequent && alternate) {\n            var negatedTestExpression = b.unaryExpression(\"!\", testExpression, true);\n            if (n.UnaryExpression.check(testExpression) && testExpression.operator === \"!\") {\n                negatedTestExpression = testExpression.argument;\n            }\n            ifStatement.get(\"test\").replace(negatedTestExpression);\n            ifStatement.get(\"consequent\").replace(alternate);\n            ifStatement.get(\"alternate\").replace();\n        }\n    }\n    return NodePath;\n}\nexports[\"default\"] = nodePathPlugin;\nmodule.exports = exports[\"default\"];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ast-types/lib/node-path.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ast-types/lib/path-visitor.js":
/*!****************************************************!*\
  !*** ./node_modules/ast-types/lib/path-visitor.js ***!
  \****************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nvar types_1 = tslib_1.__importDefault(__webpack_require__(/*! ./types */ \"(rsc)/./node_modules/ast-types/lib/types.js\"));\nvar node_path_1 = tslib_1.__importDefault(__webpack_require__(/*! ./node-path */ \"(rsc)/./node_modules/ast-types/lib/node-path.js\"));\nvar hasOwn = Object.prototype.hasOwnProperty;\nfunction pathVisitorPlugin(fork) {\n    var types = fork.use(types_1.default);\n    var NodePath = fork.use(node_path_1.default);\n    var isArray = types.builtInTypes.array;\n    var isObject = types.builtInTypes.object;\n    var isFunction = types.builtInTypes.function;\n    var undefined;\n    var PathVisitor = function PathVisitor() {\n        if (!(this instanceof PathVisitor)) {\n            throw new Error(\"PathVisitor constructor cannot be invoked without 'new'\");\n        }\n        // Permanent state.\n        this._reusableContextStack = [];\n        this._methodNameTable = computeMethodNameTable(this);\n        this._shouldVisitComments = hasOwn.call(this._methodNameTable, \"Block\") || hasOwn.call(this._methodNameTable, \"Line\");\n        this.Context = makeContextConstructor(this);\n        // State reset every time PathVisitor.prototype.visit is called.\n        this._visiting = false;\n        this._changeReported = false;\n    };\n    function computeMethodNameTable(visitor) {\n        var typeNames = Object.create(null);\n        for(var methodName in visitor){\n            if (/^visit[A-Z]/.test(methodName)) {\n                typeNames[methodName.slice(\"visit\".length)] = true;\n            }\n        }\n        var supertypeTable = types.computeSupertypeLookupTable(typeNames);\n        var methodNameTable = Object.create(null);\n        var typeNameKeys = Object.keys(supertypeTable);\n        var typeNameCount = typeNameKeys.length;\n        for(var i = 0; i < typeNameCount; ++i){\n            var typeName = typeNameKeys[i];\n            methodName = \"visit\" + supertypeTable[typeName];\n            if (isFunction.check(visitor[methodName])) {\n                methodNameTable[typeName] = methodName;\n            }\n        }\n        return methodNameTable;\n    }\n    PathVisitor.fromMethodsObject = function fromMethodsObject(methods) {\n        if (methods instanceof PathVisitor) {\n            return methods;\n        }\n        if (!isObject.check(methods)) {\n            // An empty visitor?\n            return new PathVisitor;\n        }\n        var Visitor = function Visitor() {\n            if (!(this instanceof Visitor)) {\n                throw new Error(\"Visitor constructor cannot be invoked without 'new'\");\n            }\n            PathVisitor.call(this);\n        };\n        var Vp = Visitor.prototype = Object.create(PVp);\n        Vp.constructor = Visitor;\n        extend(Vp, methods);\n        extend(Visitor, PathVisitor);\n        isFunction.assert(Visitor.fromMethodsObject);\n        isFunction.assert(Visitor.visit);\n        return new Visitor;\n    };\n    function extend(target, source) {\n        for(var property in source){\n            if (hasOwn.call(source, property)) {\n                target[property] = source[property];\n            }\n        }\n        return target;\n    }\n    PathVisitor.visit = function visit(node, methods) {\n        return PathVisitor.fromMethodsObject(methods).visit(node);\n    };\n    var PVp = PathVisitor.prototype;\n    PVp.visit = function() {\n        if (this._visiting) {\n            throw new Error(\"Recursively calling visitor.visit(path) resets visitor state. \" + \"Try this.visit(path) or this.traverse(path) instead.\");\n        }\n        // Private state that needs to be reset before every traversal.\n        this._visiting = true;\n        this._changeReported = false;\n        this._abortRequested = false;\n        var argc = arguments.length;\n        var args = new Array(argc);\n        for(var i = 0; i < argc; ++i){\n            args[i] = arguments[i];\n        }\n        if (!(args[0] instanceof NodePath)) {\n            args[0] = new NodePath({\n                root: args[0]\n            }).get(\"root\");\n        }\n        // Called with the same arguments as .visit.\n        this.reset.apply(this, args);\n        var didNotThrow;\n        try {\n            var root = this.visitWithoutReset(args[0]);\n            didNotThrow = true;\n        } finally{\n            this._visiting = false;\n            if (!didNotThrow && this._abortRequested) {\n                // If this.visitWithoutReset threw an exception and\n                // this._abortRequested was set to true, return the root of\n                // the AST instead of letting the exception propagate, so that\n                // client code does not have to provide a try-catch block to\n                // intercept the AbortRequest exception.  Other kinds of\n                // exceptions will propagate without being intercepted and\n                // rethrown by a catch block, so their stacks will accurately\n                // reflect the original throwing context.\n                return args[0].value;\n            }\n        }\n        return root;\n    };\n    PVp.AbortRequest = function AbortRequest() {};\n    PVp.abort = function() {\n        var visitor = this;\n        visitor._abortRequested = true;\n        var request = new visitor.AbortRequest();\n        // If you decide to catch this exception and stop it from propagating,\n        // make sure to call its cancel method to avoid silencing other\n        // exceptions that might be thrown later in the traversal.\n        request.cancel = function() {\n            visitor._abortRequested = false;\n        };\n        throw request;\n    };\n    PVp.reset = function(_path /*, additional arguments */ ) {\n    // Empty stub; may be reassigned or overridden by subclasses.\n    };\n    PVp.visitWithoutReset = function(path) {\n        if (this instanceof this.Context) {\n            // Since this.Context.prototype === this, there's a chance we\n            // might accidentally call context.visitWithoutReset. If that\n            // happens, re-invoke the method against context.visitor.\n            return this.visitor.visitWithoutReset(path);\n        }\n        if (!(path instanceof NodePath)) {\n            throw new Error(\"\");\n        }\n        var value = path.value;\n        var methodName = value && typeof value === \"object\" && typeof value.type === \"string\" && this._methodNameTable[value.type];\n        if (methodName) {\n            var context = this.acquireContext(path);\n            try {\n                return context.invokeVisitorMethod(methodName);\n            } finally{\n                this.releaseContext(context);\n            }\n        } else {\n            // If there was no visitor method to call, visit the children of\n            // this node generically.\n            return visitChildren(path, this);\n        }\n    };\n    function visitChildren(path, visitor) {\n        if (!(path instanceof NodePath)) {\n            throw new Error(\"\");\n        }\n        if (!(visitor instanceof PathVisitor)) {\n            throw new Error(\"\");\n        }\n        var value = path.value;\n        if (isArray.check(value)) {\n            path.each(visitor.visitWithoutReset, visitor);\n        } else if (!isObject.check(value)) {\n        // No children to visit.\n        } else {\n            var childNames = types.getFieldNames(value);\n            // The .comments field of the Node type is hidden, so we only\n            // visit it if the visitor defines visitBlock or visitLine, and\n            // value.comments is defined.\n            if (visitor._shouldVisitComments && value.comments && childNames.indexOf(\"comments\") < 0) {\n                childNames.push(\"comments\");\n            }\n            var childCount = childNames.length;\n            var childPaths = [];\n            for(var i = 0; i < childCount; ++i){\n                var childName = childNames[i];\n                if (!hasOwn.call(value, childName)) {\n                    value[childName] = types.getFieldValue(value, childName);\n                }\n                childPaths.push(path.get(childName));\n            }\n            for(var i = 0; i < childCount; ++i){\n                visitor.visitWithoutReset(childPaths[i]);\n            }\n        }\n        return path.value;\n    }\n    PVp.acquireContext = function(path) {\n        if (this._reusableContextStack.length === 0) {\n            return new this.Context(path);\n        }\n        return this._reusableContextStack.pop().reset(path);\n    };\n    PVp.releaseContext = function(context) {\n        if (!(context instanceof this.Context)) {\n            throw new Error(\"\");\n        }\n        this._reusableContextStack.push(context);\n        context.currentPath = null;\n    };\n    PVp.reportChanged = function() {\n        this._changeReported = true;\n    };\n    PVp.wasChangeReported = function() {\n        return this._changeReported;\n    };\n    function makeContextConstructor(visitor) {\n        function Context(path) {\n            if (!(this instanceof Context)) {\n                throw new Error(\"\");\n            }\n            if (!(this instanceof PathVisitor)) {\n                throw new Error(\"\");\n            }\n            if (!(path instanceof NodePath)) {\n                throw new Error(\"\");\n            }\n            Object.defineProperty(this, \"visitor\", {\n                value: visitor,\n                writable: false,\n                enumerable: true,\n                configurable: false\n            });\n            this.currentPath = path;\n            this.needToCallTraverse = true;\n            Object.seal(this);\n        }\n        if (!(visitor instanceof PathVisitor)) {\n            throw new Error(\"\");\n        }\n        // Note that the visitor object is the prototype of Context.prototype,\n        // so all visitor methods are inherited by context objects.\n        var Cp = Context.prototype = Object.create(visitor);\n        Cp.constructor = Context;\n        extend(Cp, sharedContextProtoMethods);\n        return Context;\n    }\n    // Every PathVisitor has a different this.Context constructor and\n    // this.Context.prototype object, but those prototypes can all use the\n    // same reset, invokeVisitorMethod, and traverse function objects.\n    var sharedContextProtoMethods = Object.create(null);\n    sharedContextProtoMethods.reset = function reset(path) {\n        if (!(this instanceof this.Context)) {\n            throw new Error(\"\");\n        }\n        if (!(path instanceof NodePath)) {\n            throw new Error(\"\");\n        }\n        this.currentPath = path;\n        this.needToCallTraverse = true;\n        return this;\n    };\n    sharedContextProtoMethods.invokeVisitorMethod = function invokeVisitorMethod(methodName) {\n        if (!(this instanceof this.Context)) {\n            throw new Error(\"\");\n        }\n        if (!(this.currentPath instanceof NodePath)) {\n            throw new Error(\"\");\n        }\n        var result = this.visitor[methodName].call(this, this.currentPath);\n        if (result === false) {\n            // Visitor methods return false to indicate that they have handled\n            // their own traversal needs, and we should not complain if\n            // this.needToCallTraverse is still true.\n            this.needToCallTraverse = false;\n        } else if (result !== undefined) {\n            // Any other non-undefined value returned from the visitor method\n            // is interpreted as a replacement value.\n            this.currentPath = this.currentPath.replace(result)[0];\n            if (this.needToCallTraverse) {\n                // If this.traverse still hasn't been called, visit the\n                // children of the replacement node.\n                this.traverse(this.currentPath);\n            }\n        }\n        if (this.needToCallTraverse !== false) {\n            throw new Error(\"Must either call this.traverse or return false in \" + methodName);\n        }\n        var path = this.currentPath;\n        return path && path.value;\n    };\n    sharedContextProtoMethods.traverse = function traverse(path, newVisitor) {\n        if (!(this instanceof this.Context)) {\n            throw new Error(\"\");\n        }\n        if (!(path instanceof NodePath)) {\n            throw new Error(\"\");\n        }\n        if (!(this.currentPath instanceof NodePath)) {\n            throw new Error(\"\");\n        }\n        this.needToCallTraverse = false;\n        return visitChildren(path, PathVisitor.fromMethodsObject(newVisitor || this.visitor));\n    };\n    sharedContextProtoMethods.visit = function visit(path, newVisitor) {\n        if (!(this instanceof this.Context)) {\n            throw new Error(\"\");\n        }\n        if (!(path instanceof NodePath)) {\n            throw new Error(\"\");\n        }\n        if (!(this.currentPath instanceof NodePath)) {\n            throw new Error(\"\");\n        }\n        this.needToCallTraverse = false;\n        return PathVisitor.fromMethodsObject(newVisitor || this.visitor).visitWithoutReset(path);\n    };\n    sharedContextProtoMethods.reportChanged = function reportChanged() {\n        this.visitor.reportChanged();\n    };\n    sharedContextProtoMethods.abort = function abort() {\n        this.needToCallTraverse = false;\n        this.visitor.abort();\n    };\n    return PathVisitor;\n}\nexports[\"default\"] = pathVisitorPlugin;\nmodule.exports = exports[\"default\"];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ast-types/lib/path-visitor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ast-types/lib/path.js":
/*!********************************************!*\
  !*** ./node_modules/ast-types/lib/path.js ***!
  \********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nvar types_1 = tslib_1.__importDefault(__webpack_require__(/*! ./types */ \"(rsc)/./node_modules/ast-types/lib/types.js\"));\nvar Op = Object.prototype;\nvar hasOwn = Op.hasOwnProperty;\nfunction pathPlugin(fork) {\n    var types = fork.use(types_1.default);\n    var isArray = types.builtInTypes.array;\n    var isNumber = types.builtInTypes.number;\n    var Path = function Path(value, parentPath, name) {\n        if (!(this instanceof Path)) {\n            throw new Error(\"Path constructor cannot be invoked without 'new'\");\n        }\n        if (parentPath) {\n            if (!(parentPath instanceof Path)) {\n                throw new Error(\"\");\n            }\n        } else {\n            parentPath = null;\n            name = null;\n        }\n        // The value encapsulated by this Path, generally equal to\n        // parentPath.value[name] if we have a parentPath.\n        this.value = value;\n        // The immediate parent Path of this Path.\n        this.parentPath = parentPath;\n        // The name of the property of parentPath.value through which this\n        // Path's value was reached.\n        this.name = name;\n        // Calling path.get(\"child\") multiple times always returns the same\n        // child Path object, for both performance and consistency reasons.\n        this.__childCache = null;\n    };\n    var Pp = Path.prototype;\n    function getChildCache(path) {\n        // Lazily create the child cache. This also cheapens cache\n        // invalidation, since you can just reset path.__childCache to null.\n        return path.__childCache || (path.__childCache = Object.create(null));\n    }\n    function getChildPath(path, name) {\n        var cache = getChildCache(path);\n        var actualChildValue = path.getValueProperty(name);\n        var childPath = cache[name];\n        if (!hasOwn.call(cache, name) || // Ensure consistency between cache and reality.\n        childPath.value !== actualChildValue) {\n            childPath = cache[name] = new path.constructor(actualChildValue, path, name);\n        }\n        return childPath;\n    }\n    // This method is designed to be overridden by subclasses that need to\n    // handle missing properties, etc.\n    Pp.getValueProperty = function getValueProperty(name) {\n        return this.value[name];\n    };\n    Pp.get = function get() {\n        var names = [];\n        for(var _i = 0; _i < arguments.length; _i++){\n            names[_i] = arguments[_i];\n        }\n        var path = this;\n        var count = names.length;\n        for(var i = 0; i < count; ++i){\n            path = getChildPath(path, names[i]);\n        }\n        return path;\n    };\n    Pp.each = function each(callback, context) {\n        var childPaths = [];\n        var len = this.value.length;\n        var i = 0;\n        // Collect all the original child paths before invoking the callback.\n        for(var i = 0; i < len; ++i){\n            if (hasOwn.call(this.value, i)) {\n                childPaths[i] = this.get(i);\n            }\n        }\n        // Invoke the callback on just the original child paths, regardless of\n        // any modifications made to the array by the callback. I chose these\n        // semantics over cleverly invoking the callback on new elements because\n        // this way is much easier to reason about.\n        context = context || this;\n        for(i = 0; i < len; ++i){\n            if (hasOwn.call(childPaths, i)) {\n                callback.call(context, childPaths[i]);\n            }\n        }\n    };\n    Pp.map = function map(callback, context) {\n        var result = [];\n        this.each(function(childPath) {\n            result.push(callback.call(this, childPath));\n        }, context);\n        return result;\n    };\n    Pp.filter = function filter(callback, context) {\n        var result = [];\n        this.each(function(childPath) {\n            if (callback.call(this, childPath)) {\n                result.push(childPath);\n            }\n        }, context);\n        return result;\n    };\n    function emptyMoves() {}\n    function getMoves(path, offset, start, end) {\n        isArray.assert(path.value);\n        if (offset === 0) {\n            return emptyMoves;\n        }\n        var length = path.value.length;\n        if (length < 1) {\n            return emptyMoves;\n        }\n        var argc = arguments.length;\n        if (argc === 2) {\n            start = 0;\n            end = length;\n        } else if (argc === 3) {\n            start = Math.max(start, 0);\n            end = length;\n        } else {\n            start = Math.max(start, 0);\n            end = Math.min(end, length);\n        }\n        isNumber.assert(start);\n        isNumber.assert(end);\n        var moves = Object.create(null);\n        var cache = getChildCache(path);\n        for(var i = start; i < end; ++i){\n            if (hasOwn.call(path.value, i)) {\n                var childPath = path.get(i);\n                if (childPath.name !== i) {\n                    throw new Error(\"\");\n                }\n                var newIndex = i + offset;\n                childPath.name = newIndex;\n                moves[newIndex] = childPath;\n                delete cache[i];\n            }\n        }\n        delete cache.length;\n        return function() {\n            for(var newIndex in moves){\n                var childPath = moves[newIndex];\n                if (childPath.name !== +newIndex) {\n                    throw new Error(\"\");\n                }\n                cache[newIndex] = childPath;\n                path.value[newIndex] = childPath.value;\n            }\n        };\n    }\n    Pp.shift = function shift() {\n        var move = getMoves(this, -1);\n        var result = this.value.shift();\n        move();\n        return result;\n    };\n    Pp.unshift = function unshift() {\n        var args = [];\n        for(var _i = 0; _i < arguments.length; _i++){\n            args[_i] = arguments[_i];\n        }\n        var move = getMoves(this, args.length);\n        var result = this.value.unshift.apply(this.value, args);\n        move();\n        return result;\n    };\n    Pp.push = function push() {\n        var args = [];\n        for(var _i = 0; _i < arguments.length; _i++){\n            args[_i] = arguments[_i];\n        }\n        isArray.assert(this.value);\n        delete getChildCache(this).length;\n        return this.value.push.apply(this.value, args);\n    };\n    Pp.pop = function pop() {\n        isArray.assert(this.value);\n        var cache = getChildCache(this);\n        delete cache[this.value.length - 1];\n        delete cache.length;\n        return this.value.pop();\n    };\n    Pp.insertAt = function insertAt(index) {\n        var argc = arguments.length;\n        var move = getMoves(this, argc - 1, index);\n        if (move === emptyMoves && argc <= 1) {\n            return this;\n        }\n        index = Math.max(index, 0);\n        for(var i = 1; i < argc; ++i){\n            this.value[index + i - 1] = arguments[i];\n        }\n        move();\n        return this;\n    };\n    Pp.insertBefore = function insertBefore() {\n        var args = [];\n        for(var _i = 0; _i < arguments.length; _i++){\n            args[_i] = arguments[_i];\n        }\n        var pp = this.parentPath;\n        var argc = args.length;\n        var insertAtArgs = [\n            this.name\n        ];\n        for(var i = 0; i < argc; ++i){\n            insertAtArgs.push(args[i]);\n        }\n        return pp.insertAt.apply(pp, insertAtArgs);\n    };\n    Pp.insertAfter = function insertAfter() {\n        var args = [];\n        for(var _i = 0; _i < arguments.length; _i++){\n            args[_i] = arguments[_i];\n        }\n        var pp = this.parentPath;\n        var argc = args.length;\n        var insertAtArgs = [\n            this.name + 1\n        ];\n        for(var i = 0; i < argc; ++i){\n            insertAtArgs.push(args[i]);\n        }\n        return pp.insertAt.apply(pp, insertAtArgs);\n    };\n    function repairRelationshipWithParent(path) {\n        if (!(path instanceof Path)) {\n            throw new Error(\"\");\n        }\n        var pp = path.parentPath;\n        if (!pp) {\n            // Orphan paths have no relationship to repair.\n            return path;\n        }\n        var parentValue = pp.value;\n        var parentCache = getChildCache(pp);\n        // Make sure parentCache[path.name] is populated.\n        if (parentValue[path.name] === path.value) {\n            parentCache[path.name] = path;\n        } else if (isArray.check(parentValue)) {\n            // Something caused path.name to become out of date, so attempt to\n            // recover by searching for path.value in parentValue.\n            var i = parentValue.indexOf(path.value);\n            if (i >= 0) {\n                parentCache[path.name = i] = path;\n            }\n        } else {\n            // If path.value disagrees with parentValue[path.name], and\n            // path.name is not an array index, let path.value become the new\n            // parentValue[path.name] and update parentCache accordingly.\n            parentValue[path.name] = path.value;\n            parentCache[path.name] = path;\n        }\n        if (parentValue[path.name] !== path.value) {\n            throw new Error(\"\");\n        }\n        if (path.parentPath.get(path.name) !== path) {\n            throw new Error(\"\");\n        }\n        return path;\n    }\n    Pp.replace = function replace(replacement) {\n        var results = [];\n        var parentValue = this.parentPath.value;\n        var parentCache = getChildCache(this.parentPath);\n        var count = arguments.length;\n        repairRelationshipWithParent(this);\n        if (isArray.check(parentValue)) {\n            var originalLength = parentValue.length;\n            var move = getMoves(this.parentPath, count - 1, this.name + 1);\n            var spliceArgs = [\n                this.name,\n                1\n            ];\n            for(var i = 0; i < count; ++i){\n                spliceArgs.push(arguments[i]);\n            }\n            var splicedOut = parentValue.splice.apply(parentValue, spliceArgs);\n            if (splicedOut[0] !== this.value) {\n                throw new Error(\"\");\n            }\n            if (parentValue.length !== originalLength - 1 + count) {\n                throw new Error(\"\");\n            }\n            move();\n            if (count === 0) {\n                delete this.value;\n                delete parentCache[this.name];\n                this.__childCache = null;\n            } else {\n                if (parentValue[this.name] !== replacement) {\n                    throw new Error(\"\");\n                }\n                if (this.value !== replacement) {\n                    this.value = replacement;\n                    this.__childCache = null;\n                }\n                for(i = 0; i < count; ++i){\n                    results.push(this.parentPath.get(this.name + i));\n                }\n                if (results[0] !== this) {\n                    throw new Error(\"\");\n                }\n            }\n        } else if (count === 1) {\n            if (this.value !== replacement) {\n                this.__childCache = null;\n            }\n            this.value = parentValue[this.name] = replacement;\n            results.push(this);\n        } else if (count === 0) {\n            delete parentValue[this.name];\n            delete this.value;\n            this.__childCache = null;\n        // Leave this path cached as parentCache[this.name], even though\n        // it no longer has a value defined.\n        } else {\n            throw new Error(\"Could not replace path\");\n        }\n        return results;\n    };\n    return Path;\n}\nexports[\"default\"] = pathPlugin;\nmodule.exports = exports[\"default\"];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ast-types/lib/path.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ast-types/lib/scope.js":
/*!*********************************************!*\
  !*** ./node_modules/ast-types/lib/scope.js ***!
  \*********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nvar types_1 = tslib_1.__importDefault(__webpack_require__(/*! ./types */ \"(rsc)/./node_modules/ast-types/lib/types.js\"));\nvar hasOwn = Object.prototype.hasOwnProperty;\nfunction scopePlugin(fork) {\n    var types = fork.use(types_1.default);\n    var Type = types.Type;\n    var namedTypes = types.namedTypes;\n    var Node = namedTypes.Node;\n    var Expression = namedTypes.Expression;\n    var isArray = types.builtInTypes.array;\n    var b = types.builders;\n    var Scope = function Scope(path, parentScope) {\n        if (!(this instanceof Scope)) {\n            throw new Error(\"Scope constructor cannot be invoked without 'new'\");\n        }\n        ScopeType.assert(path.value);\n        var depth;\n        if (parentScope) {\n            if (!(parentScope instanceof Scope)) {\n                throw new Error(\"\");\n            }\n            depth = parentScope.depth + 1;\n        } else {\n            parentScope = null;\n            depth = 0;\n        }\n        Object.defineProperties(this, {\n            path: {\n                value: path\n            },\n            node: {\n                value: path.value\n            },\n            isGlobal: {\n                value: !parentScope,\n                enumerable: true\n            },\n            depth: {\n                value: depth\n            },\n            parent: {\n                value: parentScope\n            },\n            bindings: {\n                value: {}\n            },\n            types: {\n                value: {}\n            }\n        });\n    };\n    var scopeTypes = [\n        // Program nodes introduce global scopes.\n        namedTypes.Program,\n        // Function is the supertype of FunctionExpression,\n        // FunctionDeclaration, ArrowExpression, etc.\n        namedTypes.Function,\n        // In case you didn't know, the caught parameter shadows any variable\n        // of the same name in an outer scope.\n        namedTypes.CatchClause\n    ];\n    var ScopeType = Type.or.apply(Type, scopeTypes);\n    Scope.isEstablishedBy = function(node) {\n        return ScopeType.check(node);\n    };\n    var Sp = Scope.prototype;\n    // Will be overridden after an instance lazily calls scanScope.\n    Sp.didScan = false;\n    Sp.declares = function(name) {\n        this.scan();\n        return hasOwn.call(this.bindings, name);\n    };\n    Sp.declaresType = function(name) {\n        this.scan();\n        return hasOwn.call(this.types, name);\n    };\n    Sp.declareTemporary = function(prefix) {\n        if (prefix) {\n            if (!/^[a-z$_]/i.test(prefix)) {\n                throw new Error(\"\");\n            }\n        } else {\n            prefix = \"t$\";\n        }\n        // Include this.depth in the name to make sure the name does not\n        // collide with any variables in nested/enclosing scopes.\n        prefix += this.depth.toString(36) + \"$\";\n        this.scan();\n        var index = 0;\n        while(this.declares(prefix + index)){\n            ++index;\n        }\n        var name = prefix + index;\n        return this.bindings[name] = types.builders.identifier(name);\n    };\n    Sp.injectTemporary = function(identifier, init) {\n        identifier || (identifier = this.declareTemporary());\n        var bodyPath = this.path.get(\"body\");\n        if (namedTypes.BlockStatement.check(bodyPath.value)) {\n            bodyPath = bodyPath.get(\"body\");\n        }\n        bodyPath.unshift(b.variableDeclaration(\"var\", [\n            b.variableDeclarator(identifier, init || null)\n        ]));\n        return identifier;\n    };\n    Sp.scan = function(force) {\n        if (force || !this.didScan) {\n            for(var name in this.bindings){\n                // Empty out this.bindings, just in cases.\n                delete this.bindings[name];\n            }\n            scanScope(this.path, this.bindings, this.types);\n            this.didScan = true;\n        }\n    };\n    Sp.getBindings = function() {\n        this.scan();\n        return this.bindings;\n    };\n    Sp.getTypes = function() {\n        this.scan();\n        return this.types;\n    };\n    function scanScope(path, bindings, scopeTypes) {\n        var node = path.value;\n        ScopeType.assert(node);\n        if (namedTypes.CatchClause.check(node)) {\n            // A catch clause establishes a new scope but the only variable\n            // bound in that scope is the catch parameter. Any other\n            // declarations create bindings in the outer scope.\n            var param = path.get(\"param\");\n            if (param.value) {\n                addPattern(param, bindings);\n            }\n        } else {\n            recursiveScanScope(path, bindings, scopeTypes);\n        }\n    }\n    function recursiveScanScope(path, bindings, scopeTypes) {\n        var node = path.value;\n        if (path.parent && namedTypes.FunctionExpression.check(path.parent.node) && path.parent.node.id) {\n            addPattern(path.parent.get(\"id\"), bindings);\n        }\n        if (!node) {\n        // None of the remaining cases matter if node is falsy.\n        } else if (isArray.check(node)) {\n            path.each(function(childPath) {\n                recursiveScanChild(childPath, bindings, scopeTypes);\n            });\n        } else if (namedTypes.Function.check(node)) {\n            path.get(\"params\").each(function(paramPath) {\n                addPattern(paramPath, bindings);\n            });\n            recursiveScanChild(path.get(\"body\"), bindings, scopeTypes);\n        } else if (namedTypes.TypeAlias && namedTypes.TypeAlias.check(node) || namedTypes.InterfaceDeclaration && namedTypes.InterfaceDeclaration.check(node) || namedTypes.TSTypeAliasDeclaration && namedTypes.TSTypeAliasDeclaration.check(node) || namedTypes.TSInterfaceDeclaration && namedTypes.TSInterfaceDeclaration.check(node)) {\n            addTypePattern(path.get(\"id\"), scopeTypes);\n        } else if (namedTypes.VariableDeclarator.check(node)) {\n            addPattern(path.get(\"id\"), bindings);\n            recursiveScanChild(path.get(\"init\"), bindings, scopeTypes);\n        } else if (node.type === \"ImportSpecifier\" || node.type === \"ImportNamespaceSpecifier\" || node.type === \"ImportDefaultSpecifier\") {\n            addPattern(// Esprima used to use the .name field to refer to the local\n            // binding identifier for ImportSpecifier nodes, but .id for\n            // ImportNamespaceSpecifier and ImportDefaultSpecifier nodes.\n            // ESTree/Acorn/ESpree use .local for all three node types.\n            path.get(node.local ? \"local\" : node.name ? \"name\" : \"id\"), bindings);\n        } else if (Node.check(node) && !Expression.check(node)) {\n            types.eachField(node, function(name, child) {\n                var childPath = path.get(name);\n                if (!pathHasValue(childPath, child)) {\n                    throw new Error(\"\");\n                }\n                recursiveScanChild(childPath, bindings, scopeTypes);\n            });\n        }\n    }\n    function pathHasValue(path, value) {\n        if (path.value === value) {\n            return true;\n        }\n        // Empty arrays are probably produced by defaults.emptyArray, in which\n        // case is makes sense to regard them as equivalent, if not ===.\n        if (Array.isArray(path.value) && path.value.length === 0 && Array.isArray(value) && value.length === 0) {\n            return true;\n        }\n        return false;\n    }\n    function recursiveScanChild(path, bindings, scopeTypes) {\n        var node = path.value;\n        if (!node || Expression.check(node)) {\n        // Ignore falsy values and Expressions.\n        } else if (namedTypes.FunctionDeclaration.check(node) && node.id !== null) {\n            addPattern(path.get(\"id\"), bindings);\n        } else if (namedTypes.ClassDeclaration && namedTypes.ClassDeclaration.check(node)) {\n            addPattern(path.get(\"id\"), bindings);\n        } else if (ScopeType.check(node)) {\n            if (namedTypes.CatchClause.check(node) && // TODO Broaden this to accept any pattern.\n            namedTypes.Identifier.check(node.param)) {\n                var catchParamName = node.param.name;\n                var hadBinding = hasOwn.call(bindings, catchParamName);\n                // Any declarations that occur inside the catch body that do\n                // not have the same name as the catch parameter should count\n                // as bindings in the outer scope.\n                recursiveScanScope(path.get(\"body\"), bindings, scopeTypes);\n                // If a new binding matching the catch parameter name was\n                // created while scanning the catch body, ignore it because it\n                // actually refers to the catch parameter and not the outer\n                // scope that we're currently scanning.\n                if (!hadBinding) {\n                    delete bindings[catchParamName];\n                }\n            }\n        } else {\n            recursiveScanScope(path, bindings, scopeTypes);\n        }\n    }\n    function addPattern(patternPath, bindings) {\n        var pattern = patternPath.value;\n        namedTypes.Pattern.assert(pattern);\n        if (namedTypes.Identifier.check(pattern)) {\n            if (hasOwn.call(bindings, pattern.name)) {\n                bindings[pattern.name].push(patternPath);\n            } else {\n                bindings[pattern.name] = [\n                    patternPath\n                ];\n            }\n        } else if (namedTypes.AssignmentPattern && namedTypes.AssignmentPattern.check(pattern)) {\n            addPattern(patternPath.get(\"left\"), bindings);\n        } else if (namedTypes.ObjectPattern && namedTypes.ObjectPattern.check(pattern)) {\n            patternPath.get(\"properties\").each(function(propertyPath) {\n                var property = propertyPath.value;\n                if (namedTypes.Pattern.check(property)) {\n                    addPattern(propertyPath, bindings);\n                } else if (namedTypes.Property.check(property)) {\n                    addPattern(propertyPath.get(\"value\"), bindings);\n                } else if (namedTypes.SpreadProperty && namedTypes.SpreadProperty.check(property)) {\n                    addPattern(propertyPath.get(\"argument\"), bindings);\n                }\n            });\n        } else if (namedTypes.ArrayPattern && namedTypes.ArrayPattern.check(pattern)) {\n            patternPath.get(\"elements\").each(function(elementPath) {\n                var element = elementPath.value;\n                if (namedTypes.Pattern.check(element)) {\n                    addPattern(elementPath, bindings);\n                } else if (namedTypes.SpreadElement && namedTypes.SpreadElement.check(element)) {\n                    addPattern(elementPath.get(\"argument\"), bindings);\n                }\n            });\n        } else if (namedTypes.PropertyPattern && namedTypes.PropertyPattern.check(pattern)) {\n            addPattern(patternPath.get(\"pattern\"), bindings);\n        } else if (namedTypes.SpreadElementPattern && namedTypes.SpreadElementPattern.check(pattern) || namedTypes.SpreadPropertyPattern && namedTypes.SpreadPropertyPattern.check(pattern)) {\n            addPattern(patternPath.get(\"argument\"), bindings);\n        }\n    }\n    function addTypePattern(patternPath, types) {\n        var pattern = patternPath.value;\n        namedTypes.Pattern.assert(pattern);\n        if (namedTypes.Identifier.check(pattern)) {\n            if (hasOwn.call(types, pattern.name)) {\n                types[pattern.name].push(patternPath);\n            } else {\n                types[pattern.name] = [\n                    patternPath\n                ];\n            }\n        }\n    }\n    Sp.lookup = function(name) {\n        for(var scope = this; scope; scope = scope.parent)if (scope.declares(name)) break;\n        return scope;\n    };\n    Sp.lookupType = function(name) {\n        for(var scope = this; scope; scope = scope.parent)if (scope.declaresType(name)) break;\n        return scope;\n    };\n    Sp.getGlobalScope = function() {\n        var scope = this;\n        while(!scope.isGlobal)scope = scope.parent;\n        return scope;\n    };\n    return Scope;\n}\nexports[\"default\"] = scopePlugin;\nmodule.exports = exports[\"default\"];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ast-types/lib/scope.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ast-types/lib/shared.js":
/*!**********************************************!*\
  !*** ./node_modules/ast-types/lib/shared.js ***!
  \**********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nvar types_1 = tslib_1.__importDefault(__webpack_require__(/*! ./types */ \"(rsc)/./node_modules/ast-types/lib/types.js\"));\nfunction default_1(fork) {\n    var types = fork.use(types_1.default);\n    var Type = types.Type;\n    var builtin = types.builtInTypes;\n    var isNumber = builtin.number;\n    // An example of constructing a new type with arbitrary constraints from\n    // an existing type.\n    function geq(than) {\n        return Type.from(function(value) {\n            return isNumber.check(value) && value >= than;\n        }, isNumber + \" >= \" + than);\n    }\n    ;\n    // Default value-returning functions that may optionally be passed as a\n    // third argument to Def.prototype.field.\n    var defaults = {\n        // Functions were used because (among other reasons) that's the most\n        // elegant way to allow for the emptyArray one always to give a new\n        // array instance.\n        \"null\": function() {\n            return null;\n        },\n        \"emptyArray\": function() {\n            return [];\n        },\n        \"false\": function() {\n            return false;\n        },\n        \"true\": function() {\n            return true;\n        },\n        \"undefined\": function() {},\n        \"use strict\": function() {\n            return \"use strict\";\n        }\n    };\n    var naiveIsPrimitive = Type.or(builtin.string, builtin.number, builtin.boolean, builtin.null, builtin.undefined);\n    var isPrimitive = Type.from(function(value) {\n        if (value === null) return true;\n        var type = typeof value;\n        if (type === \"object\" || type === \"function\") {\n            return false;\n        }\n        return true;\n    }, naiveIsPrimitive.toString());\n    return {\n        geq: geq,\n        defaults: defaults,\n        isPrimitive: isPrimitive\n    };\n}\nexports[\"default\"] = default_1;\nmodule.exports = exports[\"default\"];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYXN0LXR5cGVzL2xpYi9zaGFyZWQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELElBQUlDLFVBQVVDLG1CQUFPQSxDQUFDLHVEQUFPO0FBQzdCLElBQUlDLFVBQVVGLFFBQVFHLGVBQWUsQ0FBQ0YsbUJBQU9BLENBQUMsNERBQVM7QUFDdkQsU0FBU0csVUFBVUMsSUFBSTtJQUNuQixJQUFJQyxRQUFRRCxLQUFLRSxHQUFHLENBQUNMLFFBQVFNLE9BQU87SUFDcEMsSUFBSUMsT0FBT0gsTUFBTUcsSUFBSTtJQUNyQixJQUFJQyxVQUFVSixNQUFNSyxZQUFZO0lBQ2hDLElBQUlDLFdBQVdGLFFBQVFHLE1BQU07SUFDN0Isd0VBQXdFO0lBQ3hFLG9CQUFvQjtJQUNwQixTQUFTQyxJQUFJQyxJQUFJO1FBQ2IsT0FBT04sS0FBS08sSUFBSSxDQUFDLFNBQVVqQixLQUFLO1lBQUksT0FBT2EsU0FBU0ssS0FBSyxDQUFDbEIsVUFBVUEsU0FBU2dCO1FBQU0sR0FBR0gsV0FBVyxTQUFTRztJQUM5Rzs7SUFFQSx1RUFBdUU7SUFDdkUseUNBQXlDO0lBQ3pDLElBQUlHLFdBQVc7UUFDWCxvRUFBb0U7UUFDcEUsbUVBQW1FO1FBQ25FLGtCQUFrQjtRQUNsQixRQUFRO1lBQWMsT0FBTztRQUFNO1FBQ25DLGNBQWM7WUFBYyxPQUFPLEVBQUU7UUFBRTtRQUN2QyxTQUFTO1lBQWMsT0FBTztRQUFPO1FBQ3JDLFFBQVE7WUFBYyxPQUFPO1FBQU07UUFDbkMsYUFBYSxZQUFjO1FBQzNCLGNBQWM7WUFBYyxPQUFPO1FBQWM7SUFDckQ7SUFDQSxJQUFJQyxtQkFBbUJWLEtBQUtXLEVBQUUsQ0FBQ1YsUUFBUVcsTUFBTSxFQUFFWCxRQUFRRyxNQUFNLEVBQUVILFFBQVFZLE9BQU8sRUFBRVosUUFBUWEsSUFBSSxFQUFFYixRQUFRYyxTQUFTO0lBQy9HLElBQUlDLGNBQWNoQixLQUFLTyxJQUFJLENBQUMsU0FBVWpCLEtBQUs7UUFDdkMsSUFBSUEsVUFBVSxNQUNWLE9BQU87UUFDWCxJQUFJMkIsT0FBTyxPQUFPM0I7UUFDbEIsSUFBSTJCLFNBQVMsWUFDVEEsU0FBUyxZQUFZO1lBQ3JCLE9BQU87UUFDWDtRQUNBLE9BQU87SUFDWCxHQUFHUCxpQkFBaUJRLFFBQVE7SUFDNUIsT0FBTztRQUNIYixLQUFLQTtRQUNMSSxVQUFVQTtRQUNWTyxhQUFhQTtJQUNqQjtBQUNKO0FBQ0EzQixrQkFBZSxHQUFHTTtBQUNsQndCLE9BQU85QixPQUFPLEdBQUdBLE9BQU8sQ0FBQyxVQUFVIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2l2aWwtZW5naW5lZXJpbmctcGxhdGZvcm0vLi9ub2RlX21vZHVsZXMvYXN0LXR5cGVzL2xpYi9zaGFyZWQuanM/OWVlZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjs7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbnZhciB0eXBlc18xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vdHlwZXNcIikpO1xuZnVuY3Rpb24gZGVmYXVsdF8xKGZvcmspIHtcbiAgICB2YXIgdHlwZXMgPSBmb3JrLnVzZSh0eXBlc18xLmRlZmF1bHQpO1xuICAgIHZhciBUeXBlID0gdHlwZXMuVHlwZTtcbiAgICB2YXIgYnVpbHRpbiA9IHR5cGVzLmJ1aWx0SW5UeXBlcztcbiAgICB2YXIgaXNOdW1iZXIgPSBidWlsdGluLm51bWJlcjtcbiAgICAvLyBBbiBleGFtcGxlIG9mIGNvbnN0cnVjdGluZyBhIG5ldyB0eXBlIHdpdGggYXJiaXRyYXJ5IGNvbnN0cmFpbnRzIGZyb21cbiAgICAvLyBhbiBleGlzdGluZyB0eXBlLlxuICAgIGZ1bmN0aW9uIGdlcSh0aGFuKSB7XG4gICAgICAgIHJldHVybiBUeXBlLmZyb20oZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBpc051bWJlci5jaGVjayh2YWx1ZSkgJiYgdmFsdWUgPj0gdGhhbjsgfSwgaXNOdW1iZXIgKyBcIiA+PSBcIiArIHRoYW4pO1xuICAgIH1cbiAgICA7XG4gICAgLy8gRGVmYXVsdCB2YWx1ZS1yZXR1cm5pbmcgZnVuY3Rpb25zIHRoYXQgbWF5IG9wdGlvbmFsbHkgYmUgcGFzc2VkIGFzIGFcbiAgICAvLyB0aGlyZCBhcmd1bWVudCB0byBEZWYucHJvdG90eXBlLmZpZWxkLlxuICAgIHZhciBkZWZhdWx0cyA9IHtcbiAgICAgICAgLy8gRnVuY3Rpb25zIHdlcmUgdXNlZCBiZWNhdXNlIChhbW9uZyBvdGhlciByZWFzb25zKSB0aGF0J3MgdGhlIG1vc3RcbiAgICAgICAgLy8gZWxlZ2FudCB3YXkgdG8gYWxsb3cgZm9yIHRoZSBlbXB0eUFycmF5IG9uZSBhbHdheXMgdG8gZ2l2ZSBhIG5ld1xuICAgICAgICAvLyBhcnJheSBpbnN0YW5jZS5cbiAgICAgICAgXCJudWxsXCI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgIFwiZW1wdHlBcnJheVwiOiBmdW5jdGlvbiAoKSB7IHJldHVybiBbXTsgfSxcbiAgICAgICAgXCJmYWxzZVwiOiBmdW5jdGlvbiAoKSB7IHJldHVybiBmYWxzZTsgfSxcbiAgICAgICAgXCJ0cnVlXCI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRydWU7IH0sXG4gICAgICAgIFwidW5kZWZpbmVkXCI6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgXCJ1c2Ugc3RyaWN0XCI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFwidXNlIHN0cmljdFwiOyB9XG4gICAgfTtcbiAgICB2YXIgbmFpdmVJc1ByaW1pdGl2ZSA9IFR5cGUub3IoYnVpbHRpbi5zdHJpbmcsIGJ1aWx0aW4ubnVtYmVyLCBidWlsdGluLmJvb2xlYW4sIGJ1aWx0aW4ubnVsbCwgYnVpbHRpbi51bmRlZmluZWQpO1xuICAgIHZhciBpc1ByaW1pdGl2ZSA9IFR5cGUuZnJvbShmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgICBpZiAodHlwZSA9PT0gXCJvYmplY3RcIiB8fFxuICAgICAgICAgICAgdHlwZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSwgbmFpdmVJc1ByaW1pdGl2ZS50b1N0cmluZygpKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBnZXE6IGdlcSxcbiAgICAgICAgZGVmYXVsdHM6IGRlZmF1bHRzLFxuICAgICAgICBpc1ByaW1pdGl2ZTogaXNQcmltaXRpdmUsXG4gICAgfTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGRlZmF1bHRfMTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ0c2xpYl8xIiwicmVxdWlyZSIsInR5cGVzXzEiLCJfX2ltcG9ydERlZmF1bHQiLCJkZWZhdWx0XzEiLCJmb3JrIiwidHlwZXMiLCJ1c2UiLCJkZWZhdWx0IiwiVHlwZSIsImJ1aWx0aW4iLCJidWlsdEluVHlwZXMiLCJpc051bWJlciIsIm51bWJlciIsImdlcSIsInRoYW4iLCJmcm9tIiwiY2hlY2siLCJkZWZhdWx0cyIsIm5haXZlSXNQcmltaXRpdmUiLCJvciIsInN0cmluZyIsImJvb2xlYW4iLCJudWxsIiwidW5kZWZpbmVkIiwiaXNQcmltaXRpdmUiLCJ0eXBlIiwidG9TdHJpbmciLCJtb2R1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ast-types/lib/shared.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ast-types/lib/types.js":
/*!*********************************************!*\
  !*** ./node_modules/ast-types/lib/types.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Def = void 0;\nvar tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nvar Op = Object.prototype;\nvar objToStr = Op.toString;\nvar hasOwn = Op.hasOwnProperty;\nvar BaseType = /** @class */ function() {\n    function BaseType() {}\n    BaseType.prototype.assert = function(value, deep) {\n        if (!this.check(value, deep)) {\n            var str = shallowStringify(value);\n            throw new Error(str + \" does not match type \" + this);\n        }\n        return true;\n    };\n    BaseType.prototype.arrayOf = function() {\n        var elemType = this;\n        return new ArrayType(elemType);\n    };\n    return BaseType;\n}();\nvar ArrayType = /** @class */ function(_super) {\n    tslib_1.__extends(ArrayType, _super);\n    function ArrayType(elemType) {\n        var _this = _super.call(this) || this;\n        _this.elemType = elemType;\n        _this.kind = \"ArrayType\";\n        return _this;\n    }\n    ArrayType.prototype.toString = function() {\n        return \"[\" + this.elemType + \"]\";\n    };\n    ArrayType.prototype.check = function(value, deep) {\n        var _this = this;\n        return Array.isArray(value) && value.every(function(elem) {\n            return _this.elemType.check(elem, deep);\n        });\n    };\n    return ArrayType;\n}(BaseType);\nvar IdentityType = /** @class */ function(_super) {\n    tslib_1.__extends(IdentityType, _super);\n    function IdentityType(value) {\n        var _this = _super.call(this) || this;\n        _this.value = value;\n        _this.kind = \"IdentityType\";\n        return _this;\n    }\n    IdentityType.prototype.toString = function() {\n        return String(this.value);\n    };\n    IdentityType.prototype.check = function(value, deep) {\n        var result = value === this.value;\n        if (!result && typeof deep === \"function\") {\n            deep(this, value);\n        }\n        return result;\n    };\n    return IdentityType;\n}(BaseType);\nvar ObjectType = /** @class */ function(_super) {\n    tslib_1.__extends(ObjectType, _super);\n    function ObjectType(fields) {\n        var _this = _super.call(this) || this;\n        _this.fields = fields;\n        _this.kind = \"ObjectType\";\n        return _this;\n    }\n    ObjectType.prototype.toString = function() {\n        return \"{ \" + this.fields.join(\", \") + \" }\";\n    };\n    ObjectType.prototype.check = function(value, deep) {\n        return objToStr.call(value) === objToStr.call({}) && this.fields.every(function(field) {\n            return field.type.check(value[field.name], deep);\n        });\n    };\n    return ObjectType;\n}(BaseType);\nvar OrType = /** @class */ function(_super) {\n    tslib_1.__extends(OrType, _super);\n    function OrType(types) {\n        var _this = _super.call(this) || this;\n        _this.types = types;\n        _this.kind = \"OrType\";\n        return _this;\n    }\n    OrType.prototype.toString = function() {\n        return this.types.join(\" | \");\n    };\n    OrType.prototype.check = function(value, deep) {\n        return this.types.some(function(type) {\n            return type.check(value, deep);\n        });\n    };\n    return OrType;\n}(BaseType);\nvar PredicateType = /** @class */ function(_super) {\n    tslib_1.__extends(PredicateType, _super);\n    function PredicateType(name, predicate) {\n        var _this = _super.call(this) || this;\n        _this.name = name;\n        _this.predicate = predicate;\n        _this.kind = \"PredicateType\";\n        return _this;\n    }\n    PredicateType.prototype.toString = function() {\n        return this.name;\n    };\n    PredicateType.prototype.check = function(value, deep) {\n        var result = this.predicate(value, deep);\n        if (!result && typeof deep === \"function\") {\n            deep(this, value);\n        }\n        return result;\n    };\n    return PredicateType;\n}(BaseType);\nvar Def = /** @class */ function() {\n    function Def(type, typeName) {\n        this.type = type;\n        this.typeName = typeName;\n        this.baseNames = [];\n        this.ownFields = Object.create(null);\n        // Includes own typeName. Populated during finalization.\n        this.allSupertypes = Object.create(null);\n        // Linear inheritance hierarchy. Populated during finalization.\n        this.supertypeList = [];\n        // Includes inherited fields.\n        this.allFields = Object.create(null);\n        // Non-hidden keys of allFields.\n        this.fieldNames = [];\n        // This property will be overridden as true by individual Def instances\n        // when they are finalized.\n        this.finalized = false;\n        // False by default until .build(...) is called on an instance.\n        this.buildable = false;\n        this.buildParams = [];\n    }\n    Def.prototype.isSupertypeOf = function(that) {\n        if (that instanceof Def) {\n            if (this.finalized !== true || that.finalized !== true) {\n                throw new Error(\"\");\n            }\n            return hasOwn.call(that.allSupertypes, this.typeName);\n        } else {\n            throw new Error(that + \" is not a Def\");\n        }\n    };\n    Def.prototype.checkAllFields = function(value, deep) {\n        var allFields = this.allFields;\n        if (this.finalized !== true) {\n            throw new Error(\"\" + this.typeName);\n        }\n        function checkFieldByName(name) {\n            var field = allFields[name];\n            var type = field.type;\n            var child = field.getValue(value);\n            return type.check(child, deep);\n        }\n        return value !== null && typeof value === \"object\" && Object.keys(allFields).every(checkFieldByName);\n    };\n    Def.prototype.bases = function() {\n        var supertypeNames = [];\n        for(var _i = 0; _i < arguments.length; _i++){\n            supertypeNames[_i] = arguments[_i];\n        }\n        var bases = this.baseNames;\n        if (this.finalized) {\n            if (supertypeNames.length !== bases.length) {\n                throw new Error(\"\");\n            }\n            for(var i = 0; i < supertypeNames.length; i++){\n                if (supertypeNames[i] !== bases[i]) {\n                    throw new Error(\"\");\n                }\n            }\n            return this;\n        }\n        supertypeNames.forEach(function(baseName) {\n            // This indexOf lookup may be O(n), but the typical number of base\n            // names is very small, and indexOf is a native Array method.\n            if (bases.indexOf(baseName) < 0) {\n                bases.push(baseName);\n            }\n        });\n        return this; // For chaining.\n    };\n    return Def;\n}();\nexports.Def = Def;\nvar Field = /** @class */ function() {\n    function Field(name, type, defaultFn, hidden) {\n        this.name = name;\n        this.type = type;\n        this.defaultFn = defaultFn;\n        this.hidden = !!hidden;\n    }\n    Field.prototype.toString = function() {\n        return JSON.stringify(this.name) + \": \" + this.type;\n    };\n    Field.prototype.getValue = function(obj) {\n        var value = obj[this.name];\n        if (typeof value !== \"undefined\") {\n            return value;\n        }\n        if (typeof this.defaultFn === \"function\") {\n            value = this.defaultFn.call(obj);\n        }\n        return value;\n    };\n    return Field;\n}();\nfunction shallowStringify(value) {\n    if (Array.isArray(value)) {\n        return \"[\" + value.map(shallowStringify).join(\", \") + \"]\";\n    }\n    if (value && typeof value === \"object\") {\n        return \"{ \" + Object.keys(value).map(function(key) {\n            return key + \": \" + value[key];\n        }).join(\", \") + \" }\";\n    }\n    return JSON.stringify(value);\n}\nfunction typesPlugin(_fork) {\n    var Type = {\n        or: function() {\n            var types = [];\n            for(var _i = 0; _i < arguments.length; _i++){\n                types[_i] = arguments[_i];\n            }\n            return new OrType(types.map(function(type) {\n                return Type.from(type);\n            }));\n        },\n        from: function(value, name) {\n            if (value instanceof ArrayType || value instanceof IdentityType || value instanceof ObjectType || value instanceof OrType || value instanceof PredicateType) {\n                return value;\n            }\n            // The Def type is used as a helper for constructing compound\n            // interface types for AST nodes.\n            if (value instanceof Def) {\n                return value.type;\n            }\n            // Support [ElemType] syntax.\n            if (isArray.check(value)) {\n                if (value.length !== 1) {\n                    throw new Error(\"only one element type is permitted for typed arrays\");\n                }\n                return new ArrayType(Type.from(value[0]));\n            }\n            // Support { someField: FieldType, ... } syntax.\n            if (isObject.check(value)) {\n                return new ObjectType(Object.keys(value).map(function(name) {\n                    return new Field(name, Type.from(value[name], name));\n                }));\n            }\n            if (typeof value === \"function\") {\n                var bicfIndex = builtInCtorFns.indexOf(value);\n                if (bicfIndex >= 0) {\n                    return builtInCtorTypes[bicfIndex];\n                }\n                if (typeof name !== \"string\") {\n                    throw new Error(\"missing name\");\n                }\n                return new PredicateType(name, value);\n            }\n            // As a last resort, toType returns a type that matches any value that\n            // is === from. This is primarily useful for literal values like\n            // toType(null), but it has the additional advantage of allowing\n            // toType to be a total function.\n            return new IdentityType(value);\n        },\n        // Define a type whose name is registered in a namespace (the defCache) so\n        // that future definitions will return the same type given the same name.\n        // In particular, this system allows for circular and forward definitions.\n        // The Def object d returned from Type.def may be used to configure the\n        // type d.type by calling methods such as d.bases, d.build, and d.field.\n        def: function(typeName) {\n            return hasOwn.call(defCache, typeName) ? defCache[typeName] : defCache[typeName] = new DefImpl(typeName);\n        },\n        hasDef: function(typeName) {\n            return hasOwn.call(defCache, typeName);\n        }\n    };\n    var builtInCtorFns = [];\n    var builtInCtorTypes = [];\n    function defBuiltInType(name, example) {\n        var objStr = objToStr.call(example);\n        var type = new PredicateType(name, function(value) {\n            return objToStr.call(value) === objStr;\n        });\n        if (example && typeof example.constructor === \"function\") {\n            builtInCtorFns.push(example.constructor);\n            builtInCtorTypes.push(type);\n        }\n        return type;\n    }\n    // These types check the underlying [[Class]] attribute of the given\n    // value, rather than using the problematic typeof operator. Note however\n    // that no subtyping is considered; so, for instance, isObject.check\n    // returns false for [], /./, new Date, and null.\n    var isString = defBuiltInType(\"string\", \"truthy\");\n    var isFunction = defBuiltInType(\"function\", function() {});\n    var isArray = defBuiltInType(\"array\", []);\n    var isObject = defBuiltInType(\"object\", {});\n    var isRegExp = defBuiltInType(\"RegExp\", /./);\n    var isDate = defBuiltInType(\"Date\", new Date());\n    var isNumber = defBuiltInType(\"number\", 3);\n    var isBoolean = defBuiltInType(\"boolean\", true);\n    var isNull = defBuiltInType(\"null\", null);\n    var isUndefined = defBuiltInType(\"undefined\", undefined);\n    var builtInTypes = {\n        string: isString,\n        function: isFunction,\n        array: isArray,\n        object: isObject,\n        RegExp: isRegExp,\n        Date: isDate,\n        number: isNumber,\n        boolean: isBoolean,\n        null: isNull,\n        undefined: isUndefined\n    };\n    // In order to return the same Def instance every time Type.def is called\n    // with a particular name, those instances need to be stored in a cache.\n    var defCache = Object.create(null);\n    function defFromValue(value) {\n        if (value && typeof value === \"object\") {\n            var type = value.type;\n            if (typeof type === \"string\" && hasOwn.call(defCache, type)) {\n                var d = defCache[type];\n                if (d.finalized) {\n                    return d;\n                }\n            }\n        }\n        return null;\n    }\n    var DefImpl = /** @class */ function(_super) {\n        tslib_1.__extends(DefImpl, _super);\n        function DefImpl(typeName) {\n            var _this = _super.call(this, new PredicateType(typeName, function(value, deep) {\n                return _this.check(value, deep);\n            }), typeName) || this;\n            return _this;\n        }\n        DefImpl.prototype.check = function(value, deep) {\n            if (this.finalized !== true) {\n                throw new Error(\"prematurely checking unfinalized type \" + this.typeName);\n            }\n            // A Def type can only match an object value.\n            if (value === null || typeof value !== \"object\") {\n                return false;\n            }\n            var vDef = defFromValue(value);\n            if (!vDef) {\n                // If we couldn't infer the Def associated with the given value,\n                // and we expected it to be a SourceLocation or a Position, it was\n                // probably just missing a \"type\" field (because Esprima does not\n                // assign a type property to such nodes). Be optimistic and let\n                // this.checkAllFields make the final decision.\n                if (this.typeName === \"SourceLocation\" || this.typeName === \"Position\") {\n                    return this.checkAllFields(value, deep);\n                }\n                // Calling this.checkAllFields for any other type of node is both\n                // bad for performance and way too forgiving.\n                return false;\n            }\n            // If checking deeply and vDef === this, then we only need to call\n            // checkAllFields once. Calling checkAllFields is too strict when deep\n            // is false, because then we only care about this.isSupertypeOf(vDef).\n            if (deep && vDef === this) {\n                return this.checkAllFields(value, deep);\n            }\n            // In most cases we rely exclusively on isSupertypeOf to make O(1)\n            // subtyping determinations. This suffices in most situations outside\n            // of unit tests, since interface conformance is checked whenever new\n            // instances are created using builder functions.\n            if (!this.isSupertypeOf(vDef)) {\n                return false;\n            }\n            // The exception is when deep is true; then, we recursively check all\n            // fields.\n            if (!deep) {\n                return true;\n            }\n            // Use the more specific Def (vDef) to perform the deep check, but\n            // shallow-check fields defined by the less specific Def (this).\n            return vDef.checkAllFields(value, deep) && this.checkAllFields(value, false);\n        };\n        DefImpl.prototype.build = function() {\n            var _this = this;\n            var buildParams = [];\n            for(var _i = 0; _i < arguments.length; _i++){\n                buildParams[_i] = arguments[_i];\n            }\n            // Calling Def.prototype.build multiple times has the effect of merely\n            // redefining this property.\n            this.buildParams = buildParams;\n            if (this.buildable) {\n                // If this Def is already buildable, update self.buildParams and\n                // continue using the old builder function.\n                return this;\n            }\n            // Every buildable type will have its \"type\" field filled in\n            // automatically. This includes types that are not subtypes of Node,\n            // like SourceLocation, but that seems harmless (TODO?).\n            this.field(\"type\", String, function() {\n                return _this.typeName;\n            });\n            // Override Dp.buildable for this Def instance.\n            this.buildable = true;\n            var addParam = function(built, param, arg, isArgAvailable) {\n                if (hasOwn.call(built, param)) return;\n                var all = _this.allFields;\n                if (!hasOwn.call(all, param)) {\n                    throw new Error(\"\" + param);\n                }\n                var field = all[param];\n                var type = field.type;\n                var value;\n                if (isArgAvailable) {\n                    value = arg;\n                } else if (field.defaultFn) {\n                    // Expose the partially-built object to the default\n                    // function as its `this` object.\n                    value = field.defaultFn.call(built);\n                } else {\n                    var message = \"no value or default function given for field \" + JSON.stringify(param) + \" of \" + _this.typeName + \"(\" + _this.buildParams.map(function(name) {\n                        return all[name];\n                    }).join(\", \") + \")\";\n                    throw new Error(message);\n                }\n                if (!type.check(value)) {\n                    throw new Error(shallowStringify(value) + \" does not match field \" + field + \" of type \" + _this.typeName);\n                }\n                built[param] = value;\n            };\n            // Calling the builder function will construct an instance of the Def,\n            // with positional arguments mapped to the fields original passed to .build.\n            // If not enough arguments are provided, the default value for the remaining fields\n            // will be used.\n            var builder = function() {\n                var args = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args[_i] = arguments[_i];\n                }\n                var argc = args.length;\n                if (!_this.finalized) {\n                    throw new Error(\"attempting to instantiate unfinalized type \" + _this.typeName);\n                }\n                var built = Object.create(nodePrototype);\n                _this.buildParams.forEach(function(param, i) {\n                    if (i < argc) {\n                        addParam(built, param, args[i], true);\n                    } else {\n                        addParam(built, param, null, false);\n                    }\n                });\n                Object.keys(_this.allFields).forEach(function(param) {\n                    // Use the default value.\n                    addParam(built, param, null, false);\n                });\n                // Make sure that the \"type\" field was filled automatically.\n                if (built.type !== _this.typeName) {\n                    throw new Error(\"\");\n                }\n                return built;\n            };\n            // Calling .from on the builder function will construct an instance of the Def,\n            // using field values from the passed object. For fields missing from the passed object,\n            // their default value will be used.\n            builder.from = function(obj) {\n                if (!_this.finalized) {\n                    throw new Error(\"attempting to instantiate unfinalized type \" + _this.typeName);\n                }\n                var built = Object.create(nodePrototype);\n                Object.keys(_this.allFields).forEach(function(param) {\n                    if (hasOwn.call(obj, param)) {\n                        addParam(built, param, obj[param], true);\n                    } else {\n                        addParam(built, param, null, false);\n                    }\n                });\n                // Make sure that the \"type\" field was filled automatically.\n                if (built.type !== _this.typeName) {\n                    throw new Error(\"\");\n                }\n                return built;\n            };\n            Object.defineProperty(builders, getBuilderName(this.typeName), {\n                enumerable: true,\n                value: builder\n            });\n            return this;\n        };\n        // The reason fields are specified using .field(...) instead of an object\n        // literal syntax is somewhat subtle: the object literal syntax would\n        // support only one key and one value, but with .field(...) we can pass\n        // any number of arguments to specify the field.\n        DefImpl.prototype.field = function(name, type, defaultFn, hidden) {\n            if (this.finalized) {\n                console.error(\"Ignoring attempt to redefine field \" + JSON.stringify(name) + \" of finalized type \" + JSON.stringify(this.typeName));\n                return this;\n            }\n            this.ownFields[name] = new Field(name, Type.from(type), defaultFn, hidden);\n            return this; // For chaining.\n        };\n        DefImpl.prototype.finalize = function() {\n            var _this = this;\n            // It's not an error to finalize a type more than once, but only the\n            // first call to .finalize does anything.\n            if (!this.finalized) {\n                var allFields = this.allFields;\n                var allSupertypes = this.allSupertypes;\n                this.baseNames.forEach(function(name) {\n                    var def = defCache[name];\n                    if (def instanceof Def) {\n                        def.finalize();\n                        extend(allFields, def.allFields);\n                        extend(allSupertypes, def.allSupertypes);\n                    } else {\n                        var message = \"unknown supertype name \" + JSON.stringify(name) + \" for subtype \" + JSON.stringify(_this.typeName);\n                        throw new Error(message);\n                    }\n                });\n                // TODO Warn if fields are overridden with incompatible types.\n                extend(allFields, this.ownFields);\n                allSupertypes[this.typeName] = this;\n                this.fieldNames.length = 0;\n                for(var fieldName in allFields){\n                    if (hasOwn.call(allFields, fieldName) && !allFields[fieldName].hidden) {\n                        this.fieldNames.push(fieldName);\n                    }\n                }\n                // Types are exported only once they have been finalized.\n                Object.defineProperty(namedTypes, this.typeName, {\n                    enumerable: true,\n                    value: this.type\n                });\n                this.finalized = true;\n                // A linearization of the inheritance hierarchy.\n                populateSupertypeList(this.typeName, this.supertypeList);\n                if (this.buildable && this.supertypeList.lastIndexOf(\"Expression\") >= 0) {\n                    wrapExpressionBuilderWithStatement(this.typeName);\n                }\n            }\n        };\n        return DefImpl;\n    }(Def);\n    // Note that the list returned by this function is a copy of the internal\n    // supertypeList, *without* the typeName itself as the first element.\n    function getSupertypeNames(typeName) {\n        if (!hasOwn.call(defCache, typeName)) {\n            throw new Error(\"\");\n        }\n        var d = defCache[typeName];\n        if (d.finalized !== true) {\n            throw new Error(\"\");\n        }\n        return d.supertypeList.slice(1);\n    }\n    // Returns an object mapping from every known type in the defCache to the\n    // most specific supertype whose name is an own property of the candidates\n    // object.\n    function computeSupertypeLookupTable(candidates) {\n        var table = {};\n        var typeNames = Object.keys(defCache);\n        var typeNameCount = typeNames.length;\n        for(var i = 0; i < typeNameCount; ++i){\n            var typeName = typeNames[i];\n            var d = defCache[typeName];\n            if (d.finalized !== true) {\n                throw new Error(\"\" + typeName);\n            }\n            for(var j = 0; j < d.supertypeList.length; ++j){\n                var superTypeName = d.supertypeList[j];\n                if (hasOwn.call(candidates, superTypeName)) {\n                    table[typeName] = superTypeName;\n                    break;\n                }\n            }\n        }\n        return table;\n    }\n    var builders = Object.create(null);\n    // This object is used as prototype for any node created by a builder.\n    var nodePrototype = {};\n    // Call this function to define a new method to be shared by all AST\n    // nodes. The replaced method (if any) is returned for easy wrapping.\n    function defineMethod(name, func) {\n        var old = nodePrototype[name];\n        // Pass undefined as func to delete nodePrototype[name].\n        if (isUndefined.check(func)) {\n            delete nodePrototype[name];\n        } else {\n            isFunction.assert(func);\n            Object.defineProperty(nodePrototype, name, {\n                enumerable: true,\n                configurable: true,\n                value: func\n            });\n        }\n        return old;\n    }\n    function getBuilderName(typeName) {\n        return typeName.replace(/^[A-Z]+/, function(upperCasePrefix) {\n            var len = upperCasePrefix.length;\n            switch(len){\n                case 0:\n                    return \"\";\n                // If there's only one initial capital letter, just lower-case it.\n                case 1:\n                    return upperCasePrefix.toLowerCase();\n                default:\n                    // If there's more than one initial capital letter, lower-case\n                    // all but the last one, so that XMLDefaultDeclaration (for\n                    // example) becomes xmlDefaultDeclaration.\n                    return upperCasePrefix.slice(0, len - 1).toLowerCase() + upperCasePrefix.charAt(len - 1);\n            }\n        });\n    }\n    function getStatementBuilderName(typeName) {\n        typeName = getBuilderName(typeName);\n        return typeName.replace(/(Expression)?$/, \"Statement\");\n    }\n    var namedTypes = {};\n    // Like Object.keys, but aware of what fields each AST type should have.\n    function getFieldNames(object) {\n        var d = defFromValue(object);\n        if (d) {\n            return d.fieldNames.slice(0);\n        }\n        if (\"type\" in object) {\n            throw new Error(\"did not recognize object of type \" + JSON.stringify(object.type));\n        }\n        return Object.keys(object);\n    }\n    // Get the value of an object property, taking object.type and default\n    // functions into account.\n    function getFieldValue(object, fieldName) {\n        var d = defFromValue(object);\n        if (d) {\n            var field = d.allFields[fieldName];\n            if (field) {\n                return field.getValue(object);\n            }\n        }\n        return object && object[fieldName];\n    }\n    // Iterate over all defined fields of an object, including those missing\n    // or undefined, passing each field name and effective value (as returned\n    // by getFieldValue) to the callback. If the object has no corresponding\n    // Def, the callback will never be called.\n    function eachField(object, callback, context) {\n        getFieldNames(object).forEach(function(name) {\n            callback.call(this, name, getFieldValue(object, name));\n        }, context);\n    }\n    // Similar to eachField, except that iteration stops as soon as the\n    // callback returns a truthy value. Like Array.prototype.some, the final\n    // result is either true or false to indicates whether the callback\n    // returned true for any element or not.\n    function someField(object, callback, context) {\n        return getFieldNames(object).some(function(name) {\n            return callback.call(this, name, getFieldValue(object, name));\n        }, context);\n    }\n    // Adds an additional builder for Expression subtypes\n    // that wraps the built Expression in an ExpressionStatements.\n    function wrapExpressionBuilderWithStatement(typeName) {\n        var wrapperName = getStatementBuilderName(typeName);\n        // skip if the builder already exists\n        if (builders[wrapperName]) return;\n        // the builder function to wrap with builders.ExpressionStatement\n        var wrapped = builders[getBuilderName(typeName)];\n        // skip if there is nothing to wrap\n        if (!wrapped) return;\n        var builder = function() {\n            var args = [];\n            for(var _i = 0; _i < arguments.length; _i++){\n                args[_i] = arguments[_i];\n            }\n            return builders.expressionStatement(wrapped.apply(builders, args));\n        };\n        builder.from = function() {\n            var args = [];\n            for(var _i = 0; _i < arguments.length; _i++){\n                args[_i] = arguments[_i];\n            }\n            return builders.expressionStatement(wrapped.from.apply(builders, args));\n        };\n        builders[wrapperName] = builder;\n    }\n    function populateSupertypeList(typeName, list) {\n        list.length = 0;\n        list.push(typeName);\n        var lastSeen = Object.create(null);\n        for(var pos = 0; pos < list.length; ++pos){\n            typeName = list[pos];\n            var d = defCache[typeName];\n            if (d.finalized !== true) {\n                throw new Error(\"\");\n            }\n            // If we saw typeName earlier in the breadth-first traversal,\n            // delete the last-seen occurrence.\n            if (hasOwn.call(lastSeen, typeName)) {\n                delete list[lastSeen[typeName]];\n            }\n            // Record the new index of the last-seen occurrence of typeName.\n            lastSeen[typeName] = pos;\n            // Enqueue the base names of this type.\n            list.push.apply(list, d.baseNames);\n        }\n        // Compaction loop to remove array holes.\n        for(var to = 0, from = to, len = list.length; from < len; ++from){\n            if (hasOwn.call(list, from)) {\n                list[to++] = list[from];\n            }\n        }\n        list.length = to;\n    }\n    function extend(into, from) {\n        Object.keys(from).forEach(function(name) {\n            into[name] = from[name];\n        });\n        return into;\n    }\n    function finalize() {\n        Object.keys(defCache).forEach(function(name) {\n            defCache[name].finalize();\n        });\n    }\n    return {\n        Type: Type,\n        builtInTypes: builtInTypes,\n        getSupertypeNames: getSupertypeNames,\n        computeSupertypeLookupTable: computeSupertypeLookupTable,\n        builders: builders,\n        defineMethod: defineMethod,\n        getBuilderName: getBuilderName,\n        getStatementBuilderName: getStatementBuilderName,\n        namedTypes: namedTypes,\n        getFieldNames: getFieldNames,\n        getFieldValue: getFieldValue,\n        eachField: eachField,\n        someField: someField,\n        finalize: finalize\n    };\n}\nexports[\"default\"] = typesPlugin;\n;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ast-types/lib/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ast-types/main.js":
/*!****************************************!*\
  !*** ./node_modules/ast-types/main.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.visit = exports.use = exports.Type = exports.someField = exports.PathVisitor = exports.Path = exports.NodePath = exports.namedTypes = exports.getSupertypeNames = exports.getFieldValue = exports.getFieldNames = exports.getBuilderName = exports.finalize = exports.eachField = exports.defineMethod = exports.builtInTypes = exports.builders = exports.astNodesAreEquivalent = void 0;\nvar tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nvar fork_1 = tslib_1.__importDefault(__webpack_require__(/*! ./fork */ \"(rsc)/./node_modules/ast-types/fork.js\"));\nvar core_1 = tslib_1.__importDefault(__webpack_require__(/*! ./def/core */ \"(rsc)/./node_modules/ast-types/def/core.js\"));\nvar es6_1 = tslib_1.__importDefault(__webpack_require__(/*! ./def/es6 */ \"(rsc)/./node_modules/ast-types/def/es6.js\"));\nvar es7_1 = tslib_1.__importDefault(__webpack_require__(/*! ./def/es7 */ \"(rsc)/./node_modules/ast-types/def/es7.js\"));\nvar es2020_1 = tslib_1.__importDefault(__webpack_require__(/*! ./def/es2020 */ \"(rsc)/./node_modules/ast-types/def/es2020.js\"));\nvar jsx_1 = tslib_1.__importDefault(__webpack_require__(/*! ./def/jsx */ \"(rsc)/./node_modules/ast-types/def/jsx.js\"));\nvar flow_1 = tslib_1.__importDefault(__webpack_require__(/*! ./def/flow */ \"(rsc)/./node_modules/ast-types/def/flow.js\"));\nvar esprima_1 = tslib_1.__importDefault(__webpack_require__(/*! ./def/esprima */ \"(rsc)/./node_modules/ast-types/def/esprima.js\"));\nvar babel_1 = tslib_1.__importDefault(__webpack_require__(/*! ./def/babel */ \"(rsc)/./node_modules/ast-types/def/babel.js\"));\nvar typescript_1 = tslib_1.__importDefault(__webpack_require__(/*! ./def/typescript */ \"(rsc)/./node_modules/ast-types/def/typescript.js\"));\nvar es_proposals_1 = tslib_1.__importDefault(__webpack_require__(/*! ./def/es-proposals */ \"(rsc)/./node_modules/ast-types/def/es-proposals.js\"));\nvar namedTypes_1 = __webpack_require__(/*! ./gen/namedTypes */ \"(rsc)/./node_modules/ast-types/gen/namedTypes.js\");\nObject.defineProperty(exports, \"namedTypes\", ({\n    enumerable: true,\n    get: function() {\n        return namedTypes_1.namedTypes;\n    }\n}));\nvar _a = fork_1.default([\n    // This core module of AST types captures ES5 as it is parsed today by\n    // git://github.com/ariya/esprima.git#master.\n    core_1.default,\n    // Feel free to add to or remove from this list of extension modules to\n    // configure the precise type hierarchy that you need.\n    es6_1.default,\n    es7_1.default,\n    es2020_1.default,\n    jsx_1.default,\n    flow_1.default,\n    esprima_1.default,\n    babel_1.default,\n    typescript_1.default,\n    es_proposals_1.default\n]), astNodesAreEquivalent = _a.astNodesAreEquivalent, builders = _a.builders, builtInTypes = _a.builtInTypes, defineMethod = _a.defineMethod, eachField = _a.eachField, finalize = _a.finalize, getBuilderName = _a.getBuilderName, getFieldNames = _a.getFieldNames, getFieldValue = _a.getFieldValue, getSupertypeNames = _a.getSupertypeNames, n = _a.namedTypes, NodePath = _a.NodePath, Path = _a.Path, PathVisitor = _a.PathVisitor, someField = _a.someField, Type = _a.Type, use = _a.use, visit = _a.visit;\nexports.astNodesAreEquivalent = astNodesAreEquivalent;\nexports.builders = builders;\nexports.builtInTypes = builtInTypes;\nexports.defineMethod = defineMethod;\nexports.eachField = eachField;\nexports.finalize = finalize;\nexports.getBuilderName = getBuilderName;\nexports.getFieldNames = getFieldNames;\nexports.getFieldValue = getFieldValue;\nexports.getSupertypeNames = getSupertypeNames;\nexports.NodePath = NodePath;\nexports.Path = Path;\nexports.PathVisitor = PathVisitor;\nexports.someField = someField;\nexports.Type = Type;\nexports.use = use;\nexports.visit = visit;\n// Populate the exported fields of the namedTypes namespace, while still\n// retaining its member types.\nObject.assign(namedTypes_1.namedTypes, n);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ast-types/main.js\n");

/***/ })

};
;