/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/url-template";
exports.ids = ["vendor-chunks/url-template"];
exports.modules = {

/***/ "(rsc)/./node_modules/url-template/lib/url-template.js":
/*!*******************************************************!*\
  !*** ./node_modules/url-template/lib/url-template.js ***!
  \*******************************************************/
/***/ (function(module) {

eval("(function(root, factory) {\n    if (true) {\n        module.exports = factory();\n    } else {}\n})(this, function() {\n    /**\n   * @constructor\n   */ function UrlTemplate() {}\n    /**\n   * @private\n   * @param {string} str\n   * @return {string}\n   */ UrlTemplate.prototype.encodeReserved = function(str) {\n        return str.split(/(%[0-9A-Fa-f]{2})/g).map(function(part) {\n            if (!/%[0-9A-Fa-f]/.test(part)) {\n                part = encodeURI(part).replace(/%5B/g, \"[\").replace(/%5D/g, \"]\");\n            }\n            return part;\n        }).join(\"\");\n    };\n    /**\n   * @private\n   * @param {string} str\n   * @return {string}\n   */ UrlTemplate.prototype.encodeUnreserved = function(str) {\n        return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {\n            return \"%\" + c.charCodeAt(0).toString(16).toUpperCase();\n        });\n    };\n    /**\n   * @private\n   * @param {string} operator\n   * @param {string} value\n   * @param {string} key\n   * @return {string}\n   */ UrlTemplate.prototype.encodeValue = function(operator, value, key) {\n        value = operator === \"+\" || operator === \"#\" ? this.encodeReserved(value) : this.encodeUnreserved(value);\n        if (key) {\n            return this.encodeUnreserved(key) + \"=\" + value;\n        } else {\n            return value;\n        }\n    };\n    /**\n   * @private\n   * @param {*} value\n   * @return {boolean}\n   */ UrlTemplate.prototype.isDefined = function(value) {\n        return value !== undefined && value !== null;\n    };\n    /**\n   * @private\n   * @param {string}\n   * @return {boolean}\n   */ UrlTemplate.prototype.isKeyOperator = function(operator) {\n        return operator === \";\" || operator === \"&\" || operator === \"?\";\n    };\n    /**\n   * @private\n   * @param {Object} context\n   * @param {string} operator\n   * @param {string} key\n   * @param {string} modifier\n   */ UrlTemplate.prototype.getValues = function(context, operator, key, modifier) {\n        var value = context[key], result = [];\n        if (this.isDefined(value) && value !== \"\") {\n            if (typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\") {\n                value = value.toString();\n                if (modifier && modifier !== \"*\") {\n                    value = value.substring(0, parseInt(modifier, 10));\n                }\n                result.push(this.encodeValue(operator, value, this.isKeyOperator(operator) ? key : null));\n            } else {\n                if (modifier === \"*\") {\n                    if (Array.isArray(value)) {\n                        value.filter(this.isDefined).forEach(function(value) {\n                            result.push(this.encodeValue(operator, value, this.isKeyOperator(operator) ? key : null));\n                        }, this);\n                    } else {\n                        Object.keys(value).forEach(function(k) {\n                            if (this.isDefined(value[k])) {\n                                result.push(this.encodeValue(operator, value[k], k));\n                            }\n                        }, this);\n                    }\n                } else {\n                    var tmp = [];\n                    if (Array.isArray(value)) {\n                        value.filter(this.isDefined).forEach(function(value) {\n                            tmp.push(this.encodeValue(operator, value));\n                        }, this);\n                    } else {\n                        Object.keys(value).forEach(function(k) {\n                            if (this.isDefined(value[k])) {\n                                tmp.push(this.encodeUnreserved(k));\n                                tmp.push(this.encodeValue(operator, value[k].toString()));\n                            }\n                        }, this);\n                    }\n                    if (this.isKeyOperator(operator)) {\n                        result.push(this.encodeUnreserved(key) + \"=\" + tmp.join(\",\"));\n                    } else if (tmp.length !== 0) {\n                        result.push(tmp.join(\",\"));\n                    }\n                }\n            }\n        } else {\n            if (operator === \";\") {\n                if (this.isDefined(value)) {\n                    result.push(this.encodeUnreserved(key));\n                }\n            } else if (value === \"\" && (operator === \"&\" || operator === \"?\")) {\n                result.push(this.encodeUnreserved(key) + \"=\");\n            } else if (value === \"\") {\n                result.push(\"\");\n            }\n        }\n        return result;\n    };\n    /**\n   * @param {string} template\n   * @return {function(Object):string}\n   */ UrlTemplate.prototype.parse = function(template) {\n        var that = this;\n        var operators = [\n            \"+\",\n            \"#\",\n            \".\",\n            \"/\",\n            \";\",\n            \"?\",\n            \"&\"\n        ];\n        return {\n            expand: function(context) {\n                return template.replace(/\\{([^\\{\\}]+)\\}|([^\\{\\}]+)/g, function(_, expression, literal) {\n                    if (expression) {\n                        var operator = null, values = [];\n                        if (operators.indexOf(expression.charAt(0)) !== -1) {\n                            operator = expression.charAt(0);\n                            expression = expression.substr(1);\n                        }\n                        expression.split(/,/g).forEach(function(variable) {\n                            var tmp = /([^:\\*]*)(?::(\\d+)|(\\*))?/.exec(variable);\n                            values.push.apply(values, that.getValues(context, operator, tmp[1], tmp[2] || tmp[3]));\n                        });\n                        if (operator && operator !== \"+\") {\n                            var separator = \",\";\n                            if (operator === \"?\") {\n                                separator = \"&\";\n                            } else if (operator !== \"#\") {\n                                separator = operator;\n                            }\n                            return (values.length !== 0 ? operator : \"\") + values.join(separator);\n                        } else {\n                            return values.join(\",\");\n                        }\n                    } else {\n                        return that.encodeReserved(literal);\n                    }\n                });\n            }\n        };\n    };\n    return new UrlTemplate();\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/url-template/lib/url-template.js\n");

/***/ })

};
;